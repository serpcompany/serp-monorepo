[
  {
    "owner": "tusen-ai",
    "repo": "naive-ui",
    "content": "TITLE: 配置暗色主题 - Vue 组件实现\nDESCRIPTION: 通过设置 n-config-provider 的 theme 属性为 darkTheme 来启用暗色主题。示例展示了如何在 Vue 组件中导入和使用暗色主题。\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-config-provider :theme=\"darkTheme\">\n    <app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import { darkTheme } from 'naive-ui'\n\n  export default defineComponent({\n    setup() {\n      return {\n        darkTheme\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: 自定义全局主题变量 - JavaScript 实现\nDESCRIPTION: 通过设置 n-config-provider 的 theme-overrides 属性来自定义全局主题变量。示例展示了如何在 JavaScript 中定义和使用主题变量覆盖对象。\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/zhCN/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { NConfigProvider } from 'naive-ui'\n\n  /**\n   * js 文件下使用这个做类型提示\n   * @type import('naive-ui').GlobalThemeOverrides\n   */\n  const themeOverrides = {\n    common: {\n      primaryColor: '#FF0000'\n    },\n    Button: {\n      textColor: '#FF0000'\n    },\n    Select: {\n      peers: {\n        InternalSelection: {\n          textColor: '#FF0000'\n        }\n      }\n    }\n    // ...\n  }\n\n  // ...\n</script>\n\n<template>\n  <n-config-provider :theme-overrides=\"themeOverrides\">\n    <my-app />\n  </n-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Theme in Naive-UI with Vue and n-config-provider\nDESCRIPTION: This code demonstrates how to set up dark theme in a Naive-UI application by importing the darkTheme from naive-ui and providing it to the n-config-provider component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-config-provider :theme=\"darkTheme\">\n    <app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import { darkTheme } from 'naive-ui'\n\n  export default defineComponent({\n    setup() {\n      return {\n        darkTheme\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: 使用主题编辑器进行实时主题调整\nDESCRIPTION: 集成 NThemeEditor 组件来实现实时主题编辑功能，允许用户在界面上直接调整主题并导出配置。这个组件需要单独引入，不包含在全局安装中。\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/zhCN/index.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-theme-editor>\n    <app />\n  </n-theme-editor>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import { NThemeEditor } from 'naive-ui'\n\n  export default defineComponent({\n    components: {\n      NThemeEditor\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Naive UI Components with JSX in Vue\nDESCRIPTION: Example showing how to import and render a Naive UI button component using JSX syntax with Vue's defineComponent. This demonstrates the recommended approach of direct component imports.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/jsx/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NButton } from 'naive-ui'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  render() {\n    return <NButton>{{ default: () => 'Star Kirby' }}</NButton>\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Theme Component Setup in Vue\nDESCRIPTION: JavaScript setup code for the theme switching functionality, importing necessary components from Naive UI and Vue, and setting up the reactive theme state.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/theme/enUS/provide-theme.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { darkTheme } from 'naive-ui'\nimport { defineComponent, ref } from 'vue'\n\nexport default defineComponent({\n  setup() {\n    return {\n      darkTheme,\n      theme: ref(null)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollTo Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the ScrollTo method that enables various scrolling behaviors in the Virtual List component. Supports scrolling by coordinates, index, key, or position with optional scroll behavior and debounce settings.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/virtual-list/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ScrollTo {\n  (x: number, y: number): void\n  (options: {\n    left?: number\n    top?: number\n    behavior?: ScrollBehavior\n    debounce?: boolean\n  }): void\n  (options: {\n    index: number\n    behavior?: ScrollBehavior\n    debounce?: boolean\n  }): void\n  (options: {\n    key: string | number\n    behavior?: ScrollBehavior\n    debounce?: boolean\n  }): void\n  (options: {\n    position: 'top' | 'bottom'\n    behavior?: ScrollBehavior\n    debounce?: boolean\n  }): void\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Theming Options in Naive UI\nDESCRIPTION: A markdown code block that references three demo examples: 'provide-theme', 'element', and 'use-theme-vars'. These demos illustrate different approaches to creating themed components in Naive UI.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/theme/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nprovide-theme\nelement\nuse-theme-vars\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Variables in Naive-UI with TypeScript\nDESCRIPTION: Implementation of theme customization in Naive-UI using TypeScript with proper type definitions for the GlobalThemeOverrides object.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/enUS/index.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { NConfigProvider, GlobalThemeOverrides } from 'naive-ui'\n\n  const themeOverrides: GlobalThemeOverrides = {\n    common: {\n      primaryColor: '#FF0000'\n    },\n    Button: {\n      textColor: '#FF0000'\n    }\n  }\n\n  // ...\n</script>\n\n<template>\n  <n-config-provider :theme-overrides=\"themeOverrides\">\n    <my-app />\n  </n-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Direct Importing Naive UI Components with Theme and Locale Configuration in Vue\nDESCRIPTION: This snippet demonstrates how to directly import specific Naive UI components, custom dark themes, and localization settings in a Vue component. It shows the setup for ConfigProvider to apply dark theme and Chinese localization to the input and date picker components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/import-on-demand/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { defineComponent } from 'vue'\n  import { NConfigProvider, NInput, NDatePicker, NSpace } from 'naive-ui'\n  // theme\n  import { createTheme, inputDark, datePickerDark } from 'naive-ui'\n  // locale & dateLocale\n  import { zhCN, dateZhCN } from 'naive-ui'\n\n  export default defineComponent({\n    components: {\n      NConfigProvider,\n      NInput,\n      NDatePicker,\n      NSpace\n    },\n    setup() {\n      return {\n        darkTheme: createTheme([inputDark, datePickerDark]),\n        zhCN,\n        dateZhCN\n      }\n    }\n  })\n</script>\n\n<template>\n  <n-config-provider :theme=\"darkTheme\" :locale=\"zhCN\" :date-locale=\"dateZhCN\">\n    <n-space vertical>\n      <n-input />\n      <n-date-picker />\n    </n-space>\n  </n-config-provider>\n</template>\n\n<style>\n  body {\n    background: black;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Manual Component Import with Theme and Locale Configuration in Vue\nDESCRIPTION: Example showing how to manually import specific Naive UI components, dark theme configuration, and Chinese localization. It demonstrates setting up a Vue component with ConfigProvider to apply custom themes and localization.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/import-on-demand/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { defineComponent } from 'vue'\n  import { NConfigProvider, NInput, NDatePicker, NSpace } from 'naive-ui'\n  // theme\n  import { createTheme, inputDark, datePickerDark } from 'naive-ui'\n  // locale & dateLocale\n  import { zhCN, dateZhCN } from 'naive-ui'\n\n  export default defineComponent({\n    components: {\n      NConfigProvider,\n      NInput,\n      NDatePicker,\n      NSpace\n    },\n    setup() {\n      return {\n        darkTheme: createTheme([inputDark, datePickerDark]),\n        zhCN,\n        dateZhCN\n      }\n    }\n  })\n</script>\n\n<template>\n  <n-config-provider :theme=\"darkTheme\" :locale=\"zhCN\" :date-locale=\"dateZhCN\">\n    <n-space vertical>\n      <n-input />\n      <n-date-picker />\n    </n-space>\n  </n-config-provider>\n</template>\n\n<style>\n  body {\n    background: black;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using the Theme Editor in Naive-UI Application\nDESCRIPTION: Implementation of the theme editor component in a Naive-UI application, which helps edit themes and export configurations. The component needs to be imported explicitly.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/enUS/index.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-theme-editor>\n    <app />\n  </n-theme-editor>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import { NThemeEditor } from 'naive-ui'\n\n  export default defineComponent({\n    components: {\n      NThemeEditor\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: 自定义组件级别主题变量 - TypeScript 实现\nDESCRIPTION: 展示了如何为特定组件设置主题变量，这些变量会覆盖全局主题变量。示例中分别为 Select 和 Button 组件设置了自定义主题。\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/zhCN/index.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { SelectProps, ButtonProps } from 'naive-ui'\n\n  type SelectThemeOverrides = NonNullable<SelectProps['themeOverrides']>\n  type ButtonThemeOverrides = NonNullable<ButtonProps['themeOverrides']>\n\n  const selectThemeOverrides: SelectThemeOverrides = {\n    menuBoxShadow:\n      '0 6px 16px -9px rgba(0, 0, 0, .08), 0 9px 28px 0 rgba(0, 0, 0, .05), 0 12px 48px 16px rgba(0, 0, 0, .03)',\n    peers: {\n      InternalSelection: {\n        textColor: '#FF0000',\n        heightMedium: '42px'\n      }\n    }\n  }\n  const buttonThemeOverrides: ButtonThemeOverrides = {\n    heightMedium: '40px',\n    textColor: 'rgba(24, 127, 231, 1)'\n  }\n\n  // ...\n</script>\n\n<template>\n  <n-select\n    v-model:value=\"value\"\n    :options=\"options\"\n    :theme-overrides=\"selectThemeOverrides\"\n  />\n  <n-button :theme-overrides=\"buttonThemeOverrides\">theme</n-button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Variables in Naive-UI with JavaScript\nDESCRIPTION: Example of customizing theme variables in Naive-UI using JavaScript, including both global theme overrides and component-specific overrides for buttons and selects.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { NConfigProvider } from 'naive-ui'\n\n  /**\n   * Use this for type hints under js file\n   * @type import('naive-ui').GlobalThemeOverrides\n   */\n  const themeOverrides = {\n    common: {\n      primaryColor: '#FF0000'\n    },\n    Button: {\n      textColor: '#FF0000'\n    },\n    Select: {\n      peers: {\n        InternalSelection: {\n          textColor: '#FF0000'\n        }\n      }\n    }\n    // ...\n  }\n\n  // ...\n</script>\n\n<template>\n  <n-config-provider :theme-overrides=\"themeOverrides\">\n    <my-app />\n  </n-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Font Weight in HTML\nDESCRIPTION: This snippet demonstrates how to configure the global font weight for Naive UI using the n-config-provider component. It sets the fontWeightStrong property to '600' for the entire app.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/fonts/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- configuring the global font weight -->\n<n-config-provider :theme-overrides=\"{ common: { fontWeightStrong: '600' } }\">\n  <app />\n</n-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization in Naive-UI with Vue\nDESCRIPTION: This code snippet demonstrates how to configure language and date localization in Naive-UI by using n-config-provider with zhCN (Chinese) locale and dateZhCN date locale. The example wraps the entire application with the configuration.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/i18n/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-config-provider :locale=\"zhCN\" :date-locale=\"dateZhCN\">\n    <app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import { NConfigProvider } from 'naive-ui'\n  import { zhCN, dateZhCN } from 'naive-ui'\n\n  export default defineComponent({\n    components: {\n      NConfigProvider\n    },\n    setup() {\n      return {\n        zhCN,\n        dateZhCN\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Naive UI Component with Vue 3 Setup Script\nDESCRIPTION: This example shows how to import and use a Naive UI component (NButton) in a Vue 3 Single File Component using the setup script syntax.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/usage-sfc/zhCN/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-button>naive-ui</n-button>\n</template>\n\n<script setup>\n  import { NButton } from 'naive-ui'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Fonts for Naive UI in JavaScript\nDESCRIPTION: This snippet demonstrates how to import regular and monospace fonts from vfonts in the entry file of a Naive UI application. It includes importing Lato for general use and FiraCode for monospace text.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/fonts/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 你 App 的入口 js 文件\n// ...\n\n// 通用字体\nimport 'vfonts/Lato.css'\n// 等宽字体\nimport 'vfonts/FiraCode.css'\n\nconst app = createApp()\napp.use(naive)\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Interface with Infinite Scroll\nDESCRIPTION: Demo file showing implementation of infinite scroll in a chat interface\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/infinite-scroll/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nchat.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Input in Naive UI\nDESCRIPTION: This snippet shows how to use an n-input component in a controlled manner. The component's value is explicitly set via the :value prop and updated through the @update:value event handler.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/controlled-uncontrolled/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<n-input :value=\"value\" @update:value=\"handleUpdateValue\" />\n```\n\n----------------------------------------\n\nTITLE: Defining DataTable Props Interface in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript interface for the DataTable component props. It includes all available props with their types and descriptions, providing a comprehensive API reference for developers.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ninterface DataTableProps {\n  allowCheckingNotLoaded?: boolean\n  bordered?: boolean\n  bottomBordered?: boolean\n  checkedRowKeys?: Array<string | number>\n  cascade?: boolean\n  childrenKey?: string\n  columns?: Array<DataTableColumn>\n  data?: Array<object>\n  defaultCheckedRowKeys?: Array<string | number>\n  defaultExpandedRowKeys?: Array<string | number>\n  defaultExpandAll?: boolean\n  expandedRowKeys?: Array<string | number>\n  filterIconPopoverProps?: PopoverProps\n  flexHeight?: boolean\n  getCsvCell?: (value: any, row: object, col: DataTableBaseColumn) => string\n  getCsvHeader?: (cols: Array<DataTableColumn>) => string\n  headerHeight?: number\n  heightForRow?: (rowData: object, index: number) => number\n  indent?: number\n  loading?: boolean\n  maxHeight?: number | string\n  minHeight?: number | string\n  minRowHeight?: number\n  paginateSinglePage?: boolean\n  pagination?: false | object\n  paginationBehaviorOnFilter?: 'first' | 'current'\n  remote?: boolean\n  renderCell?: (value: any, rowData: object, column: DataTableBaseColumn) => VNodeChild\n  renderExpandIcon?: ({ expanded, rowData }: { expanded: boolean, rowData: object }) => VNodeChild\n  rowClassName?: string | ((rowData: object, rowIndex: number) => string)\n  rowKey?: (rowData: object) => (number | string)\n  rowProps?: (rowData: object, rowIndex: number) => HTMLAttributes\n  scrollX?: number | string\n  scrollbarProps?: ScrollbarProps\n  singleColumn?: boolean\n  singleLine?: boolean\n  size?: 'small' | 'medium' | 'large'\n  spinProps?: { strokeWidth?: number, stroke?: string }\n  stickyExpandedRows?: boolean\n  striped?: boolean\n  summary?: DataTableCreateSummary\n  summaryPlacement?: 'top' | 'bottom'\n  tableLayout?: 'auto' | 'fixed'\n  virtualScroll?: boolean\n  virtualScrollHeader?: boolean\n  virtualScrollX?: boolean\n  onLoad?: (rowData: object) => Promise<void>\n  onScroll?: (e: Event) => void\n  'onUpdate:checkedRowKeys'?: (keys: Array<string | number>, rows: object[], meta: { row: object | undefined, action: 'check' | 'uncheck' | 'checkAll' | 'uncheckAll' }) => void\n  'onUpdate:expandedRowKeys'?: (keys: Array<string | number>) => void\n  'onUpdate:filters'?: (filters: DataTableFilterState, initiatorColumn: DataTableBaseColumn) => void\n  'onUpdate:page'?: (page: number) => void\n  'onUpdate:pageSize'?: (pageSize: number) => void\n  'onUpdate:sorter'?: (options: DataTableSortState | DataTableSortState[] | null) => void\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Fonts from vfonts in JavaScript\nDESCRIPTION: This snippet shows how to import general and monospace fonts from vfonts in the entry JavaScript file of your app. It demonstrates importing Lato for general font and FiraCode for monospace font.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/fonts/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// entry js file of your app\n// ...\n\n// General Font\nimport 'vfonts/Lato.css'\n// Monospace Font\nimport 'vfonts/FiraCode.css'\n// then it works\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing Naive UI via npm\nDESCRIPTION: Command to install Naive UI as a development dependency using npm.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/installation/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D naive-ui\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Column Sorting in Vue Component\nDESCRIPTION: Vue component implementation with column definitions, sample data, and methods for handling sorting and filtering. Demonstrates multiple column sorting with different priorities using the 'multiple' property and custom compare functions.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/multiple-sorter.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineComponent, ref } from 'vue'\n\nconst columns = [\n  {\n    title: 'Name',\n    key: 'name'\n  },\n  {\n    title: 'Age',\n    key: 'age',\n    sorter: (row1, row2) => row1.age - row2.age\n  },\n  {\n    title: 'Chinese Score',\n    key: 'chinese',\n    defaultSortOrder: false,\n    sorter: {\n      compare: (a, b) => a.chinese - b.chinese,\n      multiple: 3\n    }\n  },\n  {\n    title: 'Math Score',\n    defaultSortOrder: false,\n    key: 'math',\n    sorter: {\n      compare: (a, b) => a.math - b.math,\n      multiple: 2\n    }\n  },\n  {\n    title: 'English Score',\n    defaultSortOrder: false,\n    key: 'english',\n    sorter: {\n      compare: (a, b) => a.english - b.english,\n      multiple: 1\n    }\n  },\n  {\n    title: 'Address',\n    key: 'address',\n    filterOptions: [\n      {\n        label: 'London',\n        value: 'London'\n      },\n      {\n        label: 'New York',\n        value: 'New York'\n      }\n    ],\n    filter(value, row) {\n      return ~row.address.indexOf(value)\n    }\n  }\n]\n\nconst data = [\n  {\n    key: 0,\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n    chinese: 98,\n    math: 60,\n    english: 70\n  },\n  {\n    key: 1,\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n    chinese: 98,\n    math: 66,\n    english: 89\n  },\n  {\n    key: 2,\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n    chinese: 98,\n    math: 66,\n    english: 89\n  },\n  {\n    key: 3,\n    name: 'Jim Red',\n    age: 32,\n    address: 'London No. 2 Lake Park',\n    chinese: 88,\n    math: 99,\n    english: 89\n  }\n]\n\nexport default defineComponent({\n  setup() {\n    const dataTableInstRef = ref(null)\n    return {\n      data,\n      columns,\n      dataTableInst: dataTableInstRef,\n      pagination: ref({ pageSize: 5 }),\n      filterAddress() {\n        dataTableInstRef.value.filter({\n          address: ['London']\n        })\n      },\n      sortName() {\n        dataTableInstRef.value.sort('name', 'ascend')\n      },\n      clearFilters() {\n        dataTableInstRef.value.filter(null)\n      },\n      clearSorter() {\n        dataTableInstRef.value.sort(null)\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt with Auto-Import for Naive UI\nDESCRIPTION: Configuration for nuxt.config.ts to enable auto-importing of Naive UI components and APIs using unplugin-auto-import and unplugin-vue-components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/nuxtjs/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport AutoImport from 'unplugin-auto-import/vite'\nimport { NaiveUiResolver } from 'unplugin-vue-components/resolvers'\nimport Components from 'unplugin-vue-components/vite'\n\n// https://nuxt.com/docs/api/configuration/nuxt-config\nexport default defineNuxtConfig({\n  modules: ['nuxtjs-naive-ui'],\n  vite: {\n    plugins: [\n      AutoImport({\n        imports: [\n          {\n            'naive-ui': [\n              'useDialog',\n              'useMessage',\n              'useNotification',\n              'useLoadingBar'\n            ]\n          }\n        ]\n      }),\n      Components({\n        resolvers: [NaiveUiResolver()]\n      })\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Async Data Table Component Logic Implementation\nDESCRIPTION: Vue component implementation that handles async data loading, sorting, filtering, and pagination for a data table. Includes data generation, query function, and event handlers for various table interactions.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/ajax-usage.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineComponent, onMounted, reactive, ref } from 'vue'\n\nconst column1 = {\n  title: 'column1',\n  key: 'column1',\n  sorter: true,\n  sortOrder: false\n}\n\nconst column2 = {\n  title: 'column2',\n  key: 'column2',\n  filter: true,\n  filterOptionValues: [],\n  filterOptions: [\n    {\n      label: 'Value1',\n      value: 1\n    },\n    {\n      label: 'Value2',\n      value: 2\n    }\n  ]\n}\n\nconst columns = [\n  column1,\n  column2,\n  {\n    title: 'Column3',\n    key: 'column3'\n  }\n]\n\nconst data = Array.from({ length: 987 })\n  .fill(null)\n  .map((_, index) => {\n    return {\n      column1: index,\n      column2: (index % 2) + 1,\n      column3: `a${index}`\n    }\n  })\n\nfunction query(page, pageSize = 10, order = 'ascend', filterValues = []) {\n  return new Promise((resolve) => {\n    const copiedData = data.map(v => v)\n    const orderedData = order === 'descend' ? copiedData.reverse() : copiedData\n    const filteredData = filterValues.length\n      ? orderedData.filter(row => filterValues.includes(row.column2))\n      : orderedData\n    const pagedData = filteredData.slice((page - 1) * pageSize, page * pageSize)\n    const total = filteredData.length\n    const pageCount = Math.ceil(filteredData.length / pageSize)\n    setTimeout(\n      () =>\n        resolve({\n          pageCount,\n          data: pagedData,\n          total\n        }),\n      1500\n    )\n  })\n}\n\nexport default defineComponent({\n  setup() {\n    const dataRef = ref([])\n    const loadingRef = ref(true)\n    const columnsRef = ref(columns)\n    const column1Reactive = reactive(column1)\n    const column2Reactive = reactive(column2)\n    const paginationReactive = reactive({\n      page: 1,\n      pageCount: 1,\n      pageSize: 10,\n      prefix({ itemCount }) {\n        return `Total is ${itemCount}.`\n      }\n    })\n\n    onMounted(() => {\n      query(\n        paginationReactive.page,\n        paginationReactive.pageSize,\n        column1Reactive.sortOrder,\n        column2Reactive.filterOptionValues\n      ).then((data) => {\n        dataRef.value = data.data\n        paginationReactive.pageCount = data.pageCount\n        paginationReactive.itemCount = data.total\n        loadingRef.value = false\n      })\n    })\n\n    return {\n      data: dataRef,\n      columns: columnsRef,\n      column1: column1Reactive,\n      column2: column2Reactive,\n      pagination: paginationReactive,\n      loading: loadingRef,\n      rowKey(rowData) {\n        return rowData.column1\n      },\n      handleSorterChange(sorter) {\n        if (!sorter || sorter.columnKey === 'column1') {\n          if (!loadingRef.value) {\n            loadingRef.value = true\n            query(\n              paginationReactive.page,\n              paginationReactive.pageSize,\n              !sorter ? false : sorter.order,\n              column2Reactive.filterOptionValues\n            ).then((data) => {\n              column1Reactive.sortOrder = !sorter ? false : sorter.order\n              dataRef.value = data.data\n              paginationReactive.pageCount = data.pageCount\n              paginationReactive.itemCount = data.total\n              loadingRef.value = false\n            })\n          }\n        }\n      },\n      handleFiltersChange(filters) {\n        if (!loadingRef.value) {\n          loadingRef.value = true\n          const filterValues = filters.column2 || []\n          query(\n            paginationReactive.page,\n            paginationReactive.pageSize,\n            column1Reactive.sortOrder,\n            filterValues\n          ).then((data) => {\n            column2Reactive.filterOptionValues = filterValues\n            dataRef.value = data.data\n            paginationReactive.pageCount = data.pageCount\n            paginationReactive.itemCount = data.total\n            loadingRef.value = false\n          })\n        }\n      },\n      handlePageChange(currentPage) {\n        if (!loadingRef.value) {\n          loadingRef.value = true\n          query(\n            currentPage,\n            paginationReactive.pageSize,\n            column1Reactive.sortOrder,\n            column2Reactive.filterOptionValues\n          ).then((data) => {\n            dataRef.value = data.data\n            paginationReactive.page = currentPage\n            paginationReactive.pageCount = data.pageCount\n            paginationReactive.itemCount = data.total\n            loadingRef.value = false\n          })\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Internationalization in Naive UI\nDESCRIPTION: This code demonstrates how to configure the n-config-provider component to set the locale and date-locale properties for internationalization in a Vue application using Naive UI.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/i18n/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-config-provider :locale=\"enUS\" :date-locale=\"dateEnUS\">\n    <app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import { NConfigProvider } from 'naive-ui'\n  import { enUS, dateEnUS } from 'naive-ui'\n\n  export default defineComponent({\n    components: {\n      NConfigProvider\n    },\n    setup() {\n      return {\n        enUS,\n        dateEnUS\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Different Theme Variables for Light and Dark Themes in Naive-UI\nDESCRIPTION: Implementation showing how to apply different theme overrides depending on whether light or dark theme is active.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/enUS/index.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { NConfigProvider, darkTheme } from 'naive-ui'\n\n  /**\n   * @type import('naive-ui').GlobalThemeOverrides\n   */\n  const lightThemeOverrides = {\n    common: {\n      primaryColor: '#000000'\n    }\n    // ...\n  }\n\n  const darkThemeOverrides = {\n    common: {\n      primaryColor: '#FFFFFF'\n    }\n    // ...\n  }\n\n  const theme = null\n  // ...\n</script>\n\n<template>\n  <n-config-provider\n    :theme=\"theme\"\n    :theme-overrides=\"theme === null ? lightThemeOverrides : darkThemeOverrides\"\n  >\n    <my-app />\n  </n-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Naive UI via npm\nDESCRIPTION: Command to install Naive UI as a development dependency using npm. Note that Naive UI only supports Vue 3.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/installation/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D naive-ui\n```\n\n----------------------------------------\n\nTITLE: Defining Year Type Props in TypeScript\nDESCRIPTION: TypeScript interface for Year type props in the DatePicker component. Includes properties for actions, format, date validation, placeholder, and value update callbacks.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/date-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface YearProps {\n  actions?: Array<'clear' | 'now'> | null\n  format?: string\n  isDateDisabled?: (current: number, detail: { type: 'date', year: number, month: number, date: number } | { type: 'month', year: number, month: number } | { type: 'year', year: number } | { type: 'quarter',  year: number, quarter: number } | { type: 'input' }) => boolean\n  placeholder?: string\n  onUpdateFormattedValue?: (value: string | null, timestampValue: number | null) => void\n  onUpdateValue?: (value: number | null, formattedValue: string | null) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Discrete API in TypeScript\nDESCRIPTION: TypeScript function signature for createDiscreteApi method that allows creating standalone instances of Naive UI utilities like message, dialog, notification, and loadingBar. The function accepts an array of components to include and configuration options for various providers.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/discrete/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createDiscreteApi(\n  includes: Array<'message' | 'dialog' | 'notification' | 'loadingBar'>,\n  options: {\n    configProviderProps: Ref<ConfigProviderProps> | ConfigProviderProps\n    messageProviderProps: Ref<MessageProviderProps> | MessageProviderProps\n    dialogProviderProps: Ref<DialogProviderProps> | DialogProviderProps\n    notificationProviderProps:\n      | Ref<NotificationProviderProps>\n      | NotificationProviderProps\n    modalProviderProps: Ref<ModalProviderProps> | ModalProviderProps\n    loadingBarProviderProps:\n      | Ref<LoadingBarProviderProps>\n      | LoadingBarProviderProps\n  }\n): {\n  // only API specified in `includes` will be created\n    message: MessageApi\n    dialog: DialogApi\n    notification: NotificationApi\n    loadingBar: LoadingBarApi\n    modal: ModalApi\n    // Vue app\n    app: App\n    unmount: () => void\n  } {}\n```\n\n----------------------------------------\n\nTITLE: Customizing Component-Specific Theme Variables in Naive-UI\nDESCRIPTION: Example showing how to override theme variables for specific components (Select and Button) using TypeScript with proper type definitions from props.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/enUS/index.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { SelectProps, ButtonProps } from 'naive-ui'\n\n  type SelectThemeOverrides = NonNullable<SelectProps['themeOverrides']>\n  type ButtonThemeOverrides = NonNullable<ButtonProps['themeOverrides']>\n\n  const selectThemeOverrides: SelectThemeOverrides = {\n    menuBoxShadow:\n      '0 6px 16px -9px rgba(0, 0, 0, .08), 0 9px 28px 0 rgba(0, 0, 0, .05), 0 12px 48px 16px rgba(0, 0, 0, .03)',\n    peers: {\n      InternalSelection: {\n        textColor: '#FF0000',\n        heightMedium: '42px'\n      }\n    }\n  }\n  const buttonThemeOverrides: ButtonThemeOverrides = {\n    heightMedium: '40px',\n    textColor: 'rgba(24, 127, 231, 1)'\n  }\n\n  // ...\n</script>\n\n<template>\n  <n-select\n    v-model:value=\"value\"\n    :options=\"options\"\n    :theme-overrides=\"selectThemeOverrides\"\n  />\n  <n-button :theme-overrides=\"buttonThemeOverrides\">theme</n-button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Peers Variables for Nested Components in Naive-UI\nDESCRIPTION: Example of customizing theme variables for nested components using the peers property in GlobalThemeOverrides for Select and DataTable components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/enUS/index.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { NConfigProvider, GlobalThemeOverrides } from 'naive-ui'\n\n  const themeOverrides: GlobalThemeOverrides = {\n    Select: {\n      peers: {\n        InternalSelection: {\n          textColor: '#FF0000'\n        },\n        InternalSelectMenu: {\n          borderRadius: '6px'\n        }\n      }\n    },\n    DataTable: {\n      paginationMargin: '40px 0 0 0',\n      peers: {\n        Empty: {\n          textColor: '#ccc'\n        },\n        Pagination: {\n          itemTextColor: '#ccc'\n        }\n      }\n    }\n    // ...\n  }\n  // ...\n</script>\n\n<template>\n  <n-config-provider :theme-overrides=\"themeOverrides\">\n    <my-app />\n  </n-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Table Component Logic\nDESCRIPTION: Vue component implementation that creates an editable data table with switchable cell editing functionality. Includes data generation, pagination handling, and custom cell rendering with edit capabilities.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/switchable-editable.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NInput } from 'naive-ui'\nimport { computed, defineComponent, h, nextTick, ref } from 'vue'\n\nfunction createData() {\n  return Array.from({ length: 100 }).map((_, index) => ({\n    key: index,\n    name: `John Brown ${index}`,\n    age: (Math.random() * 40) | 0,\n    address: `New York No. ${index} Lake Park`\n  }))\n}\n\nconst ShowOrEdit = defineComponent({\n  props: {\n    value: [String, Number],\n    onUpdateValue: [Function, Array]\n  },\n  setup(props) {\n    const isEdit = ref(false)\n    const inputRef = ref(null)\n    const inputValue = ref(props.value)\n    function handleOnClick() {\n      isEdit.value = true\n      nextTick(() => {\n        inputRef.value.focus()\n      })\n    }\n    function handleChange() {\n      props.onUpdateValue(inputValue.value)\n      isEdit.value = false\n    }\n    return () =>\n      h(\n        'div',\n        {\n          style: 'min-height: 22px',\n          onClick: handleOnClick\n        },\n        isEdit.value\n          ? h(NInput, {\n              ref: inputRef,\n              value: inputValue.value,\n              onUpdateValue: (v) => {\n                inputValue.value = v\n              },\n              onChange: handleChange,\n              onBlur: handleChange\n            })\n          : props.value\n      )\n  }\n})\n\nexport default defineComponent({\n  setup() {\n    const data = ref(createData())\n\n    const getDataIndex = (key) => {\n      return data.value.findIndex(item => item.key === key)\n    }\n    const page = ref(1)\n\n    const handlePageChange = (curPage) => {\n      page.value = curPage\n    }\n\n    const paginationRef = computed(() => ({\n      pageSize: 10,\n      page: page.value\n    }))\n\n    return {\n      data,\n      paginationRef,\n      handlePageChange,\n      columns: [\n        {\n          title: 'Name',\n          key: 'name',\n          width: 150,\n          render(row) {\n            const index = getDataIndex(row.key)\n            return h(ShowOrEdit, {\n              value: row.name,\n              onUpdateValue(v) {\n                data.value[index].name = v\n              }\n            })\n          }\n        },\n        {\n          title: 'Age',\n          key: 'age',\n          width: 100,\n          render(row) {\n            const index = getDataIndex(row.key)\n            return h(ShowOrEdit, {\n              value: row.age,\n              onUpdateValue(v) {\n                data.value[index].age = v\n              }\n            })\n          }\n        },\n        {\n          title: 'Address',\n          key: 'address',\n          render(row) {\n            const index = getDataIndex(row.key)\n            return h(ShowOrEdit, {\n              value: row.address,\n              onUpdateValue(v) {\n                data.value[index].address = v\n              }\n            })\n          }\n        }\n      ]\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Message API in Vue Component\nDESCRIPTION: Demonstrates how to use the useMessage hook to access message API within a Vue component's setup function.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/message/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { useMessage } from 'naive-ui'\nimport { defineComponent } from 'vue'\n\n// content\nexport default defineComponent({\n  setup() {\n    const message = useMessage()\n    return {\n      warning() {\n        message.warning('...')\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Global Component Installation in Vue Application\nDESCRIPTION: Example of manually installing Naive UI components globally in a Vue application. This approach allows using components directly in templates without importing them in each component file.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/import-on-demand/zhCN/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  // create naive ui\n  create,\n  // component\n  NButton\n} from 'naive-ui'\nimport { createApp } from 'vue'\n\nconst naive = create({\n  components: [NButton]\n})\n\nconst app = createApp()\napp.use(naive)\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker Slots in TypeScript\nDESCRIPTION: TypeScript interface for DatePicker slots. Includes slots for various icons and footer content.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/date-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DatePickerSlots {\n  dateIcon?: () => VNodeChild\n  footer?: () => VNodeChild\n  nextMonth?: () => VNodeChild\n  nextYear?: () => VNodeChild\n  prevMonth?: () => VNodeChild\n  prevYear?: () => VNodeChild\n  separator?: () => VNodeChild\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Using n-config-provider in Naive UI\nDESCRIPTION: Template markup showing how to implement theme switching using n-config-provider component with nested card and buttons for toggling between dark and light themes.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/theme/enUS/provide-theme.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-config-provider :theme=\"theme\">\n  <n-card>\n    <n-space>\n      <n-button @click=\"theme = darkTheme\">Dark</n-button>\n      <n-button @click=\"theme = null\">Light</n-button>\n    </n-space>\n  </n-card>\n</n-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Inserting Naive UI Style Meta Tag in TypeScript\nDESCRIPTION: This TypeScript code shows how to dynamically insert a meta tag for Naive UI styles just before mounting the Vue application. This method is useful when static HTML modification doesn't work due to toolchain behavior that inserts Tailwind styles at the end of the head tag.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/style-conflict/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst meta = document.createElement('meta')\nmeta.name = 'naive-ui-style'\ndocument.head.appendChild(meta)\n\nvueApp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Form Component in Vue\nDESCRIPTION: This snippet demonstrates how to import and use the Form component in a Vue file. It includes multiple examples of Form usage.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/form/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\ninline.vue\ncustom-rule.vue\nabnormal-warning.vue\ncustom-validation.vue\ni18n.vue\ntop.vue\nleft.vue\nitem-only.vue\nasync.vue\ndisabled.vue\nshow-label.vue\npartially-apply-rules.vue\ncustom-messages.vue\ndynamic.vue\nfeedback-style.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Form Usage in Vue\nDESCRIPTION: A series of Vue component examples showcasing different Form functionalities, including inline forms, custom rules, validation, internationalization, and dynamic forms.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/form/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\ninline.vue\ncustom-rule.vue\nabnormal-warning.vue\ncustom-validation.vue\ni18n.vue\ntop.vue\nleft.vue\nitem-only.vue\nasync.vue\ndisabled.vue\nshow-label.vue\npartially-apply-rules.vue\ncustom-messages.vue\ndynamic.vue\nfeedback-style.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Automatic Component Import Configuration with Vite\nDESCRIPTION: Vite configuration to automatically import Naive UI components and APIs using unplugin-auto-import and unplugin-vue-components. This setup eliminates the need for manual imports, improving development experience.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/import-on-demand/zhCN/index.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport vue from '@vitejs/plugin-vue'\nimport AutoImport from 'unplugin-auto-import/vite'\nimport { NaiveUiResolver } from 'unplugin-vue-components/resolvers'\nimport Components from 'unplugin-vue-components/vite'\n// vite.config.ts\nimport { defineConfig } from 'vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    vue(),\n    AutoImport({\n      imports: [\n        'vue',\n        {\n          'naive-ui': [\n            'useDialog',\n            'useMessage',\n            'useNotification',\n            'useLoadingBar'\n          ]\n        }\n      ]\n    }),\n    Components({\n      resolvers: [NaiveUiResolver()]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Globally Installed Components in Vue Template\nDESCRIPTION: Example showing how to use globally installed Naive UI components in a Vue single-file component template without importing them first.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/import-on-demand/zhCN/index.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-button>naive-ui</n-button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Time Picker Props Overview\nDESCRIPTION: Detailed definition of configurable properties for the Time Picker component, including time formatting, disabled states, and interaction controls\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/time-picker/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TimePickerProps {\n  actions?: Array<'clear' | 'now' | 'confirm'> | null\n  clearable?: boolean\n  defaultValue?: number | null\n  format?: string\n  disabled?: boolean\n  // Additional props...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Naive UI Component in Vue SFC\nDESCRIPTION: This snippet demonstrates how to import and use a Naive UI component (NButton) directly in a Vue Single File Component. It shows the template and script sections, including component registration.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/usage-sfc/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-button>naive-ui</n-button>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import { NButton } from 'naive-ui'\n\n  export default defineComponent({\n    components: {\n      NButton\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Naive UI Component with Vue Setup Script\nDESCRIPTION: This example shows how to use a Naive UI component (NButton) in a Vue Single File Component using the setup script syntax. It simplifies the import and usage process.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/usage-sfc/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-button>naive-ui</n-button>\n</template>\n\n<script setup>\n  import { NButton } from 'naive-ui'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Theme Switching Functionality in Vue\nDESCRIPTION: This JavaScript snippet shows how to set up the component's logic for theme switching. It imports the darkTheme from Naive UI and uses Vue's composition API to create a reactive theme reference that can be toggled between dark and light themes.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/theme/enUS/element.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { darkTheme } from 'naive-ui'\nimport { defineComponent, ref } from 'vue'\n\nexport default defineComponent({\n  setup() {\n    return {\n      darkTheme,\n      theme: ref(null)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for SSR with Naive UI\nDESCRIPTION: Vite configuration setup for SSR support with Naive UI, including CSS rendering collection and HTML injection. Specifies noExternal dependencies and implements page rendering hooks.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/vite-ssge/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setup } from '@css-render/vue3-ssr'\n\ndefineConfig({\n  ssr: {\n    noExternal: ['naive-ui', 'vueuc', 'date-fns']\n  },\n  ssgOptions: {\n    async onBeforePageRender(_, __, appCtx) {\n      const { collect } = setup(appCtx.app)\n      ;(appCtx as any).__collectStyle = collect\n      return undefined\n    },\n    async onPageRendered(_, renderedHTML, appCtx) {\n      return renderedHTML.replace(\n        /<\\/head>/,\n        `${(appCtx as any).__collectStyle()}</head>`\n      )\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Table with Merged Cells in Vue.js\nDESCRIPTION: Complex implementation of data table functionality including column definitions with merge cell capabilities, custom renderers for tags and actions, and data creation. Uses Vue.js composition API with Naive UI components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/merge-cell.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NButton, NTag, useMessage } from 'naive-ui'\nimport { defineComponent, h } from 'vue'\n\nfunction createColumns({ sendMail }) {\n  return [\n    {\n      title: 'Name',\n      key: 'name',\n      rowSpan: (rowData, rowIndex) => (rowIndex === 0 ? 2 : 1),\n      colSpan: (rowData, rowIndex) => (rowIndex === 0 ? 2 : 1)\n    },\n    {\n      title: 'Age',\n      key: 'age'\n    },\n    {\n      title: 'Address',\n      key: 'address',\n      colSpan: (rowData, rowIndex) => (rowIndex === 2 ? 2 : 1)\n    },\n    {\n      title: 'Tags',\n      key: 'tags',\n      render(row) {\n        const tags = row.tags.map((tagKey) => {\n          return h(\n            NTag,\n            {\n              style: {\n                marginRight: '6px'\n              },\n              type: 'info',\n              bordered: false\n            },\n            {\n              default: () => tagKey\n            }\n          )\n        })\n        return tags\n      }\n    },\n    {\n      title: 'Action',\n      key: 'actions',\n      rowSpan: (rowData, rowIndex) => (rowIndex === 0 ? 2 : 1),\n      render(row) {\n        return h(\n          NButton,\n          {\n            size: 'small',\n            onClick: () => sendMail(row)\n          },\n          { default: () => 'Send Email' }\n        )\n      }\n    }\n  ]\n}\n\nfunction createData() {\n  return [\n    {\n      key: 0,\n      name: 'John Brown',\n      age: 32,\n      address: 'New York No. 1 Lake Park',\n      tags: ['nice', 'developer']\n    },\n    {\n      key: 1,\n      name: 'Jim Green',\n      age: 42,\n      address: 'London No. 1 Lake Park',\n      tags: ['wow']\n    },\n    {\n      key: 2,\n      name: 'Joe Black',\n      age: 32,\n      address: 'Sidney No. 1 Lake Park',\n      tags: ['cool', 'teacher']\n    }\n  ]\n}\n\nexport default defineComponent({\n  setup() {\n    const message = useMessage()\n    return {\n      data: createData(),\n      columns: createColumns({\n        sendMail(rowData) {\n          message.info(`send mail to ${rowData.name}`)\n        }\n      }),\n      pagination: {\n        pageSize: 10\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Preflight Styles in Naive UI\nDESCRIPTION: Example of using the n-config-provider component to disable Naive UI's global CSS styles (preflight styles) that are automatically created when mounting any component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/style-conflict/zhCN/index.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<n-config-provider preflight-style-disabled>\n  <your-app />\n</n-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Rendering Naive UI Data Table with Custom Columns\nDESCRIPTION: This snippet shows how to render a Naive UI data table component with custom columns and pagination. It uses the :columns, :data, and :pagination props to configure the table.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/render-header.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table :columns=\"columns\" :data=\"data\" :pagination=\"pagination\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Existing Locale in Naive-UI\nDESCRIPTION: This code shows how to use createLocale to extend or override the default locale configurations. It creates a customized locale based on zhCN with a specific placeholder text for Input components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/i18n/zhCN/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-config-provider :locale=\"locale\" :date-locale=\"dateZhCN\">\n    <app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import { NConfigProvider, createLocale, zhCN } from 'naive-ui'\n  import { zhCN, dateZhCN } from 'naive-ui'\n\n  const customizedLocale = createLocale(\n    {\n      Input: {\n        placeholder: '不提申请不构成加班'\n      }\n    },\n    zhCN\n  )\n\n  export default defineComponent({\n    components: {\n      NConfigProvider\n    },\n    setup() {\n      return {\n        locale: customizedLocale,\n        dateZhCN\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Multi-Column Sorting in Vue.js\nDESCRIPTION: This JavaScript code defines a Vue.js component that implements controlled multi-column sorting for a Naive UI data table. It sets up reactive references for sort states, computes column definitions with sort orders, and handles sorting updates.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/controlled-multiple-sorter.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { computed, defineComponent, ref } from 'vue'\n\nconst data = [\n  {\n    key: 0,\n    name: 'John Brown',\n    age: 32,\n    chinese: 98,\n    math: 60,\n    english: 70\n  },\n  {\n    key: 1,\n    name: 'Jim Green',\n    age: 42,\n    chinese: 98,\n    math: 66,\n    english: 89\n  },\n  {\n    key: 2,\n    name: 'Joe Black',\n    age: 32,\n    chinese: 98,\n    math: 66,\n    english: 89\n  },\n  {\n    key: 3,\n    name: 'Jim Red',\n    age: 32,\n    chinese: 88,\n    math: 99,\n    english: 89\n  }\n]\n\nexport default defineComponent({\n  setup() {\n    const sortStatesRef = ref([])\n    const sortKeyMapOrderRef = computed(() =>\n      sortStatesRef.value.reduce((result, { columnKey, order }) => {\n        result[columnKey] = order\n        return result\n      }, {})\n    )\n    const paginationRef = ref({ pageSize: 5 })\n\n    const columnsRef = computed(() => [\n      {\n        title: 'Name',\n        key: 'name'\n      },\n      {\n        title: 'Age',\n        key: 'age',\n        sortOrder: sortKeyMapOrderRef.value.age || false,\n        sorter(rowA, rowB) {\n          return rowA.age - rowB.age\n        }\n      },\n      {\n        title: 'Chinese Score',\n        key: 'chinese',\n        sortOrder: sortKeyMapOrderRef.value.chinese || false,\n        sorter: {\n          compare: (a, b) => a.chinese - b.chinese,\n          multiple: 3\n        }\n      },\n      {\n        title: 'Math Score',\n        key: 'math',\n        sortOrder: sortKeyMapOrderRef.value.math || false,\n        sorter: {\n          compare: (a, b) => a.math - b.math,\n          multiple: 2\n        }\n      },\n      {\n        title: 'English Score',\n        sortOrder: sortKeyMapOrderRef.value.english || false,\n        key: 'english',\n        sorter: {\n          compare: (a, b) => a.english - b.english,\n          multiple: 1\n        }\n      }\n    ])\n\n    function handleUpdateSorter(sorters) {\n      console.log(sorters)\n      sortStatesRef.value = [].concat(sorters)\n    }\n    return {\n      columns: columnsRef,\n      handleUpdateSorter,\n      data,\n      pagination: paginationRef\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Menu Component Demo References\nDESCRIPTION: Demo references listing various example implementations of the menu component including horizontal layout, selection, rendering, expansion, indentation, collapse, inverted style, and router integration.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/menu/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nhorizontal.vue\nselect.vue\nrender-label.vue\ndefault-expanded-keys.vue\nindent.vue\ncollapse.vue\ninverted.vue\nlong-label.vue\naccordion.vue\nrouter-link.vue\ncustomize-field.vue\nexpand-selected-option.vue\nshow.vue\n```\n\n----------------------------------------\n\nTITLE: Configuring highlight.js with Naive UI Code Component\nDESCRIPTION: Demonstrates how to set up highlight.js with the Code component using n-config-provider. Shows importing highlight.js core and registering a specific language (JavaScript) for syntax highlighting.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/code/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <n-config-provider :hljs=\"hljs\">\n    <my-app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import hljs from 'highlight.js/lib/core'\n  import javascript from 'highlight.js/lib/languages/javascript'\n\n  hljs.registerLanguage('javascript', javascript)\n\n  export default defineComponent({\n    setup() {\n      return {\n        hljs\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Existing Locale in Naive UI\nDESCRIPTION: This example shows how to use the createLocale function to customize an existing locale in Naive UI. It demonstrates overriding specific component text while maintaining the rest of the locale settings.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/i18n/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-config-provider :locale=\"locale\" :date-locale=\"dateEnUS\">\n    <app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import { NConfigProvider, createLocale, enUS } from 'naive-ui'\n  import { enUS, dateEnUS } from 'naive-ui'\n\n  const customizedLocale = createLocale(\n    {\n      Input: {\n        placeholder: 'Okay'\n      }\n    },\n    enUS\n  )\n\n  export default defineComponent({\n    components: {\n      NConfigProvider\n    },\n    setup() {\n      return {\n        locale: customizedLocale,\n        dateEnUS\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining DataTableFilterState Type in TypeScript\nDESCRIPTION: Specifies the structure of the DataTableFilterState interface, which represents the filtering state of data table columns.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/index.demo-entry.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DataTableFilterState {\n  [key: string]: Array<string | number> | string | number | null | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Data Table Configuration and Logic\nDESCRIPTION: Vue component setup with column definitions, data structure, and sorting/filtering methods. Implements multi-column sorting with priority levels and address filtering\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/multiple-sorter.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineComponent, ref } from 'vue'\n\nconst columns = [\n  {\n    title: 'Name',\n    key: 'name'\n  },\n  {\n    title: 'Age',\n    key: 'age',\n    sorter: (row1, row2) => row1.age - row2.age\n  },\n  {\n    title: 'Chinese Score',\n    key: 'chinese',\n    defaultSortOrder: false,\n    sorter: {\n      compare: (a, b) => a.chinese - b.chinese,\n      multiple: 3\n    }\n  },\n  {\n    title: 'Math Score',\n    defaultSortOrder: false,\n    key: 'math',\n    sorter: {\n      compare: (a, b) => a.math - b.math,\n      multiple: 2\n    }\n  },\n  {\n    title: 'English Score',\n    defaultSortOrder: false,\n    key: 'english',\n    sorter: {\n      compare: (a, b) => a.english - b.english,\n      multiple: 1\n    }\n  },\n  {\n    title: 'Address',\n    key: 'address',\n    filterOptions: [\n      {\n        label: 'London',\n        value: 'London'\n      },\n      {\n        label: 'New York',\n        value: 'New York'\n      }\n    ],\n    filter(value, row) {\n      return ~row.address.indexOf(value)\n    }\n  }\n]\n\nconst data = [\n  {\n    key: 0,\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n    chinese: 98,\n    math: 60,\n    english: 70\n  },\n  {\n    key: 1,\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n    chinese: 98,\n    math: 66,\n    english: 89\n  },\n  {\n    key: 2,\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n    chinese: 98,\n    math: 66,\n    english: 89\n  },\n  {\n    key: 3,\n    name: 'Jim Red',\n    age: 32,\n    address: 'London No. 2 Lake Park',\n    chinese: 88,\n    math: 99,\n    english: 89\n  }\n]\n\nexport default defineComponent({\n  setup() {\n    const dataTableInstRef = ref(null)\n    return {\n      data,\n      columns,\n      dataTableInst: dataTableInstRef,\n      pagination: ref({ pageSize: 5 }),\n      filterAddress() {\n        dataTableInstRef.value.filter({\n          address: ['London']\n        })\n      },\n      sortName() {\n        dataTableInstRef.value.sort('name', 'ascend')\n      },\n      clearFilters() {\n        dataTableInstRef.value.filter(null)\n      },\n      clearSorter() {\n        dataTableInstRef.value.sort(null)\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: 自定义全局主题变量 - TypeScript 实现\nDESCRIPTION: 展示了如何在 TypeScript 环境下使用类型化的主题变量。通过导入 GlobalThemeOverrides 类型来确保类型安全的主题配置。\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/zhCN/index.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { NConfigProvider, GlobalThemeOverrides } from 'naive-ui'\n\n  const themeOverrides: GlobalThemeOverrides = {\n    common: {\n      primaryColor: '#FF0000'\n    },\n    Button: {\n      textColor: '#FF0000'\n    }\n  }\n\n  // ...\n</script>\n\n<template>\n  <n-config-provider :theme-overrides=\"themeOverrides\">\n    <my-app />\n  </n-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Controlling Style Element Placement with Meta Tags in HTML\nDESCRIPTION: Example of how to control where Naive UI and vueuc styles are inserted in the document head using meta tags. This helps prevent style conflicts with other CSS frameworks.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/style-conflict/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <xxx />\n  <!-- naive-ui 的样式会出现在这里 -->\n  <meta name=\"naive-ui-style\" />\n  <!-- vueuc 的样式会出现在这里 -->\n  <meta name=\"vueuc-style\" />\n  <xxx />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled Input in Naive UI\nDESCRIPTION: This snippet demonstrates how to use an n-input component in an uncontrolled manner. The component's value is managed internally, and changes are listened to via the @update:value event.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/controlled-uncontrolled/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-input @update:value=\"handleUpdateValue\" />\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Browsers for Naive UI\nDESCRIPTION: This snippet lists the modern browsers that are tested and supported by Naive UI. It mentions Edge, Firefox, Chrome, and Safari, indicating that the latest two versions of each are tested.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/supported-platforms/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nModern browsers such as `Edge`, `Firefox`, `Chrome`, `Safari` are tested on the latest 2 versions.\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Import Plugins for Naive UI in Vite\nDESCRIPTION: This snippet shows how to set up Vite plugins for automatic importing of Naive UI components and APIs. It uses unplugin-auto-import for Vue and Naive UI APIs, and unplugin-vue-components with NaiveUiResolver for component auto-importing.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/import-on-demand/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport vue from '@vitejs/plugin-vue'\nimport AutoImport from 'unplugin-auto-import/vite'\nimport { NaiveUiResolver } from 'unplugin-vue-components/resolvers'\nimport Components from 'unplugin-vue-components/vite'\n// vite.config.ts\nimport { defineConfig } from 'vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    vue(),\n    AutoImport({\n      imports: [\n        'vue',\n        {\n          'naive-ui': [\n            'useDialog',\n            'useMessage',\n            'useNotification',\n            'useLoadingBar'\n          ]\n        }\n      ]\n    }),\n    Components({\n      resolvers: [NaiveUiResolver()]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Bar Usage - Vue Component Setup\nDESCRIPTION: Vue component implementation showing how to inject and use the loading bar functionality. Demonstrates the setup function with loading bar initialization and control methods.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/loading-bar/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useLoadingBar } from 'naive-ui'\nimport { defineComponent } from 'vue'\n\n// content\nexport default defineComponent({\n  setup() {\n    const loadingBar = useLoadingBar()\n    return {\n      loading() {\n        loadingBar.start()\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Switchable Editable Data Table with Vue 3 and Naive UI\nDESCRIPTION: This JavaScript code implements the logic for a switchable editable data table. It defines a ShowOrEdit component for editable cells, creates sample data, and sets up the table columns with editable functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/switchable-editable.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NInput } from 'naive-ui'\nimport { computed, defineComponent, h, nextTick, ref } from 'vue'\n\nfunction createData() {\n  return Array.from({ length: 100 }).map((_, index) => ({\n    key: index,\n    name: `John Brown ${index}`,\n    age: (Math.random() * 40) | 0,\n    address: `New York No. ${index} Lake Park`\n  }))\n}\n\nconst ShowOrEdit = defineComponent({\n  props: {\n    value: [String, Number],\n    onUpdateValue: [Function, Array]\n  },\n  setup(props) {\n    const isEdit = ref(false)\n    const inputRef = ref(null)\n    const inputValue = ref(props.value)\n    function handleOnClick() {\n      isEdit.value = true\n      nextTick(() => {\n        inputRef.value.focus()\n      })\n    }\n    function handleChange() {\n      props.onUpdateValue(inputValue.value)\n      isEdit.value = false\n    }\n    return () =>\n      h(\n        'div',\n        {\n          style: 'min-height: 22px',\n          onClick: handleOnClick\n        },\n        isEdit.value\n          ? h(NInput, {\n              ref: inputRef,\n              value: inputValue.value,\n              onUpdateValue: (v) => {\n                inputValue.value = v\n              },\n              onChange: handleChange,\n              onBlur: handleChange\n            })\n          : props.value\n      )\n  }\n})\n\nexport default defineComponent({\n  setup() {\n    const data = ref(createData())\n    const page = ref(1)\n\n    const getDataIndex = (key) => {\n      return data.value.findIndex(item => item.key === key)\n    }\n    const handlePageChange = (curPage) => {\n      page.value = curPage\n    }\n\n    const paginationRef = computed(() => ({\n      pageSize: 10,\n      page: page.value\n    }))\n\n    return {\n      data,\n      paginationRef,\n      handlePageChange,\n      columns: [\n        {\n          title: 'Name',\n          key: 'name',\n          width: 150,\n          render(row) {\n            const index = getDataIndex(row.key)\n            return h(ShowOrEdit, {\n              value: row.name,\n              onUpdateValue(v) {\n                data.value[index].name = v\n              }\n            })\n          }\n        },\n        {\n          title: 'Age',\n          key: 'age',\n          width: 100,\n          render(row) {\n            const index = getDataIndex(row.key)\n            return h(ShowOrEdit, {\n              value: row.age,\n              onUpdateValue(v) {\n                data.value[index].age = v\n              }\n            })\n          }\n        },\n        {\n          title: 'Address',\n          key: 'address',\n          render(row) {\n            const index = getDataIndex(row.key)\n            return h(ShowOrEdit, {\n              value: row.address,\n              onUpdateValue(v) {\n                data.value[index].address = v\n              }\n            })\n          }\n        }\n      ]\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Positioning Naive UI and Vueuc Styles in HTML\nDESCRIPTION: This HTML snippet demonstrates how to control the insertion position of Naive UI and Vueuc styles using meta tags in the head element. This approach helps prevent unwanted style overrides, particularly when using CSS frameworks like Tailwind.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/style-conflict/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <xxx />\n  <!-- naive-ui's style will be inserted here -->\n  <meta name=\"naive-ui-style\" />\n  <!-- vueuc's style will be inserted here -->\n  <meta name=\"vueuc-style\" />\n  <xxx />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Implementation with Multi-Column Sorting Logic\nDESCRIPTION: Complete Vue component implementation showing controlled multi-column sorting. Includes data structure, computed properties for sort state management, and column definitions with custom sorters.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/controlled-multiple-sorter.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { computed, defineComponent, ref } from 'vue'\n\nconst data = [\n  {\n    key: 0,\n    name: 'John Brown',\n    age: 32,\n    chinese: 98,\n    math: 60,\n    english: 70\n  },\n  {\n    key: 1,\n    name: 'Jim Green',\n    age: 42,\n    chinese: 98,\n    math: 66,\n    english: 89\n  },\n  {\n    key: 2,\n    name: 'Joe Black',\n    age: 32,\n    chinese: 98,\n    math: 66,\n    english: 89\n  },\n  {\n    key: 3,\n    name: 'Jim Red',\n    age: 32,\n    chinese: 88,\n    math: 99,\n    english: 89\n  }\n]\n\nexport default defineComponent({\n  setup() {\n    const sortStatesRef = ref([])\n    const sortKeyMapOrderRef = computed(() =>\n      sortStatesRef.value.reduce((result, { columnKey, order }) => {\n        result[columnKey] = order\n        return result\n      }, {})\n    )\n    const paginationRef = ref({ pageSize: 5 })\n\n    const columnsRef = computed(() => [\n      {\n        title: 'Name',\n        key: 'name'\n      },\n      {\n        title: 'Age',\n        key: 'age',\n        sortOrder: sortKeyMapOrderRef.value.age || false,\n        sorter(rowA, rowB) {\n          return rowA.age - rowB.age\n        }\n      },\n      {\n        title: 'Chinese Score',\n        key: 'chinese',\n        sortOrder: sortKeyMapOrderRef.value.chinese || false,\n        sorter: {\n          compare: (a, b) => a.chinese - b.chinese,\n          multiple: 3\n        }\n      },\n      {\n        title: 'Math Score',\n        key: 'math',\n        sortOrder: sortKeyMapOrderRef.value.math || false,\n        sorter: {\n          compare: (a, b) => a.math - b.math,\n          multiple: 2\n        }\n      },\n      {\n        title: 'English Score',\n        sortOrder: sortKeyMapOrderRef.value.english || false,\n        key: 'english',\n        sorter: {\n          compare: (a, b) => a.english - b.english,\n          multiple: 1\n        }\n      }\n    ])\n\n    function handleUpdateSorter(sorters) {\n      console.log(sorters)\n      sortStatesRef.value = [].concat(sorters)\n    }\n    return {\n      columns: columnsRef,\n      handleUpdateSorter,\n      data,\n      pagination: paginationRef\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Demo Imports for Checkbox Component Examples in Vue\nDESCRIPTION: A list of Vue demo files showcasing various features of the Checkbox component, including basic usage, sizes, grouping, grid layout, indeterminate states, controlled components, events, custom values, focus behavior, and RTL debugging.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/checkbox/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nsize.vue\ngroup.vue\ngrid.vue\nindeterminate.vue\ncontrolled.vue\nevent.vue\ncustomize-value.vue\nfocus.vue\nrtl-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Building and Running Naive UI Project with Webpack\nDESCRIPTION: Commands for building and running the Naive UI project. Requires global installation of webpack and webpack-cli as prerequisites. After running the build scripts, the server can be started and accessed via localhost on port 8086.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/playground/ssr/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./pre-build.sh\n./build.sh\n\nnode dist/server.js\n\n# browse localhost:8086\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight.js with Naive UI Log Component\nDESCRIPTION: Example showing how to set up highlight.js with a custom 'naive-log' language definition in a Vue component using Naive UI's ConfigProvider. The custom language highlights all numbers in the log content.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/log/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <n-config-provider :hljs=\"hljs\">\n    <my-app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import hljs from 'highlight.js/lib/core'\n\n  hljs.registerLanguage('naive-log', () => ({\n    contains: [\n      {\n        className: 'number',\n        begin: /\\d+/\n      }\n    ]\n  }))\n\n  export default defineComponent({\n    setup() {\n      return {\n        hljs\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Naive UI Data Table with Controlled Sorting in HTML\nDESCRIPTION: This snippet shows the HTML template for rendering a Naive UI data table component with controlled sorting. It binds columns, data, and pagination props, and listens for sorting updates.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/controlled-multiple-sorter.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data\"\n  :pagination=\"pagination\"\n  @update:sorter=\"handleUpdateSorter\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Dropdown Demo Components in Vue\nDESCRIPTION: This code snippet demonstrates how to import and use various Dropdown demo components in a Vue application. It includes examples for basic usage, icons, triggers, cascading dropdowns, arrows, placement, sizing, batch rendering, manual positioning, custom rendering, option props, and rendering options.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/dropdown/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nicon.vue\ntrigger.vue\ncascade.vue\narrow.vue\nplacement.vue\nsize.vue\nbatch-render.vue\nmanual-position.vue\nrender.vue\noption-props.vue\nrender-option.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Global Styles with n-global-style in Naive UI (HTML)\nDESCRIPTION: This snippet demonstrates how to use the n-global-style component within an n-config-provider to synchronize global styles with the theme. It ensures that styles are applied consistently to the document.body and respond to theme changes.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/global-style/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-config-provider>\n  <n-global-style />\n  ...\n</n-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Usage in Vue Component\nDESCRIPTION: Example of how to use the useNotification hook in a Vue component to trigger notifications, specifically showing a warning notification implementation\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/notification/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNotification } from 'naive-ui'\nimport { defineComponent } from 'vue'\n\n// content\nexport default defineComponent({\n  setup() {\n    const notification = useNotification()\n    return {\n      warning() {\n        notification.warning({\n          content: '...'\n        })\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Globally Installed Naive UI Component in Vue SFC\nDESCRIPTION: This HTML template shows how to use a Naive UI component (NButton) in a Vue Single File Component after Naive UI has been installed globally. No import statement is required in the script section.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/usage-sfc/enUS/index.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-button>naive-ui</n-button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Badge Component Demo Examples\nDESCRIPTION: A collection of demo files showcasing different badge implementations including basic usage, types, processing state, zero value display, overflow handling, manual control, custom content, color customization, raw display, and offset positioning.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/badge/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\ntype.vue\nprocessing.vue\nshow-zero.vue\noverflow.vue\nmanual.vue\ncustom-content.vue\ncolor.vue\nraw.vue\noffset.vue\n```\n\n----------------------------------------\n\nTITLE: Themeable Components List\nDESCRIPTION: List of components that support theming capabilities in the naive-ui framework.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/_internal/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- selection\n- select-menu\n- clear\n```\n\n----------------------------------------\n\nTITLE: Global On-Demand Registration of Naive UI Components\nDESCRIPTION: This snippet demonstrates how to globally register specific Naive UI components using the create method. It shows how to install only the needed components (NButton in this example) to maintain tree shaking benefits while allowing global component usage.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/import-on-demand/enUS/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  // create naive ui\n  create,\n  // component\n  NButton\n} from 'naive-ui'\nimport { createApp } from 'vue'\n\nconst naive = create({\n  components: [NButton]\n})\n\nconst app = createApp()\napp.use(naive)\n```\n\n----------------------------------------\n\nTITLE: Creating Discrete APIs in Naive UI (TypeScript)\nDESCRIPTION: This function creates discrete APIs for Naive UI components that can be used outside the Vue setup context. It allows specifying which APIs to include and provides options for configuring various provider props.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/discrete/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createDiscreteApi(\n  includes: Array<'message' | 'dialog' | 'notification' | 'loadingBar'>,\n  options: {\n    configProviderProps: Ref<ConfigProviderProps> | ConfigProviderProps\n    messageProviderProps: Ref<MessageProviderProps> | MessageProviderProps\n    dialogProviderProps: Ref<DialogProviderProps> | DialogProviderProps\n    notificationProviderProps: Ref<NotificationProps> | NotificationProps\n    loadingBarProviderProps:\n      | Ref<LoadingBarProviderProps>\n      | LoadingBarProviderProps\n  }\n): {\n  // 只有 includes 中包含的 API 才会被创建\n    message: MessageApi\n    dialog: DialogApi\n    notification: NotificationApi\n    loadingBar: LoadingBarApi\n    // Vue app\n    app: App\n    unmount: () => void\n  } {}\n```\n\n----------------------------------------\n\nTITLE: Configuring KaTeX with Naive UI Equation Component\nDESCRIPTION: Demonstrates how to setup KaTeX integration with Naive UI's Config Provider. Includes importing KaTeX dependencies and setting up the configuration in a Vue component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/equation/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <n-config-provider :katex=\"katex\">\n    <my-app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import katex from 'katex'\n  import 'katex/dist/katex.css'\n\n  export default defineComponent({\n    setup() {\n      return {\n        katex\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Config Provider Demonstration Files\nDESCRIPTION: List of Vue demonstration files showcasing different aspects of Config Provider functionality including theming, namespacing, language settings and transparency\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/config-provider/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndemo\ntheme.vue\nnamespace.vue\ninherit-theme.vue\nos-theme.vue\nlanguage.vue\ntransparent.vue\ninline-theme-disabled.vue\n```\n\n----------------------------------------\n\nTITLE: Tree Component Demo Paths - Vue\nDESCRIPTION: List of Vue component demo files showcasing various Tree component features including basic usage, custom fields, multiple selection, cascading, filtering, and drag-drop functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/tree/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\ncustom-field.vue\nmultiple.vue\ncascade.vue\nfilter.vue\ndrag-drop.vue\nvirtual.vue\nasync.vue\ndisabled.vue\nprefix-and-suffix.vue\nbatch-render.vue\nswitcher-icon.vue\nfile-tree.vue\nnode-props.vue\nshow-line.vue\ncheckbox-placement.vue\noverride-click-behavior.vue\n```\n\n----------------------------------------\n\nTITLE: Syncing Styles to Body Element with n-global-style in Naive-UI\nDESCRIPTION: Example showing how to sync theme styles to the document.body element using the n-global-style component within n-config-provider.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/enUS/index.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-config-provider ...>\n    <app />\n    <n-global-style />\n  </n-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Naive UI Data Table Template Implementation\nDESCRIPTION: HTML template for a Naive UI data table component with remote data loading, sorting, filtering and pagination capabilities. Includes event handlers for sorter, filters and page changes.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/ajax-usage.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table\n  remote\n  ref=\"table\"\n  :columns=\"columns\"\n  :data=\"data\"\n  :loading=\"loading\"\n  :pagination=\"pagination\"\n  :row-key=\"rowKey\"\n  @update:sorter=\"handleSorterChange\"\n  @update:filters=\"handleFiltersChange\"\n  @update:page=\"handlePageChange\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Import for Naive UI in Nuxt\nDESCRIPTION: TypeScript configuration for nuxt.config.ts to enable auto-importing of Naive UI components and APIs using unplugin-auto-import and unplugin-vue-components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/nuxtjs/zhCN/index.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport AutoImport from 'unplugin-auto-import/vite'\nimport { NaiveUiResolver } from 'unplugin-vue-components/resolvers'\nimport Components from 'unplugin-vue-components/vite'\n\n// https://nuxt.com/docs/api/configuration/nuxt-config\nexport default defineNuxtConfig({\n  modules: ['nuxtjs-naive-ui'],\n  vite: {\n    plugins: [\n      AutoImport({\n        imports: [\n          {\n            'naive-ui': [\n              'useDialog',\n              'useMessage',\n              'useNotification',\n              'useLoadingBar'\n            ]\n          }\n        ]\n      }),\n      Components({\n        resolvers: [NaiveUiResolver()]\n      })\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Mode in Naive UI\nDESCRIPTION: Example of a controlled component where you both listen to value changes and explicitly control the input value through the value prop. The component's state is managed externally.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/controlled-uncontrolled/zhCN/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<n-input :value=\"value\" @update:value=\"handleUpdateValue\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled Mode in Naive UI\nDESCRIPTION: Example of an uncontrolled component where you only listen to value changes without controlling the input value directly. The component internally manages its own state.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/controlled-uncontrolled/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-input @update:value=\"handleUpdateValue\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring KaTeX for Equation Component in Vue\nDESCRIPTION: This snippet demonstrates how to set up KaTeX for use with the Equation component in a Vue application using Naive UI. It imports KaTeX and its CSS, then provides it to the app via n-config-provider.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/equation/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-config-provider :katex=\"katex\">\n    <my-app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import katex from 'katex'\n  import 'katex/dist/katex.css'\n\n  export default defineComponent({\n    setup() {\n      return {\n        katex\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Data Table Template with Sort Handler\nDESCRIPTION: Basic template structure for Naive UI data table with sorting functionality. Includes columns, data binding and sort event handler.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/controlled-multiple-sorter.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data\"\n  :pagination=\"pagination\"\n  @update:sorter=\"handleUpdateSorter\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Dialog Slots Documentation Table in Markdown\nDESCRIPTION: A markdown table documenting the available slots for the Dialog component including action, default content, header, icon and close button slots with their parameters and version information\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/dialog/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Parameters | Description       | Version |\n| ------- | ---------- | ----------------- | ------- |\n| action  | `()`       | `Action` content. |         |\n| default | `()`       | Dialog content.   |         |\n| header  | `()`       | `Header` content. |         |\n| icon    | `()`       | `Icon` content.   |         |\n| close   | `()`       | `Close` content.  | 2.36.0  |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Button Component Usage in Vue\nDESCRIPTION: This code snippet lists multiple Vue files that demonstrate various aspects and features of the Button component. Each file likely contains a specific example or use case for the Button component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/button/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nsecondary.vue\ntertiary.vue\nquaternary.vue\ndashed.vue\nsize.vue\ntext.vue\ntag.vue\ndisabled.vue\nicon.vue\nevents.vue\nshape.vue\nghost.vue\nloading.vue\ncolor.vue\ngroup.vue\nicon-button.vue\npopover.vue\nrtl-debug.vue\ndebug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Editable Data Table with Naive UI\nDESCRIPTION: This snippet shows the template for rendering a data table using Naive UI's NDataTable component. It binds data, columns, and pagination, and handles page changes.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/switchable-editable.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table\n  :key=\"(row) => row.key\"\n  :columns=\"columns\"\n  :data=\"data\"\n  :pagination=\"paginationRef\"\n  :on-update:page=\"handlePageChange\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing useThemeVars in Vue Component\nDESCRIPTION: Demonstrates how to import and use the useThemeVars hook in a Vue component setup function to access theme variables\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/theme/enUS/use-theme-vars.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useThemeVars } from 'naive-ui'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  setup() {\n    return {\n      themeVars: useThemeVars()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Form Props in TypeScript\nDESCRIPTION: TypeScript definitions for the Form component's props, including types for disabled, inline, label-width, model, rules, and other configuration options.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/form/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n| 名称 | 类型 | 默认值 | 说明 | 版本 |\n| --- | --- | --- | --- | --- |\n| disabled | `boolean` | `false` | 是否禁用 |  |\n| inline | `boolean` | `false` | 是否展示为行内表单 |  |\n| label-width | `number \\| string \\| 'auto'` | `undefined` | 标签的宽度，在 `label-placement` 是 `'left'` 的时候可能会有用，`'auto'` 意味着 label width 会被自动调整 |  |\n| label-align | `'left' \\| 'right'` | `-` | 标签的文本对齐方式 |  |\n| label-placement | `'left' \\| 'top'` | `'top'` | 标签显示的位置 |  |\n| model | `Object` | `{}` | 获取表项中收集到的值的对象 |  |\n| rules | `type FormRules = { [itemValidatePath: string]: FormItemRule \\| Array<FormItemRule> \\| FormRules }` | `{}` | 验证表项的规则 |  |\n| show-feedback | `boolean` | `true` | 是否展示校验反馈 |  |\n| show-label | `boolean` | `true` | 是否展示标签 |  |\n| show-require-mark | `boolean` | `-` | 是否展示必填的星号 |  |\n| require-mark-placement | `'left' \\| 'right' \\| 'right-hanging'` | `'right'` | 必填星号的位置 | `'right-hanging'` 2.24.0 |\n| size | `'small' \\| 'medium' \\| 'large'` | `'medium'` | 尺寸 |  |\n| validate-messages | `FormValidateMessages` | `undefined` | `async-validator` 的默认验证信息 | 2.27.0 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Naive UI Data Table with Merged Cells in JavaScript\nDESCRIPTION: This JavaScript code defines the column structure, data, and functionality for a Naive UI data table with merged cells. It includes custom rendering for tags and action buttons, as well as dynamic colspan and rowspan calculations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/merge-cell.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NButton, NTag, useMessage } from 'naive-ui'\nimport { defineComponent, h } from 'vue'\n\nfunction createColumns({ sendMail }) {\n  return [\n    {\n      title: 'Name',\n      titleColSpan: 2,\n      key: 'name',\n      rowSpan: (rowData, rowIndex) => (rowIndex === 0 ? 2 : 1),\n      colSpan: (rowData, rowIndex) => (rowIndex === 0 ? 2 : 1)\n    },\n    {\n      title: 'Age',\n      key: 'age'\n    },\n    {\n      title: 'Address',\n      key: 'address',\n      colSpan: (rowData, rowIndex) => (rowIndex === 2 ? 2 : 1)\n    },\n    {\n      title: 'Tags',\n      key: 'tags',\n      titleColSpan: 2,\n      render(row) {\n        const tags = row.tags.map((tagKey) => {\n          return h(\n            NTag,\n            {\n              style: {\n                marginRight: '6px'\n              },\n              type: 'info',\n              bordered: false\n            },\n            {\n              default: () => tagKey\n            }\n          )\n        })\n        return tags\n      }\n    },\n    {\n      title: 'Action',\n      key: 'actions',\n      rowSpan: (rowData, rowIndex) => (rowIndex === 0 ? 2 : 1),\n      render(row) {\n        return h(\n          NButton,\n          {\n            size: 'small',\n            onClick: () => sendMail(row)\n          },\n          { default: () => 'Send Email' }\n        )\n      }\n    }\n  ]\n}\n\nfunction createData() {\n  return [\n    {\n      key: 0,\n      name: 'John Brown',\n      age: 32,\n      address: 'New York No. 1 Lake Park',\n      tags: ['nice', 'developer']\n    },\n    {\n      key: 1,\n      name: 'Jim Green',\n      age: 42,\n      address: 'London No. 1 Lake Park',\n      tags: ['wow']\n    },\n    {\n      key: 2,\n      name: 'Joe Black',\n      age: 32,\n      address: 'Sidney No. 1 Lake Park',\n      tags: ['cool', 'teacher']\n    }\n  ]\n}\n\nexport default defineComponent({\n  setup() {\n    const message = useMessage()\n    return {\n      data: createData(),\n      columns: createColumns({\n        sendMail(rowData) {\n          message.info(`send mail to ${rowData.name}`)\n        }\n      }),\n      pagination: {\n        pageSize: 10\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining FormItem Props in TypeScript\nDESCRIPTION: TypeScript definitions for the FormItem component's props, including feedback, label, path, rule, and validation status options.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/form/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n| 名称 | 类型 | 默认值 | 说明 | 版本 |\n| --- | --- | --- | --- | --- |\n| feedback | `string` | `undefined` | 表项的反馈信息。不设为 `undefined` 时，会覆盖规则验证的结果 |  |\n| feedback-class | `string` | `undefined` | 反馈校验竖向展示定位 | 2.38.2 |\n| feedback-style | `string \\| object` | `undefined` | 反馈校验横向展示定位 | 2.38.2 |\n| first | `boolean` | `false` | 是否只展示首个出错信息 |  |\n| ignore-path-change | `boolean` | `false` | 通常 `path` 的改变会导致数据来源的变化，所以 naive-ui 会清空验证信息。如果不期望这个行为，可以将其置为 `true` |  |\n| label | `string` | `undefined` | 标签信息 |  |\n| label-align | `'left' \\| 'right'` | `undefined` | 标签的文本对齐方式。如果没有被设定，使用外层表单的 `label-align` |  |\n| label-placement | `'left' \\| 'top'` | `undefined` | 如果没有被设定，使用外层表单的 `label-placement` |  |\n| label-style | `CSSProperties \\| string` | `undefined` | 标签的样式 |  |\n| label-props | `LabelHTMLAttributes` | `undefined` | 标签元素的属性 | 2.24.0 |\n| label-width | `number \\| string \\| 'auto'` | `undefined` | 如果没有被设定，使用外层表单的 `label-width`，`'auto'` 意味着 label width 会被自动调整 |  |\n| path | `string` | `undefined` | 将值收集到外层表单 `model` 对象的路径 |  |\n| rule | `FormItemRule \\| Array<FormItemRule>` | `undefined` | 验证表项的规则，它会被通过 `rule-path` 从外层表单获取的规则合并来作为表项的验证规则。推荐还是在外层表单设置所有规则 |  |\n| rule-path | `string` | `undefined` | 从外层表单的 `rules` 对象获取规则的路径。如果没有设定，使用表项的 `path` 代替 |  |\n| show-feedback | `boolean` | `true` | 是否展示校验反馈 |  |\n| show-label | `boolean` | `true` | 是否展示标签。如果没有被设定，使用外层 `n-form` 的 `show-label` |  |\n| show-require-mark | `boolean` | `-` | 是否展示必填的星号。如果没有被设定，使用外层 `n-form` 的 `show-require-mark` |  |\n| require-mark-placement | `'left' \\| 'right' \\| 'right-hanging'` | `'right'` | 必填的星号的位置。如果没有被设定，使用外层 `n-form` 的 `require-mark-placement` | `'right-hanging'` 2.24.0 |\n| size | `'small' \\| 'medium' \\| 'large'` | `'medium'` | 尺寸 |  |\n| validation-status | `'error' \\| 'success' \\| 'warning'` | `undefined` | 表单的验证状态。不设为 `undefined`时，会覆盖规则验证的结果 |  |\n```\n\n----------------------------------------\n\nTITLE: Cascader Demo Import References\nDESCRIPTION: A list of demo files showcasing different features of the Cascader component, including single and multiple selection, different sizes, lazy loading, custom rendering, and other features.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/cascader/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nsingle.vue\nmultiple.vue\nsize.vue\nsingle-lazy.vue\nmultiple-lazy.vue\naction.vue\nvirtual.vue\ncheck-strategy.vue\ncustom-field.vue\ncustom-render.vue\nfocus.vue\nstatus.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamically Inserting Meta Tags for Style Control\nDESCRIPTION: Example of dynamically inserting a meta tag before mounting the Vue application to control where Naive UI styles are inserted, especially useful when static meta tags are ineffective with certain build tools.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/style-conflict/zhCN/index.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst meta = document.createElement('meta')\nmeta.name = 'naive-ui-style'\ndocument.head.appendChild(meta)\n\nvueApp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Columns in Naive UI Data Table\nDESCRIPTION: JavaScript configuration for a complex data table structure with nested columns, fixed positioning (left and right), and column groups. Includes data generation and component setup using Vue's defineComponent.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/fixed-column2-debug.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nfunction createColumns() {\n  return [\n    {\n      title: '1',\n      key: '1',\n      fixed: 'left',\n      align: 'center',\n      children: [\n        {\n          title: '2',\n          key: '2',\n          fixed: 'left',\n          align: 'center',\n          children: [\n            {\n              title: '4',\n              key: '4',\n              fixed: 'left',\n              width: 100,\n              align: 'center'\n            },\n            {\n              title: '5',\n              key: '5',\n              fixed: 'left',\n              width: 100,\n              align: 'center'\n            }\n          ]\n        },\n        {\n          title: '3',\n          key: '3',\n          fixed: 'left',\n          width: 100,\n          align: 'center',\n          children: [\n            {\n              title: '6',\n              key: '6',\n              fixed: 'left',\n              width: 100,\n              align: 'center'\n            },\n            {\n              title: '7',\n              key: '7',\n              fixed: 'left',\n              width: 100,\n              align: 'center'\n            }\n          ]\n        }\n      ]\n    },\n    { title: 'Test1', key: 'test1' },\n    { title: 'Test2', key: 'test2' },\n    { title: 'Test3', key: 'test3' },\n    {\n      title: 'Group A',\n      key: 'ga',\n      fixed: 'right',\n      align: 'center',\n      children: [\n        {\n          title: 'A1',\n          key: 'a1',\n          width: 100,\n          fixed: 'right',\n          align: 'center'\n        },\n        {\n          title: 'A2',\n          key: 'a2',\n          width: 100,\n          fixed: 'right',\n          align: 'center'\n        }\n      ]\n    },\n    {\n      title: 'Group B',\n      key: 'gb',\n      fixed: 'right',\n      align: 'center',\n      children: [\n        {\n          title: 'B1',\n          key: 'b1',\n          width: 100,\n          fixed: 'right',\n          align: 'center'\n        },\n        {\n          title: 'B2',\n          key: 'b2',\n          width: 100,\n          fixed: 'right',\n\n          align: 'center'\n        }\n      ]\n    }\n  ]\n}\n\nfunction createData() {\n  return [\n    {\n      4: 4,\n      5: 5,\n      6: 6,\n      7: 7,\n      test1: 'test1',\n      test2: 'test2',\n      test3: 'test3',\n      a1: 'a1',\n      a2: 'a2',\n      b1: 'b1',\n      b2: 'b2'\n    }\n  ]\n}\n\nexport default defineComponent({\n  setup() {\n    return {\n      data: createData(),\n      columns: createColumns(),\n      pagination: { pageSize: 10 }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Auto Complete Component Demo References\nDESCRIPTION: A list of demo Vue files that showcase different features of the Auto Complete component, including basic usage, sizing, grouping, custom input, and various other functionalities.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/auto-complete/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\nsize.vue\ngroup.vue\ncustom-input.vue\nafter-select.vue\nshow-options-by-value.vue\ncustomized-rendering.vue\nstatus.vue\nappend.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Demo in Vue\nDESCRIPTION: Demo implementation of the Calendar component showing basic usage.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/calendar/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Defining FormItemRule Type in TypeScript\nDESCRIPTION: TypeScript definitions for the FormItemRule type, including properties like asyncValidator, key, level, message, and validator for form validation rules.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/form/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n| 属性 | 类型 | 默认值 | 说明 | 版本 |\n| --- | --- | --- | --- | --- |\n| asyncValidator | `(rule: FormItemRule, value: any, callback: (error?: Error) => void) => void` | `undefined` | 异步校验，支持定义回调函数 |  |\n| key | `string` | `undefined` | 规则的唯一 key，可用于只执行部分规则验证。参考示例 [只执行部分规则](form#partially-apply-rules.vue) |  |\n| level | `'error'` \\| `'warning'` | `undefined` | 验证级别。如果存在 `error` 级别错误，则会跳过 `warning` 级别验证 |  |\n| message | `string` | `undefined` | 校验失败时展示的信息 |  |\n| renderMessage | `() => VNodeChild` | `undefined` | 信息的渲染函数 | 2.29.1 |\n| required | `boolean` | `undefined` | 是否必填 |  |\n| trigger | `string \\| Array<string>` | `undefined` | 触发方式 |  |\n| validator | `(rule: FormItemRule, value: any) => boolean \\| Error` | `undefined` | 校验规则 |  |\n```\n\n----------------------------------------\n\nTITLE: 在不同主题模式下配置不同主题变量\nDESCRIPTION: 展示如何根据当前使用的主题（亮色或暗色）来应用不同的主题变量覆盖，实现主题特定的自定义样式。\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/zhCN/index.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { NConfigProvider, darkTheme } from 'naive-ui'\n\n  /**\n   * @type import('naive-ui').GlobalThemeOverrides\n   */\n  const lightThemeOverrides = {\n    common: {\n      primaryColor: '#000000'\n    }\n    // ...\n  }\n\n  const darkThemeOverrides = {\n    common: {\n      primaryColor: '#FFFFFF'\n    }\n    // ...\n  }\n\n  const theme = null\n  // ...\n</script>\n\n<template>\n  <n-config-provider\n    :theme=\"theme\"\n    :theme-overrides=\"theme === null ? lightThemeOverrides : darkThemeOverrides\"\n  >\n    <my-app />\n  </n-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: TreeSelect Demo Imports\nDESCRIPTION: List of demo files that showcase different features and implementations of the TreeSelect component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/tree-select/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\ncustom-field.vue\nmultiple.vue\ncheckbox.vue\ncheck-strategy.vue\nfilterable.vue\naction.vue\nasync.vue\nstatus.vue\nfile-picker.vue\ndebug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Using v-model with @update in Vue Templates\nDESCRIPTION: Demonstrates the correct way to use v-model with @update event handling in Vue templates when working with Naive UI components. This approach ensures proper data binding and event handling.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/common-issues/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<n-input v-model:value=\"xxx\" @update:value=\"yyy\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Column Headers with Gradient Text and Tooltips\nDESCRIPTION: This JavaScript code demonstrates how to create custom column headers for a Naive UI data table. It uses the NGradientText component for styled text and NTooltip for tooltips. The createColumns function defines the structure and rendering of each column header.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/render-header.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NGradientText, NTooltip } from 'naive-ui'\nimport { defineComponent, h } from 'vue'\n\nfunction renderTooltip(trigger, content) {\n  return h(NTooltip, null, {\n    trigger: () => trigger,\n    default: () => content\n  })\n}\n\nfunction createColumns(instance) {\n  return [\n    {\n      key: 'name',\n      title(column) {\n        return renderTooltip(\n          h(\n            NGradientText,\n            {\n              size: 24,\n              type: 'danger'\n            },\n            { default: () => 'Name' }\n          ),\n          'Tooltip Content'\n        )\n      }\n    },\n    {\n      key: 'age',\n      title(column) {\n        return h(\n          NGradientText,\n          {\n            size: '20',\n            type: 'info'\n          },\n          { default: () => 'Age' }\n        )\n      }\n    },\n    {\n      key: 'address',\n      title(column) {\n        return h(\n          NGradientText,\n          {\n            size: '16',\n            type: 'warning'\n          },\n          { default: () => 'Address' }\n        )\n      }\n    }\n  ]\n}\n\nconst data = [\n  {\n    key: 0,\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park'\n  },\n  {\n    key: 1,\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park'\n  },\n  {\n    key: 2,\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park'\n  }\n]\n\nexport default defineComponent({\n  setup() {\n    return {\n      data,\n      columns: createColumns(this),\n      pagination: {\n        pageSize: 10\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Demo File List\nDESCRIPTION: List of demo files showcasing various features and implementations of the Select component including basic usage, sizing, multiple selection, events, filtering, and custom rendering.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/select/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\nsize.vue\nmultiple.vue\nevents.vue\nfilterable.vue\ntag.vue\nmenu-width.vue\nremote.vue\nremote-multiple.vue\nclearable.vue\nscroll-event.vue\ngroup.vue\nmany-options.vue\ncustom-option.vue\ncustom-suffix.vue\naction.vue\nfallback-option.vue\nmax-tag-count.vue\nadd-tooltip.vue\nrender-tag.vue\nfocus.vue\nrender-person.vue\ntag-input.vue\ncustom-field.vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Table with Fixed Columns in Vue.js\nDESCRIPTION: JavaScript implementation that creates a complex data table structure with nested columns, fixed left columns, and generates sample data. Uses Vue.js composition API to manage component state\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/fixed-column-debug.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineComponent, ref } from 'vue'\n\nfunction createCols() {\n  return [\n    {\n      title: 'Name',\n      key: 'name',\n      fixed: 'left',\n      children: [\n        {\n          title: '1',\n          key: '1',\n          fixed: 'left',\n          width: 100\n        },\n        {\n          title: '2',\n          key: '2',\n          fixed: 'left',\n          width: 100\n        },\n        {\n          title: '3',\n          key: '3',\n          fixed: 'left',\n          width: 100\n        },\n        {\n          title: '4',\n          key: '4',\n          fixed: 'left',\n          width: 100\n        },\n        {\n          title: '5',\n          key: '5',\n          fixed: 'left',\n          width: 100\n        },\n        {\n          title: '6',\n          key: '6',\n          fixed: 'left',\n          width: 100\n        }\n      ]\n    },\n    { title: 'Name2', key: 'name1', fixed: 'left', width: 100 },\n    { title: 'Name3', key: 'name2', fixed: 'left', width: 100 },\n    {\n      title: 'Attrs',\n      key: 'attrs',\n      children: [\n        {\n          title: 'Attack',\n          key: 'attack',\n          children: [\n            {\n              title: 'Physics Attack',\n              key: 'physicsAttack'\n            },\n            {\n              title: 'Magic Attack',\n              key: 'magicAttack'\n            }\n          ]\n        },\n        {\n          title: 'Defend',\n          key: 'defend'\n        },\n        {\n          title: 'Speed',\n          key: 'speed'\n        },\n        {\n          title: 'Defend1',\n          key: 'defend1'\n        },\n        {\n          title: 'Speed2',\n          key: 'speed2'\n        }\n      ]\n    }\n  ]\n}\n\nfunction createData() {\n  return Array.from({ length: 50 })\n    .fill(null)\n    .map((_, i) => {\n      return {\n        key: i,\n        name: `name_${i}`,\n        physicsAttack: `physicsAttack_${i}`,\n        magicAttack: `magicAttack_${i}`,\n        defend: `defend_${i}`,\n        speed: `speed_${i}`\n      }\n    })\n}\n\nexport default defineComponent({\n  setup() {\n    return {\n      data: ref(createData()),\n      columns: ref(createCols()),\n      pagination: ref({\n        pageSize: 10\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring n-data-table with Various Scroll and Layout Options in HTML\nDESCRIPTION: This snippet demonstrates different configurations of the n-data-table component, including flex height, auto and fixed layouts, max height settings, and scroll options. It showcases how to adjust the table's behavior for different scenarios.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/scroll-debug.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data\"\n  style=\"height: 180px;\"\n  flex-height\n/>\n\n<n-data-table :columns=\"columns\" :data=\"data\" />\n\n<n-data-table :columns=\"columns\" :data=\"data\" :max-height=\"60\" />\n\n<n-data-table :columns=\"columns\" :data=\"data\" table-layout=\"fixed\" />\n\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data\"\n  table-layout=\"fixed\"\n  :max-height=\"60\"\n/>\n\n<n-data-table :columns=\"columns\" :data=\"data1\" />\n\n<n-data-table :columns=\"columns\" :data=\"data1\" :max-height=\"60\" />\n\n<n-data-table :columns=\"columns\" :data=\"data1\" table-layout=\"fixed\" />\n\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data1\"\n  table-layout=\"fixed\"\n  :max-height=\"60\"\n/>\n\n<n-data-table :columns=\"columns\" :data=\"data1\" :scroll-x=\"300\" />\n\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data1\"\n  :max-height=\"60\"\n  :scroll-x=\"300\"\n/>\n\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data1\"\n  table-layout=\"fixed\"\n  :scroll-x=\"300\"\n/>\n\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data1\"\n  table-layout=\"fixed\"\n  :max-height=\"60\"\n  :scroll-x=\"300\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining DataTableSortState Type in TypeScript\nDESCRIPTION: Defines the structure of the DataTableSortState interface, which represents the sorting state of a data table column.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DataTableSortState {\n  columnKey: string | number\n  sorter: 'default' | function | boolean\n  order: 'ascend' | 'descend' | false\n}\n```\n\n----------------------------------------\n\nTITLE: Carousel Demo Imports\nDESCRIPTION: List of Vue demo files showcasing different carousel functionalities including basic usage, arrows, autoplay, dots, vertical orientation, spacing, slides per view, effects, and custom implementations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/carousel/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\narrow.vue\nautoplay.vue\ndots.vue\nvertical.vue\nspace-between.vue\nslides-per-view.vue\nslides-per-view-auto.vue\ncentered.vue\neffect.vue\ntransition-name.vue\nhover.vue\nkeyboard.vue\nmousewheel.vue\nsimulate-drag.vue\ncustom-arrow-and-dots.vue\ncustom-card.vue\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Basic Demo Structure\nDESCRIPTION: A list of demo files demonstrating various functionality of the AutoComplete component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/auto-complete/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\nsize.vue\ngroup.vue\ncustom-input.vue\nafter-select.vue\nshow-options-by-value.vue\ncustomized-rendering.vue\nstatus.vue\nappend.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Table Props in JavaScript\nDESCRIPTION: Shows how to set up various props for the data table component using JavaScript objects.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst tableProps = {\n  columns: [],\n  data: [],\n  bordered: true,\n  bottomBordered: true,\n  checkedRowKeys: [],\n  cascade: true,\n  childrenKey: 'children',\n  pagination: {\n    // Pagination configuration\n  },\n  remote: false,\n  rowKey: (rowData) => rowData.id,\n  scrollX: 1000,\n  size: 'medium',\n  striped: false,\n  summary: () => {\n    // Summary calculation\n  },\n  virtualScroll: false\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Space Component Usage in Vue\nDESCRIPTION: This snippet shows a list of demo files for the Space component. It includes various configurations such as basic usage, vertical layout, from-end alignment, space-between, space-around, center alignment, and reverse order.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/space/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nvertical.vue\nfrom-end.vue\nspace-between.vue\nspace-around.vue\ncenter.vue\nreverse.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Naive UI via UMD with Vue.js\nDESCRIPTION: Basic HTML template demonstrating how to integrate Naive UI with Vue.js using UMD format. Includes Vue.js and Naive UI script imports, a simple button component implementation, and Vue application initialization. Note that explicit version numbers should be specified in production.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/umd/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <script src=\"https://unpkg.com/vue\"></script>\n    <!-- Would use latest version, you'd better specify a version -->\n    <script src=\"https://unpkg.com/naive-ui\"></script>\n  </head>\n  <body>\n    <div id=\"app\">\n      <n-button>{{ message }}</n-button>\n    </div>\n    <script>\n      const App = {\n        setup() {\n          return {\n            message: 'naive'\n          }\n        }\n      }\n      const app = Vue.createApp(App)\n      app.use(naive)\n      app.mount('#app')\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Bar Provider - HTML Setup\nDESCRIPTION: Basic setup of the LoadingBar provider component in the application root component (App.vue). This wrapper is required to use loading bar functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/loading-bar/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-loading-bar-provider>\n  <content />\n</n-loading-bar-provider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Naive UI Data Table Component in JavaScript\nDESCRIPTION: This snippet defines a Vue.js component that sets up the data structure for a Naive UI data table. It includes column definitions, an empty data array, pagination settings, and reactive references for max-height and min-height toggles.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/height-debug.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineComponent, ref } from 'vue'\n\nconst columns = [\n  {\n    type: 'selection'\n  },\n  {\n    title: 'Name',\n    key: 'name'\n  },\n  {\n    title: 'Age',\n    key: 'age'\n  }\n]\n\nexport default defineComponent({\n  setup() {\n    return {\n      data: [],\n      columns,\n      pagination: { pageSize: 10 },\n      setMaxHeightRef: ref(false),\n      setMinHeightRef: ref(false)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Style Variable Generation in JavaScript\nDESCRIPTION: Demonstrates how the recommended naming convention facilitates programmatic generation of style variable names using array mapping. Shows both better and worse implementation patterns.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/design-notes/how-to-name-a-style-var.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// better\n;['Default', 'Error'].map((type) => [\n  'buttonColor' + type,\n  'buttonColorHover' + type\n])\n// worse, hard to maintain\n;['Default', 'Error'].map((type) => [\n  'button' + type + 'Color',\n  'buttonHover' + type + 'Color'\n])\n```\n\n----------------------------------------\n\nTITLE: Alert Component Demo References\nDESCRIPTION: A list of Vue demo files showing different implementations of the Alert component, including basic usage, bordered styling, closable functionality, icon customization, and marquee effects.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/alert/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\nbordered.vue\nclosable.vue\nicon.vue\nno-icon.vue\nmarquee.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Defining DataTableCreateSummary Type in TypeScript\nDESCRIPTION: Declares the DataTableCreateSummary type, which is a function that takes RowData[] and returns a complex object structure.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype DataTableCreateSummary = (pageData: RowData[]) =>\n  | Array<{\n    [columnKey: string]: {\n      value?: VNodeChild\n      colSpan?: number\n      rowSpan?: number\n    }\n  }>\n  | {\n    [columnKey: string]: {\n      value?: VNodeChild\n      colSpan?: number\n      rowSpan?: number\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Button Component Demo References - Vue\nDESCRIPTION: List of demo files showcasing various button implementations and features in Vue components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/button/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\nsecondary.vue\ntertiary.vue\nquaternary.vue\ndashed.vue\nsize.vue\ntext.vue\ntag.vue\ndisabled.vue\nicon.vue\nevents.vue\nshape.vue\nghost.vue\nloading.vue\ncolor.vue\ngroup.vue\nicon-button.vue\npopover.vue\n```\n\n----------------------------------------\n\nTITLE: Steps Component Demo Collection\nDESCRIPTION: Collection of demo files showcasing different aspects of the Steps component including basic usage, sizing, vertical layout, content customization, custom icons, and click interactions.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/steps/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\nsize.vue\nvertical.vue\ncontent.vue\ncustom-icon.vue\nclick.vue\n```\n\n----------------------------------------\n\nTITLE: Date Picker Demo Structure\nDESCRIPTION: A list of demo files showcasing different date picker functionalities including basic date selection, datetime selection, range selection, and various formatting options.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/date-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\ndate.vue\ndatetime.vue\ndatetimeformat.vue\ndaterange.vue\ndatetimerange.vue\nmonth.vue\nmonthrange.vue\nyear.vue\nyearrange.vue\nquarter.vue\nquarterrange.vue\nweek.vue\nsize.vue\ndefault-time.vue\ndisabled.vue\ndisabled-time.vue\nactions.vue\nshortcuts.vue\nevents.vue\nformat.vue\nfooterslot.vue\nupdate-on-close.vue\nfocus.vue\nstatus.vue\nicon.vue\npanel.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Form Methods in TypeScript\nDESCRIPTION: TypeScript definitions for the Form component's methods, including validate and restoreValidation for form validation and state management.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/form/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n| 名称 | 类型 | 说明 | 版本 |\n| --- | --- | --- | --- |\n| validate | `(validateCallback?: (errors: Array<FormValidationError> \\| undefined, extra: { warnings: Array<FormValidationError> \\| undefined }) => void, shouldRuleBeApplied?: FormItemRule => boolean) => Promise<{ warnings: Array<FormValidationError> \\| undefined }>` | 验证表单，Promise rejection 的返回值类型是 `Array<FormValidationError>` | `warnings` `2.37.1` |\n| restoreValidation | `() => void` | 还原到未校验的状态 |  |\n```\n\n----------------------------------------\n\nTITLE: Tree ScrollTo Type Definition - TypeScript\nDESCRIPTION: Type definition for the Tree component's scrollTo method that handles various scrolling scenarios including position by coordinates, index, key or predefined positions.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/tree/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ScrollTo {\n  (x: number, y: number): void\n  (options: { left?: number, top?: number, debounce?: boolean }): void\n  (options: { index: number, debounce?: boolean }): void\n  (options: { key: string | number, debounce?: boolean }): void\n  (options: { position: 'top' | 'bottom', debounce?: boolean }): void\n}\n```\n\n----------------------------------------\n\nTITLE: Development and Testing Commands for Naive UI\nDESCRIPTION: Essential commands for development, testing, linting and building the Naive UI project. Requires pnpm version 7.0.0 or above.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# open the dev server, please note that hot module reload doesn't work well\n# if you find anything doesn't work, just refresh the page\n# if you aren't able to open the page at the first time, try to refresh a couple of times\n# pnpm version 7.0.0 and above is required\npnpm run dev\n\n# testing\npnpm run test\n\n# testing some component\npnpm run test -- src/xxx\n\n# testing with coverage\npnpm run test:cov\n\n# lint code\npnpm run lint:code\n\n# check type\npnpm run lint:type\n\n# lint code & type\npnpm run lint\n\n# build site (if vercel preview failed, you might need to run `git clean -fdx` first)\npnpm run build:site\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Result Component Usage in Vue\nDESCRIPTION: This snippet showcases various demos of the Result component, including different status codes, sizes, and customizations. Each demo is referenced as a separate Vue file.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/result/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\ns-404.vue\ns-403.vue\ns-500.vue\ns-418.vue\ninfo.vue\nsuccess.vue\nwarning.vue\nerror.vue\nsize.vue\ncustom.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Input Component Usage in Vue\nDESCRIPTION: A list of Vue demo files showcasing various features and use cases of the Input component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/input/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nsize.vue\nround.vue\nicon.vue\nloading.vue\npassword.vue\ndisabled.vue\nclearable.vue\nautosize.vue\npair.vue\ninput-group.vue\npassively-activated.vue\ncount.vue\nfocus.vue\nevent.vue\ninput-props.vue\nstatus.vue\npattern.vue\ngraphemes.vue\nrtl-debug.vue\nprefix-debug.vue\nmodal-debug.vue\ntextarea-resize-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Layout Usage in Vue\nDESCRIPTION: This code snippet shows the basic usage of the Layout component in Vue, highlighting the changes required after version 2.3.0. It demonstrates how to properly nest Layout and Layout Sider components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/layout/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nBefore v2.3.0:\n<n-layout>\n  <n-layout-sider />\n  <n-layout />\n</n-layout>\n\nAfter v2.3.0:\n<n-layout has-sider>\n  <n-layout-sider />\n  <n-layout />\n</n-layout>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Divider Component Usage in Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the Divider component in Vue. It includes three separate demo files: basic.vue, content.vue, and vertical.vue.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/divider/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\ncontent.vue\nvertical.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Upload Custom Request Options Type Definition in TypeScript\nDESCRIPTION: Type definition for custom upload request options including file info, action, data, credentials, headers, and callback functions for progress, completion, and error handling.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/upload/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UploadCustomRequestOptions {\n  file: FileInfo\n  action?: string\n  data?:\n    | Record<string, string>\n    | (({ file }: { file: FileInfo }) => Record<string, string>)\n  withCredentials?: boolean\n  headers?:\n    | Record<string, string>\n    | (({ file }: { file: FileInfo }) => Record<string, string>)\n  onProgress: (e: { percent: number }) => void\n  onFinish: () => void\n  onError: () => void\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled Filtering and Sorting in Naive UI Data Table\nDESCRIPTION: This JavaScript snippet defines a Vue component that sets up the data table's columns, data, and interaction methods. It includes custom sorting and filtering logic for the 'Name', 'Age', and 'Address' columns, as well as methods to programmatically apply filters and sorts.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/filter-and-sorter.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineComponent, ref } from 'vue'\n\nconst columns = [\n  {\n    title: 'Name',\n    key: 'name',\n    defaultSortOrder: 'ascend',\n    sorter: 'default'\n  },\n  {\n    title: 'Age',\n    key: 'age',\n    sorter: (row1, row2) => row1.age - row2.age\n  },\n  {\n    title: 'Address',\n    key: 'address',\n    defaultFilterOptionValues: ['London', 'New York'],\n    filterOptions: [\n      {\n        label: 'London',\n        value: 'London'\n      },\n      {\n        label: 'New York',\n        value: 'New York'\n      }\n    ],\n    filter(value, row) {\n      return ~row.address.indexOf(value)\n    }\n  }\n]\n\nconst data = [\n  {\n    key: 0,\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park'\n  },\n  {\n    key: 1,\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park'\n  },\n  {\n    key: 2,\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park'\n  },\n  {\n    key: 3,\n    name: 'Jim Red',\n    age: 32,\n    address: 'London No. 2 Lake Park'\n  }\n]\n\nexport default defineComponent({\n  setup() {\n    const tableRef = ref(null)\n\n    return {\n      table: tableRef,\n      data,\n      columns,\n      pagination: { pageSize: 5 },\n      filterAddress() {\n        tableRef.value.filter({\n          address: ['London']\n        })\n      },\n      sortName() {\n        tableRef.value.sort('name', 'ascend')\n      },\n      clearFilters() {\n        tableRef.value.filter(null)\n      },\n      clearSorter() {\n        tableRef.value.sort(null)\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Message Provider in Vue\nDESCRIPTION: Example of wrapping content inside n-message-provider in a Vue component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/message/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- App.vue -->\n<n-message-provider>\n  <content />\n</n-message-provider>\n```\n\n----------------------------------------\n\nTITLE: Tabs Component Example List\nDESCRIPTION: Demo file references showing different implementations and use cases of the Tabs component\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/tabs/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\nsegment.vue\ncard.vue\nflex-label.vue\nprefix.vue\nsize.vue\ndisplay-directive.vue\naddable.vue\nbefore-leave.vue\nno-pane.vue\nupdate-bar-manually.vue\nbar-width.vue\ntrigger.vue\nplacement.vue\n```\n\n----------------------------------------\n\nTITLE: Input Component Demo List\nDESCRIPTION: List of available demos for the Input component showcasing various features and implementations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/input/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\nsize.vue\nround.vue\nicon.vue\nloading.vue\npassword.vue\ndisabled.vue\nclearable.vue\nautosize.vue\npair.vue\ninput-group.vue\npassively-activated.vue\ncount.vue\nfocus.vue\nevent.vue\ninput-props.vue\nstatus.vue\npattern.vue\ngraphemes.vue\n```\n\n----------------------------------------\n\nTITLE: Collapse Component Demo List\nDESCRIPTION: List of available demo files showcasing different features of the Collapse component including basic usage, arrow placement, accordion mode, nested collapses, display directives, and various customization options.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/collapse/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\narrow-placement.vue\naccordion.vue\nnested.vue\ndisplay-directive.vue\nitem-header-click.vue\ncustomize-icon.vue\ndefault-expanded.vue\nheader-extra.vue\ndisabled.vue\ntrigger-areas.vue\n```\n\n----------------------------------------\n\nTITLE: Rendering Naive UI Data Table with Filter and Sort Controls\nDESCRIPTION: This HTML snippet renders a Naive UI data table with buttons to sort by name, filter by address, and clear filters and sorters. It uses n-space for layout and n-data-table for the actual table component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/filter-and-sorter.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-space vertical :size=\"12\">\n  <n-space>\n    <n-button @click=\"sortName\">Sort By Name (Ascend)</n-button>\n    <n-button @click=\"filterAddress\">Filter Address (London)</n-button>\n    <n-button @click=\"clearFilters\">Clear Filters</n-button>\n    <n-button @click=\"clearSorter\">Clear Sorter</n-button>\n  </n-space>\n  <n-data-table\n    ref=\"table\"\n    :columns=\"columns\"\n    :data=\"data\"\n    :pagination=\"pagination\"\n  />\n</n-space>\n```\n\n----------------------------------------\n\nTITLE: Rendering Naive UI Data Table with Height Controls in HTML\nDESCRIPTION: This snippet renders a Naive UI data table with switches to toggle max-height and min-height settings. The table is configured with columns, data, pagination, and scroll properties.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/height-debug.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nset max-height：<n-switch v-model:value=\"setMaxHeightRef\" /> set\nmin-height：<n-switch v-model:value=\"setMinHeightRef\" />\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data\"\n  :pagination=\"pagination\"\n  :scroll-x=\"1800\"\n  :max-height=\"setMaxHeightRef ? 500 : undefined\"\n  :min-height=\"setMinHeightRef ? 300 : undefined\"\n/>\n```\n\n----------------------------------------\n\nTITLE: InputNumber API Documentation\nDESCRIPTION: Detailed API documentation including props, slots, and methods for the InputNumber component\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/input-number/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Default | Description | Version |\n| --- | --- | --- | --- | --- |\n| autofocus | `boolean` | `false` | Whether to autofocus. | 2.26.1 |\n| bordered | `boolean` | `true` | Whether to show a border. |  |\n| button-placement | `'both' \\| 'right'` | `'right'` | Placement of add & minus button. | 2.29.1 |\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of v-model with on-update in Vue Templates\nDESCRIPTION: Shows an incorrect way of using v-model with on-update event handling in Vue templates for Naive UI components. This approach can break the v-model binding due to conflicting attribute overrides.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/common-issues/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<n-input v-model:value=\"xxx\" :on-update:value=\"yyy\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Empty Component Demo Vue Files Reference\nDESCRIPTION: References to Vue demo files showing basic usage, icon customization, and size variations of the Empty component\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/empty/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\nicon.vue\nsize.vue\n```\n\n----------------------------------------\n\nTITLE: Importing Select Component Demos in Vue\nDESCRIPTION: This code snippet demonstrates how to import various demo components for the Select component in a Vue application. It includes examples for basic usage, sizing, multiple selection, events, filtering, and more.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/select/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nsize.vue\nmultiple.vue\nevents.vue\nfilterable.vue\ntag.vue\nmenu-width.vue\nremote.vue\nremote-multiple.vue\nclearable.vue\nscroll-event.vue\ngroup.vue\nmany-options.vue\ncustom-option.vue\ncustom-suffix.vue\naction.vue\nfallback-option.vue\nmax-tag-count.vue\nadd-tooltip.vue\nrender-tag.vue\nfocus.vue\nrender-person.vue\ntag-input.vue\nstatus.vue\nrtl-debug.vue\nplaceholder-debug.vue\nmenu-debug.vue\nrender-debug.vue\nspin-debug.vue\noptions-change-debug.vue\nfilterable-debug.vue\nempty-debug.vue\nfullscreen-debug.vue\ncustom-field.vue\ncreate-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Color Picker Usage in Vue\nDESCRIPTION: A list of Vue demo files showcasing different features and configurations of the Color Picker component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/color-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nalpha.vue\nsize.vue\ndisabled.vue\nmodes.vue\nactions.vue\nform.vue\nswatches.vue\nnative.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Module for Naive UI\nDESCRIPTION: Commands to install the Naive UI Nuxt module using npm or pnpm package managers.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/nuxtjs/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpx nuxi module add nuxtjs-naive-ui\n\n# pnpm\npnpm dlx nuxi module add nuxtjs-naive-ui\n```\n\n----------------------------------------\n\nTITLE: Rendering Naive UI Data Table with Merged Cells in HTML\nDESCRIPTION: This snippet shows how to render a Naive UI data table component with merged cells. It uses the n-data-table component and binds it to columns, data, and pagination props.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/merge-cell.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data\"\n  :pagination=\"pagination\"\n  :single-line=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Determining Tree Node Click Target - TypeScript\nDESCRIPTION: Function type definition for treeGetClickTarget utility that analyzes mouse events on tree nodes. Returns whether the click occurred on the checkbox, switcher, or node portion of a tree component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/tree/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntreeGetClickTarget: (e: MouseEvent) => ('checkbox' | 'switcher' | 'node')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Infinite Scroll Component Usage in Vue.js\nDESCRIPTION: This code snippet demonstrates the basic usage of the Infinite Scroll component. It references two Vue files: 'basic.vue' and 'chat.vue', which likely contain examples of how to implement the infinite scroll functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/infinite-scroll/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\nchat.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Popconfirm Basic Demo References\nDESCRIPTION: List of demo files showcasing different aspects of the Popconfirm component including basic usage, custom actions, custom icons, events, and variations without icons.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/popconfirm/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ndemo\nbasic.vue\ncustom-action.vue\ncustom-icon.vue\nevent.vue\nno-icon.vue\nactions.vue\n```\n\n----------------------------------------\n\nTITLE: Defining FormItem and FormItemGi Methods in TypeScript\nDESCRIPTION: TypeScript definitions for the FormItem and FormItemGi components' methods, including validate and restoreValidation for individual form item validation.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/form/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n| 名称 | 类型 | 说明 | 版本 |\n| --- | --- | --- | --- |\n| validate | `(options: { trigger?: string, callback?: (errors: FormValidationError \\| undefined, extra: { warnings: FormValidationError \\| undefined }) => void, shouldRuleBeApplied?: FormItemRule => boolean, options?: AsyncValidatorOptions }) => Promise<{ warnings: FormValidationError \\| undefined }>` | 验证表项，Promise rejection 的返回值类型是 `FormValidationError`。如果不设定 `trigger`，这一个表项全部的规则都会被使用。`shouldRuleBeApplied` 可以用来进一步过滤已经经过 `trigger` 筛选的规则 | `warnings` `2.37.1` |\n| restoreValidation | `() => void` | 还原到未校验的状态 |  |\n```\n\n----------------------------------------\n\nTITLE: Retrieving RGB Color from Color Name in JavaScript\nDESCRIPTION: A JavaScript function that creates a temporary DOM element to compute and return the RGB value of a given color name. This can be used to get color values not directly provided by the Color Picker component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/color-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexport function getRgb(colorName) {\n  const el = document.createElement('div')\n  el.style.color = colorName\n  document.body.appendChild(el)\n  const rgbColor = getComputedStyle(el).color\n  document.body.removeChild(el)\n  return rgbColor\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Card Component Usage in Vue\nDESCRIPTION: A list of Vue demo files showcasing different aspects and configurations of the Card component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/card/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nsize.vue\ncover.vue\nhoverable.vue\nslots.vue\nborder.vue\nsegment.vue\nclosable.vue\nno-title.vue\nloading.vue\ncustom-style.vue\nembedded.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Modal Provider in Vue Application\nDESCRIPTION: Basic setup example showing how to wrap content with the Modal Provider component, which is required for using the useModal API.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/modal/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- App.vue -->\n<n-modal-provider>\n  <content />\n</n-modal-provider>\n```\n\n----------------------------------------\n\nTITLE: Defining Month Type Props in TypeScript\nDESCRIPTION: TypeScript interface for Month type props in the DatePicker component. Includes properties for actions, format, date validation, placeholder, and value update callbacks.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/date-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MonthProps {\n  actions?: Array<'clear' | 'now' | 'confirm'> | null\n  format?: string\n  isDateDisabled?: (current: number, detail: { type: 'date', year: number, month: number, date: number } | { type: 'month', year: number, month: number } | { type: 'year', year: number } | { type: 'quarter',  year: number, quarter: number } | { type: 'input' }) => boolean\n  placeholder?: string\n  onUpdateFormattedValue?: (value: string | null, timestampValue: number | null) => void\n  onUpdateValue?: (value: number | null, formattedValue: string | null) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Package Resolution Configuration Example\nDESCRIPTION: Example showing how to use package.json resolutions field to ensure all CSS Render packages point to the same version.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/ssr/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"css-render\": \"^0.15.14\",\n    \"@css-render/vue3-ssr\": \"^0.15.14\",\n    \"@css-render/plugin-bem\": \"^0.15.14\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Component Demo Imports\nDESCRIPTION: List of demo files showcasing different Rate component features and configurations\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/rate/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\nsize.vue\ncolor.vue\nicon.vue\nallow-half.vue\nreadonly.vue\nclearable.vue\n```\n\n----------------------------------------\n\nTITLE: Defining DateTimeRange Type Props in TypeScript\nDESCRIPTION: TypeScript interface for DateTimeRange type props in the DatePicker component. Includes properties for actions, calendar binding, default times, placeholders, formats, and various callbacks.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/date-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DateTimeRangeProps {\n  actions?: Array<'clear' | 'confirm'> | null\n  bindCalendarMonths?: boolean\n  defaultCalendarStartTime?: number\n  defaultCalendarEndTime?: number\n  defaultTime?: string | Array<string | undefined>\n  endPlaceholder?: string\n  format?: string\n  isDateDisabled?: (current: number, phase: 'start' | 'end', value: [number, number] | null) => boolean\n  isTimeDisabled?: (current: number, phase: 'start' | 'end', value: [number, number]) => {\n    isHourDisabled?: (hour: number) => boolean,\n    isMinuteDisabled?: (minute: number, hour: number | null) => boolean,\n    isSecondDisabled?: (second: number, minute: number | null, hour: number | null) => boolean\n  }\n  separator?: string\n  startPlaceholder?: string\n  timePickerProps?: TimePickerProps | [TimePickerProps, TimePickerProps]\n  updateValueOnClose?: boolean\n  onUpdateFormattedValue?: (value: [string, string] | null, timestampValue: [number, number] | null) => void\n  onUpdateValue?: (value: [number, number] | null, formattedValue: [string, string] | null) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MonthRange, QuarterRange, YearRange Type Props in TypeScript\nDESCRIPTION: TypeScript interface for MonthRange, QuarterRange, and YearRange type props in the DatePicker component. Includes properties for actions, placeholders, format, and value update callbacks.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/date-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RangeProps {\n  actions?: Array<'clear' | 'confirm'> | null\n  endPlaceholder?: string\n  format?: string\n  closeOnSelect?: boolean\n  separator?: string\n  startPlaceholder?: string\n  updateValueOnClose?: boolean\n  onUpdateFormattedValue?: (value: [string, string] | null, timestampValue: [number, number] | null) => void\n  onUpdateValue?: (value: [number, number] | null, formattedValue: [string, string] | null) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ellipsis Components in Vue\nDESCRIPTION: A set of Vue component demos showcasing different aspects and use cases of the Ellipsis and PerformantEllipsis components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/ellipsis/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nline-clamp.vue\nexpand-trigger.vue\ncustom-tooltip.vue\nperformant-ellipsis.vue\ndynamic-debug.vue\nwidth-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Descriptions Component Demos\nDESCRIPTION: Collection of demo files showcasing different aspects of the Descriptions component including basic usage, columns, span, placement, borders, and size variations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/descriptions/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\ncolumns.vue\nspan.vue\nplacement.vue\nbordered.vue\nsize.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Defining PaginationRenderLabel Type in TypeScript\nDESCRIPTION: TypeScript type definition for the PaginationRenderLabel, which is used to customize the rendering of pagination items.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/pagination/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype PaginationRenderLabel = (\n  info:\n    | {\n      type: 'fast-backward' | 'fast-forward'\n      node: VNode\n      active: boolean\n    }\n    | {\n      type: 'page'\n      node: number\n      active: boolean\n    }\n) => VNodeChild\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Demos in Vue\nDESCRIPTION: This code snippet imports multiple Vue components demonstrating different features and configurations of the Slider component. It includes basic usage, range selection, marks, value restrictions, disabled state, tooltip customization, formatting, reverse mode, vertical orientation, and custom thumbs and marks.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/slider/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nrange.vue\nmark.vue\nrestrict-selectable-values.vue\ndisabled.vue\ndisable-tooltip.vue\nformat.vue\nreverse.vue\nvertical.vue\nshow-tooltip.vue\nmultiple-debug.vue\ncustom-thumb.vue\ncustom-marks.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Table with Uncontrolled Filter and Sorter in Vue.js\nDESCRIPTION: This snippet defines a Vue.js component that implements a data table with uncontrolled filtering and sorting. It includes column definitions, sample data, and methods to handle sorting, filtering, and clearing operations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/filter-and-sorter.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineComponent, ref } from 'vue'\n\nconst columns = [\n  {\n    title: 'Name',\n    key: 'name',\n    defaultSortOrder: 'ascend',\n    sorter: 'default'\n  },\n  {\n    title: 'Age',\n    key: 'age',\n    sorter: (row1, row2) => row1.age - row2.age\n  },\n  {\n    title: 'Address',\n    key: 'address',\n    defaultFilterOptionValues: ['London', 'New York'],\n    filterOptions: [\n      {\n        label: 'London',\n        value: 'London'\n      },\n      {\n        label: 'New York',\n        value: 'New York'\n      }\n    ],\n    filter(value, row) {\n      return ~row.address.indexOf(value)\n    }\n  }\n]\n\nconst data = [\n  {\n    key: 0,\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park'\n  },\n  {\n    key: 1,\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park'\n  },\n  {\n    key: 2,\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park'\n  },\n  {\n    key: 3,\n    name: 'Jim Red',\n    age: 32,\n    address: 'London No. 2 Lake Park'\n  }\n]\n\nexport default defineComponent({\n  setup() {\n    const tableRef = ref(null)\n\n    return {\n      table: tableRef,\n      data,\n      columns,\n      pagination: { pageSize: 5 },\n      filterAddress() {\n        tableRef.value.filter({\n          address: ['London']\n        })\n      },\n      sortName() {\n        tableRef.value.sort('name', 'ascend')\n      },\n      clearFilters() {\n        tableRef.value.filter(null)\n      },\n      clearSorter() {\n        tableRef.value.sort(null)\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ellipsis Components in Vue\nDESCRIPTION: This code snippet shows the structure for importing and using various Ellipsis component demos. It includes basic usage, line clamping, expand trigger, custom tooltip, and performant ellipsis examples.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/ellipsis/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nline-clamp.vue\nexpand-trigger.vue\ncustom-tooltip.vue\nperformant-ellipsis.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Calendar Usage in Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the Calendar component. It is referenced in the demo section of the documentation.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/calendar/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Defining PaginationInfo Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for PaginationInfo, which provides detailed information about the current pagination state.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/pagination/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaginationInfo {\n  startIndex: number\n  endIndex: number\n  page: number\n  pageSize: number\n  pageCount: number\n  itemCount: number | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Time Picker Event Handlers\nDESCRIPTION: Defines callback methods for handling various time picker interactions such as value changes, focus, blur, and confirmation\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/time-picker/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TimePickerEvents {\n  onBlur?: () => void\n  onFocus?: () => void\n  onConfirm?: (value: number | null, formattedValue: string | null) => void\n  onUpdateValue?: (value: number | null, formattedValue: string | null) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Date Picker Demo Components in Vue\nDESCRIPTION: This code snippet demonstrates how to import and use various Date Picker demo components in a Vue application. It includes different types of date pickers such as date, datetime, daterange, and specialized pickers for month, year, quarter, and week selection.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/date-picker/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\ndate.vue\ndatetime.vue\ndatetimeformat.vue\ndaterange.vue\ndatetimerange.vue\nmonth.vue\nmonthrange.vue\nyear.vue\nyearrange.vue\nquarter.vue\nquarterrange.vue\nweek.vue\nsize.vue\ndefault-time.vue\ndisabled.vue\ndisabled-time.vue\nactions.vue\nshortcuts.vue\nevents.vue\nformat.vue\nfooterslot.vue\nstatus.vue\nicon.vue\npanel.vue\npanel-debug.vue\nform-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Color CSS Variables in Naive UI\nDESCRIPTION: A comprehensive list of color-related CSS variables that can be used in Naive UI components. These variables handle different states like hover, pressed, active, focus, and disabled.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/design-notes/design-token-status.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--color --color-hover --color-pressed --color-active --color-active-hover --color-active-pressed --color-focus --color-focus-hover --color-focus-active --color-focus-pressed --color-disabled --color-disabled-active\n```\n\n----------------------------------------\n\nTITLE: Rendering Data Table with Filter and Sort Controls in HTML\nDESCRIPTION: This snippet shows the template for rendering a data table with buttons to control sorting and filtering. It uses Naive UI components such as n-space, n-button, and n-data-table.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/filter-and-sorter.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-space vertical :size=\"12\">\n  <n-space>\n    <n-button @click=\"sortName\">Sort By Name (Ascend)</n-button>\n    <n-button @click=\"filterAddress\">Filter Address (London)</n-button>\n    <n-button @click=\"clearFilters\">Clear Filters</n-button>\n    <n-button @click=\"clearSorter\">Clear Sorter</n-button>\n  </n-space>\n  <n-data-table\n    ref=\"table\"\n    :columns=\"columns\"\n    :data=\"data\"\n    :pagination=\"pagination\"\n  />\n</n-space>\n```\n\n----------------------------------------\n\nTITLE: Progress Component Demo List\nDESCRIPTION: List of demo files showcasing different progress component implementations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/progress/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\ncircle.vue\nline.vue\ncircle-offset.vue\nmultiple-circle.vue\ndashboard.vue\ncustom-indicator.vue\ncolor.vue\nno-indicator.vue\nheight.vue\nprocessing.vue\ngradient.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Breadcrumb Component Usage in Vue\nDESCRIPTION: This code snippet shows how to import and use various demo components for the Breadcrumb, including basic usage, custom styling, separator configuration, and per-item separator customization.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/breadcrumb/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\ncustom.vue\nseparator.vue\nseparator-per-item.vue\n```\n```\n\n----------------------------------------\n\nTITLE: TimePicker Demo Files\nDESCRIPTION: This section lists the demo files available for the Naive UI TimePicker component. Each file demonstrates a specific feature or use case of the TimePicker, such as basic usage, confirming time, different sizes, disabling specific times, setting time steps, formatting, actions, 12-hour format, formatted values, focus, status and timezone.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/time-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n\"basic.vue\\nconfirm.vue\\nsize.vue\\ndisabled-time.vue\\nstep-time.vue\\nformat.vue\\nactions.vue\\nhours12.vue\\nformatted.vue\\nfocus.vue\\nstatus.vue\\ntimezone.vue\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Demos Vue Component\nDESCRIPTION: This demo section includes various Vue components that demonstrate basic time formatting and manipulation functionalities available in the Naive UI library. Each demo file illustrates a different aspect of time handling, such as formatting types, timezones, and relative time calculations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/time/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\n```\n\nLANGUAGE: demo\nCODE:\n```\ntype.vue\n```\n\nLANGUAGE: demo\nCODE:\n```\nformat.vue\n```\n\nLANGUAGE: demo\nCODE:\n```\nrelative.vue\n```\n\nLANGUAGE: demo\nCODE:\n```\nunix.vue\n```\n\nLANGUAGE: demo\nCODE:\n```\ntimezone.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Usage of PageHeader Component in Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the PageHeader component. It is referenced in the documentation but not directly provided in the content.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/page-header/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Using Global Message API in JavaScript\nDESCRIPTION: Demonstrates how to use the globally mounted message API in a separate JavaScript file.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/message/demos/enUS/index.demo-entry.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// xxx.js\nexport function handler() {\n  // You need to ensure that window.$message = message has been executed in setup\n  window.$message.success(\n    'Cause you walked hand in hand With another man in my place'\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DynamicTagsOption Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the DynamicTagsOption type, which represents the structure of tag options with label and value properties.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/dynamic-tags/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DynamicTagsOption {\n  label: string\n  value: string\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Font Weight in Naive UI with HTML\nDESCRIPTION: This HTML snippet shows how to adjust the font weight configuration for Naive UI globally using the n-config-provider component. It sets the fontWeightStrong property to '600' for stronger font weights.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/fonts/zhCN/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- 调整 naive-ui 的字重配置 -->\n<n-config-provider :theme-overrides=\"{ common: { fontWeightStrong: '600' } }\">\n  <app />\n</n-config-provider>\n```\n\n----------------------------------------\n\nTITLE: InputNumber Demo References\nDESCRIPTION: List of available demo files showcasing different features of the InputNumber component\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/input-number/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\ndisabled.vue\nparse.vue\nprecision.vue\nevent.vue\nicon.vue\nbutton-placement.vue\nloading.vue\nmin-max.vue\nsize.vue\nstep.vue\nvalidator.vue\nshow-button.vue\ndisable-keyboard.vue\nchange-timing.vue\nstatus.vue\ncustom-icon.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Split Component Usage in Vue\nDESCRIPTION: This code snippet demonstrates various usage examples of the Split component in Vue. It includes basic usage, vertical splitting, nested splits, event handling, slot usage, and controlled splits.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/split/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nvertical.vue\nnest.vue\nevent.vue\nslot.vue\ncontrolled.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DataTable Component in Vue\nDESCRIPTION: This snippet demonstrates how to import and use the DataTable component in a Vue application. It includes a list of demo files that showcase various features of the component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```vue\n<template>\n  <n-data-table :columns=\"columns\" :data=\"data\" />\n</template>\n\n<script>\nimport { NDataTable } from 'naive-ui'\n\nexport default {\n  components: {\n    NDataTable\n  },\n  // ... rest of the component logic\n}\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dynamic Tags Usage in Vue\nDESCRIPTION: A list of Vue demo files showcasing various features and use cases of the Dynamic Tags component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/dynamic-tags/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nmax.vue\nform.vue\nslot.vue\nrender-tag.vue\noption-format.vue\non-create.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Affix Usage in Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the Affix component. It likely shows how to implement the component and its basic functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/affix/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Disabling Preflight Styles in Naive UI using Vue\nDESCRIPTION: This Vue template snippet demonstrates how to disable the global preflight styles (CSS reset) that Naive UI applies by default. It uses the n-config-provider component with the preflight-style-disabled attribute to achieve this.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/style-conflict/enUS/index.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<n-config-provider preflight-style-disabled>\n  <your-app />\n</n-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Defining PaginationRenderLabel Type in TypeScript\nDESCRIPTION: Type definition for pagination label renderer that handles different types of pagination elements including fast navigation and page numbers.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/pagination/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PaginationRenderLabel = (\n  info:\n    | {\n      type: 'fast-backward' | 'fast-forward'\n      node: VNode\n      active: boolean\n    }\n    | {\n      type: 'page'\n      node: number\n      active: boolean\n    }\n) => VNodeChild\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Statistic Component Demo\nDESCRIPTION: Basic demonstration of the Statistic component referenced in the documentation.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/statistic/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ndemo\\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Space Component Usage in Vue\nDESCRIPTION: This code snippet demonstrates various usage examples of the Space component in Vue. It includes multiple demo files for different configurations and layouts.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/space/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nvertical.vue\nfrom-end.vue\nspace-between.vue\nspace-around.vue\ncenter.vue\nreverse.vue\ngrid-debug.vue\nrtl-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Dialog Implementation in Vue Component\nDESCRIPTION: Demonstrates how to use useDialog hook in a Vue component to create warning dialogs\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/dialog/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDialog } from 'naive-ui'\nimport { defineComponent } from 'vue'\n\n// content\nexport default defineComponent({\n  setup() {\n    const dialog = useDialog()\n    return {\n      warning() {\n        dialog.warning(options)\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component for n-data-table Configuration in JavaScript\nDESCRIPTION: This snippet sets up a Vue component that provides data and column definitions for the n-data-table examples. It defines custom render functions for columns and creates two sets of data with different content lengths to demonstrate various table behaviors.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/scroll-debug.demo.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineComponent, h } from 'vue'\n\nconst label0\n  = 'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy'\n\nconst label\n  = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\nexport default defineComponent({\n  setup() {\n    return {\n      columns: [\n        {\n          key: '1',\n          title: '1',\n          render(rowData) {\n            return h('div', { style: 'white-space: nowrap;' }, rowData['1'])\n          }\n        },\n        {\n          key: '2',\n          title: '2',\n          render(rowData) {\n            return h('div', { style: 'white-space: nowrap;' }, rowData['2'])\n          }\n        }\n      ],\n      data: [\n        {\n          1: label0,\n          2: label\n        },\n        {\n          1: label0,\n          2: label\n        },\n        {\n          1: label0,\n          2: label\n        },\n        {\n          1: label0,\n          2: label\n        }\n      ],\n      data1: [\n        {\n          1: 'x',\n          2: 'x'\n        },\n        {\n          1: 'x',\n          2: 'x'\n        },\n        {\n          1: 'x',\n          2: 'x'\n        },\n        {\n          1: 'x',\n          2: 'x'\n        }\n      ]\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Naive UI Table Component Props\nDESCRIPTION: Demonstrates the various configurable props for the Naive UI Table component, including border styles, sizing, and striped rows\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/table/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<n-table\n  :bordered=\"true\"\n  :bottom-bordered=\"true\"\n  :single-column=\"false\"\n  :single-line=\"true\"\n  :size=\"'medium'\"\n  :striped=\"false\"\n>\n```\n\n----------------------------------------\n\nTITLE: Defining PaginationInfo Interface in TypeScript\nDESCRIPTION: Interface definition for pagination information including page counts, sizes, and indices.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/pagination/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaginationInfo {\n  startIndex: number\n  endIndex: number\n  page: number\n  pageSize: number\n  pageCount: number\n  itemCount: number | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Tree ScrollTo Type Definition in TypeScript\nDESCRIPTION: Type definition for the ScrollTo method that can be used to scroll the tree to specific positions or items. The method accepts multiple parameter combinations for different scrolling behaviors.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/tree/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ScrollTo {\n  (x: number, y: number): void\n  (options: { left?: number, top?: number, debounce?: boolean }): void\n  (options: { index: number, debounce?: boolean }): void\n  (options: { key: string | number, debounce?: boolean }): void\n  (options: { position: 'top' | 'bottom', debounce?: boolean }): void\n}\n```\n\n----------------------------------------\n\nTITLE: Color State Precedence in Naive UI\nDESCRIPTION: Shows the precedence order of different color states in Naive UI components. The order goes from disabled-active (highest precedence) to default (lowest precedence).\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/design-notes/design-token-status.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ndisabled-active > disabled > active-hover > active > pressed > hover > default\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Popconfirm Usage in Vue\nDESCRIPTION: A list of Vue demo files showcasing various aspects of the Popconfirm component. These demos likely include basic usage, custom actions, custom icons, event handling, no icon display, and multiple actions.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/popconfirm/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\ncustom-action.vue\ncustom-icon.vue\nevent.vue\nno-icon.vue\nactions.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Cascader Demo List in Markdown\nDESCRIPTION: A list of demonstration files for the Cascader component, showing different usage scenarios and features such as single selection, multiple selection, sizing, and various customization options.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/cascader/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nsingle.vue\nmultiple.vue\nsize.vue\nsingle-lazy.vue\nmultiple-lazy.vue\naction.vue\nvirtual.vue\ncheck-strategy.vue\ncustom-field.vue\ncustom-render.vue\nfocus.vue\nstatus.vue\ndefault-value-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Anchor Component Demos\nDESCRIPTION: Vue demo examples for the Anchor component showing basic usage, ignore-gap functionality, affix behavior, and scroll-to capability.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/anchor/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nignore-gap.vue\naffix.vue\nscrollto.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Table Component Structure\nDESCRIPTION: Shows the basic structure of a Naive UI Table using its core components like n-table, n-thead, n-tbody, n-tr, n-th, and n-td\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/table/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<n-table>\n  <n-thead>\n    <n-tr>\n      <n-th>Header 1</n-th>\n      <n-th>Header 2</n-th>\n    </n-tr>\n  </n-thead>\n  <n-tbody>\n    <n-tr>\n      <n-td>Data 1</n-td>\n      <n-td>Data 2</n-td>\n    </n-tr>\n  </n-tbody>\n</n-table>\n```\n\n----------------------------------------\n\nTITLE: Switch Component Demo Files\nDESCRIPTION: List of demo files showing different features of the Switch component including basic usage, sizing, content, loading states, events, value customization, shapes, colors, and icons.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/switch/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbasic.vue\nsize.vue\ncontent.vue\nloading.vue\nevent.vue\ncustomize-value.vue\nshape.vue\ncolor.vue\nicon.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Drawer Usage in Vue\nDESCRIPTION: This snippet shows a list of demo files for the Drawer component, illustrating various use cases and configurations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/drawer/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nmultiple.vue\nclosable.vue\ntarget.vue\nslot.vue\nscroll.vue\na11y-debug.vue\ncustom-style-debug.vue\ndark-1-debug.vue\ndark-2-debug.vue\ndark-3-debug.vue\ndark-4-debug.vue\nresizable.vue\nrtl-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Spin Wrap Demo Reference\nDESCRIPTION: Reference to a demonstration showing how to wrap content with the Spin component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/spin/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nwrap.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Demo References\nDESCRIPTION: List of Vue demo files demonstrating different aspects of the dynamic input component including basic usage, pair mode, custom implementation, form integration, move functionality, and custom actions.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/dynamic-input/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\npair.vue\ncustom.vue\nform.vue\nmove.vue\ncustom-action.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing n-element with Theme Switching in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the n-element component within a Naive UI application. It includes a space layout with buttons to toggle between dark and light themes, and shows how to create a span element using n-el that responds to theme changes through CSS variables.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/theme/enUS/element.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-space vertical>\n  <n-space>\n    <n-button @click=\"theme = darkTheme\">Dark</n-button>\n    <n-button @click=\"theme = null\">Light</n-button>\n  </n-space>\n  <n-config-provider :theme=\"theme\">\n    <n-card>\n      <n-el\n        tag=\"span\"\n        style=\"color: var(--primary-color); transition: .3s var(--cubic-bezier-ease-in-out);\"\n      >\n        I am a Span.\n      </n-el>\n    </n-card>\n  </n-config-provider>\n</n-space>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pagination Component Usage in Vue\nDESCRIPTION: A list of Vue component files demonstrating various aspects and configurations of the Pagination component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/pagination/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nsimple.vue\nslot.vue\nquick-jumper.vue\nsize.vue\nsize-picker.vue\ndisabled.vue\nitem-count.vue\nprev.vue\nprefix.vue\npage-size-option.vue\ndisplay-order.vue\nrtl-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Data Table Usage in Vue\nDESCRIPTION: Demonstrates the basic usage of the data table component in a Vue file.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```vue\n<template>\n  <n-data-table\n    :columns=\"columns\"\n    :data=\"data\"\n    :pagination=\"pagination\"\n    :bordered=\"false\"\n  />\n</template>\n\n<script>\n// Component implementation\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up NotificationProvider in Vue\nDESCRIPTION: Basic setup example showing how to wrap content in NotificationProvider component\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/notification/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- App.vue -->\n<n-notification-provider>\n  <content />\n</n-notification-provider>\n```\n\n----------------------------------------\n\nTITLE: Importing Vertical Flex Component Demo\nDESCRIPTION: Demo import reference for vertical flex layout functionality\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/flex/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nvertical.vue\n```\n\n----------------------------------------\n\nTITLE: Spin Description Demo Reference\nDESCRIPTION: Reference to a demonstration showing usage of description in the Spin component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/spin/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ndescription.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Naive UI Descriptions Component Usage in Vue\nDESCRIPTION: This code snippet shows a list of Vue demo files that demonstrate various aspects of the Descriptions component, including basic usage, columns, span, placement, bordered style, size options, and single-line debugging.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/descriptions/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\ncolumns.vue\nspan.vue\nplacement.vue\nbordered.vue\nsize.vue\nsingle-line-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Mention Component Demo Files\nDESCRIPTION: List of Vue demo files showcasing different aspects of the Mention component functionality\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/mention/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\ntextarea.vue\nasync.vue\nautosize.vue\nform.vue\nrender-label.vue\ncustom-prefix.vue\nmanual-trigger.vue\nstatus.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Known SSR Issues with Naive UI Components\nDESCRIPTION: This snippet lists Naive UI components that have known bugs in SSR scenarios, advising users to avoid them if possible. It mentions that some issues are resolved in newer Vue versions.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/ssr/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `n-scrollbar`, `n-data-table` (It works after vue >= 3.2.36)\n- `n-anchor`\n- `n-avatar-group`\n- `n-watermark`\n- `n-affix`\n- `n-transfer`\n```\n\n----------------------------------------\n\nTITLE: Float Button Basic Demo Import\nDESCRIPTION: Demo imports for Float Button component examples showing basic usage, badge integration, tooltip functionality, custom styling, group implementation, and menu integration.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/float-button/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\nbadge.vue\ntooltip.vue\ncustom.vue\ngroup.vue\nmenu.vue\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Table Template with Naive UI\nDESCRIPTION: Basic template setup for Naive UI data table component with column definitions and data binding.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/merge-cell.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data\"\n  :pagination=\"pagination\"\n  :single-line=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Style Scheme with n-element in Naive UI\nDESCRIPTION: Demonstrates how to use the n-element component with style scheme to apply dynamic styling. The example shows binding styles to a pre element using the styleScheme object, including text color and transition properties. The content displays a formatted JSON representation of the styleScheme object.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/build/loaders/test/basic.test.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-element tag=\"div\" class=\"myel\">\n  <template #=\"{ styleScheme }\">\n    <pre\n      :style=\"{\n        color: styleScheme.secondaryTextColor,\n        transition: `color .3s ${styleScheme.easeInOutCubicBezier}`\n      }\"\n    >\n{{ JSON.stringify(styleScheme, 0, 2) }}</pre\n    >\n  </template>\n</n-element>\n```\n\n----------------------------------------\n\nTITLE: Visibility Height Back Top Demo\nDESCRIPTION: Demo showing back top with custom visibility height configuration.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/back-top/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ndemo\nvisibility-height.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Result Component Usage in Vue.js\nDESCRIPTION: This snippet demonstrates various usage examples of the Result component in Vue.js. It includes different scenarios like 404, 403, 500, and 418 error pages, as well as info, success, warning, size, and custom result pages.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/result/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\ns-404.vue\ns-403.vue\ns-500.vue\ns-418.vue\ninfo.vue\nsuccess.vue\nwarning.vue\nsize.vue\ncustom.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Popselect Usage in Vue\nDESCRIPTION: This code snippet shows the demo import statements for various Popselect usage examples. It includes basic usage, size variations, scrollable options, multiple selection, and custom slot usage.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/popselect/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nsize.vue\nscrollable.vue\nmultiple.vue\nslot.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Naive UI Component in Vue SFC\nDESCRIPTION: This snippet demonstrates how to import and use a Naive UI component (NButton) in a Vue Single File Component using the composition API.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/usage-sfc/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-button>naive-ui</n-button>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import { NButton } from 'naive-ui'\n\n  export default defineComponent({\n    components: {\n      NButton\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Naive UI Data Table Template\nDESCRIPTION: Basic template setup for a Naive UI data table component with scroll and pagination configuration.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/fixed-column2-debug.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table\n  :columns=\"columns\"\n  :data=\"data\"\n  :pagination=\"pagination\"\n  :scroll-x=\"2000\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GradientText Component Usage in Vue\nDESCRIPTION: This code snippet demonstrates the usage of the GradientText component in Vue. It includes three separate demos: basic usage, size customization, and custom gradient configuration.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/gradient-text/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nsize.vue\ncustom.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Marquee Component Usage in Vue\nDESCRIPTION: This code snippet shows how to use the Marquee component in Vue. It includes references to three demo files: basic.vue, image.vue, and auto-fill.vue.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/marquee/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nimage.vue\nauto-fill.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Target Container Back Top Demo\nDESCRIPTION: Demo showing back top with custom target container selector implementation.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/back-top/demos/enUS/index.demo-entry.md#2025-04-18_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\ndemo\ntarget-container-selector.vue\n```\n\n----------------------------------------\n\nTITLE: Typography Demo Import References\nDESCRIPTION: Demo file references for typography component examples including header, tags, text, and router-link demonstrations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/typography/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nheader.vue\ntags.vue\ntext.vue\nrouter-link.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Scrollbar Demo Imports\nDESCRIPTION: Demo file imports for the Scrollbar component examples showing different use cases and configurations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/scrollbar/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nx.vue\ntrigger.vue\nno-sync.vue\ncustom.vue\nplacement.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Defining DataTableCreateSummary Type in TypeScript\nDESCRIPTION: Declares the DataTableCreateSummary type, which is a function type for creating summary rows in a data table.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/index.demo-entry.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype DataTableCreateSummary = (pageData: RowData[]) =>\n  | Array<{\n    [columnKey: string]: {\n      value?: VNodeChild\n      colSpan?: number\n      rowSpan?: number\n    }\n  }>\n  | {\n    [columnKey: string]: {\n      value?: VNodeChild\n      colSpan?: number\n      rowSpan?: number\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Drawer Component Demo References\nDESCRIPTION: List of available demo files showcasing different drawer functionalities including basic usage, multiple drawers, closable variations, custom targets, slots, scrolling, and resizable options.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/drawer/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\nmultiple.vue\nclosable.vue\ntarget.vue\nslot.vue\nscroll.vue\nresizable.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Naive UI Data Table Template\nDESCRIPTION: HTML template structure for a data table with sorting and filtering controls using Naive UI components. Includes buttons for sorting by name, filtering by address, and clearing filters/sorters.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/multiple-sorter.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-space vertical :size=\"12\">\n  <n-space>\n    <n-button @click=\"sortName\">Sort By Name (Ascend)</n-button>\n    <n-button @click=\"filterAddress\">Filter Address (London)</n-button>\n    <n-button @click=\"clearFilters\">Clear Filters</n-button>\n    <n-button @click=\"clearSorter\">Clear Sorter</n-button>\n  </n-space>\n  <n-data-table\n    ref=\"dataTableInst\"\n    :columns=\"columns\"\n    :data=\"data\"\n    :pagination=\"pagination\"\n  />\n</n-space>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Usage of Element Component in Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the Element component in a Vue file. The actual implementation is not shown, but it's referenced as a demo file named 'basic.vue'.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/element/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme Variables in HTML Template\nDESCRIPTION: Shows how to display theme variables in a pre element with overflow handling\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/theme/enUS/use-theme-vars.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<pre style=\"overflow: auto;\">{{ themeVars }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Component Demo References\nDESCRIPTION: A collection of Vue component demos showcasing different features of the Tag component including basic usage, borders, closability, disabled state, sizes, checkable functionality, shapes, colors, avatars, and icons.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/tag/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\nbordered.vue\nclosable.vue\ndisabled.vue\nsize.vue\ncheckable.vue\nshape.vue\ncolor.vue\navatar.vue\nicon.vue\n```\n\n----------------------------------------\n\nTITLE: Skeleton Demo References\nDESCRIPTION: Demo file references for the Skeleton component showing basic usage, box styling, and size variations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/skeleton/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\nbox.vue\nsize.vue\n```\n\n----------------------------------------\n\nTITLE: Defining DataTableFilterState Interface in TypeScript\nDESCRIPTION: Specifies the structure of the DataTableFilterState interface, which is an object with string keys and various value types.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DataTableFilterState {\n  [key: string]: Array<string | number> | string | number | null | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Element Usage in Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the Element component in a Vue file. The actual implementation details are not provided in the given content.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/element/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Image Component Usage in Vue\nDESCRIPTION: A list of Vue demo files showcasing various features and use cases of the Image component in Naive UI.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/image/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\ngroup.vue\nerror.vue\ncustom-error.vue\npreview-disabled.vue\ncustom-toolbar.vue\ncustom.vue\ntooltip.vue\nlazy.vue\npreviewed-img-props.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Spin Component Usage in Vue\nDESCRIPTION: This code snippet showcases various demo files for the Spin component, including basic usage, wrapping content, adding descriptions, customizing icons, implementing delays, and debugging blocking behavior.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/spin/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nwrap.vue\ndescription.vue\ncustomize-icon.vue\ndelay.vue\nblocking-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Volar Support for Naive UI in TypeScript\nDESCRIPTION: This JSON configuration snippet shows how to set up Volar support for Naive UI in a TypeScript project by modifying the tsconfig.json file.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/usage-sfc/zhCN/index.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"types\": [\"naive-ui/volar\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Internationalization Number Animation Demo\nDESCRIPTION: Demo file reference for internationalized number animation\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/number-animation/demos/enUS/index.demo-entry.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nintl.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Empty Component Usage in Vue\nDESCRIPTION: This code snippet references three Vue files that demonstrate different aspects of the Empty component: basic usage, icon customization, and size variations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/empty/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nicon.vue\nsize.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Naive UI Globally in Vue Application\nDESCRIPTION: This JavaScript snippet demonstrates how to install all Naive UI components globally in a Vue application. It imports the entire Naive UI library and uses it with the Vue app instance.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/usage-sfc/enUS/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport naive from 'naive-ui'\nimport { createApp } from 'vue'\n\nconst app = createApp(App)\napp.use(naive)\n```\n\n----------------------------------------\n\nTITLE: Demo References for Vue Tooltip Component\nDESCRIPTION: List of demo files showcasing different aspects of the Tooltip component including basic usage, trigger types, events, placement options, styling and arrow customization.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/tooltip/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\ntrigger.vue\nevent.vue\nplacement.vue\nbody-style.vue\narrow.vue\n```\n\n----------------------------------------\n\nTITLE: Radio Button Group Demo\nDESCRIPTION: Demonstrates radio buttons in a button-style group layout\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/radio/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ndemo\nbutton-group.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Collapse Transition in Vue\nDESCRIPTION: A basic demonstration of the Collapse Transition component. The actual code is not provided in the snippet, but referenced as 'basic.vue'.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/collapse-transition/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Gradient Text Size in Vue\nDESCRIPTION: This code snippet shows how to use different sizes with the GradientText component. The actual implementation is not provided in the given content.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/gradient-text/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nsize.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Highlight Component in Vue\nDESCRIPTION: This code snippet demonstrates various usage examples of the Highlight component in Vue. It includes basic usage, styling, case sensitivity, and component-based examples.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/highlight/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nstyle.vue\ncase-sensitive.vue\ncomponent.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Menu Component Usage in Vue\nDESCRIPTION: This code snippet shows various demo files for the Menu component, illustrating different features and configurations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/menu/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nhorizontal.vue\nselect.vue\nrender-label.vue\ndefault-expanded-keys.vue\nindent.vue\ncollapse.vue\ninverted.vue\nlong-label.vue\naccordion.vue\nrouter-link.vue\ncustomize-field.vue\nexpand-selected-option.vue\nshow.vue\ndebug.vue\nshow-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demo References in Vue\nDESCRIPTION: Reference to basic and indent demo files that showcase the Thing component functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/thing/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\nindent.vue\n```\n\n----------------------------------------\n\nTITLE: Demo Import References in Vue\nDESCRIPTION: List of demo file references showing different popover implementations and features\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/popover/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\ntrigger.vue\ndelay.vue\nno-arrow.vue\nevent.vue\nplacement.vue\nraw-content.vue\nstyle.vue\ntrigger-width.vue\nmanual-position.vue\nslots.vue\n```\n\n----------------------------------------\n\nTITLE: Radio Size Variations Demo\nDESCRIPTION: Shows different size options for radio components\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/radio/demos/enUS/index.demo-entry.md#2025-04-18_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\ndemo\nsize.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Number Animation Demo\nDESCRIPTION: Demo file reference for basic number animation functionality\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/number-animation/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Defining Week Type Props in TypeScript\nDESCRIPTION: TypeScript interface for Week type props in the DatePicker component. Includes properties for actions, default calendar start time, format, placeholder, and value update callbacks.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/date-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WeekProps {\n  actions?: Array<'clear' | 'now'> | null\n  defaultCalendarStartTime?: number\n  format?: string\n  placeholder?: string\n  onUpdateFormattedValue?: (value: string | null, timestampValue: number | null) => void\n  onUpdateValue?: (value: number | null, formattedValue: string | null) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Radio Component Demo\nDESCRIPTION: Demonstrates basic radio button implementation\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/radio/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ndemo\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Demo Imports in Markdown\nDESCRIPTION: References to Vue demo files showcasing various Avatar component features including size, shape, color configurations, badge integration, icon usage, name sizing, fallback handling, group functionality, lazy loading, and v-show debugging.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/avatar/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nsize.vue\nshape.vue\ncolor.vue\nbadge.vue\nicon.vue\nname-size.vue\nfallback.vue\ngroup.vue\nlazy.vue\nv-show-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: QR Code Demo References\nDESCRIPTION: List of demo files showing different aspects of QR code functionality including basic usage, icon integration, size customization, color modification, error correction, download capabilities, and type variations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/qr-code/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\nicon.vue\nsize.vue\ncolor.vue\nerror-correction.vue\ndownload.vue\ntype.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flex Layout in Vue\nDESCRIPTION: This snippet shows a series of Vue demo files for the Flex component, covering various layout scenarios and debugging options.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/flex/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nvertical.vue\nfrom-end.vue\nspace-between.vue\nspace-around.vue\ncenter.vue\ngrid-debug.vue\nrtl-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Version Compatibility Table in Markdown\nDESCRIPTION: A markdown table showing the compatible versions between @naive-ui/tusimple-theme and naive-ui packages, ranging from version 0.1.8 to 0.2.0.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/themes/tusimple/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| @naive-ui/tusimple-theme | naive-ui |\n| ------------------------ | -------- |\n| 0.1.8                    | 2.7.3    |\n| 0.1.9                    | 2.10.0   |\n| 0.1.10                   | 2.15.2   |\n| 0.1.11                   | 2.15.4   |\n| 0.2.0                    | 2.24.6   |\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker Methods in TypeScript\nDESCRIPTION: TypeScript interface for DatePicker methods. Includes focus and blur methods.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/date-picker/demos/enUS/index.demo-entry.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DatePickerMethods {\n  focus: () => void\n  blur: () => void\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Affix Usage in Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the Affix component. It references a Vue file named 'basic.vue'.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/affix/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Color Names to RGB Values in JavaScript\nDESCRIPTION: A JavaScript function that converts color names to their corresponding RGB values using DOM manipulation.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/color-picker/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getRgb(colorName) {\n  const el = document.createElement('div')\n  el.style.color = colorName\n  document.body.appendChild(el)\n  const rgbColor = getComputedStyle(el).color\n  document.body.removeChild(el)\n  return rgbColor\n}\n```\n\n----------------------------------------\n\nTITLE: Watermark Demos List - Vue\nDESCRIPTION: List of demo files demonstrating different watermark implementations including basic usage, fullscreen mode, image watermarks, multiline text, and custom configurations.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/watermark/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\nfullscreen.vue\nimage.vue\nmultiline.vue\ncustom.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Color Picker Usage in Vue\nDESCRIPTION: A list of Vue demo files showcasing various aspects of the Color Picker component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/color-picker/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nalpha.vue\nsize.vue\ndisabled.vue\nmodes.vue\nactions.vue\nform.vue\nswatches.vue\nnative.vue\nclose-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: 演示折叠面板组件的基本用法（Vue）\nDESCRIPTION: 这个代码片段列出了折叠面板组件的多个演示文件。这些演示涵盖了基本用法、箭头位置、手风琴模式、嵌套面板等功能。\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/collapse/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\narrow-placement.vue\naccordion.vue\nnested.vue\ndisplay-directive.vue\nitem-header-click.vue\ncustomize-icon.vue\ndefault-expanded.vue\nheader-extra.vue\ndisabled.vue\ntrigger-areas.vue\nrtl-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MessageRenderMessage Type in TypeScript\nDESCRIPTION: TypeScript type definition for the MessageRenderMessage function, used for custom message rendering.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/message/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype MessageRenderMessage = (props: {\n  content?: string | number | (() => VNodeChild)\n  icon?: () => VNodeChild\n  closable: boolean\n  type: 'info' | 'success' | 'warning' | 'error' | 'loading'\n  onClose?: () => void\n}) => VNodeChild\n```\n\n----------------------------------------\n\nTITLE: Importing Center Alignment Demo\nDESCRIPTION: Demo import reference for center alignment functionality\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/flex/demos/enUS/index.demo-entry.md#2025-04-18_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\ncenter.vue\n```\n\n----------------------------------------\n\nTITLE: Global Installation of Naive UI in Vue Application\nDESCRIPTION: This JavaScript snippet demonstrates how to globally install all Naive UI components in a Vue application. Note that this method is not recommended as it loses tree-shaking capabilities.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/usage-sfc/zhCN/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport naive from 'naive-ui'\nimport { createApp } from 'vue'\n\nconst app = createApp(App)\napp.use(naive)\n```\n\n----------------------------------------\n\nTITLE: Popselect Demo References\nDESCRIPTION: List of Vue demo files demonstrating different Popselect functionalities including basic usage, size variations, scrollable options, multiple selection, and custom slots.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/popselect/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nsize.vue\nscrollable.vue\nmultiple.vue\nslot.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Avatar Component Usage in Vue\nDESCRIPTION: A list of Vue component files demonstrating various aspects and features of the Avatar component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/avatar/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nerror-placeholder-debug.vue\nsize.vue\nshape.vue\ncolor.vue\nbadge.vue\nicon.vue\nname-size.vue\nfallback.vue\ngroup.vue\nlazy.vue\nv-show-debug.vue\nrtl-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Naive UI via NPM\nDESCRIPTION: Installs the Naive UI framework as a development dependency using npm package manager.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/build/loaders/test/test.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev naive-ui\n```\n\n----------------------------------------\n\nTITLE: Defining DataTableSortState Interface in TypeScript\nDESCRIPTION: Defines the structure of the DataTableSortState interface, which includes columnKey, sorter, and order properties.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DataTableSortState {\n  columnKey: string | number\n  sorter: 'default' | function | boolean\n  order: 'ascend' | 'descend' | false\n}\n```\n\n----------------------------------------\n\nTITLE: Precision Number Animation Demo\nDESCRIPTION: Demo file reference for number animation with precision control\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/number-animation/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nprecision.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Back Top Demo\nDESCRIPTION: Demo implementation showcasing basic back top functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/back-top/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ndemo\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Highlight Component Usage in Vue\nDESCRIPTION: This code snippet shows a series of demo files for the Highlight component. It includes examples for basic usage, styling, case sensitivity, and component integration.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/highlight/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nstyle.vue\ncase-sensitive.vue\ncomponent.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Grid Component Demo References\nDESCRIPTION: List of demo files referenced in the documentation for the Grid component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/grid/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\ngap.vue\noffset.vue\nresponsive.vue\nresponsive-item.vue\ncollapse.vue\nlayout-shift-disabled.vue\ngrid-basic-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Using Globally Registered Naive UI Components in Vue Templates\nDESCRIPTION: This snippet shows how to use Naive UI components in a Vue Single File Component after they have been globally registered. It demonstrates the simplified template syntax without requiring explicit component imports.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/import-on-demand/enUS/index.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-button>naive-ui</n-button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: 使用 peers 配置子组件主题变量 - TypeScript 实现\nDESCRIPTION: 演示如何通过 peers 属性为组件内部使用的其他组件设置主题变量。例如为 Select 组件内部的 InternalSelection 组件设置特定样式。\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/zhCN/index.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { NConfigProvider, GlobalThemeOverrides } from 'naive-ui'\n\n  const themeOverrides: GlobalThemeOverrides = {\n    Select: {\n      peers: {\n        InternalSelection: {\n          textColor: '#FF0000'\n        },\n        InternalSelectMenu: {\n          borderRadius: '6px'\n        }\n      }\n    },\n    DataTable: {\n      paginationMargin: '40px 0 0 0',\n      peers: {\n        Empty: {\n          textColor: '#ccc'\n        },\n        Pagination: {\n          itemTextColor: '#ccc'\n        }\n      }\n    }\n    // ...\n  }\n  // ...\n</script>\n\n<template>\n  <n-config-provider :theme-overrides=\"themeOverrides\">\n    <my-app />\n  </n-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Collapse Transition Implementation in Vue\nDESCRIPTION: Demonstrates the basic implementation of a collapse transition component. This example shows how to create a simple collapsible element with animation support.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/collapse-transition/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ndemo\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Dialog Provider Setup in Vue\nDESCRIPTION: Shows how to wrap components with n-dialog-provider to enable dialog functionality\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/dialog/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- App.vue -->\n<n-dialog-provider>\n  <content />\n</n-dialog-provider>\n```\n\n----------------------------------------\n\nTITLE: Adding new classes to n-data-table component in CSS\nDESCRIPTION: New CSS classes added to n-data-table for styling expanded and additional rows.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CHANGELOG.zh-CN.md#2025-04-18_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.n-data-table-tr--expanded {}\n.n-data-table-tr.n-data-table-tr--expand {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mention Component Usage in Vue\nDESCRIPTION: This code snippet lists various demo files for the Mention component, showcasing different features and use cases.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/mention/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\ntextarea.vue\nasync.vue\nautosize.vue\nform.vue\nrender-label.vue\ncustom-prefix.vue\nmanual-trigger.vue\nstatus.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Countdown Component Demos\nDESCRIPTION: Demo imports for the countdown component showcasing basic usage, precision settings, custom rendering, and reset functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/countdown/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\nprecision.vue\nrender.vue\nreset.vue\n```\n\n----------------------------------------\n\nTITLE: Transfer Component Demos\nDESCRIPTION: List of demo files showcasing different Transfer component functionalities\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/transfer/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\nlarge-data.vue\nfilterable.vue\nrender-label.vue\nrender-source-list.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Using TuSimple Theme in Naive UI\nDESCRIPTION: Demonstrates how to integrate the TuSimple theme into a Naive UI application. The snippet shows importing components from the TuSimple theme package, using the danger-typed dialog and message APIs, and wrapping the application in the ts-config-provider component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/experimental-features/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { TsConfigProvider, useDialog, useMessage } from '@naive-ui/tusimple-theme'\n\n  // danger typed api\n  const dialog = useDialog()\n  dialog.danger(...)\n\n  const message = useMessage()\n  message.danger(...)\n</script>\n\n<template>\n  <ts-config-provider>\n    <my-app />\n  </ts-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting up Global Message API in Vue\nDESCRIPTION: Example of mounting the message API to the window object for global access in a Vue component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/message/demos/enUS/index.demo-entry.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- content.vue -->\n<template>...</template>\n\n<script>\n  import { useMessage } from 'naive-ui'\n  import { defineComponent } from 'vue'\n\n  // content\n  export default defineComponent({\n    setup() {\n      window.$message = useMessage()\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Arrow Download Icon Component\nDESCRIPTION: Code to import the ArrowDownload16Regular icon from the Fluent icon set in the @vicons package for use in the UI components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/installation/zhCN/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nArrowDownload16Regular: import ArrowDownload16Regular from '@vicons/fluent/ArrowDownload16Regular'\n```\n\n----------------------------------------\n\nTITLE: Customize Spin Icon Demo Reference\nDESCRIPTION: Reference to a demonstration showing how to customize the icon in the Spin component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/spin/demos/enUS/index.demo-entry.md#2025-04-18_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\ncustomize-icon.vue\n```\n\n----------------------------------------\n\nTITLE: Exporting select method from n-input-number component in JavaScript\nDESCRIPTION: The select method is now exported from the n-input-number component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CHANGELOG.zh-CN.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const NInputNumber = {\n  methods: {\n    select: Function\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demo References in Vue\nDESCRIPTION: List of demo files showcasing different Grid component features including basic usage, gap settings, offset positioning, responsive behaviors, and collapse functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/grid/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\ngap.vue\noffset.vue\nresponsive.vue\nresponsive-item.vue\ncollapse.vue\nlayout-shift-disabled.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Data Table Template with Sorting Controls\nDESCRIPTION: HTML template showing the data table structure with buttons for sorting and filtering operations\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/multiple-sorter.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-space vertical :size=\"12\">\n  <n-space>\n    <n-button @click=\"sortName\">Sort By Name (Ascend)</n-button>\n    <n-button @click=\"filterAddress\">Filter Address (London)</n-button>\n    <n-button @click=\"clearFilters\">Clear Filters</n-button>\n    <n-button @click=\"clearSorter\">Clear Sorter</n-button>\n  </n-space>\n  <n-data-table\n    ref=\"dataTableInst\"\n    :columns=\"columns\"\n    :data=\"data\"\n    :pagination=\"pagination\"\n  />\n</n-space>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Fonts for Naive UI\nDESCRIPTION: Command to install the vfonts package as a development dependency, which provides necessary fonts for Naive UI components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D vfonts\n```\n\n----------------------------------------\n\nTITLE: Configuring highlight.js for Naive UI Code Component\nDESCRIPTION: This snippet demonstrates how to set up highlight.js for the Code component in Naive UI. It shows the recommended approach of importing highlight.js and specific language support on-demand to reduce bundle size.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/code/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-config-provider :hljs=\"hljs\">\n    <my-app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import hljs from 'highlight.js/lib/core'\n  import javascript from 'highlight.js/lib/languages/javascript'\n\n  hljs.registerLanguage('javascript', javascript)\n\n  export default defineComponent({\n    setup() {\n      return {\n        hljs\n      }\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding new properties to n-drawer component in JavaScript\nDESCRIPTION: New properties added to the n-drawer component for controlling dimensions.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CHANGELOG.zh-CN.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nn-drawer.props = {\n  'max-height': String,\n  'min-height': String,\n  'max-width': String,\n  'min-width': String\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ArrowDownload16Regular Icon in Vue\nDESCRIPTION: Vue component import statement for the ArrowDownload16Regular icon from the @vicons/fluent package, used in the design resource card.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/installation/enUS/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nArrowDownload16Regular: import ArrowDownload16Regular from '@vicons/fluent/ArrowDownload16Regular'\n```\n\n----------------------------------------\n\nTITLE: Debugging RTL (Right-to-Left) Collapse Transition in Vue\nDESCRIPTION: A demonstration for debugging the Collapse Transition component in right-to-left (RTL) contexts. The actual code is not provided in the snippet, but referenced as 'rtl-debug.vue'.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/collapse-transition/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nrtl-debug.vue\n```\n\n----------------------------------------\n\nTITLE: Icon Component Demo Files\nDESCRIPTION: Demonstration files for Icon component implementations including basic usage, custom icons, depth controls, and icon wrapper functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/icon/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\ncustom-icon.vue\ndepth.vue\nicon-wrapper.vue\n```\n\n----------------------------------------\n\nTITLE: Naive UI Todo List Documentation\nDESCRIPTION: Markdown formatted todo list containing urgent tasks and component-specific improvements needed for the Naive UI library.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/design-notes/todo.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# TODO\n\n## Urgent\n\n- message fullscreen\n- use resolve slot!!!\n- manual trigger style\n\n## DataTable\n\n## Form\n\n- (easy) message support render function\n\n## Popover\n\n## Radio\n\n- (easy) Button custom align & width\n\n## Select\n\n## Tabs\n\n- (moderate) Left, right tabs\n\n## Tree\n\n- (moderate) Use set to check if node is checked or selected internally\n\n## TreeSelect\n\n- (moderate) Async\n\n## DatePicker\n\n- Do not allow start > end\n```\n\n----------------------------------------\n\nTITLE: Installing Naive UI via npm\nDESCRIPTION: Command to install Naive UI as a development dependency in a project using npm package manager.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D naive-ui\n```\n\n----------------------------------------\n\nTITLE: Implementing Skeleton Component Layout with HTML and CSS\nDESCRIPTION: This code snippet demonstrates how to create a skeleton component layout using HTML and CSS. It defines styles for the skeleton elements and a container, and shows how to stack multiple skeleton elements vertically within a flex container.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/skeleton/src/bug.md#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n  .a-skeleton {\n    display: inline-block;\n    height: 1em;\n    width: 100%;\n    background: green;\n  }\n\n  .a-space {\n    border: 1px solid black;\n  }\n</style>\n<div class=\"a-space\" style=\"display: flex; flex-flow: column wrap;\">\n  <div style=\"max-width: 100%\">\n    <div class=\"a-skeleton\"></div>\n    <div class=\"a-skeleton\"></div>\n    <div class=\"a-skeleton\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding new methods to n-select and n-tree-select components in JavaScript\nDESCRIPTION: New methods added to focus and blur input elements in n-select and n-tree-select components.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CHANGELOG.zh-CN.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nn-select.methods = {\n  focusInput: Function,\n  blurInput: Function\n}\n\nn-tree-select.methods = {\n  focusInput: Function,\n  blurInput: Function\n}\n```\n\n----------------------------------------\n\nTITLE: Alert Component Warning\nDESCRIPTION: Vue template code showing a warning alert about Grid Item component encapsulation limitations\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/grid/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<n-alert type=\"warning\" title=\"Caveats\" :bordered=\"false\">\nDue to technical limitation, <n-text code>n-grid-item</n-text> can't be encapsulated in another component.\n</n-alert>\n```\n\n----------------------------------------\n\nTITLE: Icon Path Changes\nDESCRIPTION: Deprecated and removed icon paths that required vue-loader, replaced with xicons package.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/vue3.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nnaive-ui/lib|es/icons/*\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Icon Component Features in Vue\nDESCRIPTION: Collection of demo files showing basic usage, custom icons, depth functionality, and icon wrapper implementation.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/icon/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndemo\nbasic.vue\ncustom-icon.vue\ndepth.vue\nicon-wrapper.vue\n```\n\n----------------------------------------\n\nTITLE: Importing Flex End Demo\nDESCRIPTION: Demo import reference for flex end alignment functionality\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/flex/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nfrom-end.vue\n```\n\n----------------------------------------\n\nTITLE: Illustrating Affix Position Configuration in Vue\nDESCRIPTION: This code snippet showcases how to configure the position of the Affix component. It likely demonstrates different positioning options and their effects.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/affix/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nposition.vue\n```\n\n----------------------------------------\n\nTITLE: Installing Naive UI Nuxt Module\nDESCRIPTION: Commands to install the Naive UI Nuxt module using npm or pnpm package managers.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/nuxtjs/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpx nuxi module add nuxtjs-naive-ui\n\n# pnpm\npnpm dlx nuxi module add nuxtjs-naive-ui\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Community Resources for Naive UI\nDESCRIPTION: A markdown table listing various community resources related to Naive UI, including project names, links, and brief descriptions. The table covers admin templates, development frameworks, and tools that integrate with or complement Naive UI.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/community/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 资源 | 描述 |\n| --- | --- |\n| [Naive UI Admin](https://github.com/jekip/naive-ui-admin) | 免费开源的中后台模板 |\n| [Admin Work](https://github.com/qingqingxuan/admin-work) | 一款免费开源、功能强大、方便易用、漂亮的中后台管理系统模板 |\n| [zce/fearless](https://github.com/zce/fearless) | 一个基于 Vue.js 3.x & TypeScript & Vite 的管理平台脚手架，包含基本的身份认证和鉴权 |\n| [tsx-naive-admin](https://github.com/WalkAlone0325/tsx-naive-admin) | 基于 Vue 3 + Naive UI + TSX + Vite 的后台管理基本模板 |\n| [Soybean Admin](https://github.com/honghuangdc/soybean-admin) | 一个基于 Vue3 + Vite + Naive UI + TypeScript 的漂亮清爽的中后台模版 |\n| [GoView](https://gitee.com/dromara/go-view) | 开源、精美、便捷的「数据可视化」低代码开发平台 |\n| [Vue Naive Admin](https://github.com/zclzone/vue-naive-admin) | 基于 Vue3 + Vite4 + Pinia + Unocss + Naive UI 的轻量级后台管理模板 |\n| [Vue Bag Admin](https://vite.itnavs.com/admin/) | 🎉vue-bag-admin，采用Vite4、Vue3、TypeScript、JavaScript构建，支持多种写法和调用，完整的框架体系，响应式中后台管理系统 |\n| [Celeris Web](https://github.com/kirklin/celeris-web) | 一个基于 Vue 3 和 Vite 的免费开源前端框架，具有 Naive UI 组件和 TypeScript 支持，采用 Monorepo 结构。它还集成了 OpenAI，为现代 Web 开发提供自然语言处理能力。 |\n| [Pinx](https://themeforest.net/item/pinx-vuejs-admin-template/47799543?ref=DverseStudio&utm_source=awesomevue) | Pinx 是一个使用 Vue 3 + TypeScript 构建的管理模板，对开发人员友好，并使用 Naive UI 和 Tailwind CSS 进行设计。 与 Nuxt 兼容！ |\n| [Nova admin](https://github.com/chansee97/nova-admin) | 一个基于Vue3、Vite5、Typescript、Naive UI, 简洁干净后台管理模板，用简单的方式实现完整功能，并尽可能的考虑代码规范，易读易理解无过度封装，方便二次开发。 |\n| [Dumogu-admin](https://admin.dumogu.top/base-naive-ui/) | 一个基于Vue3、Vite5、Naive UI, 简洁干净后台管理模板，方便二次开发，易于上手，只有基础功能。 |\n| [chatgpt-web](https://github.com/Chanzhaoyu/chatgpt-web) | 使用 Express 和 Vue3 搭建的 ChatGPT 演示网页 |\n| [pro-components-naive-ui](https://github.com/Zheng-Changfu/pro-components-naive-ui) | 基于 Naive UI 二次封装, 基于原有组件扩展了更多功能 |\n| [vue3-dynamic-form](https://github.com/yayaluoya/vue3-dynamic-form) | 一个基于Vue3、Naive UI, 的动态表单设计器，实现了很多基础控件，能非常方便的自定义控件。 |\n| [astral-3d-editor](https://github.com/mlt131220/Astral3DEditor) | 基于Vue3 + Naive UI + ThreeJS + Vite5 + Typescript的三维场景构建工具，支持CAD & BIM解析，内含天气系统、粒子系统、插件中心... |\n```\n\n----------------------------------------\n\nTITLE: Basic Style Variable Naming Comparison\nDESCRIPTION: Shows two approaches to naming style variables for buttons with different types. The recommended pattern appends modifiers at the end of the base name.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/design-notes/how-to-name-a-style-var.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbuttonColor\nerrorButtonColor\n```\n\nLANGUAGE: text\nCODE:\n```\nbuttonColor\nbuttonColorError\n```\n\n----------------------------------------\n\nTITLE: Timeline Demo References\nDESCRIPTION: Demo file references for Timeline component examples showcasing basic usage, size variations, item placement, horizontal layout, and icon customization.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/timeline/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\nsize.vue\nitem-placement.vue\nhorizontal.vue\ncustomize-icon.vue\n```\n\n----------------------------------------\n\nTITLE: Installing vfonts for Naive UI\nDESCRIPTION: Command to install vfonts as a development dependency, which is recommended for use with Naive UI.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/installation/enUS/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D vfonts\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Affix Position Configuration in Vue\nDESCRIPTION: This code snippet shows how to configure the position of the Affix component. It references a Vue file named 'position.vue'.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/affix/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nposition.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Design Resource Card in Vue\nDESCRIPTION: Vue template for displaying a card with a download link for Naive UI design resources in Sketch format. It uses Naive UI components like n-card, n-button, and n-icon.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/installation/enUS/index.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<n-card size=\"small\" footer-style=\"text-align: center;\" style=\"width: 420px; max-width: 100%;\">\n  <template #cover>\n    <img src=\"https://naive-ui.oss-accelerate.aliyuncs.com/naive-design.png\">\n  </template>\n  <template #footer>\n    <n-button\n      tag=\"a\"\n      href=\"https://naive-ui.oss-accelerate.aliyuncs.com/NaiveUI-Design-Library-en-US.sketch\"\n      text\n      target=\"_blank\"\n      icon-placement=\"right\"\n    >\n      Naive UI (Sketch)\n      <template #icon>\n        <n-icon >\n          <ArrowDownload16Regular />\n        </n-icon>\n      </template>\n    </n-button>\n  </template>\n</n-card>\n```\n\n----------------------------------------\n\nTITLE: Style Variable Naming with Hover States - Approach 1\nDESCRIPTION: First approach to naming style variables incorporating both type and hover state modifiers.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/design-notes/how-to-name-a-style-var.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbuttonColor\nbuttonColorHover\nbuttonColorError\nbuttonColorErrorHover\n```\n\n----------------------------------------\n\nTITLE: Importing Basic Flex Component Demo\nDESCRIPTION: Demo import reference for basic flex layout functionality\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/flex/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Installing naive-ui and CSS Render SSR Support\nDESCRIPTION: Installation commands for adding naive-ui and its SSR support package via package managers. Includes both pnpm and npm installation methods.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/vite-ssge/zhCN/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# pnpm\npnpm i naive-ui @css-render/vue3-ssr\n\n# npm\nnpm i naive-ui @css-render/vue3-ssr\n```\n\n----------------------------------------\n\nTITLE: CSS Import Path Changes\nDESCRIPTION: Removed CSS index file path that should no longer be imported in version 2.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/vue3.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nnaive-ui/lib|es/styles/index.css\n```\n\n----------------------------------------\n\nTITLE: Configuring Volar Support for Naive UI in TypeScript\nDESCRIPTION: This JSON configuration snippet shows how to set up Volar support for Naive UI in a TypeScript project. It adds the Naive UI Volar types to the compiler options in tsconfig.json.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/usage-sfc/enUS/index.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"types\": [\"naive-ui/volar\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Fonts\nDESCRIPTION: Command to install vfonts as a development dependency, which provides font support for Naive UI.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/installation/zhCN/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D vfonts\n```\n\n----------------------------------------\n\nTITLE: Style Variable Naming with Hover States - Approach 2\nDESCRIPTION: Second (recommended) approach to naming style variables with consistent modifier ordering.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/design-notes/how-to-name-a-style-var.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nbuttonColor\nbuttonColorHover\nbuttonColorError\nbuttonColorHoverError\n```\n\n----------------------------------------\n\nTITLE: Component Properties Configuration\nDESCRIPTION: Declaration of new properties and attributes added to various components like placement, status, container-style etc.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CHANGELOG.zh-CN.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentProps {\\n  placement: 'top' | 'bottom' | 'left' | 'right';\\n  status: string;\\n  containerStyle: string | object;\\n  headerExtraStyle: string | object;\\n  keepAliveOnHover: boolean;\\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Group Component Demo\nDESCRIPTION: Shows implementation of radio buttons in a group\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/radio/demos/enUS/index.demo-entry.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ndemo\ngroup.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Spin Demo Reference\nDESCRIPTION: Reference to a basic demonstration of the Spin component functionality.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/spin/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Font Path Changes\nDESCRIPTION: Removed font file paths, replaced with vfonts package dependency.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/vue3.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nnaive-ui/lib|es/styles/fonts/*\n```\n\n----------------------------------------\n\nTITLE: Adding new property to n-tree component in JavaScript\nDESCRIPTION: New property added to n-tree component for showing lines between nodes.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CHANGELOG.zh-CN.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nn-tree.props = {\n  'show-line': Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Content\nDESCRIPTION: Full changelog markdown documenting changes from v2.37.2 to v2.41.0 for the Naive UI library, including breaking changes, fixes, features and i18n updates.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CHANGELOG.zh-CN.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 2.41.0\n\n`2025-01-05`\n\n### Breaking Changes\n\n- （需要 Vue 3.3+）为所有的组件增加插槽的类型标注\n\n### i18n\n\n- 添加 kmKH 国际化\n- 添加 ugCN 国际化\n\n### Features\n\n- `n-modal` 新增 `draggable` 属性，关闭 [#6525](https://github.com/tusen-ai/naive-ui/issues/6525)、[#5792](https://github.com/tusen-ai/naive-ui/issues/5792)、[#5711](https://github.com/tusen-ai/naive-ui/issues/5711)、[#5501](https://github.com/tusen-ai/naive-ui/issues/5501)、[#2152](https://github.com/tusen-ai/naive-ui/issues/2152)\n- `useDialog` 支持 `draggable` 参数\n- `useModal` 支持 `draggable` 参数\n\n[...remaining changelog content...]\n```\n\n----------------------------------------\n\nTITLE: Demo File References\nDESCRIPTION: List of demo files showcasing various notification features\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/notification/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: demo\nCODE:\n```\nbasic.vue\ntype.vue\nchange-content.vue\nscrollable.vue\nclosable.vue\nduration.vue\nmax.vue\nplacement.vue\n```\n\n----------------------------------------\n\nTITLE: Finish Callback Number Animation Demo\nDESCRIPTION: Demo file reference for number animation with finish callback\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/number-animation/demos/enUS/index.demo-entry.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfinish.vue\n```\n\n----------------------------------------\n\nTITLE: Checkbox Demo Imports\nDESCRIPTION: A list of Vue demo files showcasing different features of the Checkbox component, including basic usage, sizing, grouping, grid layout, indeterminate state, controlled components, events, custom values, and focus behavior.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/checkbox/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\nsize.vue\ngroup.vue\ngrid.vue\nindeterminate.vue\ncontrolled.vue\nevent.vue\ncustomize-value.vue\nfocus.vue\n```\n\n----------------------------------------\n\nTITLE: Documentation Format Examples for Naive UI\nDESCRIPTION: Examples of proper formatting for API tables and changelogs in both English and Chinese, including punctuation rules and version formatting guidelines.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nEnglish API table:\n| Name | Type | Default | Description | Version |\n| --- | --- | --- | --- | --- |\n| example | `any` | `undefined` | Need period. | NEXT_VERSION |\n\nChinese API table:\n| 名称 | 类型 | 默认值 | 说明 | 版本 |\n| --- | --- | --- | --- | --- |\n| example | `any` | `undefined` | 描述不要加句号 | NEXT_VERSION |\n\nEnglish Changelog:\n- Some changes, period needed.\n\nChinese Changelog:\n- 一些变更，不要加句号\n\nSpace between Chinese and Latin charactors:\n星之 star 卡比 kirby\n\nChangelog position:\n\n# CHANGELOG\n\n## NEXT_VERSION\n\n### Feats\n\nyour changelog\n\n### Fixes\n```\n\n----------------------------------------\n\nTITLE: Position Change Back Top Demo\nDESCRIPTION: Demo demonstrating back top with modified position settings.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/back-top/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ndemo\nchange-position.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating List Components in Vue\nDESCRIPTION: Collection of Vue demo files showcasing basic list functionality, hoverable states, and border styling options.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/list/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\nhoverable.vue\nborder.vue\n```\n\n----------------------------------------\n\nTITLE: Image Component Demo File List\nDESCRIPTION: List of demo files showing different use cases and features of the Image component\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/image/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic.vue\ngroup.vue\nerror.vue\ncustom-error.vue\npreview-disabled.vue\ncustom-toolbar.vue\ncustom.vue\ntooltip.vue\nfull-debug.vue\nlazy.vue\npreviewed-img-props.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for naive-ui SSR Support\nDESCRIPTION: Configuration for vite.config.ts that sets up SSR support for naive-ui. It marks packages as non-external and configures CSS collection hooks to properly inject styles during server-side rendering.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/vite-ssge/zhCN/index.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { setup } from '@css-render/vue3-ssr'\n\ndefineConfig({\n  ssr: {\n    noExternal: ['naive-ui', 'vueuc', 'date-fns']\n  },\n  ssgOptions: {\n    async onBeforePageRender(_, __, appCtx) {\n      const { collect } = setup(appCtx.app)\n      ;(appCtx as any).__collectStyle = collect\n      return undefined\n    },\n    async onPageRendered(_, renderedHTML, appCtx) {\n      return renderedHTML.replace(\n        /<\\/head>/,\n        `${(appCtx as any).__collectStyle()}</head>`\n      )\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Naive UI Data Table Template\nDESCRIPTION: HTML template for rendering a data table with pagination support. The table uses key-based row identification and handles page changes.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/enUS/switchable-editable.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table\n  :key=\"(row) => row.key\"\n  :columns=\"columns\"\n  :data=\"data\"\n  :pagination=\"paginationRef\"\n  :on-update:page=\"handlePageChange\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Gradient Text in Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the GradientText component. It's referenced in the documentation but the actual code is not provided in the given content.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/gradient-text/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Config Consumer Demo\nDESCRIPTION: A demo placeholder indicating the existence of a basic configuration consumer example\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/config-consumer/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```demo\nbasic\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Table Template with Naive UI\nDESCRIPTION: HTML template configuration for a Naive UI data table component with fixed scrolling, height constraints, and pagination settings\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/data-table/demos/zhCN/fixed-column-debug.demo.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<n-data-table\n  bordered\n  :scroll-x=\"2000\"\n  :max-height=\"200\"\n  :data=\"data\"\n  :columns=\"columns\"\n  :single-line=\"false\"\n  :pagination=\"pagination\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Naive UI Dependencies\nDESCRIPTION: Command line instructions for installing required packages naive-ui and @css-render/vue3-ssr using either pnpm or npm package managers.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/vite-ssge/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# pnpm\npnpm i naive-ui @css-render/vue3-ssr\n\n# npm\nnpm i naive-ui @css-render/vue3-ssr\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Gradient Text in Vue\nDESCRIPTION: This code snippet illustrates custom usage of the GradientText component. The specific implementation details are not provided in the given content.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/gradient-text/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ncustom.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Alert Component Usage in Vue\nDESCRIPTION: This code snippet lists various demo files for the Alert component, showcasing different features and use cases.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/alert/demos/zhCN/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n```demo\nbasic.vue\nbordered.vue\nclosable.vue\nicon.vue\nno-icon.vue\nmarquee.vue\nrtl-debug.vue\nempty-debug.vue\n```\n```\n\n----------------------------------------\n\nTITLE: Spin Delay Demo Reference\nDESCRIPTION: Reference to a demonstration showing the delay functionality in the Spin component.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/spin/demos/enUS/index.demo-entry.md#2025-04-18_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\ndelay.vue\n```\n\n----------------------------------------\n\nTITLE: NaiveUI Version Updates and Changes Log\nDESCRIPTION: Markdown formatted changelog documenting version history including features, bug fixes, and breaking changes for the NaiveUI component library. Includes details about RTL support additions, component enhancements, and bug fixes across multiple versions.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CHANGELOG.en-US.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Feats\n\n- `n-dynamic-tags` `input` slot add `deactivate` prop, closes [#2575](https://github.com/tusen-ai/naive-ui/issues/2575).\n- `n-space` add `RTL` support.\n- `n-avatar-group` add `RTL` support.\n- `n-badge` add `RTL` support.\n- `n-radio` add `RTL` support.\n- `n-auto-complete` adds `focus` method.\n- `n-auto-complete` adds `blur` method.\n\n## 2.26.1\n\n`2022-03-06`\n\n### Fixes\n\n- Fix `base-loading` use css transition rather than svg animateTrantion to prevent js blocking, close [#2506](https://github.com/tusen-ai/naive-ui/issues/2506).\n- Fix `n-time` throws error caused by `getTimezoneOffset`, closes [#2545](https://github.com/tusen-ai/naive-ui/issues/2545).\n- Fix `n-modal`'s mask doesn't have enter & leave transition.\n- Fix `n-timeline` has style conflict when vertical & horizontal `n-timeline` are nested, closes [#2549](https://github.com/tusen-ai/naive-ui/issues/2549).\n- Fix `n-tree`'s arrow & loading switch animation isn't complete.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Infinite Scroll in Vue\nDESCRIPTION: Demo file showing basic implementation of infinite scroll component\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/infinite-scroll/demos/enUS/index.demo-entry.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbasic.vue\n```\n\n----------------------------------------\n\nTITLE: Separator Number Animation Demo\nDESCRIPTION: Demo file reference for number animation with separator display\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/number-animation/demos/enUS/index.demo-entry.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nseparator.vue\n```\n\n----------------------------------------\n\nTITLE: Importing Space Between Demo\nDESCRIPTION: Demo import reference for space-between distribution functionality\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/flex/demos/enUS/index.demo-entry.md#2025-04-18_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nspace-between.vue\n```\n\n----------------------------------------\n\nTITLE: Importing Space Around Demo\nDESCRIPTION: Demo import reference for space-around distribution functionality\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/src/flex/demos/enUS/index.demo-entry.md#2025-04-18_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nspace-around.vue\n```\n\n----------------------------------------\n\nTITLE: Nimbus Icon Component Path\nDESCRIPTION: Modified path for n-nimbus-icon component before removal in v2.10.0.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/vue3.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nnaive-ui/compat/nimbus-icon\n```\n\n----------------------------------------\n\nTITLE: Using TuSimple Theme with Naive UI\nDESCRIPTION: Demonstrates how to implement the experimental TuSimple theme in a Naive UI application. The example shows how to import and use the TsConfigProvider component and utilize the danger typed API with useDialog and useMessage hooks.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/experimental-features/enUS/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { TsConfigProvider, useDialog, useMessage } from '@naive-ui/tusimple-theme'\n\n  // danger typed api\n  const dialog = useDialog()\n  dialog.danger(...)\n\n  const message = useMessage()\n  message.danger(...)\n</script>\n\n<template>\n  <ts-config-provider>\n    <my-app />\n  </ts-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Component Property Types in TypeScript\nDESCRIPTION: TypeScript type declarations for component properties like FormItemRule, LogInst, SelectRenderLabel, etc.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/CHANGELOG.zh-CN.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormItemRule = {\\n  validator: FormItemRule;\\n  asyncValidator: FormItemRule;\\n}\\n\\nexport type LogInst = {\\n  // Log instance methods\\n}\\n\\nexport type SelectRenderLabel = {\\n  // Select label render function type\\n}\\n\\nexport type SelectRenderOption = {\\n  // Select option render function type\\n}\\n\\nexport type SelectRenderTag = {\\n  // Select tag render function type\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Naive UI in Vue Application\nDESCRIPTION: Imports and initializes Naive UI framework in a Vue.js application entry point, including required CSS styles.\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/build/loaders/test/test.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport naive from 'naive-ui'\nimport 'naive-ui/dist/lib/index.css'\n\nVue.use(naive)\n```\n\n----------------------------------------\n\nTITLE: 添加全局样式同步到 body 元素\nDESCRIPTION: 使用 n-global-style 组件将 n-config-provider 提供的主题样式同步到 document.body 上，确保全局样式统一响应主题变化。\nSOURCE: https://github.com/tusen-ai/naive-ui/blob/main/demo/pages/docs/customize-theme/zhCN/index.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <n-config-provider>\n    <app />\n    <n-global-style />\n  </n-config-provider>\n</template>\n```"
  }
]