[
  {
    "owner": "maplibre",
    "repo": "maplibre-gl-js",
    "content": "TITLE: Initializing a Map in MapLibre GL JS\nDESCRIPTION: Creates a basic map with MapLibre GL JS. The map is initialized with a container element, style URL for tiles, center coordinates, and zoom level.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'maplibre-gl/dist/maplibre-gl.css';\nimport {Map} from 'maplibre-gl';\n\nconst map = new Map({\n  container: 'map',\n  style: 'https://demotiles.maplibre.org/style.json',\n  center: [0, 0],\n  zoom: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic MapLibre Map\nDESCRIPTION: HTML and JavaScript code for creating a basic map implementation using MapLibre GL JS, including container div and map initialization with basic configuration.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id='map' style='width: 400px; height: 300px;'></div>\n<script>\nvar map = new maplibregl.Map({\n  container: 'map',\n  style: 'https://demotiles.maplibre.org/style.json', // stylesheet location\n  center: [-74.5, 40], // starting position [lng, lat]\n  zoom: 9 // starting zoom\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Map in MapLibre GL\nDESCRIPTION: Code to create a basic map with MapLibre GL JS, including necessary CSS imports and map configuration.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport 'maplibre-gl/dist/maplibre-gl.css';\nimport {Map} from 'maplibre-gl';\n\nconst map = new Map({\n  container: 'map',\n  style: 'https://demotiles.maplibre.org/style.json',\n  center: [0, 0],\n  zoom: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Options for GeoJSON Source in MapLibre\nDESCRIPTION: This snippet demonstrates how to add a GeoJSON source to a MapLibre map with clustering enabled. It sets cluster options like maximum zoom level for clustering and cluster radius.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/large-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmap.addSource('earthquakes', {\n            type: 'geojson',\n            data: 'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson',\n            cluster: true,\n            clusterMaxZoom: 14, // Max zoom to cluster points on\n            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n        });\n```\n\n----------------------------------------\n\nTITLE: Updating MapBox to MapLibre Class References and CSS Selectors\nDESCRIPTION: Example showing how to replace MapBox class instances and CSS selectors with MapLibre equivalents. This includes changing map initialization code and HTML/CSS class names.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/mapbox-migration-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-    var map = new mapboxgl.Map({\n+    var map = new maplibregl.Map({\n\n-    <button class=\"mapboxgl-ctrl\">\n+    <button class=\"maplibregl-ctrl\">\n```\n\n----------------------------------------\n\nTITLE: Using Batch Operations in Map Style API (JavaScript)\nDESCRIPTION: Example of using the batch operation feature to perform multiple style operations at once, which improves performance when making multiple style changes. This allows grouping operations like adding layers and setting properties in a single transaction.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nstyle.batch(function (s) {\n  s.addLayer({ id: \"first\", type: \"symbol\", source: \"streets\" });\n  s.addLayer({ id: \"second\", type: \"symbol\", source: \"streets\" });\n  s.addLayer({ id: \"third\", type: \"symbol\", source: \"terrain\" });\n  s.setPaintProperty(\"first\", \"text-color\", \"black\");\n  s.setPaintProperty(\"first\", \"text-halo-color\", \"white\");\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a GeoJSON Layer in MapLibre GL\nDESCRIPTION: Code to add a GeoJSON layer from a file using MapLibre GL JS, requiring source and layer configuration.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmap.on('load', function () {\n  map.addSource('geojson-source', {\n    type: 'geojson',\n    data: 'data.geojson',\n  });\n\n  map.addLayer({\n    id: 'geojson-layer',\n    type: 'fill',\n    source: 'geojson-source',\n    paint: {\n      'fill-color': '#0080ff',\n      'fill-opacity': 0.5,\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tile Loading Sequence Flow with Mermaid Diagram\nDESCRIPTION: This sequence diagram illustrates the complete tile loading process in MapLibre GL JS, showing interactions between the main thread components (map, source cache, source) and worker thread components. It visualizes how different source types handle tile loading, including raster, vector, GeoJSON, and DEM sources.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/life-of-a-tile.md#2025-04-18_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  %%{init: { 'sequence': {'messageAlign': 'left', 'boxTextMargin': 5} }}%%\n  participant map\n  participant source_cache\n  participant source\n  participant ajax\n  participant glyph manager\n  box rgba(128,128,128,0.1) worker\n    participant worker\n    participant worker_source\n    participant worker_tile\n    participant bucket\n    participant worker_ajax\n  end\n\n  map->>source_cache: update(transform)\n  source_cache->>source_cache: compute covering<br> tiles\n  source_cache->>source: loadTile() for each<br>missing tile\n  alt raster_tile_source\n    source->>ajax: getImage\n    else image_source\n    source->>ajax: getImage (once)\n    else raster_dem_tile_source\n    source->>ajax: getImage()\n    source->>worker: loadDEMTile()\n    worker->>worker: add 1px buffer\n    worker-->>source: DEMData\n  else vector_tile_source/geojson_source\n    source->>worker: loadTile()\n    worker->>worker_source: loadVectorTile()\n    alt vector_tile_source\n    worker_source->>worker_ajax: getArrayBuffer()\n    worker_source->>worker_source: decode pbf\n    worker_source->>worker_source: parse vector tile\n    else geojson_source\n        worker_source->>worker_ajax: getJSON()\n        worker_source->>worker_source: geojson-vt parse\n        worker_source->>worker_source: getTile()\n    end\n    worker_source->>worker_tile: parse()\n    loop for each \"layer family\"\n        worker_tile->>worker_tile: calculate layout<br>properties\n        worker_tile->>worker_tile: createBucket\n        worker_tile->>bucket: populate()\n        bucket->>bucket: compute triangles<br>needed by GPU<br>for each feature we<br>have data for\n        worker_tile->>glyph manager: getGlyphs\n        glyph manager->>ajax: Fetch font<br>PBFs\n        glyph manager->>glyph manager: TinySDF\n        worker_tile->glyph manager: getImages\n        glyph manager->>ajax: Fetch icon<br>images\n        glyph manager-->>worker_tile: glyph/Image dependencies\n        worker_tile->>worker_tile: wait for all requests to finish\n        worker_tile->>worker_tile: create GlyphAtlas\n        worker_tile->>worker_tile: create ImageAtlas\n        worker_tile->>bucket: addFeatures\n        worker_tile->>bucket: performSymbolLayout\n        bucket->>bucket: place characters\n        bucket->>bucket: compute collision<br/>boxes\n        bucket->>bucket: compute triangles<br/>needed by GPU\n    end\n    worker_tile-->>source: callback(bucket, featureIndex, collision boxes, GlyphAtlas, ImageAtlas)\n    source->>source: loadVectorData()<br/>decode response\n  end\n  source-->>source_cache: Tile\n  source_cache-->>source_cache: _backfillDEM()<br/>copy 1px buffer<br/>from neighboring tiles\n  source->>source: fire('data', {<br/>dataType: 'source'<br>})\n  source->>source_cache:<br>\n  source_cache->map:<br>\n  map->map: fire('sourcedata')\n  map->map: render new frame\n```\n\n----------------------------------------\n\nTITLE: Visualizing the MapLibre GL JS Render Loop with Mermaid Diagram\nDESCRIPTION: A sequence diagram showing the complete render loop in MapLibre GL JS. It illustrates how data flows from the map through style, painter, layers, source cache, and ultimately to the GPU for display to the user. The diagram shows the multi-pass rendering process and tile preparation steps.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/life-of-a-tile.md#2025-04-18_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant map\n    participant style\n    participant painter\n    participant layer\n    participant source_cache\n    participant GPU\n    actor user\n\n    map->>style: update(transform)\n    style->>layer: recalculate()\n    layer->>layer: recompute<br>paint properties\n    map->>source_cache: update(transform)\n    source_cache->>source_cache: fetch new tiles\n    map->>painter: render(style)\n    painter->>source_cache: prepare(context)\n    loop for each tile\n        source_cache->>GPU: upload vertices\n        source_cache->>GPU: upload image textures\n    end\n    loop for each layer\n        painter->>layer: renderLayer(pass=offscreen)\n        painter->>layer: renderLayer(pass=opaque)\n        painter->>layer: renderLayer(pass=translucent)\n        painter->>layer: renderLayer(pass=debug)\n        loop renderLayer() call for each tile\n            layer->>GPU: load program\n            layer->>GPU: drawElements()\n            GPU->>user: display pixels\n        end\n    end\n    map->>map: triggerRepaint()\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment on macOS\nDESCRIPTION: Commands to install prerequisites and set up the development environment for MapLibre GL JS on macOS, including Xcode Command Line Tools, Node.js, and necessary dependencies for node_canvas.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install node\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:maplibre/maplibre-gl-js.git\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config cairo pango libpng jpeg giflib librsvg\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd maplibre-gl-js &&\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding a Marker in MapLibre GL JS\nDESCRIPTION: Creates and adds a marker to a MapLibre GL JS map. A Marker instance is created with a color property, positioned at specific coordinates, and added to the map. This is done within the map's load event.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmap.on('load', function () {\n  new maplibregl.Marker({ color: 'red' })\n    .setLngLat([0, 0])\n    .addTo(map);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment on Linux\nDESCRIPTION: Commands to install prerequisites and set up the development environment for MapLibre GL JS on Linux systems, including required system packages, nvm, Node.js, and project dependencies.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update &&\nsudo apt-get install build-essential git libglew-dev libxi-dev default-jre default-jdk xvfb\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install python-is-python3 pkg-config libpixman-1-dev libcairo2-dev libpango1.0-dev libgif-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n```\n\nLANGUAGE: bash\nCODE:\n```\nnvm install\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:maplibre/maplibre-gl-js.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd maplibre-gl-js &&\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using 'within' Expression in MapLibre GL JS\nDESCRIPTION: Demonstrates how to use the new 'within' expression to test if a feature lies within a given GeoJSON object. This example sets the icon opacity based on whether the feature is within a polygon.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"icon-opacity\": [\"case\", [\"==\", [\"within\", \"some-polygon\"], true], 1,\n[\"==\", [\"within\", \"some-polygon\"], false], 0]\n```\n\n----------------------------------------\n\nTITLE: Using setFeatureState for Interactive Styling in JavaScript\nDESCRIPTION: New method Map#setFeatureState and feature-state expression added to support interactive styling of map features.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nmap.setFeatureState({\n  source: 'mySourceLayer',\n  id: 'featureId'\n}, { hover: true });\n```\n\n----------------------------------------\n\nTITLE: Installing MapLibre GL JS Resources\nDESCRIPTION: HTML code for including MapLibre GL JS JavaScript and CSS files in the head section of an HTML document.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src='https://unpkg.com/maplibre-gl@latest/dist/maplibre-gl.js'></script>\n<link href='https://unpkg.com/maplibre-gl@latest/dist/maplibre-gl.css' rel='stylesheet' />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Popup in MapLibre GL JS\nDESCRIPTION: Creates and displays a popup in MapLibre GL JS. The popup is positioned at specific coordinates, populated with HTML content, and added directly to the map.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst popup = new maplibregl.Popup()\n  .setLngLat([0, 0])\n  .setHTML('<p>Hello, MapLibre!</p>')\n  .addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Displaying a Popup in MapLibre GL\nDESCRIPTION: Code to create and display a popup with HTML content at specific coordinates in MapLibre GL JS.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nnew maplibregl.Popup()\n  .setLngLat([0, 0])\n  .setHTML('<p>Hello, MapLibre!</p>')\n  .addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Creating a Map without a Style\nDESCRIPTION: Demonstrates how to initialize a map without specifying a style, which will create an empty style automatically. This is useful when you want to build a style from scratch programmatically.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// An empty style will be created automatically\nmap.setMinZoom(0);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terrain Elevation with queryTerrainElevation\nDESCRIPTION: This method allows getting terrain elevation in meters at a specific geographical point. It was added as a feature in version 3.0.0-pre.5.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmap.queryTerrainElevation(lngLat)\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in MapLibre GL JS\nDESCRIPTION: Adds a click event listener to a MapLibre GL JS map that logs the clicked longitude and latitude coordinates to the console.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmap.on('click', function (event) {\n  console.log('Clicked coordinates:', event.lngLat);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Polygon in MapLibre GL\nDESCRIPTION: Code to add a polygon to a MapLibre GL JS map using GeoJSON format with source and layer configuration.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nmap.on('load', function () {\n  map.addSource('polygon', {\n    type: 'geojson',\n    data: {\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[ -0.1, 51.5 ], [ -0.12, 51.5 ], [ -0.12, 51.52 ], [ -0.1, 51.5 ]]]\n      }\n    }\n  });\n\n  map.addLayer({\n    id: 'polygon-layer',\n    type: 'fill',\n    source: 'polygon',\n    paint: {\n      'fill-color': '#ff0000',\n      'fill-opacity': 0.5\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using the 'in' Expression for Array and String Checking\nDESCRIPTION: Shows how to use the 'in' expression to check if a value exists in an array or a substring exists within a string. This expression can be used for conditional styling or filtering.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\"in\", value, array]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\"in\", substring, string]\n```\n\n----------------------------------------\n\nTITLE: Updating GeoJSON Source Data Partially\nDESCRIPTION: Method that allows for partial updates to GeoJSON source data, added in version 3.0.0-pre.1. This improves performance by avoiding complete data reloads.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngeoJSONSource.updateData(data)\n```\n\n----------------------------------------\n\nTITLE: Using prewarm API - MapLibre GL JS\nDESCRIPTION: API methods added to optimize map load times by prewarming and clearing resources.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmapboxgl.prewarm()\nmapboxgl.clearPrewarmedResources()\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in MapLibre GL\nDESCRIPTION: Code to handle map click events and log clicked coordinates in MapLibre GL JS.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmap.on('click', function (event) {\n  console.log('Clicked coordinates:', event.lngLat);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in Leaflet\nDESCRIPTION: Code to handle map click events and log clicked coordinates in Leaflet.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmap.on('click', function (event) {\n  console.log('Clicked coordinates:', event.latlng);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Markers in Mapbox GL JS\nDESCRIPTION: New setDraggable method added to Marker class to enable creating draggable markers on the map.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst marker = new mapboxgl.Marker()\n  .setLngLat([longitude, latitude])\n  .setDraggable(true)\n  .addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Using MercatorCoordinate Unit Conversion Method\nDESCRIPTION: A utility method that converts from meter units to Mercator coordinate values, which is useful when working with custom layers that require coordinate calculations.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nMercatorCoordinate.meterInMercatorCoordinateUnits\n```\n\n----------------------------------------\n\nTITLE: Using Line Gradient Property in Mapbox GL JS\nDESCRIPTION: New line-gradient property added to create gradients along lines in map styles.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nmap.addLayer({\n  'id': 'gradientLine',\n  'type': 'line',\n  'source': 'mySource',\n  'paint': {\n    'line-color': 'red',\n    'line-gradient': [\n      'interpolate',\n      ['linear'],\n      ['line-progress'],\n      0, 'blue',\n      1, 'red'\n    ]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Max and Min Zoom Levels in MapLibre\nDESCRIPTION: This code snippet shows how to initialize a MapLibre map with specified maximum and minimum zoom levels. Setting these levels can improve map performance during panning and zooming.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/large-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet map = new maplibregl.Map({\n  container: 'map',\n  maxZoom: 12,\n  minZoom: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Hash as a Custom Query Parameter in Map Options\nDESCRIPTION: A feature that allows setting the 'hash' Map option as a string to customize the query parameter used for the map hash in the URL, providing more flexibility for URL structure.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage:\nconst map = new mapboxgl.Map({\n    hash: 'custom-param-name'\n    // other map options\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Cluster Options for a GeoJSON Source\nDESCRIPTION: Method to update cluster properties of already added GeoJSON sources, added in version 3.0.0-pre.4. This fixes issues #429 and #1384.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsource.setiClusterOptions(options)\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Tile Layer in MapLibre GL\nDESCRIPTION: Code to add an OpenStreetMap raster tile layer to a MapLibre GL JS map, requiring source and layer configuration.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nmap.on('load', function () {\n  map.addSource('osm', {\n    type: 'raster',\n    tiles: ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],\n    tileSize: 256\n  });\n\n  map.addLayer({\n    id: 'osm-layer',\n    type: 'raster',\n    source: 'osm',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating CDN Links from MapBox to MapLibre\nDESCRIPTION: Example showing how to replace MapBox CDN links with MapLibre equivalents. This includes updating both JavaScript and CSS resource URLs with proper version numbers.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/mapbox-migration-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-    <script src=\"https://api.mapbox.com/mapbox-gl-js/v#.#.#/mapbox-gl.js\"></script>\n-    <link\n-      href=\"https://api.mapbox.com/mapbox-gl-js/v#.#.#/mapbox-gl.css\"\n-      rel=\"stylesheet\"\n-    />\n\n\n+    <script src=\"https://unpkg.com/maplibre-gl@#.#.#/dist/maplibre-gl.js\"></script>\n+    <link\n+      href=\"https://unpkg.com/maplibre-gl@#.#.#/dist/maplibre-gl.css\"\n+      rel=\"stylesheet\"\n+    />\n\n```\n\n----------------------------------------\n\nTITLE: Using 'image' Expression Operator for Determining Image Availability\nDESCRIPTION: The 'image' expression operator allows developers to determine if an image is available for use in style expressions, enabling conditional styling based on image availability.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage of the 'image' expression operator\nmap.setLayoutProperty('layer-id', 'icon-image', [\n  'coalesce',\n  ['image', 'specific-icon'],\n  'default-icon'\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Bounds from LngLat with Static Method\nDESCRIPTION: Static method to create bounds from a longitude/latitude point, replacing the previous LngLat.toBounds() method. This represents a breaking change in version 3.0.0-pre.5.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nLngLatBounds.fromLngLat(lngLat)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Previously Loaded Image with Map.getImage()\nDESCRIPTION: This method allows retrieving images that were previously loaded into the map. It was added in version 3.0.0-pre.5.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nMap.getImage(id)\n```\n\n----------------------------------------\n\nTITLE: Migrating from easeTo with Positional Parameters to Options Object\nDESCRIPTION: Demonstrates how to update code from using map.easeTo() with positional parameters to using a single options object. This change affects easeTo and flyTo methods which now accept a unified options object.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nmap.easeTo([40, -74.5], 9, null, { duration: 400 }); // 0.7.0 or earlier\nmap.easeTo({ center: [40, -74.5], zoom: 9, duration: 400 }); // now\n```\n\n----------------------------------------\n\nTITLE: Listing Active Sprites/Images in Mapbox GL JS\nDESCRIPTION: New Map#listImages method added to retrieve a list of all currently active sprites and images on the map.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst activeImages = map.listImages();\nconsole.log(activeImages);\n```\n\n----------------------------------------\n\nTITLE: LngLatBounds API Change Example\nDESCRIPTION: Demonstrates the change in API from LngLat.toBounds() to the new static method LngLatBounds.fromLngLat().\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old way\nlngLat.toBounds()\n\n// New way\nLngLatBounds.fromLngLat(lngLat)\n```\n\n----------------------------------------\n\nTITLE: Using Image Expressions in Text Labels with Format Expression\nDESCRIPTION: Demonstrates how to insert images into text labels using an 'image' expression within a 'format' expression. This allows embedding images alongside text in labels.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"text-field\": [\"format\", \"Some text\", [\"image\", \"my-image\"], \"some more text\"]\n```\n\n----------------------------------------\n\nTITLE: Installing MapLibre GL JS\nDESCRIPTION: Command to install the MapLibre GL JS library using npm package manager.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install maplibre-gl\n```\n\n----------------------------------------\n\nTITLE: Adding a Marker in MapLibre GL\nDESCRIPTION: Code to add a marker at coordinates [0, 0] using MapLibre GL JS.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnew maplibregl.Marker()\n  .setLngLat([0, 0])\n  .addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Installing MapLibre GL JS with npm\nDESCRIPTION: Command to install MapLibre GL JS package using npm.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install maplibre-gl\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment on Windows\nDESCRIPTION: Commands to set up the development environment for MapLibre GL JS on Windows, including cloning the repository, installing dependencies, and setting up headless-gl.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:maplibre/maplibre-gl-js.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd maplibre-gl-js\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\ncopy node_modules/headless-gl/deps/windows/dll/x64/*.dll c:\\windows\\system32\n```\n\n----------------------------------------\n\nTITLE: Using Expression Functions - MapLibre GL JS\nDESCRIPTION: Expression functions for searching arrays/strings and returning sections using index-of and slice.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// index-of and slice expressions can be used to:\n// - Search arrays and strings for first occurrence of a value\n// - Return a section of the original array or string\n```\n\n----------------------------------------\n\nTITLE: Querying RTL Text Plugin Status in JavaScript\nDESCRIPTION: A method to check the current status of the right-to-left text plugin to facilitate plugin management. This function helps developers determine if the plugin can be safely cleared when necessary.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nmapboxgl.getRTLTextPluginStatus()\n```\n\n----------------------------------------\n\nTITLE: Migrating from setView to jumpTo in MapLibre GL JS\nDESCRIPTION: Shows the API migration from the deprecated map.setView() method to the new map.jumpTo() method. The new method uses a single options object rather than positional parameters for setting map center and zoom level.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nmap.setView([40, -74.5], 9); // 0.7.0 or earlier\nmap.jumpTo({ center: [40, -74.5], zoom: 9 }); // now\n```\n\n----------------------------------------\n\nTITLE: Visualizing Event Flow in MapLibre GL JS with Mermaid Diagram\nDESCRIPTION: A sequence diagram showing the flow of events when users interact with the map, illustrating how user actions propagate through the DOM and various MapLibre components to ultimately update the map's transform and trigger rendering. The diagram shows connections between user, DOM, handler_manager, handler, camera, transform, and map components.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/life-of-a-tile.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor user\n    participant DOM\n    participant handler_manager\n    participant handler\n    participant camera\n    participant transform\n    participant map\n\n    user->>camera: map#setCenter, map#panTo\n    camera->>transform: update\n    camera->>map: fire move event\n    map->>map: _render()\n\n    user->>DOM: resize, pan,<br>click, scroll,<br>...\n    DOM->>handler_manager: DOM events\n    handler_manager->>handler: forward event\n    handler-->>handler_manager: HandlerResult\n    handler_manager->>transform: update\n    handler_manager->>map: fire move event\n    map->>map: _render()\n```\n\n----------------------------------------\n\nTITLE: Data Structure of Tile with Buckets after Transfer to Main Thread\nDESCRIPTION: This snippet illustrates the hierarchical data structure of a Tile object after bucket data has been transferred from the worker thread to the main thread. It shows how buckets are organized by layer ID, each containing ArrayGroup data with layout vertices, indices, and layer-specific painting information.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/ARCHITECTURE.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTile\n  |\n  +- buckets[layer-id]: Bucket\n  |    |\n  |    + ArrayGroup {\n  |        globalProperties: { zoom }\n  |        layoutVertexArray,\n  |        indexArray,\n  |        indexArray2,\n  |        layerData: {\n  |          [style layer id]: {\n  |            programConfiguration,\n  |            paintVertexArray,\n  |            paintPropertyStatistics\n  |          }\n  |          ...\n  |        }\n  |    }\n  |\n  +- buckets[...]: Bucket\n        ...\n```\n\n----------------------------------------\n\nTITLE: MapLibre Version History Documentation\nDESCRIPTION: A detailed changelog documenting bug fixes, features, improvements and breaking changes across MapLibre GL JS versions. Includes notes about typescript migration, API changes, and important fixes.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### 🐞 Bug fixes\n\n- Add adjustment for glyph rendering, CJK fonts are mainly affected ([#1002](https://github.com/maplibre/maplibre-gl-js/issues/1002)).\n- Improve typings to fix Angular strict mode failure ([#790](https://github.com/maplibre/maplibre-gl-js/issues/790), [#970](https://github.com/maplibre/maplibre-gl-js/issues/970), [#934](https://github.com/maplibre/maplibre-gl-js/issues/934))\n- Fix `SourceCache.loaded()` always returning `true` following a load error ([#1025](https://github.com/maplibre/maplibre-gl-js/issues/1025))\n- Added back csp and dev builds to npm package ([#1042](https://github.com/maplibre/maplibre-gl-js/issues/1042))\n```\n\n----------------------------------------\n\nTITLE: Adding a GeoJSON Layer in OpenLayers\nDESCRIPTION: Adds a GeoJSON layer to an OpenLayers map. Creates a VectorLayer with a VectorSource that loads GeoJSON data from a URL and formats it using the GeoJSON parser.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport VectorSource from 'ol/source/Vector';\nimport VectorLayer from 'ol/layer/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\n\nconst geoJsonLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'data.geojson',\n    format: new GeoJSON(),\n  }),\n});\n\nmap.addLayer(geoJsonLayer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Circle Color with Stop Functions\nDESCRIPTION: Example showing how to configure circle color using stop functions to create data-driven styling based on population values. This represents the previous approach before expressions were introduced.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"circle-color\": {\n  \"property\": \"population\",\n  \"stops\": [\n    [0, \"green\"],\n    [1000000, \"red\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a GeoJSON Layer in Leaflet\nDESCRIPTION: Simple code to add a GeoJSON layer from a file using Leaflet.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nL.geoJSON('data.geojson').addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Tracking Pointer with Popup before Setting Content\nDESCRIPTION: Code pattern that caused an error when calling the trackPointer method on a Popup instance before setting its content or location. This was fixed in version 1.4.0.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Previously would cause an error\nconst popup = new mapboxgl.Popup();\npopup.trackPointer(); // Error if called before setting content or location\n\n// Fixed in v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Adding a Marker in OpenLayers\nDESCRIPTION: Creates and adds a marker to an OpenLayers map. A Feature with Point geometry is created, styled with an icon, added to a VectorSource, which is then added to a VectorLayer on the map.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Style from 'ol/style/Style';\nimport Icon from 'ol/style/Icon';\n\nconst marker = new Feature({\n  geometry: new Point([0, 0]),\n});\n\nmarker.setStyle(new Style({\n  image: new Icon({\n    src: 'marker.png',\n    scale: 0.1,\n  }),\n}));\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    features: [marker],\n  }),\n});\n\nmap.addLayer(vectorLayer);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Map in Leaflet\nDESCRIPTION: Code to create a basic map with Leaflet, setting the view and adding an OpenStreetMap tile layer.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst map = L.map('map').setView([0, 0], 2);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  attribution: '&copy; OpenStreetMap contributors'\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Adding a Marker in Leaflet\nDESCRIPTION: Simple code to add a marker at coordinates [0, 0] using Leaflet.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nL.marker([0, 0]).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Map in OpenLayers\nDESCRIPTION: Creates a basic map with OpenLayers, including a default OSM tile layer. The map is initialized with a target container, layers array, and view configuration with center coordinates and zoom level.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\n\nconst map = new Map({\n  target: 'map',\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n  ],\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying a Popup in Leaflet\nDESCRIPTION: Code to create and display a popup at specific coordinates in Leaflet.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nL.popup()\n  .setLatLng([0, 0])\n  .setContent('Hello, Leaflet!')\n  .openOn(map);\n```\n\n----------------------------------------\n\nTITLE: Setting Up MapLibre GL JS Fork for Contributing\nDESCRIPTION: Commands for forking and setting up the MapLibre GL JS repository for contribution. This includes cloning your fork, adding the upstream repository, creating a branch, and handling rebasing when needed.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CONTRIBUTING.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:GithubUser/maplibre-gl-js.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd maplibre-gl-js\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:maplibre/maplibre-gl-js.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b your-branch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase upstream/main\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push --force origin your-branch\n```\n\n----------------------------------------\n\nTITLE: GeoJSONSource Clustering Configuration Change\nDESCRIPTION: Breaking change that modifies the GeoJSONSource clustering options to measure in pixels instead of extent-units.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nGeoJSONSource.setClusterOptions({ /* options now in pixels instead of extent-units */ })\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Build\nDESCRIPTION: Commands to create standalone build files (maplibre-gl.js and maplibre-gl.css) that can be included on an HTML page.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-prod\nnpm run build-css\n```\n\n----------------------------------------\n\nTITLE: CSS Color Format Change Example\nDESCRIPTION: Example showing the deprecated and recommended HSL color format usage in MapLibre GL JS styles. The format with decimals is no longer supported, use percentage values instead.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Deprecated format */\nhsl(110, 0.7, 0.055)\n\n/* Recommended format */\nhsl(110, 70%, 5.5%)\n```\n\n----------------------------------------\n\nTITLE: Running Linting Tools\nDESCRIPTION: Commands to check code style and avoid common mistakes using the project's linting tools for JavaScript and CSS files.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\nnpm run lint-css\n```\n\n----------------------------------------\n\nTITLE: CSS Class Name Update\nDESCRIPTION: Shows the transition from deprecated Mapbox prefix to MapLibre prefix in CSS class names.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n/* Deprecated */\n.mapboxgl-class\n\n/* New */\n.maplibregl-class\n```\n\n----------------------------------------\n\nTITLE: Generating MapLibre GL JS Documentation\nDESCRIPTION: Command to generate the documentation files from source code and examples. This processes TSDoc comments and examples to create markdown files for MkDocs.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run generate-docs\n```\n\n----------------------------------------\n\nTITLE: Defining and Initializing Color Variable Using Pragmas in GLSL\nDESCRIPTION: This snippet demonstrates how to use pragmas to define and initialize a high-precision vec4 color variable in a GLSL shader. It shows the syntax for defining the variable in file scope and initializing it within the main function.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/src/shaders/README.md#2025-04-18_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n#pragma mapbox: define highp vec4 color\n\nmain() {\n    #pragma mapbox: initialize highp vec4 color\n    ...\n    fragColor = color;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Polygon in Leaflet\nDESCRIPTION: Code to create and add a simple polygon to a Leaflet map using an array of coordinates.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nL.polygon([\n  [51.5, -0.1],\n  [51.5, -0.12],\n  [51.52, -0.12]\n]).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Tile Count Ratio Calculation in LaTeX\nDESCRIPTION: Calculates the ratio of tile area to tile area at pitch == 0, which is used to determine the `tileCountMaxMinRatio`. This calculation helps in adjusting the tile loading behavior based on the pitch angle.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/covering-tiles.md#2025-04-18_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n$$ \\frac{T}{T_0} = \\frac{S_c^2 D_c^2\\alpha \\int_{\\theta_1}^{\\theta2} \\cos^{b-1}\\theta d\\theta}{S_r^2 D_c^2\\alpha \\int_{-vFOV/2}^{vFOV/2} \\cos^{b-1}\\theta d\\theta} = \\frac{S_c^2}{S_r^2}  \\frac{\\int_{\\theta_1}^{\\theta2} \\cos^{b-1}\\theta d\\theta}{\\int_{-vFOV/2}^{vFOV/2} \\cos^{b-1}\\theta d\\theta}$$\n\nTo set $\\frac{T}{T_0}$ to `tileCountMaxMinRatio`,\n\n$$\\frac{S_c^2}{S_r^2}  \\frac{\\int_{\\theta_1}^{\\theta2} \\cos^{b-1}\\theta d\\theta}{\\int_{-vFOV/2}^{vFOV/2} \\cos^{b-1}\\theta d\\theta} = \\text{tileCountMaxMinRatio} $$\n\nThus \n\n$$S_c = S_r(\\text{tileCountMaxMinRatio} \\frac{\\int_{-vFOV/2}^{vFOV/2} \\cos^{b-1}\\theta d\\theta}{\\int_{\\theta_1}^{\\theta2} \\cos^{b-1}\\theta d\\theta})^{1/2} $$\n\nand\n\n$$Z_c = Z_r+\\log_2{(\\text{tileCountMaxMinRatio} \\frac{\\int_{-vFOV/2}^{vFOV/2} \\cos^{b-1}\\theta d\\theta}{\\int_{\\theta_1}^{\\theta2} \\cos^{b-1}\\theta d\\theta})}/2 $$\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Tile Layer in Leaflet\nDESCRIPTION: Code to add an OpenStreetMap tile layer to a Leaflet map.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/leaflet-migration-guide.md#2025-04-18_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Geometric Relationships for Tile Calculations in LaTeX\nDESCRIPTION: Defines the geometric relationships between distances and angles in tile calculations. These equations form the basis for more complex calculations later in the document.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/covering-tiles.md#2025-04-18_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n$$ r(\\theta) = h\\tan\\theta $$\n$$ D(\\theta) = h\\sec\\theta $$\n\nAssume the horizontal field of view is a small angle $\\alpha$.\n\nThen the area of an infinitesimal strip on the ground is \n\n$$ dA = \\alpha D dr$$\n\nIn tile units, the differential area is\n\n$$ dT = S^2dA =  S^2\\alpha D dr = S^2\\alpha D \\frac{dr}{d\\theta}d\\theta = S^2\\alpha Dh \\sec ^2\\theta d\\theta = S^2\\alpha h^2 \\sec ^3\\theta d\\theta = S^2\\alpha D_c^2 \\cos^2 \\theta_c \\sec ^3\\theta d\\theta$$\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in OpenLayers\nDESCRIPTION: Adds a click event listener to an OpenLayers map that logs the clicked coordinates to the console.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmap.on('click', function (event) {\n  console.log('Clicked coordinates:', event.coordinate);\n});\n```\n\n----------------------------------------\n\nTITLE: Integral Solution for Tile Calculations in LaTeX\nDESCRIPTION: Provides the solution to the integral used in tile count ratio calculations. This solution involves the hypergeometric function and is crucial for accurate tile loading calculations.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/covering-tiles.md#2025-04-18_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\n$$\\int_{\\theta_1}^{\\theta2} \\cos^{p}\\theta d\\theta = - \\frac{\\sin\\theta_2}{|\\sin\\theta_2|}\\frac{\\cos^{p+1}\\theta_2}{p+1} {}_2F_1(\\frac{1}{2}, \\frac{p+1}{2},\\frac{p+3}{2}, \\cos^2\\theta_2) + \\frac{\\sin\\theta_1}{|\\sin\\theta_1|}\\frac{\\cos^{p+1}\\theta_1}{p+1} {}_2F_1(\\frac{1}{2}, \\frac{p+1}{2},\\frac{p+3}{2}, \\cos^2\\theta_1)$$\n\nwhere ${}_2F_1()$ is the hypergeometric function.\n```\n\n----------------------------------------\n\nTITLE: Displaying a Popup in OpenLayers\nDESCRIPTION: Creates and displays a popup overlay in OpenLayers. The popup is positioned at click coordinates and its content is updated within the click event handler.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Overlay from 'ol/Overlay';\n\nconst popup = new Overlay({\n  element: document.getElementById('popup'),\n});\n\nmap.addOverlay(popup);\n\nmap.on('click', function (event) {\n  popup.setPosition(event.coordinate);\n  document.getElementById('popup-content').innerHTML = 'Hello, OpenLayers!';\n});\n```\n\n----------------------------------------\n\nTITLE: Tile Scale Factor Calculation in LaTeX\nDESCRIPTION: Calculates the tile scale factor using a formula that considers the distance, pitch angle, and a tuning parameter. This formula is crucial for determining how tiles are loaded and displayed at different zoom levels and pitch angles.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/covering-tiles.md#2025-04-18_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n$$ S = S_c\\frac{D_c}{D}\\cos^{b/2}\\theta = S_c D_c \\frac{\\cos^{b/2+1}\\theta}{h} = S_c \\frac{\\cos^{b/2+1}\\theta}{\\cos\\theta_c} $$\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Metadata with unpkg API in JavaScript\nDESCRIPTION: An example JSON response from unpkg's metadata API when using the ?meta query parameter. It displays information about the MapLibre GL JS file including path, type, content type, integrity hash, last modification date, and file size.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/README-unpkg.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"path\": \"/dist/maplibre-gl.js\",\n  \"type\": \"file\",\n  \"contentType\": \"application/javascript\",\n  \"integrity\": \"sha384-jWZKsznBFj0Nl3kUaRKmmk89Hew9zDhTnmOz0pOLceWY7iag+l/8QNPeD0cQYaVG\",\n  \"lastModified\": \"Wed, 24 Mar 2021 19:28:04 GMT\",\n  \"size\": 766872\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Canvas Installation on Apple Silicon\nDESCRIPTION: Commands to fix issues with canvas.node or webgl.node on Apple Silicon (M1/M2) machines by building modules from source.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --build-from-source\n```\n\nLANGUAGE: bash\nCODE:\n```\narch -arm64 brew install pkg-config cairo pango libpng jpeg giflib librsvg\n```\n\n----------------------------------------\n\nTITLE: Bundling Files Structure in MapLibre GL JS\nDESCRIPTION: The bundling process in MapLibre GL JS generates three main files: index.ts for main thread code, shared.ts for code shared between threads, and worker.ts for worker thread code. These files are referenced by bundle_prelude.js to enable seamless worker integration.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/build/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nindex.ts    # main thread code\nshared.ts   # code shared between main and worker threads\nworker.ts   # worker thread code\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Server\nDESCRIPTION: Command to run the local documentation server for preview and development. This starts MkDocs to serve the generated documentation files.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start-docs\n```\n\n----------------------------------------\n\nTITLE: Source Coordinates Setter Methods\nDESCRIPTION: Added methods to set coordinates for ImageSource and VideoSource layers.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nImageSource.setCoordinates()\nVideoSource.setCoordinates()\n```\n\n----------------------------------------\n\nTITLE: Building MapLibre GL JS for Documentation\nDESCRIPTION: Commands to build MapLibre GL JS and its CSS before generating documentation. These steps create the production build and stylesheets needed for the documentation.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-prod\nnpm run build-css\n```\n\n----------------------------------------\n\nTITLE: Running Style Benchmarks with Custom Styles in Bash\nDESCRIPTION: This command starts the benchmark server with custom MapLibre styles. It accepts a comma-separated list of up to 3 style URLs or file system paths.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/bench/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMAPLIBRE_STYLES={YOUR STYLES HERE} npm run start-bench\n```\n\n----------------------------------------\n\nTITLE: Running Specific Render Test in MapLibre GL JS\nDESCRIPTION: Command to run render tests that match a specific folder or file name in the MapLibre GL JS project. This example demonstrates running tests related to 'text-rotation-alignment'.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-render -- text-rotation-alignment\n```\n\n----------------------------------------\n\nTITLE: Generating GL Statistics in Bash\nDESCRIPTION: These commands build a minimized production version of MapLibre GL JS and then gather GL statistics using headless Chromium. The results are output to the terminal and saved in data.json.gz.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/bench/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-prod\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run gl-stats\n```\n\n----------------------------------------\n\nTITLE: Running All Tests for MapLibre GL JS\nDESCRIPTION: Command to execute all tests for the MapLibre GL JS project. Note that Linux users need to prefix the command with 'xvfb-run -a' for proper execution.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Specific Integration Test in MapLibre GL JS\nDESCRIPTION: Command to execute a specific integration test file in the MapLibre GL JS project. This example shows how to run the 'browser' integration test.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-integration -- browser\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode for MapLibre GL JS\nDESCRIPTION: Command to run tests in watch mode for specific folders in the MapLibre GL JS project. This is useful for test-driven development as it continuously runs tests as you make changes to the code.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-watch-roots ./src/ui/control\n```\n\n----------------------------------------\n\nTITLE: Running Specific Unit Test in MapLibre GL JS\nDESCRIPTION: Command to run a specific unit test file in the MapLibre GL JS project. This example demonstrates how to run the 'draw_symbol.test.ts' file.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-unit -- draw_symbol.test.ts\n```\n\n----------------------------------------\n\nTITLE: Running Build Tests in Shell\nDESCRIPTION: Command to execute build tests\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/integration/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test-build\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Integration Tests\nDESCRIPTION: Command to run a subset of integration tests using Vitest filters\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/integration/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test-integration -- browser\n```\n\n----------------------------------------\n\nTITLE: Updating Render Tests on Different Platforms\nDESCRIPTION: Commands to update render test results on Linux, Mac, and Windows\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/integration/README.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nxvfb-run -a UPDATE=true npm run test-render\n```\n\nLANGUAGE: sh\nCODE:\n```\nUPDATE=true npm run test-render\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:UPDATE=$true; npm run test-render\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests in Shell\nDESCRIPTION: Command to run integration tests excluding render tests\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/integration/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test-integration\n```\n\n----------------------------------------\n\nTITLE: Calculating Camera Altitude in TypeScript\nDESCRIPTION: Method from MercatorTransform class that calculates the camera altitude based on pitch angle, camera-to-center distance, pixel-to-meter ratio, and elevation. The altitude is computed using trigonometric calculations and adjusted by the base elevation.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/center-point.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    getCameraAltitude(): number {\n        const altitude = Math.cos(this.pitchInRadians) * this._cameraToCenterDistance / this._helper._pixelPerMeter;\n        return altitude + this.elevation;\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Render Tests in Shell\nDESCRIPTION: Command to execute render tests using npm with optional filtering by test directory\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/integration/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test-render\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest UI in Package.json\nDESCRIPTION: Diff showing how to enable Vitest UI by modifying the test command in package.json\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/test/integration/README.md#2025-04-18_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- \"test-unit\": \"vitest run --config vitest.config.unit.ts\",\n+ \"test-unit\": \"vitest --ui --config vitest.config.unit.ts\",\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Covenant Badge in Markdown\nDESCRIPTION: This snippet shows how to embed a Contributor Covenant badge in a Markdown file, linking to the project's code of conduct document.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CODE-OF-CONDUCT.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](https://github.com/maplibre/maplibre/blob/main/CODE_OF_CONDUCT.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Terms for Tile Calculations in LaTeX\nDESCRIPTION: Defines various terms used in tile calculations, including distances, angles, and scale factors. These definitions are crucial for understanding the subsequent calculations and formulas.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/covering-tiles.md#2025-04-18_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n$r$, `distanceToTile2D`, ground range from camera to tile\n\n$D$, `distanceToTile3D`, slant range from camera to tile\n\n$h$, `distanceToTileZ`, camera altitude above tile\n\n$\\theta$, `thisTilePitch`, pitch angle from camera to tile\n\n$A$, area (map units)\n\n$Z$, tile zoom level\n\n$S$, tile scale factor (pixels per map unit): $S = 2^Z$\n\n$S_r$, requested center scale factor (pixels per map unit)\n\n$S_c$, center scale factor (pixels per map unit)\n\nsubscript $c$, vertical center of screen\n\n$b$, `pitchTileLoadingBehavior`, tile loading tuning parameter\n```\n\n----------------------------------------\n\nTITLE: Maximum Zoom Levels Calculation in LaTeX\nDESCRIPTION: Calculates the maximum number of zoom levels on the screen based on the minimum and maximum pitch angles. This formula is used to determine the range of zoom levels that need to be loaded for a given view.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/covering-tiles.md#2025-04-18_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n$$N=Z_{max} - Z_{min} + 1 = Z(\\theta_{min}) - Z(\\theta_{max}) + 1 = \\log_2(\\frac{S(\\theta_{min})}{S(\\theta_{max})}) + 1$$\n\nGiven the above formula for $S$,\n\n$$ N = \\log_2(\\frac{\\cos^{b/2+1}\\theta_{min}}{\\cos^{b/2+1}\\theta_{max}}) + 1 = \\log_2(\\frac{\\cos\\theta_{min}}{\\cos\\theta_{max}})(b/2+1) + 1$$\n\n$N$ is maximized when $\\theta_max$ is at the horizon:\n\n$$ N_{max} = \\log_2(\\frac{\\cos(\\theta_{horizon} - vFOV)}{\\cos\\theta_{horizon}})(b/2+1) + 1$$\n\nRearranging, $b$ can be written as a function of $N_{max}$:\n\n$$ b = 2(\\frac{N_{max} - 1}{\\log_2(\\frac{\\cos(\\theta_{horizon} - vFOV)}{\\cos\\theta_{horizon}})}-1) $$\n```\n\n----------------------------------------\n\nTITLE: Pragma Syntax for Variable Definition and Initialization in GLSL\nDESCRIPTION: This snippet outlines the general syntax for using pragmas to define and initialize variables in GLSL shaders. It shows the structure for specifying precision, data type, and variable name.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/src/shaders/README.md#2025-04-18_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n#pragma mapbox: (define|initialize) (lowp|mediump|highp) (float|vec2|vec3|vec4) {name}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Secret Reference\nDESCRIPTION: Environment variable reference for the NPM organization token required for publishing\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/developer-guides/release-process.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n${{ secrets.NPM_ORG_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Adding a GeoJSON Layer in MapLibre GL JS\nDESCRIPTION: Adds a GeoJSON layer to a MapLibre GL JS map. First creates a source referencing the GeoJSON data URL, then adds a fill-type layer using that source with specific styling properties.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/docs/guides/openlayers-migration-guide.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmap.on('load', function () {\n  map.addSource('geojson-source', {\n    type: 'geojson',\n    data: 'data.geojson',\n  });\n\n  map.addLayer({\n    id: 'geojson-layer',\n    type: 'fill',\n    source: 'geojson-source',\n    paint: {\n      'fill-color': '#0080ff',\n      'fill-opacity': 0.5,\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Map Style Getter Implementation\nDESCRIPTION: Added Map#getStyle method to retrieve the current map style configuration.\nSOURCE: https://github.com/maplibre/maplibre-gl-js/blob/main/CHANGELOG.md#2025-04-18_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nmap.getStyle()\n```"
  }
]