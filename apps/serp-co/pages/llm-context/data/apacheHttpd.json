[
  {
    "owner": "apache",
    "repo": "httpd",
    "content": "TITLE: Compiling and Installing Apache HTTP Server\nDESCRIPTION: Commands for compiling and installing the Apache HTTP Server after configuration. It shows how to build the server using make, install it to the specified location, and check the version to confirm successful installation.\nSOURCE: https://github.com/apache/httpd/blob/trunk/test/modules/http2/htdocs/cgi/files/empty.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Compile and install Apache\nmake\nsudo make install\n\n# Verify installation\n/usr/local/apache2/bin/httpd -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache HTTP Server Build\nDESCRIPTION: Commands to configure the Apache HTTP Server build with various options. This shows how to specify installation paths, enabled modules, and other compile-time settings before building the server.\nSOURCE: https://github.com/apache/httpd/blob/trunk/test/modules/http2/htdocs/cgi/files/empty.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Configure the build\n./configure --prefix=/usr/local/apache2 \\\n            --enable-mods-shared=all \\\n            --enable-ssl \\\n            --enable-so \\\n            --with-included-apr\n```\n\n----------------------------------------\n\nTITLE: Starting and Controlling Apache HTTP Server\nDESCRIPTION: Commands to start, stop, and restart the Apache HTTP Server after installation. It demonstrates the basic control operations to manage the server, including how to check for configuration syntax errors.\nSOURCE: https://github.com/apache/httpd/blob/trunk/test/modules/http2/htdocs/cgi/files/empty.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Start Apache HTTP Server\nsudo /usr/local/apache2/bin/apachectl start\n\n# Stop Apache HTTP Server\nsudo /usr/local/apache2/bin/apachectl stop\n\n# Restart Apache HTTP Server\nsudo /usr/local/apache2/bin/apachectl restart\n\n# Check configuration syntax\nsudo /usr/local/apache2/bin/apachectl configtest\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Request Handler in Lua for Apache mod_lua\nDESCRIPTION: An example Lua handler function that processes both GET and POST requests. The handler sets the content type to plaintext, outputs a greeting, and then displays either URI arguments or form data depending on the HTTP method used.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/writing-handlers.txt#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- example.lua --\nrequire \"string\"\n\nfunction handle_something(r)\n    r.content_type = \"text/plain\"\n    r:puts(\"Hello Lua World!\\n\")\n\n    if r.method == 'GET' then\n        for k, v in pairs( r:parseargs() ) do\n            r:puts( string.format(\"%s: %s\", k, v) )\n        end\n    elseif r.method == 'POST' then\n        for k, v in pairs( r:parsebody() ) do\n            r:puts( string.format(\"%s: %s\", k, v) )\n        end\n    else\n        r:puts(\"unknown HTTP method \" .. r.method)\n    end \nend\n```\n\n----------------------------------------\n\nTITLE: Installing Apache Portable Runtime (APR) Dependencies\nDESCRIPTION: Commands for downloading and installing APR and APR-Util which are required dependencies for Apache HTTP Server. These components provide portable interfaces to platform-specific implementations.\nSOURCE: https://github.com/apache/httpd/blob/trunk/test/modules/http2/htdocs/cgi/files/empty.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Download and install APR and APR-Util (required for Apache)\ncd srclib/\nwget https://dlcdn.apache.org/apr/apr-1.7.2.tar.gz\nwget https://dlcdn.apache.org/apr/apr-util-1.6.3.tar.gz\n\ntar -xzvf apr-1.7.2.tar.gz\ntar -xzvf apr-util-1.6.3.tar.gz\n\nmv apr-1.7.2 apr\nmv apr-util-1.6.3 apr-util\n\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Creating System Service for Apache HTTP Server\nDESCRIPTION: Commands to set up Apache HTTP Server as a system service that starts automatically on boot. This includes creating a systemd service unit file and enabling the service.\nSOURCE: https://github.com/apache/httpd/blob/trunk/test/modules/http2/htdocs/cgi/files/empty.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Create a systemd service file\nsudo nano /etc/systemd/system/apache2.service\n\n# Add the following content to the file:\n# [Unit]\n# Description=Apache HTTP Server\n# After=network.target\n\n# [Service]\n# Type=forking\n# ExecStart=/usr/local/apache2/bin/apachectl start\n# ExecStop=/usr/local/apache2/bin/apachectl stop\n# ExecReload=/usr/local/apache2/bin/apachectl graceful\n# PrivateTmp=true\n# Restart=on-abort\n\n# [Install]\n# WantedBy=multi-user.target\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable apache2\nsudo systemctl start apache2\n```\n\n----------------------------------------\n\nTITLE: System Update and Package Installation on Unix Systems\nDESCRIPTION: Commands to update system packages and install necessary dependencies for Apache HTTP Server compilation. These steps ensure all required development tools and libraries are available in the system.\nSOURCE: https://github.com/apache/httpd/blob/trunk/test/modules/http2/htdocs/cgi/files/empty.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Update your system\nsudo apt-get update\nsudo apt-get upgrade\n\n# Install necessary packages\nsudo apt-get install build-essential autoconf libtool pkg-config libpcre3-dev libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Loading mod_lua Module in Apache\nDESCRIPTION: Basic directive to load the Lua module in Apache HTTPD configuration.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/basic-configuration.txt#2025-04-23_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nLoadModule lua_module modules/mod_lua.so\n```\n\n----------------------------------------\n\nTITLE: Building httpd Executable in CMake\nDESCRIPTION: Creates the main httpd executable for Apache HTTP Server. Sets up compiler definitions, linking options, and dependencies.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\n###########   HTTPD EXECUTABLES   ##########\nADD_EXECUTABLE(httpd server/main.c build/win32/httpd.rc)\nSET(install_targets ${install_targets} httpd)\nSET(install_bin_pdb ${install_bin_pdb} $<TARGET_PDB_FILE:httpd>)\nTARGET_COMPILE_DEFINITIONS(httpd PRIVATE\n  \"APP_FILE\"\n  \"LONG_NAME=Apache HTTP Server\"\n  \"BIN_NAME=httpd.exe\"\n  \"ICON_FILE=${CMAKE_SOURCE_DIR}/build/win32/apache.ico\"\n)\nTARGET_COMPILE_OPTIONS(httpd PRIVATE \"${EXTRA_COMPILE_FLAGS}\")\nSET_TARGET_PROPERTIES(httpd PROPERTIES\n  LINK_FLAGS \"/stack:0x40000\"\n)\nTARGET_LINK_LIBRARIES(httpd libhttpd ${EXTRA_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Building libhttpd Shared Library in CMake\nDESCRIPTION: Configures and builds the core libhttpd shared library for Apache HTTP Server. Sets up compiler definitions, linking options, and dependencies.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\n###########   HTTPD LIBRARIES   ############\nADD_LIBRARY(libhttpd SHARED ${LIBHTTPD_SOURCES} build/win32/httpd.rc)\nSET_TARGET_PROPERTIES(libhttpd PROPERTIES\n  LINK_FLAGS /base:@${PROJECT_BINARY_DIR}/BaseAddr.ref,libhttpd.dll\n)\nSET(install_targets ${install_targets} libhttpd)\nSET(install_bin_pdb ${install_bin_pdb} $<TARGET_PDB_FILE:libhttpd>)\nTARGET_LINK_LIBRARIES(libhttpd ${EXTRA_LIBS} ${APR_LIBRARIES} ${PCRE_LIBRARIES} ${HTTPD_SYSTEM_LIBS})\nTARGET_COMPILE_DEFINITIONS(libhttpd PRIVATE\n  \"LONG_NAME=Apache HTTP Server Core\"\n  \"BIN_NAME=libhttpd.dll\"\n  \"AP_DECLARE_EXPORT\"\n  \"APREQ_DECLARE_EXPORT\"\n)\nTARGET_COMPILE_OPTIONS(libhttpd PRIVATE ${PCRE_CFLAGS} ${EXTRA_COMPILE_FLAGS})\nADD_DEPENDENCIES(libhttpd test_char_header)\n```\n\n----------------------------------------\n\nTITLE: Defining LibHTTPD Sources for Apache HTTP Server\nDESCRIPTION: Defines the source files for the libhttpd library, which is the core library of Apache HTTP Server. Includes generated modules, core components, HTTP protocol handling, Windows-specific code, and various utility functions.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nSET(LIBHTTPD_SOURCES\n  ${extra_builtin_modules}\n  ${PROJECT_BINARY_DIR}/modules.c\n  server/apreq_cookie.c\n  server/apreq_error.c\n  server/apreq_module.c\n  server/apreq_module_cgi.c\n  server/apreq_module_custom.c\n  server/apreq_param.c\n  server/apreq_parser.c\n  server/apreq_parser_header.c\n  server/apreq_parser_multipart.c\n  server/apreq_parser_urlencoded.c\n  server/apreq_util.c\n  modules/arch/win32/mod_win32.c\n  modules/core/mod_so.c\n  modules/http/byterange_filter.c\n  modules/http/chunk_filter.c\n  modules/http/http_core.c\n  modules/http/http_filters.c\n  modules/http/http_protocol.c\n  modules/http/http_request.c\n  os/win32/ap_regkey.c\n  os/win32/util_win32.c\n  server/buildmark.c\n  server/config.c\n  server/connection.c\n  server/core.c\n  server/core_filters.c\n  server/eoc_bucket.c\n  server/eor_bucket.c\n  server/error_bucket.c\n  server/headers_bucket.c\n  server/listen.c\n  server/log.c\n  server/mpm/winnt/child.c\n  server/mpm/winnt/mpm_winnt.c\n  server/mpm/winnt/nt_eventlog.c\n  server/mpm/winnt/service.c\n  server/mpm_common.c\n  server/protocol.c\n  server/provider.c\n  server/request.c\n  server/ssl.c\n  server/scoreboard.c\n  server/util.c\n  server/util_cfgtree.c\n  server/util_cookies.c\n  server/util_debug.c\n  server/util_etag.c\n  server/util_expr_eval.c\n  server/util_expr_parse.c\n  server/util_fcgi.c\n  server/util_expr_scan.c\n  server/util_filter.c\n  server/util_md5.c\n  server/util_mutex.c\n  server/util_pcre.c\n  server/util_regex.c\n  server/util_script.c\n  server/util_time.c\n  server/util_xml.c\n  server/vhost.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache HTTP Server Modules in CMake\nDESCRIPTION: This CMake script configures various Apache HTTP Server modules by setting their dependencies, extra source files, compiler definitions, and library requirements. It also handles conditional compilation based on the availability of required libraries.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nSET(mod_apreq_extra_defines          APREQ_DECLARE_EXPORT)\nSET(mod_apreq_extra_sources          modules/apreq/handle.c)\nSET(mod_apreq_main_source            modules/apreq/filter.c)\nSET(mod_authz_dbd_extra_defines      AUTHZ_DBD_DECLARE_EXPORT)\nSET(mod_authnz_ldap_requires         APR_HAS_LDAP)\nSET(mod_authnz_ldap_extra_libs       mod_ldap)\nSET(mod_cache_extra_defines          CACHE_DECLARE_EXPORT)\nSET(mod_cache_extra_sources\n  modules/cache/cache_storage.c      modules/cache/cache_util.c\n)\nSET(mod_cache_install_lib 1)\nSET(mod_cache_disk_extra_libs        mod_cache)\nSET(mod_cache_socache_extra_libs     mod_cache)\nSET(mod_charset_lite_requires        APR_HAS_XLATE)\nSET(mod_dav_extra_defines            DAV_DECLARE_EXPORT)\nSET(mod_dav_extra_sources\n  modules/dav/main/liveprop.c        modules/dav/main/props.c\n  modules/dav/main/std_liveprop.c    modules/dav/main/providers.c\n  modules/dav/main/util.c            modules/dav/main/util_lock.c\n  modules/dav/main/ms_wdv.c\n)\nSET(mod_dav_install_lib 1)\nSET(mod_dav_fs_extra_sources\n  modules/dav/fs/dbm.c               modules/dav/fs/lock.c\n  modules/dav/fs/quota.c             modules/dav/fs/repos.c\n)\nSET(mod_dav_fs_extra_libs            mod_dav)\nSET(mod_dav_lock_extra_sources       modules/dav/lock/locks.c)\nSET(mod_dav_lock_extra_libs          mod_dav)\nSET(mod_dbd_extra_defines            DBD_DECLARE_EXPORT)\nSET(mod_deflate_requires             ZLIB_FOUND)\nIF(ZLIB_FOUND)\n  SET(mod_deflate_extra_includes       ${ZLIB_INCLUDE_DIR})\n  SET(mod_deflate_extra_libs           ${ZLIB_LIBRARIES})\nENDIF()\nSET(mod_brotli_requires              BROTLI_FOUND)\nIF(BROTLI_FOUND)\n  SET(mod_brotli_extra_includes        ${BROTLI_INCLUDE_DIR})\n  SET(mod_brotli_extra_libs            ${BROTLI_LIBRARIES})\nENDIF()\nSET(mod_firehose_requires            SOMEONE_TO_MAKE_IT_COMPILE_ON_WINDOWS)\nSET(mod_heartbeat_extra_libs         mod_watchdog)\nSET(mod_http2_requires               NGHTTP2_FOUND)\nSET(mod_http2_extra_defines          ssize_t=long)\nSET(mod_http2_extra_includes         ${NGHTTP2_INCLUDE_DIR})\nSET(mod_http2_extra_libs             ${NGHTTP2_LIBRARIES})\nSET(mod_http2_extra_sources\n  modules/http2/h2_bucket_beam.c     modules/http2/h2_bucket_eos.c\n  modules/http2/h2_c1.c              modules/http2/h2_c1_io.c\n  modules/http2/h2_c2.c              modules/http2/h2_c2_filter.c\n  modules/http2/h2_config.c          modules/http2/h2_conn_ctx.c\n  modules/http2/h2_mplx.c            modules/http2/h2_headers.c\n  modules/http2/h2_protocol.c        modules/http2/h2_push.c\n  modules/http2/h2_request.c         modules/http2/h2_session.c\n  modules/http2/h2_stream.c          modules/http2/h2_switch.c\n  modules/http2/h2_util.c            modules/http2/h2_workers.c\n  modules/http2/h2_ws.c\n)\nSET(mod_ldap_extra_defines           LDAP_DECLARE_EXPORT)\nSET(mod_ldap_extra_libs              wldap32)\nSET(mod_ldap_extra_sources\n  modules/ldap/util_ldap_cache.c     modules/ldap/util_ldap_cache_mgr.c\n)\nSET(mod_ldap_main_source             modules/ldap/util_ldap.c)\nSET(mod_ldap_requires                APR_HAS_LDAP)\nSET(mod_lua_extra_defines            AP_LUA_DECLARE_EXPORT)\nSET(mod_lua_extra_includes           ${LUA_INCLUDE_DIR})\nSET(mod_lua_extra_libs               ${LUA_LIBRARIES})\nSET(mod_lua_extra_sources\n  modules/lua/lua_apr.c              modules/lua/lua_config.c\n  modules/lua/lua_passwd.c           modules/lua/lua_request.c\n  modules/lua/lua_vmprep.c           modules/lua/lua_dbd.c\n)\nSET(mod_lua_requires                 LUA51_FOUND)\nSET(mod_md_requires                  OPENSSL_FOUND CURL_FOUND JANSSON_FOUND)\nSET(mod_md_extra_includes            ${OPENSSL_INCLUDE_DIR} ${CURL_INCLUDE_DIR} ${JANSSON_INCLUDE_DIR})\nSET(mod_md_extra_libs                ${OPENSSL_LIBRARIES} ${CURL_LIBRARIES} ${JANSSON_LIBRARIES} mod_watchdog)\nSET(mod_md_extra_sources\n  modules/md/md_acme.c               modules/md/md_acme_acct.c\n  modules/md/md_acme_authz.c         modules/md/md_acme_drive.c\n  modules/md/md_acmev2_drive.c       modules/md/md_event.c\n  modules/md/md_acme_order.c         modules/md/md_core.c\n  modules/md/md_curl.c               modules/md/md_crypt.c\n  modules/md/md_http.c               modules/md/md_json.c\n  modules/md/md_jws.c                modules/md/md_log.c\n  modules/md/md_result.c             modules/md/md_reg.c\n  modules/md/md_status.c             modules/md/md_store.c\n  modules/md/md_store_fs.c           modules/md/md_time.c\n  modules/md/md_ocsp.c               modules/md/md_util.c               \n  modules/md/mod_md_config.c         modules/md/mod_md_drive.c\n  modules/md/mod_md_os.c             modules/md/mod_md_status.c\n  modules/md/mod_md_ocsp.c           modules/md/md_tailscale.c\n)\nSET(mod_optional_hook_export_extra_defines AP_DECLARE_EXPORT) # bogus reuse of core API prefix\nSET(mod_proxy_extra_defines          PROXY_DECLARE_EXPORT)\nSET(mod_proxy_extra_sources          modules/proxy/proxy_util.c)\nSET(mod_proxy_install_lib 1)\nSET(mod_proxy_ajp_extra_sources\n  modules/proxy/ajp_header.c         modules/proxy/ajp_link.c\n  modules/proxy/ajp_msg.c            modules/proxy/ajp_utils.c\n)\nSET(mod_proxy_ajp_extra_libs         mod_proxy)\nSET(mod_proxy_balancer_extra_libs    mod_proxy)\nSET(mod_proxy_connect_extra_libs     mod_proxy)\nSET(mod_proxy_express_extra_libs     mod_proxy)\nSET(mod_proxy_fcgi_extra_libs        mod_proxy)\nSET(mod_proxy_ftp_extra_libs         mod_proxy)\nSET(mod_proxy_hcheck_extra_libs      mod_proxy)\nSET(mod_proxy_http_extra_libs        mod_proxy)\nSET(mod_proxy_html_requires          LIBXML2_FOUND)\nIF(LIBXML2_FOUND)\n  SET(mod_proxy_html_extra_includes    \"${LIBXML2_INCLUDE_DIR};${LIBXML2_ICONV_INCLUDE_DIR}\")\n  SET(mod_proxy_html_extra_libs        \"${LIBXML2_LIBRARIES};${LIBXML2_ICONV_LIBRARIES}\")\nENDIF()\nSET(mod_proxy_scgi_extra_libs        mod_proxy)\nSET(mod_proxy_wstunnel_extra_libs    mod_proxy)\nSET(mod_lbmethod_bybusyness_extra_libs mod_proxy)\nSET(mod_lbmethod_bytraffic_extra_libs  mod_proxy)\nSET(mod_lbmethod_byrequests_extra_libs mod_proxy)\nSET(mod_lbmethod_heartbeat_extra_libs  mod_proxy)\nSET(mod_proxy_http2_requires               NGHTTP2_FOUND)\nSET(mod_proxy_http2_extra_defines          ssize_t=long)\nSET(mod_proxy_http2_extra_includes         ${NGHTTP2_INCLUDE_DIR})\nSET(mod_proxy_http2_extra_libs             ${NGHTTP2_LIBRARIES} mod_proxy)\nSET(mod_proxy_http2_extra_sources\n  modules/http2/h2_proxy_session.c   modules/http2/h2_proxy_util.c\n)\nSET(mod_ratelimit_extra_defines      AP_RL_DECLARE_EXPORT)\nSET(mod_sed_extra_sources\n  modules/filters/regexp.c           modules/filters/sed0.c\n  modules/filters/sed1.c\n)\nSET(mod_serf_requires                AN_UNIMPLEMENTED_SUPPORT_LIBRARY_REQUIREMENT)\nSET(mod_session_extra_defines        SESSION_DECLARE_EXPORT)\nSET(mod_session_install_lib 1)\nSET(mod_session_cookie_extra_libs    mod_session)\nSET(mod_session_crypto_requires      APU_HAVE_CRYPTO)\nSET(mod_session_crypto_extra_libs    mod_session)\nSET(mod_session_dbd_extra_libs       mod_session)\nSET(mod_socache_dc_requires          AN_UNIMPLEMENTED_SUPPORT_LIBRARY_REQUIREMENT)\nSET(mod_ssl_extra_defines            SSL_DECLARE_EXPORT)\nSET(mod_ssl_requires                 OPENSSL_FOUND)\nIF(OPENSSL_FOUND)\n  SET(mod_ssl_extra_includes           ${OPENSSL_INCLUDE_DIR})\n  SET(mod_ssl_extra_libs               ${OPENSSL_LIBRARIES})\nENDIF()\nSET(mod_ssl_extra_sources\n  modules/ssl/ssl_engine_config.c\n  modules/ssl/ssl_engine_init.c      modules/ssl/ssl_engine_io.c\n  modules/ssl/ssl_engine_kernel.c    modules/ssl/ssl_engine_log.c\n  modules/ssl/ssl_engine_mutex.c     modules/ssl/ssl_engine_ocsp.c\n  modules/ssl/ssl_engine_pphrase.c   modules/ssl/ssl_engine_rand.c\n  modules/ssl/ssl_engine_vars.c      modules/ssl/ssl_scache.c\n  modules/ssl/ssl_util.c             modules/ssl/ssl_util_ocsp.c\n  modules/ssl/ssl_util_ssl.c         modules/ssl/ssl_util_stapling.c\n)\nIF(OPENSSL_FOUND)\n  SET(mod_ssl_ct_extra_includes        ${OPENSSL_INCLUDE_DIR})\n  SET(mod_ssl_ct_extra_libs            ${OPENSSL_LIBRARIES})\nENDIF()\nSET(mod_ssl_ct_extra_sources\n  modules/ssl/ssl_ct_log_config.c\n  modules/ssl/ssl_ct_sct.c\n  modules/ssl/ssl_ct_util.c\n)\nSET(mod_status_extra_defines         STATUS_DECLARE_EXPORT)\nSET(mod_watchdog_install_lib 1)\nSET(mod_xml2enc_requires             LIBXML2_FOUND)\nIF(LIBXML2_FOUND)\n  SET(mod_xml2enc_extra_includes     \"${LIBXML2_INCLUDE_DIR};${LIBXML2_ICONV_INCLUDE_DIR}\")\n  SET(mod_xml2enc_extra_libs         \"${LIBXML2_LIBRARIES};${LIBXML2_ICONV_LIBRARIES}\")\nENDIF()\nSET(mod_watchdog_extra_defines       AP_WD_DECLARE_EXPORT)\n\nSET(MODULE_PATHS)\nFOREACH (modinfo ${MODULE_LIST})\n  STRING(REGEX REPLACE \"([^+]*)\\\\+([^+]*)\\\\+([^+]*)\" \"\\\\1;\\\\2;\\\\3\" modinfolist ${modinfo})\n  SET(path_to_module)\n  SET(defaultenable)\n  SET(helptext)\n  FOREACH(i ${modinfolist})\n    IF(\"${path_to_module}\" STREQUAL \"\")\n      SET(path_to_module ${i})\n    ELSEIF(\"${defaultenable}\" STREQUAL \"\")\n      SET(defaultenable ${i})\n    ELSEIF(\"${helptext}\" STREQUAL \"\")\n      SET(helptext ${i})\n    ELSE()\n      MESSAGE(FATAL_ERROR \"Unexpected field or plus sign in >${modinfo}<\")\n    ENDIF()\n  ENDFOREACH()\n\n  STRING(REGEX REPLACE \".*/\\(mod_[^\\\\+]+\\)\" \"\\\\1\" mod_name       ${path_to_module})\n  STRING(REGEX REPLACE \"mod_\\(.*)\"         \"\\\\1\" mod_shortname  ${mod_name})\n\n  STRING(TOUPPER \"ENABLE_${mod_shortname}\" mod_option_name)\n\n  SET(${mod_option_name} ${defaultenable} CACHE STRING ${helptext})\n  SET(MODULE_PATHS \"${MODULE_PATHS};${path_to_module}\")\n\nENDFOREACH()\n\nSET(install_targets)\nSET(install_bin_pdb)\nSET(install_modules) # special handling vs. other installed targets\nSET(install_modules_pdb)\nSET(builtin_module_shortnames)\nLIST(APPEND builtin_module_shortnames \"win32\" \"mpm_winnt\" \"http\" \"so\") # core added automatically\nSET(extra_builtin_modules) # the ones specified with -DWITH_MODULES=\n\nSTRING(REPLACE \",\" \";\" WITH_MODULE_LIST \"${WITH_MODULES}\")\n```\n\n----------------------------------------\n\nTITLE: Writing Response Content with puts() in Apache mod_lua\nDESCRIPTION: Demonstrates how to write content to the HTTP response body using the puts() method of the request object. This method can accept multiple string arguments that will be concatenated in the output.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/writing-handlers.txt#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nr:puts(\"hello\", \" world\", \"!\")\n```\n\n----------------------------------------\n\nTITLE: Defining Apache HTTP Server Modules List in CMake\nDESCRIPTION: A CMake SET command that defines a comprehensive list of Apache HTTP Server modules. Each entry includes the module path, a status indicator (A=Always included, I=Included, O=Optional, i=external dependencies), and a brief description of the module's functionality.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nSET(MODULE_LIST\n  \"modules/aaa/mod_access_compat+A+mod_access compatibility\"\n  \"modules/aaa/mod_allowhandlers+I+restrict allowed handlers\"\n  \"modules/aaa/mod_allowmethods+I+restrict allowed HTTP methods\"\n  \"modules/aaa/mod_auth_basic+A+basic authentication\"\n  \"modules/aaa/mod_auth_digest+I+RFC2617 Digest authentication\"\n  \"modules/aaa/mod_auth_form+I+form authentication\"\n  \"modules/aaa/mod_authn_anon+I+anonymous user authentication control\"\n  \"modules/aaa/mod_authn_core+A+core authentication module\"\n  \"modules/aaa/mod_authn_dbd+I+SQL-based authentication control\"\n  \"modules/aaa/mod_authn_dbm+I+DBM-based authentication control\"\n  \"modules/aaa/mod_authn_file+A+file-based authentication control\"\n  \"modules/aaa/mod_authn_socache+I+Cached authentication control\"\n  \"modules/aaa/mod_authnz_fcgi+I+FastCGI authorizer-based authentication and authorization\"\n  \"modules/aaa/mod_authnz_ldap+i+LDAP based authentication\"\n  \"modules/aaa/mod_authz_core+A+core authorization provider vector module\"\n  \"modules/aaa/mod_authz_dbd+I+SQL based authorization and Login/Session support\"\n  \"modules/aaa/mod_authz_dbm+I+DBM-based authorization control\"\n  \"modules/aaa/mod_authz_groupfile+A+'require group' authorization control\"\n  \"modules/aaa/mod_authz_host+A+host-based authorization control\"\n  \"modules/aaa/mod_authz_owner+I+'require file-owner' authorization control\"\n  \"modules/aaa/mod_authz_user+A+'require user' authorization control\"\n  \"modules/apreq/mod_apreq+i+Apache Request Filter\"\n  \"modules/arch/win32/mod_isapi+I+isapi extension support\"\n  \"modules/cache/mod_cache+I+dynamic file caching.  At least one storage management module (e.g. mod_cache_disk) is also necessary.\"\n  \"modules/cache/mod_cache_disk+I+disk caching module\"\n  \"modules/cache/mod_cache_socache+I+shared object caching module\"\n  \"modules/cache/mod_file_cache+I+File cache\"\n  \"modules/cache/mod_socache_dbm+I+dbm small object cache provider\"\n  \"modules/cache/mod_socache_dc+O+distcache small object cache provider\"\n  \"modules/cache/mod_socache_memcache+I+memcache small object cache provider\"\n  \"modules/cache/mod_socache_shmcb+I+ shmcb small object cache provider\"\n  \"modules/cache/mod_socache_redis+I+redis small object cache provider\"\n  \"modules/cluster/mod_heartbeat+I+Generates Heartbeats\"\n  \"modules/cluster/mod_heartmonitor+I+Collects Heartbeats\"\n  \"modules/core/mod_macro+I+Define and use macros in configuration files\"\n  \"modules/core/mod_watchdog+I+Watchdog module\"\n  \"modules/database/mod_dbd+I+Apache DBD Framework\"\n  \"modules/dav/fs/mod_dav_fs+I+DAV provider for the filesystem.\"\n  \"modules/dav/lock/mod_dav_lock+I+DAV provider for generic locking\"\n  \"modules/dav/main/mod_dav+I+WebDAV protocol handling.\"\n  \"modules/debugging/mod_bucketeer+O+buckets manipulation filter.  Useful only for developers and testing purposes.\"\n  \"modules/debugging/mod_dumpio+I+I/O dump filter\"\n  \"modules/debugging/mod_firehose+O+Firehose dump filter\"\n  \"modules/echo/mod_echo+O+ECHO server\"\n  \"modules/examples/mod_case_filter+O+Example uppercase conversion filter\"\n  \"modules/examples/mod_case_filter_in+O+Example uppercase conversion input filter\"\n  \"modules/examples/mod_example_hooks+O+Example hook callback handler module\"\n  \"modules/examples/mod_example_ipc+O+Example of shared memory and mutex usage\"\n  \"modules/filters/mod_brotli+i+Brotli compression support\"\n  \"modules/filters/mod_buffer+I+Filter Buffering\"\n  \"modules/filters/mod_charset_lite+i+character set translation\"\n  \"modules/filters/mod_data+O+RFC2397 data encoder\"\n  \"modules/filters/mod_deflate+i+Deflate transfer encoding support\"\n  \"modules/filters/mod_ext_filter+I+external filter module\"\n  \"modules/filters/mod_filter+A+Smart Filtering\"\n  \"modules/filters/mod_include+I+Server Side Includes\"\n  \"modules/filters/mod_proxy_html+i+Fix HTML Links in a Reverse Proxy\"\n  \"modules/filters/mod_ratelimit+I+Output Bandwidth Limiting\"\n  \"modules/filters/mod_reflector+O+Reflect request through the output filter stack\"\n  \"modules/filters/mod_reqtimeout+A+Limit time waiting for request from client\"\n  \"modules/filters/mod_request+I+Request Body Filtering\"\n  \"modules/filters/mod_sed+I+filter request and/or response bodies through sed\"\n  \"modules/filters/mod_substitute+I+response content rewrite-like filtering\"\n  \"modules/filters/mod_xml2enc+i+i18n support for markup filters\"\n  \"modules/generators/mod_asis+I+as-is filetypes\"\n  \"modules/generators/mod_autoindex+A+directory listing\"\n  \"modules/generators/mod_cgi+I+CGI scripts\"\n  \"modules/generators/mod_info+I+server information\"\n  \"modules/generators/mod_status+I+process/thread monitoring\"\n  \"modules/http/mod_mime+A+mapping of file-extension to MIME.  Disabling this module is normally not recommended.\"\n  \"modules/http2/mod_http2+i+HTTP/2 protocol support\"\n  \"modules/ldap/mod_ldap+i+LDAP caching and connection pooling services\"\n  \"modules/loggers/mod_log_config+A+logging configuration.  You won't be able to log requests to the server without this module.\"\n  \"modules/loggers/mod_log_debug+I+configurable debug logging\"\n  \"modules/loggers/mod_log_forensic+I+forensic logging\"\n  \"modules/loggers/mod_logio+I+input and output logging\"\n  \"modules/lua/mod_lua+i+Apache Lua Framework\"\n  \"modules/md/mod_md+i+Apache Managed Domains (Certificates)\"\n  \"modules/mappers/mod_actions+I+Action triggering on requests\"\n  \"modules/mappers/mod_alias+A+mapping of requests to different filesystem parts\"\n  \"modules/mappers/mod_dir+A+directory request handling\"\n  \"modules/mappers/mod_imagemap+I+server-side imagemaps\"\n  \"modules/mappers/mod_negotiation+I+content negotiation\"\n  \"modules/mappers/mod_rewrite+I+rule based URL manipulation\"\n  \"modules/mappers/mod_speling+I+correct common URL misspellings\"\n  \"modules/mappers/mod_userdir+I+mapping of requests to user-specific directories\"\n  \"modules/mappers/mod_vhost_alias+I+mass virtual hosting module\"\n  \"modules/metadata/mod_cern_meta+O+CERN-type meta files\"\n  \"modules/metadata/mod_env+A+clearing/setting of ENV vars\"\n  \"modules/metadata/mod_expires+I+Expires header control\"\n  \"modules/metadata/mod_headers+A+HTTP header control\"\n  \"modules/metadata/mod_ident+O+RFC 1413 identity check\"\n  \"modules/metadata/mod_mime_magic+O+automagically determining MIME type\"\n  \"modules/metadata/mod_remoteip+I+translate header contents to an apparent client remote_ip\"\n  \"modules/metadata/mod_setenvif+A+basing ENV vars on headers\"\n  \"modules/metadata/mod_unique_id+I+per-request unique ids\"\n  \"modules/metadata/mod_usertrack+I+user-session tracking\"\n  \"modules/metadata/mod_version+A+determining httpd version in config files\"\n  \"modules/proxy/balancers/mod_lbmethod_bybusyness+I+Apache proxy Load balancing by busyness\"\n  \"modules/proxy/balancers/mod_lbmethod_byrequests+I+Apache proxy Load balancing by request counting\"\n  \"modules/proxy/balancers/mod_lbmethod_bytraffic+I+Apache proxy Load balancing by traffic counting\"\n  \"modules/proxy/balancers/mod_lbmethod_heartbeat+I+Apache proxy Load balancing from Heartbeats\"\n  \"modules/proxy/mod_proxy_ajp+I+Apache proxy AJP module.  Requires and is enabled by --enable-proxy.\"\n  \"modules/proxy/mod_proxy_balancer+I+Apache proxy BALANCER module.  Requires and is enabled by --enable-proxy.\"\n  \"modules/proxy/mod_proxy+I+Apache proxy module\"\n  \"modules/proxy/mod_proxy_connect+I+Apache proxy CONNECT module.  Requires and is enabled by --enable-proxy.\"\n  \"modules/proxy/mod_proxy_express+I+mass reverse-proxy module. Requires --enable-proxy.\"\n  \"modules/proxy/mod_proxy_fcgi+I+Apache proxy FastCGI module.  Requires and is enabled by --enable-proxy.\"\n  \"modules/proxy/mod_proxy_ftp+I+Apache proxy FTP module.  Requires and is enabled by --enable-proxy.\"\n  \"modules/proxy/mod_proxy_hcheck+I+Apache proxy Health check module.  Requires and is enabled by --enable-proxy.\"\n  \"modules/proxy/mod_proxy_http+I+Apache proxy HTTP module.  Requires and is enabled by --enable-proxy.\"\n  \"modules/proxy/mod_proxy_scgi+I+Apache proxy SCGI module.  Requires and is enabled by --enable-proxy.\"\n  \"modules/proxy/mod_proxy_wstunnel+I+Apache proxy Websocket Tunnel module.  Requires and is enabled by --enable-proxy.\"\n  \"modules/http2/mod_proxy_http2+i+Apache proxy HTTP/2 module.  Requires --enable-proxy.\"\n  \"modules/proxy/mod_serf+O+Reverse proxy module using Serf\"\n  \"modules/session/mod_session+I+session module\"\n  \"modules/session/mod_session_cookie+I+session cookie module\"\n  \"modules/session/mod_session_crypto+i+session crypto module\"\n  \"modules/session/mod_session_dbd+I+session dbd module\"\n  \"modules/slotmem/mod_slotmem_plain+I+slotmem provider that uses plain memory\"\n  \"modules/slotmem/mod_slotmem_shm+I+slotmem provider that uses shared memory\"\n  \"modules/ssl/mod_ssl+i+SSL/TLS support\"\n  \"modules/ssl/mod_ssl_ct+O+Certificate Transparency support (requires OpenSSL >= 1.0.2)\"\n  \"modules/test/mod_dialup+O+rate limits static files to dialup modem speeds\"\n  \"modules/test/mod_optional_fn_export+O+example optional function exporter\"\n  \"modules/test/mod_optional_fn_import+O+example optional function importer\"\n  \"modules/test/mod_optional_hook_export+O+example optional hook exporter\"\n  \"modules/test/mod_optional_hook_import+O+example optional hook importer\"\n  \"modules/test/mod_policy+I+HTTP protocol compliance filters\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Request Object Logging Methods in Apache mod_lua\nDESCRIPTION: Example showing the various logging methods available on the request_rec object in mod_lua. These methods correspond to Apache's logging levels and allow handlers to write messages to the server log.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/writing-handlers.txt#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nr:debug(\"This is a debug log message\")\nr:info(\"This is an info log message\")\nr:notice(\"This is an notice log message\")\nr:warn(\"This is an warn log message\")\nr:err(\"This is an err log message\")\nr:alert(\"This is an alert log message\")\nr:crit(\"This is an crit log message\")\nr:emerg(\"This is an emerg log message\")\n```\n\n----------------------------------------\n\nTITLE: Building and Loading Apache HTTP Server Modules in CMake\nDESCRIPTION: Handles the creation of LoadModule directives and builds shared libraries for Apache modules. It adds modules to appropriate lists based on whether they are built and loaded, built but not loaded, or omitted.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\n  IF(${enable_mod_val} STREQUAL \"O\")\n    # ignore\n    SET(mods_omitted ${mods_omitted} ${mod_name})\n  ELSE()\n    # Handle whether or not the LoadModule is commented out.\n    IF(${enable_mod_val} STREQUAL \"A\")\n      SET(LoadModules \"${LoadModules}LoadModule ${mod_module_name} modules/${mod_name}.so\\n\")\n      SET(mods_built_and_loaded ${mods_built_and_loaded} ${mod_name})\n    ELSEIF(${enable_mod_val} STREQUAL \"I\")\n      SET(LoadModules \"${LoadModules}# LoadModule ${mod_module_name} modules/${mod_name}.so\\n\")\n      SET(mods_built_but_not_loaded ${mods_built_but_not_loaded} ${mod_name})\n    ELSE()\n      MESSAGE(FATAL_ERROR \"${enable_mod} must be set to \\\"A\\\", \\\"I\\\", or \\\"O\\\" instead of \\\"${enable_mod_val}\\\"\")\n    ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Compiling Apache HTTP Server Module Libraries in CMake\nDESCRIPTION: Configures and builds the shared library for each enabled Apache module. Sets up compiler definitions, linking options, and includes any extra dependencies and configuration specific to the module.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\n    # Handle building it.\n    SET(mod_main_source \"${mod_name}_main_source\")\n    SET(mod_extra_sources \"${mod_name}_extra_sources\")\n\n    IF(\"${${mod_main_source}}\" STREQUAL \"\")\n      SET(tmp_mod_main_source \"${mod}.c\")\n    ELSE()\n      SET(tmp_mod_main_source ${${mod_main_source}})\n    ENDIF()\n    SET(all_mod_sources ${tmp_mod_main_source} ${${mod_extra_sources}})\n    ADD_LIBRARY(${mod_name} SHARED ${all_mod_sources} build/win32/httpd.rc)\n    SET(install_modules ${install_modules} ${mod_name})\n    SET(install_modules_pdb ${install_modules_pdb} \"$<TARGET_PDB_FILE:${mod_name}>\")\n    IF(\"${${mod_name}_install_lib}\")\n      SET(installed_mod_libs_exps\n          ${installed_mod_libs_exps}\n          \"$<TARGET_LINKER_FILE:${mod_name}>\"\n          \"$<TARGET_LINKER_FILE_DIR:${mod_name}>/${mod_name}.exp\"\n      )\n    ENDIF()\n    SET(mod_extra_libs \"${mod_name}_extra_libs\")\n    SET_TARGET_PROPERTIES(${mod_name} PROPERTIES\n      SUFFIX .so\n      LINK_FLAGS /base:@${PROJECT_BINARY_DIR}/BaseAddr.ref,${mod_name}.so\n    )\n    TARGET_LINK_LIBRARIES(${mod_name} ${${mod_extra_libs}} libhttpd ${EXTRA_LIBS} ${APR_LIBRARIES} ${HTTPD_SYSTEM_LIBS})\n    TARGET_COMPILE_DEFINITIONS(${mod_name} PRIVATE\n      \"LONG_NAME=${mod_name} for Apache HTTP Server\"\n      \"BIN_NAME=${mod_name}.so\"\n    )\n    TARGET_COMPILE_OPTIONS(${mod_name} PRIVATE \"${EXTRA_COMPILE_FLAGS}\")\n\n    # Extra defines?\n    SET(mod_extra_defines \"${mod_name}_extra_defines\")\n    IF(NOT ${${mod_extra_defines}} STREQUAL \"\")\n      SET_TARGET_PROPERTIES(${mod_name} PROPERTIES COMPILE_DEFINITIONS ${${mod_extra_defines}})\n    ENDIF()\n\n    # Extra includes?\n    SET(mod_extra_includes \"${mod_name}_extra_includes\")\n    IF(NOT \"${${mod_extra_includes}}\" STREQUAL \"\")\n      SET(tmp_includes ${HTTPD_INCLUDE_DIRECTORIES} ${${mod_extra_includes}})\n      SET_TARGET_PROPERTIES(${mod_name} PROPERTIES INCLUDE_DIRECTORIES \"${tmp_includes}\")\n      GET_PROPERTY(tmp_includes TARGET ${mod_name} PROPERTY INCLUDE_DIRECTORIES)\n    ENDIF()\n\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Apache LuaMapHandler Configuration Example\nDESCRIPTION: Example of mapping URI patterns to Lua handler functions using regular expressions.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/basic-configuration.txt#2025-04-23_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\nLuaMapHandler /(\\w+)/(\\w+) /scripts/$1.lua handle_$2\nLuaMapHandler /bingo /scripts/wombat.lua\n```\n\n----------------------------------------\n\nTITLE: Building Apache Benchmark (ab) Utility in CMake\nDESCRIPTION: Builds the Apache Benchmark (ab) utility for HTTP server performance testing. Configures the executable with appropriate compiler definitions and dependencies.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(ab support/ab.c build/win32/httpd.rc)\nSET(install_targets ${install_targets} ab)\nSET(install_bin_pdb ${install_bin_pdb} $<TARGET_PDB_FILE:ab>)\nSET(tmp_includes ${HTTPD_INCLUDE_DIRECTORIES})\nSET_TARGET_PROPERTIES(ab PROPERTIES INCLUDE_DIRECTORIES \"${tmp_includes}\")\nTARGET_COMPILE_DEFINITIONS(ab PRIVATE\n    \"APP_FILE\"\n    \"LONG_NAME=Apache HTTP Server ab program\"\n    \"BIN_NAME=ab.exe\"\n)\nTARGET_LINK_LIBRARIES(ab ${EXTRA_LIBS} ${APR_LIBRARIES} Ws2_32.lib)\n```\n\n----------------------------------------\n\nTITLE: Building Apache Benchmark with SSL Support in CMake\nDESCRIPTION: Conditionally builds the Apache Benchmark utility with SSL support (abs) when OpenSSL is available. Configures the executable with appropriate compiler definitions and OpenSSL dependencies.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nIF(OPENSSL_FOUND)\n  ADD_EXECUTABLE(abs support/ab.c build/win32/httpd.rc)\n  SET(install_targets ${install_targets} abs)\n  SET(install_bin_pdb ${install_bin_pdb} $<TARGET_PDB_FILE:abs>)\n  SET_TARGET_PROPERTIES(abs PROPERTIES COMPILE_DEFINITIONS HAVE_OPENSSL)\n  SET(tmp_includes ${HTTPD_INCLUDE_DIRECTORIES} ${OPENSSL_INCLUDE_DIR})\n  SET_TARGET_PROPERTIES(abs PROPERTIES INCLUDE_DIRECTORIES \"${tmp_includes}\")\n  TARGET_COMPILE_DEFINITIONS(abs PRIVATE\n      \"APP_FILE\"\n      \"LONG_NAME=Apache HTTP Server ab/SSL program\"\n      \"BIN_NAME=abs.exe\"\n  )\n  TARGET_LINK_LIBRARIES(abs ${EXTRA_LIBS} ${APR_LIBRARIES} ${OPENSSL_LIBRARIES} Ws2_32.lib)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building Apache HTTP Server Support Utilities in CMake\nDESCRIPTION: Builds the standard support utilities for Apache HTTP Server such as htcacheclean, htdbm, htdigest, etc. Configures each executable with appropriate compiler definitions and dependencies.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nSET(standard_support\n  htcacheclean\n  htdbm\n  htdigest\n  htpasswd\n  httxt2dbm\n  logresolve\n  rotatelogs\n)\n\nSET(htdbm_extra_sources support/passwd_common.c)\nSET(htpasswd_extra_sources support/passwd_common.c)\n\nFOREACH(pgm ${standard_support})\n  SET(extra_sources ${pgm}_extra_sources)\n  ADD_EXECUTABLE(${pgm} support/${pgm}.c ${${extra_sources}} build/win32/httpd.rc)\n  SET(install_targets ${install_targets} ${pgm})\n  SET(install_bin_pdb ${install_bin_pdb} $<TARGET_PDB_FILE:${pgm}>)\n  TARGET_COMPILE_DEFINITIONS(${pgm} PRIVATE\n      \"APP_FILE\"\n      \"LONG_NAME=Apache HTTP Server ${pgm} program\"\n      \"BIN_NAME=${pgm}.exe\"\n  )\n  TARGET_COMPILE_OPTIONS(${mod_name} PRIVATE \"${EXTRA_COMPILE_FLAGS}\")\n  TARGET_LINK_LIBRARIES(${pgm} ${EXTRA_LIBS} ${APR_LIBRARIES})\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration for Apache HTTPD Components\nDESCRIPTION: Defines installation rules for Apache HTTPD binaries, modules, headers, and supporting files. Includes conditional installation of debugging symbols and manual.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(TARGETS ${install_targets}\n        RUNTIME DESTINATION bin\n        LIBRARY DESTINATION lib\n        ARCHIVE DESTINATION lib\n       )\nINSTALL(TARGETS ${install_modules}\n        RUNTIME DESTINATION modules\n       )\n\nIF(INSTALL_PDB)\n  INSTALL(FILES ${install_bin_pdb}\n          DESTINATION bin\n          CONFIGURATIONS RelWithDebInfo Debug)\n\n  INSTALL(FILES ${install_modules_pdb}\n          DESTINATION modules\n          CONFIGURATIONS RelWithDebInfo Debug)\nENDIF()\n\nINSTALL(DIRECTORY include/ DESTINATION include\n    FILES_MATCHING PATTERN \"*.h\"\n)\nINSTALL(FILES ${other_installed_h} DESTINATION include)\nINSTALL(FILES ${installed_mod_libs_exps} DESTINATION lib)\nINSTALL(FILES \"$<TARGET_LINKER_FILE_DIR:libhttpd>/libhttpd.exp\" DESTINATION LIB)\nINSTALL(FILES support/ctlogconfig DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Configuration File Generation for Apache HTTPD\nDESCRIPTION: Handles the generation of Apache HTTPD configuration files from templates. Sets up server paths and ports, and processes .conf.in template files.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nSET(Port                \"80\" CACHE STRING \"http port to listen on\")\nSET(SSLPort             \"443\" CACHE STRING \"https port to listen on\")\nSET(ServerRoot          \"${CMAKE_INSTALL_PREFIX}\")\nSET(exp_cgidir          \"${CMAKE_INSTALL_PREFIX}/cgi-bin\")\nSET(exp_htdocsdir       \"${CMAKE_INSTALL_PREFIX}/htdocs\")\nSET(exp_iconsdir        \"${CMAKE_INSTALL_PREFIX}/icons\")\nSET(exp_errordir        \"${CMAKE_INSTALL_PREFIX}/error\")\nSET(exp_manualdir       \"${CMAKE_INSTALL_PREFIX}/manual\")\nSET(rel_logfiledir      \"logs\")\nSET(rel_runtimedir      \"logs\")\nSET(rel_sysconfdir      \"conf\")\nFILE(GLOB_RECURSE conffiles RELATIVE ${CMAKE_SOURCE_DIR}/docs/conf \"docs/conf/*\")\nFOREACH(template ${conffiles})\n  STRING(REPLACE \".conf.in\" \".conf\" conf \"${template}\")\n  FILE(READ \"docs/conf/${template}\" template_text)\n    IF(template MATCHES \".conf.in$\")\n      STRING(REPLACE \"@@\" \"@\" template_text \"${template_text}\")\n      STRING(CONFIGURE \"${template_text}\" template_text @ONLY)\n    ENDIF()\n  FILE(WRITE ${CMAKE_BINARY_DIR}/conf/original/${conf} \"${template_text}\")\n  FILE(WRITE ${CMAKE_BINARY_DIR}/conf/${conf} \"${template_text}\")\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Processing Apache HTTP Server Module Paths in CMake\nDESCRIPTION: Processes module paths to determine which modules to build and load. It extracts module names, checks if they're enabled, verifies prerequisites, and configures LoadModule directives accordingly.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH (mod ${MODULE_PATHS})\n  # Build different forms of the module name; e.g., \n  #   mod_name->mod_cgi, mod_module_name->cgi_module, mod_shortname->cgi\n  STRING(REGEX REPLACE \".*/(mod_[^\\\\+]+)\" \"\\1\"        mod_name        ${mod})\n  STRING(REGEX REPLACE \"mod_(.*)\"         \"\\1_module\" mod_module_name ${mod_name})\n  STRING(REGEX REPLACE \"mod_(.*)\"         \"\\1\"        mod_shortname   ${mod_name})\n\n  # Is it enabled?\n  STRING(TOUPPER \"ENABLE_${mod_shortname}\" enable_mod)\n  SET(enable_mod_val ${${enable_mod}})\n\n  # Is ENABLE_MODULES set to a higher value?\n  GET_MOD_ENABLE_RANK(${mod_name} ${enable_mod_val} this_mod_rank)\n  IF(this_mod_rank LESS enable_modules_rank)\n    # Use the value from ENABLE_MODULES\n    SET(enable_mod_val ${ENABLE_MODULES})\n  ENDIF()\n\n  IF(NOT ${enable_mod_val} STREQUAL \"O\") # build of module is desired\n    SET(mod_requires \"${mod_name}_requires\")\n    STRING(TOUPPER ${enable_mod_val} enable_mod_val_upper)\n    IF(NOT \"${${mod_requires}}\" STREQUAL \"\") # module has some prerequisite\n      FOREACH (required ${${mod_requires}})\n        IF(NOT ${required}) # prerequisite doesn't exist\n          IF(NOT ${enable_mod_val} STREQUAL ${enable_mod_val_upper}) # lower case, so optional based on prereq\n            MESSAGE(STATUS \"${mod_name} was requested but couldn't be built due to a missing prerequisite (${required})\")\n            SET(enable_mod_val_upper \"O\") # skip due to missing prerequisite\n          ELSE() # must be upper case \"A\" or \"I\" (or coding error above)\n            MESSAGE(FATAL_ERROR \"${mod_name} was requested but couldn't be built due to a missing prerequisite (${required})\")\n          ENDIF()\n        ENDIF()\n      ENDFOREACH()\n    ENDIF()\n    # map a->A, i->I, O->O for remaining logic since prereq checking is over\n    SET(enable_mod_val ${enable_mod_val_upper})\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test Suite in CMake for Apache HTTPD\nDESCRIPTION: Sets up the unit test suite compilation and test case generation. Includes configuration for test stubs and case file generation using Perl scripts.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nIF(CHECK_FOUND)\n  FILE(GLOB httpdunit_cases \"${CMAKE_SOURCE_DIR}/test/unit/*.c\")\n\n  ADD_EXECUTABLE(httpdunit\n                   test/httpdunit.c\n                   ${httpdunit_cases})\n  SET_TARGET_PROPERTIES(httpdunit PROPERTIES\n                        INCLUDE_DIRECTORIES \"${HTTPD_INCLUDE_DIRECTORIES} ${CHECK_INCLUDE_DIR}\"\n                        COMPILE_FLAGS \"-DHAVE_STDINT_H\")\n  TARGET_LINK_LIBRARIES(httpdunit libhttpd ${APR_LIBRARIES} ${CHECK_LIBRARIES})\n\n  FILE(GENERATE OUTPUT \"${CMAKE_BINARY_DIR}/httpdunit_gen_stubs.bat\"\n                CONTENT \"perl \\\"${CMAKE_SOURCE_DIR}/build/httpdunit_gen_stubs.pl\\\" < %1 > %2\")\n  FILE(MAKE_DIRECTORY \"${CMAKE_BINARY_DIR}/test/unit\")\n\n  FOREACH(case ${httpdunit_cases})\n    STRING(REGEX REPLACE \"^${CMAKE_SOURCE_DIR}\" \"${CMAKE_BINARY_DIR}\"\n                 stub \"${case}\")\n    STRING(REGEX REPLACE \"\\.c$\" \".tests\"\n                 stub \"${stub}\")\n\n    ADD_CUSTOM_COMMAND(TARGET httpdunit\n                       PRE_BUILD\n                       COMMAND \"${CMAKE_BINARY_DIR}/httpdunit_gen_stubs.bat\" \"\\\"${case}\\\"\" \"\\\"${stub}\\\"\"\n                       BYPRODUCTS \"${stub}\")\n  ENDFOREACH()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Apache HTTP Server Build\nDESCRIPTION: Configures the include directories needed for building Apache HTTP Server. Includes paths to project headers, module-specific headers, and dependencies like APR and PCRE.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nSET(HTTPD_INCLUDE_DIRECTORIES\n  ${PROJECT_BINARY_DIR}\n  ${EXTRA_INCLUDES}\n  # see discussion in cmake bug 13188 regarding oddities with relative paths\n  ${CMAKE_CURRENT_SOURCE_DIR}/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/os/win32\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/core\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/database\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/dav/main\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/filters\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/generators\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/http2\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/md\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/proxy\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/session\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/ssl\n  ${CMAKE_CURRENT_SOURCE_DIR}/server\n  ${CMAKE_CURRENT_SOURCE_DIR}/server/mpm/winnt\n  ${APR_INCLUDE_DIR}\n  ${PCRE_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Headers for Installation in Apache HTTP Server\nDESCRIPTION: Lists all header files that should be installed with Apache HTTP Server, beyond those in the main include directory. Includes headers from various modules and platform-specific files.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n# The .h files we install from outside the main include directory\n# largely parallel the include directories above.\nSET(other_installed_h\n  ${PROJECT_BINARY_DIR}/ap_config_layout.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/os/win32/os.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/cache/mod_cache.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/cache/cache_common.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/core/mod_so.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/core/mod_watchdog.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/database/mod_dbd.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/dav/main/mod_dav.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/filters/mod_include.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/filters/mod_xml2enc.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/generators/mod_cgi.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/generators/mod_status.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/http2/mod_http2.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/loggers/mod_log_config.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/mappers/mod_rewrite.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/proxy/mod_proxy.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/session/mod_session.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/ssl/mod_ssl.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/modules/ssl/mod_ssl_openssl.h\n)\n```\n\n----------------------------------------\n\nTITLE: APR Library Detection Logic\nDESCRIPTION: Determines which version of Apache Portable Runtime (APR) libraries to use based on what's available in the installation prefix directory.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EXISTS \"${CMAKE_INSTALL_PREFIX}/lib/libapr-2.lib\")\n  SET(default_apr_libraries \"${CMAKE_INSTALL_PREFIX}/lib/libapr-2.lib\")\nELSEIF(EXISTS \"${CMAKE_INSTALL_PREFIX}/lib/libapr-1.lib\")\n  SET(ldaplib \"${CMAKE_INSTALL_PREFIX}/lib/apr_ldap-1.lib\")\n  IF(NOT EXISTS ${ldaplib})\n    SET(ldaplib)\n  ENDIF()\n  SET(default_apr_libraries ${CMAKE_INSTALL_PREFIX}/lib/libapr-1.lib ${CMAKE_INSTALL_PREFIX}/lib/libaprutil-1.lib ${ldaplib})\nELSE()\n  SET(default_apr_libraries)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Lua Hook Example for URI Translation\nDESCRIPTION: Example of a Lua hook function that translates the root URI to a specific file path.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/basic-configuration.txt#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction silly_mapper(r)\n    if r.uri == \"/\" then\n        r.file = \"/var/www/home.lua\"\n        return apache2.OK\n    else\n        return apache2.DECLINED\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Main Sources for Apache HTTP Server\nDESCRIPTION: Sets the HTTPD_MAIN_SOURCES variable which lists the main entry point source file for the Apache HTTP Server executable. This is the primary source file for the httpd program.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nSET(HTTPD_MAIN_SOURCES\n  server/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache HTTP Server Layout Header\nDESCRIPTION: Generates the ap_config_layout.h file from the Windows-specific template. This header defines the layout configuration for Apache HTTP Server installation paths on Windows platforms.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nCONFIGURE_FILE(os/win32/win32_config_layout.h\n               ${PROJECT_BINARY_DIR}/ap_config_layout.h)\n```\n\n----------------------------------------\n\nTITLE: Installing mod_lua Handler for Server Status in Apache httpd Configuration\nDESCRIPTION: Configuration directive to map the server-status URL path to the Lua script. This allows the script to handle requests to the /server-status endpoint.\nSOURCE: https://github.com/apache/httpd/blob/trunk/docs/server-status/README.md#2025-04-23_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nLuaMapHandler ^/server-status$ /path/to/server-status.lua\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache httpd to Handle Lua Scripts\nDESCRIPTION: Configuration directive to set up the lua-script handler for .lua file extensions. This approach installs the server status script as a web application rather than a handler.\nSOURCE: https://github.com/apache/httpd/blob/trunk/docs/server-status/README.md#2025-04-23_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nAddHandler lua-script .lua\n```\n\n----------------------------------------\n\nTITLE: Configuring libapreq2 for Apache HTTPD\nDESCRIPTION: Configures libapreq2 with a custom installation prefix and specifies the path to the Apache apxs utility. libapreq2 is required by mod_lua for parsing entity bodies.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/building-from-subversion.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./configure --prefix=/Users/brianm/.opt/libapreq2-2.0.8 \\\n      --with-apache2-apxs=/Users/brianm/.opt/httpd-2.2.4-worker-wombat/bin/apxs\n```\n\n----------------------------------------\n\nTITLE: Configuring mod_lua with dependencies\nDESCRIPTION: Configures mod_lua with paths to the Lua, Apache, and libapreq2 installations. Specifies the locations of all required dependencies for building the module.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/building-from-subversion.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./configure  --with-lua=/Users/brianm/.opt/lua-5.1.2/ \\\n      --with-apxs=/Users/brianm/.opt/httpd-2.2.4-worker-wombat/bin/apxs \\\n      --with-apreq2=/Users/brianm/.opt/libapreq2-2.0.8/\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache HTTPD 2.2 with worker MPM\nDESCRIPTION: Configures Apache HTTPD 2.2 with worker MPM and enables dynamic module loading required for mod_lua. The --prefix parameter specifies the installation directory.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/building-from-subversion.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./configure --prefix=/Users/brianm/.opt/httpd-2.2.4-worker-wombat \\\n                --with-mpm=worker  \\\n                --enable-so\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping mod_lua from SVN\nDESCRIPTION: Initializes the autoconf build environment for mod_lua when building from the Apache SVN repository. This must be run before configuring the module.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/building-from-subversion.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bootstrap\n```\n\n----------------------------------------\n\nTITLE: Processing Static Modules in Apache HTTP Server CMake Configuration\nDESCRIPTION: This snippet iterates through each static module in the WITH_MODULE_LIST, extracts module names using regex, and adds them to the builtin module list. It then copies the module source files to the binary directory and updates the list of extra builtin modules.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(static_mod ${WITH_MODULE_LIST})\n  STRING(REGEX MATCH   \"[^/]+\\\\.c\"           mod_basename    ${static_mod})\n  STRING(REGEX REPLACE \"^mod_(.*)\\\\.c\" \"\\\\1\" mod_module_name ${mod_basename})\n  LIST(APPEND builtin_module_shortnames \"${mod_module_name}\")\n  CONFIGURE_FILE(${static_mod} ${PROJECT_BINARY_DIR}/ COPYONLY)\n  SET(extra_builtin_modules ${extra_builtin_modules} ${PROJECT_BINARY_DIR}/${mod_basename})\nENDFOREACH()\n\ngenerate_builtin_modules_c(\"${PROJECT_BINARY_DIR}/modules.c\" \"${builtin_module_shortnames}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring BaseAddr Reference File in Apache HTTP CMake\nDESCRIPTION: Copies the BaseAddr.ref file from the Windows OS directory to the project binary directory for use in DLL/SO builds. This file contains information about the base addresses for loaded modules.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# for easy reference from .dll/.so builds\nCONFIGURE_FILE(os/win32/BaseAddr.ref ${PROJECT_BINARY_DIR}/ COPYONLY)\n```\n\n----------------------------------------\n\nTITLE: Displaying Feature Detection Summary in CMake\nDESCRIPTION: Outputs a status summary of all detected features and dependencies including LIBXML2, LUA51, NGHTTP2, OpenSSL, and various other libraries.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nMESSAGE(STATUS \"\")\nMESSAGE(STATUS \"Summary of feature detection:\")\nMESSAGE(STATUS \"\")\nMESSAGE(STATUS \"LIBXML2_FOUND ............ : ${LIBXML2_FOUND}\")\nMESSAGE(STATUS \"LUA51_FOUND .............. : ${LUA51_FOUND}\")\nMESSAGE(STATUS \"NGHTTP2_FOUND ............ : ${NGHTTP2_FOUND}\")\nMESSAGE(STATUS \"OPENSSL_FOUND ............ : ${OPENSSL_FOUND}\")\nMESSAGE(STATUS \"ZLIB_FOUND ............... : ${ZLIB_FOUND}\")\nMESSAGE(STATUS \"BROTLI_FOUND ............. : ${BROTLI_FOUND}\")\nMESSAGE(STATUS \"CURL_FOUND ............... : ${CURL_FOUND}\")\nMESSAGE(STATUS \"JANSSON_FOUND ............ : ${JANSSON_FOUND}\")\nMESSAGE(STATUS \"CHECK_FOUND .............. : ${CHECK_FOUND}\")\nMESSAGE(STATUS \"APR_HAS_LDAP ............. : ${APR_HAS_LDAP}\")\nMESSAGE(STATUS \"APR_HAS_XLATE ............ : ${APR_HAS_XLATE}\")\nMESSAGE(STATUS \"APU_HAVE_CRYPTO .......... : ${APU_HAVE_CRYPTO}\")\nMESSAGE(STATUS \"\")\n```\n\n----------------------------------------\n\nTITLE: APR Feature Detection Macro\nDESCRIPTION: Implements a macro to check for the existence and enablement of specific APR features by examining header files and testing compilations.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nMACRO(CHECK_APR_FEATURE which_define)\n  SET(CMAKE_REQUIRED_INCLUDES \"${APR_INCLUDE_DIR}\")\n  CHECK_SYMBOL_EXISTS(${which_define} \"apr.h;apu.h\" tmp_${which_define})\n  IF(${tmp_${which_define}})\n    CHECK_C_SOURCE_COMPILES(\"#include \\\"${APR_INCLUDE_DIR}/apr.h\\\"\n      #include \\\"${APR_INCLUDE_DIR}/apu.h\\\"\n      int main() {\n      #ifndef ${which_define}\n      #error gobble\n      #endif\n      #if !${which_define}\n      #error gobble\n      #endif\n      return 1;}\" ${which_define})\n  ELSE()\n    SET(${which_define})\n  ENDIF()\n  IF(${${which_define}})\n    SET(${which_define} TRUE)\n  ELSE()\n    SET(${which_define} FALSE)\n  ENDIF()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Detecting Brotli Library in CMake\nDESCRIPTION: Validates the presence of Brotli compression library by checking for header files and library existence. Sets BROTLI_FOUND flag based on validation results.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSET(BROTLI_FOUND TRUE)\nIF(EXISTS \"${BROTLI_INCLUDE_DIR}/brotli/encode.h\")\n  FOREACH(onelib ${BROTLI_LIBRARIES})\n    IF(NOT EXISTS ${onelib})\n      SET(BROTLI_FOUND FALSE)\n    ENDIF()\n  ENDFOREACH()\nELSE()\n  SET(BROTLI_FOUND FALSE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Detecting Check Testing Framework in CMake\nDESCRIPTION: Validates the presence of Check unit testing framework by verifying header files and library existence. Sets CHECK_FOUND flag based on validation results.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CHECK_FOUND TRUE)\nIF (EXISTS \"${CHECK_INCLUDE_DIR}/check.h\")\n  FOREACH(onelib ${CHECK_LIBRARIES})\n    IF(NOT EXISTS \"${onelib}\")\n      SET(CHECK_FOUND FALSE)\n    ENDIF()\n  ENDFOREACH()\nELSE()\n  SET(CHECK_FOUND FALSE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Detecting Jansson JSON Library in CMake\nDESCRIPTION: Validates the presence of Jansson JSON library by checking for header files and library existence. Sets JANSSON_FOUND flag based on validation results.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nSET(JANSSON_FOUND TRUE)\nIF(EXISTS \"${JANSSON_INCLUDE_DIR}/jansson.h\")\n  FOREACH(onelib ${JANSSON_LIBRARIES})\n    IF(NOT EXISTS ${onelib})\n      SET(JANSSON_FOUND FALSE)\n    ENDIF()\n  ENDFOREACH()\nELSE()\n  SET(JANSSON_FOUND FALSE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Initializing Module Libraries Variable in CMake\nDESCRIPTION: A CMake SET command that initializes a variable to track which modules have APIs to link against. This variable will be populated during the build process with modules that provide linkable libraries.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Track which modules actually built have APIs to link against.\nSET(installed_mod_libs_exps)\n```\n\n----------------------------------------\n\nTITLE: Adding Comment for Module Definitions in CMake\nDESCRIPTION: A comment in the CMake configuration file indicating that additional definitions, sources, headers, and other requirements for certain modules could be included in the main module list but are defined elsewhere.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Define extra definitions, sources, headers, etc. required by some modules.\n# This could be included in the master list of modules above, though it \n```\n\n----------------------------------------\n\nTITLE: Module Enablement Rank Macro\nDESCRIPTION: Defines a macro to convert module enablement values (O, i, I, a, A) to numeric ranks for determining module build priorities.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nMACRO(GET_MOD_ENABLE_RANK macro_modname macro_mod_enable_val macro_output_rank)\n  IF(${macro_mod_enable_val} STREQUAL \"O\")\n    SET(${macro_output_rank} 0)\n  ELSEIF(${macro_mod_enable_val} STREQUAL \"i\")\n    SET(${macro_output_rank} 1)\n  ELSEIF(${macro_mod_enable_val} STREQUAL \"I\")\n    SET(${macro_output_rank} 2)\n  ELSEIF(${macro_mod_enable_val} STREQUAL \"a\")\n    SET(${macro_output_rank} 3)\n  ELSEIF(${macro_mod_enable_val} STREQUAL \"A\")\n    SET(${macro_output_rank} 4)\n  ELSE()\n    MESSAGE(FATAL_ERROR \"Unexpected enablement value \\\"${macro_mod_enable_val}\\\" for ${macro_modname}\")\n  ENDIF()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Lua Package Path Configuration Examples\nDESCRIPTION: Examples of configuring Lua package search paths in Apache.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/basic-configuration.txt#2025-04-23_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\nLuaPackagePath /scripts/lib/?.lua\nLuaPackagePath /scripts/lib/?/init.lua\nLuaPackagePath /scripts/lib/?.so\n```\n\n----------------------------------------\n\nTITLE: Apache HTTP Server Source Code Download\nDESCRIPTION: Commands to download the Apache HTTP Server source code from the official website. It demonstrates how to verify file integrity using checksums and extract the archive.\nSOURCE: https://github.com/apache/httpd/blob/trunk/test/modules/http2/htdocs/cgi/files/empty.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Download Apache HTTP Server source code\nwget https://dlcdn.apache.org/httpd/httpd-2.4.56.tar.gz\n\n# Verify the downloaded file (optional but recommended)\nwget https://dlcdn.apache.org/httpd/httpd-2.4.56.tar.gz.sha256\nsha256sum -c httpd-2.4.56.tar.gz.sha256\n\n# Extract the archive\ntar -xzvf httpd-2.4.56.tar.gz\ncd httpd-2.4.56\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration for Apache HTTPD\nDESCRIPTION: Sets up the initial CMake configuration including minimum version requirement and project declaration for HTTPD in C language.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n\nPROJECT(HTTPD C)\n```\n\n----------------------------------------\n\nTITLE: Testing mod_lua Apache Module with Lua Test Suite\nDESCRIPTION: Commands for executing the mod_lua test suite after configuring the Apache server. Requires changing to the test directory and running the Lua test script.\nSOURCE: https://github.com/apache/httpd/blob/trunk/modules/lua/docs/running-developer-tests.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd test\n$ lua ./test.lua\nFreeBSD: lua-5.1 ./test.lua\n```\n\n----------------------------------------\n\nTITLE: Processing tcpdump Output for ASCII Display in Perl\nDESCRIPTION: This Perl script processes tcpdump output to display packet contents in ASCII format. It reads tcpdump output, converts hexadecimal values to ASCII characters, and replaces non-printable characters with dots. The script is executed with tcpdump arguments for capturing packets.\nSOURCE: https://github.com/apache/httpd/blob/trunk/test/tcpdumpscii.txt#2025-04-23_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n#!/import/misc/bin/perl\n\nopen(TCPDUMP,\"tcpdump -l @ARGV|\");\nwhile (<TCPDUMP>) {\n\tif (/^\\s+(\\S\\S)+/) {\n\t\t$sav = $_;\n\t\t$asc = \"\";\n\t\twhile (s/\\s*(\\S\\S)\\s*//) {\n\t\t\t$i = hex($1);\n\t\t\tif ($i < 32 || $i > 126) {\n\t\t\t\t$asc .= \".\";\n\t\t\t} else {\n\t\t\t\t$asc .= pack(C,hex($1));\n\t\t\t}\n\t\t}\n\t\t$foo = \".\" x length($asc);\n\t\t$_ = $sav;\n\t\ts/\\t/        /g;\n\t\ts/^$foo/$asc/;\n\t}\n\tprint;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Character Tables for Apache HTTP Server Build\nDESCRIPTION: Creates a custom target to generate character tables for the current locale. This snippet defines the gen_test_char executable, sets up a custom command to generate test_char.h, and creates a dependency to ensure it's built.\nSOURCE: https://github.com/apache/httpd/blob/trunk/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nADD_EXECUTABLE(gen_test_char server/gen_test_char.c)\nADD_CUSTOM_COMMAND(\n  COMMENT \"Generating character tables, test_char.h, for current locale\"\n  DEPENDS gen_test_char\n  COMMAND $<TARGET_FILE:gen_test_char> > ${PROJECT_BINARY_DIR}/test_char.h\n  OUTPUT ${PROJECT_BINARY_DIR}/test_char.h\n)\nADD_CUSTOM_TARGET(\n  test_char_header ALL\n  DEPENDS ${PROJECT_BINARY_DIR}/test_char.h\n)\n```"
  }
]