[
  {
    "owner": "rollup",
    "repo": "rollup",
    "content": "TITLE: Configuring General Plugins in Rollup\nDESCRIPTION: Shows how to configure general Rollup plugins with conditional loading based on environment. Demonstrates usage of @rollup/plugin-node-resolve, @rollup/plugin-commonjs, and conditional loading of terser for production builds.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (async () => ({\n\tinput: 'main.js',\n\tplugins: [\n\t\tresolve(),\n\t\tcommonjs(),\n\t\tisProduction && (await import('@rollup/plugin-terser')).default()\n\t],\n\toutput: {\n\t\tfile: 'bundle.js',\n\t\tformat: 'cjs'\n\t}\n}))();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Rollup Plugin in JavaScript\nDESCRIPTION: This example demonstrates how to create a simple Rollup plugin that intercepts imports of a virtual module. It includes both the plugin implementation and a sample Rollup configuration using the plugin.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myExample () {\n  return {\n    name: 'my-example', // this name will show up in logs and errors\n    resolveId ( source ) {\n      if (source === 'virtual-module') {\n        // this signals that Rollup should not ask other plugins or check\n        // the file system to find this id\n        return source;\n      }\n      return null; // other ids should be handled as usually\n    },\n    load ( id ) {\n      if (id === 'virtual-module') {\n        // the source code for \"virtual-module\"\n        return 'export default \"This is virtual!\"';\n      }\n      return null; // other ids should be handled as usually\n    }\n  };\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport myExample from './rollup-plugin-my-example.js';\nexport default ({\n  input: 'virtual-module', // resolved by our plugin\n  plugins: [myExample()],\n  output: [{\n    file: 'bundle.js',\n    format: 'es'\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the onLog Hook in Rollup Plugins\nDESCRIPTION: Example of two plugins that use the onLog hook to filter and modify logs. Shows how to handle specific log codes, transform log levels, and pass logs between plugins.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction plugin1() {\n\treturn {\n\t\tname: 'plugin1',\n\t\tbuildStart() {\n\t\t\tthis.info({ message: 'Hey', pluginCode: 'SPECIAL_CODE' });\n\t\t},\n\t\tonLog(level, log) {\n\t\t\tif (log.plugin === 'plugin1' && log.pluginCode === 'SPECIAL_CODE') {\n\t\t\t\t// We turn logs into warnings based on their code. This warnings\n\t\t\t\t// will not be passed back to the same plugin to avoid an\n\t\t\t\t// infinite loop, but other plugins will still receive it.\n\t\t\t\tthis.warn(log);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction plugin2() {\n\treturn {\n\t\tname: 'plugin2',\n\t\tonLog(level, log) {\n\t\t\tif (log.plugin === 'plugin1' && log.pluginCode === 'SPECIAL_CODE') {\n\t\t\t\t// You can modify logs in this hooks as well\n\t\t\t\tlog.meta = 'processed by plugin 2';\n\t\t\t\t// This turns the log back to \"info\". If this happens in\n\t\t\t\t// response to the first plugin, it will not be passed back to\n\t\t\t\t// either plugin to avoid an infinite loop. If both plugins are\n\t\t\t\t// active, the log will be an info log if the second plugin is\n\t\t\t\t// placed after the first one\n\t\t\t\tthis.info(log);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Transformer Plugin for Rollup\nDESCRIPTION: Example transformer plugin that filters files based on include/exclude patterns and transforms their content. Uses @rollup/pluginutils for filtering, demonstrating the recommended implementation pattern.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createFilter } from '@rollup/pluginutils';\n\nfunction transformCodePlugin(options = {}) {\n\tconst filter = createFilter(options.include, options.exclude);\n\n\treturn {\n\t\tname: 'transform-code',\n\t\ttransform(code, id) {\n\t\t\tif (!filter(id)) return;\n\n\t\t\t// proceed with the transformation...\n\t\t\treturn {\n\t\t\t\tcode: generatedCode,\n\t\t\t\tmap: generatedSourceMap\n\t\t\t};\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Generating Bundles with Rollup JavaScript API\nDESCRIPTION: Demonstrates how to use the rollup.rollup function to create a bundle, generate outputs, and handle errors. The example shows a complete workflow including creating a bundle, generating multiple outputs, processing assets and chunks, and properly closing the bundle.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/javascript-api/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rollup } from 'rollup';\n\n// see below for details on these options\nconst inputOptions = {\n\t/* ... */\n};\n\n// you can create multiple outputs from the same input to generate e.g.\n// different formats like CommonJS and ESM\nconst outputOptionsList = [\n\t{\n\t\t/* ... */\n\t},\n\t{\n\t\t/* ... */\n\t}\n];\n\nbuild();\n\nasync function build() {\n\tlet bundle;\n\tlet buildFailed = false;\n\ttry {\n\t\t// Create a bundle. If you are using TypeScript or a runtime that\n\t\t// supports it, you can write\n\t\t//\n\t\t// await using bundle = await rollup(inputOptions);\n\t\t//\n\t\t// instead and do not need to close the bundle explicitly below.\n\t\tbundle = await rollup(inputOptions);\n\n\t\t// an array of file names this bundle depends on\n\t\tconsole.log(bundle.watchFiles);\n\n\t\tawait generateOutputs(bundle);\n\t} catch (error) {\n\t\tbuildFailed = true;\n\t\t// do some error reporting\n\t\tconsole.error(error);\n\t}\n\tif (bundle) {\n\t\t// closes the bundle\n\t\tawait bundle.close();\n\t}\n\tprocess.exit(buildFailed ? 1 : 0);\n}\n\nasync function generateOutputs(bundle) {\n\tfor (const outputOptions of outputOptionsList) {\n\t\t// generate output specific code in-memory\n\t\t// you can call this function multiple times on the same bundle object\n\t\t// replace bundle.generate with bundle.write to directly write to disk\n\t\tconst { output } = await bundle.generate(outputOptions);\n\n\t\tfor (const chunkOrAsset of output) {\n\t\t\tif (chunkOrAsset.type === 'asset') {\n\t\t\t\t// For assets, this contains\n\t\t\t\t// {\n\t\t\t\t//   fileName: string,              // the asset file name\n\t\t\t\t//   source: string | Uint8Array    // the asset source\n\t\t\t\t//   type: 'asset'                  // signifies that this is an asset\n\t\t\t\t// }\n\t\t\t\tconsole.log('Asset', chunkOrAsset);\n\t\t\t} else {\n\t\t\t\t// For chunks, this contains\n\t\t\t\t// {\n\t\t\t\t//   code: string,                  // the generated JS code\n\t\t\t\t//   dynamicImports: string[],      // external modules imported dynamically by the chunk\n\t\t\t\t//   exports: string[],             // exported variable names\n\t\t\t\t//   facadeModuleId: string | null, // the id of a module that this chunk corresponds to\n\t\t\t\t//   fileName: string,              // the chunk file name\n\t\t\t\t//   implicitlyLoadedBefore: string[]; // entries that should only be loaded after this chunk\n\t\t\t\t//   imports: string[],             // external modules imported statically by the chunk\n\t\t\t\t//   importedBindings: {[imported: string]: string[]} // imported bindings per dependency\n\t\t\t\t//   isDynamicEntry: boolean,       // is this chunk a dynamic entry point\n\t\t\t\t//   isEntry: boolean,              // is this chunk a static entry point\n\t\t\t\t//   isImplicitEntry: boolean,      // should this chunk only be loaded after other chunks\n\t\t\t\t//   map: string | null,            // sourcemaps if present\n\t\t\t\t//   modules: {                     // information about the modules in this chunk\n\t\t\t\t//     [id: string]: {\n\t\t\t\t//       renderedExports: string[]; // exported variable names that were included\n\t\t\t\t//       removedExports: string[];  // exported variable names that were removed\n\t\t\t\t//       renderedLength: number;    // the length of the remaining code in this module\n\t\t\t\t//       originalLength: number;    // the original length of the code in this module\n\t\t\t\t//       code: string | null;       // remaining code in this module\n\t\t\t\t//     };\n\t\t\t\t//   },\n\t\t\t\t//   name: string                   // the name of this chunk as used in naming patterns\n\t\t\t\t//   preliminaryFileName: string    // the preliminary file name of this chunk with hash placeholders\n\t\t\t\t//   referencedFiles: string[]      // files referenced via import.meta.ROLLUP_FILE_URL_<id>\n\t\t\t\t//   type: 'chunk',                 // signifies that this is a chunk\n\t\t\t\t// }\n\t\t\t\tconsole.log('Chunk', chunkOrAsset.modules);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Entry Point Configuration with Glob\nDESCRIPTION: TypeScript example showing how to dynamically generate entry points using glob patterns while maintaining file structure.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n\tinput: Object.fromEntries(\n\t\tglobSync('src/**/*.js').map(file => [\n\t\t\tpath.relative(\n\t\t\t\t'src',\n\t\t\t\tfile.slice(0, file.length - path.extname(file).length)\n\t\t\t),\n\t\t\tfileURLToPath(new URL(file, import.meta.url))\n\t\t])\n\t),\n\toutput: {\n\t\tformat: 'es',\n\t\tdir: 'dist'\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Warnings in Rollup Plugins\nDESCRIPTION: Examples of using the warn method in Rollup's plugin API to generate warnings for a build. The method accepts strings or objects with a message property and optional metadata.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nthis.warn('hmm...');\n// is equivalent to\nthis.warn({\n\tmessage: 'hmm...',\n\tpluginCode: 'CODE_TO_IDENTIFY_LOG',\n\tmeta: 'Additional plugin specific information'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining WatcherOptions Interface in Typescript for Rollup\nDESCRIPTION: TypeScript interface definition for the watch configuration option. This interface specifies all possible options for Rollup's watch mode, including build delay, file filtering, and custom callbacks.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WatcherOptions {\n\tbuildDelay?: number;\n\tchokidar?: ChokidarOptions;\n\tclearScreen?: boolean;\n\texclude?: string | RegExp | (string | RegExp)[];\n\tinclude?: string | RegExp | (string | RegExp)[];\n\tskipWrite?: boolean;\n\tonInvalidate?: (id: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting a Prebuilt Chunk in Rollup Plugin\nDESCRIPTION: A Rollup plugin that demonstrates how to emit a prebuilt chunk and mark it as external, allowing it to be imported in the code.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction emitPrebuiltChunkPlugin() {\n\treturn {\n\t\tname: 'emit-prebuilt-chunk',\n\t\tresolveId(source) {\n\t\t\tif (source === './my-prebuilt-chunk.js') {\n\t\t\t\treturn {\n\t\t\t\t\tid: source,\n\t\t\t\t\texternal: true\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tbuildStart() {\n\t\t\tthis.emitFile({\n\t\t\t\ttype: 'prebuilt-chunk',\n\t\t\t\tfileName: 'my-prebuilt-chunk.js',\n\t\t\t\tcode: 'export const foo = \\\"foo\\\"',\n\t\t\t\texports: ['foo']\n\t\t\t});\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies in Rollup\nDESCRIPTION: Example showing how to configure external dependencies in Rollup using arrays, file paths, and regular expressions. Demonstrates using fileURLToPath for local file exclusion.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\t//...,\n\texternal: [\n\t\t'some-externally-required-library',\n\t\tfileURLToPath(\n\t\t\tnew URL(\n\t\t\t\t'src/some-local-file-that-should-not-be-bundled.js',\n\t\t\t\timport.meta.url\n\t\t\t)\n\t\t),\n\t\t/node_modules/\n\t]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Proxy Module Plugin with this.load\nDESCRIPTION: JavaScript implementation of a Rollup plugin that creates proxy modules for files containing a special comment. The example demonstrates using this.load and this.resolve to check module contents before deciding how to handle them.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function addProxyPlugin() {\n\treturn {\n\t\tasync resolveId(source, importer, options) {\n\t\t\tif (importer?.endsWith('?proxy')) {\n\t\t\t\t// Do not proxy ids used in proxies\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// We make sure to pass on any resolveId options to\n\t\t\t// this.resolve to get the module id\n\t\t\tconst resolution = await this.resolve(source, importer, options);\n\t\t\t// We can only pre-load existing and non-external ids\n\t\t\tif (resolution && !resolution.external) {\n\t\t\t\t// we pass on the entire resolution information\n\t\t\t\tconst moduleInfo = await this.load(resolution);\n\t\t\t\tif (moduleInfo.code.includes('/* use proxy */')) {\n\t\t\t\t\treturn `${resolution.id}?proxy`;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// As we already fully resolved the module, there is no reason\n\t\t\t// to resolve it again\n\t\t\treturn resolution;\n\t\t},\n\t\tload(id) {\n\t\t\tif (id.endsWith('?proxy')) {\n\t\t\t\tconst importee = id.slice(0, -'?proxy'.length);\n\t\t\t\t// Note that namespace reexports do not reexport default\n\t\t\t\t// exports\n\t\t\t\tlet code = `console.log('proxy for ${importee}'); export * from ${JSON.stringify(\n\t\t\t\t\timportee\n\t\t\t\t)};`;\n\t\t\t\t// We know that while resolving the proxy, importee was\n\t\t\t\t// already fully loaded and parsed, so we can rely on\n\t\t\t\t// hasDefaultExport\n\t\t\t\tif (this.getModuleInfo(importee).hasDefaultExport) {\n\t\t\t\t\tcode += `export { default } from ${JSON.stringify(importee)};`;\n\t\t\t\t}\n\t\t\t\treturn code;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Rollup Configuration with Command Line Arguments\nDESCRIPTION: A Rollup configuration file exporting a function that returns a configuration based on command line arguments. This example shows how to adapt the configuration dynamically and define custom command line options.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport defaultConfig from './rollup.default.config.js';\nimport debugConfig from './rollup.debug.config.js';\n\n/** @type {import('rollup').RollupOptionsFunction} */\nexport default commandLineArgs => {\n\tif (commandLineArgs.configDebug === true) {\n\t\treturn debugConfig;\n\t}\n\treturn defaultConfig;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Symbols in Rollup Output - JavaScript\nDESCRIPTION: This snippet illustrates how to export a variable in CommonJS format with conditional handling for symbols. The 'symbols' option determines whether the export will include a property indicating that it is a module. If 'symbols' is true, it adds 'Symbol.toStringTag' to the exports; otherwise, it simply exports the variable.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// input\nexport const foo = 42;\n\n// cjs output with symbols: false\nconst foo = 42;\n\nexports.foo = foo;\n\n// cjs output with symbols: true\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst foo = 42;\n\nexports.foo = foo;\n```\n\n----------------------------------------\n\nTITLE: Retain Import Expression Plugin Implementation in JavaScript\nDESCRIPTION: This snippet defines a Rollup plugin that ensures dynamic imports of a specific library ('esm-lib') are retained as import expressions, facilitating compatibility with CommonJS builds.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// ---cut-start---\n/** @returns {import('rollup').Plugin} */\n// ---cut-end---\nfunction retainImportExpressionPlugin() {\n\treturn {\n\t\tname: 'retain-import-expression',\n\t\tresolveDynamicImport(specifier) {\n\t\t\tif (specifier === 'esm-lib') return false;\n\t\t\treturn null;\n\t\t},\n\t\trenderDynamicImport({ targetModuleId }) {\n\t\t\tif (targetModuleId === 'esm-lib') {\n\t\t\t\treturn {\n\t\t\t\t\tleft: 'import(',\n\t\t\t\t\tright: ')'\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Named Imports with Aliasing in JavaScript ES Modules\nDESCRIPTION: Shows how to import a specific item from a source module with a custom name (alias) assigned during import.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { something as somethingElse } from './module.js';\n```\n\n----------------------------------------\n\nTITLE: Inline Named Exports in JavaScript ES Modules\nDESCRIPTION: Demonstrates how to export a value immediately upon declaration. This works with variable declarations (var, let, const) as well as class and function declarations.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// this works with `var`, `let`, `const`, `class`, and `function`\nexport const something = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Vendor Chunks with Function Syntax in Rollup\nDESCRIPTION: Uses the function form of manualChunks to create a 'vendor' chunk containing all dependencies from node_modules. Each module ID is evaluated to determine chunk placement.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfunction manualChunks(id) {\n\tif (id.includes('node_modules')) {\n\t\treturn 'vendor';\n\t}\n\n\treturn null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using rollup.watch API for Watching File Changes in JavaScript\nDESCRIPTION: Demonstrates how to use rollup.watch to create a watcher that rebuilds bundles when modules change on disk. Shows how to handle different events like START, BUNDLE_START, BUNDLE_END, END, and ERROR, and how to properly close bundles after each run.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/javascript-api/index.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst rollup = require('rollup');\n\n/** @type {import('rollup').RollupWatchOptions} */\nconst watchOptions = {\n\t/*...*/\n};\nconst watcher = rollup.watch(watchOptions);\n\nwatcher.on('event', event => {\n\t// event.code can be one of:\n\t//   START        — the watcher is (re)starting\n\t//   BUNDLE_START — building an individual bundle\n\t//                  * event.input will be the input options object if present\n\t//                  * event.output contains an array of the \"file\" or\n\t//                    \"dir\" option values of the generated outputs\n\t//   BUNDLE_END   — finished building a bundle\n\t//                  * event.input will be the input options object if present\n\t//                  * event.output contains an array of the \"file\" or\n\t//                    \"dir\" option values of the generated outputs\n\t//                  * event.duration is the build duration in milliseconds\n\t//                  * event.result contains the bundle object that can be\n\t//                    used to generate additional outputs by calling\n\t//                    bundle.generate or bundle.write. This is especially\n\t//                    important when the watch.skipWrite option is used.\n\t//                  You should call \"event.result.close()\" once you are done\n\t//                  generating outputs, or if you do not generate outputs.\n\t//                  This will allow plugins to clean up resources via the\n\t//                  \"closeBundle\" hook.\n\t//   END          — finished building all bundles\n\t//   ERROR        — encountered an error while bundling\n\t//                  * event.error contains the error that was thrown\n\t//                  * event.result is null for build errors and contains the\n\t//                    bundle object for output generation errors. As with\n\t//                    \"BUNDLE_END\", you should call \"event.result.close()\" if\n\t//                    present once you are done.\n\t// If you return a Promise from your event handler, Rollup will wait until the\n\t// Promise is resolved before continuing.\n});\n\n// This will make sure that bundles are properly closed after each run\nwatcher.on('event', ({ result }) => {\n\tif (result) {\n\t\tresult.close();\n\t}\n});\n\n// Additionally, you can hook into the following. Again, return a Promise to\n// make Rollup wait at that stage:\nwatcher.on('change', (id, { event }) => {\n\t/* a file was modified */\n});\nwatcher.on('restart', () => {\n\t/* a new run was triggered */\n});\nwatcher.on('close', () => {\n\t/* the watcher was closed, see below */\n});\n\n// to stop watching\nwatcher.close();\n```\n\n----------------------------------------\n\nTITLE: Compiling JavaScript for Browsers using Rollup\nDESCRIPTION: This command demonstrates how to compile JavaScript code with Rollup into a self-executing IIFE (Immediately Invoked Function Expression) format suitable for browser environments. It names the bundle \"myBundle\" and outputs to bundle.js.\nSOURCE: https://github.com/rollup/rollup/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# compile to a <script> containing a self-executing function\nrollup main.js --format iife --name \"myBundle\" --file bundle.js\n```\n\n----------------------------------------\n\nTITLE: Applying Log Filters with Rollup's getLogFilter Helper\nDESCRIPTION: Shows how to use the getLogFilter helper to create a filter function that can be used with a custom onLog handler. This provides similar log filtering functionality as the CLI's --filterLogs flag when using the JavaScript API.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/javascript-api/index.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.mjs\nimport { getLogFilter } from 'rollup/getLogFilter';\n\nconst logFilter = getLogFilter(['code:FOO', 'code:BAR']);\n\nexport default {\n\tinput: 'main.js',\n\toutput: { format: 'es' },\n\tonLog(level, log, handler) {\n\t\tif (logFilter(log)) {\n\t\t\thandler(level, log);\n\t\t}\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Output-Specific Plugins in Rollup\nDESCRIPTION: Demonstrates how to configure output-specific plugins in Rollup, specifically showing how to add minification to one output bundle while leaving another unminified. Uses @rollup/plugin-terser for minification.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tinput: 'main.js',\n\toutput: [\n\t\t{\n\t\t\tfile: 'bundle.js',\n\t\t\tformat: 'es'\n\t\t},\n\t\t{\n\t\t\tfile: 'bundle.min.js',\n\t\t\tformat: 'es',\n\t\t\tplugins: [terser()]\n\t\t}\n\t]\n};\n```\n\n----------------------------------------\n\nTITLE: Module Build Phase Flow\nDESCRIPTION: The build phase involves creating the module graph, parsing code into AST, and performing tree-shaking. Key steps include reading entry points, transforming code through plugins, and marking included statements for output.\nSOURCE: https://github.com/rollup/rollup/blob/master/ARCHITECTURE.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- ModuleLoader:\n  - Read entry points\n  - Create Module instance\n  - Load and transform code\n  - Parse into AST\n  - Collect dependencies\n- Sort modules by execution order\n- Mark included statements (tree-shaking)\n```\n\n----------------------------------------\n\nTITLE: Loading Rollup Config Files Programmatically in JavaScript\nDESCRIPTION: Demonstrates how to use the loadConfigFile helper to programmatically load a Rollup configuration file. Shows how to access warnings, process options, and generate outputs or watch for changes based on the loaded configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/javascript-api/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { loadConfigFile } = require('rollup/loadConfigFile');\nconst path = require('node:path');\nconst rollup = require('rollup');\n\n// load the config file next to the current script;\n// the provided config object has the same effect as passing \"--format es\"\n// on the command line and will override the format of all outputs\nloadConfigFile(path.resolve(__dirname, 'rollup.config.js'), {\n\tformat: 'es'\n}).then(async ({ options, warnings }) => {\n\t// \"warnings\" wraps the default `onwarn` handler passed by the CLI.\n\t// This prints all warnings up to this point:\n\tconsole.log(`We currently have ${warnings.count} warnings`);\n\n\t// This prints all deferred warnings\n\twarnings.flush();\n\n\t// options is an array of \"inputOptions\" objects with an additional\n\t// \"output\" property that contains an array of \"outputOptions\".\n\t// The following will generate all outputs for all inputs, and write\n\t// them to disk the same way the CLI does it:\n\tfor (const optionsObj of options) {\n\t\tconst bundle = await rollup.rollup(optionsObj);\n\t\tawait Promise.all(optionsObj.output.map(bundle.write));\n\t}\n\n\t// You can also pass this directly to \"rollup.watch\"\n\trollup.watch(options);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup with External Dependencies in JavaScript\nDESCRIPTION: Rollup configuration file demonstrating how to handle external dependencies like Lodash.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport resolve from '@rollup/plugin-node-resolve';\n\n/** @type {import('rollup').RollupOptions} */\nexport default {\n\tinput: 'src/main.js',\n\toutput: {\n\t\tfile: 'bundle.js',\n\t\tformat: 'cjs'\n\t},\n\tplugins: [\n\t\tresolve({\n\t\t\t// pass custom options to the resolve plugin\n\t\t\tmoduleDirectories: ['node_modules']\n\t\t})\n\t],\n\t// indicate which modules should be treated as external\n\texternal: ['lodash']\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Bundle Configuration in Rollup\nDESCRIPTION: A Rollup configuration file exporting an array to build multiple bundles from different inputs or with different output options. This example shows how to create separate bundles for different entry points and output formats.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js (building more than one bundle)\n\n/** @type {import('rollup').RollupOptions[]} */\nexport default [\n\t{\n\t\tinput: 'main-a.js',\n\t\toutput: {\n\t\t\tfile: 'dist/bundle-a.js',\n\t\t\tformat: 'cjs'\n\t\t}\n\t},\n\t{\n\t\tinput: 'main-b.js',\n\t\toutput: [\n\t\t\t{\n\t\t\t\tfile: 'dist/bundle-b1.js',\n\t\t\t\tformat: 'cjs'\n\t\t\t},\n\t\t\t{\n\t\t\t\tfile: 'dist/bundle-b2.js',\n\t\t\t\tformat: 'es'\n\t\t\t}\n\t\t]\n\t}\n];\n```\n\n----------------------------------------\n\nTITLE: Creating an SVG Resolver Plugin in Rollup\nDESCRIPTION: A plugin that resolves SVG file imports, emits them as assets, and returns their URLs. This demonstrates basic asset handling in Rollup plugins using emitFile and import.meta.ROLLUP_FILE_URL.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nfunction svgResolverPlugin() {\n\treturn {\n\t\tname: 'svg-resolver',\n\t\tresolveId(source, importer) {\n\t\t\tif (source.endsWith('.svg')) {\n\t\t\t\treturn path.resolve(path.dirname(importer), source);\n\t\t\t}\n\t\t},\n\t\tload(id) {\n\t\t\tif (id.endsWith('.svg')) {\n\t\t\t\tconst referenceId = this.emitFile({\n\t\t\t\t\ttype: 'asset',\n\t\t\t\t\tname: path.basename(id),\n\t\t\t\t\tsource: fs.readFileSync(id)\n\t\t\t\t});\n\t\t\t\treturn `export default import.meta.ROLLUP_FILE_URL_${referenceId};`;\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Meta-Data with this.load in Rollup Plugins\nDESCRIPTION: Demonstrates how to trigger module loading and access its meta-data using the this.load API. This allows plugins to create and modify meta-data for modules that haven't been loaded yet.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nfunction plugin() {\n\treturn {\n\t\tname: 'test',\n\t\tbuildStart() {\n\t\t\t// trigger loading a module. We could also pass an initial\n\t\t\t// \"meta\" object here, but it would be ignored if the module\n\t\t\t// was already loaded via other means\n\t\t\tthis.load({ id: 'my-id' });\n\t\t\t// the module info is now available, we do not need to await\n\t\t\t// this.load\n\t\t\tconst meta = this.getModuleInfo('my-id').meta;\n\t\t\t// we can also modify meta manually now\n\t\t\tmeta.test = { some: 'data' };\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Rollup Configuration in JavaScript\nDESCRIPTION: A simple Rollup configuration file exporting default options for input and output. This example shows how to specify the input file and output format.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('rollup').RollupOptions} */\nexport default {\n\tinput: 'src/main.js',\n\toutput: {\n\t\tfile: 'bundle.js',\n\t\tformat: 'cjs'\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Options for Rollup JavaScript API\nDESCRIPTION: Shows the structure of the outputOptions object that can be passed to bundle.generate or bundle.write methods. This includes core output options, advanced output options, danger zone options, and experimental features.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/javascript-api/index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst outputOptions = {\n\t// core output options\n\tdir,\n\tfile,\n\tformat,\n\tglobals,\n\tname,\n\tplugins,\n\n\t// advanced output options\n\tassetFileNames,\n\tbanner,\n\tchunkFileNames,\n\tcompact,\n\tdynamicImportInCjs,\n\tentryFileNames,\n\textend,\n\texternalImportAttributes,\n\tfooter,\n\tgeneratedCode,\n\thashCharacters,\n\thoistTransitiveImports,\n\timportAttributesKey,\n\tinlineDynamicImports,\n\tinterop,\n\tintro,\n\tmanualChunks,\n\tminifyInternalExports,\n\toutro,\n\tpaths,\n\tpreserveModules,\n\tpreserveModulesRoot,\n\tsourcemap,\n\tsourcemapBaseUrl,\n\tsourcemapDebugIds,\n\tsourcemapExcludeSources,\n\tsourcemapFile,\n\tsourcemapFileNames,\n\tsourcemapIgnoreList,\n\tsourcemapPathTransform,\n\tvalidate,\n\n\t// danger zone\n\tamd,\n\tesModule,\n\texports,\n\texternalLiveBindings,\n\tfreeze,\n\tindent,\n\tnoConflict,\n\treexportProtoFromExternal,\n\tsanitizeFileName,\n\tstrict,\n\tsystemNullSetters,\n\n\t// experimental\n\texperimentalMinChunkSize\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Polyfill Plugin Implementation in JavaScript\nDESCRIPTION: This snippet provides a Rollup plugin implementation that replaces dynamic imports with a custom handler, allowing for additional arguments to be passed which facilitate correct resolution of relative imports.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// ---cut-start---\n/** @returns {import('rollup').Plugin} */\n// ---cut-end---\nfunction dynamicImportPolyfillPlugin() {\n\treturn {\n\t\tname: 'dynamic-import-polyfill',\n\t\trenderDynamicImport() {\n\t\t\treturn {\n\t\t\t\tleft: 'dynamicImportPolyfill(',\n\t\t\t\tright: ', import.meta.url)'\n\t\t\t};\n\t\t}\n\t};\n}\n\n// input\nimport('./lib.js');\n\n// output\ndynamicImportPolyfill('./lib.js', import.meta.url);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup with Node Resolve Plugin in JavaScript\nDESCRIPTION: Rollup configuration file using the @rollup/plugin-node-resolve plugin to handle external modules.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport resolve from '@rollup/plugin-node-resolve';\n\n/** @type {import('rollup').RollupOptions} */\nexport default {\n\tinput: 'src/main.js',\n\toutput: {\n\t\tfile: 'bundle.js',\n\t\tformat: 'cjs'\n\t},\n\tplugins: [resolve()]\n};\n```\n\n----------------------------------------\n\nTITLE: Synchronous Transform Plugin for Rollup\nDESCRIPTION: Creates a Rollup plugin that synchronously transforms source code by prefixing it with a comment. Shows basic plugin structure with transform hook implementation.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/transform.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin() {\n\treturn {\n\t\tname: 'my-plugin',\n\t\ttransform(code, id) {\n\t\t\treturn '// prefix\\n' + code;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration for Manual Pure Functions\nDESCRIPTION: Example Rollup configuration file showing how to use the manualPureFunctions option to specify functions that should always be considered pure for tree-shaking purposes, with code examples demonstrating its effects.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nexport default {\n\ttreeshake: {\n\t\tpreset: 'smallest',\n\t\tmanualPureFunctions: ['styled', 'local']\n\t}\n\t// ...\n};\n\n// code\nimport styled from 'styled-components';\nconst local = console.log;\n\nlocal(); // removed\nstyled.div`\n\tcolor: blue;\n`; // removed\nstyled?.div(); // removed\nstyled()(); // removed\nstyled().div(); // removed\n```\n\n----------------------------------------\n\nTITLE: CSS Paint Worklet Registration Plugin for Rollup\nDESCRIPTION: A plugin that detects imports prefixed with 'register-paint-worklet:' and generates the necessary code to register CSS paint worklets, demonstrating advanced chunk emission and code generation.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst REGISTER_WORKLET = 'register-paint-worklet:';\n\nfunction registerPaintWorkletPlugin() {\n\treturn {\n\t\tname: 'register-paint-worklet',\n\t\tload(id) {\n\t\t\tif (id.startsWith(REGISTER_WORKLET)) {\n\t\t\t\treturn `CSS.paintWorklet.addModule(import.meta.ROLLUP_FILE_URL_${this.emitFile(\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'chunk',\n\t\t\t\t\t\tid: id.slice(REGISTER_WORKLET.length)\n\t\t\t\t\t}\n\t\t\t\t)});`;\n\t\t\t}\n\t\t},\n\t\tresolveId(source, importer) {\n\t\t\t// We remove the prefix, resolve everything to absolute ids and\n\t\t\t// add the prefix again. This makes sure that you can use\n\t\t\t// relative imports to define worklets\n\t\t\tif (source.startsWith(REGISTER_WORKLET)) {\n\t\t\t\treturn this.resolve(\n\t\t\t\t\tsource.slice(REGISTER_WORKLET.length),\n\t\t\t\t\timporter\n\t\t\t\t).then(resolvedId => REGISTER_WORKLET + resolvedId.id);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Dependency Preloader Plugin Implementation in JavaScript\nDESCRIPTION: This Rollup plugin implementation preloads dynamic import dependencies to reduce latency by ensuring transitive dependencies are fetched before the main module, optimizing the loading process.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// ---cut-start---\n/** @returns {import('rollup').Plugin} */\n// ---cut-end---\nfunction dynamicImportDependencyPreloader() {\n\treturn {\n\t\tname: 'dynamic-import-dependency-preloader',\n\t\trenderDynamicImport({ getTargetChunkImports }) {\n\t\t\tconst transitiveImports = getTargetChunkImports();\n\t\t\tif (transitiveImports && transitiveImports.length > 0) {\n\t\t\t\tconst preload = getTargetChunkImports()\n\t\t\t\t\t.map(\n\t\t\t\t\t\tchunk => `\\t/* preload */ import(${chunk.resolvedImportPath})`\n\t\t\t\t\t)\n\t\t\t\t\t.join(',\\n');\n\t\t\t\treturn {\n\t\t\t\t\tleft: `(\n${preload},\\n\\timport(`,\n\t\t\t\t\tright: `)\\n)`\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t};\n}\n\n// input\nimport('./lib.js');\n\n// output\n(\n\\t/* preload */ import('./dependency-1.js'),\n\\t/* preload */ import('./dependency-2.js'),\n\timport('./lib.js');\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pre-Order resolveId Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Rollup plugin with a resolveId hook that runs before other plugins. It checks if the source is 'external' and returns an object indicating it's an external module.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function resolveFirst() {\n\treturn {\n\t\tname: 'resolve-first',\n\t\tresolveId: {\n\t\t\torder: 'pre',\n\t\t\thandler(source) {\n\t\t\t\tif (source === 'external') {\n\t\t\t\t\treturn { id: source, external: true };\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Module Meta-Data in Rollup Plugins\nDESCRIPTION: Shows how plugins can annotate modules with custom meta-data that persists across builds. One plugin adds annotations during transformation, while another reads this data to identify special modules.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nfunction annotatingPlugin() {\n\treturn {\n\t\tname: 'annotating',\n\t\ttransform(code, id) {\n\t\t\tif (thisModuleIsSpecial(code, id)) {\n\t\t\t\treturn { meta: { annotating: { special: true } } };\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction readingPlugin() {\n\tlet parentApi;\n\treturn {\n\t\tname: 'reading',\n\t\tbuildEnd() {\n\t\t\tconst specialModules = Array.from(this.getModuleIds()).filter(\n\t\t\t\tid => this.getModuleInfo(id).meta.annotating?.special\n\t\t\t);\n\t\t\t// do something with this list\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for Treeshaking Options\nDESCRIPTION: TypeScript type definitions for Rollup's treeshaking configuration options, including TreeshakingPreset, TreeshakingOptions, and ModuleSideEffectsOption with their possible values.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\ntype TreeshakingPreset = 'smallest' | 'safest' | 'recommended';\n\ninterface TreeshakingOptions {\n\tannotations?: boolean;\n\tcorrectVarValueBeforeDeclaration?: boolean;\n\tmoduleSideEffects?: ModuleSideEffectsOption;\n\tpreset?: TreeshakingPreset;\n\tpropertyReadSideEffects?: boolean | 'always';\n\ttryCatchDeoptimization?: boolean;\n\tunknownGlobalSideEffects?: boolean;\n}\n\ntype ModuleSideEffectsOption =\n\t| boolean\n\t| 'no-external'\n\t| string[]\n\t| HasModuleSideEffects;\ntype HasModuleSideEffects = (id: string, external: boolean) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Filtered transform Hook in JavaScript\nDESCRIPTION: This snippet shows how to create a Rollup plugin with a transform hook that only runs for .jsx files containing '<Custom'. It demonstrates the use of the filter property to conditionally apply transformations.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function jsxAdditionalTransform() {\n\treturn {\n\t\tname: 'jsxAdditionalTransform',\n\t\ttransform: {\n\t\t\tfilter: {\n\t\t\t\tid: '*.jsx',\n\t\t\t\tcode: '<Custom'\n\t\t\t},\n\t\t\thandler(code) {\n\t\t\t\t// transform <Custom /> here\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hash Augmentation Plugin in Rollup\nDESCRIPTION: Plugin example showing how to augment the hash of a specific chunk named 'foo' with the current timestamp. This affects how Rollup generates chunk hashes during the build process.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction augmentWithDatePlugin() {\n\treturn {\n\t\tname: 'augment-with-date',\n\t\taugmentChunkHash(chunkInfo) {\n\t\t\tif (chunkInfo.name === 'foo') {\n\t\t\t\treturn Date.now().toString();\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Points with Object Notation\nDESCRIPTION: Demonstrates how to configure multiple entry points using object notation, allowing for structured output with subdirectories.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\t// ...\n\tinput: {\n\t\ta: 'src/main-a.js',\n\t\t'b/index': 'src/main-b.js'\n\t},\n\toutput: {\n\t\t// ...\n\t\tentryFileNames: 'entry-[name].js'\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: SVG Resolver with needsCodeReference Option\nDESCRIPTION: Enhanced version of the SVG resolver plugin that uses needsCodeReference to ensure assets are only included if actually referenced in the final code, improving bundle optimization.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nfunction svgResolverPlugin() {\n\treturn {\n\t\t/* ... */\n\t\tload(id) {\n\t\t\tif (id.endsWith('.svg')) {\n\t\t\t\tconst referenceId = this.emitFile({\n\t\t\t\t\ttype: 'asset',\n\t\t\t\t\tname: path.basename(id),\n\t\t\t\t\tneedsCodeReference: true,\n\t\t\t\t\tsource: fs.readFileSync(id)\n\t\t\t\t});\n\t\t\t\treturn `export default import.meta.ROLLUP_FILE_URL_${referenceId};`;\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Rollup Configuration Options\nDESCRIPTION: A detailed Rollup configuration file showcasing various available options for input, output, and plugins. This example demonstrates the structure of a complex configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\n\n// can be an array (for multiple inputs)\n/** @type {import('rollup').RollupOptions} */\nexport default {\n\t// core input options\n\texternal,\n\tinput, // conditionally required\n\tplugins,\n\n\t// advanced input options\n\tcache,\n\tlogLevel,\n\tmakeAbsoluteExternalsRelative,\n\tmaxParallelFileOps,\n\tonLog,\n\tonwarn,\n\tpreserveEntrySignatures,\n\tstrictDeprecations,\n\n\t// danger zone\n\tcontext,\n\tmoduleContext,\n\tpreserveSymlinks,\n\tshimMissingExports,\n\ttreeshake,\n\n\t// experimental\n\texperimentalCacheExpiry,\n\texperimentalLogSideEffects,\n\texperimentalMinChunkSize,\n\tperf,\n\n\t// required (can be an array, for multiple outputs)\n\toutput: {\n\t\t// core output options\n\t\tdir,\n\t\tfile,\n\t\tformat,\n\t\tglobals,\n\t\tname,\n\t\tplugins,\n\n\t\t// advanced output options\n\t\tassetFileNames,\n\t\tbanner,\n\t\tchunkFileNames,\n\t\tcompact,\n\t\tdynamicImportInCjs,\n\t\tentryFileNames,\n\t\textend,\n\t\texternalImportAttributes,\n\t\tfooter,\n\t\tgeneratedCode,\n\t\thashCharacters,\n\t\thoistTransitiveImports,\n\t\timportAttributesKey,\n\t\tinlineDynamicImports,\n\t\tinterop,\n\t\tintro,\n\t\tmanualChunks,\n\t\tminifyInternalExports,\n\t\toutro,\n\t\tpaths,\n\t\tpreserveModules,\n\t\tpreserveModulesRoot,\n\t\tsourcemap,\n\t\tsourcemapBaseUrl,\n\t\tsourcemapDebugIds,\n\t\tsourcemapExcludeSources,\n\t\tsourcemapFile,\n\t\tsourcemapFileNames,\n\t\tsourcemapIgnoreList,\n\t\tsourcemapPathTransform,\n\t\tvalidate,\n\n\t\t// danger zone\n\t\tamd,\n\t\tesModule,\n\t\texports,\n\t\texternalLiveBindings,\n\t\tfreeze,\n\t\tindent,\n\t\tnoConflict,\n\t\tsanitizeFileName,\n\t\tstrict,\n\t\tsystemNullSetters,\n\n\t\t// experimental\n\t\texperimentalMinChunkSize\n\t},\n\n\twatch: {\n\t\tbuildDelay,\n\t\tchokidar,\n\t\tclearScreen,\n\t\texclude,\n\t\tinclude,\n\t\tskipWrite\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining renderDynamicImportHook TypeScript Interface\nDESCRIPTION: This snippet defines the TypeScript type for a render dynamic import hook which allows customization of the rendering of dynamic import statements in Rollup. It accepts options related to module resolution and chunk handling.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype renderDynamicImportHook = (options: {\n\tcustomResolution: string | null;\n\tformat: string;\n\tmoduleId: string;\n\ttargetModuleId: string | null;\n\tchunk: PreRenderedChunkWithFileName;\n\ttargetChunk: PreRenderedChunkWithFileName;\n\tgetTargetChunkImports: () => DynamicImportTargetChunk[] | null;\n}) => { left: string; right: string } | null;\n\ntype PreRenderedChunkWithFileName = PreRenderedChunk & { fileName: string };\n\ntype DynamicImportTargetChunk =\n\t| ImportedInternalChunk\n\t| ImportedExternalChunk;\n\ninterface ImportedInternalChunk {\n\ttype: 'internal';\n\tfileName: string;\n\tresolvedImportPath: string;\n\tchunk: PreRenderedChunk;\n}\n\ninterface ImportedExternalChunk {\n\ttype: 'external';\n\tfileName: string;\n\tresolvedImportPath: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Dependencies as External in resolveId\nDESCRIPTION: This resolveId implementation demonstrates how to mark specific dependencies as external by returning an object with the id and external properties. This prevents Rollup from bundling the marked dependencies.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/resolveId.txt#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// marking external dependencies\nconst externalPlugin = {\n  name: 'external-plugin',\n  resolveId(source) {\n    if (source.startsWith('external-')) {\n      // Marks this import as external\n      return { id: source, external: true };\n    }\n    return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Module Side Effects in JavaScript Bundling\nDESCRIPTION: Shows how treeshake.moduleSideEffects affects the handling of unused imports and side effects in external and internal modules.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// input file\nimport { unused } from 'external-a';\nimport 'external-b';\nconsole.log(42);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// output with treeshake.moduleSideEffects === true\nimport 'external-a';\nimport 'external-b';\nconsole.log(42);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// output with treeshake.moduleSideEffects === false\nconsole.log(42);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Rollup Configuration\nDESCRIPTION: Examples of asynchronous Rollup configuration files using Promises. These configurations demonstrate how to fetch configuration data from remote services or multiple sources.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport fetch from 'node-fetch';\n\nexport default fetch('/some-remote-service-which-returns-actual-config');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js (Promise resolving an array)\nexport default Promise.all([fetch('get-config-1'), fetch('get-config-2')]);\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Preset with Custom Options in Rollup\nDESCRIPTION: Example of using a JSX preset in Rollup configuration while overriding specific options like importSource and factory. This shows how to customize a preset for specific framework needs.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tjsx: {\n\t\tpreset: 'react',\n\t\timportSource: 'preact',\n\t\tfactory: 'h'\n\t}\n\t// ...\n};\n```\n\n----------------------------------------\n\nTITLE: Polyfill Injection Plugin Implementation\nDESCRIPTION: Complete example of a Rollup plugin that injects polyfills into entry points using resolveId and load hooks.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction injectPolyfillPlugin() {\n\treturn {\n\t\tname: 'inject-polyfill',\n\t\tasync resolveId(source, importer, options) {\n\t\t\tif (source === POLYFILL_ID) {\n\t\t\t\treturn { id: POLYFILL_ID, moduleSideEffects: true };\n\t\t\t}\n\t\t\tif (options.isEntry) {\n\t\t\t\tconst resolution = await this.resolve(source, importer, options);\n\t\t\t\tif (!resolution || resolution.external) return resolution;\n\t\t\t\tconst moduleInfo = await this.load(resolution);\n\t\t\t\tmoduleInfo.moduleSideEffects = true;\n\t\t\t\treturn `${resolution.id}${PROXY_SUFFIX}`;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tload(id) {\n\t\t\tif (id === POLYFILL_ID) {\n\t\t\t\treturn \"console.log('polyfill');\";\n\t\t\t}\n\t\t\tif (id.endsWith(PROXY_SUFFIX)) {\n\t\t\t\tconst entryId = id.slice(0, -PROXY_SUFFIX.length);\n\t\t\t\tconst { hasDefaultExport } = this.getModuleInfo(entryId);\n\t\t\t\tlet code =\n\t\t\t\t\t`import ${JSON.stringify(POLYFILL_ID)};` +\n\t\t\t\t\t`export * from ${JSON.stringify(entryId)};`;\n\t\t\t\tif (hasDefaultExport) {\n\t\t\t\t\tcode += `export { default } from ${JSON.stringify(entryId)};`;\n\t\t\t\t}\n\t\t\t\treturn code;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Importing with ES Modules for Tree Shaking\nDESCRIPTION: This JavaScript example shows how to use ES module imports to select only the specific function needed (ajax) rather than importing the entire utils object. This selective importing enables Rollup's tree shaking functionality.\nSOURCE: https://github.com/rollup/rollup/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// import the ajax function with an ES import statement\nimport { ajax } from 'node:utils';\n\nvar query = 'Rollup';\n// call the ajax function\najax('https://api.example.com?search=' + query).then(handleResponse);\n```\n\n----------------------------------------\n\nTITLE: Advanced Manual Chunking for Language Files in Rollup\nDESCRIPTION: A sophisticated manual chunking function that combines language files based on their usage. It merges language files used by the same entry point and creates shared chunks for files used by multiple entries.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nfunction manualChunks(id, { getModuleInfo }) {\n\tconst match = /.*\\.strings\\.(\\w+)\\.js/.exec(id);\n\tif (match) {\n\t\tconst language = match[1]; // e.g. \"en\"\n\t\tconst dependentEntryPoints = [];\n\n\t\t// we use a Set here so we handle each module at most once. This\n\t\t// prevents infinite loops in case of circular dependencies\n\t\tconst idsToHandle = new Set(getModuleInfo(id).dynamicImporters);\n\n\t\tfor (const moduleId of idsToHandle) {\n\t\t\tconst { isEntry, dynamicImporters, importers } =\n\t\t\t\tgetModuleInfo(moduleId);\n\t\t\tif (isEntry || dynamicImporters.length > 0)\n\t\t\t\tdependentEntryPoints.push(moduleId);\n\n\t\t\t// The Set iterator is intelligent enough to iterate over\n\t\t\t// elements that are added during iteration\n\t\t\tfor (const importerId of importers) idsToHandle.add(importerId);\n\t\t}\n\n\t\t// If there is a unique entry, we put it into a chunk based on the\n\t\t// entry name\n\t\tif (dependentEntryPoints.length === 1) {\n\t\t\treturn `${\n\t\t\t\tdependentEntryPoints[0].split('/').slice(-1)[0].split('.')[0]\n\t\t\t}.strings.${language}`;\n\t\t}\n\t\t// For multiple entries, we put it into a \"shared\" chunk\n\t\tif (dependentEntryPoints.length > 1) {\n\t\t\treturn `shared.strings.${language}`;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransformPluginContext Interface for Rollup Plugin API\nDESCRIPTION: Defines the TransformPluginContext interface which extends PluginContext with additional transform-related methods. This represents the context provided to plugins during the transform hook.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/assets/transform-9DaiUiOT.txt#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TransformPluginContext extends PluginContext {\n\tgetModuleInfo(moduleId: string): ModuleInfo;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmittedChunk, EmittedPrebuiltChunk, and EmittedAsset Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces defining the structure of objects that can be passed to this.emitFile for emitting chunks, prebuilt chunks, and assets.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EmittedChunk {\n\ttype: 'chunk';\n\tid: string;\n\tname?: string;\n\tfileName?: string;\n\timplicitlyLoadedAfterOneOf?: string[];\n\timporter?: string;\n\tpreserveSignature?: 'strict' | 'allow-extension' | 'exports-only' | false;\n}\n\ninterface EmittedPrebuiltChunk {\n\ttype: 'prebuilt-chunk';\n\tfileName: string;\n\tcode: string;\n\texports?: string[];\n\tmap?: SourceMap;\n}\n\ninterface EmittedAsset {\n\ttype: 'asset';\n\tname?: string;\n\tneedsCodeReference?: boolean;\n\toriginalFileName?: string;\n\tfileName?: string;\n\tsource?: string | Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Chunks with Object Syntax in Rollup\nDESCRIPTION: Creates custom shared common chunks by specifying module names. This example puts all lodash modules into a manual chunk even when using deep imports.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n({\n\tmanualChunks: {\n\t\tlodash: ['lodash']\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring IIFE Bundle with Global Name in Rollup\nDESCRIPTION: Example configuration for creating an IIFE bundle with a specific global variable name. This sets up a self-executing function that exports values to a global variable.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\t// ...\n\toutput: {\n\t\tfile: 'bundle.js',\n\t\tformat: 'iife',\n\t\tname: 'MyBundle'\n\t}\n};\n\n// var MyBundle = (function () {...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hoisted Transitive Imports in Code-Splitting\nDESCRIPTION: This example shows how Rollup hoists imports of dependencies from entry chunks to optimize loading and parsing. The snippet compares input code with the resulting output to demonstrate how external dependencies are handled during bundling.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/faqs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// input\n// main.js\nimport value from './other-entry.js';\nconsole.log(value);\n\n// other-entry.js\nimport externalValue from 'external';\nexport default 2 * externalValue;\n\n// output\n// main.js\nimport 'external'; // this import has been hoisted from other-entry.js\nimport value from './other-entry.js';\nconsole.log(value);\n\n// other-entry.js\nimport externalValue from 'external';\nvar value = 2 * externalValue;\nexport default value;\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Options for Rollup JavaScript API\nDESCRIPTION: Shows the structure of the inputOptions object that can be passed to the rollup.rollup function. This includes core input options, advanced input options, danger zone options, and experimental features.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/javascript-api/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst inputOptions = {\n\t// core input options\n\texternal,\n\tinput, // conditionally required\n\tplugins,\n\n\t// advanced input options\n\tcache,\n\tlogLevel,\n\tmakeAbsoluteExternalsRelative,\n\tmaxParallelFileOps,\n\tonLog,\n\tonwarn,\n\tpreserveEntrySignatures,\n\tstrictDeprecations,\n\n\t// danger zone\n\tcontext,\n\tmoduleContext,\n\tpreserveSymlinks,\n\tshimMissingExports,\n\ttreeshake,\n\n\t// experimental\n\texperimentalCacheExpiry,\n\texperimentalLogSideEffects,\n\tperf\n};\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration in TypeScript\nDESCRIPTION: An example of a Rollup configuration file written in TypeScript, demonstrating how to import and use the RollupOptions type directly. This snippet shows the TypeScript-specific syntax for configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RollupOptions } from 'rollup';\n\nconst config: RollupOptions = {\n\t/* your config */\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining the ResolveDynamicImportHook Type Interface in TypeScript\nDESCRIPTION: Type definition for the resolveDynamicImport hook that handles dynamic imports. The hook receives a specifier (string or AST node), the importing file path, and import attributes, returning a ResolveIdResult that determines how the import should be handled.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ResolveDynamicImportHook = (\n\tspecifier: string | AstNode,\n\timporter: string,\n\toptions: { attributes: Record<string, string> }\n) => ResolveIdResult;\n```\n\n----------------------------------------\n\nTITLE: Generating Bundle with Entrypoints in Rollup.js\nDESCRIPTION: A test function that creates a bundle with multiple entry points and verifies the hash file associations between them. It ensures that hash files are generated correctly and can be used to verify relationships between entry points.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/assets/generateBundle-BgLkrkio.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('sets hash references in virtual modules', async t => {\n\tconst bundle = await rollup.rollup({\n\t\tinput: ['entry1', 'entry2'],\n\t\tplugins: [\n\t\t\t{\n\t\t\t\tname: 'test-plugin',\n\t\t\t\tresolveId(id) {\n\t\t\t\t\treturn id;\n\t\t\t\t},\n\t\t\t\tload(id) {\n\t\t\t\t\tswitch (id) {\n\t\t\t\t\t\tcase 'entry1':\n\t\t\t\t\t\t\treturn `console.log('entry1'); import('dep');`;\n\t\t\t\t\t\tcase 'entry2':\n\t\t\t\t\t\t\treturn `console.log('entry2');`;\n\t\t\t\t\t\tcase 'dep':\n\t\t\t\t\t\t\treturn `console.log('dep');`;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t});\n\tconst { output } = await bundle.generate({\n\t\tdir: 'dist',\n\t\tentryFileNames: '[name]-[hash].js',\n\t\tchunkFileNames: '[name]-[hash].js',\n\t\tformat: 'es'\n\t});\n\tconst hashes = {};\n\tfor (const file of output) {\n\t\tif (file.fileName.startsWith('entry')) {\n\t\t\tconst match = /^entry(\\d)-([a-z0-9]+)\\.js$/.exec(file.fileName);\n\t\t\tt.truthy(match, `Invalid entry file name ${file.fileName}`);\n\t\t\thashes[`entry${match[1]}`] = match[2];\n\t\t}\n\t}\n\tconst depOut = output.find(file => /^dep-[a-z0-9]+\\.js$/.test(file.fileName));\n\tt.is(\n\t\tdepOut.code.indexOf(`import.meta.ROLLUP_FILE_URL_${hashes.entry1}`),\n\t\t-1,\n\t\t'URL ref to dependent entry should not be included'\n\t);\n});\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation Example\nDESCRIPTION: Demonstrates how JSX code is transformed in classic mode using Preact's h function. Shows both the input JSX and the resulting transformed output.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// input\nconsole.log(<div>hello</div>);\n\n// output\nimport { h } from 'preact';\nconsole.log(/*#__PURE__*/ h('div', null, 'hello'));\n```\n\n----------------------------------------\n\nTITLE: Defining ShouldTransformCachedModuleHook in TypeScript for Rollup\nDESCRIPTION: TypeScript type definition for the shouldTransformCachedModule hook in Rollup. This hook is used to determine if a cached module should be transformed again, providing options like AST, code, ID, and metadata.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype ShouldTransformCachedModuleHook = (options: {\n\tast: AstNode;\n\tcode: string;\n\tid: string;\n\tmeta: { [plugin: string]: any };\n\tmoduleSideEffects: boolean | 'no-treeshake';\n\tsyntheticNamedExports: boolean | string;\n}) => boolean | NullValue;\n```\n\n----------------------------------------\n\nTITLE: Configuring Globals for External Imports in Rollup\nDESCRIPTION: Example configuration that specifies jQuery as an external dependency and maps it to the $ global variable. Shows how to set up external imports for IIFE or UMD bundles.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\t// ...\n\texternal: ['jquery'],\n\toutput: {\n\t\tformat: 'iife',\n\t\tname: 'MyBundle',\n\t\tglobals: {\n\t\t\tjquery: '$'\n\t\t}\n\t}\n};\n\n/*\nvar MyBundle = (function ($) {\n  // code goes here\n}($));\n*/\n```\n\n----------------------------------------\n\nTITLE: Preserving Existing Sourcemaps in Transformations\nDESCRIPTION: Code example showing how to preserve existing sourcemaps when your transformation does not move code positions, by returning null for the map property.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n\tcode: transformedCode,\n\tmap: null\n};\n```\n\n----------------------------------------\n\nTITLE: Resolving Paths in Native Node ES Modules for Rollup\nDESCRIPTION: An example of how to resolve relative paths to absolute paths in a Rollup configuration file using native Node ES modules. This snippet demonstrates the recommended approach for generating absolute paths.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport { fileURLToPath } from 'node:url';\n\nexport default {\n\t/* ..., */\n\t// generates an absolute path for <currentdir>/src/some-file.js\n\texternal: [fileURLToPath(new URL('src/some-file.js', import.meta.url))]\n};\n```\n\n----------------------------------------\n\nTITLE: ES6 Module Import Example\nDESCRIPTION: Example showing how ES6 modules allow importing specific functions, enabling tree-shaking optimization.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/introduction/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// import the ajax function with an ES6 import statement\nimport { ajax } from './utils';\nconst query = 'Rollup';\n// call the ajax function\najax(`https://api.example.com?search=${query}`).then(handleResponse);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import in JavaScript ES Modules\nDESCRIPTION: Shows how to use the dynamic import API to load modules on-the-fly. This is useful for code-splitting applications and loading modules conditionally.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport('./modules.js').then(({ default: DefaultExport, NamedExport }) => {\n\t// do something with modules.\n});\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration with Custom Plugins\nDESCRIPTION: A complete Rollup configuration file showing how to include and organize multiple custom plugins. This example combines the warning suppression approach with imported custom plugins.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/intro.txt#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport injectDependencies from './plugins/rollup-plugin-inject-dependencies';\nimport debugTransform from './plugins/rollup-plugin-debug-transform';\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    file: 'dist/bundle.js',\n    format: 'esm'\n  },\n  plugins: [\n    injectDependencies(),\n    debugTransform()\n  ],\n  onwarn (warning, warn) {\n    // skip certain warnings\n    if (warning.code === 'CIRCULAR_DEPENDENCY') return;\n\n    // console.warn everything else\n    warn(warning);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Default Import in JavaScript ES Modules\nDESCRIPTION: Shows how to import the default export of a source module. This is commonly used when a module only exports one main functionality.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport something from './module.js';\n```\n\n----------------------------------------\n\nTITLE: Synthetic Named Exports Module Example\nDESCRIPTION: Example of a module using synthetic named exports, which provides a fallback mechanism for missing exports by designating a specific export to serve as a container for additional properties.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = 'explicit';\nexport const __synthetic = {\n\tfoo: 'foo',\n\tbar: 'bar'\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Loader Function for Rollup in JavaScript\nDESCRIPTION: This code defines a custom loader function for Rollup. It handles resolving file paths, reading file contents, and applying transformations based on file extensions. The loader supports various file types including JavaScript, JSON, and CSS.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/load.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { readFileSync } from 'fs';\nimport { dirname, resolve } from 'path';\n\nexport default function load(id) {\n\tif (id === 'entry') {\n\t\tid = resolve(__dirname, 'main.js');\n\t}\n\n\tif (id.endsWith('.json')) {\n\t\treturn readFileSync(id, 'utf-8');\n\t}\n\n\tif (id.endsWith('.js')) {\n\t\treturn readFileSync(id, 'utf-8');\n\t}\n\n\tif (id.endsWith('.css')) {\n\t\tconst css = readFileSync(id, 'utf-8');\n\t\treturn `export default ${JSON.stringify(css)}`;\n\t}\n\n\treturn null;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating preserveEntrySignatures in Rollup (JavaScript)\nDESCRIPTION: This snippet shows the input and output for different preserveEntrySignatures settings in Rollup. It demonstrates how the option affects the structure and exports of the generated bundles.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nimport { shared } from './lib.js';\nexport const value = `value: ${shared}`;\nimport('./dynamic.js');\n\n// lib.js\nexport const shared = 'shared';\n\n// dynamic.js\nimport { shared } from './lib.js';\nconsole.log(shared);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Output for preserveEntrySignatures: \"strict\"\n\n// main.js\nexport { v as value } from './main-50a71bb6.js';\n\n// main-50a71bb6.js\nconst shared = 'shared';\n\nconst value = `value: ${shared}`;\nimport('./dynamic-cd23645f.js');\n\nexport { shared as s, value as v };\n\n// dynamic-cd23645f.js\nimport { s as shared } from './main-50a71bb6.js';\n\nconsole.log(shared);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Output for preserveEntrySignatures: \"allow-extension\"\n\n// main.js\nconst shared = 'shared';\n\nconst value = `value: ${shared}`;\nimport('./dynamic-298476ec.js');\n\nexport { shared as s, value };\n\n// dynamic-298476ec.js\nimport { s as shared } from './main.js';\n\nconsole.log(shared);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Output for preserveEntrySignatures: false\n\n// main.js\nimport('./dynamic-39821cef.js');\n\n// dynamic-39821cef.js\nconst shared = 'shared';\n\nconsole.log(shared);\n```\n\n----------------------------------------\n\nTITLE: Namespace Imports in JavaScript ES Modules\nDESCRIPTION: Demonstrates how to import everything from a source module as an object which exposes all the source module's named exports as properties and methods.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as module from './module.js';\n```\n\n----------------------------------------\n\nTITLE: Adding Intro Code in Rollup Output - JavaScript\nDESCRIPTION: This snippet illustrates how to prepend custom introductory code to a Rollup bundle output. By specifying an intro text, this can be set to run before any other code within the output format. The example showcases the definition of an intro constant for environment configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// ---cut-start---\n/** @type {import('rollup').RollupOptions} */\n// ---cut-end---\nexport default {\n\t//..., \n\toutput: {\n\t\t//..., \n\t\tintro: 'const ENVIRONMENT = \"production\";'\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration with JSDoc Type Hints\nDESCRIPTION: Examples of using JSDoc type hints and the defineConfig helper for better IDE Intellisense in Rollup configuration files. These snippets show how to leverage TypeScript typings in JavaScript configurations.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\n/**\n * @type {import('rollup').RollupOptions}\n */\nconst config = {\n\t/* your config */\n};\nexport default config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport { defineConfig } from 'rollup';\n\nexport default defineConfig({\n\t/* your config */\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Rollup Plugin with File Transform Hook\nDESCRIPTION: A plugin example that implements the transform hook to modify file content during the build process. The transform hook receives the code as a string and the id of the file, allowing for custom transformations.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/intro.txt#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function jsonLoader() {\n  return {\n    name: 'json-loader',\n    transform(code, id) {\n      // Filter for JSON files only\n      if (!id.endsWith('.json')) return null;\n\n      // Transform JSON to a ES module\n      return `export default ${code}`;\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Rollup's Parser Outside of a Build with parseAst\nDESCRIPTION: Demonstrates how to use Rollup's parser outside the context of a build via the parseAst function. This allows parsing arbitrary code into an AST with the same functionality available to plugins via this.parse.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/javascript-api/index.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parseAst } from 'rollup/parseAst';\nimport assert from 'node:assert';\n\nassert.deepEqual(\n\tparseAst('return 42;', { allowReturnOutsideFunction: true }),\n\t{\n\t\ttype: 'Program',\n\t\tstart: 0,\n\t\tend: 10,\n\t\tbody: [\n\t\t\t{\n\t\t\t\ttype: 'ReturnStatement',\n\t\t\t\tstart: 0,\n\t\t\t\tend: 10,\n\t\t\t\targument: {\n\t\t\t\t\ttype: 'Literal',\n\t\t\t\t\tstart: 7,\n\t\t\t\t\tend: 9,\n\t\t\t\t\traw: '42',\n\t\t\t\t\tvalue: 42\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\tsourceType: 'module'\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Generate Phase Flow\nDESCRIPTION: The generate phase handles chunk assignment, export determination, and final rendering of chunks with proper variable deconflicting and format-specific wrappers.\nSOURCE: https://github.com/rollup/rollup/blob/master/ARCHITECTURE.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n- Assign modules to chunks\n- Determine chunk exports\n- Render chunks:\n  - Resolve dynamic imports\n  - Deconflict variables\n  - Render modules\n  - Add format wrappers\n- Transform via plugins\n- Calculate chunk hashes\n```\n\n----------------------------------------\n\nTITLE: Configuring Preact JSX in Rollup\nDESCRIPTION: Example configuration for JSX with Preact in Rollup. This shows how to set up the classic JSX transformation mode with Preact's factory and fragment components.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n({\n\tmode: 'classic',\n\tfactory: 'h',\n\tfragment: 'Fragment',\n\timportSource: 'preact'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring sourcemapIgnoreList in Rollup\nDESCRIPTION: Example configuration for sourcemapIgnoreList option in Rollup. This option allows specifying which source files to ignore-list in the sourcemap.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tinput: 'src/main',\n\toutput: [\n\t\t{\n\t\t\tfile: 'bundle.js',\n\t\t\tsourcemapIgnoreList: (relativeSourcePath, sourcemapPath) => {\n\t\t\t\t// will ignore-list all files with node_modules in their paths\n\t\t\t\treturn relativeSourcePath.includes('node_modules');\n\t\t\t},\n\t\t\tformat: 'es',\n\t\t\tsourcemap: true\n\t\t}\n\t]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring External Module Paths in Rollup\nDESCRIPTION: Maps external module IDs to specific paths, allowing dependencies to be loaded from external sources like CDNs. This example configures an AMD build to load d3 from a CDN URL.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// app.js\nimport { selectAll } from 'd3';\nselectAll('p').style('color', 'purple');\n// ...\n\n// rollup.config.js\nexport default {\n\tinput: 'app.js',\n\texternal: ['d3'],\n\toutput: {\n\t\tfile: 'bundle.js',\n\t\tformat: 'amd',\n\t\tpaths: {\n\t\t\td3: 'https://d3js.org/d3.v4.min'\n\t\t}\n\t}\n};\n\n// bundle.js\ndefine(['https://d3js.org/d3.v4.min'], function (d3) {\n\td3.selectAll('p').style('color', 'purple');\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Generating HTML with Optimized Chunks using Rollup Plugin\nDESCRIPTION: A Rollup plugin that demonstrates how to use this.emitFile to create chunks with specific loading order, and generate an HTML file referencing these chunks.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfunction generateHtmlPlugin() {\n\tlet ref1;\n\tlet ref2;\n\tlet ref3;\n\treturn {\n\t\tname: 'generate-html',\n\t\tbuildStart() {\n\t\t\tref1 = this.emitFile({\n\t\t\t\ttype: 'chunk',\n\t\t\t\tid: 'src/entry1'\n\t\t\t});\n\t\t\tref2 = this.emitFile({\n\t\t\t\ttype: 'chunk',\n\t\t\t\tid: 'src/entry2',\n\t\t\t\timplicitlyLoadedAfterOneOf: ['src/entry1']\n\t\t\t});\n\t\t\tref3 = this.emitFile({\n\t\t\t\ttype: 'chunk',\n\t\t\t\tid: 'src/entry3',\n\t\t\t\timplicitlyLoadedAfterOneOf: ['src/entry2']\n\t\t\t});\n\t\t},\n\t\tgenerateBundle() {\n\t\t\tthis.emitFile({\n\t\t\t\ttype: 'asset',\n\t\t\t\tfileName: 'index.html',\n\t\t\t\tsource: `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset=\\\"UTF-8\\\">\n          <title>Title</title>\n         </head>\n        <body>\n          <script src=\\\"${this.getFileName(ref1)}\\\" type=\\\"module\\\"></script>\n          <script src=\\\"${this.getFileName(ref2)}\\\" type=\\\"module\\\"></script>\n          <script src=\\\"${this.getFileName(ref3)}\\\" type=\\\"module\\\"></script>\n        </body>\n        </html>`\n\t\t\t});\n\t\t}\n\t};\n}\n\nexport default {\n\tinput: [],\n\tpreserveEntrySignatures: false,\n\tplugins: [generateHtmlPlugin()],\n\toutput: {\n\t\tformat: 'es',\n\t\tdir: 'dist'\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Loading Function for Rollup Plugin in JavaScript\nDESCRIPTION: This function handles the loading of modules in a Rollup plugin context. It manages different module types, resolves their content, and handles special cases like external modules and empty modules.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/load-B_kSChOq.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function load(id, { attributes, modules, options, pluginDriver }) {\n\tconst { meta, syntheticNamedExports } = attributes;\n\n\t// TODO ideally, we'd prevent this by having this hook run with the same\n\t// loader configuration as the build - modular config\n\tif (id.startsWith('\\0')) {\n\t\tif (modules[id]) {\n\t\t\treturn modules[id];\n\t\t}\n\t\t// if this is a module that we can provide a default for\n\t\tif (isSnippet(id)) {\n\t\t\treturn {\n\t\t\t\tast: null,\n\t\t\t\tcode: null,\n\t\t\t\tcustom: null,\n\t\t\t\tisExternal: true,\n\t\t\t\tisResolved: true,\n\t\t\t\tmeta,\n\t\t\t\tmoduleId: id,\n\t\t\t\tsourceMapChain: [],\n\t\t\t\tsyntheticNamedExports\n\t\t\t};\n\t\t}\n\t}\n\n\tconst loadResponse = await pluginDriver.hookFirst('load', [id]);\n\tif (!loadResponse) {\n\t\treturn null;\n\t}\n\n\tlet code = null;\n\tlet ast = null;\n\tlet customTransformDependencies = [];\n\tlet moduleSideEffects = null;\n\tlet syntheticNamedExports2 = null;\n\tlet meta2 = null;\n\n\tif (typeof loadResponse === 'string') {\n\t\tcode = loadResponse;\n\t} else if (loadResponse.code != null) {\n\t\t({\n\t\t\tcode,\n\t\t\tast,\n\t\t\tcustomTransformDependencies = customTransformDependencies,\n\t\t\tmoduleSideEffects = moduleSideEffects,\n\t\t\tsyntheticNamedExports: syntheticNamedExports2 = syntheticNamedExports2,\n\t\t\tmeta: meta2 = meta2\n\t\t} = loadResponse);\n\t} else {\n\t\treturn loadResponse;\n\t}\n\n\treturn {\n\t\tast,\n\t\tcode,\n\t\tcustom: customTransformDependencies.length > 0 ? { 'rollup-plugin-dynamic-import-vars': { customTransformDependencies } } : null,\n\t\tisExternal: false,\n\t\tisResolved: true,\n\t\tmeta: { ...meta, ...meta2 },\n\t\tmoduleId: id,\n\t\tmoduleSideEffects,\n\t\tsourceMapChain: [],\n\t\tsyntheticNamedExports: syntheticNamedExports2 ?? syntheticNamedExports\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Rollup with Gulp using Promises in JavaScript\nDESCRIPTION: Example of integrating Rollup with Gulp using Promise-based syntax.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst gulp = require('gulp');\nconst rollup = require('rollup');\nconst rollupTypescript = require('@rollup/plugin-typescript');\n\ngulp.task('build', () => {\n\treturn rollup\n\t\t.rollup({\n\t\t\tinput: './src/main.ts',\n\t\t\tplugins: [rollupTypescript()]\n\t\t})\n\t\t.then(bundle => {\n\t\t\treturn bundle.write({\n\t\t\t\tfile: './dist/library.js',\n\t\t\t\tformat: 'umd',\n\t\t\t\tname: 'library',\n\t\t\t\tsourcemap: true\n\t\t\t});\n\t\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for JavaScript Module Bundling\nDESCRIPTION: This configuration sets up Rollup to bundle JavaScript modules. It specifies input and output options, includes various plugins for optimization and compatibility, and defines external dependencies.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/intro-1PpQv4h6.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync } from 'fs';\nimport path from 'path';\nimport url from 'url';\nimport resolvePlugin from '@rollup/plugin-node-resolve';\nimport commonjsPlugin from '@rollup/plugin-commonjs';\nimport jsonPlugin from '@rollup/plugin-json';\nimport terserPlugin from '@rollup/plugin-terser';\nimport typescriptPlugin from '@rollup/plugin-typescript';\nimport { babel } from '@rollup/plugin-babel';\nimport license from 'rollup-plugin-license';\nimport replace from '@rollup/plugin-replace';\n\nconst commitHash = readFileSync('.commithash', 'utf-8').trim();\nconst packageJson = JSON.parse(readFileSync(new URL('./package.json', import.meta.url)));\n\nconst { createConfig } = (await import('./scripts/config.js')).default;\n\nconst onwarn = warning => {\n\t// eslint-disable-next-line no-console\n\tconsole.error(\n\t\t'Building Rollup produced warnings that need to be resolved. ' +\n\t\t\t'Please keep in mind that the browser build may never have external dependencies!'\n\t);\n\tthrow new Error(warning.message);\n};\n\nconst moduleAliases = {\n\tresolve: ['.js', '.ts'],\n\tcustomResolver: resolvePlugin({ extensions: ['.js', '.ts'] })\n};\n\nconst treeshake = {\n\tannotations: true,\n\tpropertyReadSideEffects: false,\n\ttryCatchDeoptimization: false\n};\n\nexport default function () {\n\treturn [\n\t\tcreateConfig({\n\t\t\toutput: {\n\t\t\t\tfile: 'dist/rollup.js',\n\t\t\t\tformat: 'cjs',\n\t\t\t\texports: 'auto'\n\t\t\t},\n\t\t\tplugins: [\n\t\t\t\treplace({\n\t\t\t\t\tvalues: {\n\t\t\t\t\t\t'process.env.ROLLUP_VERSION': JSON.stringify(packageJson.version),\n\t\t\t\t\t\t'process.env.ROLLUP_COMMIT_HASH': JSON.stringify(commitHash)\n\t\t\t\t\t},\n\t\t\t\t\tpreventAssignment: true\n\t\t\t\t}),\n\t\t\t\tjsonPlugin(),\n\t\t\t\tresolvePlugin(moduleAliases),\n\t\t\t\ttypescriptPlugin({\n\t\t\t\t\tinclude: ['src/**/*.ts'],\n\t\t\t\t\ttypescript: () => require('typescript')\n\t\t\t\t}),\n\t\t\t\tcommonjsPlugin({\n\t\t\t\t\tinclude: 'node_modules/**'\n\t\t\t\t}),\n\t\t\t\tlicense({\n\t\t\t\t\tbanner: {\n\t\t\t\t\t\tcontent: `/*\n\t\t\t\t\t\t\tRollup.js v<%= pkg.version %>\n\t\t\t\t\t\t\t<%= pkg.homepage %>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCopyright (c) 2017-<%= moment().format('YYYY') %> <%= pkg.author %>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tReleased under the <%= pkg.license %> License.\n\t\t\t\t\t*/`,\n\t\t\t\t\t\tincludePrivate: true\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t],\n\t\t\tonwarn,\n\t\t\ttreeshake\n\t\t}),\n\t\tcreateConfig({\n\t\t\toutput: {\n\t\t\t\tfile: 'dist/rollup.browser.js',\n\t\t\t\tformat: 'umd',\n\t\t\t\tname: 'rollup',\n\t\t\t\textend: true\n\t\t\t},\n\t\t\tplugins: [\n\t\t\t\treplace({\n\t\t\t\t\tvalues: {\n\t\t\t\t\t\t'process.env.ROLLUP_VERSION': JSON.stringify(packageJson.version),\n\t\t\t\t\t\t'process.env.ROLLUP_COMMIT_HASH': JSON.stringify(commitHash)\n\t\t\t\t\t},\n\t\t\t\t\tpreventAssignment: true\n\t\t\t\t}),\n\t\t\t\tjsonPlugin(),\n\t\t\t\tresolvePlugin(moduleAliases),\n\t\t\t\ttypescriptPlugin({\n\t\t\t\t\tinclude: ['src/**/*.ts'],\n\t\t\t\t\ttypescript: () => require('typescript')\n\t\t\t\t}),\n\t\t\t\tcommonjsPlugin({\n\t\t\t\t\tinclude: 'node_modules/**'\n\t\t\t\t}),\n\t\t\t\tbabel({\n\t\t\t\t\tbabelHelpers: 'bundled'\n\t\t\t\t}),\n\t\t\t\tterserPlugin(),\n\t\t\t\tlicense({\n\t\t\t\t\tbanner: {\n\t\t\t\t\t\tcontent: `/*\n\t\t\t\t\t\t\tRollup.js v<%= pkg.version %>\n\t\t\t\t\t\t\t<%= pkg.homepage %>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCopyright (c) 2017-<%= moment().format('YYYY') %> <%= pkg.author %>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tReleased under the <%= pkg.license %> License.\n\t\t\t\t\t*/`,\n\t\t\t\t\t\tincludePrivate: true\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t],\n\t\t\tonwarn,\n\t\t\ttreeshake\n\t\t})\n\t];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies in Rollup\nDESCRIPTION: Shows how to configure Rollup to treat certain modules as external dependencies, suppressing warnings about unresolved imports.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/troubleshooting/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\n// ---cut-start---\n/** @type {import('rollup').RollupOptions} */\n// ---cut-end---\nexport default {\n\tentry: 'src/index.js',\n\tdest: 'bundle.js',\n\tformat: 'cjs',\n\texternal: ['moment'] // <-- suppresses the warning\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Output Asset and Chunk Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces defining the structure of output assets and chunks in Rollup's plugin system. OutputAsset represents static assets while OutputChunk represents JavaScript chunks with their associated metadata.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OutputAsset {\n\tfileName: string;\n\tnames: string[];\n\tneedsCodeReference: boolean;\n\toriginalFileNames: string[];\n\tsource: string | Uint8Array;\n\ttype: 'asset';\n}\n\ninterface OutputChunk {\n\tcode: string;\n\tdynamicImports: string[];\n\texports: string[];\n\tfacadeModuleId: string | null;\n\tfileName: string;\n\timplicitlyLoadedBefore: string[];\n\timports: string[];\n\timportedBindings: { [imported: string]: string[] };\n\tisDynamicEntry: boolean;\n\tisEntry: boolean;\n\tisImplicitEntry: boolean;\n\tmap: SourceMap | null;\n\tmodules: {\n\t\t[id: string]: {\n\t\t\trenderedExports: string[];\n\t\t\tremovedExports: string[];\n\t\t\trenderedLength: number;\n\t\t\toriginalLength: number;\n\t\t\tcode: string | null;\n\t\t};\n\t};\n\tmoduleIds: string[];\n\tname: string;\n\tpreliminaryFileName: string;\n\treferencedFiles: string[];\n\tsourcemapFileName: string | null;\n\ttype: 'chunk';\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Rollup Browser Implementation with In-Memory Modules\nDESCRIPTION: Example showing how to use Rollup in the browser with in-memory modules. The plugin provides custom resolveId and load functions to handle a simple module graph without file system access.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/faqs/index.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst modules = {\n\t'main.js': \"import foo from 'foo.js'; console.log(foo);\",\n\t'foo.js': 'export default 42;'\n};\n\nrollup\n\t.rollup({\n\t\tinput: 'main.js',\n\t\tplugins: [\n\t\t\t{\n\t\t\t\tname: 'loader',\n\t\t\t\tresolveId(source) {\n\t\t\t\t\tif (modules.hasOwnProperty(source)) {\n\t\t\t\t\t\treturn source;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tload(id) {\n\t\t\t\t\tif (modules.hasOwnProperty(id)) {\n\t\t\t\t\t\treturn modules[id];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t})\n\t.then(bundle => bundle.generate({ format: 'es' }))\n\t.then(({ output }) => console.log(output[0].code));\n```\n\n----------------------------------------\n\nTITLE: Generating Banner for Rollup Bundles in JavaScript\nDESCRIPTION: This function creates a banner string for Rollup bundles. It includes the Rollup version, current year, and license information. The function takes an optional object parameter to customize the banner content.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/banner--qPJuKPL.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function banner({ version = '' } = {}) {\n\tconst yearRange = new Date().getFullYear() === 2017 ? '2017' : '2017-' + new Date().getFullYear();\n\treturn `/*\n  @license\n\tRollup.js v${version}\n\thttps://github.com/rollup/rollup\n\n\tReleased under the MIT License.\n\tCopyright (c) ${yearRange} Richard Harris\n*/`;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Rollup Plugin Wrapper Function\nDESCRIPTION: A simple pattern for creating a Rollup plugin wrapper function that returns an object with a name property and hook implementations. This is the standard way to create and configure Rollup plugins.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/intro.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup-plugin-my-example.js\nexport default function myExample () {\n  return {\n    name: 'my-example', // this name will show up in warnings and errors\n    resolveId ( source ) {\n      if (source === 'virtual-module') {\n        // this signals that rollup should not ask other plugins or check\n        // the file system to find this id\n        return source;\n      }\n      return null; // other ids should be handled as usually\n    },\n    load ( id ) {\n      if (id === 'virtual-module') {\n        // the source code for \"virtual-module\"\n        return 'export default \"This is virtual!\"';\n      }\n      return null; // other ids should be handled as usually\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Default Export in JavaScript ES Modules\nDESCRIPTION: Shows how to export a single value as the source module's default export. This practice is recommended only if your source module has a single export.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default something;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Rollup Plugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom Rollup plugin that logs the bundle size. It uses the writeBundle hook to access the generated bundle and calculate its size.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/intro.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n  name: 'log-bundle-size',\n  writeBundle(options, bundle) {\n    const size = Object.values(bundle)\n      .reduce((acc, { code }) => acc + code.length, 0);\n    console.log(`Bundle size: ${size} bytes`);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Rollup Hook Flow Diagram\nDESCRIPTION: Mermaid flowchart showing the execution flow and relationships between different Rollup output generation hooks, including their types (parallel, sequential, first) and sync/async nature.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    classDef default fill:transparent, color:#000;\n    classDef hook-parallel fill:#ffb3b3,stroke:#000;\n    classDef hook-sequential fill:#ffd2b3,stroke:#000;\n    classDef hook-first fill:#fff2b3,stroke:#000;\n    classDef hook-sequential-sync fill:#ffd2b3,stroke:#f00;\n    classDef hook-first-sync fill:#fff2b3,stroke:#f00;\n\n    augmentchunkhash(\"augmentChunkHash\"):::hook-sequential-sync\n    click augmentchunkhash \"#augmentchunkhash\" _parent\n\n\tbanner(\"banner\"):::hook-sequential\n\tclick banner \"#banner\" _parent\n\n\tclosebundle(\"closeBundle\"):::hook-parallel\n\tclick closebundle \"#closebundle\" _parent\n\n\tfooter(\"footer\"):::hook-sequential\n\tclick footer \"#footer\" _parent\n\n\tgeneratebundle(\"generateBundle\"):::hook-sequential\n\tclick generatebundle \"#generatebundle\" _parent\n\n\tintro(\"intro\"):::hook-sequential\n\tclick intro \"#intro\" _parent\n\n\toutputoptions(\"outputOptions\"):::hook-sequential-sync\n\tclick outputoptions \"#outputoptions\" _parent\n\n\toutro(\"outro\"):::hook-sequential\n\tclick outro \"#outro\" _parent\n\n\trenderchunk(\"renderChunk\"):::hook-sequential\n\tclick renderchunk \"#renderchunk\" _parent\n\n\trenderdynamicimport(\"renderDynamicImport\"):::hook-first-sync\n\tclick renderdynamicimport \"#renderdynamicimport\" _parent\n\n\trendererror(\"renderError\"):::hook-parallel\n\tclick rendererror \"#rendererror\" _parent\n\n\trenderstart(\"renderStart\"):::hook-parallel\n\tclick renderstart \"#renderstart\" _parent\n\n\tresolvefileurl(\"resolveFileUrl\"):::hook-first-sync\n\tclick resolvefileurl \"#resolvefileurl\" _parent\n\n\tresolveimportmeta(\"resolveImportMeta\"):::hook-first-sync\n\tclick resolveimportmeta \"#resolveimportmeta\" _parent\n\n\twritebundle(\"writeBundle\"):::hook-parallel\n\tclick writebundle \"#writebundle\" _parent\n```\n\n----------------------------------------\n\nTITLE: Integrating Rollup with Gulp using Async/Await in JavaScript\nDESCRIPTION: Example of integrating Rollup with Gulp using async/await syntax.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst gulp = require('gulp');\nconst rollup = require('rollup');\nconst rollupTypescript = require('@rollup/plugin-typescript');\n\ngulp.task('build', async function () {\n\tconst bundle = await rollup.rollup({\n\t\tinput: './src/main.ts',\n\t\tplugins: [rollupTypescript()]\n\t});\n\n\tawait bundle.write({\n\t\tfile: './dist/library.js',\n\t\tformat: 'umd',\n\t\tname: 'library',\n\t\tsourcemap: true\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Types for the load Hook in TypeScript\nDESCRIPTION: TypeScript interface definitions for the load hook, showing the LoadResult type and SourceDescription interface that define the return structure for custom module loaders.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype LoadResult = string | null | SourceDescription;\n\ninterface SourceDescription {\n\tcode: string;\n\tmap?: string | SourceMap;\n\tast?: ESTree.Program;\n\tattributes?: { [key: string]: string } | null;\n\tmeta?: { [plugin: string]: any } | null;\n\tmoduleSideEffects?: boolean | 'no-treeshake' | null;\n\tsyntheticNamedExports?: boolean | string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Plugin Communication in Rollup\nDESCRIPTION: Demonstrates a pattern for direct plugin-to-plugin communication where one plugin exposes an API that another can access. The dependent plugin finds the parent plugin and uses its exposed methods.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nfunction parentPlugin() {\n\treturn {\n\t\tname: 'parent',\n\t\tapi: {\n\t\t\t//...methods and properties exposed for other plugins\n\t\t\tdoSomething(...args) {\n\t\t\t\t// do something interesting\n\t\t\t}\n\t\t}\n\t\t// ...plugin hooks\n\t};\n}\n\nfunction dependentPlugin() {\n\tlet parentApi;\n\treturn {\n\t\tname: 'dependent',\n\t\tbuildStart({ plugins }) {\n\t\t\tconst parentName = 'parent';\n\t\t\tconst parentPlugin = plugins.find(\n\t\t\t\tplugin => plugin.name === parentName\n\t\t\t);\n\t\t\tif (!parentPlugin) {\n\t\t\t\t// or handle this silently if it is optional\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`This plugin depends on the \"${parentName}\" plugin.`\n\t\t\t\t);\n\t\t\t}\n\t\t\t// now you can access the API methods in subsequent hooks\n\t\t\tparentApi = parentPlugin.api;\n\t\t},\n\t\ttransform(code, id) {\n\t\t\tif (thereIsAReasonToDoSomething(id)) {\n\t\t\t\tparentApi.doSomething(id);\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Module with Synthetic Named Exports\nDESCRIPTION: Example showing how to import from a module with synthetic named exports, demonstrating how explicit exports take precedence and how missing exports are resolved from the synthetic container.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nimport { foo, bar, baz, __synthetic } from './dep.js';\n\n// logs \"explicit\" as non-synthetic exports take precedence\nconsole.log(foo);\n\n// logs \"bar\", picking the property from __synthetic\nconsole.log(bar);\n\n// logs \"undefined\"\nconsole.log(baz);\n\n// logs \"{foo:'foo',bar:'bar'}\"\nconsole.log(__synthetic);\n```\n\n----------------------------------------\n\nTITLE: Visualization of Rollup's Build and Generate Phases with Mermaid\nDESCRIPTION: A flowchart diagram illustrating Rollup's two-phase process: the build phase that creates a bundle from input files, and the generate phase that can produce multiple output formats from the same bundle.\nSOURCE: https://github.com/rollup/rollup/blob/master/ARCHITECTURE.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    classDef default fill: transparent, color: black;\n    classDef graphobject fill: #ffb3b3, stroke: black;\n    classDef command fill: #ffd2b3, stroke: black, text-align: left;\n    build(\"rollup\\n<code>input: main.js</code>\"):::command\n    --> bundle(bundle):::command\n    --> generate1(\".generate\\n<code>file: main.mjs,\\nformat: 'es'</code>\"):::command\n\n    bundle\n    -->generate2(\".generate\\n<code>file: main.cjs,\\nformat: 'cjs'</code>\"):::command\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration with Custom Input Handling\nDESCRIPTION: A Rollup configuration file that demonstrates how to override command line arguments by modifying the commandLineArgs object. This example shows custom handling of the input option.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\n/** @type {import('rollup').RollupOptionsFunction} */\nexport default commandLineArgs => {\n\tconst inputBase = commandLineArgs.input || 'main.js';\n\n\t// this will make Rollup ignore the CLI argument\n\tdelete commandLineArgs.input;\n\treturn {\n\t\tinput: 'src/entries/' + inputBase,\n\t\toutput: {\n\t\t\t/* ... */\n\t\t}\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ParseOptions Interface for this.parse\nDESCRIPTION: TypeScript interface definition for the options that can be passed to the this.parse context method, which allows parsing code into an ESTree-compatible AST using Rollup's internal SWC-based parser.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParseOptions {\n\tallowReturnOutsideFunction?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring watchOptions for rollup.watch in JavaScript\nDESCRIPTION: Shows how to structure the watchOptions object for the rollup.watch function, including how to set input and output options along with watch-specific configuration like buildDelay, chokidar settings, and include/exclude patterns.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/javascript-api/index.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('rollup').RollupWatchOptions} */\nconst watchOptions = {\n\t...inputOptions,\n\toutput: [outputOptions],\n\twatch: {\n\t\tbuildDelay,\n\t\tchokidar,\n\t\tclearScreen,\n\t\tskipWrite,\n\t\texclude,\n\t\tinclude\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SourceDescription Interface for Rollup Transformations\nDESCRIPTION: Defines the SourceDescription interface which represents the result of a code transformation in Rollup. It includes the transformed code string, source map, AST, and other metadata required for module processing.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/assets/transform-9DaiUiOT.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceDescription {\n\tast?: AcornNode;\n\tcode: string;\n\tmap?: SourceMapInput;\n\tmagicString?: MagicStringBundle;\n\tmeta?: CustomPluginOptions;\n\tmodnexusResolutions?: MinimalResolvedId[];\n\tsignalTransformError?: boolean;\n\tsyntaxErrors?: [Error, Plugin][];\n\ttransformDependencies?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Chunk Logs Plugin with Dependency Scanning\nDESCRIPTION: Advanced JavaScript plugin implementation that scans entire dependency sub-graphs using the resolveDependencies option with this.load. The plugin adds logs to each dynamically imported chunk listing all modules in the chunk.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// The leading \\0 instructs other plugins not to try to resolve, load or\n// transform our proxy modules\nconst DYNAMIC_IMPORT_PROXY_PREFIX = '\\0dynamic-import:';\n\nexport default function dynamicChunkLogsPlugin() {\n\treturn {\n\t\tname: 'dynamic-chunk-logs',\n\t\tasync resolveDynamicImport(specifier, importer) {\n\t\t\t// Ignore non-static targets\n\t\t\tif (!(typeof specifier === 'string')) return;\n\t\t\t// Get the id and initial meta information of the import target\n\t\t\tconst resolved = await this.resolve(specifier, importer);\n\t\t\t// Ignore external targets. Explicit externals have the\n\t\t\t// \"external\" property while unresolved imports are \"null\".\n\t\t\tif (resolved && !resolved.external) {\n\t\t\t\t// We trigger loading the module without waiting for it\n\t\t\t\t// here because meta information attached by resolveId\n\t\t\t\t// hooks, that may be contained in \"resolved\" and that\n\t\t\t\t// plugins like \"commonjs\" may depend upon, is only\n\t\t\t\t// attached to a module the first time it is loaded. This\n\t\t\t\t// ensures that this meta information is not lost when we\n\t\t\t\t// later use \"this.load\" again in the load hook with just\n\t\t\t\t// the module id.\n\t\t\t\tthis.load(resolved);\n\t\t\t\treturn `${DYNAMIC_IMPORT_PROXY_PREFIX}${resolved.id}`;\n\t\t\t}\n\t\t},\n\t\tasync load(id) {\n\t\t\t// Ignore all files except our dynamic import proxies\n\t\t\tif (!id.startsWith('\\0dynamic-import:')) return null;\n\t\t\tconst actualId = id.slice(DYNAMIC_IMPORT_PROXY_PREFIX.length);\n\t\t\t// To allow loading modules in parallel while keeping\n\t\t\t// complexity low, we do not directly await each \"this.load\"\n\t\t\t// call but put their promises into an array where we await\n\t\t\t// them via an async for loop.\n\t\t\tconst moduleInfoPromises = [\n\t\t\t\tthis.load({ id: actualId, resolveDependencies: true })\n\t\t\t];\n\t\t\t// We track each loaded dependency here so that we do not load\n\t\t\t// a file twice and also do  not get stuck when there are\n\t\t\t// circular dependencies.\n\t\t\tconst dependencies = new Set([actualId]);\n\t\t\t// \"importedIdResolutions\" tracks the objects created by\n\t\t\t// resolveId hooks. We are using those instead of \"importedIds\"\n\t\t\t// so that again, important meta information is not lost.\n\t\t\tfor await (const { importedIdResolutions } of moduleInfoPromises) {\n\t\t\t\tfor (const resolved of importedIdResolutions) {\n\t\t\t\t\tif (!dependencies.has(resolved.id)) {\n\t\t\t\t\t\tdependencies.add(resolved.id);\n\t\t\t\t\t\tmoduleInfoPromises.push(\n\t\t\t\t\t\t\tthis.load({ ...resolved, resolveDependencies: true })\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// We log all modules in a dynamic chunk when it is loaded.\n\t\t\tlet code = `console.log([${[...dependencies]\n\t\t\t\t.map(JSON.stringify)\n\t\t\t\t.join(', ')}]); export * from ${JSON.stringify(actualId)};`;\n\t\t\t// Namespace reexports do not reexport default exports, which\n\t\t\t// is why we reexport it manually if it exists\n\t\t\tif (this.getModuleInfo(actualId).hasDefaultExport) {\n\t\t\t\tcode += `export { default } from ${JSON.stringify(actualId)};`;\n\t\t\t}\n\t\t\treturn code;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Location-Aware Log Handler in Rollup\nDESCRIPTION: Implementation of a log handler that uses location information and stack frames to provide detailed error reporting with source file locations.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\t//...\n\tonLog(level, { loc, frame, message }) {\n\t\tif (loc) {\n\t\t\tconsole.warn(`${loc.file} (${loc.line}:${loc.column}) ${message}`);\n\t\t\tif (frame) console.warn(frame);\n\t\t} else {\n\t\t\tconsole.warn(message);\n\t\t}\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Log Handler in Rollup Config\nDESCRIPTION: Example of implementing an onLog handler in Rollup configuration to customize log handling, including ignoring circular dependencies and elevating warnings to errors.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\t//...\n\tonLog(level, log, handler) {\n\t\tif (log.code === 'CIRCULAR_DEPENDENCY') {\n\t\t\treturn; // Ignore circular dependency warnings\n\t\t}\n\t\tif (level === 'warn') {\n\t\t\thandler('error', log); // turn other warnings into errors\n\t\t} else {\n\t\t\thandler(level, log); // otherwise, just print the log\n\t\t}\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Load Type for Rollup Plugin Context\nDESCRIPTION: TypeScript type definition for the this.load context method in Rollup plugins. This type specifies the parameters and return value expected when loading modules in a plugin.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ntype Load = (options: {\n\tid: string;\n\tresolveDependencies?: boolean;\n\tattributes?: Record<string, string> | null;\n\tmeta?: CustomPluginOptions | null;\n\tmoduleSideEffects?: boolean | 'no-treeshake' | null;\n\tsyntheticNamedExports?: boolean | string | null;\n}) => Promise<ModuleInfo>;\n```\n\n----------------------------------------\n\nTITLE: Named Exports of Existing Values in JavaScript ES Modules\nDESCRIPTION: Demonstrates how to export a value that has been previously declared in the module. This pattern allows you to declare variables first and export them later.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst something = true;\nexport { something };\n```\n\n----------------------------------------\n\nTITLE: Implementing Rollup buildStart Hook in JavaScript\nDESCRIPTION: Creates a Rollup plugin that demonstrates the usage of the buildStart hook. The plugin accesses the plugin context object and shows how to work with build options through the hook.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/buildStart.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n  name: 'test',\n  buildStart(options) {\n    // access options\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Asset Interface Definition in TypeScript\nDESCRIPTION: Defines the core Asset interface used throughout Rollup for handling file assets during bundling. Includes fields for source, name, fileName, type, and other asset metadata.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/custom-sanitizer/_expected/es/_sset.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Asset {\n\t/**\n\t * The file name of the asset,\n\t * either absolute or relative to the bundle\n\t */\n\tfileName: string;\n\t/**\n\t * A string containing the asset source code\n\t */\n\tsource?: string | Uint8Array;\n\t/**\n\t * The type of the asset,\n\t * which is currently used for naming\n\t * pattern selection\n\t */\n\ttype?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Paint Worklet Implementation Example\nDESCRIPTION: Example showing a complete CSS paint worklet setup with main.js, worklet.js, and config.js, demonstrating how the registerPaintWorkletPlugin enables code sharing between chunks.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nimport 'register-paint-worklet:./worklet.js';\nimport { color, size } from './config.js';\ndocument.body.innerHTML += `<h1 style=\"background-image: paint(vertical-lines);\">color: ${color}, size: ${size}</h1>`;\n\n// worklet.js\nimport { color, size } from './config.js';\nregisterPaint(\n\t'vertical-lines',\n\tclass {\n\t\tpaint(ctx, geom) {\n\t\t\tfor (let x = 0; x < geom.width / size; x++) {\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.fillStyle = color;\n\t\t\t\tctx.rect(x * size, 0, 2, geom.height);\n\t\t\t\tctx.fill();\n\t\t\t}\n\t\t}\n\t}\n);\n\n// config.js\nexport const color = 'greenyellow';\nexport const size = 6;\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Interface in TypeScript for Rollup\nDESCRIPTION: This TypeScript interface defines the Asset class which is a key construct in Rollup's build process. It includes properties for file information, source maps, and various metadata related to module transformation and bundling.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/custom-sanitizer/_expected/system/_sset.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NormalizedOutputOptions } from './rollup-options';\nimport type { RenderedChunk } from './rollup';\n\nexport interface Asset {\n\tfileName?: string;\n\tname?: string;\n\tsource: string | Uint8Array;\n\ttype: 'asset';\n\tmapSource?: (object: object, mapSourceOptions: { chunkAlias: string }) => Map<unknown, unknown> | null;\n\ttransforVerions?: Record<string, string>;\n\tretransformAssets?: (options: {\n\t\tchunk: RenderedChunk;\n\t\toptions: NormalizedOutputOptions;\n\t}) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Resolver Options in Rollup Plugins\nDESCRIPTION: Demonstrates how to pass custom options when resolving modules using 'this.resolve'. The requesting plugin provides custom data that the resolving plugin can use to make specialized resolution decisions without modifying the module ID.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nfunction requestingPlugin() {\n\treturn {\n\t\tname: 'requesting',\n\t\tasync buildStart() {\n\t\t\tconst resolution = await this.resolve('foo', undefined, {\n\t\t\t\tcustom: { resolving: { specialResolution: true } }\n\t\t\t});\n\t\t\tconsole.log(resolution.id); // \"special\"\n\t\t}\n\t};\n}\n\nfunction resolvingPlugin() {\n\treturn {\n\t\tname: 'resolving',\n\t\tresolveId(id, importer, { custom }) {\n\t\t\tif (custom.resolving?.specialResolution) {\n\t\t\t\treturn 'special';\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Running Targeted Tests in Rollup\nDESCRIPTION: Commands for running tests efficiently during development. Shows how to build a quick development version of Rollup and run tests with that version to speed up the development iteration cycle.\nSOURCE: https://github.com/rollup/rollup/blob/master/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:quick\nnpm run test:quick\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transform Function for Rollup in JavaScript\nDESCRIPTION: This code snippet defines a custom transform function for Rollup. It includes utility functions for handling source maps and a main transform function that processes code and generates source maps. The function takes options and returns an object with name and transform properties.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/transform.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { encode } from 'sourcemap-codec';\nimport MagicString from 'magic-string';\nimport { getLocator } from 'locate-character';\n\nconst SOURCEMAPPING_URL = 'sourceMa'+'ppingURL';\nconst SOURCEMAP_SEPARATOR = '//# '+SOURCEMAPPING_URL+'=';\n\nfunction cleanSourceMap(map) {\n\tif (typeof map === 'string') {\n\t\tif (map.slice(0, SOURCEMAP_SEPARATOR.length) === SOURCEMAP_SEPARATOR) {\n\t\t\tmap = map.slice(SOURCEMAP_SEPARATOR.length);\n\t\t}\n\t\tif (map.slice(0, 5) === 'data:') {\n\t\t\tconst idx = map.lastIndexOf(',');\n\t\t\tif (idx !== -1) {\n\t\t\t\tmap = decodeURIComponent(map.slice(idx + 1));\n\t\t\t}\n\t\t}\n\t\tmap = JSON.parse(map);\n\t}\n\tdelete map.sourcesContent;\n\treturn map;\n}\n\nexport default function transform(options = {}) {\n\tconst filter = options.filter || (() => true);\n\tlet sourceMap = options.sourceMap !== false;\n\n\treturn {\n\t\tname: 'custom-transform',\n\n\t\ttransform(code, id) {\n\t\t\tif (!filter(id)) return null;\n\n\t\t\tlet ast;\n\n\t\t\ttry {\n\t\t\t\tast = this.parse(code);\n\t\t\t} catch (err) {\n\t\t\t\tthis.error(err, err.loc);\n\t\t\t}\n\n\t\t\tlet result = '';\n\t\t\tconst magicString = new MagicString(code);\n\t\t\tconst locator = getLocator(code, { offsetLine: 1 });\n\n\t\t\tast.body.forEach(node => {\n\t\t\t\t// Custom transformation logic here\n\t\t\t\t// Example: Append a comment to each statement\n\t\t\t\tmagicString.appendLeft(node.end, ' // Transformed');\n\t\t\t});\n\n\t\t\tresult = magicString.toString();\n\n\t\t\tlet map = sourceMap ? magicString.generateMap({ hires: true }) : null;\n\t\t\tif (map && options.mapAnnotation !== false) {\n\t\t\t\tmap = cleanSourceMap(map);\n\t\t\t\tresult += SOURCEMAP_SEPARATOR + toUrl(map);\n\t\t\t}\n\n\t\t\treturn { code: result, map };\n\t\t}\n\t};\n}\n\nfunction toUrl(map) {\n\treturn `data:application/json;charset=utf-8;base64,${btoa(JSON.stringify(map))}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Banner and Footer in Rollup Output\nDESCRIPTION: Example of adding banner and footer text to bundled output files using static strings or dynamic functions.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\t// ...\n\toutput: {\n\t\t// ...\n\t\tbanner: '/* my-library version ' + version + ' */',\n\t\tfooter: '/* follow me on Twitter! @rich_harris */'\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Module Resolution in Rollup Plugins with resolveId Hook in JavaScript\nDESCRIPTION: This code demonstrates a Rollup plugin that implements the resolveId hook to handle custom module resolution. The plugin intercepts import requests for 'dep' and 'test' modules, mapping them to their respective file paths in the file system. It showcases how to control Rollup's module resolution logic.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/resolveId.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  description: 'custom modules with the same name have correct relative paths',\n  options: {\n    plugins: [\n      {\n        resolveId(id) {\n          if (id === 'dep') {\n            return path.join(__dirname, 'dep.js');\n          }\n          if (id === 'test') {\n            return path.join(__dirname, 'test.js');\n          }\n        }\n      }\n    ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transform Function for Rollup in JavaScript\nDESCRIPTION: This code defines a custom transform function that can be used with Rollup. It takes a code string as input and returns an object with the transformed code and a sourcemap. The function uses regular expressions to modify the input code.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/transform.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function myPlugin() {\n\treturn {\n\t\tname: 'my-plugin',\n\t\ttransform(code, id) {\n\t\t\tif (!id.includes('node_modules')) {\n\t\t\t\tconst magicString = new MagicString(code);\n\t\t\t\tlet match;\n\t\t\t\t// some regex operation on code\n\t\t\t\twhile ((match = regex.exec(code))) {\n\t\t\t\t\tconst start = match.index;\n\t\t\t\t\tconst end = start + match[0].length;\n\t\t\t\t\tmagicString.overwrite(start, end, 'replacement');\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tcode: magicString.toString(),\n\t\t\t\t\tmap: magicString.generateMap({ hires: true })\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Using Function for Lazy Log Generation in Rollup Plugins\nDESCRIPTION: Example showing how to use a function for lazy log generation with the debug method in Rollup's plugin API. The function is only called if the log is not filtered by the logLevel option.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// This will only run if the logLevel is set to \"debug\"\nthis.debug(() => generateExpensiveDebugLog());\n```\n\n----------------------------------------\n\nTITLE: Using Rollup's Asynchronous Parser with parseAstAsync\nDESCRIPTION: Shows how to use the asynchronous version of Rollup's parser that runs in a separate thread in non-wasm builds. This provides the same functionality as parseAst but operates asynchronously.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/javascript-api/index.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parseAstAsync } from 'rollup/parseAst';\nimport assert from 'node:assert';\n\nassert.deepEqual(\n\tawait parseAstAsync('return 42;', { allowReturnOutsideFunction: true }),\n\t{\n\t\ttype: 'Program',\n\t\tstart: 0,\n\t\tend: 10,\n\t\tbody: [\n\t\t\t{\n\t\t\t\ttype: 'ReturnStatement',\n\t\t\t\tstart: 0,\n\t\t\t\tend: 10,\n\t\t\t\targument: {\n\t\t\t\t\ttype: 'Literal',\n\t\t\t\t\tstart: 7,\n\t\t\t\t\tend: 9,\n\t\t\t\t\traw: '42',\n\t\t\t\t\tvalue: 42\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\tsourceType: 'module'\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Output Interop for CommonJS modules - JavaScript\nDESCRIPTION: This snippet outlines Rollup's handling of interop types when dealing with CommonJS modules, allowing users to define how default and named exports are treated based on specified modes. Key parameters include the interop type that can be set to 'default', 'esModule', 'auto', 'compat', or 'defaultOnly'. Expected output varies based on the interop type, with differing import structures and helper functions injected.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport ext_default, * as external from 'external1';\nconsole.log(ext_default, external.bar, external);\nimport('external2').then(console.log);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar external = require('external1');\n\nfunction _interopNamespaceDefault(e) {\n\tvar n = Object.create(null);\n\tif (e) {\n\t\tObject.keys(e).forEach(function (k) {\n\t\t\tif (k !== 'default') {\n\t\t\t\tvar d = Object.getOwnPropertyDescriptor(e, k);\n\t\t\t\tObject.defineProperty(\n\t\t\t\tn,\n\t\t\t\tk,\n\t\t\t\td.get\n\t\t\t\t\t? d\n\t\t\t\t\t: {\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn e[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\tn.default = e;\n\t\treturn Object.freeze(n);\n}\n\nvar external__namespace =\n\t/*#__PURE__*/ _interopNamespaceDefault(external);\nconsole.log(external, external__namespace.bar, external__namespace);\nPromise.resolve()\n\t.then(function () {\n\t\treturn /*#__PURE__*/ _interopNamespaceDefault(require('external2'));\n\t})\n\t.then(console.log);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar external = require('external1');\nconsole.log(external.default, external.bar, external);\nPromise.resolve()\n\t.then(function () {\n\t\treturn require('external2');\n\t})\n\t.then(console.log);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar external = require('external1');\n\nfunction _interopNamespace(e) {\n\tif (e && e.__esModule) return e;\n\tvar n = Object.create(null);\n\tif (e) {\n\t\tObject.keys(e).forEach(function (k) {\n\t\t\tif (k !== 'default') {\n\t\t\t\tvar d = Object.getOwnPropertyDescriptor(e, k);\n\t\t\t\tObject.defineProperty(\n\t\t\t\tn,\n\t\t\t\tk,\n\t\t\t\td.get\n\t\t\t\t\t? d\n\t\t\t\t\t: {\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn e[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\tn.default = e;\n\t\treturn Object.freeze(n);\n}\n\nvar external__namespace = /*#__PURE__*/ _interopNamespace(external);\nconsole.log(\n\texternal__namespace.default,\n\texternal__namespace.bar,\n\texternal__namespace\n);\nPromise.resolve()\n\t.then(function () {\n\t\treturn /*#__PURE__*/ _interopNamespace(require('external2'));\n\t})\n\t.then(console.log);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar external = require('external1');\n\nfunction _interopNamespaceCompat(e) {\n\tif (e && typeof e === 'object' && 'default' in e) return e;\n\tvar n = Object.create(null);\n\tif (e) {\n\t\tObject.keys(e).forEach(function (k) {\n\t\t\tif (k !== 'default') {\n\t\t\t\tvar d = Object.getOwnPropertyDescriptor(e, k);\n\t\t\t\tObject.defineProperty(\n\t\t\t\tn,\n\t\t\t\tk,\n\t\t\t\td.get\n\t\t\t\t\t? d\n\t\t\t\t\t: {\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn e[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\tn.default = e;\n\t\treturn Object.freeze(n);\n}\n\nvar external__namespace = /*#__PURE__*/ _interopNamespaceCompat(external);\n\nconsole.log(\n\texternal__namespace.default,\n\texternal__namespace.bar,\n\texternal__namespace\n);\nPromise.resolve()\n\t.then(function () {\n\t\treturn /*#__PURE__*/ _interopNamespaceCompat(require('external2'));\n\t})\n\t.then(console.log);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ext_default = require('external1');\n\nfunction _interopDefault(e) {\n\treturn e && e.__esModule ? e : { default: e };\n}\n\nvar ext_default__default = /*#__PURE__*/ _interopDefault(ext_default);\nconsole.log(ext_default__default.default);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ext_default = require('external');\nconsole.log(ext_default);\n\nvar ext_default__namespace =\n\t/*#__PURE__*/ _interopNamespaceDefaultOnly(ext_default);\nconsole.log(ext_default, ext_default__namespace);\nPromise.resolve()\n\t.then(function () {\n\t\treturn /*#__PURE__*/ _interopNamespaceDefaultOnly(require('external2'));\n\t})\n\t.then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Implementing generateBundle in a Rollup Plugin\nDESCRIPTION: This code snippet demonstrates how to implement the generateBundle hook in a Rollup plugin. It shows the method signature and basic implementation structure for processing bundle outputs.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/generateBundle-BgLkrkio.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateBundle(outputOptions, bundle) {\n  // process bundle\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Symlinks Support\nDESCRIPTION: Commands to enable symlink support in Git, which is required for Rollup's unit tests. Includes options for global or local configuration and how to reset the branch after applying the settings.\nSOURCE: https://github.com/rollup/rollup/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Global setting\ngit config --global core.symlinks true\n\n# Local setting\ngit config core.symlinks true\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit reset --hard\n```\n\n----------------------------------------\n\nTITLE: Advanced Rollup Browser Implementation with URL-based Module Resolution\nDESCRIPTION: Example demonstrating how to use Rollup in the browser with URL-based module resolution. This plugin handles absolute URLs as entry points and supports relative imports by resolving them against their importers.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/faqs/index.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrollup\n\t.rollup({\n\t\tinput: 'https://unpkg.com/rollup/dist/es/rollup.js',\n\t\tplugins: [\n\t\t\t{\n\t\t\t\tname: 'url-resolver',\n\t\t\t\tresolveId(source, importer) {\n\t\t\t\t\tif (source[0] !== '.') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tnew URL(source);\n\t\t\t\t\t\t\t// If it is a valid URL, return it\n\t\t\t\t\t\t\treturn source;\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t// Otherwise make it external\n\t\t\t\t\t\t\treturn { id: source, external: true };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn new URL(source, importer).href;\n\t\t\t\t},\n\t\t\t\tasync load(id) {\n\t\t\t\t\tconst response = await fetch(id);\n\t\t\t\t\treturn response.text();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t})\n\t.then(bundle => bundle.generate({ format: 'es' }))\n\t.then(({ output }) => console.log(output));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Handling in CommonJS Output\nDESCRIPTION: Demonstrates how dynamic imports are handled in CommonJS output based on the dynamicImportInCjs setting. Shows both default behavior and fallback to require() syntax.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// input\nimport('external').then(console.log);\n\n// cjs output with dynamicImportInCjs: true or not set\nimport('external').then(console.log);\n\n// cjs output with dynamicImportInCjs: false\nfunction _interopNamespaceDefault(e) {\n\tvar n = Object.create(null);\n\tif (e) {\n\t\tObject.keys(e).forEach(function (k) {\n\t\t\tif (k !== 'default') {\n\t\t\t\tvar d = Object.getOwnPropertyDescriptor(e, k);\n\t\t\t\tObject.defineProperty(\n\t\t\t\t\tn,\n\t\t\t\t\tk,\n\t\t\t\t\td.get\n\t\t\t\t\t\t? d\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\t\t\treturn e[k];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\tn.default = e;\n\treturn Object.freeze(n);\n}\n\nPromise.resolve()\n\t.then(function () {\n\t\treturn /*#__PURE__*/ _interopNamespaceDefault(require('external'));\n\t})\n\t.then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Rollup Plugin with buildStart Hook in JavaScript\nDESCRIPTION: This code snippet shows how to create a Rollup plugin that uses the buildStart hook to execute custom logic when the build process starts. The plugin logs the start of the build process and returns a promise that resolves after a short delay.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/buildStart.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin() {\n  return {\n    name: 'my-plugin',\n    buildStart() {\n      this.info('build started');\n      return new Promise(fulfil => {\n        setTimeout(() => {\n          fulfil();\n        }, 100);\n      });\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Live Bindings Example - Main Module\nDESCRIPTION: Shows how imported bindings reflect changes in the source module. The main module imports from incrementer.js and can see changes, but cannot directly modify the imported values.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nimport { count, increment } from './incrementer.js';\n\nconsole.log(count); // 0\nincrement();\nconsole.log(count); // 1\n\ncount += 1; // Error — only incrementer.js can change this\n```\n\n----------------------------------------\n\nTITLE: Non-Async Rollup API Pattern\nDESCRIPTION: This code demonstrates the older, non-async pattern for using Rollup's API. It uses Promise chaining rather than async/await syntax, making it suitable for environments where async/await is not available.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/intro.txt#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rollup = require('rollup');\n\nrollup.rollup({\n  input: 'src/main.js'\n}).then(bundle => {\n  return bundle.generate({\n    file: 'bundle.js',\n    format: 'cjs'\n  });\n}).then(({ output }) => {\n  // use output[0].code or write to disk if using bundle.write\n}).catch(error => {\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing renderStart Hook in Rollup Plugin with TypeScript\nDESCRIPTION: This code defines a Rollup plugin using TypeScript that implements the renderStart hook. It includes a complete plugin structure with various lifecycle hooks such as buildStart, load, and transform, showcasing how to properly type and implement a Rollup plugin.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/renderStart.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Plugin } from 'rollup';\n\nexport default function myPlugin(): Plugin {\n  return {\n    name: 'my-plugin',\n    buildStart() {\n      this.error('build start');\n    },\n    load() {\n      return 'export default 42;';\n    },\n    renderStart() {\n      this.error('render start');\n    },\n    transform(code) {\n      return { code, map: null };\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Module Reexports and Side Effects\nDESCRIPTION: Shows how direct and indirect reexports affect side effect retention in treeshaking.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// input file a.js\nimport { foo } from './b.js';\nconsole.log(foo);\n\n// input file b.js\n// direct reexports will ignore side effects\nexport { foo } from './c.js';\nconsole.log('this side-effect is ignored');\n\n// input file c.js\n// indirect reexports will include side effects\nimport { foo } from './d.js';\nfoo.mutated = true;\nconsole.log('this side-effect and the mutation are retained');\nexport { foo };\n\n// input file d.js\nexport const foo = 42;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// output with treeshake.moduleSideEffects === false\nconst foo = 42;\n\nfoo.mutated = true;\nconsole.log('this side-effect and the mutation are retained');\n\nconsole.log(foo);\n```\n\n----------------------------------------\n\nTITLE: Defining renderChunk Plugin Hook Interface in TypeScript for Rollup\nDESCRIPTION: This code defines the TypeScript interface for Rollup's renderChunk plugin hook. The hook allows plugins to transform generated code chunks before they're written to output files. It specifies the hook's function signature with parameters for code content, chunk info, output options, and a meta object, along with valid return types.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/amd/assets/renderChunk-MxjJNaqP.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NormalizedOutputOptions } from '../rollup/types';\nimport type { PluginContext } from './PluginContext';\nimport type { RenderedChunk, RenderedModule } from './rollup';\n\nexport interface PluginRenderChunkHooks {\n\t/**\n\t * @param code The code to be transformed\n\t * @param chunk Details about the rendered chunk\n\t * @param options Output options used for the chunk\n\t * @param meta Meta information about the chunk\n\t * @this The plugin context\n\t * @returns A transformed version of the code to be used in the final bundle, or null if\n\t * the code should not be modified\n\t */\n\trenderChunk?(\n\t\tthis: PluginContext,\n\t\tcode: string,\n\t\tchunk: RenderedChunk,\n\t\toptions: NormalizedOutputOptions,\n\t\tmeta: { modules: Record<string, RenderedModule> }\n\t): string | { code: string; map?: string | object } | null | undefined;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing package.json using import attribute in Node 18.20+\nDESCRIPTION: A modern approach to import package.json using the import attribute 'type: json' in recent Node.js versions. This snippet shows how to mark package dependencies as external in the Rollup configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport pkg from './package.json' with { type: 'json' };\n\nexport default {\n\t// Mark package dependencies as \"external\". Rest of configuration\n\t// omitted.\n\texternal: Object.keys(pkg.dependencies)\n};\n```\n\n----------------------------------------\n\nTITLE: Generating License Banners for Rollup Builds in JavaScript\nDESCRIPTION: This script reads the package.json file to extract information for creating license banners that are added to the top of Rollup's distribution files. It formats the banner with the package name, version, license, and copyright information.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/assets/banner--qPJuKPL.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync } from 'node:fs';\n\nconst pkg = JSON.parse(readFileSync(new URL('./package.json', import.meta.url), 'utf8'));\n\nconst banner = `/*\n  @license\n\t${pkg.name} v${pkg.version}\n\t${pkg.license} License\n\n\t${pkg.homepage}\n\t${pkg.description}\n\n\tCopyright (C) 2017-${new Date().getFullYear()} by RollupJS Contributors\n\n\tRollupJS Contributors:\n\t${pkg.author}\n\t${Array.isArray(pkg.contributors) ? pkg.contributors.join('\\n\\t') : pkg.contributors}\n*/`;\n\nexport default banner;\n```\n\n----------------------------------------\n\nTITLE: Defining Rollup Plugin with renderChunk Hook in JavaScript\nDESCRIPTION: This code defines a Rollup plugin that uses the renderChunk hook to modify the generated code by adding a comment at the beginning. The plugin demonstrates how to intercept and modify chunks during the build process.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/generate-emission-names/_expected/amd/generated-with-names.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tname: 'test',\n\trenderChunk(code) {\n\t\treturn '/* renderChunk */\\n' + code;\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example for Pure Function Annotations\nDESCRIPTION: Example JavaScript code demonstrating the use of @__PURE__ annotations to mark function calls and constructor invocations as side-effect free for tree-shaking.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n/*@__PURE__*/ console.log('side-effect');\n\nclass Impure {\n\tconstructor() {\n\t\tconsole.log('side-effect');\n\t}\n}\n\n/*@__PURE__ There may be additional text in the comment */ new Impure();\n```\n\n----------------------------------------\n\nTITLE: Renaming Exports in JavaScript ES Modules\nDESCRIPTION: Shows how to rename values when exporting them from a module, allowing the importing module to use a different name than what's used internally.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport { something as somethingElse };\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup with Babel Plugin in JavaScript\nDESCRIPTION: Rollup configuration file incorporating the Babel plugin for transpilation.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport resolve from '@rollup/plugin-node-resolve';\nimport babel from '@rollup/plugin-babel';\n\n/** @type {import('rollup').RollupOptions} */\nexport default {\n\tinput: 'src/main.js',\n\toutput: {\n\t\tfile: 'bundle.js',\n\t\tformat: 'cjs'\n\t},\n\tplugins: [resolve(), babel({ babelHelpers: 'bundled' })]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sequential writeBundle Hook in JavaScript\nDESCRIPTION: This example shows how to create a Rollup plugin with a writeBundle hook that runs sequentially and after other plugins. It reads the top-level files in the output directory and logs them.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'node:path';\nimport { readdir } from 'node:fs/promises';\n\nexport default function getFilesOnDisk() {\n\treturn {\n\t\tname: 'getFilesOnDisk',\n\t\twriteBundle: {\n\t\t\tsequential: true,\n\t\t\torder: 'post',\n\t\t\tasync handler({ dir }) {\n\t\t\t\tconst topLevelFiles = await readdir(path.resolve(dir));\n\t\t\t\tconsole.log(topLevelFiles);\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Plugin for Rollup\nDESCRIPTION: A custom Rollup plugin that automatically injects dependencies using the transform hook. This plugin scans for import statements and appends them to the code.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/intro.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup-plugin-inject-dependencies.js\nexport default function injectDependencies() {\n  return {\n    name: 'inject-dependencies',\n    transform(code, id) {\n      // check if this is a JS file that needs dependencies\n      if (!id.endsWith('.js') || id.includes('node_modules')) {\n        return null;\n      }\n\n      // add imports if they don't exist\n      const neededImports = [\n        \"import logger from './utils/logger';\",\n        \"import config from './config';\"\n      ];\n      \n      let updatedCode = code;\n      neededImports.forEach(importStr => {\n        if (!code.includes(importStr)) {\n          updatedCode = importStr + '\\n' + updatedCode;\n        }\n      });\n\n      return {\n        code: updatedCode,\n        map: null // we don't need to worry about sourcemaps for this example\n      };\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Import Example\nDESCRIPTION: Example showing how CommonJS imports entire modules, demonstrating why tree-shaking is needed.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/introduction/index.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// import the entire utils object with CommonJS\nconst utils = require('./utils');\nconst query = 'Rollup';\n// use the ajax method of the utils object\nutils.ajax(`https://api.example.com?search=${query}`).then(handleResponse);\n```\n\n----------------------------------------\n\nTITLE: Debug and Transform Plugin for Rollup\nDESCRIPTION: A Rollup plugin that demonstrates both hook usage and code transformation. It logs module information during the transform phase and adds a timestamp comment to the beginning of each module.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/intro.txt#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup-plugin-debug-transform.js\nexport default function debugTransform() {\n  return {\n    name: 'debug-transform',\n    transform(code, id) {\n      console.log(`Processing module: ${id}`);\n      \n      // Add a timestamp comment at the beginning of each file\n      const timestamp = new Date().toISOString();\n      const updatedCode = `// Last processed: ${timestamp}\\n${code}`;\n      \n      return {\n        code: updatedCode,\n        map: null\n      };\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Start Information for Rollup Build in JavaScript\nDESCRIPTION: This function renders the start information for a Rollup build process. It formats and logs details such as the entry point, output file, plugins used, and other build options. The function uses ANSI escape codes for colorized output.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/amd/renderStart.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function renderStart({\n\tinputOptions,\n\toutputOptions,\n\twatchMode,\n\trestart,\n\tentryModules\n}: {\n\tinputOptions: InputOptions;\n\toutputOptions: OutputOptions | OutputOptions[];\n\twatchMode: boolean;\n\trestart: boolean;\n\tentryModules: readonly string[];\n}): void {\n\tif (restart) {\n\t\treturn;\n\t}\n\tconst input = inputOptions.input as string[];\n\tconst files = input.length > 1 ? `${input.slice(0, -1).map(d => colors.cyanBright(d)).join(', ')} and ${colors.cyanBright(input.slice(-1)[0])}` : colors.cyanBright(input[0]);\n\tlet message = `\n${colors.bold(colors.underline('Rollup v' + version))}\n\n${colors.bold('bundles')} ${files} → `;\n\tconst outputs = !Array.isArray(outputOptions) ? [outputOptions] : outputOptions;\n\tconst outputFiles = outputs.map(output => {\n\t\tlet outputFile = output.file || output.dir;\n\t\tif (!outputFile) {\n\t\t\treturn 'console';\n\t\t}\n\t\tif (outputFile.startsWith(process.cwd())) {\n\t\t\toutputFile = outputFile.slice(process.cwd().length + 1);\n\t\t}\n\t\treturn outputFile;\n\t});\n\tmessage += `${outputFiles.map(colors.cyan).join(', ')}`;\n\n\tif (outputs.length === 1 && outputs[0].format) {\n\t\tmessage += ` (${outputs[0].format})`;\n\t}\n\n\tif (watchMode) {\n\t\tmessage += '\\n(watching for changes)';\n\t}\n\n\tmessage += '\\n';\n\n\tlet row = 0;\n\tconst maxTypeLength = Math.max(...inputOptions.plugins.map(plugin => (plugin.name || 'unnamed').length));\n\tfor (const plugin of inputOptions.plugins) {\n\t\tif (row++) {\n\t\t\tmessage += '\\n';\n\t\t}\n\t\tconst typeLength = (plugin.name || 'unnamed').length;\n\t\tmessage += colors.dim(`${plugin.name || 'unnamed'}${' '.repeat(maxTypeLength - typeLength + 3)}`);\n\t}\n\n\tconsole.log(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Using renderChunk to Modify Output in Rollup Plugin (JavaScript)\nDESCRIPTION: This example shows how to use the renderChunk hook to modify the output of a chunk. It adds a banner comment to the beginning of the chunk's code.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/renderChunk-MxjJNaqP.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function addBannerPlugin() {\n  return {\n    name: 'add-banner',\n    renderChunk(code) {\n      return '// Banner comment\\n' + code;\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example for No Side Effects Annotations\nDESCRIPTION: Example JavaScript code showing how to use @__NO_SIDE_EFFECTS__ annotations to mark function declarations as having no side effects, which affects all calls to those functions.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n/*@__NO_SIDE_EFFECTS__*/\nfunction impure() {\n\tconsole.log('side-effect');\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nconst impureArrowFn = () => {\n\tconsole.log('side-effect');\n};\n\nimpure(); // <-- call will be considered as side effect free\nimpureArrowFn(); // <-- call will be considered as side effect free\n```\n\n----------------------------------------\n\nTITLE: Implementing renderStart Hook in Rollup Plugin (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to implement the renderStart hook in a Rollup plugin. The hook receives outputOptions and inputOptions as parameters and can return null or a promise. It's called at the start of the bundle rendering process.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/renderStart.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function renderStart(\n\toutputOptions: NormalizedOutputOptions,\n\tinputOptions: NormalizedInputOptions\n): Promise<void> {\n\tawait Promise.all(\n\t\tPluginDriver.callHookParallel('renderStart', [outputOptions, inputOptions], plugin => {\n\t\t\treturn (plugin.renderStart as GenericFunction)!.call(pluginContexts.get(plugin), outputOptions, inputOptions);\n\t\t})\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using this.addWatchFile in a Rollup Plugin\nDESCRIPTION: Example demonstrating how to use the this.debug context function in a Rollup plugin to generate debug logs. The example shows a transform hook that logs the file ID and line count when transforming a module.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfunction plugin() {\n\treturn {\n\t\tname: 'test',\n\t\ttransform(code, id) {\n\t\t\tthis.debug(\n\t\t\t\t() =>\n\t\t\t\t\t`transforming ${id},\\n` +\n\t\t\t\t\t`module contains, ${code.split('\\n').length} lines`\n\t\t\t);\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing resolveImportMeta Plugin Hook in JavaScript\nDESCRIPTION: A plugin implementation that customizes how Rollup handles import.meta.url, replacing it with code that resolves the URL using the relative path of the original module to the current working directory against the base URL of the current document.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction importMetaUrlCurrentModulePlugin() {\n\treturn {\n\t\tname: 'import-meta-url-current-module',\n\t\tresolveImportMeta(property, { moduleId }) {\n\t\t\tif (property === 'url') {\n\t\t\t\treturn `new URL('${path.relative(\n\t\t\t\t\tprocess.cwd(),\n\t\t\t\t\tmoduleId\n\t\t\t\t)}', document.baseURI).href`;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Unknown Global Side Effects Example\nDESCRIPTION: Shows how treeshake.unknownGlobalSideEffects affects retention of global variable access.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// input\nconst jQuery = $;\nconst requestTimeout = setTimeout;\nconst element = angular.element;\n\n// output with unknownGlobalSideEffects == true\nconst jQuery = $;\nconst element = angular.element;\n\n// output with unknownGlobalSideEffects == false\nconst element = angular.element;\n```\n\n----------------------------------------\n\nTITLE: Using Namespaced Globals in Rollup\nDESCRIPTION: Example of using a dotted namespace in the name option for IIFE bundles. Shows how Rollup creates the necessary object hierarchy for nested namespaces in the global scope.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nrollup -n \"a.b.c\"\n\n/* ->\nthis.a = this.a || {};\nthis.a.b = this.a.b || {};\nthis.a.b.c = ...\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining Transform Function for Rollup Module Processing\nDESCRIPTION: This code defines the main transform function used in Rollup. It processes modules, resolves imports, applies plugins, and generates source maps. The function handles various edge cases and optimizations in the module transformation process.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/assets/transform-9DaiUiOT.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function transform(source, module, pluginDriver, warn) {\n\tconst id = module.id;\n\tconst sourcemapChain = [];\n\tlet originalSourcemap = source.map === null ? null : decodedSourcemap(source.map);\n\tconst originalCode = source.code;\n\tlet ast = source.ast;\n\tlet transformDependencies = [];\n\tconst emittedFiles = [];\n\tlet customTransformCache = false;\n\tconst useCustomTransformCache = () => (customTransformCache = true);\n\tlet pluginName = '';\n\tlet sourcemapType = 'transformed';\n\n\ttry {\n\t\tconvolve(\n\t\t\tsource,\n\t\t\tawait pluginDriver.hookFirst('transform', [source.code, id]),\n\t\t\tasync (source, result) => {\n\t\t\t\tif (isIgnoredId(id)) {\n\t\t\t\t\tif (result === null) return false;\n\t\t\t\t\twarn(errUnexpectedTransformDependencies(id, pluginName));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst { code, map, ast: newAst, assertions, dependencies, moduleSideEffects, syntheticNamedExports, meta, customTransformCache: newCustomTransformCache } = getValidTransformResult(result);\n\t\t\t\tsource.code = code;\n\n\t\t\t\tif (map !== undefined) {\n\t\t\t\t\tsourcemapChain.push(decodedSourcemap(map) || { missing: true, plugin: pluginName });\n\t\t\t\t}\n\n\t\t\t\tif (newAst !== undefined) {\n\t\t\t\t\tast = newAst;\n\t\t\t\t}\n\n\t\t\t\tif (assertions !== undefined) {\n\t\t\t\t\tfor (const [key, value] of Object.entries(assertions)) {\n\t\t\t\t\t\tmodule.assertions[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (dependencies !== undefined) {\n\t\t\t\t\ttransformDependencies.push(...dependencies);\n\t\t\t\t}\n\n\t\t\t\tif (moduleSideEffects != null) {\n\t\t\t\t\tmodule.moduleSideEffects = moduleSideEffects;\n\t\t\t\t}\n\n\t\t\t\tif (syntheticNamedExports != null) {\n\t\t\t\t\tmodule.syntheticNamedExports = syntheticNamedExports;\n\t\t\t\t}\n\n\t\t\t\tif (meta !== undefined) {\n\t\t\t\t\tmodule.augmentMeta(meta);\n\t\t\t\t}\n\n\t\t\t\tif (newCustomTransformCache !== undefined) {\n\t\t\t\t\tuseCustomTransformCache();\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\t(name) => (pluginName = name)\n\t\t);\n\t} catch (err) {\n\t\tthrowPluginError(err, pluginName, { hook: 'transform', id });\n\t}\n\n\tawait pluginDriver.hookParallel('moduleParsed', [module.getRenderedModule()]);\n\n\tif (ast) {\n\t\ttry {\n\t\t\tmodule.resolvedIds = await pluginDriver.hookReduceArg0('resolveDynamicImport', [module, ast], (_, args) => pluginDriver.hookFirst('resolveId', args));\n\t\t} catch (err) {\n\t\t\tthrowPluginError(err, null, { hook: 'resolveDynamicImport', id });\n\t\t}\n\t}\n\n\tconst sourceMap = collapseSourcemaps(sourcemapChain, sourcemapType === 'transformed' ? originalSourcemap : null, warn);\n\n\treturn {\n\t\tast,\n\t\tcode: source.code,\n\t\tcustomTransformCache,\n\t\temittedFiles,\n\t\toriginalCode,\n\t\toriginalSourcemap,\n\t\tsourceMapChain: sourcemapChain,\n\t\tsourcemapType,\n\t\ttransformDependencies\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Generating AMD Bundle with Assets in Rollup\nDESCRIPTION: This code snippet is part of the generateBundle hook in Rollup for AMD format. It processes assets, generates chunk information, and handles dependencies for AMD modules. The function takes options and bundle as parameters and returns modified chunk and asset data.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/amd/assets/generateBundle-BBHXGh_d.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngenerateBundle(options, bundle) {\n\tconst assets = Object.values(bundle).filter(outputFile => outputFile.type === 'asset');\n\tfor (const chunk of getChunks(bundle)) {\n\t\tconst renderedChunk = chunk;\n\t\tconst chunkIdVariable = getChunkIdVariable(renderedChunk);\n\t\tlet code = renderedChunk.code;\n\t\tconst magicString = new MagicString(code);\n\t\tconst { exports, facadeModuleId, isDynamicEntry, isEntry, isImplicitEntry, moduleIds } = renderedChunk;\n\t\tconst chunkIds = getChunkIds(renderedChunk);\n\t\tconst dependencies = chunkIds.map(id => `'${id}'`).join(',');\n\t\tconst params = renderedChunk.variableName ? `'${renderedChunk.variableName}',` : '';\n\t\tconst args = renderedChunk.variableName ? 'exports' : '';\n\t\tmagicString.prepend(\n\t\t\t`define(${params}[${dependencies}], function (${args}) { 'use strict';${args ? '\\n' : ''}`\n\t\t);\n\t\tif (renderedChunk.variableName) {\n\t\t\tmagicString.append('\\n\\n' + `return ${renderedChunk.variableName};`);\n\t\t}\n\t\tmagicString.append('\\n\\n});');\n\t\trenderedChunk.code = magicString.toString();\n\t\trenderedChunk.prepend = null;\n\t\trenderedChunk.append = null;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling JavaScript for Node.js using Rollup\nDESCRIPTION: This command shows how to use Rollup to compile JavaScript code into CommonJS module format for Node.js environments. It takes main.js as the entry point and outputs to bundle.js.\nSOURCE: https://github.com/rollup/rollup/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# compile to a CommonJS module\nrollup main.js --format cjs --file bundle.js\n```\n\n----------------------------------------\n\nTITLE: Using Rollup Plugin Context with the this Object\nDESCRIPTION: Example showing how to access the plugin context (this object) within a hook. The plugin context provides methods like emitFile and parse, and properties like meta that can be used to share information between plugins.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/intro.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin ( options = {} ) {\n  return {\n    name: 'my-plugin',\n    buildStart () {\n      this.emitFile({\n        type: 'asset',\n        fileName: 'emitted-file.txt',\n        source: 'This file is emitted by the plugin'\n      });\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using this.error in the onLog hook with JavaScript\nDESCRIPTION: Demonstrates how to use the this.error method in a Rollup plugin's onLog hook to convert specific warnings into errors while preserving the warning's properties.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myPlugin() {\n\treturn {\n\t\tname: 'my-plugin',\n\t\tonLog(level, log) {\n\t\t\tif (level === 'warn' && log.code === 'THIS_IS_NOT_OK') {\n\t\t\t\treturn this.error(log);\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Chunk in Rollup\nDESCRIPTION: This function handles the rendering of a chunk in Rollup. It processes the chunk's source, applies output plugins, and generates sourcemaps if needed. The function also finalizes the chunk and handles any necessary transformations.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/system/assets/renderChunk-MxjJNaqP.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function renderChunk(\n\toutputChunk: OutputChunk,\n\toptions: NormalizedOutputOptions,\n\tasset: ChunkAsset,\n\tappendChunkToBundle: (chunk: Chunk | RenderedChunk) => void,\n\tpluginDriver: PluginDriver,\n\tfileReferenceIds: string[]\n): Promise<RenderedChunk> {\n\tconst chunk = outputChunk as Chunk;\n\tlet magicString = chunk.preliminaryRender(options, pluginDriver);\n\tlet map = null;\n\tlet finaliseChunk = true;\n\n\tconst chunkSourcemapChain: DecodedSourceMapOrMissing[] = [];\n\n\tlet chunkOrAsset: RenderedChunk | ChunkAsset = asset;\n\tconst sourcemapChain: DecodedSourceMapOrMissing[] = [];\n\n\t//...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Deferred Asset Source in Rollup Plugins\nDESCRIPTION: Example showing the setAssetSource method signature in Rollup's plugin API. This method allows setting the source of an asset that was previously referenced.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n(referenceId: string, source: string \\| Uint8Array) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring preserveModulesRoot in Rollup\nDESCRIPTION: Example configuration for preserveModulesRoot option in Rollup. This option strips away a specified directory path from the output directory when preserveModules is true.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tinput: ['src/module.js', `src/another/module.js`],\n\toutput: [\n\t\t{\n\t\t\tformat: 'es',\n\t\t\tdir: 'dist',\n\t\t\tpreserveModules: true,\n\t\t\tpreserveModulesRoot: 'src'\n\t\t}\n\t]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing generateBundle Method in JavaScript for Rollup\nDESCRIPTION: This snippet defines the generateBundle method, which is responsible for creating output bundles in Rollup. It processes modules, applies plugins, and generates the final bundle output based on the provided options.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/generateBundle-BgLkrkio.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync generateBundle(outputOptions, bundle, isWrite) {\n\tTimeMs.timeStart('generate bundle', 3);\n\tawait this.pluginDriver.hookParallel('renderStart', [outputOptions, inputOptions]);\n\tawait this.addManualChunks();\n\n\t// Phase 1: Analyse the module graph\n\tTimeMs.timeStart('phase 1', 4);\n\n\tthis.relinkFacade();\n\tconst { fadedEntryModules, preserveEntrySignatures } = this;\n\n\tfor (const curEntry of [...fadedEntryModules, ...this.entryModules]) {\n\t\tif (\n\t\t\tpreserveEntrySignatures === 'strict' ||\n\t\t\t(preserveEntrySignatures === 'exports-only' && curEntry.preserveSignature !== false)\n\t\t) {\n\t\t\tcurEntry.updateSignature();\n\t\t} else {\n\t\t\tcurEntry.clearSignature();\n\t\t}\n\t}\n\n\tthis.deliverTopLevelCallOrder();\n\tthis.includeStatements();\n\tthis.generateFacades();\n\n\tTimeMs.timeEnd('phase 1', 4);\n\n\t// Phase 2:\n\tTimeMs.timeStart('phase 2', 4);\n\n\tthis.sortModules();\n\tthis.includeDynamicImports();\n\tthis.linkDynamicImports();\n\tthis.addChunkImportAndExportDeclarations();\n\tthis.connectChunkImports();\n\tthis.generateChunkExports();\n\tthis.setUpChunkImportsAndExportsForModule();\n\n\tTimeMs.timeEnd('phase 2', 4);\n\n\t// Phase 3:\n\tTimeMs.timeStart('phase 3', 4);\n\n\tthis.assignChunkIds();\n\tthis.resolveChunkImports();\n\tawait this.addModuleRuntimeHelpersToChunks();\n\tthis.addCatchClauseToModule();\n\tthis.setIdentifierRenderResolutions();\n\tthis.generateBundleNamePlaceholders();\n\tawait this.verifyAddonPlugins();\n\n\tTimeMs.timeEnd('phase 3', 4);\n\n\t// Phase 4\n\tTimeMs.timeStart('phase 4', 4);\n\n\tthis.renderedModuleSources = await this.addRenderedModules(bundle);\n\tthis.addChunkMetadata(bundle);\n\tawait this.addCorrectedChunkMetadata(bundle);\n\tawait this.addAdditionalChunks(bundle);\n\n\tTimeMs.timeEnd('phase 4', 4);\n\tTimeMs.timeEnd('generate bundle', 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Chunk Rendering in Rollup\nDESCRIPTION: Demonstrates using the renderChunk hook in a Rollup plugin to modify the generated code output. The example adds a banner comment and replaces 'hello' with 'world' in the final bundle.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/renderChunk.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  input: 'main.js',\n  output: {\n    file: '_actual/renderChunk-custom.js',\n    format: 'cjs'\n  },\n  plugins: [\n    {\n      name: 'test',\n      renderChunk(code) {\n        return '/* package: test */\\n' + code.replace('hello', 'world');\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Mode to Include Only Specific Files in Rollup\nDESCRIPTION: Example showing how to limit Rollup's file watching to specific files or patterns. This configuration filters the module graph to only watch files in the src directory.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nexport default {\n\t// ...\n\twatch: {\n\t\tinclude: 'src/**'\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Module Imports and Exports with Conditional Logging - JavaScript\nDESCRIPTION: Demonstrates ES6 module syntax with named and default imports/exports, followed by a conditional statement that logs values based on comparison. Uses import aliasing and handles both default and named exports.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/cli/samples/stdin/self-import/input.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport a from \"-\";\nimport { b as c } from \"-\";\n\nexport let b = 2;\nexport default 4;\n\nif (a > c)\n\tconsole.log(a, c);\nelse\n\tconsole.log(c, a);\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache in Rollup Builds\nDESCRIPTION: Demonstrates how to implement caching in Rollup builds to speed up subsequent builds in watch mode. Shows cache storage and reuse between builds.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet cache;\n\nasync function buildWithCache() {\n\tconst bundle = await rollup.rollup({\n\t\tcache // is ignored if falsy\n\t\t// ... other input options\n\t});\n\tcache = bundle.cache; // store the cache object of the previous build\n\treturn bundle;\n}\n\nbuildWithCache()\n\t.then(bundle => {\n\t\t// ... do something with the bundle\n\t})\n\t.then(() => buildWithCache()) // will use the cache of the previous build\n\t.then(bundle => {\n\t\t// ... do something with the bundle\n\t});\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Mode to Exclude Files in Rollup\nDESCRIPTION: Example showing how to configure Rollup's watch mode to exclude specific files from being watched. This pattern is commonly used to prevent unnecessary rebuilds when files in node_modules change.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nexport default {\n\t// ...\n\twatch: {\n\t\texclude: 'node_modules/**'\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing reexportProtoFromExternal Output in CommonJS (JavaScript)\nDESCRIPTION: Illustrates the difference in output when reexportProtoFromExternal is set to true or false in Rollup configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// the input file\nexport * from 'rollup';\n\n// the output file if the output.format is cjs\n'use strict';\n\n// reexportProtoFromExternal is true\nvar rollup = require('rollup');\n\nObject.prototype.hasOwnProperty.call(rollup, '__proto__') &&\n\t!Object.prototype.hasOwnProperty.call(exports, '__proto__') &&\n\tObject.defineProperty(exports, '__proto__', {\n\t\tenumerable: true,\n\t\tvalue: rollup['__proto__']\n\t});\n\nObject.keys(rollup).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k))\n\t\texports[k] = rollup[k];\n});\n\n// reexportProtoFromExternal is false\nvar rollup = require('rollup');\n\nObject.keys(rollup).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k))\n\t\texports[k] = rollup[k];\n});\n```\n\n----------------------------------------\n\nTITLE: Resolve To Document Plugin Implementation in JavaScript\nDESCRIPTION: This plugin resolves file URLs by generating absolute URLs based on the current document's base URI, critical for ensuring correct file paths in a browser context.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// ---cut-start---\n/** @returns {import('rollup').Plugin} */\n// ---cut-end---\nfunction resolveToDocumentPlugin() {\n\treturn {\n\t\tname: 'resolve-to-document',\n\t\tresolveFileUrl({ fileName }) {\n\t\t\treturn `new URL('${fileName}', document.baseURI).href`;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Pattern for Localized Strings in Components\nDESCRIPTION: Demonstrates a component pattern that dynamically imports translated strings based on the current language. This creates multiple small chunks that could benefit from manual chunk optimization.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Inside the \"foo\" component\n\nfunction getTranslatedStrings(currentLanguage) {\n\tswitch (currentLanguage) {\n\t\tcase 'en':\n\t\t\treturn import('./foo.strings.en.js');\n\t\tcase 'de':\n\t\t\treturn import('./foo.strings.de.js');\n\t\t// ...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining renderChunk Plugin Hook Interface in TypeScript for Rollup\nDESCRIPTION: This TypeScript interface defines the renderChunk hook used in Rollup plugins. The hook receives a generated chunk of code, its rendering details, and output options, and allows modifying the code before it's written to the output file. It can return modified code or an object with code and optional sourcemap.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/renderChunk-MxjJNaqP.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderedChunk extends PreRenderedChunk {\n\tcode: string;\n\tmap?: SourceMap;\n}\n\nexport type RenderedModule = {\n\tcode: string | null;\n\toriginalCode: string;\n\tremovedExports: string[];\n\trenderedExports: string[];\n\trenderedLength: number;\n};\n\nexport type RenderChunkHook = (\n\tcode: string,\n\tchunk: RenderedChunk,\n\toptions: NormalizedOutputOptions,\n\tmeta: { chunks: readonly ChunkInfo[] }\n) => string | null | { code: string; map?: SourceMap } | Promise<string | null | { code: string; map?: SourceMap }>;\n```\n\n----------------------------------------\n\nTITLE: Implementing generateBundle Hook in Rollup\nDESCRIPTION: This function implements the generateBundle hook in Rollup. It processes chunks and assets, applies plugins, and performs various optimizations before the final bundle is generated.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/assets/generateBundle-BgLkrkio.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function generateBundle(outputOptions, bundle, isWrite) {\n\tconst start = Date.now();\n\tthis.pluginDriver.setOutputBundle(bundle, outputOptions);\n\tawait this.pluginContexts.hookParallel('renderStart', [outputOptions, inputOptions]);\n\tawait this.pluginDriver.hookParallel('generateBundle', [outputOptions, bundle, isWrite]);\n\tthis.finaliseAssets(bundle);\n\n\tthis.pluginDriver.unsetMemoiseCache();\n\tfor (const chunk of bundle) {\n\t\tif (chunk.type === 'chunk') {\n\t\t\tdecorateClosure(chunk);\n\t\t}\n\t}\n\n\tawait this.pluginContexts.hookParallel('renderEnd', []);\n\n\tif (!inputOptions.preserveModules && !inputOptions.inlineDynamicImports) {\n\t\tfor (const chunk of bundle) {\n\t\t\tif (chunk.type === 'chunk') {\n\t\t\t\tchunk.imports = chunk.imports.filter(id => id in bundle);\n\t\t\t\tchunk.dynamicImports = chunk.dynamicImports.filter(id => id in bundle);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.pluginDriver.setOutputBundle(null, null);\n\tif (this.watchMode) {\n\t\tconsole.log(`\\ngenerateBundleOutput ${Date.now() - start}`);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for resolveId Hook\nDESCRIPTION: Type definitions for the resolveId hook interface, including the hook function signature and possible return types.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype ResolveIdHook = (\n\tsource: string,\n\timporter: string | undefined,\n\toptions: {\n\t\tattributes: Record<string, string>;\n\t\tcustom?: { [plugin: string]: any };\n\t\tisEntry: boolean;\n\t}\n) => ResolveIdResult;\n\ntype ResolveIdResult = string | null | false | PartialResolvedId;\n\ninterface PartialResolvedId {\n\tid: string;\n\texternal?: boolean | 'absolute' | 'relative';\n\tattributes?: Record<string, string> | null;\n\tmeta?: { [plugin: string]: any } | null;\n\tmoduleSideEffects?: boolean | 'no-treeshake' | null;\n\tresolvedBy?: string | null;\n\tsyntheticNamedExports?: boolean | string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: External Dependency Resolution Plugin\nDESCRIPTION: Example of a plugin that externally resolves dependencies using the resolveId hook.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction externalizeDependencyPlugin() {\n\treturn {\n\t\tname: 'externalize-dependency',\n\t\tresolveId(source) {\n\t\t\tif (source === 'my-dependency') {\n\t\t\t\treturn { id: 'my-dependency-develop', external: true };\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Rollup CLI\nDESCRIPTION: Demonstrates how to pass environment variables to Rollup configuration using the --environment flag\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nrollup -c --environment INCLUDE_DEPS,BUILD:production\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Rollup Builds with Watch Options\nDESCRIPTION: Example rollup configuration with multiple build targets where one target is excluded from watch mode. This setup will build both configurations normally but only rebuild the first one when files change in watch mode.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nexport default [\n\t{\n\t\tinput: 'main.js',\n\t\toutput: { file: 'bundle.cjs.js', format: 'cjs' }\n\t},\n\t{\n\t\tinput: 'main.js',\n\t\twatch: false,\n\t\toutput: { file: 'bundle.es.js', format: 'es' }\n\t}\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing buildEnd Hook in Custom Rollup Plugin (JavaScript)\nDESCRIPTION: This code defines a custom Rollup plugin that uses the buildEnd hook. The hook function receives an optional error parameter and logs a message when the build process ends, regardless of whether there were errors.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/buildEnd.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin() {\n  return {\n    name: 'my-plugin',\n    buildEnd(error) {\n      console.log('build ended');\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Usage of SVG Assets\nDESCRIPTION: Example showing conditional usage of an imported SVG asset, which demonstrates why needsCodeReference might be needed to avoid emitting unused assets.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport logo from '../images/logo.svg';\nif (COMPILER_FLAG) {\n\tconst image = document.createElement('img');\n\timage.src = logo;\n\tdocument.body.appendChild(image);\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example for Variable Access Before Declaration Issues\nDESCRIPTION: Example demonstrating a case where Rollup's tree-shaking might incorrectly assume variables are constant if accessed before declaration, and how the correctVarValueBeforeDeclaration option fixes this.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// everything will be tree-shaken unless treeshake.correctVarValueBeforeDeclaration === true\nlet logBeforeDeclaration = false;\n\nfunction logIfEnabled() {\n\tif (logBeforeDeclaration) {\n\t\tlog();\n\t}\n\n\tvar value = true;\n\n\tfunction log() {\n\t\tif (!value) {\n\t\t\tconsole.log('should be retained, value is undefined');\n\t\t}\n\t}\n}\n\nlogIfEnabled(); // could be removed\nlogBeforeDeclaration = true;\nlogIfEnabled(); // needs to be retained as it displays a log\n```\n\n----------------------------------------\n\nTITLE: Implementing buildEnd Hook in Custom Rollup Plugin (JavaScript)\nDESCRIPTION: This code defines a Rollup plugin that uses the buildEnd hook. The hook function logs a message indicating the build has ended and includes the current timestamp. It demonstrates how to perform custom actions at the end of Rollup's build process.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/buildEnd.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function myPlugin() {\n  return {\n    name: 'my-plugin',\n    buildEnd() {\n      console.log(`build ended ${new Date()}`);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom renderChunk Function in Rollup\nDESCRIPTION: A JavaScript implementation of a custom renderChunk function for Rollup plugins. This function takes the code, rendering options, and chunk information as parameters and returns the processed code. It's designed to be used as part of a Rollup plugin's renderChunk hook.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/renderChunk.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrenderChunk(code, { sourcemap }, { exports, facadeModuleId, isDynamicEntry, isEntry, isImplicitEntry, name }) {\n  // Processing logic here\n  return code;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Rollup API Usage with Default Options\nDESCRIPTION: This code demonstrates the fundamental pattern for using Rollup as a JavaScript API. It imports the rollup method, creates a bundle from an input file, and generates output.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/intro.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.js\nimport { rollup } from 'rollup';\n\n// create a bundle\nconst bundle = await rollup({\n  input: 'src/main.js'\n});\n\nconsole.log(bundle.watchFiles); // an array of file paths this bundle depends on\n\n// generate output specific code in-memory\n// you can call this function multiple times on the same bundle object\n// replace bundle.generate with bundle.write to directly write to disk\nconst { output } = await bundle.generate({\n  file: 'bundle.js',\n  format: 'cjs'\n});\n\nfor (const chunkOrAsset of output) {\n  if (chunkOrAsset.type === 'asset') {\n    // For assets, this contains\n    // {\n    //   fileName: string,              // the asset file name\n    //   source: string | Uint8Array    // the asset source\n    //   type: 'asset'                  // signifies that this is an asset\n    // }\n    console.log('Asset', chunkOrAsset);\n  } else {\n    // For chunks, this contains\n    // {\n    //   code: string,                  // the generated JS code\n    //   dynamicImports: string[],      // external modules imported dynamically by the chunk\n    //   exports: string[],             // exported variable names\n    //   facadeModuleId: string | null, // the ID of a module that this chunk corresponds to\n    //   fileName: string,              // the chunk file name\n    //   implicitlyLoadedBefore: string[]; // entries that should only be loaded after this chunk\n    //   imports: string[],             // external modules imported statically by the chunk\n    //   importedBindings: {[imported: string]: string[]} // imported bindings per dependency\n    //   isDynamicEntry: boolean,       // is this chunk a dynamic entry point\n    //   isEntry: boolean,              // is this chunk a static entry point\n    //   isImplicitEntry: boolean,      // should this chunk only be loaded after other chunks\n    //   map: string | null,            // sourcemaps if present\n    //   modules: {                     // information about the modules in this chunk\n    //     [id: string]: {\n    //       renderedExports: string[]; // exported variable names that were included\n    //       removedExports: string[];  // exported variable names that were removed\n    //       renderedLength: number;    // the length of the remaining code in this module\n    //       originalLength: number;    // the original length of the code in this module\n    //       code: string | null;       // remaining code in this module\n    //     };\n    //   },\n    //   name: string                   // the name of this chunk as used in naming patterns\n    //   referencedFiles: string[]      // files referenced via import.meta.ROLLUP_FILE_URL_<id>\n    //   type: 'chunk',                 // signifies that this is a chunk\n    // }\n    console.log('Chunk', chunkOrAsset.modules);\n  }\n}\n\n// closes the bundle\nawait bundle.close();\n```\n\n----------------------------------------\n\nTITLE: Internal Module Side Effects Example\nDESCRIPTION: Demonstrates how treeshaking handles side effects in non-external modules based on moduleSideEffects setting.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// input file a.js\nimport { unused } from './b.js';\nconsole.log(42);\n\n// input file b.js\nconsole.log('side-effect');\nconst ignored = 'will still be removed';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// output with treeshake.moduleSideEffects === true\nconsole.log('side-effect');\n\nconsole.log(42);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// output with treeshake.moduleSideEffects === false\nconsole.log(42);\n```\n\n----------------------------------------\n\nTITLE: Try-Catch Deoptimization Example\nDESCRIPTION: Demonstrates how treeshake.tryCatchDeoptimization affects code optimization inside try-catch blocks.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nfunction otherFn() {\n\t// even though this function is called from a try-statement, the next line\n\t// will be removed as side-effect-free\n\tObject.create(null);\n}\n\nfunction test(callback) {\n\ttry {\n\t\t// calls to otherwise side-effect-free global functions are\n\t\t// retained inside try-statements for tryCatchDeoptimization: true\n\t\tObject.create(null);\n\n\t\t// calls to other function are retained as well but the body of\n\t\t// this function may again be subject to tree-shaking\n\t\totherFn();\n\n\t\t// if a parameter is called, then all arguments passed to that\n\t\t// function parameter will be deoptimized\n\t\tcallback();\n\t} catch {}\n}\n\ntest(() => {\n\t// will be ratained\n\tObject.create(null);\n});\n\n// call will be retained but again, otherFn is not deoptimized\ntest(otherFn);\n```\n\n----------------------------------------\n\nTITLE: Defining TransformResult and SourceDescription Interfaces for Rollup Transform Hook\nDESCRIPTION: TypeScript interface definitions for the transform hook in Rollup. It includes TransformResult type and SourceDescription interface, specifying the structure of the transformation result including code, source map, AST, and module properties.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransformResult = string | null | Partial<SourceDescription>;\n\ninterface SourceDescription {\n\tcode: string;\n\tmap?: string | SourceMap;\n\tast?: ESTree.Program;\n\tattributes?: { [key: string]: string } | null;\n\tmeta?: { [plugin: string]: any } | null;\n\tmoduleSideEffects?: boolean | 'no-treeshake' | null;\n\tsyntheticNamedExports?: boolean | string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Toolchain for Rollup Development\nDESCRIPTION: Commands to set up the Rust toolchain for compiling Rollup's Rust code. This includes installing the stable toolchain, setting it as default, adding WASM target support, and updating Rust.\nSOURCE: https://github.com/rollup/rollup/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrustup toolchain install stable\nrustup default stable\n```\n\nLANGUAGE: shell\nCODE:\n```\nrustup target add wasm32-unknown-unknown\n```\n\nLANGUAGE: shell\nCODE:\n```\nrustup update\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Outro Output Wrapper\nDESCRIPTION: Example showing how to add code to the end of a Rollup bundle using the outro option. The outro statement will be added after the last line of code in the generated bundle.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/cjs/assets/outro-D8xwWt8B.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"outro\"\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Transform Plugin for Rollup\nDESCRIPTION: Implements an asynchronous transform plugin for Rollup that processes source code with a Promise-based delay. Demonstrates async/await pattern in transform hooks.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/transform.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin() {\n\treturn {\n\t\tname: 'my-plugin',\n\t\tasync transform(code, id) {\n\t\t\tawait new Promise(fulfil => setTimeout(fulfil, 100));\n\t\t\treturn '// prefix\\n' + code;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rollup Plugin renderChunk Implementation\nDESCRIPTION: Example of implementing the renderChunk hook in a Rollup plugin to transform chunks before output. The code snippet extracts a function that accepts code and options parameters to perform chunk transformations.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/renderChunk.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderChunk(code, options) {\n  return code;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ES6 Features with Babel and Rollup in JavaScript\nDESCRIPTION: Example of using ES6 features in a JavaScript file to be processed by Babel and Rollup.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// src/main.js\nimport answer from 'the-answer';\n\nexport default () => {\n\tconsole.log(`the answer is ${answer}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Watch Mode with Custom Command\nDESCRIPTION: Example of using watch mode with custom command execution on events\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nrollup -c --watch --watch.onEnd=\"node ./afterBuildScript.js\"\n```\n\n----------------------------------------\n\nTITLE: Bundling JavaScript for Universal Usage\nDESCRIPTION: Command to compile JavaScript into UMD format compatible with both browsers and Node.js.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/introduction/index.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# UMD format requires a bundle name\n$ rollup main.js --file bundle.js --format umd --name \"myBundle\"\n```\n\n----------------------------------------\n\nTITLE: Using Rollup in Deno with ESM.sh in JavaScript\nDESCRIPTION: Example of using Rollup in Deno environment using ESM.sh for importing.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rollup } from \"https://esm.sh/@rollup/browser\";\n\nconst bundle = await rollup({ //...\n```\n\n----------------------------------------\n\nTITLE: Using Rollup with Custom Plugins\nDESCRIPTION: This example shows how to use Rollup with custom plugins to transform code during the bundling process. It demonstrates configuring multiple plugins with options in the rollup configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/intro.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.js\nimport { rollup } from 'rollup';\nimport resolve from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\nimport terser from '@rollup/plugin-terser';\n\n// create a bundle\nconst bundle = await rollup({\n  input: 'src/main.js',\n  plugins: [resolve(), commonjs(), terser()]\n});\n\n// generate output specific code in-memory\nconst { output } = await bundle.generate({\n  file: 'bundle.js',\n  format: 'iife',\n  name: 'myBundle'\n});\n\n// or write the bundle to disk\nawait bundle.write({\n  file: 'bundle.js',\n  format: 'iife',\n  name: 'myBundle'\n});\n\n// closes the bundle\nawait bundle.close();\n```\n\n----------------------------------------\n\nTITLE: Normalizing POSIX-style Path Strings in JavaScript\nDESCRIPTION: A helper function that normalizes POSIX-style path strings by handling multiple slashes, resolving '.' and '..' segments, and ensuring proper formatting. It's primarily used as part of the path resolution process in browser environments.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/assets/buildEnd-BuNl-RZp.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction normalizeStringPosix(path, allowAboveRoot) {\n\tlet res = '';\n\tlet lastSegmentLength = 0;\n\tlet lastSlash = -1;\n\tlet dots = 0;\n\tlet code = 0;\n\tfor (let i = 0; i <= path.length; ++i) {\n\t\tif (i < path.length) {\n\t\t\tcode = path.charCodeAt(i);\n\t\t} else if (code === 47 /*/*/) {\n\t\t\tbreak;\n\t\t} else {\n\t\t\tcode = 47 /*/*/ ;\n\t\t}\n\t\tif (code === 47 /*/*/) {\n\t\t\tif (lastSlash === i - 1 || dots === 1) {\n\t\t\t\t// NOOP\n\t\t\t} else if (dots === 2) {\n\t\t\t\tif (\n\t\t\t\t\tres.length < 2 ||\n\t\t\t\t\tlastSegmentLength !== 2 ||\n\t\t\t\t\tres.charCodeAt(res.length - 1) !== 46 /*.*/ ||\n\t\t\t\t\tres.charCodeAt(res.length - 2) !== 46 /*.*/ \n\t\t\t\t) {\n\t\t\t\t\tif (res.length > 2) {\n\t\t\t\t\t\tconst lastSlashIndex = res.lastIndexOf('/');\n\t\t\t\t\t\tif (lastSlashIndex === -1) {\n\t\t\t\t\t\t\tres = '';\n\t\t\t\t\t\t\tlastSegmentLength = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres = res.slice(0, lastSlashIndex);\n\t\t\t\t\t\t\tlastSegmentLength = res.length - 1 - lastSlashIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastSlash = i;\n\t\t\t\t\t\tdots = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (res.length === 2 || res.length === 1) {\n\t\t\t\t\t\tres = '';\n\t\t\t\t\t\tlastSegmentLength = 0;\n\t\t\t\t\t\tlastSlash = i;\n\t\t\t\t\t\tdots = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allowAboveRoot) {\n\t\t\t\t\tres = res.length > 0 ? `${res}/..` : '..';\n\t\t\t\t\tlastSegmentLength = 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (res.length > 0) {\n\t\t\t\t\tres += `/${path.slice(lastSlash + 1, i)}`;\n\t\t\t\t} else {\n\t\t\t\t\tres = path.slice(lastSlash + 1, i);\n\t\t\t\t}\n\t\t\t\tlastSegmentLength = i - lastSlash - 1;\n\t\t\t}\n\t\t\tlastSlash = i;\n\t\t\tdots = 0;\n\t\t} else if (code === 46 /*.*/ && dots !== -1) {\n\t\t\t++dots;\n\t\t} else {\n\t\t\tdots = -1;\n\t\t}\n\t}\n\treturn res;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Class and Types in TypeScript for Rollup\nDESCRIPTION: This code defines the Asset class and related types used in Rollup. It includes properties for managing asset metadata, dependencies, and processing methods. The class is central to Rollup's asset handling and bundling process.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/custom-sanitizer/_expected/amd/_sset.txt#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NormalizedOutputOptions } from '../rollup/types';\nimport { PluginDriver } from './PluginDriver';\nimport { OutputChunk } from './Chunk';\nimport { RenderedChunk } from '../rollup/types';\nimport { BufferSourceObject } from '../utils/bufferSourceToString';\n\nexport interface Asset {\n\tfileName: string | null;\n\tname: string | null;\n\tsource: string | Uint8Array;\n\ttype: 'asset';\n}\n\nexport type AssetInfo = Omit<Asset, 'source'>;\n\nexport class Asset {\n\tfileName: string | null;\n\tname: string | null;\n\tsource: string | Uint8Array;\n\ttype: 'asset';\n\n\tconstructor(name: string | null, source: string | Uint8Array) {\n\t\tthis.fileName = null;\n\t\tthis.name = name;\n\t\tthis.source = source;\n\t\tthis.type = 'asset';\n\t}\n\n\tasync load(): Promise<string | Uint8Array> {\n\t\treturn this.source;\n\t}\n\n\ttoString(): string {\n\t\treturn typeof this.source === 'string' ? this.source : Buffer.from(this.source).toString('utf-8');\n\t}\n}\n\nexport function resolveAssetPath(\n\tasset: Asset,\n\tchunk: OutputChunk,\n\toptions: NormalizedOutputOptions\n): string {\n\tconst fileName = asset.fileName || options.assetFileNames(asset);\n\treturn chunk.getRelativePath(fileName);\n}\n\nexport function emitAsset(\n\tasset: Asset,\n\tpluginDriver: PluginDriver,\n\toptions: NormalizedOutputOptions\n): void {\n\tpluginDriver.emitFile({\n\t\ttype: 'asset',\n\t\tname: asset.name,\n\t\tsource: asset.source,\n\t\tfileName: asset.fileName\n\t});\n}\n\nexport function generateAsset(\n\tasset: Asset,\n\tpluginDriver: PluginDriver,\n\toptions: NormalizedOutputOptions\n): RenderedChunk {\n\treturn {\n\t\tcode: '',\n\t\tdynamicImports: [],\n\t\teslintIgnore: null,\n\t\texports: [],\n\t\tfacadeModuleId: null,\n\t\tfileName: asset.fileName!,\n\t\timportedBindings: {},\n\t\timports: [],\n\t\tisEntry: false,\n\t\tisImplicitEntry: false,\n\t\tmap: null,\n\t\tmoduleIds: [],\n\t\tname: asset.name,\n\t\treferencedFiles: [],\n\t\tsource: asset.source,\n\t\ttype: 'asset'\n\t};\n}\n\nexport function isAsset(file: any): file is Asset {\n\treturn file && file.type === 'asset';\n}\n\nexport function isBufferSource(source: any): source is BufferSourceObject {\n\treturn (\n\t\tsource instanceof ArrayBuffer ||\n\t\tsource instanceof Uint8Array ||\n\t\tsource instanceof Uint8ClampedArray ||\n\t\tsource instanceof Int8Array ||\n\t\tsource instanceof Uint16Array ||\n\t\tsource instanceof Int16Array ||\n\t\tsource instanceof Uint32Array ||\n\t\tsource instanceof Int32Array ||\n\t\tsource instanceof Float32Array ||\n\t\tsource instanceof Float64Array\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Start Message for Rollup Build in JavaScript\nDESCRIPTION: This function renders the start message for the Rollup build process. It formats and displays information about the build, including the number of entries, bundling mode, and watch status.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/cjs/renderStart.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function renderStart({\n\tentries,\n\toutdir,\n\tisBuild,\n\twatch\n}: {\n\tentries: readonly string[];\n\toutdir: string | undefined;\n\tisBuild: boolean;\n\twatch: boolean;\n}) {\n\tconst entriesString = entries.length === 1 ? 'entry' : 'entries';\n\tconst outDir = outdir ? ` to ${bold(outdir)}` : '';\n\tconst watchString = watch ? ', watching for changes...' : '';\n\tprocess.stdout.write(\n\t\tcyan(`rollup v${version} ${gray(`[${new Date().toLocaleTimeString()}]`)}`) +\n\t\t\t'\\n' +\n\t\t\tgreen(\n\t\t\t\t`${isBuild ? 'building' : 'bundling'} ${entries.length} ${entriesString}${outDir}${watchString}\\n`\n\t\t\t)\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Bundle Generation with ES Format\nDESCRIPTION: Demonstrates a bundle generation test case in Rollup with ES format specified. Shows the format type being set to 'es' and 'iife' with corresponding module transformations.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/assets/generateBundle-C9HFj0EF.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbundle = await bundle.generate({\n\tformat: 'es'\n});\n\nassert.equal(bundle.output[0].code, 'console.log(\\'Hello!\\');\\n');\n\nbundle = await bundle.generate({\n\tformat: 'iife'\n});\n\nassert.equal(\n\tbundle.output[0].code,\n\t'(function () {\\n\\t\\'use strict\\';\\n\\n\\tconsole.log(\\'Hello!\\');\\n\\n})();\\n'\n);\n```\n\n----------------------------------------\n\nTITLE: Polyfill Execution Order Example\nDESCRIPTION: This example illustrates how the execution order of polyfills can be affected during bundling. It shows a potential issue where external dependencies might be executed before polyfills when combined in a single bundle.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/faqs/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nimport './polyfill.js';\nimport 'external';\nconsole.log('main');\n\n// polyfill.js\nconsole.log('polyfill');\n```\n\n----------------------------------------\n\nTITLE: Bundling JavaScript for Node.js\nDESCRIPTION: Command to compile JavaScript into CommonJS module format for Node.js usage.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/introduction/index.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# compile to a CommonJS module ('cjs')\n$ rollup main.js --file bundle.js --format cjs\n```\n\n----------------------------------------\n\nTITLE: Exporting Named Value in CommonJS Module (JavaScript)\nDESCRIPTION: Shows how to export a named value in a CommonJS module when using 'named' export mode in Rollup.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// your-lib package entry\nexport const hello = 'Hello world';\n\n// a CommonJS consumer\n/* require( \"your-lib\" ) returns {hello: \"Hello World\"} */\nconst hello = require('your-lib').hello;\n/* or using destructuring */\nconst { hello } = require('your-lib');\n```\n\n----------------------------------------\n\nTITLE: Implementing custom resolveId with side effects in Rollup\nDESCRIPTION: This snippet demonstrates a resolveId implementation that modifies external variables as a side effect of the resolution process. It tracks resolved paths in a Set and includes a custom resolution for 'path'.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/resolveId.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolved = new Set();\n\nconst plugin = {\n\tresolveId ( importee ) {\n\t\tresolved.add( importee );\n\t\tif ( importee === 'path' ) {\n\t\t\treturn 'path';\n\t\t}\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Path.isAbsolute in Browser JavaScript\nDESCRIPTION: A simple function that determines whether a given path is absolute by checking if it starts with a forward slash. This is a browser-compatible implementation of Node.js path.isAbsolute for POSIX paths.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/assets/buildEnd-BuNl-RZp.txt#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function isAbsolute(path) {\n\treturn path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing buildStart Hook in Rollup\nDESCRIPTION: Function to handle the buildStart hook in Rollup's build process. The hook receives options as a parameter and is called at the start of each new build.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/buildStart-CNSwBoeG.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbuildStart\n```\n\n----------------------------------------\n\nTITLE: Generating Banner Text for Rollup in JavaScript\nDESCRIPTION: This function creates a formatted banner text for Rollup. It includes the Rollup version, dynamically calculates the copyright year range, and adds license information. The function takes the package.json content as a parameter to extract the version.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/cjs/assets/banner--qPJuKPL.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { version } from '../package.json';\n\nconst currentYear = new Date().getFullYear();\nconst startYear = 2017;\nconst yearRange = currentYear === startYear ? startYear : `${startYear}-${currentYear}`;\n\nexport default function(pkg) {\n\treturn `/*\n  @license\n\tRollup.js v${pkg.version || version}\n\thttps://github.com/rollup/rollup\n\t\n\tCopyright (c) ${yearRange} Rollup contributors (https://github.com/rollup/rollup/graphs/contributors)\n\n\tReleased under the MIT License.\n*/`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining renderChunk Hook in Rollup Plugin (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define the renderChunk hook in a Rollup plugin. The hook receives the code, rendering options, and chunk info as parameters and can return modified code or null.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/renderChunk-MxjJNaqP.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin() {\n  return {\n    name: 'my-plugin',\n    renderChunk(code, chunk, options) {\n      // plugin implementation\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup with Function-based External Dependencies in JavaScript\nDESCRIPTION: Rollup configuration using a function to determine external dependencies.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('rollup').RollupOptions} */\nexport default {\n\t// ...\n\texternal: id => /lodash/.test(id)\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Rollup Plugin with renderChunk Hook in JavaScript\nDESCRIPTION: This code demonstrates a Rollup plugin implementation that uses the renderChunk hook to log chunk names. It tests how chunk names are accessible within the plugin and shows the correct API usage for this hook.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/generate-emission-names/_expected/system/generated-with-names.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrenderChunk-with-names\n```\n\n----------------------------------------\n\nTITLE: Exporting Default and Named Values in CommonJS Module (JavaScript)\nDESCRIPTION: Illustrates how to export both default and named values in a CommonJS module and how to consume them.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// your-lib package entry\nexport default 'foo';\nexport const bar = 'bar';\n\n// a CommonJS consumer\n/* require( \"your-lib\" ) returns {default: \"foo\", bar: \"bar\"} */\nconst foo = require('your-lib').default;\nconst bar = require('your-lib').bar;\n/* or using destructuring */\nconst { default: foo, bar } = require('your-lib');\n```\n\n----------------------------------------\n\nTITLE: Live Bindings Example - Incrementer Module\nDESCRIPTION: Demonstrates how ES modules export live bindings rather than values. The incrementer module exports a count variable and a function to modify it.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// incrementer.js\nexport let count = 0;\n\nexport function increment() {\n\tcount += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Import Paths in RollupJS\nDESCRIPTION: This function retrieves possible import paths from a module ID by analyzing its parent directory structure, which enables path-related optimizations.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/load-B_kSChOq.txt#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getPossibleImportIds(id: string): string[] {\n\tlet partialPath = '';\n\tconst paths = id.split(/[\\\\\\/]/);\n\treturn paths.map(part => {\n\t\tpartialPath = partialPath ? `${partialPath}/${part}` : part;\n\t\treturn partialPath;\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Module Resolution Using Rollup Plugin\nDESCRIPTION: This test demonstrates custom module resolution by returning an object with an id property from the resolveId hook. The code verifies that Rollup correctly handles custom module IDs in the build process.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/resolveId.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n\tinput: 'input.js',\n\toutput: {\n\t\tformat: 'es'\n\t},\n\tplugins: [\n\t\t{\n\t\t\tname: 'custom-resolver',\n\t\t\tresolveId(source) {\n\t\t\t\tif (source === 'dep') {\n\t\t\t\t\treturn { id: path.resolve(__dirname, 'dep.js') };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n};\n```\n\n----------------------------------------\n\nTITLE: Transforming Module Source in RollupJS\nDESCRIPTION: This function creates a module by loading and transforming source code. It handles source maps, plugin transformations, and tracks module metadata.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/load-B_kSChOq.txt#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function loadAndParseModule({\n\tallowExternalIdCaching,\n\tasync,\n\tcustom,\n\tendId,\n\tfirstPass,\n\tload,\n\tmoduleContext,\n\tmoduleSideEffects,\n\tonLog,\n\tplugins,\n\tresolve,\n\tstackTraceLimit\n}: LoadAndParseModuleParam): Promise<Module> {\n\tconst moduleInstance = new Module(\n\t\tendId,\n\t\t{\n\t\t\tallowExternalIdCaching,\n\t\t\tasync,\n\t\t\tcustom,\n\t\t\tload,\n\t\t\tmodulesById: null!, // needed for TypeScript\n\t\t\tonLog,\n\t\t\tplugins,\n\t\t\tresolve\n\t\t},\n\t\tmoduleContext,\n\t\tfirstPass ? null : 'none',\n\t\tmoduleSideEffects\n\t);\n\tconst previousStackTraceLimit = Error.stackTraceLimit;\n\tError.stackTraceLimit = stackTraceLimit;\n\ttry {\n\t\treturn moduleInstance.loadAndSetSource();\n\t} catch (error_) {\n\t\tconst error = error_;\n\t\tif (!(error instanceof Error)) throw error;\n\t\tthrow augmentCodeLocation(error, moduleInstance.id);\n\t} finally {\n\t\tError.stackTraceLimit = previousStackTraceLimit;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMD Module Output in Rollup\nDESCRIPTION: Example of configuring Rollup to output AMD module format with define() wrapper and custom module ID.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/amd/generateBundle-format.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\namd\n```\n\n----------------------------------------\n\nTITLE: Generating Outro for Rollup Bundles in JavaScript\nDESCRIPTION: This code snippet defines a function that generates outro code for different module formats in Rollup bundles. It handles CommonJS, AMD, and IIFE formats, ensuring proper exports are generated based on the configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/assets/outro-D8xwWt8B.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { stringifyExports } from './utils/stringify-exports';\n\nexport default function outro(magicString, { exports, format, freeze, namespaceToStringTag }, options) {\n\tconst indentString = options.indent;\n\n\tif (format === 'cjs') {\n\t\tconst exportBlock = stringifyExports({ exports, format, indent: indentString, namedExportsMode: options.exportsNamedExportMode });\n\n\t\tif (exportBlock) magicString.append('\\n\\n' + exportBlock);\n\t\tif (options.esModule) magicString.append(`\\n\\nmodule.exports = ${exports.isValueDefined ? `${exports.name}__default` : exports.name};\\nmodule.exports.__esModule = true;`);\n\t}\n\n\tif (format === 'amd') {\n\t\tif (options.esModule) magicString.append(`\\n\\n${exports.name}.__esModule = true;`);\n\t\tmagicString.append('\\n\\n})');\n\t}\n\n\tif (format === 'es') {\n\t\t// noop\n\t}\n\n\tif (format === 'umd') {\n\t\tmagicString.append(`\\n\\n\\treturn exports;\\n\\n})));`);\n\t}\n\n\tif (format === 'iife') {\n\t\tif (options.esModule) magicString.append(`\\n\\n${exports.name}.__esModule = true;`);\n\n\t\tmagicString.append('\\n\\n})();');\n\t}\n\n\tif (format === 'system') {\n\t\tmagicString.append('\\n\\n});');\n\t}\n\n\tif (options.compact !== true) magicString.append('\\n');\n\n\treturn magicString;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMD output in Rollup (JavaScript)\nDESCRIPTION: This snippet demonstrates various AMD-related configuration options in Rollup, including setting an AMD ID, using autoId, specifying a basePath, and customizing the define function name.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nexport default {\n\t// ...\n\toutput: {\n\t\tformat: 'amd',\n\t\tamd: {\n\t\t\tid: 'my-bundle'\n\t\t}\n\t}\n};\n\n// -> define('my-bundle', ['dependency'], ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nexport default {\n\t// ...\n\toutput: {\n\t\tformat: 'amd',\n\t\tamd: {\n\t\t\tautoId: true\n\t\t}\n\t}\n};\n\n// -> define('main', ['dependency'], ...\n// -> define('dynamic-chunk', ['dependency'], ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nexport default {\n\t// ...\n\toutput: {\n\t\tformat: 'amd',\n\t\tamd: {\n\t\t\tautoId: true,\n\t\t\tbasePath: 'some/where'\n\t\t}\n\t}\n};\n\n// -> define('some/where/main', ['dependency'], ...\n// -> define('some/where/dynamic-chunk', ['dependency'], ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nexport default {\n\t// ...\n\toutput: {\n\t\tformat: 'amd',\n\t\tamd: {\n\t\t\tdefine: 'def'\n\t\t}\n\t}\n};\n\n// -> def(['dependency'],...\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nexport default {\n\t// ...\n\toutput: {\n\t\tformat: 'amd',\n\t\tamd: {\n\t\t\tforceJsExtensionForImports: true\n\t\t}\n\t}\n};\n\n// -> define(['./chunk-or-local-file.js', 'dependency', 'third/dependency'],...\n```\n\n----------------------------------------\n\nTITLE: Custom resolveId with Importer Information\nDESCRIPTION: An advanced resolveId implementation that uses the importer parameter to determine context-dependent resolution. This allows for different resolution logic based on which module is importing the source.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/resolveId.txt#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// using the importer information\nconst contextAwarePlugin = {\n  name: 'context-aware-plugin',\n  resolveId(source, importer) {\n    // Can use importer to determine how to resolve the source\n    if (importer && importer.includes('special-directory')) {\n      return path.resolve('special-path', source);\n    }\n    return null; // Let Rollup handle it\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing externalLiveBindings Output in CommonJS (JavaScript)\nDESCRIPTION: Demonstrates the difference in output when externalLiveBindings is set to true or false in Rollup configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// input\nexport { x } from 'external';\n\n// CJS output with externalLiveBindings: true\nvar external = require('external');\n\nObject.defineProperty(exports, 'x', {\n\tenumerable: true,\n\tget: function () {\n\t\treturn external.x;\n\t}\n});\n\n// CJS output with externalLiveBindings: false\nvar external = require('external');\n\nexports.x = external.x;\n```\n\n----------------------------------------\n\nTITLE: Defining Named Export Resolution Function Type in TypeScript\nDESCRIPTION: TypeScript declaration for a function that resolves a named export from a module. The function takes a name string and returns the resolved identifier, with options for validation and dealing with non-existent exports.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/deduplicate-assets/_expected/es/named/string.txt#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ResolveDynamicImportFunction = (specifier: string, parentId: string) => Promise<{id: string} | string | void>;\n\nexport type GetNameFunction = (name: string) => string;\n\nexport default function named(file: string, getNameFn?: GetNameFunction): { id: string; name: string };\nexport default function named(file: string, name: string, getNameFn?: GetNameFunction): { id: string; name: string };\n\n```\n\n----------------------------------------\n\nTITLE: Including Rollup via UMD Build Script Tag\nDESCRIPTION: How to include Rollup in a webpage using a script tag with the UMD build from unpkg CDN. This creates a global window.rollup variable.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/faqs/index.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@rollup/browser/dist/rollup.browser.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Class for Rollup in JavaScript\nDESCRIPTION: This code defines the Asset class used in Rollup to represent bundled assets. It includes properties for content, fileName, source, and various flags for different asset types and states. The class also provides methods for setting and getting these properties.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/custom-sanitizer/_expected/cjs/_sset.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport class Asset {\n\tconstructor(name, source, type = 'asset') {\n\t\tthis.name = name;\n\t\tthis.source = source;\n\t\tthis.type = type;\n\t\tthis.fileName = undefined;\n\t\tthis.isAsset = true;\n\t\tthis.modules = undefined;\n\t}\n\n\tgetChunkHash(outputOptions, bundle) {\n\t\tconst hash = createHash();\n\t\thash.update(this.name);\n\t\thash.update(this.source ? String(this.source) : '');\n\t\thash.update(outputOptions.format);\n\t\treturn hash.digest('hex').slice(0, 8);\n\t}\n\n\tsetFileName(fileName) {\n\t\tthis.fileName = fileName;\n\t}\n\n\tgenerate(usedModules) {\n\t\treturn { code: this.source ? String(this.source) : undefined };\n\t}\n\n\tget exports() {\n\t\treturn undefined;\n\t}\n\n\tget facadeModuleId() {\n\t\treturn this.name;\n\t}\n\n\tget isDynamicEntry() {\n\t\treturn false;\n\t}\n\n\tget isEntry() {\n\t\treturn false;\n\t}\n\n\tget isImplicitEntry() {\n\t\treturn false;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Rollup via ESM CDN\nDESCRIPTION: How to import Rollup directly from an unpkg CDN using ES modules.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/faqs/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as rollup from 'https://unpkg.com/@rollup/browser/dist/es/rollup.browser.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Solved Assets in JavaScript\nDESCRIPTION: This snippet defines the Rollup configuration for the 'solved' project. It specifies input and output paths, applies plugins for handling CSS, images, and other assets, and sets up the build process with various options.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/amd/assets/asset-solved-DSjIjiFN.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineConfig } from 'rollup';\nimport postcss from 'rollup-plugin-postcss';\nimport image from '@rollup/plugin-image';\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\nimport { terser } from 'rollup-plugin-terser';\nimport filesize from 'rollup-plugin-filesize';\nimport autoprefixer from 'autoprefixer';\n\nexport default defineConfig({\n  input: 'app/javascript/application.js',\n  output: {\n    file: 'app/assets/builds/application.js',\n    format: 'es',\n    sourcemap: true\n  },\n  plugins: [\n    postcss({\n      extract: true,\n      minimize: true,\n      plugins: [\n        autoprefixer()\n      ]\n    }),\n    image(),\n    nodeResolve(),\n    commonjs(),\n    terser(),\n    filesize()\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Empty Import in JavaScript ES Modules\nDESCRIPTION: Demonstrates how to load module code without making any new objects available. This is useful for polyfills or when the imported code modifies prototypes.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport './module.js';\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Value in CommonJS Module (JavaScript)\nDESCRIPTION: Demonstrates how to export a default value in a CommonJS module when using 'default' export mode in Rollup.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// your-lib package entry\nexport default 'Hello world';\n\n// a CommonJS consumer\n/* require( \"your-lib\" ) returns \"Hello World\" */\nconst hello = require('your-lib');\n```\n\n----------------------------------------\n\nTITLE: Implementing custom resolveId with direct resolution in Rollup\nDESCRIPTION: This snippet defines a plugin that implements a custom resolveId function to directly resolve module IDs based on specific import requests. It resolves 'foo' to './bar.js' and 'baz' to an absolute path.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/resolveId.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tresolveId ( importee ) {\n\t\tif ( importee === 'foo' ) {\n\t\t\treturn './bar.js';\n\t\t}\n\t\tif ( importee === 'baz' ) {\n\t\t\treturn '/path/to/baz.js';\n\t\t}\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Rollup Treeshake Preset Configuration\nDESCRIPTION: Example of configuring treeshake preset while overriding specific options.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\ttreeshake: {\n\t\tpreset: 'smallest',\n\t\tpropertyReadSideEffects: true\n\t}\n\t// ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TransformResult Type for Module Transformation Results\nDESCRIPTION: Defines the TransformResult type which can be either a SourceDescription object or a string representing transformed code. This is the return type for transform hooks in plugins.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/assets/transform-9DaiUiOT.txt#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TransformResult = string | SourceDescription | null | undefined;\n```\n\n----------------------------------------\n\nTITLE: Exporting Named Functions in JavaScript Module\nDESCRIPTION: This code exports two named functions (test and another) from a JavaScript module. These exports will be processed by Rollup's build system and potentially modified by plugins during bundling.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/generate-emission-names/_expected/amd/generated-with-names.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function test() {\n\tconsole.log('test');\n}\n\nexport function another() {\n\tconsole.log('another');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransformHook Function Type for Rollup Plugins\nDESCRIPTION: Defines the TransformHook function type that represents the transform hook in Rollup plugins. It takes the code string, module ID, and options and returns a promise or direct result of the transformation.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/assets/transform-9DaiUiOT.txt#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TransformHook = (\n\tthis: TransformPluginContext,\n\tcode: string,\n\tid: string,\n\toptions?: { ssr?: boolean }\n) => Promise<TransformResult> | TransformResult;\n```\n\n----------------------------------------\n\nTITLE: Testing Banner Text Generation in Rollup.js\nDESCRIPTION: Test suite verifying banner configuration with different input values including string literals, functions, and objects with toString. Shows handling of both synchronous and asynchronous banner generation.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('allows a string banner', async t => {\n\tconst bundle = await rollup({\n\t\tinput: 'input',\n\t\tplugins: [\n\t\t\tloader({ input: '' }),\n\t\t\t{\n\t\t\t\tname: 'test',\n\t\t\t\tbanner: '/* hello world */',\n\t\t\t}\n\t\t]\n\t});\n\tconst { output } = await bundle.generate({ format: 'es' });\n\tconst [{ code }] = output;\n\tt.is(code.slice(0, 17), '/* hello world */\\n');\n});\n\ntest('allows a function banner', async t => {\n\tconst bundle = await rollup({\n\t\tinput: 'input',\n\t\tplugins: [\n\t\t\tloader({ input: '' }),\n\t\t\t{\n\t\t\t\tname: 'test',\n\t\t\t\tbanner: () => '/* hello world */',\n\t\t\t}\n\t\t]\n\t});\n\tconst { output } = await bundle.generate({ format: 'es' });\n\tconst [{ code }] = output;\n\tt.is(code.slice(0, 17), '/* hello world */\\n');\n});\n\ntest('allows an object string banner', async t => {\n\tconst bundle = await rollup({\n\t\tinput: 'input',\n\t\tplugins: [\n\t\t\tloader({ input: '' }),\n\t\t\t{\n\t\t\t\tname: 'test',\n\t\t\t\tbanner: {\n\t\t\t\t\ttoString: () => '/* hello world */'\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t});\n\tconst { output } = await bundle.generate({ format: 'es' });\n\tconst [{ code }] = output;\n\tt.is(code.slice(0, 17), '/* hello world */\\n');\n});\n\ntest('allows an async function banner', async t => {\n\tconst bundle = await rollup({\n\t\tinput: 'input',\n\t\tplugins: [\n\t\t\tloader({ input: '' }),\n\t\t\t{\n\t\t\t\tname: 'test',\n\t\t\t\tbanner: async () => '/* hello world */'\n\t\t\t}\n\t\t]\n\t});\n\tconst { output } = await bundle.generate({ format: 'es' });\n\tconst [{ code }] = output;\n\tt.is(code.slice(0, 17), '/* hello world */\\n');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File as Global Variable in Rollup\nDESCRIPTION: Example of telling Rollup to replace a local file with a global variable by using an absolute ID. This demonstrates how to handle local files that should not be bundled.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileURLToPath } from 'node:url';\nconst externalId = fileURLToPath(\n\tnew URL(\n\t\t'src/some-local-file-that-should-not-be-bundled.js',\n\t\timport.meta.url\n\t)\n);\n\nexport default {\n\t//...,\n\texternal: [externalId],\n\toutput: {\n\t\tformat: 'iife',\n\t\tname: 'MyBundle',\n\t\tglobals: {\n\t\t\t[externalId]: 'globalVariable'\n\t\t}\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Increasing Node.js Memory Limit for Rollup\nDESCRIPTION: Shows how to increase Node.js memory limit when running Rollup to handle large projects that exceed the default memory allocation.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/troubleshooting/index.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode --max-old-space-size=8192 node_modules/rollup/dist/bin/rollup -c\n```\n\n----------------------------------------\n\nTITLE: IIFE Module Format with Global Variable Assignment\nDESCRIPTION: Demonstrates an Immediately Invoked Function Expression (IIFE) pattern that assigns a module to a global variable, accepting external dependencies as parameters.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/outro.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function (factory) {\n\tthis.foo = factory(this.external);\n}(function (external) { 'use strict';\n\nvar name = 'foo';\n\nreturn name;\n\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Rollup Logging\nDESCRIPTION: TypeScript type definitions for Rollup's logging system, including log levels and the RollupLog interface that defines the structure of log messages.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype LogLevel = 'warn' | 'info' | 'debug';\n\ntype LogOrStringHandler = (\n\tlevel: LogLevel | 'error',\n\tlog: string | RollupLog\n) => void;\n\n// All possible properties, actual properties depend on log\ninterface RollupLog {\n\tbinding?: string;\n\tcause?: Error;\n\tcode?: string;\n\texporter?: string;\n\tframe?: string; // always printed by the CLI\n\thook?: string;\n\tid?: string; // always printed by the CLI\n\tids?: string[];\n\tloc?: {\n\t\tcolumn: number;\n\t\tfile?: string;\n\t\tline: number;\n\t}; // always printed by the CLI if id is present\n\tmessage: string; // the actual message, always printed by the CLI\n\tmeta?: any; // add custom plugin properties to logs\n\tnames?: string[];\n\tplugin?: string; // added by Rollup for plugin logs, only printed for warnings\n\tpluginCode?: string; // added by Rollup for plugin logs that contain a code\n\tpos?: number;\n\treexporter?: string;\n\tstack?: string; // url for additional information, always printed by the CLI\n\turl?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Const Bindings Usage in Generated Code\nDESCRIPTION: Shows how the constBindings option affects generated code structure, demonstrating the difference between using var and const declarations.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// input\nexport * from 'external';\n\n// cjs output with constBindings: false\nvar external = require('external');\n\nObject.keys(external).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k))\n\t\tObject.defineProperty(exports, k, {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn external[k];\n\t\t\t}\n\t\t});\n});\n\n// cjs output with constBindings: true\nconst external = require('external');\n\nfor (const k in external) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k))\n\t\tObject.defineProperty(exports, k, {\n\t\t\tenumerable: true,\n\t\t\tget: () => external[k]\n\t\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Banner to Rollup Output\nDESCRIPTION: Demonstrates how to use rollup-plugin-banner to add a basic banner comment to the top of Rollup output files. This approach uses a simple string to create a standard banner with copyright information.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport banner from 'rollup-plugin-banner';\n\nexport default {\n  input: 'src/index.js',\n  output: {\n    file: 'dist/bundle.js',\n    format: 'cjs'\n  },\n  plugins: [\n    banner('/* my-library v1.0.0 */'),\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing buildEnd Hook in Rollup Plugin (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to implement the buildEnd hook in a Rollup plugin. The hook is called when the build finishes and gives the plugin an opportunity to clean up resources. The example shows error handling logic for the hook.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/buildEnd.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPlugin = {\n  name: 'my-plugin',\n  buildEnd(error) {\n    if (error) {\n      // The build failed\n    }\n    // Clean up your plugin resources here\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Rollup.js Homepage with VitePress Frontmatter\nDESCRIPTION: This YAML frontmatter section configures the homepage for the rollup.js documentation website, defining the hero section with title, description, and action buttons, along with six feature sections highlighting key capabilities of the bundler.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: home\n\nhero:\n  name: rollup.js\n  text: The JavaScript module bundler\n  tagline: Compile small pieces of code into something larger and more complex\n  image: /rollup-logo.svg\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /introduction/\n    - theme: alt\n      text: View on GitHub\n      link: https://github.com/rollup/rollup\nfeatures:\n  - icon: 🌍\n    title: The Web, Node …\n    details: 'Rollup supports many output formats: ES modules, CommonJS, UMD, SystemJS and more. Bundle not only for the web but for many other platforms as well.'\n    link: /configuration-options/#output-format\n    linkText: See all formats\n  - icon: 🌳\n    title: Tree-shaking\n    details: Superior dead code elimination based on deep execution path analysis with the tool that brought tree-shaking to the JavaScript world.\n    link: /faqs/#what-is-tree-shaking\n    linkText: Learn about tree-shaking\n  - icon: 🗡️\n    title: Code-splitting without overhead\n    details: Split code based on different entry points and dynamic imports by just using the import mechanism of the output format instead of customer loader code.\n    link: /tutorial/#code-splitting\n    linkText: How to use code-splitting\n  - icon: 🔌\n    title: Powerful plugins\n    details: An easy to learn plugin API that allows you to implement powerful code injections and transformations with little code. Adopted by Vite and WMR.\n    link: /plugin-development/#plugins-overview\n    linkText: Learn how to write plugins\n  - icon: 🛠️\n    title: Handles your special needs\n    details: Rollup is not opinionated. Many configuration options and a rich plugin interface make it the ideal bundler for special build flows and higher level tooling.\n    link: /configuration-options/\n    linkText: See all options\n  - icon:\n      src: /vitejs-logo.svg\n    title: The bundler behind Vite\n    details: Developing for the web? Vite pre-configures Rollup for you with sensible defaults and powerful plugins while giving you an insanely fast development server.\n    link: https://vitejs.dev/\n    linkText: Check out Vite\n---\n```\n\n----------------------------------------\n\nTITLE: Visualizing renderStart Output with Customized Formatting in Rollup\nDESCRIPTION: This code example demonstrates how to customize the output of the renderStart phase in Rollup with different formatting options. It includes various display options like green text, bold yellow text, and white inverted text to enhance the visual representation of build information.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/renderStart.txt#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nrenderStart-custom\n```\n\n----------------------------------------\n\nTITLE: Rollup Command Line Flags Reference\nDESCRIPTION: A comprehensive list of all supported command line options for Rollup. This includes configuration flags, output options, module handling, sourcemap configuration, and various optimization settings.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n-c, --config <filename>     Use this config file (if argument is used but value\n                              is unspecified, defaults to rollup.config.js)\n-d, --dir <dirname>         Directory for chunks (if absent, prints to stdout)\n-e, --external <ids>        Comma-separate list of module IDs to exclude\n-f, --format <format>       Type of output (amd, cjs, es, iife, umd, system)\n-g, --globals <pairs>       Comma-separate list of `moduleID:Global` pairs\n-h, --help                  Show this help message\n-i, --input <filename>      Input (alternative to <entry file>)\n-m, --sourcemap             Generate sourcemap (`-m inline` for inline map)\n-n, --name <name>           Name for UMD export\n-o, --file <output>         Single output file (if absent, prints to stdout)\n-p, --plugin <plugin>       Use the plugin specified (may be repeated)\n-v, --version               Show version number\n-w, --watch                 Watch files in bundle and rebuild on changes\n--amd.autoId                Generate the AMD ID based off the chunk name\n--amd.basePath <prefix>     Path to prepend to auto generated AMD ID\n--amd.define <name>         Function to use in place of `define`\n--amd.forceJsExtensionForImports Use `.js` extension in AMD imports\n--amd.id <id>               ID for AMD module (default is anonymous)\n--assetFileNames <pattern>  Name pattern for emitted assets\n--banner <text>             Code to insert at top of bundle (outside wrapper)\n--chunkFileNames <pattern>  Name pattern for emitted secondary chunks\n--compact                   Minify wrapper code\n--context <variable>        Specify top-level `this` value\n--no-dynamicImportInCjs     Write external dynamic CommonJS imports as require\n--entryFileNames <pattern>  Name pattern for emitted entry chunks\n--environment <values>      Settings passed to config file (see example)\n--no-esModule               Do not add __esModule property\n--exports <mode>            Specify export mode (auto, default, named, none)\n--extend                    Extend global variable defined by --name\n--no-externalImportAttributes Omit import attributes in \"es\" output\n--no-externalLiveBindings   Do not generate code to support live bindings\n--failAfterWarnings         Exit with an error if the build produced warnings\n--filterLogs <filter>       Filter log messages\n--footer <text>             Code to insert at end of bundle (outside wrapper)\n--forceExit                 Force exit the process when done\n--no-freeze                 Do not freeze namespace objects\n--generatedCode <preset>    Which code features to use (es5/es2015)\n--generatedCode.arrowFunctions Use arrow functions in generated code\n--generatedCode.constBindings Use \"const\" in generated code\n--generatedCode.objectShorthand Use shorthand properties in generated code\n--no-generatedCode.reservedNamesAsProps Always quote reserved names as props\n--generatedCode.symbols     Use symbols in generated code\n--hashCharacters <name>     Use the specified character set for file hashes\n--no-hoistTransitiveImports Do not hoist transitive imports into entry chunks\n--importAttributesKey <name> Use the specified keyword for import attributes\n--no-indent                 Don't indent result\n--inlineDynamicImports      Create single bundle when using dynamic imports\n--no-interop                Do not include interop block\n--intro <text>              Code to insert at top of bundle (inside wrapper)\n--logLevel <level>          Which kind of logs to display\n--no-makeAbsoluteExternalsRelative Prevent normalization of external imports\n--maxParallelFileOps <value> How many files to read in parallel\n--minifyInternalExports     Force or disable minification of internal exports\n--noConflict                Generate a noConflict method for UMD globals\n--outro <text>              Code to insert at end of bundle (inside wrapper)\n--perf                      Display performance timings\n--no-preserveEntrySignatures Avoid facade chunks for entry points\n--preserveModules           Preserve module structure\n--preserveModulesRoot       Put preserved modules under this path at root level\n--preserveSymlinks          Do not follow symlinks when resolving files\n--no-reexportProtoFromExternal Ignore `__proto__` in star re-exports\n--no-sanitizeFileName       Do not replace invalid characters in file names\n--shimMissingExports        Create shim variables for missing exports\n--silent                    Don't print warnings\n--sourcemapBaseUrl <url>    Emit absolute sourcemap URLs with given base\n--sourcemapDebugIds         Emit unique debug ids in source and sourcemaps\n--sourcemapExcludeSources   Do not include source code in source maps\n--sourcemapFile <file>      Specify bundle position for source maps\n--sourcemapFileNames <pattern> Name pattern for emitted sourcemaps\n--stdin=ext                 Specify file extension used for stdin input\n--no-stdin                  Do not read \"-\" from stdin\n--no-strict                 Don't emit `\"use strict\";` in the generated modules\n--strictDeprecations        Throw errors for deprecated features\n--no-systemNullSetters      Do not replace empty SystemJS setters with `null`\n--no-treeshake              Disable tree-shaking optimisations\n--no-treeshake.annotations  Ignore pure call annotations\n--treeshake.correctVarValueBeforeDeclaration Deoptimize variables until declared\n--treeshake.manualPureFunctions <names> Manually declare functions as pure\n--no-treeshake.moduleSideEffects Assume modules have no side effects\n--no-treeshake.propertyReadSideEffects Ignore property access side effects\n--no-treeshake.tryCatchDeoptimization Do not turn off try-catch-tree-shaking\n--no-treeshake.unknownGlobalSideEffects Assume unknown globals do not throw\n--validate                  Validate output\n--waitForBundleInput        Wait for bundle input files\n--watch.buildDelay <number> Throttle watch rebuilds\n--no-watch.clearScreen      Do not clear the screen when rebuilding\n--watch.exclude <files>     Exclude files from being watched\n--watch.include <files>     Limit watching to specified files\n--watch.onBundleEnd <cmd>   Shell command to run on `\"BUNDLE_END\"` event\n--watch.onBundleStart <cmd> Shell command to run on `\"BUNDLE_START\"` event\n--watch.onEnd <cmd>         Shell command to run on `\"END\"` event\n--watch.onError <cmd>       Shell command to run on `\"ERROR\"` event\n--watch.onStart <cmd>       Shell command to run on `\"START\"` event\n--watch.skipWrite           Do not write files to disk when watching\n```\n\n----------------------------------------\n\nTITLE: Importing External File for Rollup Banner\nDESCRIPTION: This configuration demonstrates importing an external file to use as a banner in Rollup. It uses the 'fs' module to read the content of a LICENSE file synchronously.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/banner.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync } from 'fs';\n\nexport default {\n\tinput: 'main.js',\n\toutput: {\n\t\tfile: 'bundle.js',\n\t\tformat: 'esm',\n\t\tbanner: readFileSync('LICENSE', 'utf-8')\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Resolve Type in Rollup Plugin API\nDESCRIPTION: Typescript type definition for the resolve method in Rollup's plugin API. This method handles import resolution, determining module IDs and whether imports should be external.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ntype Resolve = (\n\tsource: string,\n\timporter?: string,\n\toptions?: {\n\t\tskipSelf?: boolean;\n\t\tisEntry?: boolean;\n\t\tattributes?: { [key: string]: string };\n\t\tcustom?: { [plugin: string]: any };\n\t}\n) => ResolvedId;\n```\n\n----------------------------------------\n\nTITLE: Finding the Next Line Break in a String in TypeScript\nDESCRIPTION: A function that locates the position of the next line break in a string starting from a given index. It handles both '\\r\\n' and '\\n' line endings.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/asset-needs-code-reference-same-source/_expected/system/needs-reference3.txt#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getNextLineBreak(source: string, position: number): number {\n\tconst nextLineBreakPos = source.indexOf('\\n', position);\n\treturn nextLineBreakPos === -1 ? source.length : nextLineBreakPos;\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Legacy Links to Guide Pages in Vue 3 with TypeScript\nDESCRIPTION: This script checks if the code is running in a browser environment, then uses the VitePress router to redirect the user to the appropriate guide page based on the current URL hash. It's designed to handle legacy links in the Rollup documentation.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/guide/en.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useRouter } from \"vitepress\"; \n\nif (typeof window !== \"undefined\") {\n  const { go } = useRouter();\n  go(`/guide/en/${location.hash}`);\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining a Rollup Plugin renderChunk Method in TypeScript\nDESCRIPTION: This code snippet demonstrates the signature of the renderChunk hook method used in Rollup plugins. It allows transforming chunks after they have been rendered but before they're written to disk. The method receives the generated code, chunk information, and output options as parameters.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/cjs/assets/renderChunk-MxjJNaqP.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrenderChunk(code: string, chunk: RenderedChunk, options: NormalizedOutputOptions): string | null | { code: string; map?: SourceMapInput } | Promise<string | null | { code: string; map?: SourceMapInput }>\n```\n\n----------------------------------------\n\nTITLE: Initializing Build Process Example with buildStart Hook\nDESCRIPTION: Example showing how to use the buildStart hook in a Rollup plugin to perform initialization steps at the start of a build process. The hook receives options and can return a promise for async operations.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/buildStart-CNSwBoeG.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbuildStart(options) {\n  console.log('build starting...');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic resolveId Hook in Rollup Plugin\nDESCRIPTION: A simple example of implementing the resolveId hook in a Rollup plugin that resolves 'virtual-module' to a fixed path. The hook also marks any node_modules dependencies as external.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/resolveId.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// plugin implementation\nconst myPlugin = {\n  name: 'my-plugin',\n  resolveId(source) {\n    if (source === 'virtual-module') {\n      return 'path/to/actual-module.js';\n    }\n    if (source.includes('node_modules')) {\n      return { id: source, external: true };\n    }\n    return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for JavaScript Module Bundling\nDESCRIPTION: This snippet defines a Rollup configuration object with various options for input, output, plugins, and build settings. It specifies the entry point, output format, sourcemap generation, and uses several plugins for optimizing the bundle.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/system/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { readFileSync } from 'node:fs';\nimport path from 'node:path';\nimport babel from '@rollup/plugin-babel';\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\nimport replace from '@rollup/plugin-replace';\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\nimport { string } from 'rollup-plugin-string';\nimport { terser } from 'rollup-plugin-terser';\nimport { fileURLToPath } from 'node:url';\n\nconst commitHash = (function () {\n\ttry {\n\t\treturn readFileSync('.commithash', 'utf-8').trim();\n\t} catch (err) {\n\t\treturn 'unknown';\n\t}\n})();\n\nconst packagesDir = fileURLToPath(new URL('packages', import.meta.url));\n\nconst banner = readFileSync('banner.js', 'utf-8')\n\t.replace('${VERSION}', process.env.npm_package_version)\n\t.replace('${TIME}', new Date().toUTCString())\n\t.replace('${COMMIT_HASH}', commitHash);\n\nconst moduleAliases = {\n\thelpers: path.resolve(packagesDir, 'rollup/src/utils/additionalHelpers.js'),\n\t'package.json': path.resolve(packagesDir, 'rollup/package.json')\n};\n\nfunction addPackageReplacePlugin(pkg) {\n\treturn replace({\n\t\tpreventAssignment: true,\n\t\tvalues: {\n\t\t\t__VERSION__: pkg.version\n\t\t}\n\t});\n}\n\nconst onwarnRollup = (warning) => {\n\tif (warning.code === 'CIRCULAR_DEPENDENCY') {\n\t\tif (warning.importer.startsWith('node_modules')) {\n\t\t\treturn;\n\t\t}\n\t\tconsole.error(warning.message);\n\t\tprocess.exit(1);\n\t}\n};\n\nexport default function(commandLineArgs) {\n\tconst { collectLicenses, job } = commandLineArgs;\n\tconst outputFile = `dist/rollup.${job}.js`;\n\tconst targetDir = path.dirname(outputFile);\n\n\tconst acornInjectPlugins = [];\n\tif (job.startsWith('es') || job.startsWith('browser')) {\n\t\tacornInjectPlugins.push('acorn-jsx');\n\t}\n\tif (job.startsWith('es')) {\n\t\tacornInjectPlugins.push('acorn-importAssertions');\n\t}\n\n\tconst config = {\n\t\tinput: 'packages/rollup/src/node-entry.ts',\n\t\tplug ins: [\n\t\t\treplace({\n\t\t\t\tpreventAssignment: true,\n\t\t\t\tdelimiters: ['', ''],\n\t\t\t\tvalues: {\n\t\t\t\t\t__importMetaResolve:\n\t\t\t\t\t\tjob === 'es'\n\t\t\t\t\t\t\t? 'importMetaResolve'\n\t\t\t\t\t\t\t: 'getImportMetaUrlResolveFn(require(\"url\").pathToFileURL(__filename))'\n\t\t\t\t}\n\t\t\t}),\n\t\t\taddPackageReplacePlugin(JSON.parse(readFileSync('package.json', 'utf8'))),\n\t\t\tnodeResolve({\n\t\t\t\tpreferBuiltins: true\n\t\t\t}),\n\t\t\tjson(),\n\t\t\tcommonjs({\n\t\t\t\tinclude: 'node_modules/**',\n\t\t\t\tignore: ['node_modules/rollup-plugin-node-polyfills/**'],\n\t\t\t\tignoreGlobal: true\n\t\t\t}),\n\t\t\tbabel({\n\t\t\t\tbabelHelpers: 'bundled'\n\t\t\t}),\n\t\t\tstring({ include: '**/*.md' })\n\t\t],\n\t\t// Disable tree-shaking for Rollup itself for two reasons:\n\t\t// 1. Constructors have side effects, and at least one class (Graph) is implicitly\n\t\t//    instantiated as a default export\n\t\t// 2. There seems to be a tree-shaking bug in Rollup that causes a TypeError for\n\t\t//    circular dependencies of classes with getters\n\t\ttreeshake: job.startsWith('browser'),\n\t\tonwarn: onwarnRollup\n\t};\n\n\tlet format;\n\n\tif (job.startsWith('es')) {\n\t\tformat = 'es';\n\t} else if (job.startsWith('cjs')) {\n\t\tformat = 'cjs';\n\t} else if (job.startsWith('browser')) {\n\t\tconfig.input = 'packages/rollup/src/browser-entry.ts';\n\t\tformat = job === 'browser-es' ? 'es' : 'umd';\n\t}\n\n\tconfig.output = {\n\t\tfile: outputFile,\n\t\tformat,\n\t\tname: 'rollup',\n\t\tfreeze: false,\n\t\tbanner,\n\t\tamd: {\n\t\t\tid: 'rollup'\n\t\t}\n\t};\n\n\tif (collectLicenses) {\n\t\tconfig.output.banner +=\n\t\t\t'\\n//\\n' + readFileSync(path.resolve(targetDir, 'dependencies.txt'), 'utf8');\n\t}\n\n\tconfig.output.sourcemap = true;\n\n\tif (job === 'browser' || job === 'browser-min') {\n\t\tconfig.output.globals = { fsevents: 'fsevents' };\n\t}\n\n\tif (job.endsWith('-min')) {\n\t\tconfig.plugins.push(\n\t\t\tterser({\n\t\t\t\tmodule: job === 'es-min',\n\t\t\t\tmangle: {\n\t\t\t\t\tproperties: { regex: /^__/ }\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\treturn config;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration in Package.json\nDESCRIPTION: Shows how to configure Rollup environment variables in package.json scripts\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"build\": \"rollup -c --environment INCLUDE_DEPS,BUILD:production\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup with Custom Banner\nDESCRIPTION: This snippet shows the configuration for Rollup with a custom banner. It imports required plugins, sets up the input and output options, and includes a banner option with a custom message.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rollup } from 'rollup';\nimport hello from 'rollup-plugin-hello';\n\nconst inputOptions = {\n\tinput: 'main.js',\n\tplugins: [hello()]\n};\nconst outputOptions = {\n\tfile: 'bundle.js',\n\tformat: 'iife',\n\tbanner: '/* my-library version ' + version + ' */'\n};\n\nrollup(inputOptions)\n\t.then(bundle => bundle.write(outputOptions))\n\t.then(() => console.log('done'));\n```\n\n----------------------------------------\n\nTITLE: Defining RenderChunk Hook Types in TypeScript\nDESCRIPTION: TypeScript types defining the structure of the renderChunk hook and related interfaces used for chunk transformation in Rollup plugins.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype RenderChunkHook = (\n\tcode: string,\n\tchunk: RenderedChunk,\n\toptions: NormalizedOutputOptions,\n\tmeta: { chunks: Record<string, RenderedChunk> }\n) => { code: string; map?: SourceMapInput } | string | null;\n\ninterface RenderedChunk {\n\tdynamicImports: string[];\n\texports: string[];\n\tfacadeModuleId: string | null;\n\tfileName: string;\n\timplicitlyLoadedBefore: string[];\n\timportedBindings: {\n\t\t[imported: string]: string[];\n\t};\n\timports: string[];\n\tisDynamicEntry: boolean;\n\tisEntry: boolean;\n\tisImplicitEntry: boolean;\n\tmoduleIds: string[];\n\tmodules: {\n\t\t[id: string]: RenderedModule;\n\t};\n\tname: string;\n\treferencedFiles: string[];\n\ttype: 'chunk';\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Render Start Position in JavaScript\nDESCRIPTION: Function that determines the starting position for rendering code by evaluating statement positions and whitespace. Returns the rendered/fixed column start position after considering line breaks and indentation.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/system/assets/renderStart-B4XObdBk.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderStart(statement, node, code, chars) {\n\tif (\n\t\tnode.type === ExpressionStatement &&\n\t\tnode.expression.type === 'ParenthesizedExpression' &&\n\t\tcode.slice(statement.start, statement.start + 1) === '('\n\t) {\n\t\tlet c = chars;\n\t\treturn start => {\n\t\t\tif (c) {\n\t\t\t\twhile (c--) code = code.slice(code.indexOf('\\n') + 1);\n\t\t\t\treturn start - statement.start;\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\t}\n\treturn () => 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Generating Assets in Rollup Bundle\nDESCRIPTION: This snippet shows how to define and generate assets within a Rollup build process. It demonstrates setting up custom assets with specific source, fileName properties, and then generating the bundle with these assets included.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/generateBundle.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbundle.setAsset('file', 'data');\n\nconst assets = {\n  'file1': {\n    fileName: 'file1',\n    name: 'file1',\n    source: 'data',\n    type: 'asset'\n  },\n  'file2': {\n    fileName: 'file2',\n    name: 'file2',\n    source: new Uint8Array([1, 2, 3]),\n    type: 'asset'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Banner Type for Rollup Configuration in TypeScript\nDESCRIPTION: TypeScript interface definition for the banner option in Rollup configuration. This type allows a banner to be specified either as a static string or as a function that generates a string dynamically, potentially based on chunk information.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/banner--qPJuKPL.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Banner = string | ((chunk: { [key: string]: any }) => string);\n```\n\n----------------------------------------\n\nTITLE: Object Shorthand Notation in System Format\nDESCRIPTION: Demonstrates how the objectShorthand option affects object property definitions in System.register format output.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// input\nconst foo = 1;\nexport { foo, foo as bar };\n\n// system output with objectShorthand: false\nSystem.register('bundle', [], function (exports) {\n\t'use strict';\n\treturn {\n\t\texecute: function () {\n\t\t\tconst foo = 1;\n\t\t\texports({ foo: foo, bar: foo });\n\t\t}\n\t};\n});\n\n// system output with objectShorthand: true\nSystem.register('bundle', [], function (exports) {\n\t'use strict';\n\treturn {\n\t\texecute: function () {\n\t\t\tconst foo = 1;\n\t\t\texports({ foo, bar: foo });\n\t\t}\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Module IDs with Plugin Hooks in Rollup\nDESCRIPTION: This function resolves module IDs in Rollup, incorporating plugin hooks and handling various resolution scenarios. It checks for external modules, applies plugins, and utilizes different resolution strategies based on the module type and context.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/resolveId-CCjw2RsL.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function resolveId(\n\tsource: string,\n\timporter: string | undefined,\n\t{ assertions, custom, isEntry, schema }: ResolveIdOptions,\n\tskip: readonly { importer: string | undefined; plugin: Plugin; source: string }[] | null\n): Promise<ResolveIdResult> {\n\tconst moduleInfo = {\n\t\tassertions,\n\t\tcustom,\n\t\timporter,\n\t\tisEntry,\n\t\tschema\n\t};\n\n\tlet external = options.external?.(source, importer, false);\n\tif (external) return { id: source, external: true };\n\n\tlet resolution:\n\t\t| null\n\t\t| (\n\t\t\t| IsResolved\n\t\t\t| { external: boolean | 'absolute'; id: string }\n\t\t\t| { external: boolean; id: string }\n\t\t) = null;\n\n\tfor (const plugin of plugins) {\n\t\tif (plugin.resolveId) {\n\t\t\tif (skip && skip.some(skipped => skipped.importer === importer && skipped.plugin === plugin))\n\t\t\t\tcontinue;\n\t\t\tresolution = await hookFirst(plugin.resolveId, [source, importer, moduleInfo], replaceContext);\n\t\t}\n\t\tif (resolution) {\n\t\t\tif (typeof resolution === 'string') {\n\t\t\t\treturn { id: resolution };\n\t\t\t}\n\t\t\treturn resolution;\n\t\t}\n\t}\n\n\tif (external === undefined && options.external?.(source, importer, true)) {\n\t\treturn { id: source, external: true };\n\t}\n\n\tif (isAbsolute(source)) {\n\t\treturn { id: markModuleAsExternal(source) };\n\t}\n\n\tif (!importer) {\n\t\tif (isRelative(source)) {\n\t\t\tthrow new Error(`Could not resolve ${source}. Entry module paths must be absolute.`);\n\t\t}\n\t\treturn { id: markModuleAsExternal(resolve(process.cwd(), source)) };\n\t}\n\n\tlet referenceLevels = 0;\n\twhile (referenceLevels++ < 50) {\n\t\tlet resolved = resolveRelativeToFile(importer, source);\n\t\tif (resolved) {\n\t\t\treturn { id: resolved };\n\t\t}\n\t\timporter = path.dirname(importer);\n\t}\n\n\tthrow new Error(`Could not resolve ${source} from ${importer}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing renderStart Event Handler in JavaScript for Rollup\nDESCRIPTION: This function handles the renderStart event in Rollup's plugin system. It executes the 'renderStart' hook for all plugins, passing the output options and input options. The function is asynchronous and returns a promise.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/assets/renderStart-B4XObdBk.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function renderStart({\n\toutputOptions,\n\tplugins\n}: PluginDriver) {\n\tawait Promise.all(\n\t\tplugins.map(plugin => {\n\t\t\tif (plugin.renderStart) {\n\t\t\t\tconst result = plugin.renderStart({\n\t\t\t\t\t...outputOptions,\n\t\t\t\t\t...inputOptions\n\t\t\t\t});\n\t\t\t\treturn Promise.resolve(result);\n\t\t\t}\n\t\t})\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Log Filters in Rollup\nDESCRIPTION: Demonstrates using multiple log filters with comma separation and multiple options\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nrollup -c --filterLogs \"code:FOO,message:This is the message\" --filterLogs code:BAR\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Prettier Configuration for Rollup\nDESCRIPTION: This snippet defines a custom Prettier configuration that extends the default options. It specifies preferences like using single quotes, avoiding semicolons, and printing width settings for JavaScript code formatting in a Rollup build process.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/system/assets/banner--qPJuKPL.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\t...require('@rollup/plugin-typescript/dist/es/defaults.js'),\n\tsemi: false,\n\tsingleQuote: true,\n\tprintWidth: 100,\n\ttabWidth: 2,\n\tuseTabs: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Change Categories in Markdown\nDESCRIPTION: Shows how different types of changes are categorized in the changelog\nSOURCE: https://github.com/rollup/rollup/blob/master/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n### Features\n\n### Pull Requests\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Interface for Rollup Build System\nDESCRIPTION: TypeScript interface definition for Asset objects in Rollup that represent resolved build assets. Specifies required name, source, type and referenceId properties along with methods for tracking dependencies.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/cjs/assets/asset-resolved-DukuHpJ1.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default interface Asset {\n\tname: string;\n\tsource: string | Uint8Array;\n\ttype: string;\n\treferenceId: string;\n\tfileName?: string;\n\tget fileName(): string;\n\tsetFileName(name: string): void;\n\tget source(): string | Uint8Array;\n\tsetSource(source: string | Uint8Array): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing package.json using createRequire for older Node versions\nDESCRIPTION: An alternative method for importing package.json in older Node.js versions using the createRequire function from the node:module module. This approach provides compatibility with CommonJS modules.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRequire } from 'node:module';\nconst require = createRequire(import.meta.url);\nconst pkg = require('./package.json');\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: UMD Module Format with Support for AMD, CommonJS and Global Variables\nDESCRIPTION: Universal Module Definition (UMD) pattern that supports AMD, CommonJS, and browser globals, allowing the module to be used in multiple environments.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/outro.txt#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('external')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', 'external'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.foo = {}, global.external));\n}(this, (function (exports, external) { 'use strict';\n\nvar name = 'foo';\n\nexports.name = name;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n```\n\n----------------------------------------\n\nTITLE: Asynchronous resolveId Hook Implementation\nDESCRIPTION: An example showing how to implement an asynchronous resolveId hook that returns a Promise. This allows for performing asynchronous operations during module ID resolution.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/resolveId.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// async plugin implementation\nconst asyncPlugin = {\n  name: 'async-plugin',\n  async resolveId(source) {\n    // Can perform async operations here\n    const result = await someAsyncOperation(source);\n    return result;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing renderChunk Hook in Rollup Plugin (JavaScript)\nDESCRIPTION: This code snippet shows how to implement the renderChunk hook in a Rollup plugin. The hook receives the chunk code, rendering options, and chunk info. It modifies the chunk code by replacing 'foo' with 'bar' and updates the sourcemap if needed.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/generate-emission-names/_expected/es/generated-with-names.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin() {\n  return {\n    name: 'my-plugin',\n    renderChunk(code, chunk, options) {\n      // Modify the generated chunk code\n      const modifiedCode = code.replace(/foo/g, 'bar');\n\n      // If the code was modified and sourcemaps are enabled\n      if (modifiedCode !== code && options.sourcemap) {\n        // Generate a sourcemap\n        return {\n          code: modifiedCode,\n          map: generateSourcemap(modifiedCode, code)\n        };\n      }\n\n      // Return the modified code\n      return modifiedCode;\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rollup Build Process in TypeScript\nDESCRIPTION: Function that logs the build start time and optional watch mode status to inform users about the build process initialization. Handles both regular builds and watch mode scenarios.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/renderStart-B4XObdBk.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function renderStart(experimentalLogSideEffects: boolean | undefined): string {\n\tlet args = experimentalLogSideEffects\n\t\t? ' with side-effects optimization'\n\t\t: '';\n\treturn `building${args}...`;\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding eval with Global Scope Execution in JavaScript\nDESCRIPTION: Demonstrates how to use 'eval2 = eval' to execute code in the global scope rather than the local scope, avoiding pollution of the shared scope in Rollup.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/troubleshooting/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar eval2 = eval;\n\n(function () {\n\tvar foo = 42;\n\teval('console.log(\"with eval:\",foo)'); // logs 'with eval: 42'\n\teval2('console.log(\"with eval2:\",foo)'); // throws ReferenceError\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating a Vite/Rollup plugin to inject custom HTML footer content\nDESCRIPTION: This plugin function injects custom HTML content at the end of the output bundle files. It works with both Vite and Rollup bundlers, and allows for specifying which files should receive the footer content through a filter option.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/footer.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function footerPlugin(options = {}) {\n  return {\n    name: 'footer',\n    async renderChunk(code, chunk) {\n      const filter = options.filter || (id => id.endsWith('.js'))\n      const footer = options.footer || ''\n      \n      if (!filter(chunk.fileName)) {\n        return null\n      }\n\n      return `${code}\\n${footer}`\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing package.json by reading and parsing from disk\nDESCRIPTION: A direct method to read package.json file from disk using Node's filesystem API. This approach uses import.meta.url to make the path relative to the current source file instead of process.cwd().\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.mjs\nimport { readFileSync } from 'node:fs';\n\n// Use import.meta.url to make the path relative to the current source\n// file instead of process.cwd(). For more information:\n// https://nodejs.org/docs/latest-v16.x/api/esm.html#importmetaurl\nconst packageJson = JSON.parse(\n\treadFileSync(new URL('./package.json', import.meta.url), 'utf-8')\n);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Handling Unresolved Assets in Rollup\nDESCRIPTION: TypeScript interface definition for managing unresolved assets during the Rollup build process. This interface extends Rollup's internal Asset type to track source, fileName and other metadata for unresolved asset references.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/system/assets/asset-unresolved-B7Qh6_pN.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Unresolved extends Asset {\n\tsource: string | Uint8Array;\n\tfileName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Module IDs using resolveId in Rollup\nDESCRIPTION: The resolveId function is used to resolve import paths to module IDs in Rollup. It runs through the resolveId hook pipeline, allowing plugins to intervene in the module resolution process. It handles various types of imports and returns the resolved module ID.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/resolveId-CCjw2RsL.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nresolveId\n```\n\n----------------------------------------\n\nTITLE: Defining renderChunk Method in Rollup Plugin\nDESCRIPTION: This code snippet shows the method signature for the renderChunk hook in a Rollup plugin. It transforms generated code after bundling but before writing to disk, and accepts the code, rendering options, and output options as parameters.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/assets/renderChunk-MxjJNaqP.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrenderChunk(code: string, chunk: RenderedChunk, options: NormalizedOutputOptions): string | null | { code: string, map?: SourceMap }\n```\n\n----------------------------------------\n\nTITLE: Using buildStart Hook in Rollup Plugin\nDESCRIPTION: Example showing how the buildStart hook is used in a Rollup plugin. This hook is called when a build starts and is useful for setting up the build environment, initializing plugin state, or performing preparatory actions that should happen once per build.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/assets/buildStart-CNSwBoeG.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbuildStart\n```\n\n----------------------------------------\n\nTITLE: Defining the buildEnd Hook in Rollup Plugin API\nDESCRIPTION: The buildEnd hook is called after all modules have been transformed and any additional chunks have been created. It receives an error object if the build failed with an error and can be used for plugin cleanup operations.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/buildEnd-BuNl-RZp.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuildEnd(error?: Error): void;\n```\n\n----------------------------------------\n\nTITLE: Load Custom Module with .js Extension\nDESCRIPTION: Test case demonstrating custom module loading with a .js extension. Returns a string and validates loader behavior.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/load.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tdesciption: 'allows custom module loading';\n\toptions: {\n\t\tplugins: [\n\t\t\t{\n\t\t\t\tresolveId: function(id) {\n\t\t\t\t\tif ( id === 'main' ) {\n\t\t\t\t\t\treturn id;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tload: function(id) {\n\t\t\t\t\tif ( id === 'main' ) {\n\t\t\t\t\t\treturn 'export default 42;';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t},\n\texpect: function(code) {\n\t\texec(code);\n\t\treturn require('main.js').default === 42;\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Unresolved Asset Class in TypeScript for Rollup\nDESCRIPTION: This code defines an Asset class for unresolved assets in Rollup. It includes properties for source, name, and type, as well as methods for generating code and manipulating the asset's content.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/form/samples/configure-file-url/_expected/assets/asset-unresolved-B7Qh6_pN.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NormalizedOutputOptions } from '../rollup/types';\nimport { SourceMapOptions } from 'rollup';\n\nexport class Asset {\n\tsource: string | Uint8Array;\n\tname: string;\n\ttype: 'asset';\n\n\tconstructor(name: string, source: string | Uint8Array) {\n\t\tthis.source = source;\n\t\tthis.name = name;\n\t\tthis.type = 'asset';\n\t}\n\n\tgenerateCode(): { code: string } {\n\t\tconst source = this.generateSource();\n\t\treturn {\n\t\t\tcode: source\n\t\t};\n\t}\n\n\tgenerateSource(): string {\n\t\treturn typeof this.source === 'string' ? this.source : Buffer.from(this.source).toString('utf-8');\n\t}\n\n\tsetAssetSource(source: string | Uint8Array): void {\n\t\tthis.source = source;\n\t}\n\n\tgetChunkSource(_options: NormalizedOutputOptions, _sourceMapOptions: SourceMapOptions): { code: string } {\n\t\treturn this.generateCode();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Buffers for Equality in JavaScript\nDESCRIPTION: This function compares two buffers for equality. It checks if the buffers have the same length and compares each byte to determine if they are identical.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/deduplicate-assets/_expected/es/assets/buffer-B9X0n-yE.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function areBuffersEqual(buffer1, buffer2) {\n\tif (buffer1.byteLength !== buffer2.byteLength) return false;\n\tfor (let i = 0; i < buffer1.byteLength; i++) {\n\t\tif (buffer1[i] !== buffer2[i]) return false;\n\t}\n\treturn true;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing with CommonJS vs ES Modules Example\nDESCRIPTION: This JavaScript snippet demonstrates the difference between importing an entire module with CommonJS versus importing only the specific function needed with ES modules. It showcases how CommonJS requires importing the entire utils object.\nSOURCE: https://github.com/rollup/rollup/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// import the entire utils object with CommonJS\nvar utils = require('node:utils');\nvar query = 'Rollup';\n// use the ajax method of the utils object\nutils.ajax('https://api.example.com?search=' + query).then(handleResponse);\n```\n\n----------------------------------------\n\nTITLE: Implementing renderChunk Hook in Rollup Plugin\nDESCRIPTION: TypeScript type definition for the renderChunk hook function. This hook allows plugins to transform chunks after they have been generated but before being written to disk. It receives the chunk code, rendering information, and options as parameters.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/system/renderChunk.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ResolveRenderedChunk = { dynamicImports: string[]; exports: string[]; facadeModuleId: string | null; fileName: string; implicitlyLoadedBefore: string[]; imports: string[]; importedBindings: { [imported: string]: string[] }; isDynamicEntry: boolean; isEntry: boolean; isImplicitEntry: boolean; map: SourceMap | null; modules: { [id: string]: { renderedExports: string[]; removedExports: string[]; renderedLength: number; originalLength: number; code: string | null } }; name: string; type: 'chunk' };\n\nrenderChunk(code: string, chunk: ResolveRenderedChunk, options: NormalizedOutputOptions, meta: { chunks: Record<string, ResolveRenderedChunk> }): { code: string; map?: SourceMap } | string | null;\n```\n\n----------------------------------------\n\nTITLE: Warning Suppression Plugin for Rollup\nDESCRIPTION: A simple Rollup plugin that hooks into the onwarn event to suppress specific warnings based on their code. This example filters out circular dependency warnings.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/intro.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nexport default {\n  ...,\n  plugins: [],\n  onwarn (warning, warn) {\n    // skip certain warnings\n    if (warning.code === 'CIRCULAR_DEPENDENCY') return;\n\n    // console.warn everything else\n    warn(warning);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Outro Plugin for Rollup.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a simple Rollup.js plugin that adds a specified text to the end of a bundle. It uses the 'outro' hook which allows appending content to the generated bundle.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/cjs/outro.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function outro(text) {\n  return {\n    name: 'outro',\n\n    outro() {\n      return text;\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Footer HTML Structure for Rollup Documentation\nDESCRIPTION: This HTML snippet defines the structure of a custom footer for the Rollup documentation. It includes links to various resources and social media profiles related to the Rollup project.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/footer.txt#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<footer class=\"nav-footer\" id=\"footer\">\n  <section class=\"sitemap\">\n    <a href=\"/\" class=\"nav-home\"></a>\n    <div>\n      <h5>Learn</h5>\n      <a href=\"/guide/introduction/\">Getting Started</a>\n      <a href=\"/repl/\">REPL</a>\n      <a href=\"/configuration-options/\">Configuration</a>\n    </div>\n    <div>\n      <h5>Support</h5>\n      <a href=\"https://rollupjs.org/guide/en/#help-\">Community</a>\n      <a href=\"https://stackoverflow.com/questions/tagged/rollupjs\">Stack Overflow</a>\n      <a href=\"https://github.com/rollup/rollup/issues\">Report Issues</a>\n    </div>\n    <div>\n      <h5>Social</h5>\n      <a href=\"https://github.com/rollup\" target=\"_blank\">GitHub</a>\n      <a href=\"https://opencollective.com/rollup\" target=\"_blank\">Open Collective</a>\n      <a href=\"https://twitter.com/rollupjs\" target=\"_blank\">Twitter</a>\n    </div>\n  </section>\n  <section class=\"copyright\">Copyright © 2024 RollupJS</section>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup with Custom Plugin and Options in JavaScript\nDESCRIPTION: This snippet shows how to configure Rollup with a custom plugin and various build options. It includes input and output specifications, as well as format and sourcemap settings.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/intro.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'src/main.js',\n  output: {\n    file: 'dist/bundle.js',\n    format: 'esm',\n    sourcemap: true\n  },\n  plugins: [plugin],\n  // Additional options\n  treeshake: true,\n  external: ['lodash']\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing buildEnd Hook with Flag in Rollup Plugin\nDESCRIPTION: A JavaScript code snippet showing a pattern used in Rollup plugins where a boolean flag is used to track state and potentially prevent re-execution in watch mode. The buildEnd hook is used as a trigger point at the end of each build cycle.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/buildEnd.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet executed = false;\n\n/* ... */\n\nbuildEnd() {\n  if (!executed) {\n    executed = true;\n    // Execute something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define resolveFileUrl TypeScript Hook\nDESCRIPTION: This snippet defines a TypeScript type for a resolve file URL hook that allows Rollup to customize how URLs of files emitted by plugins are resolved. It includes parameters for chunk identification and reference handling.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype ResolveFileUrlHook = (options: {\n\tchunkId: string;\n\tfileName: string;\n\tformat: InternalModuleFormat;\n\tmoduleId: string;\n\treferenceId: string;\n\trelativePath: string;\n}) => string | NullValue;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating preserveSymlinks Behavior (JavaScript)\nDESCRIPTION: Shows how the preserveSymlinks option affects module resolution in Rollup when dealing with symbolic links.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// /main.js\nimport { x } from './linked.js';\nconsole.log(x);\n\n// /linked.js\n// this is a symbolic link to /nested/file.js\n\n// /nested/file.js\nexport { x } from './dep.js';\n\n// /dep.js\nexport const x = 'next to linked';\n\n// /nested/dep.js\nexport const x = 'next to original';\n```\n\n----------------------------------------\n\nTITLE: Implementing the buildEnd hook in Rollup plugins\nDESCRIPTION: Demonstrates how to implement the buildEnd hook in a Rollup plugin. This hook is called when a build ends and can be used for cleanup operations or to report errors that occurred during the build. It can optionally receive an error parameter if the build failed.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/buildEnd-BuNl-RZp.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbuildEnd(error) {\n  if (error) {\n    // The build failed.\n  }\n  // Cleanup, report, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing renderChunk Hook in Rollup Plugin\nDESCRIPTION: This code snippet demonstrates how to implement the renderChunk hook in a Rollup plugin. It takes the code, rendering options, and chunk info as parameters and returns the potentially modified code and a SourceMap.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/renderChunk.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrenderChunk(code, chunk, options) {\n  // Receiving the generated code as a string\n  // chunk and options are same as in generateBundle\n\n  // If there are no changes to make, return null\n  if (!shouldTransform(code)) return null;\n\n  // Otherwise, return an object\n  return {\n    code: transformedCode,\n    map: sourceMap\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using getTimings() to Retrieve Performance Measurements in Rollup\nDESCRIPTION: Example of the object structure returned by the getTimings() function when performance monitoring is enabled. This function returns detailed metrics about build steps, including elapsed time and memory consumption.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"# BUILD\": [ 698.020877, 33979632, 45328080 ],\n  \"## parse modules\": [ 537.509342, 16295024, 27660296 ],\n  \"load modules\": [ 33.253778999999994, 2277104, 38204152 ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using SVG Assets in JavaScript\nDESCRIPTION: Example of importing an SVG file processed by the SVG Resolver Plugin and using it to set the src attribute of an img element in the browser.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport logo from '../images/logo.svg';\nconst image = document.createElement('img');\nimage.src = logo;\ndocument.body.appendChild(image);\n```\n\n----------------------------------------\n\nTITLE: HTML Footer Component for Rollup.js Website\nDESCRIPTION: A static HTML footer component for the Rollup.js project website containing navigation links to guides, API documentation, and related resources. The footer includes sections for documentation, ecosystem, and copyright information with links to GitHub and a CC BY-NC license notice.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/assets/footer-CV6kYft-.txt#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<footer>\n\t<div>\n\t\t<span class=\"label\">Rollup</span>\n\n\t\t<nav>\n\t\t\t<a href=\"/guide/en/\">guide</a>\n\t\t\t<a href=\"/tutorial/\">tutorial</a>\n\t\t\t<a href=\"/repl/\">repl</a>\n\t\t\t<a href=\"/introduction/\">command line interface</a>\n\t\t\t<a href=\"/javascript-api/\">javascript api</a>\n\t\t</nav>\n\t</div>\n\n\t<div>\n\t\t<span class=\"label\">Ecosystem</span>\n\n\t\t<nav>\n\t\t\t<a href=\"https://github.com/rollup/awesome\">awesome rollup</a>\n\t\t\t<a href=\"/tools/\">tools</a>\n\t\t\t<a href=\"/plugin-development/\">plugin development</a>\n\t\t</nav>\n\t</div>\n\n\t<div>\n\t\t<span class=\"label\">About</span>\n\n\t\t<nav>\n\t\t\t<a href=\"https://github.com/rollup/rollup/blob/master/CHANGELOG.md\">changelog</a>\n\t\t\t<a href=\"/faqs/\">faqs</a>\n\t\t\t<a href=\"https://github.com/rollup\">github</a>\n\t\t\t<a href=\"/governance/\">governance</a>\n\t\t\t<a class=\"opencollective\" href=\"https://opencollective.com/rollup\">opencollective</a>\n\t\t</nav>\n\t</div>\n\n\t<p class=\"copyright\">\n\t\t&copy; 2017–present&nbsp;|&nbsp;<a href=\"https://github.com/rollup/rollup/blob/master/LICENSE.md\">MIT</a>\n\t\t<br>\n\t\tsite&nbsp;<a href=\"https://github.com/rollup/rollupjs.org\">CC BY-NC</a>\n\t</p>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Testing Rollup Bundle Generation with Source Maps\nDESCRIPTION: A test case that verifies bundle generation behavior with both explicit and implicit source map configurations. The code tests bundle file generation and source map inclusion.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/system/generateBundle.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = defineTest({\n\tinput: 'main.js',\n\tdescription: 'ignores\\n external source maps if the \\\"sourcemap\\\" option is false',\n\toptions: {\n\t\tsourcemap: false\n\t},\n\ttest: (code, map) => {\n\t\tassert.ok(!map);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Buffer API for Browser Compatibility in JavaScript\nDESCRIPTION: This code exports the Node.js Buffer API, likely to provide compatibility in browser environments where Buffer isn't natively available. It simply imports from the 'buffer' module and re-exports it.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/deduplicate-assets/_expected/cjs/assets/buffer-B9X0n-yE.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from 'buffer';\n```\n\n----------------------------------------\n\nTITLE: Iterating Module IDs with JavaScript\nDESCRIPTION: Shows how to iterate through all module IDs in the current Rollup graph using the this.getModuleIds method and a for...of loop, as well as converting the result to an array.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const moduleId of this.getModuleIds()) {\n\t/* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Banner Plugin for Rollup in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a Rollup configuration with a custom banner plugin. It includes options for the input file, output format, and a function to generate a custom banner with the current date.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst banner = () => `/*!\n * Date: ${new Date().toDateString()}\n */`;\n\nexport default {\n\tinput: 'main.js',\n\toutput: {\n\t\tfile: 'bundle.js',\n\t\tformat: 'iife',\n\t\tbanner\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser Equivalent of Path.resolve in JavaScript\nDESCRIPTION: This function provides a browser-compatible implementation of Node.js path.resolve functionality, allowing for path resolution in browser environments. It handles relative and absolute paths, normalizing them according to standard path resolution rules.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/assets/buildEnd-BuNl-RZp.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function resolve(...paths) {\n\tlet resolvedPath = '';\n\tlet resolvedAbsolute = false;\n\n\tfor (let i = paths.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n\t\tconst path = i >= 0 ? paths[i] : '/';\n\n\t\t// Skip empty entries\n\t\tif (!path) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresolvedPath = `${path}/${resolvedPath}`;\n\t\tresolvedAbsolute = path.charAt(0) === '/';\n\t}\n\n\t// At this point the path should be resolved to a full absolute path, but\n\t// handle relative paths to be safe (might happen when process.cwd() fails)\n\n\t// Normalize the path\n\tresolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n\tif (resolvedAbsolute) {\n\t\treturn `/${resolvedPath}`;\n\t}\n\treturn resolvedPath.length > 0 ? resolvedPath : '.';\n}\n```\n\n----------------------------------------\n\nTITLE: Bundled Output with Changed Execution Order\nDESCRIPTION: This example shows the resulting bundled code after Rollup processes the polyfill example. Note how the execution order has changed, with external dependencies potentially executing before the polyfill code.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/faqs/index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'external';\nconsole.log('polyfill');\nconsole.log('main');\n```\n\n----------------------------------------\n\nTITLE: Styling Footer Component with CSS\nDESCRIPTION: CSS styling that defines the visual appearance of a footer element, including dimensions, colors, borders, hover effects and cursor behavior.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/amd/assets/footer-CV6kYft-.txt#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nfooter {\\n  position: fixed;\\n  bottom: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 80px;\\n  background-color: #fff;\\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\\n  text-align: center;\\n  padding: 10px;\\n  font-size: 14px;\\n  color: #333;\\n  cursor: pointer;\\n}\\n\\nfooter:hover {\\n  background-color: #f5f5f5;\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating CommonJS Bundle with Assets in Rollup\nDESCRIPTION: This code represents the output of Rollup's bundle generation process in CommonJS format. It includes an asset definition and demonstrates how Rollup structures the output files when assets are included in the build.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/cjs/generateBundle.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  fileName: 'fileWithAssets.js',\n  name: 'fileWithAssets',\n  type: 'chunk',\n  isEntry: true,\n  isImplicitEntry: false,\n  implicitlyLoadedBefore: [],\n  importedBindings: {},\n  imports: [],\n  dynamicImports: [],\n  exports: [\n    'default'\n  ],\n  modules: {\n    'fileWithAssets.js': {\n      code: 'function fileWithAssets() {\\n  return \\'fileWithAssets\\';\\n}\\n\\nexport default fileWithAssets;',\n      originalLength: 89,\n      removedExports: [],\n      renderedExports: [\n        'default'\n      ],\n      renderedLength: 89\n    }\n  },\n  facadeModuleId: 'fileWithAssets.js',\n  code: '\\'use strict\\';\\n\\nObject.defineProperty(exports, \\'__esModule\\', { value: true });\\n\\nfunction fileWithAssets() {\\n  return \\'fileWithAssets\\';\\n}\\n\\nvar fileWithAssets$1 = fileWithAssets;\\n\\nexports.default = fileWithAssets$1;\\n',\n  map: null,\n  preliminaryFileName: 'fileWithAssets.js',\n  sourcemapFileName: null,\n  sourcesContent: {}\n}\n\n{\n  fileName: 'asset-test.txt',\n  name: 'asset-test',\n  source: 'hello world',\n  needsCodeReference: false,\n  type: 'asset'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Core and Preset in Shell\nDESCRIPTION: Commands to install Babel core and env preset packages.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @babel/core @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Reserved Names as Properties Configuration\nDESCRIPTION: Shows how the reservedNamesAsProps option affects property name handling for reserved words in the output.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// input\nconst foo = null;\nexport { foo as void };\n\n// cjs output with reservedNamesAsProps: false\nconst foo = null;\n\nexports['void'] = foo;\n\n// cjs output with reservedNamesAsProps: true\nconst foo = null;\n\nexports.void = foo;\n```\n\n----------------------------------------\n\nTITLE: Solving Asset References in Rollup\nDESCRIPTION: This function resolves asset references in Rollup. It handles different types of assets and their relationships, ensuring proper referencing and emission.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/cjs/assets/asset-solved-DSjIjiFN.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function solveAsset(\n\tasset: Asset,\n\trelatedAssets: Set<Asset>,\n\tassetsBySource: Map<string, Asset>,\n\temittedFile: EmittedFile\n): void {\n\tconst source = asset.source;\n\tlet referenceId: string | null = null;\n\tconst relatedAsset = assetsBySource.get(source);\n\tif (relatedAsset && relatedAsset !== asset) {\n\t\treferenceId = relatedAsset.referenceId as string;\n\t} else if (asset.emitAsset) {\n\t\tconst emittedAsset = emittedFile as EmittedAsset;\n\t\treferenceId = emittedAsset.fileName\n\t\t\t? emittedAsset.fileName\n\t\t\t: asset.referenceId || emittedAsset.name || basename(asset.fileName);\n\t\tif (asset.fileName && !emittedAsset.fileName) {\n\t\t\temittedAsset.fileName = asset.fileName;\n\t\t}\n\t}\n\tif (referenceId !== null) {\n\t\tasset.referenceId = referenceId;\n\t}\n\trelatedAssets.add(asset);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing buildEnd Hook in Rollup Plugin\nDESCRIPTION: This snippet demonstrates how to implement the buildEnd hook in a Rollup plugin. The hook is called when the build finishes without errors, but before generate/writeBundle hooks are called. It receives any errors encountered during the build as a parameter.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/assets/buildEnd-BuNl-RZp.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin() {\n  return {\n    ...,\n    buildEnd(error) {\n      if (!error) {\n        console.log('build succeeded');\n      } else {\n        console.error('build failed', error);\n      }\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Plugin Implementation\nDESCRIPTION: Demonstrates how to provide an inline plugin implementation\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nrollup -i input.js -f es -p '{transform: (c, i) => `/* ${JSON.stringify(i)} */\\n${c}`}'\n```\n\n----------------------------------------\n\nTITLE: Named Imports in JavaScript ES Modules\nDESCRIPTION: Demonstrates how to import a specific item from a source module with its original name. Imported values cannot be reassigned but objects and arrays can be mutated.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/es-module-syntax/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { something } from './module.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Bundle Generation with Asset Management\nDESCRIPTION: Example showing how Rollup handles bundle generation with format specifications and asset management. Demonstrates generating a bundle using 'amd' format and includes sourcemap generation.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/system/assets/generateBundle-oIb15WdK.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bundle = await rollup.rollup({ input: 'file.js' });\nconst { output } = await bundle.generate({\n  format: 'amd',\n  sourcemap: true,\n  assetFileNames: '[name][extname]'\n});\n\noutput.forEach(chunkOrAsset => {\n  if (chunkOrAsset.type === 'asset') {\n    // For assets\n    console.log('Asset', chunkOrAsset);\n  } else {\n    // For chunks\n    console.log('Chunk', chunkOrAsset);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Rollup in JavaScript from npm Package\nDESCRIPTION: How to import the Rollup browser build in JavaScript after installing via npm.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/faqs/index.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rollup } from '@rollup/browser';\n```\n\n----------------------------------------\n\nTITLE: Configuring sourcemapPathTransform in Rollup\nDESCRIPTION: Example configuration for sourcemapPathTransform option in Rollup. This option allows transforming the paths in the sourcemap.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tinput: 'src/main',\n\toutput: [\n\t\t{\n\t\t\tfile: 'bundle.js',\n\t\t\tsourcemapPathTransform: (relativeSourcePath, sourcemapPath) => {\n\t\t\t\t// will replace relative paths with absolute paths\n\t\t\t\treturn path.resolve(\n\t\t\t\t\tpath.dirname(sourcemapPath),\n\t\t\t\t\trelativeSourcePath\n\t\t\t\t);\n\t\t\t},\n\t\t\tformat: 'es',\n\t\t\tsourcemap: true\n\t\t}\n\t]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing generateBundle Method for AMD Format in Rollup\nDESCRIPTION: This code snippet shows the implementation of the generateBundle method which handles AMD format output in Rollup. It processes assets, evaluates the 'bundle' configuration option, and manages asset generation. The method accepts key parameters including bundle, outputOptions, and allChunks.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/amd/generateBundle.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync generateBundle(outputOptions, bundle, { allChunks, assetFileNames, format, addons }) {\n    this.clientBundle = bundle;\n\n    const [{ paths }, { getPath }] = await Promise.all([\n        this.resolveImportMapOptions(outputOptions),\n        getPathResolver(assetFileNames),\n    ]);\n\n    // only process assets if bundle is not true\n    if (outputOptions.bundle !== true) {\n        for (const chunk of allChunks) {\n            if (!chunk.executableAssets) {\n                continue;\n            }\n\n            for (const asset of chunk.executableAssets) {\n                const dependencies = [];\n                const options = { ...this.pluginContext.meta };\n\n                for (const dep of asset.dependencies) {\n                    const found = this.chunks.find(\n                        (chunk) => chunk.fileName === dep || !chunk.fileName\n                    ) || allChunks.find(\n                        (chunk) => chunk.fileName === dep || (chunk.facadeId && chunk.facadeId === dep)\n                    );\n\n                    if (!found || found.isEntry) {\n                        dependencies.push(dep);\n                    } else {\n                        // ??? what do we do here\n                    }\n                }\n\n                const fileName = await getPath({\n                    name: asset.name,\n                    source: asset.source,\n                    fileName: asset.fileName,\n                    type: 'asset',\n                }, null);\n\n                options.fileName = fileName;\n                // console.log('options', options, dependencies);\n\n                bundle[fileName] = {\n                    type: 'asset',\n                    fileName,\n                    name: asset.name,\n                    source: await asset.run(paths, options, dependencies),\n                };\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Rollup Custom Outro Template\nDESCRIPTION: Template string expression used for generating custom outro (closing) code for Rollup bundles. The template handles exports and module wrapping based on build configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/outro.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn exports${exportMode === 'default' && exports ? '.default' : ''};\n```\n\n----------------------------------------\n\nTITLE: Reading from stdin in Rollup\nDESCRIPTION: Shows how to pipe content to Rollup via stdin\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\necho \"export const foo = 42;\" | rollup --format cjs --file out.js\n```\n\n----------------------------------------\n\nTITLE: Compiling JavaScript for Cross-Platform Compatibility using Rollup\nDESCRIPTION: This command demonstrates compiling JavaScript code to UMD (Universal Module Definition) format, which is compatible with both browser and Node.js environments. A bundle name is required for UMD format.\nSOURCE: https://github.com/rollup/rollup/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# UMD format requires a bundle name\nrollup main.js --format umd --name \"myBundle\" --file bundle.js\n```\n\n----------------------------------------\n\nTITLE: Rendering Start Point for Rollup Build Process in JavaScript\nDESCRIPTION: This function initializes the rendering process for Rollup builds. It handles different output formats, executes plugin hooks, and sets up variables for the build. It takes into account various options like compact mode, interop, and externalLiveBindings.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/assets/renderStart-B4XObdBk.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function renderStart(\n\tmagicString,\n\tbundle,\n\t{ compact, dynamicImportFunction, format, freeze, indent: t, name, namespaceToStringTag }\n) {\n\tconst { intro } = bundle;\n\tconst n = compact ? '' : '\\n';\n\tconst s = compact ? '' : ' ';\n\tif (format === 'esm' || format === 'system') {\n\t\treturn intro;\n\t}\n\tif (format === 'amd' || format === 'umd' || format === 'iife') {\n\t\tmagicString.prepend(`(function${s}(${paramString})${s}{${n}${t}`);\n\t\tlet code = `'use strict';${n}${n}`;\n\t\tif (namespaceToStringTag) {\n\t\t\tcode += `Object.defineProperty(exports,${s}'__esModule',${s}{${s}value:${s}true${s}});${n}`;\n\t\t}\n\t\t// A hack to replace the statically analysed globalThis by acorn with undefined\n\t\tmagicString.prepend(code.replace(/globalThis/g, 'undefined'));\n\t}\n\tlet dependencies;\n\tif (format === 'iife' || format === 'umd') {\n\t\tdependencies = bundle.orderedModules.filter(importOrExportFromExternalModule).map(getImportPath);\n\t\tif (dependencies.length > 0) {\n\t\t\tmagicString.prepend(\n\t\t\t\t`var ${bundle.varOrConst} ${require$$0.createNamespace(\n\t\t\t\t\tdependencies,\n\t\t\t\t\tglobalsNameMaker,\n\t\t\t\t\tname\n\t\t\t\t)}${s}=${s}${wrapperOutro};${n}${n}`\n\t\t\t);\n\t\t}\n\t}\n\treturn magicString;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Default Module with CommonJS in JavaScript\nDESCRIPTION: A simple CommonJS module export statement that exports a default module. This pattern is used to make the module accessible to other parts of a Node.js application.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/cjs/generateBundle-format.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncjs\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Code Block Pattern in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define a pattern for inserting custom code into a JavaScript bundle. It uses a placeholder format with square brackets and percent signs to mark where code should be inserted.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/outro.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[%\n\t__exports.foo = 'bar'\n%]\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Custom Banner in Rollup\nDESCRIPTION: This snippet shows how to configure a custom banner using an async function in Rollup. It demonstrates fetching data asynchronously and including it in the build output banner.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tinput: 'main.js',\n\toutput: {\n\t\tfile: 'bundle.js',\n\t\tformat: 'esm',\n\t\tbanner: async () => {\n\t\t\tconst package = await fetch('https://raw.githubusercontent.com/rollup/rollup/master/package.json').then(res => res.json());\n\t\t\treturn `/*! ${package.name} v${package.version} */`;\n\t\t}\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Processing Solved Assets in Rollup\nDESCRIPTION: This function handles a solved asset in Rollup. It determines the asset's destination based on its source, name, and other properties. The function also manages file naming and ensures proper directory structure.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/es/assets/asset-solved-DSjIjiFN.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function getAssetFileName(\n\tasset,\n\tremaining,\n\tname,\n\tassetFileNames,\n\tinputBase,\n\tgetNewAssetFileName,\n\tcontext\n) {\n\tlet fileName;\n\tif (typeof assetFileNames === 'function') {\n\t\tconst assetFileNamesObject = {\n\t\t\textname: asset.type === 'chunk' ? '.js' : path.extname(asset.name),\n\t\t\tformat: asset.type === 'chunk' ? 'system' : undefined,\n\t\t\tname: asset.name,\n\t\t\ttype: asset.type,\n\t\t\tsource: asset.source,\n\t\t\tprojectRoot: inputBase\n\t\t};\n\t\tfor (const [key, value] of Object.entries(asset)) {\n\t\t\tassetFileNamesObject[key] = value;\n\t\t}\n\t\t//If user wants to process asset path using the hash then we need to\n\t\t//calculate it here, before 'assetFileNames' function call.\n\t\tif (assetFileNames.toString().includes('[hash]')) {\n\t\t\tassetFileNamesObject.hash = asset.hash;\n\t\t}\n\t\tfileName = assetFileNames(assetFileNamesObject);\n\t} else {\n\t\tconst hashPlaceholder = '[hash]';\n\t\tconst hash = asset.hash;\n\t\tfileName = assetFileNames.replace(hashPlaceholder, hash);\n\t}\n\t\n\tfileName = makeUnique(fileName, remaining);\n\tif (asset.type === 'asset' && fileName.includes('/')) {\n\t\tconst resolvedName = path.resolve(context.buildFilename, fileName);\n\t\tif (asset.source && isPathInside(path.dirname(resolvedName), inputBase)) {\n\t\t\tconst relativeFromInputBase = path.relative(inputBase, path.dirname(resolvedName));\n\t\t\tfileName = path.join(relativeFromInputBase, path.basename(resolvedName));\n\t\t} else {\n\t\t\tfileName = path.basename(fileName);\n\t\t}\n\t}\n\tconst assetWithFileName = { ...asset, fileName };\n\treturn getNewAssetFileName(assetWithFileName);\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Legacy URLs in Vue with TypeScript\nDESCRIPTION: This script handles redirecting users from legacy URLs to their new locations. It extracts the legacy slug from the URL hash, looks up the corresponding new page and anchor in a mapping file, and navigates to the new location using VitePress router. If no matching slug is found, it defaults to the introduction page.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/guide/en/index.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useRouter } from \"vitepress\";\nimport slugs from \"./slugs-and-pages-by-legacy-slugs.json\";\n\nif (typeof window !== \"undefined\") {\n  const { go } = useRouter();\n  const target = slugs[location.hash.slice(1)];\n  if (target) {\n    const path = `/${target[0]}/`;\n    const hash = target[1] ? `#${target[1]}`: \"\";\n    go(`${path}${hash}`);\n  } else {\n    go(\"/introduction/\");\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Rollup Globally via NPM\nDESCRIPTION: Command to install Rollup as a global command line tool using npm package manager.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/introduction/index.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --global rollup\n```\n\n----------------------------------------\n\nTITLE: Describing Rollup Binary Package for Windows 32-bit MSVC\nDESCRIPTION: This snippet identifies the specific binary package for Rollup, targeting the i686-pc-windows-msvc platform. It's a crucial piece of information for users who need to use Rollup on 32-bit Windows systems compiled with MSVC.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/win32-ia32-msvc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@rollup/rollup-win32-ia32-msvc`\n\nThis is the **i686-pc-windows-msvc** binary for `rollup`\n```\n\n----------------------------------------\n\nTITLE: Function to Detect Empty Lines in TypeScript\nDESCRIPTION: A utility function that checks if a given line in a string is empty by examining whether it contains only whitespace characters.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/asset-needs-code-reference-same-source/_expected/system/needs-reference3.txt#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isEmptyLineAfterLastNonEmptyLine(string: string, index: number): boolean {\n\tlet i = index - 1;\n\twhile (i >= 0) {\n\t\tconst char = string[i];\n\t\tif (char === '\\n') return true;\n\t\tif (!/\\s/.test(char)) break;\n\t\ti--;\n\t}\n\treturn false;\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Script Environment Override\nDESCRIPTION: Example of overriding environment variables when running npm scripts\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build -- --environment BUILD:development\n```\n\n----------------------------------------\n\nTITLE: Rendering Start Annotations for Different Module Formats in JavaScript\nDESCRIPTION: This function generates start annotations for various module formats including CommonJS, AMD, and IIFE. It constructs the appropriate code snippet based on the module type, handling dependencies and module names.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/renderStart-B4XObdBk.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction renderStart(magicString, chunk, { intro }, options, addons) {\n\tconst { file, indent, prefix } = options;\n\tconst [dependencyAssignments, dependencyArguments] = getDependencyAssignmentsAndArguments(chunk, options, addons);\n\tif (prefix) {\n\t\tmagicString.prepend(`${prefix}\\n\\n`);\n\t}\n\tif (chunk.getModuleType() === moduleTypes.cjs) {\n\t\tlet includeRequireWrapper = true;\n\t\tif (chunk.root) {\n\t\t\tconst props = [\"require\", \"module\", \"exports\"];\n\t\t\tif (chunk.starExports.length) props.push(`${HELPERS_NAME}.*`);\n\t\t\tmagicString.prepend(`(function (${props.join(', ')}) {\\n`);\n\t\t}\n\t\tif (dependencyAssignments.length > 0) {\n\t\t\tmagicString.prepend(`\\n${dependencyAssignments.map(val => indent + val).join('\\n')}`);\n\t\t}\n\t\tmagicString.prepend(intro);\n\t} else if (chunk.getModuleType() === moduleTypes.amd) {\n\t\tmagicString.prepend(`define(${chunk.amdId ? `'${chunk.amdId}',` : ''}[${dependencyArguments}], ${wrapChunk.start})`);\n\t\tmagicString.prepend(intro);\n\t} else {\n\t\tmagicString.prepend(chunk.namespaceId ? `var ${chunk.namespaceId} = ` : '');\n\t\tmagicString.prepend(`(${wrapChunk.start})`);\n\t\tmagicString.prepend(intro);\n\t}\n\treturn magicString;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Rollup Bundle Start in JavaScript\nDESCRIPTION: This function generates the beginning of a Rollup bundle, including imports, variable declarations, and initialization code. It handles different module formats and output options.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/amd/assets/renderStart-B4XObdBk.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction renderStart({\n\tbanner,\n\tchunkId,\n\tformat,\n\tglobalName,\n\tindentString,\n\tiife,\n\tinterop,\n\tintro,\n\tnamedExports,\n\tstrict,\n\tsystem,\n\tvarOrConst,\n\texternalLiveBindings\n}) {\n\tconst _ = (format === 'system' && system.noConflict) ? '\\n\\t' : '\\n\\n';\n\n\tlet code = stringifyStart(format === 'system' ? '' : intro, banner, varOrConst, globalName, system);\n\n\tif (format === 'amd') {\n\t\tcode += `define(['require'`;\n\t\tif (dependencies.length > 0) {\n\t\t\tcode += `, ${(dependencies.map(stringifyDependencyId).join(', '))}`;\n\t\t}\n\t\tcode += `], (function (require) { ${_}`;\n\t} else if (format === 'cjs') {\n\t\tcode += `'use strict';${_}`;\n\t} else if (format === 'system') {\n\t\tcode += `System.register([${dependencies.map(stringifyDependencyId).join(', ')}], (function (exports) {${_}\t'use strict';${_}`;\n\t} else if (format === 'umd') {\n\t\tif (dependencies.length > 0) {\n\t\t\tcode += `(function (global, factory) {${_}\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require(${dependencies.map(stringifyDependencyId).join('), require(')})) :${_}\ttypeof define === 'function' && define.amd ? define(['require'${dependencies.length > 0 ? `, ${dependencies.map(stringifyDependencyId).join(', ')}` : ''}], factory) :${_}\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, ${globalName ? `global.${globalName} = ` : ''}factory(${getInteropBlock(dependencies, interop, externalLiveBindings)}));${_}}(this, (function (require) { 'use strict';${_}`;\n\t\t} else if (globalName) {\n\t\t\tcode += `(function (global, factory) {${_}\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :${_}\ttypeof define === 'function' && define.amd ? define(factory) :${_}\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.${globalName} = factory());${_}}(this, (function () { 'use strict';${_}`;\n\t\t} else {\n\t\t\tcode += `(function (factory) {${_}\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :${_}\ttypeof define === 'function' && define.amd ? define(factory) :${_}\tfactory();${_}}((function () { 'use strict';${_}`;\n\t\t}\n\t} else if (format === 'iife') {\n\t\tif (iife) {\n\t\t\tcode += `var ${globalName} = (function (${getGlobalNameMechanism(dependencies)}) {${_}`;\n\t\t} else {\n\t\t\tcode += `(function (${getGlobalNameMechanism(dependencies)}) {${_}`;\n\t\t}\n\t\tif (strict) {\n\t\t\tcode += `\t'use strict';${_}`;\n\t\t}\n\t}\n\n\tcode += getInteropBlock(dependencies, interop, externalLiveBindings, format !== 'cjs');\n\tif (format === 'cjs') {\n\t\tcode += setupNamespace(varOrConst, namedExports, dependencies, 'module.exports =');\n\t} else if (format === 'system') {\n\t\tcode += 'var __module = exports;' + _;\n\t}\n\treturn code;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Asset Reference in Rollup\nDESCRIPTION: This function creates an asset reference object with a name and source. It handles different input types and formats the asset name.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/system/assets/asset-solved-DSjIjiFN.txt#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function resolveAssetFileReference(assetReferenceId: string, relativePath: string): ResolvedAssetInfo {\n\tconst assetId = relativePath.split(/[/\\\\]/).pop()!;\n\treturn {\n\t\tassetFileReferenceId: assetReferenceId,\n\t\trelativePath,\n\t\tname: assetId\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Import Example\nDESCRIPTION: Example of how source parameter corresponds to import statement in code.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { foo } from '../bar.js';\n```\n\n----------------------------------------\n\nTITLE: Bundling JavaScript for Browser Usage\nDESCRIPTION: Command to compile JavaScript into a self-executing function (IIFE) format for browser usage.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/introduction/index.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# compile to a <script> containing a self-executing function ('iife')\n$ rollup main.js --file bundle.js --format iife\n```\n\n----------------------------------------\n\nTITLE: Using Template String for Dynamic Banner in Rollup\nDESCRIPTION: Shows how to create a dynamic banner using template strings. This allows for more complex banners that can include variables like package name, version, license, and date information pulled from package.json.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/banner.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport banner from 'rollup-plugin-banner';\n\nexport default {\n  input: 'src/index.js',\n  output: {\n    file: 'dist/bundle.js',\n    format: 'cjs'\n  },\n  plugins: [\n    banner(\n      '${name} v${version}\\n' +\n      '(c) ${new Date().getFullYear()} ${author}\\n' +\n      'Released under the ${license} License.'\n    ),\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration via NPM Package\nDESCRIPTION: Shows how to use an installed npm package as a Rollup plugin\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nrollup -i input.js -f es -p @rollup/plugin-node-resolve\n```\n\n----------------------------------------\n\nTITLE: Implementing Rollup.js REPL with Vue.js and TypeScript\nDESCRIPTION: Sets up a Vue.js component to create a REPL (Read-Eval-Print Loop) interface for Rollup.js. The script uses the TypeScript setup syntax and imports the ReplMain component which contains the actual REPL implementation.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/repl/index.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport ReplMain from './components/ReplMain.vue';\n</script>\n\n<ReplMain/>\n```\n\n----------------------------------------\n\nTITLE: Indenting Code with MagicString in TypeScript\nDESCRIPTION: A function that adds indentation to specified sections of code. It supports indenting content between start and end positions using a provided indent string, which defaults to a tab character.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/asset-needs-code-reference-same-source/_expected/system/needs-reference3.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function indentString(\n\tstring: string,\n\tindent: string | false\n): string {\n\tif (indent === false) return string;\n\treturn string.replace(/^[^\\r\\n]/gm, indent + '$&');\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Empty Lines in Code using MagicString in TypeScript\nDESCRIPTION: A function that removes empty lines from a string by iterating through each line and checking if it contains only whitespace characters. It handles various edge cases like lines at the end of the string.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/asset-needs-code-reference-same-source/_expected/system/needs-reference3.txt#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function removeEmptyLines(string: string): string {\n\treturn string.split('\\n').filter((line, i, { length }) => {\n\t\treturn (i === 0 && line.length > 0) || i === length - 1 || /\\S/.test(line);\n\t}).join('\\n');\n}\n```\n\n----------------------------------------\n\nTITLE: Running Rollup Build Command in Shell\nDESCRIPTION: Command to run the Rollup build process using npm.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Referencing Rollup Darwin ARM64 Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the Rollup package for ARM64 Darwin (macOS) architecture using Markdown syntax. It specifies the package name and provides a brief description of its contents.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/darwin-arm64/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@rollup/rollup-darwin-arm64`\n\nThis is the **aarch64-apple-darwin** binary for `rollup`\n```\n\n----------------------------------------\n\nTITLE: Generating Banner for Rollup Output in JavaScript\nDESCRIPTION: This function creates a banner for Rollup output files. It includes package name, version, license, and copyright information. The function uses package.json data and the current year to generate the banner.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/amd/assets/banner--qPJuKPL.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport pkg from './package.json';\n\nexport default function banner() {\n\tconst year = new Date().getFullYear();\n\treturn `/*!\n * @license\n * ${pkg.name} v${pkg.version}\n * Copyright 2019-${year} ${pkg.author}\n * Released under the ${pkg.license} license.\n */`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OutroOptions Interface for Rollup Configuration in TypeScript\nDESCRIPTION: This snippet defines the OutroOptions interface, which specifies the structure for configuring the outro section in Rollup. It allows for setting custom outro content for different output formats.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/outro-D8xwWt8B.txt#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface OutroOptions {\n\tamd?: string | null;\n\tcjs?: string | null;\n\tes?: string | null;\n\tiife?: string | null;\n\tsystem?: string | null;\n\tumd?: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Footer Component with Copyright Notice\nDESCRIPTION: A basic HTML footer element that displays a copyright notice with the current year and attributes the Rollup project with a link to its website.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/footer.txt#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<footer>\n  <p class=\"mt-8 text-xs text-center text-gray-500\">\n    © {new Date().getFullYear()} <a href=\"https://rollupjs.org\">Rollup</a>\n  </p>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Rendering Start Message for Rollup Build in JavaScript\nDESCRIPTION: This function generates a formatted message for the start of a Rollup build process. It takes input options, output options, and warnings as parameters, and constructs a string with details about the build configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/cjs/assets/renderStart-B4XObdBk.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function renderStart({\n\tinput,\n\toutput: outputs,\n\tplugins\n}: InputOptions & {\n\toutput: OutputOptions[];\n\tplugins: Plugin[];\n}): string {\n\tconst inputFiles = ensureArray(input);\n\tlet inputDescription = inputFiles.length > 1\n\t\t? `${inputFiles.length} files`\n\t\t: inputFiles[0];\n\tif (inputDescription.startsWith('/') || /^[A-Z]:/.test(inputDescription)) {\n\t\tinputDescription = relative(process.cwd(), inputDescription);\n\t}\n\tlet outputDescription = outputs\n\t\t.map(output => {\n\t\t\tlet description = output.file || output.dir || 'in-memory';\n\t\t\tif (description.startsWith('/') || /^[A-Z]:/.test(description)) {\n\t\t\t\tdescription = relative(process.cwd(), description);\n\t\t\t}\n\t\t\tif (output.format) {\n\t\t\t\tdescription += ` (${output.format})`;\n\t\t\t}\n\t\t\treturn description;\n\t\t})\n\t\t.join(', ');\n\tconst pluginCount = plugins.length;\n\tlet message = green(`\n${bold('rollup v' + VERSION)}\n`);\n\tmessage += `bundles ${bold(inputDescription)} → ${bold(outputDescription)}\\n`;\n\tif (pluginCount > 0) {\n\t\tmessage += `${pluginCount} plugin${pluginCount === 1 ? '' : 's'}: ${plugins\n\t\t\t.map(plugin => plugin.name)\n\t\t\t.join(', ')}\\n`;\n\t}\n\treturn message;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Outro Code for Rollup Bundles in JavaScript\nDESCRIPTION: A function that generates the closing part of a bundle, handling exports and proper syntax based on the bundle options. It formats the outro code differently depending on whether the output is an IIFE, whether there are exports, and if a compact format is requested.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/outro-D8xwWt8B.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function outro(magicString, { exports, indent, isEntryFacade, outro }, options) {\n\tconst { compact, esModule, externalLiveBindings, freeze, namespaceToStringTag, strict } = options;\n\tconst n = compact ? '' : '\\n';\n\tconst s = compact ? '' : ' ';\n\n\tconst useStrict = strict ? `${indent}'use strict';${n}${n}` : '';\n\tconst newLine = n + (outro ? `${outro}${n}${n}` : '');\n\n\tif (exports && isEntryFacade) {\n\t\treturn `${useStrict}${getExport(\n\t\t\texports,\n\t\t\tn,\n\t\t\ts,\n\t\t\tcompact,\n\t\t\tesModule,\n\t\t\texternalLiveBindings,\n\t\t\tfreeze,\n\t\t\tnamespaceToStringTag,\n\t\t\tindent,\n\t\t\tmagicString.toString().trim()\n\t\t)}${newLine}`;\n\t}\n\n\treturn `${useStrict}${magicString.toString().trim()}${newLine}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Performance Hooks and Timers in TypeScript for Rollup\nDESCRIPTION: This code defines the performance measurement utilities for Rollup. It creates a timer system that tracks execution time of various build operations, with support for nested operations and performance reporting.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/renderStart.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { performance, PerformanceObserver } from 'perf_hooks';\nimport process from 'node:process';\n\nconst NOOP = (): void => {};\n\nexport let getPerformanceName: () => string;\nexport let getPerfObserver: (callback: (entry: any) => void) => any;\n\nlet toSeconds = 0;\nlet markPerfEntries = false;\nexport let timeEnd: (n: string) => void;\nexport let timeStart: (n: string) => void;\n\nif (typeof performance === 'object' && typeof performance.now === 'function') {\n\ttoSeconds = 1e-3;\n\tif (typeof PerformanceObserver === 'function') {\n\t\tmarkPerfEntries = true;\n\t\ttimeEnd = function timeEnd(n: string) {\n\t\t\tperformance.mark(`rollup:end:${n}`);\n\t\t\tperformance.measure(`rollup:${n}`, `rollup:start:${n}`, `rollup:end:${n}`);\n\t\t\tperformance.clearMarks(`rollup:start:${n}`);\n\t\t\tperformance.clearMarks(`rollup:end:${n}`);\n\t\t};\n\t\ttimeStart = function timeStart(n: string) {\n\t\t\tperformance.mark(`rollup:start:${n}`);\n\t\t};\n\t\tgetPerfObserver = function getPerfObserver(callback) {\n\t\t\treturn new PerformanceObserver(callback);\n\t\t};\n\t\tgetPerformanceName = function getPerformanceName() {\n\t\t\treturn 'perf_hooks';\n\t\t};\n\t} else {\n\t\ttimeEnd = function timeEnd(_n: string) {};\n\t\ttimeStart = function timeStart(_n: string) {};\n\t\tgetPerfObserver = function getPerfObserver(_callback) {\n\t\t\treturn null;\n\t\t};\n\t\tgetPerformanceName = function getPerformanceName() {\n\t\t\treturn '';\n\t\t};\n\t}\n} else if (typeof process === 'object' && typeof process.hrtime === 'function') {\n\tconst hr = () => {\n\t\tconst t = process.hrtime();\n\t\treturn t[0] + t[1] * 1e-9;\n\t};\n\tconst trackedTimings: Record<string, number> = Object.create(null);\n\ttimeEnd = function timeEnd(n: string) {\n\t\ttrackedTimings[n] = hr() - trackedTimings[n];\n\t};\n\ttimeStart = function timeStart(n: string) {\n\t\ttrackedTimings[n] = hr();\n\t};\n\tgetPerfObserver = function getPerfObserver(callback: (entry: any) => void) {\n\t\treturn {\n\t\t\tdisconnect() {},\n\t\t\tobserve() {\n\t\t\t\tObject.keys(trackedTimings).forEach(name => {\n\t\t\t\t\tconst duration = trackedTimings[name];\n\t\t\t\t\tcallback({\n\t\t\t\t\t\tentryType: 'measure',\n\t\t\t\t\t\tname: `rollup:${name}`,\n\t\t\t\t\t\tduration,\n\t\t\t\t\t\tstatrTime: 0\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t};\n\tgetPerformanceName = function getPerformanceName() {\n\t\treturn 'hrtime';\n\t};\n} else {\n\ttimeEnd = NOOP;\n\ttimeStart = NOOP;\n\tgetPerfObserver = function getPerfObserver(_callback) {\n\t\treturn null;\n\t};\n\tgetPerformanceName = function getPerformanceName() {\n\t\treturn '';\n\t};\n}\n\nexport interface Timer {\n\tmemory: () => void;\n\ttimeEnd: () => number;\n}\n\nexport function getTimings(\n\tobserver: ReturnType<typeof getPerfObserver>,\n\tmessage: (name: string, time: number) => void\n): () => void {\n\tif (markPerfEntries && observer) {\n\t\treturn () => {\n\t\t\tobserver.observe({ entryTypes: ['measure'] });\n\t\t\treturn () => {\n\t\t\t\tobserver.disconnect();\n\t\t\t};\n\t\t};\n\t}\n\treturn () => {\n\t\treturn () => {\n\t\t\tif (observer) {\n\t\t\t\tobserver.observe();\n\t\t\t\tobserver.disconnect();\n\t\t\t}\n\t\t};\n\t};\n}\n\nexport function getStartTime(): () => number {\n\tif (typeof performance === 'object' && typeof performance.now === 'function') {\n\t\treturn () => performance.now() * toSeconds;\n\t}\n\tif (typeof process === 'object' && typeof process.hrtime === 'function') {\n\t\treturn () => {\n\t\t\tconst t = process.hrtime();\n\t\t\treturn t[0] + t[1] * 1e-9;\n\t\t};\n\t}\n\tconst startTime = Date.now();\n\treturn () => (Date.now() - startTime) / 1e3;\n}\n\nexport function initialiseTimers(inputOptions: { perf?: boolean }): {\n\ttime: boolean;\n\tcurrentObserver: any;\n\tmemory: boolean;\n\tstartTime: () => number;\n} {\n\tconst rawStartTime = getStartTime();\n\tconst startTime = rawStartTime();\n\tlet currentObserver: ReturnType<typeof getPerfObserver> | null = null;\n\n\tconst time = inputOptions.perf !== false;\n\tconst memory = time && typeof process === 'object' && typeof process.memoryUsage === 'function';\n\n\tfunction getElapsedTime(): number {\n\t\treturn rawStartTime() - startTime;\n\t}\n\n\treturn { time, currentObserver, memory, startTime: getElapsedTime };\n}\n\nexport function createTimer(description: string, timers: ReturnType<typeof initialiseTimers>): Timer {\n\tif (!timers.time) {\n\t\treturn {\n\t\t\tmemory: NOOP,\n\t\t\ttimeEnd: () => 0\n\t\t};\n\t}\n\ttimeStart(description);\n\tconst startMemory = timers.memory ? process.memoryUsage().heapUsed : 0;\n\tconst startTime = timers.startTime();\n\treturn {\n\t\tmemory() {\n\t\t\treturn timers.memory ? process.memoryUsage().heapUsed - startMemory : 0;\n\t\t},\n\t\ttimeEnd() {\n\t\t\ttimeEnd(description);\n\t\t\treturn timers.startTime() - startTime;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Path.dirname in Browser JavaScript\nDESCRIPTION: A browser-compatible implementation of Node.js path.dirname function that returns the directory part of a path string. It extracts the directory portion by finding the last directory separator in the path.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/assets/buildEnd-BuNl-RZp.txt#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function dirname(path) {\n\tif (path.length === 0) return '.';\n\tlet code = path.charCodeAt(0);\n\tconst hasRoot = code === 47 /*/*/;\n\tlet end = -1;\n\tlet matchedSlash = true;\n\tfor (let i = path.length - 1; i >= 1; --i) {\n\t\tcode = path.charCodeAt(i);\n\t\tif (code === 47 /*/*/) {\n\t\t\tif (!matchedSlash) {\n\t\t\t\tend = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t// We saw the first non-path separator\n\t\t\tmatchedSlash = false;\n\t\t}\n\t}\n\n\tif (end === -1) return hasRoot ? '/' : '.';\n\tif (hasRoot && end === 1) return '//';\n\treturn path.slice(0, end);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM Package in JavaScript\nDESCRIPTION: Example of importing and using the 'the-answer' package in a JavaScript file.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/main.js\nimport answer from 'the-answer';\n\nexport default function () {\n\tconsole.log('the answer is ' + answer);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Footer HTML Structure\nDESCRIPTION: Defines the HTML structure for a custom footer, including sections for contributors, sponsors, and backers. It uses CSS classes for styling and data attributes for JavaScript interaction.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/footer.txt#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<footer class=\"grid-list\">\n\t<div class=\"grid-list-column\">\n\t\t<h3>Rollup</h3>\n\t\t<ul>\n\t\t\t<li><a href=\"/repl/\">Playground</a></li>\n\t\t\t<li><a href=\"/guide/en/\">Guide</a></li>\n\t\t\t<li><a href=\"/configuration-options/\">Configuration</a></li>\n\t\t\t<li><a href=\"https://is.gd/rollup_chat\">Help / Chat</a></li>\n\t\t</ul>\n\t</div>\n\t<div class=\"grid-list-column\">\n\t\t<h3>Ecosystem</h3>\n\t\t<ul>\n\t\t\t<li><a href=\"https://github.com/rollup/awesome\">Awesome Rollup</a></li>\n\t\t\t<li><a href=\"https://github.com/rollup/plugins\">Official Plugins</a></li>\n\t\t\t<li><a href=\"https://github.com/rollup/rollup-starter-lib\">Library Starter</a></li>\n\t\t\t<li><a href=\"https://github.com/rollup/rollup-starter-app\">Application Starter</a></li>\n\t\t</ul>\n\t</div>\n\t<div class=\"grid-list-column\">\n\t\t<h3>About</h3>\n\t\t<ul>\n\t\t\t<li><a href=\"https://github.com/rollup/rollup\">GitHub Repo</a></li>\n\t\t\t<li><a href=\"https://github.com/rollup/rollup/blob/master/CODE_OF_CONDUCT.md\">Code Of Conduct</a></li>\n\t\t\t<li><a href=\"/faqs/\">FAQs</a></li>\n\t\t\t<li><a href=\"/license/\">License</a></li>\n\t\t</ul>\n\t</div>\n\t<div class=\"grid-list-column\">\n\t\t<h3>More</h3>\n\t\t<ul>\n\t\t\t<li><a href=\"https://opencollective.com/rollup\">Donate</a></li>\n\t\t\t<li><a href=\"https://twitter.com/rollupjs\">Twitter</a></li>\n\t\t\t<li><a href=\"/branding/\">Branding</a></li>\n\t\t</ul>\n\t</div>\n</footer>\n\n<div class=\"copyright\">\n\t<p>The Rollup project is sponsored by</p>\n\t<div data-loading=\"Loading sponsors…\">\n\t\t<ul class=\"sponsors\"></ul>\n\t</div>\n</div>\n\n<p>Released under the MIT license. Rollup is designed and built by the amazing <a href=\"https://github.com/rollup/rollup/graphs/contributors\">contributors</a> and maintained by <a href=\"https://github.com/lukastaegert\">Lukas Taegert-Atkinson</a>.</p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTML Footer with Dynamic Year\nDESCRIPTION: A simple footer HTML element that displays copyright information with the current year. The footer uses vanilla HTML with no dependencies, showing how to implement a basic page footer.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/footer-CV6kYft-.txt#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nfooter\n```\n\n----------------------------------------\n\nTITLE: Basic Log Filtering in Rollup\nDESCRIPTION: Shows how to filter log messages using the --filterLogs option with basic key:value matching\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nrollup -c --filterLogs code:EVAL\n```\n\n----------------------------------------\n\nTITLE: Generating Banner Output for Rollup Bundles in JavaScript\nDESCRIPTION: This snippet defines a function to generate a banner for Rollup output. It handles different output formats (ES, CJS, UMD) and incorporates package information like name, version, and license.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/assets/banner--qPJuKPL.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { execSync } from 'child_process';\nimport moment from 'moment';\n\nexport default function banner(pkg, format = 'es') {\n\tconst commit = execSync('git rev-parse --short HEAD')\n\t\t.toString()\n\t\t.trim();\n\n\tconst versionName = [\n\t\tpkg.version,\n\t\tformat,\n\t\tcommit\n\t].join('-');\n\n\tconst banner = [\n\t\t`/*!\n * ${pkg.name} v${versionName}\n * (c) ${moment().format('YYYY')} ${pkg.author.name}\n * Released under the ${pkg.license} License.\n */`\n\t];\n\n\tif (format === 'es') {\n\t\tbanner.push(`import { name, version } from './package.json';`);\n\t}\n\n\tif (format === 'cjs') {\n\t\tbanner.push(`'use strict';`);\n\t\tbanner.push(`Object.defineProperty(exports, '__esModule', { value: true });`);\n\t}\n\n\tif (format === 'umd') {\n\t\tbanner.push(\n\t\t\t`(function(g,f){typeof exports==='object'&&typeof module!=='undefined'?f(exports):typeof define==='function'&&define.amd?define(['exports'],f):(g=typeof globalThis!=='undefined'?globalThis:g||self,f(g.${pkg.name}={}))}(this,(function(exports){'use strict';`\n\t\t);\n\t}\n\n\treturn banner.join('\\n');\n}\n```\n\n----------------------------------------\n\nTITLE: Module Outro Implementation in TypeScript\nDESCRIPTION: The outro function that generates the final output code for a bundled module in Rollup. It handles different module formats and generates appropriate export statements for the module.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/amd/outro.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bundle } from './Bundle';\nimport { NormalizedOutputOptions } from '../rollup/types';\nimport { FILE_PLACEHOLDER } from './utils/replaceIdentifiers';\n\nexport default function outro(bundle: Bundle, options: NormalizedOutputOptions, snippets): string {\n\tlet outro = options.outro;\n\tif (options.format === 'umd' || options.format === 'iife') {\n\t\toutro = (outro ? `\\n${outro}\\n` : '\\n') + `return ${bundle.getExportBlock()};\\n})`;\n\t} else if (options.format === 'system') {\n\t\toutro =\n\t\t\t(outro ? `\\n${outro}\\n` : '\\n') + (snippets.needsExportsVariable ? `\\n\\treturn exports;` : '') + '\\n})';;\n\t} else if (options.format === 'es') {\n\t\toutro = outro || '';\n\t} else if (options.outro === undefined) {\n\t\toutro = '';\n\t}\n\treturn outro;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel in JSON\nDESCRIPTION: Babel configuration file specifying presets for transpilation.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"presets\": [\"@babel/env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration via Relative Path\nDESCRIPTION: Example of specifying a Rollup plugin using a relative file path\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/command-line-interface/index.md#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nrollup -i input.js -f es -p ./my-plugin.js\n```\n\n----------------------------------------\n\nTITLE: Rollup Package Name Reference\nDESCRIPTION: The NPM package name for the PowerPC64LE Linux GNU binary distribution of Rollup bundler.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/linux-powerpc64le-gnu/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@rollup/rollup-linux-powerpc64le-gnu\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Resolution in Rollup\nDESCRIPTION: Plain text configuration specifying 'for: resolved' parameters, likely used as part of Rollup's asset resolution pipeline configuration.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/es/assets/asset-resolved-DukuHpJ1.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAsset for: resolved\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Package in Shell\nDESCRIPTION: Commands to install the 'the-answer' package using npm.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install the-answer\n# or `npm i the-answer`\n```\n\n----------------------------------------\n\nTITLE: Source Code Transformation with Empty Sourcemap\nDESCRIPTION: Example showing how to return an empty sourcemap when it doesn't make sense to generate one for a particular transformation, such as when using rollup-plugin-string.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#2025-04-16_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n\tcode: transformedCode,\n\tmap: { mappings: '' }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ESM Exports for Rollup in JavaScript\nDESCRIPTION: This code snippet defines the export configuration for Rollup's ESM build. It specifies default exports, named exports, and their corresponding source files. The configuration ensures proper module structure and naming in the final build output.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/assets/generateBundle-format-B6fu0hOK.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n\t// this is the entry for the CLI when node is called with --experimental-modules\n\t'./dist/bin/rollup': './cli/run/cli-js.ts',\n\t'./': './src/rollup/types.d.ts',\n\t'./dist/rollup.js': './src/node-entry.ts',\n\t'./dist/es/rollup.js': './src/node-entry.ts',\n\tpackageJson: './package.json',\n\t// for types\n\t'./types': './src/rollup/types.d.ts',\n\t'.': {\n\t\ttypes: './dist/rollup.d.ts',\n\t\tdefault: './dist/es/rollup.js'\n\t},\n\t'./browser': {\n\t\ttypes: './dist/rollup.d.ts',\n\t\tdefault: './dist/es/rollup.browser.js'\n\t},\n\t'./dist/rollup.browser.js': './src/browser-entry.ts',\n\t'./dist/es/rollup.browser.js': './src/browser-entry.ts'\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ResolvedAsset Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for resolved assets in Rollup, specifying the fileName, name, needsCodeReference, referenceId, source, and type properties that represent a fully resolved asset.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/system/assets/asset-resolved-DukuHpJ1.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ResolvedAsset {\n\tfileName: string;\n\tname: string;\n\tneedsCodeReference: boolean;\n\treferenceId: string;\n\tsource: string | Uint8Array;\n\ttype: 'asset' | 'chunk';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rollup Browser Package via npm\nDESCRIPTION: Command to install the browser-compatible version of Rollup via npm.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/faqs/index.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @rollup/browser\n```\n\n----------------------------------------\n\nTITLE: Exporting File Transformation Function in JavaScript\nDESCRIPTION: This snippet exports a function named 'transform'. While the implementation is not provided, it's likely used to modify or process files during a build step in Rollup.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/assets/transform-9DaiUiOT.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { transform };\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Module Bundle Generation in Rollup\nDESCRIPTION: Tests empty module bundle generation in Rollup by implementing a custom generateBundle hook. The configuration ensures proper handling of empty bundle generation scenarios.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/cjs/custom/generateBundle.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngenerateBundle-custom\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Footer Content with JavaScript\nDESCRIPTION: JavaScript code to dynamically populate the footer with sponsor information fetched from an API. It handles loading states, error handling, and renders sponsor logos with links.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/footer.txt#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n(function () {\n\tconst footer = document.querySelector('footer');\n\tconst copyright = document.querySelector('.copyright');\n\tconst sponsorsContainer = copyright.querySelector('.sponsors');\n\tconst loadingContainer = copyright.querySelector('[data-loading]');\n\n\tif (!sponsorsContainer) return;\n\n\tlet runningAnimation = false;\n\n\tconst runThrottle = (fn) => {\n\t\tif (runningAnimation) return;\n\t\trunningAnimation = true;\n\t\trequestAnimationFrame(() => {\n\t\t\tfn();\n\t\t\trunningAnimation = false;\n\t\t});\n\t};\n\n\tconst setLoadingState = (loading) => {\n\t\tloadingContainer.textContent = loading ? loadingContainer.dataset.loading : '';\n\t};\n\n\tconst showError = () => {\n\t\tconst errorContainer = document.createElement('p');\n\t\terrorContainer.className = 'error';\n\t\terrorContainer.textContent = 'Failed to load sponsors.';\n\t\tsponsorsContainer.appendChild(errorContainer);\n\t};\n\n\tconst renderSponsors = (sponsors) => {\n\t\tsponsors.forEach((sponsor) => {\n\t\t\tconst li = document.createElement('li');\n\t\t\tconst link = document.createElement('a');\n\t\t\tconst img = document.createElement('img');\n\n\t\t\tlink.href = sponsor.website;\n\t\t\tlink.rel = 'noopener';\n\t\t\tlink.target = '_blank';\n\n\t\t\timg.src = sponsor.avatar;\n\t\t\timg.alt = sponsor.name;\n\t\t\timg.loading = 'lazy';\n\n\t\t\tlink.appendChild(img);\n\t\t\tli.appendChild(link);\n\t\t\tsponsorsContainer.appendChild(li);\n\t\t});\n\t};\n\n\tconst fetchSponsors = async () => {\n\t\ttry {\n\t\t\tconst response = await fetch('https://opencollective.com/rollup/members/all.json');\n\t\t\tif (!response.ok) throw new Error('Failed to fetch sponsors');\n\t\t\tconst data = await response.json();\n\t\t\tconst sponsors = data\n\t\t\t\t.filter((sponsor) => sponsor.role === 'BACKER' && sponsor.tier && sponsor.isActive)\n\t\t\t\t.sort((a, b) => b.totalAmountDonated - a.totalAmountDonated)\n\t\t\t\t.slice(0, 10);\n\t\t\trenderSponsors(sponsors);\n\t\t} catch (error) {\n\t\t\tconsole.error('Error fetching sponsors:', error);\n\t\t\tshowError();\n\t\t} finally {\n\t\t\tsetLoadingState(false);\n\t\t}\n\t};\n\n\tsetLoadingState(true);\n\tfetchSponsors();\n\n\tconst footerObserver = new IntersectionObserver(\n\t\t([entry]) => {\n\t\t\trunThrottle(() => {\n\t\t\t\tcopyright.classList.toggle('in-viewport', entry.isIntersecting);\n\t\t\t});\n\t\t},\n\t\t{ threshold: 0.1 }\n\t);\n\n\tfooterObserver.observe(footer);\n})();\n```\n\n----------------------------------------\n\nTITLE: UMD Module Format for Named Exports\nDESCRIPTION: UMD pattern that handles named exports specifically, adding the __esModule property to ensure compatibility with both CommonJS and ES module systems.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/outro.txt#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('external')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', 'external'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.foo = global.foo || {}, global.external));\n}(this, (function (exports, external) { 'use strict';\n\nvar name = 'foo';\n\nexports.name = name;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Class for Module Resolution in Rollup (TypeScript)\nDESCRIPTION: This code snippet defines the Asset class, which is responsible for resolving and processing individual modules in the Rollup bundler. It includes methods for parsing source code, analyzing dependencies, and transforming modules.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/form/samples/configure-file-url/_expected/assets/asset-resolved-DukuHpJ1.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Asset {\n\tconstructor(\n\t\tprivate readonly graph: Graph,\n\t\tprivate readonly id: string,\n\t\tprivate readonly options: NormalizedInputOptions,\n\t\tprivate readonly pluginDriver: PluginDriver,\n\t\tprivate readonly facadeModule: Module | null\n\t) {}\n\n\tasync generate(chunk: Chunk): Promise<string | { code: string; map: SourceMapMapped }> {\n\t\tconst source = await this.render(chunk);\n\t\tlet map: SourceMapMapped | null = null;\n\t\tlet code: string | { code: string; map: SourceMapMapped };\n\n\t\tif (source.map) {\n\t\t\t// TODO\n\t\t}\n\n\t\tif (source.isEmpty) {\n\t\t\tif (source.map) {\n\t\t\t\treturn source.map;\n\t\t\t}\n\t\t\treturn { code: '', map: { mappings: '' } };\n\t\t}\n\n\t\tif (source.map) {\n\t\t\tcode = { code: source.code, map: source.map };\n\t\t} else {\n\t\t\tcode = source.code;\n\t\t}\n\n\t\treturn code;\n\t}\n\n\tasync render(chunk: Chunk): Promise<Source> {\n\t\tif (this.facadeModule) {\n\t\t\treturn this.facadeModule.render(this.options, chunk);\n\t\t}\n\n\t\tconst source = await this.pluginDriver.hookFirst('renderAsset', [{\n\t\t\tassetFileName: this.id,\n\t\t\tchunkId: chunk.id,\n\t\t\tformat: chunk.getRenderedChunk().format,\n\t\t\tglobalName: chunk.getGlobalName?.(),\n\t\t\tmoduleIds: Object.keys(chunk.modules)\n\t\t}]);\n\n\t\tif (source == null) {\n\t\t\tthrow new Error(`Could not load asset ${this.id}`);\n\t\t}\n\n\t\treturn typeof source === 'string' ? { code: source } : source;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Module Export\nDESCRIPTION: Defines the module export pattern using CommonJS module.exports declaration. This code would typically be at the end of a Rollup configuration or module file to expose its functionality.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/system/assets/outro-D8xwWt8B.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default module.exports;\n```\n\n----------------------------------------\n\nTITLE: Configuring ES Module Output for Rollup\nDESCRIPTION: Main export configuration defining the rollup bundler settings for ES module output. Uses default export pattern to provide build configuration including input path and output settings.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/cli/samples/config-multiple-getfilename/_expected/es.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function anonymous() {\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Rollup FreeBSD Package Name\nDESCRIPTION: The NPM package name for the FreeBSD x64 binary of Rollup bundler.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/freebsd-x64/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@rollup/rollup-freebsd-x64\n```\n\n----------------------------------------\n\nTITLE: Disabling FSEvents in Rollup Watch Mode\nDESCRIPTION: Demonstrates how to disable FSEvents in Rollup's watch mode configuration to avoid EMFILE errors on macOS for large projects.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/troubleshooting/index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\n// ---cut-start---\n/** @type {import('rollup').RollupOptions} */\n// ---cut-end---\nexport default {\n\t/* ..., */\n\twatch: {\n\t\tchokidar: {\n\t\t\tuseFsEvents: false\n\t\t}\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Plugins in RollupJS\nDESCRIPTION: This function loads plugins for RollupJS by handling both objects and functions, applying plugin options, and maintaining parallelism where possible.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/assets/load-B_kSChOq.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function loadPlugin(plugin: GenericPluginInstance | PluginFactory, options: NormalizedInputOptions): Plugin {\n\tconst pluginOptions = {\n\t\tasync: options.async,\n\t\tdocsUrl: options.docsUrl\n\t};\n\t// No nested `async` plugins are supported because after all plugins have been configured,\n\t// a running promise chain is built automatically for the plugin hooks.\n\tconst isAsyncPlugin = typeof plugin === 'object' && plugin.hasOwnProperty('async');\n\tconst loadedPlugin =\n\t\ttypeof plugin === 'function' ? plugin.call(pluginContext, options) : plugin;\n\tif (isAsyncPlugin) delete (loadedPlugin as Record<string, unknown>).async;\n\treturn {\n\t\t...loadedPlugin,\n\t\t...(isAsyncPlugin && { async: true })\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Buffers in JavaScript\nDESCRIPTION: This function concatenates two buffers, handling cases where one or both inputs might be null or undefined. It uses the Buffer.concat method for efficient combination.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/deduplicate-assets/_expected/system/assets/otherBuffer-6HvweN2A.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function concatenateBuffers(a, b) {\n\tif (!a) return b;\n\tif (!b) return a;\n\treturn Buffer.concat([a, b]);\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Node.js Path String\nDESCRIPTION: Node.js code that exports a string literal 'renderStart', likely used as a path or identifier in a module system.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/assets/renderStart-B4XObdBk.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrenderStart\n```\n\n----------------------------------------\n\nTITLE: Specifying Rollup Linux x64 Musl Package in Markdown\nDESCRIPTION: This code snippet defines the package name for the Rollup Linux x64 Musl binary. It uses a code block in Markdown to highlight the package name.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/linux-x64-musl/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n@rollup/rollup-linux-x64-musl\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Banner with Custom Formatting Options\nDESCRIPTION: Demonstrates using the banner plugin with custom formatting options. This example shows how to define a custom template, specify source files for package information, and apply the banner conditionally based on file type.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/banner.txt#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport banner from 'rollup-plugin-banner';\n\nexport default {\n  input: 'src/index.js',\n  output: {\n    file: 'dist/bundle.js',\n    format: 'cjs'\n  },\n  plugins: [\n    banner({\n      file: path.join(__dirname, 'banner.txt'),\n      encoding: 'utf-8',\n      pkg: myCustomPackage, // default is read from package.json\n      template: '<%= pkg.name %> v<%= pkg.version %>',\n      includeFiles: /\\.(js|css|html)$/,\n    }),\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Buffer from Various Input Types in JavaScript\nDESCRIPTION: This function creates a buffer from different input types such as ArrayBuffer, Uint8Array, or string. It handles various scenarios and ensures consistent buffer creation.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/deduplicate-assets/_expected/es/assets/buffer-B9X0n-yE.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function toBuffer(input) {\n\tif (input instanceof Uint8Array) {\n\t\treturn input;\n\t}\n\tif (input instanceof ArrayBuffer) {\n\t\treturn new Uint8Array(input);\n\t}\n\tif (typeof input === 'string') {\n\t\treturn textEncoder.encode(input);\n\t}\n\treturn new Uint8Array(input);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Asset Resolution Failure in Rollup\nDESCRIPTION: This function creates an error object for asset resolution failures. It includes details about the failed asset and the error message.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/system/assets/asset-solved-DSjIjiFN.txt#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function errorAssetNotFinalized(assetName: string): RollupError {\n\treturn errorWithCode(\n\t\tErrorCode.ASSET_NOT_FINALISED,\n\t\t`Plugin error - Unable to get file name for asset \"${assetName}\". Ensure that the source is set in the plugin's generateBundle hook.`\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Returning otherBuffer Variable in JavaScript\nDESCRIPTION: This code snippet simply returns a variable named 'otherBuffer'. It appears to be a minimal function or expression that references an existing buffer variable.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/deduplicate-assets/_expected/cjs/assets/otherBuffer-6HvweN2A.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\notherBuffer\n```\n\n----------------------------------------\n\nTITLE: Specifying Rollup Windows Binary Package in Markdown\nDESCRIPTION: This snippet defines the package name for the Windows x64 MSVC binary of Rollup using a Markdown code block. It provides the exact package identifier that would be used for installation or reference.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/win32-x64-msvc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@rollup/rollup-win32-x64-msvc`\n```\n\n----------------------------------------\n\nTITLE: Testing renderChunk Plugin Hook in Rollup\nDESCRIPTION: A test case showing the usage of renderChunk plugin hook in Rollup with named syntax. The code demonstrates handling of chunk names and source code modifications.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/generate-emission-names/_expected/cjs/generated-with-names.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrenderChunk-with-names\n```\n\n----------------------------------------\n\nTITLE: Defining Unresolved Module Asset Structure in TypeScript\nDESCRIPTION: A TypeScript interface definition that specifies the structure of an unresolved module asset. It includes a fileName, source, needsId flag, and a flag indicating if a banner statement is needed.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/cjs/assets/asset-unresolved-B7Qh6_pN.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Unresolved {\n\tfileName: string;\n\tneedsBanner: boolean;\n\tneedsId: boolean;\n\tsource: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Pull Request URL in Markdown\nDESCRIPTION: Shows how pull request links are formatted in the changelog markdown\nSOURCE: https://github.com/rollup/rollup/blob/master/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[#4378](https://github.com/rollup/rollup/pull/4378)\n```\n\n----------------------------------------\n\nTITLE: Version Change Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, features, bug fixes and pull requests for Rollup versions 2.39.0 through 2.48.0.\nSOURCE: https://github.com/rollup/rollup/blob/master/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Add replacement to conditionally insert asset extensions in `entryFileNames` when preserving modules (#4077)\n\n### Bug Fixes\n\n- Fix crash when dynamically assigning to namespace members (#4070)\n- Do not associate pure annotations in front of a semi-colon or comma with succeeding code (#4068)\n```\n\n----------------------------------------\n\nTITLE: Setting indent Option in Rollup Configuration (JavaScript)\nDESCRIPTION: Shows how to set the indent option to false in Rollup configuration file.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\n// ---cut-start---\n/** @type {import('rollup').RollupOptions} */\n// ---cut-end---\nexport default {\n\t// ...\n\toutput: {\n\t\t// ...\n\t\tindent: false\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Detecting Line Endings in String Content in TypeScript\nDESCRIPTION: A function that determines the line ending style used in a string. It checks for the first occurrence of '\\r\\n' or '\\n' and returns the appropriate line ending string.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/asset-needs-code-reference-same-source/_expected/system/needs-reference3.txt#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getLineEnd(source: string): string {\n\tconst match = /\\r?\\n/.exec(source);\n\treturn match ? match[0] : '';\n}\n```\n\n----------------------------------------\n\nTITLE: Version Header in Markdown\nDESCRIPTION: Shows how version headers are formatted with version number and date\nSOURCE: https://github.com/rollup/rollup/blob/master/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.68.0\n\n_2022-02-22_\n```\n\n----------------------------------------\n\nTITLE: Text Source Content\nDESCRIPTION: A simple text source file containing the string literal 'source5'\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/asset-needs-code-reference-same-source/_expected/es/needs-reference5.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsource5\n```\n\n----------------------------------------\n\nTITLE: Using Command Line Arguments for Rollup Globals\nDESCRIPTION: Example of specifying global variable mappings for external dependencies using Rollup's command line interface. Shows how to map multiple external modules to global variables.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/configuration-options/index.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrollup -i src/main.js ... -g jquery:$,underscore:_\n```\n\n----------------------------------------\n\nTITLE: Implementing Footer Component in JavaScript\nDESCRIPTION: A simple footer component that displays copyright information and the current version. The component returns HTML markup for the footer section, including the current year and a link to the rollup website.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/cjs/footer.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfooter\n```\n\n----------------------------------------\n\nTITLE: Using Rollup in Deno with NPM in JavaScript\nDESCRIPTION: Example of using Rollup in Deno environment by importing from NPM.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rollup } from \"npm:rollup\";\n\nconst bundle = await rollup({ //...\n```\n\n----------------------------------------\n\nTITLE: Resolving Package.json Module IDs in Rollup\nDESCRIPTION: A snippet showing the resolveId identifier used in Rollup's module resolution system. This appears to be part of Rollup's package handling functionality, though additional context would be needed to understand its full implementation details.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/assets/resolveId-CCjw2RsL.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nresolveId\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Module Loading Function in JavaScript for Rollup\nDESCRIPTION: This function, loadCustom, is responsible for loading custom modules in Rollup. It handles different module types, resolves their contents, and supports both sync and async loading. The function takes various parameters including id, requestingModuleIds, options, and moduleLoaderResolveId.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/load.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function loadCustom(\n\tid: string,\n\toriginalId: string | null,\n\trequestingModuleIds: readonly string[],\n\toptions: NormalizedInputOptions,\n\tmoduleLoaderResolveId: (id: string, parent: string | undefined) => Promise<ResolvedId | null>,\n\tskipSideEffects: boolean,\n\tisEntry: boolean,\n\tgetCustomContext: (id: string) => MultiContext | undefined\n): Promise<NonNullable<PartialResolvedId>> {\n\tconst customResolution = await options.customLoad?.call(getCustomContext(id), id);\n\tif (customResolution) {\n\t\tlet { ast, code, customTransformCache, external, meta, moduleSideEffects, syntheticNamedExports } =\n\t\t\tcustomResolution;\n\t\tif (!ast && !code) {\n\t\t\tthrow new Error(`Custom load for module ${id} does not have ast or code`);\n\t\t}\n\t\tif (typeof moduleSideEffects === 'boolean') {\n\t\t\tmoduleSideEffects = moduleSideEffects ? 'no-treeshake' : 'no-side-effects';\n\t\t}\n\t\tlet resolvedId = { id };\n\t\tif (originalId !== null) {\n\t\t\tconst [resolveIdResult] = await Promise.all([\n\t\t\t\tmoduleLoaderResolveId(id, undefined),\n\t\t\t\toriginalId === id\n\t\t\t\t\t? null\n\t\t\t\t\t: moduleLoaderResolveId(originalId, undefined).then(resolveResult => {\n\t\t\t\t\t\t\tif (resolveResult && resolveResult.id !== id) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`The custom load for module ${originalId} returned a different id (${id})`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t  })\n\t\t\t]);\n\t\t\tresolvedId = resolveIdResult ?? { id };\n\t\t}\n\t\treturn {\n\t\t\t...resolvedId,\n\t\t\t...({ meta, moduleSideEffects, syntheticNamedExports } as Partial<PartialResolvedId>),\n\t\t\tasset: customTransformCache ? { type: 'custom-transform-cache', cache: customTransformCache } : undefined,\n\t\t\tast,\n\t\t\tcode,\n\t\t\texternal,\n\t\t\tisExternal: false,\n\t\t\tisEntry: isEntry ? true : undefined,\n\t\t\tsource: ast ? null : code\n\t\t};\n\t}\n\treturn (await loadWithOfflineEquivalent(\n\t\tid,\n\t\toriginalId,\n\t\trequestingModuleIds,\n\t\toptions,\n\t\tmoduleLoaderResolveId,\n\t\tskipSideEffects,\n\t\tisEntry\n\t)) as NonNullable<PartialResolvedId>;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Buffer Variable in JavaScript\nDESCRIPTION: A simple reference to a buffer variable named 'otherBuffer'. In Node.js, Buffer objects are used to handle binary data. This appears to be a standalone reference to such a variable, likely part of a larger context for binary data processing.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/deduplicate-assets/_expected/es/assets/otherBuffer-6HvweN2A.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\notherBuffer\n```\n\n----------------------------------------\n\nTITLE: Empty Module Content for Rollup Build Start Tests\nDESCRIPTION: An empty text file used as a test fixture for verifying Rollup's buildStart plugin hook behavior. This file likely serves as input for testing how plugins handle the build initialization phase.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/buildStart.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbuildStart-custom\n```\n\n----------------------------------------\n\nTITLE: Implementing Rollup renderChunk Hook Handler\nDESCRIPTION: A function that executes the renderChunk hook for all plugins in sequence, transforming the rendered chunk code. It validates chunk information, applies source maps, and handles plugin transformations.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/es/assets/renderChunk-MxjJNaqP.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function renderChunk({ code, map, options, chunk }: RenderChunkDescription): Promise<RenderChunkResult> {\n\tconst sourcemapChain = [];\n\tlet name = chunk.fileName;\n\tlet chunkCode = code;\n\tlet chunkMap = map;\n\n\tfor (const plugin of options.plugins) {\n\t\tif (!plugin.renderChunk) continue;\n\n\t\tconst result = await plugin.renderChunk.call({\n\t\t\t...renderChunkContext,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-loop-func\n\t\t\tgetSourceMapFileName: () => getSourceMapFileName(name)\n\t\t}, chunkCode, { ...chunk }, options);\n\n\t\tif (result == null) continue;\n\t\tif (typeof result === 'string') {\n\t\t\tchunkCode = result;\n\t\t} else {\n\t\t\tif (typeof result.code === 'string') {\n\t\t\t\tchunkCode = result.code;\n\t\t\t}\n\t\t\tif (result.map !== null) {\n\t\t\t\tchunkMap = typeof result.map === 'string' ? JSON.parse(result.map) : result.map;\n\t\t\t\tsourcemapChain.push(chunkMap);\n\t\t\t}\n\n\t\t\tif (typeof result.name === 'string') {\n\t\t\t\tname = result.name;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { code: chunkCode, map: chunkMap };\n}\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Displays the NPM package name for the Rollup Linux ARM64 MUSL binary package using markdown formatting.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/linux-arm64-musl/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@rollup/rollup-linux-arm64-musl\n```\n\n----------------------------------------\n\nTITLE: Referencing Rollup Linux LoongArch64 GNU Package Name in Markdown\nDESCRIPTION: This snippet shows the package name for the LoongArch64 architecture binary of Rollup for Linux GNU systems, formatted as a code block in Markdown.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/linux-loongarch64-gnu/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@rollup/rollup-linux-loongarch64-gnu\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Outro in Rollup\nDESCRIPTION: This function applies a custom outro to a Rollup bundle. It handles different types of outro content, including strings, functions, and objects with toString methods. The function also manages indentation and ensures proper formatting of the outro content.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/amd/custom/outro.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function getOutroContent(magicString, outro, indent, bundle) {\n\tlet outroContent = outro;\n\tif (typeof outro === 'function') {\n\t\toutroContent = outro({\n\t\t\tbundle,\n\t\t\toutputOptions: bundle.outputOptions\n\t\t});\n\t}\n\tif (outroContent) {\n\t\tif (typeof outroContent !== 'string') {\n\t\t\treturn error({\n\t\t\t\tcode: 'INVALID_OUTRO',\n\t\t\t\tmessage: '\"outro\" must be a string, a function returning a string, or an object with a \"toString\" method.'\n\t\t\t});\n\t\t}\n\t\tmagicString.append(indent + outroContent);\n\t\treturn magicString.append('\\n');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin for Rollup in Shell\nDESCRIPTION: Commands to install Babel-related packages for use with Rollup.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @rollup/plugin-babel @rollup/plugin-node-resolve\n```\n\n----------------------------------------\n\nTITLE: Installing Rollup Node Resolve Plugin in Shell\nDESCRIPTION: Command to install the @rollup/plugin-node-resolve plugin using npm.\nSOURCE: https://github.com/rollup/rollup/blob/master/docs/tools/index.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @rollup/plugin-node-resolve\n```\n\n----------------------------------------\n\nTITLE: Defining the renderChunk Hook in RollupJS\nDESCRIPTION: This snippet shows the function signature for the renderChunk hook in Rollup plugins. This hook allows transformation of generated chunks before they are written to disk, taking a generated chunk's code, its information object, and output options as parameters.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/set-asset-source/_expected/cjs/renderChunk.txt#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrenderChunk(code: string, chunk: RenderedChunk, options: NormalizedOutputOptions): string | null | { code: string, map?: SourceMap }\n```\n\n----------------------------------------\n\nTITLE: Implementing generateBundle Hook in a Rollup Plugin\nDESCRIPTION: A basic Rollup plugin that uses the generateBundle hook to log information about the generated bundle. It demonstrates how to access the bundle options and output structure within a plugin hook.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/es/custom/generateBundle.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin() {\n  return {\n    name: 'my-plugin',\n    generateBundle(options, bundle) {\n      console.log('format', options.format);\n      Object.keys(bundle).forEach(fileName => {\n        console.log(fileName, bundle[fileName]);\n      });\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Rollup Windows ARM64 MSVC Package Name in Markdown\nDESCRIPTION: Defines the NPM package name for the Windows ARM64 MSVC binary version of Rollup. This reference is typically used in package.json files when specifying platform-specific dependencies.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/win32-arm64-msvc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@rollup/rollup-win32-arm64-msvc\n```\n\n----------------------------------------\n\nTITLE: Specifying Rollup ARM Linux MUSL EABIHF Package in Markdown\nDESCRIPTION: This code snippet defines the package name for the ARM v7 Linux MUSL EABIHF binary of Rollup using Markdown syntax. It specifies the exact architecture and libc combination for which this binary is compiled.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/linux-arm-musleabihf/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@rollup/rollup-linux-arm-musleabihf`\n```\n\n----------------------------------------\n\nTITLE: Referencing the Rollup Linux x64 GNU Package in Markdown\nDESCRIPTION: This code snippet shows the package name for the x86_64-unknown-linux-gnu binary of Rollup. It's referenced using markdown formatting with backticks to indicate a code or package name.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/linux-x64-gnu/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@rollup/rollup-linux-x64-gnu`\n```\n\n----------------------------------------\n\nTITLE: Basic ESM Import and Export Pattern\nDESCRIPTION: Shows the standard ES module import and export pattern, importing from a module and exporting a named variable.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/emits-files-from-various-hooks/_expected/system/custom/outro.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { name } from 'external';\n\nexport var name = 'foo';\n```\n\n----------------------------------------\n\nTITLE: Testing Unresolved Asset Handling in Rollup\nDESCRIPTION: File path indicator showing this is testing unresolved asset functionality in Rollup. This appears to be a test case identifier.\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/resolve-file-url/_expected/amd/assets/asset-unresolved-B7Qh6_pN.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAsset for: unresolved\n```\n\n----------------------------------------\n\nTITLE: Specifying Rollup Android ARM Package in Markdown\nDESCRIPTION: This code snippet defines the package name for the ARM-based Android binary of Rollup. It uses a code block to highlight the package name, which is specifically built for the armv7-linux-androideabi architecture.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/android-arm-eabi/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@rollup/rollup-android-arm-eabi`\n```\n\n----------------------------------------\n\nTITLE: Identifying the Rollup FreeBSD ARM64 Binary Package\nDESCRIPTION: A markdown heading and description specifying this is the aarch64-unknown-freebsd binary for Rollup. This indicates the package provides architecture-specific binary support for Rollup on FreeBSD ARM64 systems.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/freebsd-arm64/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@rollup/rollup-freebsd-arm64`\n\nThis is the **aarch64-unknown-freebsd** binary for `rollup`\n```\n\n----------------------------------------\n\nTITLE: Referencing Rollup Android ARM64 Package\nDESCRIPTION: Package name reference for the Android ARM64 build of Rollup, targeted for aarch64-linux-android platform.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/android-arm64/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@rollup/rollup-android-arm64\n```\n\n----------------------------------------\n\nTITLE: Specifying Rollup ARM Linux Binary Package Name in Markdown\nDESCRIPTION: Shows the npm package name for the ARM v7 unknown Linux GNUeabihf binary for Rollup. This package would be used in ARM-based Linux systems to provide native binary performance for the Rollup module bundler.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/linux-arm-gnueabihf/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@rollup/rollup-linux-arm-gnueabihf\n```\n\n----------------------------------------\n\nTITLE: Rollup Package Name Reference\nDESCRIPTION: Package name reference for the ARM64 GNU variant of Rollup bundler for Linux platforms\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/linux-arm64-gnu/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@rollup/rollup-linux-arm64-gnu\n```\n\n----------------------------------------\n\nTITLE: Rollup Package Name\nDESCRIPTION: NPM package name for the Rollup x64 Darwin binary distribution\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/darwin-x64/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@rollup/rollup-darwin-x64\n```\n\n----------------------------------------\n\nTITLE: Buffer Reference Variable\nDESCRIPTION: A text reference to a buffer variable or property named 'otherBuffer'\nSOURCE: https://github.com/rollup/rollup/blob/master/test/chunking-form/samples/emit-file/deduplicate-assets/_expected/amd/assets/otherBuffer-6HvweN2A.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\notherBuffer\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Package name specification using markdown inline code formatting for the RISC-V 64-bit GNU/Linux binary of Rollup.\nSOURCE: https://github.com/rollup/rollup/blob/master/npm/linux-riscv64-gnu/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@rollup/rollup-linux-riscv64-gnu`\n```"
  }
]