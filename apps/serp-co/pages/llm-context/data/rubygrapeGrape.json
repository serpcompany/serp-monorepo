[
  {
    "owner": "ruby-grape",
    "repo": "grape",
    "content": "TITLE: Creating a Basic Twitter API with Grape in Ruby\nDESCRIPTION: A complete example demonstrating how to create a Twitter-like API using Grape. This snippet shows implementation of common REST operations including retrieving timelines, getting status details, creating, updating, and deleting statuses with proper authentication.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Twitter\n  class API < Grape::API\n    version 'v1', using: :header, vendor: 'twitter'\n    format :json\n    prefix :api\n\n    helpers do\n      def current_user\n        @current_user ||= User.authorize!(env)\n      end\n\n      def authenticate!\n        error!('401 Unauthorized', 401) unless current_user\n      end\n    end\n\n    resource :statuses do\n      desc 'Return a public timeline.'\n      get :public_timeline do\n        Status.limit(20)\n      end\n\n      desc 'Return a personal timeline.'\n      get :home_timeline do\n        authenticate!\n        current_user.statuses.limit(20)\n      end\n\n      desc 'Return a status.'\n      params do\n        requires :id, type: Integer, desc: 'Status ID.'\n      end\n      route_param :id do\n        get do\n          Status.find(params[:id])\n        end\n      end\n\n      desc 'Create a status.'\n      params do\n        requires :status, type: String, desc: 'Your status.'\n      end\n      post do\n        authenticate!\n        Status.create!({\n          user: current_user,\n          text: params[:status]\n        })\n      end\n\n      desc 'Update a status.'\n      params do\n        requires :id, type: String, desc: 'Status ID.'\n        requires :status, type: String, desc: 'Your status.'\n      end\n      put ':id' do\n        authenticate!\n        current_user.statuses.find(params[:id]).update({\n          user: current_user,\n          text: params[:status]\n        })\n      end\n\n      desc 'Delete a status.'\n      params do\n        requires :id, type: String, desc: 'Status ID.'\n      end\n      delete ':id' do\n        authenticate!\n        current_user.statuses.find(params[:id]).destroy\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Parameters in Grape API (Ruby)\nDESCRIPTION: Shows how to define reusable parameters using helpers in Grape API. It includes examples of both inline and shared helper definitions for parameters.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  helpers do\n    params :pagination do\n      optional :page, type: Integer\n      optional :per_page, type: Integer\n    end\n  end\n\n  desc 'Get collection'\n  params do\n    use :pagination # aliases: includes, use_scope\n  end\n  get do\n    Collection.page(params[:page]).per(params[:per_page])\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodule SharedParams\n  extend Grape::API::Helpers\n\n  params :period do\n    optional :start_date\n    optional :end_date\n  end\n\n  params :pagination do\n    optional :page, type: Integer\n    optional :per_page, type: Integer\n  end\nend\n\nclass API < Grape::API\n  helpers SharedParams\n\n  desc 'Get collection.'\n  params do\n    use :period, :pagination\n  end\n\n  get do\n    Collection\n      .from(params[:start_date])\n      .to(params[:end_date])\n      .page(params[:page])\n      .per(params[:per_page])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Parameter Validation and Coercion in Grape (Ruby)\nDESCRIPTION: Demonstrates various parameter validation and coercion techniques in Grape, including type checking, regex validation, and default values.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :id, type: Integer\n  optional :text, type: String, regexp: /\\A[a-z]+\\z/\n  group :media, type: Hash do\n    requires :url\n  end\n  optional :audio, type: Hash do\n    requires :format, type: Symbol, values: [:mp3, :wav, :aac, :ogg], default: :mp3\n  end\n  mutually_exclusive :media, :audio\nend\nput ':id' do\n  # params[:id] is an Integer\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Grape (Ruby)\nDESCRIPTION: Illustrates various ways to define routes in Grape APIs, including using the 'route' method, HTTP verb shorthands, and route parameters.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nroute :get, 'status' do\nend\n\n# is the same as\n\nget 'status' do\nend\n\n# is the same as\n\nget :status do\nend\n\n# is NOT the same as\n\nget ':status' do # this makes params[:status] available\nend\n\n# This will make both params[:status_id] and params[:id] available\n\nget 'statuses/:status_id/reviews/:id' do\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nroute_param :id, type: Integer do\n  get 'status' do\n  end\nend\n\n# is the same as\n\nnamespace ':id' do\n  params do\n    requires :id, type: Integer\n  end\n\n  get 'status' do\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nget ':id', requirements: { id: /[0-9]*/ } do\n  Status.find(params[:id])\nend\n\nnamespace :outer, requirements: { id: /[0-9]*/ } do\n  get :id do\n  end\n\n  get ':id/edit' do\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Parameters with 'given'\nDESCRIPTION: Demonstrates how to create parameter dependencies where some parameters are only required when another parameter is present. Uses the 'given' method to express these relationships.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :shelf_id, type: Integer\n  given :shelf_id do\n    requires :bin_id, type: Integer\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specific Exception Handling\nDESCRIPTION: Shows how to rescue specific exception types in Grape API.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_86\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  rescue_from ArgumentError, UserDefinedError\nend\n```\n\n----------------------------------------\n\nTITLE: Organizing Parameters with Nested 'with' Blocks\nDESCRIPTION: Shows how to use nested 'with' blocks to organize parameter settings into layers. Each layer can build upon or modify the settings from the layer above, allowing for both consistency and customization.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  with(documentation: { in: 'body' }) do  # Applies documentation to all nested parameters\n    with(type: String, regexp: /\\w+/) do  # Applies type and validation to names\n      requires :first_name, desc: 'First name'\n      requires :last_name, desc: 'Last name'\n    end\n    optional :age, type: Integer, desc: 'Age', documentation: { x: { nullable: true } }  # Specific settings for 'age'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Exception Handling in Grape API\nDESCRIPTION: Demonstrates how to rescue all StandardError exceptions in a Grape API class.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_83\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  rescue_from :all\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Nested Parameters in Grape API\nDESCRIPTION: Shows how to declare and access nested parameters in a Grape API endpoint. This example declares a user hash with nested first_name and last_name parameters.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nformat :json\n\nparams do\n  optional :user, type: Hash do\n    optional :first_name, type: String\n    optional :last_name, type: String\n  end\nend\n\npost 'users/signup' do\n  { 'declared_params' => declared(params) }\nend\n```\n\n----------------------------------------\n\nTITLE: Working with JSON Parameters in Grape\nDESCRIPTION: Shows how to handle JSON-formatted string parameters using the JSON type. Supports both single objects and arrays with nested validation rules applied to all contained objects.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :json, type: JSON do\n    requires :int, type: Integer, values: [1, 2, 3]\n  end\nend\nget '/' do\n  params[:json].inspect\nend\n\nclient.get('/', json: '{\"int\":1}') # => \"{:int=>1}\"\nclient.get('/', json: '[{\"int\":\"1\"}]') # => \"[{:int=>1}]\"\n\nclient.get('/', json: '{\"int\":4}') # => HTTP 400\nclient.get('/', json: '[{\"int\":4}]') # => HTTP 400\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Errors in Grape API (Ruby)\nDESCRIPTION: Shows how to implement a catch-all route to handle 404 errors for an entire Grape API. This should be defined at the very end of the API.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\nroute :any, '*path' do\n  error! # or something else\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Multipart File Parameters in Grape\nDESCRIPTION: Demonstrates how to declare and process file upload parameters in Grape using the File type. Provides access to file metadata including filename, MIME type, and the temporary file object.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :avatar, type: File\nend\npost '/' do\n  params[:avatar][:filename] # => 'avatar.png'\n  params[:avatar][:type] # => 'image/png'\n  params[:avatar][:tempfile] # => #<File>\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Nested Parameters with Arrays and Hashes\nDESCRIPTION: Shows how to define and validate nested parameters using blocks with 'requires' and 'optional'. Supports both array and hash structures for organizing complex parameter hierarchies.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :preferences, type: Array do\n    requires :key\n    requires :value\n  end\n\n  requires :name, type: Hash do\n    requires :first_name\n    requires :last_name\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: API Version Management\nDESCRIPTION: Demonstrates managing multiple API versions with inheritance\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'v1'\nrequire 'v2'\nrequire 'v3'\nclass App < Grape::API\n  mount V3\n  mount V2\n  mount V1\nend\n```\n\n----------------------------------------\n\nTITLE: Raw Data Handling in Grape API\nDESCRIPTION: Examples of sending raw binary data, plain text, and handling empty responses in Grape API endpoints\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_109\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  get '/file' do\n    content_type 'application/octet-stream'\n    File.binread 'file.bin'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Namespace Validation in Grape\nDESCRIPTION: Demonstrates how parameter validations can be applied to all methods within a namespace, including nested namespaces.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace :statuses do\n  params do\n    requires :user_id, type: Integer, desc: 'A user ID.'\n  end\n  namespace ':user_id' do\n    desc \"Retrieve a user's status.\"\n    params do\n      requires :status_id, type: Integer, desc: 'A status ID.'\n    end\n    get ':status_id' do\n      User.find(params[:user_id]).statuses.find(params[:status_id])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error Handling in Grape\nDESCRIPTION: Shows how to rescue validation errors and format them as JSON for API responses, providing structured error messages for clients.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nformat :json\nsubject.rescue_from Grape::Exceptions::ValidationErrors do |e|\n  error! e, 400\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nformat :json\nsubject.rescue_from Grape::Exceptions::ValidationErrors do |e|\n  error!({ messages: e.full_messages }, 400)\nend\n```\n\n----------------------------------------\n\nTITLE: Raising Exceptions in Grape API (Ruby)\nDESCRIPTION: Shows how to raise exceptions and abort API method execution using the 'error!' method in Grape API. It includes examples of different error formats and setting custom headers.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\nerror! 'Access Denied', 401\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror! :not_found, 404\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror!({ error: 'unexpected error', detail: 'missing widget' }, 500)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror!('Something went wrong', 500, 'X-Error-Detail' => 'Invalid token.')\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodule API\n  class Error < Grape::Entity\n    expose :code\n    expose :message\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndesc 'My Route' do\n failure [[408, 'Unauthorized', API::Error]]\nend\nerror!({ message: 'Unauthorized' }, 408)\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndesc 'My Route' do\n failure [[408, 'Unauthorized']]\nend\nerror!({ message: 'Unauthorized', with: API::Error }, 408)\n```\n\n----------------------------------------\n\nTITLE: Testing Grape API with RSpec in Rails\nDESCRIPTION: This snippet demonstrates how to use RSpec to test a Grape API in a Rails application. It includes sample tests for GET requests and shows how to configure RSpec for API testing.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_120\n\nLANGUAGE: ruby\nCODE:\n```\ndescribe Twitter::API do\n  context 'GET /api/statuses/public_timeline' do\n    it 'returns an empty array of statuses' do\n      get '/api/statuses/public_timeline'\n      expect(response.status).to eq(200)\n      expect(JSON.parse(response.body)).to eq []\n    end\n  end\n  context 'GET /api/statuses/:id' do\n    it 'returns a status by id' do\n      status = Status.create!\n      get \"/api/statuses/#{status.id}\"\n      expect(response.body).to eq status.to_json\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.configure do |config|\n  config.include RSpec::Rails::RequestExampleGroup, type: :request, file_path: /spec\\/api/\nend\n```\n\n----------------------------------------\n\nTITLE: Using Custom Logic with 'given' for Conditional Parameters\nDESCRIPTION: Shows how to use a Proc with the 'given' method to implement custom conditional logic for parameter requirements. The example requires 'description' only when 'category' equals 'foo'.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :category\n  given category: ->(val) { val == 'foo' } do\n    requires :description\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: File Streaming with Sendfile in Grape (Ruby)\nDESCRIPTION: Shows how to use the sendfile helper in Grape 1.4.0+ to deliver files via the web server's Sendfile support with Rack::Sendfile middleware.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  get '/' do\n    sendfile '/path/to/file'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Grape API\nDESCRIPTION: Demonstrates accessing request parameters through the params hash object, which includes GET, POST, and PUT parameters as well as named route parameters.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nget :public_timeline do\n  Status.order(params[:sort_by])\nend\n```\n\n----------------------------------------\n\nTITLE: Using Declared Parameters in Grape API\nDESCRIPTION: Demonstrates the declared helper which returns only parameters that have been declared in the params block. This filters out undeclared parameters and includes optional parameters with default values.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nformat :json\n\npost 'users/signup' do\n  { 'declared_params' => declared(params) }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter-based Versioning in Grape API\nDESCRIPTION: Configures API versioning to use a request parameter. Clients must pass the desired version as a query parameter (default 'apiver') to access specific API versions.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nversion 'v1', using: :param\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Methods in Grape API (Ruby)\nDESCRIPTION: Demonstrates how to define helper methods using the 'helpers' macro in Grape API. It shows both block-style and module-based helper definitions.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\nmodule StatusHelpers\n  def user_info(user)\n    \"#{user} has statused #{user.statuses} status(s)\"\n  end\nend\n\nmodule HttpCodesHelpers\n  def unauthorized\n    401\n  end\nend\n\nclass API < Grape::API\n  # define helpers with a block\n  helpers do\n    def current_user\n      User.find(params[:user_id])\n    end\n  end\n\n  # or mix in an array of modules\n  helpers StatusHelpers, HttpCodesHelpers\n\n  before do\n    error!('Access Denied', unauthorized) unless current_user\n  end\n\n  get 'info' do\n    # helpers available in your endpoint and filters\n    user_info(current_user)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Combined Exception Handling Strategy\nDESCRIPTION: Demonstrates combining specific and general exception handling approaches.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_87\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  rescue_from Grape::Exceptions::ValidationErrors do |e|\n    error!(e, 400)\n  end\n\n  rescue_from :all\nend\n```\n\n----------------------------------------\n\nTITLE: Handling JSON POST Requests in Grape API\nDESCRIPTION: Shows how to access parameters from a JSON POST request body. Grape automatically parses the JSON and makes values available through the params hash.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\npost '/statuses' do\n  Status.create!(text: params[:text])\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Accept-Version Header Versioning in Grape API\nDESCRIPTION: Configures API versioning to use the Accept-Version HTTP header. Clients must pass the desired version in this header to access specific API versions.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nversion 'v1', using: :accept_version_header\n```\n\n----------------------------------------\n\nTITLE: Using the 'allow_blank' Validator in Grape\nDESCRIPTION: Shows how to use the 'allow_blank' validator to ensure parameters contain non-empty values. Can be combined with both 'requires' and 'optional' to control whether empty values are accepted.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :username, allow_blank: false\n  optional :first_name, allow_blank: false\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Type and Coercion in Grape (Ruby)\nDESCRIPTION: Shows how to define and use custom types and coercion methods in Grape parameter handling, including class-level parse methods and coerce_with option.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nclass Color\n  attr_reader :value\n  def initialize(color)\n    @value = color\n  end\n\n  def self.parse(value)\n    return new(value) if %w[blue red green].include?(value)\n\n    Grape::Types::InvalidValue.new('Unsupported color')\n  end\nend\n\nparams do\n  requires :color, type: Color, default: Color.new('blue')\n  requires :more_colors, type: Array[Color] # Collections work\n  optional :unique_colors, type: Set[Color] # Duplicates discarded\nend\n\nget '/stuff' do\n  # params[:color] is already a Color.\n  params[:color].value\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Request-aware Custom Validator in Grape\nDESCRIPTION: Demonstrates creating a custom validator that uses request information to validate parameters, such as validating admin-only fields based on access tokens.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nclass Admin < Grape::Validations::Validators::Base\n  def validate(request)\n    # return if the param we are checking was not in request\n    # @attrs is a list containing the attribute we are currently validating\n    # in our sample case this method once will get called with\n    # @attrs being [:admin_field] and once with @attrs being [:admin_false_field]\n    return unless request.params.key?(@attrs.first)\n    # check if admin flag is set to true\n    return unless @option\n    # check if user is admin or not\n    # as an example get a token from request and check if it's admin or not\n    raise Grape::Exceptions::Validation.new params: @attrs, message: 'Can not set admin-only field.' unless request.headers['X-Access-Token'] == 'admin'\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :admin_field, type: String, admin: true\n  optional :non_admin_field, type: String\n  optional :admin_false_field, type: String, admin: false\nend\n```\n\n----------------------------------------\n\nTITLE: Using Array[JSON] Type for JSON Arrays in Grape\nDESCRIPTION: Demonstrates using the Array[JSON] type to explicitly mark a parameter as an array of JSON objects. Single objects are automatically wrapped in an array for consistent processing.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :json, type: Array[JSON] do\n    requires :int, type: Integer\n  end\nend\nget '/' do\n  params[:json].each { |obj| ... } # always works\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Rack Mounting\nDESCRIPTION: Demonstrates mounting a Grape API in a Rack application\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrun Twitter::API\n```\n\n----------------------------------------\n\nTITLE: Handling Binary File Uploads with Custom Format in Grape\nDESCRIPTION: API endpoint for file uploads that overrides the format determination process using api_format to return binary data with the correct MIME type and attachment disposition header.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_95\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  post 'attachment' do\n    filename = params[:file][:filename]\n    content_type MIME::Types.type_for(filename)[0].to_s\n    api_format :binary # there's no formatter for :binary, data will be returned \"as is\"\n    header 'Content-Disposition', \"attachment; filename*=UTF-8''#{CGI.escape(filename)}\"\n    params[:file][:tempfile].read\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Implementation\nDESCRIPTION: Shows how to implement basic authentication in Grape API with custom middleware support\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_110\n\nLANGUAGE: ruby\nCODE:\n```\nGrape::Middleware::Auth::Strategies.add(:my_auth, AuthMiddleware, ->(options) { [options[:realm]] } )\n\nauth :my_auth, { realm: 'Test Api'} do |credentials|\n  # lookup the user's password here\n  { 'user1' => 'password1' }[username]\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Parser for Content Types in Grape\nDESCRIPTION: Implementation of a custom parser module for handling a specialized text/custom content type. This allows Grape to parse incoming data with the custom format and make it available via params.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_105\n\nLANGUAGE: ruby\nCODE:\n```\nmodule CustomParser\n  def self.call(object, env)\n    { value: object.to_s }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Settings in Grape API\nDESCRIPTION: Sets up global configuration for Grape at load time. This example configures the parameter builder to use a specific type for request parameters.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nGrape.configure do |config|\n  config.setting = value\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Grape Entities and Status API\nDESCRIPTION: Demonstrates how to create Grape entities for status objects with custom exposures and API endpoints for retrieving statuses\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_107\n\nLANGUAGE: ruby\nCODE:\n```\nmodule API\n  module Entities\n    class Status < Grape::Entity\n      expose :user_name\n      expose :text, documentation: { type: 'string', desc: 'Status update text.' }\n      expose :ip, if: { type: :full }\n      expose :user_type, :user_id, if: ->(status, options) { status.user.public? }\n      expose :digest do |status, options|\n        Digest::MD5.hexdigest(status.txt)\n      end\n      expose :replies, using: API::Status, as: :replies\n    end\n  end\n\n  class Statuses < Grape::API\n    version 'v1'\n\n    desc 'Statuses index' do\n      params: API::Entities::Status.documentation\n    end\n    get '/statuses' do\n      statuses = Status.all\n      type = current_user.admin? ? :full : :default\n      present statuses, with: API::Entities::Status, type: type\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Request Headers in Grape (Ruby)\nDESCRIPTION: Demonstrates how to access and use request headers in Grape APIs. Headers can be accessed through the 'headers' helper or directly from the 'env' hash.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\nget do\n  error!('Unauthorized', 401) unless headers['Secret-Password'] == 'swordfish'\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nget do\n  error!('Unauthorized', 401) unless env['HTTP_SECRET_PASSWORD'] == 'swordfish'\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Messages in Grape (Ruby)\nDESCRIPTION: Demonstrates how to set custom validation messages for various parameter validations including presence, allow_blank, values, regexp, same_as, length, all_or_none_of, mutually_exclusive, exactly_one_of, at_least_one_of, and coerce.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :name, values: { value: 1..10, message: 'not in range from 1 to 10' }, allow_blank: { value: false, message: 'cannot be blank' }, regexp: { value: /^[a-z]+$/, message: 'format is invalid' }, message: 'is required'\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :password\n  requires :password_confirmation, same_as: { value: :password, message: 'not match' }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :code, type: String, length: { is: 2, message: 'code is expected to be exactly 2 characters long' }\n  requires :str, type: String, length: { min: 5, message: 'str is expected to be at least 5 characters long' }\n  requires :list, type: [Integer], length: { min: 2, max: 3, message: 'list is expected to have between 2 and 3 elements' }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :beer\n  optional :wine\n  optional :juice\n  all_or_none_of :beer, :wine, :juice, message: \"all params are required or none is required\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :beer\n  optional :wine\n  optional :juice\n  mutually_exclusive :beer, :wine, :juice, message: \"are mutually exclusive cannot pass both params\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :beer\n  optional :wine\n  optional :juice\n  exactly_one_of :beer, :wine, :juice, message: { exactly_one: \"are missing, exactly one parameter is required\", mutual_exclusion: \"are mutually exclusive, exactly one parameter is required\" }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :beer\n  optional :wine\n  optional :juice\n  at_least_one_of :beer, :wine, :juice, message: \"are missing, please specify at least one param\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :int, type: { value: Integer, message: \"type cast is invalid\" }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :name, values: { value: -> { (1..10).to_a }, message: 'not in range from 1 to 10' }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :name, message: :name_required\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :name, values: { value: -> { (1..10).to_a }, message: 'not in range from 1 to 10' }, default: 5\nend\n```\n\n----------------------------------------\n\nTITLE: Restricting Parameter Values with the 'values' Option\nDESCRIPTION: Demonstrates how to restrict parameters to a specific set of allowed values using the 'values' option. Works with both single values and arrays of values against a predefined set or enum.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :status, type: Symbol, values: [:not_started, :processing, :done]\n  optional :numbers, type: Array[Integer], default: 1, values: [1, 2, 3, 5, 8]\nend\n```\n\n----------------------------------------\n\nTITLE: RSpec Testing Examples for Grape API\nDESCRIPTION: Shows how to write RSpec tests for Grape API endpoints using rack-test.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_117\n\nLANGUAGE: ruby\nCODE:\n```\ndescribe Twitter::API do\n  include Rack::Test::Methods\n\n  def app\n    Twitter::API\n  end\n\n  context 'GET /api/statuses/public_timeline' do\n    it 'returns an empty array of statuses' do\n      get '/api/statuses/public_timeline'\n      expect(last_response.status).to eq(200)\n      expect(JSON.parse(last_response.body)).to eq []\n    end\n  end\n  context 'GET /api/statuses/:id' do\n    it 'returns a status by id' do\n      status = Status.create!\n      get \"/api/statuses/#{status.id}\"\n      expect(last_response.body).to eq status.to_json\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Grape API with Rack Middleware\nDESCRIPTION: Configuration example showing how to implement Cross-Origin Resource Sharing (CORS) in a Grape API using the rack-cors gem. This is set up in the config.ru file rather than in the API class.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_103\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rack/cors'\n\nuse Rack::Cors do\n  allow do\n    origins '*'\n    resource '*', headers: :any, methods: :get\n  end\nend\n\nrun Twitter::API\n```\n\n----------------------------------------\n\nTITLE: Modern Dry-Types Parser in Ruby Grape\nDESCRIPTION: Demonstrates the new way of implementing custom type parsing using dry-types in Grape 1.3.0 and later.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n# New dry-types parser\nclass SecureUri\n  def self.parse(value)\n    URI.parse value\n  end\n\n  def self.parsed?(value)\n    value.is_a? URI::HTTPS\n  end\nend\n\nparams do\n  requires :secure_uri, type: SecureUri\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Grape (Ruby)\nDESCRIPTION: Shows how to set response headers in Grape APIs. Headers can be set using the 'header' method or when raising errors with 'error!'.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\nheader 'X-Robots-Tag', 'noindex'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror! 'Unauthorized', 401, 'X-Error-Detail' => 'Invalid token.'\n```\n\n----------------------------------------\n\nTITLE: Handling Multipart File Uploads in Grape API\nDESCRIPTION: Demonstrates handling multipart file uploads in a Grape endpoint. The uploaded file is accessible through the params hash with the field name as the key.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\npost 'upload' do\n  # file in params[:image_file]\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing JSONP Support in Grape API\nDESCRIPTION: Example of adding JSONP support to a Grape API using Rack::JSONP middleware from the rack-contrib gem. This allows API responses to be wrapped in a callback function for cross-domain requests.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_102\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rack/contrib'\n\nclass API < Grape::API\n  use Rack::JSONP\n  format :json\n  get '/' do\n    'Hello World'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Content-Type at Runtime in Grape\nDESCRIPTION: Example showing how to override the default content-type at runtime by setting the Content-Type header directly in an endpoint, allowing for specialized content delivery.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_104\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  get '/home_timeline_js' do\n    content_type 'application/javascript'\n    \"var statuses = ...;\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Redirecting in Grape API (Ruby)\nDESCRIPTION: Demonstrates how to perform redirects in Grape API, including temporary (302) and permanent (301) redirects.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\nredirect '/statuses'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nredirect '/statuses', permanent: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Format Support in Grape API\nDESCRIPTION: Example API supporting both XML and JSON formats with JSON as the default. This demonstrates how format negotiation works when handling different content types.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_94\n\nLANGUAGE: ruby\nCODE:\n```\nclass MultipleFormatAPI < Grape::API\n  content_type :xml, 'application/xml'\n  content_type :json, 'application/json'\n\n  default_format :json\n\n  get :hello do\n    { hello: 'world' }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Cookies in Grape API (Ruby)\nDESCRIPTION: Demonstrates how to set, get, and delete cookies in Grape API using the 'cookies' method. It includes examples of simple and hash-based cookie operations.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  get 'status_count' do\n    cookies[:status_count] ||= 0\n    cookies[:status_count] += 1\n    { status_count: cookies[:status_count] }\n  end\n\n  delete 'status_count' do\n    { status_count: cookies.delete(:status_count) }\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ncookies[:status_count] = {\n  value: 0,\n  expires: Time.tomorrow,\n  domain: '.twitter.com',\n  path: '/'\n}\n\ncookies[:status_count][:value] +=1\n```\n\nLANGUAGE: ruby\nCODE:\n```\ncookies.delete :status_count\n```\n\nLANGUAGE: ruby\nCODE:\n```\ncookies.delete :status_count, path: '/'\n```\n\n----------------------------------------\n\nTITLE: Adding Detailed Documentation to Grape API Methods\nDESCRIPTION: Documents an API endpoint with comprehensive metadata for auto-generation of Swagger documentation. Includes details about parameters, responses, headers, and other documentation-specific information.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndesc 'Returns your public timeline.' do\n  summary 'summary'\n  detail 'more details'\n  params  API::Entities::Status.documentation\n  success API::Entities::Entity\n  failure [[401, 'Unauthorized', 'Entities::Error']]\n  default { code: 500, message: 'InvalidRequest', model: Entities::Error }\n  named 'My named route'\n  headers XAuthToken: {\n            description: 'Validates your identity',\n            required: true\n          },\n          XOptionalHeader: {\n            description: 'Not really needed',\n            required: false\n          }\n  hidden false\n  deprecated false\n  is_array true\n  nickname 'nickname'\n  produces ['application/json']\n  consumes ['application/json']\n  tags ['tag1', 'tag2']\nend\nget :public_timeline do\n  Status.limit(20)\nend\n```\n\n----------------------------------------\n\nTITLE: Recognizing Paths in Grape API (Ruby)\nDESCRIPTION: Shows how to use the 'recognize_path' method to match endpoints with given paths in Grape API. It includes examples of basic path recognition and parameter type-aware recognition.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  get '/statuses' do\n  end\nend\n\nAPI.recognize_path '/statuses'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Books < Grape::API\n  resource :books do\n    route_param :id, type: Integer do\n      # GET /books/:id\n      get do\n        #...\n      end\n    end\n\n    resource :share do\n      # POST /books/share\n      post do\n      # ....\n      end\n    end\n  end\nend\n\nAPI.recognize_path '/books/1' # => /books/:id\nAPI.recognize_path '/books/share' # => /books/share\nAPI.recognize_path '/books/other' # => nil\n```\n\n----------------------------------------\n\nTITLE: Stubbing Helpers in Grape API Tests with RSpec\nDESCRIPTION: This snippet demonstrates how to stub helper methods in Grape API tests using RSpec. It uses the Grape::Endpoint.before_each method to define behavior that runs before every request.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_122\n\nLANGUAGE: ruby\nCODE:\n```\ndescribe 'an endpoint that needs helpers stubbed' do\n  before do\n    Grape::Endpoint.before_each do |endpoint|\n      allow(endpoint).to receive(:helper_name).and_return('desired_value')\n    end\n  end\n\n  after do\n    Grape::Endpoint.before_each nil\n  end\n\n  it 'stubs the helper' do\n\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Managing HTTP Status Codes in Grape API (Ruby)\nDESCRIPTION: Shows how to set and query HTTP status codes in Grape API using the 'status' method. It includes examples of using numeric codes and symbolic status codes.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\npost do\n  status 202\n\n  if status == 200\n     # do some thing\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\npost do\n  status :no_content\nend\n```\n\n----------------------------------------\n\nTITLE: Renaming Parameters with 'as' in Grape\nDESCRIPTION: Demonstrates how to rename parameters during API validation using the 'as' option. Useful when refactoring existing APIs or when the internal parameter names differ from the external API contract.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nresource :users do\n  params do\n    requires :email_address, as: :email\n    requires :password\n  end\n  post do\n    User.create!(declared(params)) # User takes email and password\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Error HTTP Status Code in Grape API (Ruby)\nDESCRIPTION: Demonstrates how to change the default error HTTP status code in Grape API using the 'default_error_status' method.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  default_error_status 400\n  get '/example' do\n    error! 'This should have http status code 400'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Transitioning from error_response to error! in Grape\nDESCRIPTION: Examples showing how to replace the deprecated error_response method with the preferred error! method for more consistent error handling in Grape applications.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\ndef error!(message, status = options[:default_status], headers = {}, backtrace = [])\n  headers = { 'Content-Type' => content_type }.merge(headers)\n  rack_response(format_message(message, backtrace), status, headers)\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror_response({ message: { message: 'No such page.', id: 'missing_page' }, status: 404, headers: { 'Content-Type' => 'api/error' }})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror!({ message: 'No such page.', id: 'missing_page' }, 404, { 'Content-Type' => 'api/error' })\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRack::Response.new([ e.message ], 500, { \"Content-type\" => \"text/error\" }).finish\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror!(e)\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Block Handler\nDESCRIPTION: Example of customizing grape exception handling with a block.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_85\n\nLANGUAGE: ruby\nCODE:\n```\nrescue_from :grape_exceptions do |e|\n  error!(e, e.status)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Validator in Grape\nDESCRIPTION: Demonstrates how to create a custom validator class that validates if a parameter contains only alphanumeric characters.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nclass AlphaNumeric < Grape::Validations::Validators::Base\n  def validate_param!(attr_name, params)\n    unless params[attr_name] =~ /\\A[[:alnum:]]+\\z/\n      raise Grape::Exceptions::Validation.new params: [@scope.full_name(attr_name)], message: 'must consist of alpha-numeric characters'\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :text, alpha_numeric: true\nend\n```\n\n----------------------------------------\n\nTITLE: Using regexp Validator in Grape\nDESCRIPTION: Restricts parameters to match a specific regular expression pattern. Can be combined with allow_blank: false to ensure the parameter contains a value.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :email, regexp: /.+@.+/\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :email, allow_blank: false, regexp: /.+@.+/\nend\n```\n\n----------------------------------------\n\nTITLE: Using dry-validation or dry-schema in Grape (Ruby)\nDESCRIPTION: Shows how to use dry-validation or dry-schema to define parameter schemas in Grape APIs. This can be an alternative to the params DSL for describing endpoint parameters.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\nCreateOrdersSchema = Dry::Schema.Params do\n  required(:orders).array(:hash) do\n    required(:name).filled(:string)\n    optional(:volume).maybe(:integer, lt?: 9)\n  end\nend\n\n# ...\n\ncontract CreateOrdersSchema\n```\n\nLANGUAGE: ruby\nCODE:\n```\ncontract do\n  required(:orders).array(:hash) do\n    required(:name).filled(:string)\n    optional(:volume).maybe(:integer, lt?: 9)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Grape-Specific Exception Handling\nDESCRIPTION: Shows how to handle Grape-specific exceptions while maintaining built-in exception handling.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_84\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  rescue_from :grape_exceptions\nend\n```\n\n----------------------------------------\n\nTITLE: Using Evaluate Given in Grape Parameters (Ruby)\nDESCRIPTION: Shows how to use the evaluate_given option to conditionally include parameters based on the presence of other parameters in a Grape API.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nformat :json\n\nparams do\n  optional :child_id, type: Integer\n  given :child_id do\n    requires :father_id, type: Integer\n  end\nend\n\npost 'child' do\n  { 'declared_params' => declared(params, evaluate_given: true) }\nend\n```\n\n----------------------------------------\n\nTITLE: Using all_or_none_of Validator in Grape\nDESCRIPTION: Ensures that either all parameters in a set are selected or none of them are selected.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :beer\n  optional :wine\n  optional :juice\n  all_or_none_of :beer, :wine, :juice\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Error Formatter Module\nDESCRIPTION: Shows how to implement a custom error formatter using a module.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_89\n\nLANGUAGE: ruby\nCODE:\n```\nmodule CustomFormatter\n  def self.call(message, backtrace, options, env, original_exception)\n    { message: message, backtrace: backtrace }\n  end\nend\n\nclass Twitter::API < Grape::API\n  error_formatter :custom, CustomFormatter\nend\n```\n\n----------------------------------------\n\nTITLE: Finally Block Implementation\nDESCRIPTION: Example of using finally block that executes after every request regardless of success or failure.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_113\n\nLANGUAGE: ruby\nCODE:\n```\nfinally do\n  # this code will run after every request (successful or failed)\nend\n```\n\n----------------------------------------\n\nTITLE: Simplifying Parameter Definitions with 'with' Method\nDESCRIPTION: Demonstrates a more concise way to define parameters with shared options using the 'with' method. This reduces duplication while maintaining the ability to override specific options per parameter.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  with(type: String, regexp: /w+/, documentation: { in: 'body' }) do\n    requires :first_name, desc: 'First name'\n    optional :middle_name, desc: 'Middle name', documentation: { x: { nullable: true } }\n    requires :last_name, desc: 'Last name'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Nested Group Validators in Grape\nDESCRIPTION: Demonstrates how mutually_exclusive, exactly_one_of, at_least_one_of, and all_or_none_of validators can be used at any nested level within parameter groups.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :food, type: Hash do\n    optional :meat\n    optional :fish\n    optional :rice\n    at_least_one_of :meat, :fish, :rice\n  end\n  group :drink, type: Hash do\n    optional :beer\n    optional :wine\n    optional :juice\n    exactly_one_of :beer, :wine, :juice\n  end\n  optional :dessert, type: Hash do\n    optional :cake\n    optional :icecream\n    mutually_exclusive :cake, :icecream\n  end\n  optional :recipe, type: Hash do\n    optional :oil\n    optional :meat\n    all_or_none_of :oil, :meat\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Middleware Implementation\nDESCRIPTION: Example of creating custom middleware for logging errors in Grape API.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_116\n\nLANGUAGE: ruby\nCODE:\n```\nclass LoggingError < Grape::Middleware::Base\n  def after\n    return unless @app_response && @app_response[0] == 500\n    env['rack.logger'].error(\"Raised error on #{env['PATH_INFO']}\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Typed route_param in Grape\nDESCRIPTION: Shows how to define a route parameter with a specific type using route_param's options, enabling automatic type conversion.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace :arithmetic do\n  route_param :n, type: Integer do\n    desc 'Returns in power'\n    get 'power' do\n      params[:n] ** params[:n]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Values with Procs in Grape Validation\nDESCRIPTION: Shows how to use Procs with the 'values' option to dynamically generate the list of valid values at runtime. Useful when valid values come from a database or other external source.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :hashtag, type: String, values: -> { Hashtag.all.map(&:tag) }\nend\n```\n\n----------------------------------------\n\nTITLE: Using Helper Blocks for Default Values in Grape API (Ruby)\nDESCRIPTION: Demonstrates how to use helper blocks to set default values for parameters in Grape API. This example shows a collection that can be sorted by different fields.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\nmodule SharedParams\n  extend Grape::API::Helpers\n\n  params :order do |options|\n    optional :order_by, type: Symbol, values: options[:order_by], default: options[:default_order_by]\n    optional :order, type: Symbol, values: %i(asc desc), default: options[:default_order]\n  end\nend\n\nclass API < Grape::API\n  helpers SharedParams\n\n  desc 'Get a sorted collection.'\n  params do\n    use :order, order_by: %i(id created_at), default_order_by: :created_at, default_order: :asc\n  end\n\n  get do\n    Collection.send(params[:order], params[:order_by])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Grouping Parameter Options with 'with'\nDESCRIPTION: Shows how to use the 'with' method to group common parameter options for multiple parameters. This helps reduce repetition when several parameters share similar validation rules.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :first_name, type: String, regexp: /w+/, desc: 'First name', documentation: { in: 'body' }\n  optional :middle_name, type: String, regexp: /w+/, desc: 'Middle name', documentation: { in: 'body', x: { nullable: true } }\n  requires :last_name, type: String, regexp: /w+/, desc: 'Last name', documentation: { in: 'body' }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Parameterized Custom Validator in Grape\nDESCRIPTION: Shows how to create a custom validator class that accepts parameters, in this case validating the maximum length of a field.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nclass Length < Grape::Validations::Validators::Base\n  def validate_param!(attr_name, params)\n    unless params[attr_name].length <= @option\n      raise Grape::Exceptions::Validation.new params: [@scope.full_name(attr_name)], message: \"must be at the most #{@option} characters long\"\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :text, length: 140\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Module-Based Custom Formatter in Grape\nDESCRIPTION: Implementation of a custom formatter using a module instead of a lambda function, providing better organization for more complex formatting logic.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_101\n\nLANGUAGE: ruby\nCODE:\n```\nmodule XlsFormatter\n  def self.call(object, env)\n    object.to_xls\n  end\nend\n\nclass Twitter::API < Grape::API\n  content_type :xls, 'application/vnd.ms-excel'\n  formatter :xls, XlsFormatter\nend\n```\n\n----------------------------------------\n\nTITLE: Parameter Documentation in Grape API (Ruby)\nDESCRIPTION: Shows how to attach additional documentation to parameters using a 'documentation' hash in Grape API. It also demonstrates how to disable documentation for internal APIs.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :first_name, type: String, documentation: { example: 'Jim' }\n  requires :last_name, type: String, documentation: { example: 'Smith' }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  do_not_document!\n\n  # endpoints...\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Documentation Attributes with Deep Merge in Grape 2.1.0+\nDESCRIPTION: Example showing how parameter attributes are now deep merged within the `with` method in Grape 2.1.0+. This allows combining documentation attributes from both group and parameter levels rather than overriding them.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nwith(documentation: { in: 'body' }) do\n  optional :vault, documentation: { default: 33 }\nend\n```\n\n----------------------------------------\n\nTITLE: Using at_least_one_of Validator in Grape\nDESCRIPTION: Ensures that at least one parameter from a set is selected, allowing multiple selections.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :beer\n  optional :wine\n  optional :juice\n  at_least_one_of :beer, :wine, :juice\nend\n```\n\n----------------------------------------\n\nTITLE: Using route_param in Grape for Route-based Parameters\nDESCRIPTION: Demonstrates how to define a route parameter as a namespace using route_param, making endpoints more readable and structured.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace :statuses do\n  route_param :id do\n    desc 'Returns all replies for a status.'\n    get 'replies' do\n      Status.find(params[:id]).replies\n    end\n    desc 'Returns a status.'\n    get do\n      Status.find(params[:id])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Allowed Methods in Grape API (Ruby)\nDESCRIPTION: Demonstrates how to control allowed HTTP methods in Grape API, including disabling automatic HEAD and OPTIONS routes, and handling unsupported methods.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  do_not_route_head!\n\n  get '/example' do\n    # only responds to GET\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  get '/rt_count' do\n    { rt_count: current_user.rt_count }\n  end\n\n  params do\n    requires :value, type: Integer, desc: 'Value to add to the rt count.'\n  end\n  put '/rt_count' do\n    current_user.rt_count += params[:value].to_i\n    { rt_count: current_user.rt_count }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Namespaced Callbacks in Grape API\nDESCRIPTION: Example showing callback scoping within nested namespaces and their effect on different routes.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_114\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyAPI < Grape::API\n  get '/' do\n    \"root - #{@blah}\"\n  end\n\n  namespace :foo do\n    before do\n      @blah = 'blah'\n    end\n\n    get '/' do\n      \"root - foo - #{@blah}\"\n    end\n\n    namespace :bar do\n      get '/' do\n        \"root - foo - bar - #{@blah}\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using exactly_one_of Validator in Grape\nDESCRIPTION: Ensures that exactly one parameter from a set is selected. Cannot be used with default values as it would cause a validation exception.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :beer\n  optional :wine\n  exactly_one_of :beer, :wine\nend\n```\n\n----------------------------------------\n\nTITLE: Using same_as Validator in Grape\nDESCRIPTION: Ensures that values of parameters match each other. Commonly used for password confirmation fields.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :password\n  requires :password_confirmation, same_as: :password\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Grape API with Airborne in Ruby\nDESCRIPTION: This snippet demonstrates how to configure and use Airborne to test a Grape API. It sets up the rack app and includes a sample test for a GET request.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_118\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'airborne'\n\nAirborne.configure do |config|\n  config.rack_app = Twitter::API\nend\n\ndescribe Twitter::API do\n  context 'GET /api/statuses/:id' do\n    it 'returns a status by id' do\n      status = Status.create!\n      get \"/api/statuses/#{status.id}\"\n      expect_json(status.as_json)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Before Hook in Grape API\nDESCRIPTION: Simple before block implementation to set a header in Grape API requests.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_112\n\nLANGUAGE: ruby\nCODE:\n```\nbefore do\n  header 'X-Robots-Tag', 'noindex'\nend\n```\n\n----------------------------------------\n\nTITLE: Using fail_fast in Grape Parameter Validation\nDESCRIPTION: Demonstrates how to use the fail_fast option to skip subsequent validations when a parameter fails validation, improving performance and reducing noise in error messages.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  required :beer, fail_fast: true\n  required :wine\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  required :blah, allow_blank: false, regexp: /blah/, fail_fast: true\nend\n```\n\n----------------------------------------\n\nTITLE: Restricting API to a Single Format in Grape\nDESCRIPTION: Example of an API that only responds to JSON format. This restricts the API to only accept and produce JSON, rejecting requests with other format extensions.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_96\n\nLANGUAGE: ruby\nCODE:\n```\nclass SingleFormatAPI < Grape::API\n  format :json\n\n  get :hello do\n    { hello: 'world' }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Grape API with MiniTest in Ruby\nDESCRIPTION: This code snippet shows how to use MiniTest to test a Grape API. It includes setup for the rack app and sample tests for GET requests.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_119\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'test_helper'\n\nclass Twitter::APITest < MiniTest::Test\n  include Rack::Test::Methods\n\n  def app\n    Twitter::API\n  end\n\n  def test_get_api_statuses_public_timeline_returns_an_empty_array_of_statuses\n    get '/api/statuses/public_timeline'\n    assert last_response.ok?\n    assert_equal [], JSON.parse(last_response.body)\n  end\n\n  def test_get_api_statuses_id_returns_a_status_by_id\n    status = Status.create!\n    get \"/api/statuses/#{status.id}\"\n    assert_equal status.to_json, last_response.body\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Route Parameters with Type in Grape API (Ruby)\nDESCRIPTION: Shows how to define routes in a Grape API class with typed route parameters. The example demonstrates a books resource with an integer ID parameter and a share resource.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Books < Grape::API\n  resource :books do\n    route_param :id, type: Integer do\n      # GET /books/:id\n      get do\n        #...\n      end\n    end\n\n    resource :share do\n      # POST /books/share\n      post do\n      # ....\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Arrays with Mixed Element Types\nDESCRIPTION: Demonstrates how to declare collections with variant member types by passing multiple types to Array. This allows arrays to contain elements of different specified types.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :status_codes, type: Array[Integer,String]\nend\nget '/' do\n  params[:status_codes].inspect\nend\n\nclient.get('/', status_codes: %w(1 two)) # => [1, \"two\"]\n```\n\n----------------------------------------\n\nTITLE: Using mutually_exclusive Validator in Grape\nDESCRIPTION: Ensures parameters aren't present at the same time in a request. Multiple mutually exclusive sets can be defined, but should never be used with required parameters.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :beer\n  optional :wine\n  mutually_exclusive :beer, :wine\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :beer\n  optional :wine\n  mutually_exclusive :beer, :wine\n  optional :scotch\n  optional :aquavit\n  mutually_exclusive :scotch, :aquavit\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Params Class for an Entire API in Grape\nDESCRIPTION: Sets up a custom parameter class for the entire API using build_with. This example uses Hashie::Mash which allows accessing parameters via method-style calls.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  build_with :hashie_mash\n\n  params do\n    optional :color, type: String\n  end\n  get do\n    params.color # instead of params[:color]\n  end\n```\n\n----------------------------------------\n\nTITLE: Customizing Parameter Name for Version in Grape API\nDESCRIPTION: Configures parameter-based API versioning with a custom parameter name. Allows changing the default 'apiver' parameter to a custom name using the parameter option.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nversion 'v1', using: :param, parameter: 'v'\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Parameter Types with 'types' Option\nDESCRIPTION: Shows how to declare variant-type parameters that can accept multiple types using the 'types' option instead of 'type'. Supports integers, strings, and arrays of mixed types.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :status_code, types: [Integer, String, Array[Integer, String]]\nend\nget '/' do\n  params[:status_code].inspect\nend\n\nclient.get('/', status_code: 'OK_GOOD') # => \"OK_GOOD\"\nclient.get('/', status_code: 300) # => 300\nclient.get('/', status_code: %w(404 NOT FOUND)) # => [404, \"NOT\", \"FOUND\"]\n```\n\n----------------------------------------\n\nTITLE: Using length Validator in Grape\nDESCRIPTION: Restricts parameters to have a specific length using the :length option. Supports min, max, or exact length validation for any type that implements #length.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :code, type: String, length: { is: 2 }\n  requires :str, type: String, length: { min: 3 }\n  requires :list, type: [Integer], length: { min: 3, max: 5 }\n  requires :hash, type: Hash, length: { max: 5 }\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling Parent Namespace Parameters in Grape API\nDESCRIPTION: Shows how to include or exclude parameters from parent namespaces when using the declared helper. This allows more control over what parameters are returned in nested API endpoints.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nformat :json\n\nnamespace :parent do\n  params do\n    requires :parent_name, type: String\n  end\n\n  namespace ':parent_name' do\n    params do\n      requires :child_name, type: String\n    end\n    get ':child_name' do\n      {\n        'without_parent_namespaces' => declared(params, include_parent_namespaces: false),\n        'with_parent_namespaces' => declared(params, include_parent_namespaces: true),\n      }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Deprecated Values Validator Usage in Ruby Grape\nDESCRIPTION: Shows how to update deprecated usage of the 'values' validator options (except, except_message, proc) to the new syntax using except_values and direct Proc usage.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :a, values: { value: 0..99, except: [3] }\n  requires :b, values: { value: 0..99, except: [3], except_message: 'not allowed' }\n  requires :c, values: { except: ['admin'] }\n  requires :d, values: { proc: -> (v) { v.even? } }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :a, values: 0..99, except_values: [3]\n  requires :b, values: 0..99, except_values: { value: [3], message: 'not allowed' }\n  requires :c, except_values: ['admin']\n  requires :d, values: -> (v) { v.even? }\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Arrays and Hash Type Parameters in Grape API\nDESCRIPTION: Demonstrates how declared parameters of type Hash or Array are included in the response with default empty values when missing in the request. This is useful for providing consistent API responses.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nformat :json\n\nparams do\n  optional :user, type: Hash do\n    optional :first_name, type: String\n    optional :last_name, type: String\n  end\n  optional :widgets, type: Array\nend\n\npost 'users/signup' do\n  { 'declared_params' => declared(params) }\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Error Formatter Lambda\nDESCRIPTION: Defines a custom error formatter using a lambda function.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_88\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  error_formatter :txt, ->(message, backtrace, options, env, original_exception) {\n    \"error: #{message} from #{backtrace}\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Missing Option in Grape (Ruby)\nDESCRIPTION: Demonstrates how to use the include_missing option when declaring parameters in a Grape API. This affects whether nil-valued parameters are included in the response.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nformat :json\n\nparams do\n  requires :user, type: Hash do\n    requires :first_name, type: String\n    optional :last_name, type: String\n  end\nend\n\npost 'users/signup' do\n  { 'declared_params' => declared(params, include_missing: false) }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring API Format with Proper URL Extension Handling\nDESCRIPTION: Example showing how to define an API that uses JSON format and responds to both '/hello' and '/hello.json' endpoints while returning 404 for unsupported formats.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  format :json\n\n  get :hello do\n    { hello: 'world' }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Builder in Grape API\nDESCRIPTION: Sets the parameter builder to use Hashie::Mash for parameters. This affects how parameters are accessed in route handlers, allowing for method-style access instead of hash syntax.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nGrape.configure do |config|\n  config.param_builder = :hashie_mash\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Default API Formats in Grape\nDESCRIPTION: Two equivalent Ruby examples showing Grape API format configuration. The first uses default content types, while the second explicitly declares the same defaults.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_92\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  # no content_type declarations, so Grape uses the defaults\nend\n\nclass Twitter::API < Grape::API\n  # the following declarations are equivalent to the defaults\n\n  content_type :xml, 'application/xml'\n  content_type :json, 'application/json'\n  content_type :binary, 'application/octet-stream'\n  content_type :txt, 'text/plain'\n\n  default_format :txt\nend\n```\n\n----------------------------------------\n\nTITLE: Parameter Precedence in Grape Routes (Ruby)\nDESCRIPTION: Illustrates how route_param takes precedence over regular parameters with the same name in Grape routes.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :foo, type: String\nend\nroute_param :foo do\n  get do\n    { value: params[:foo] }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Format for Parsing\nDESCRIPTION: API configuration that sets JSON as both the restricted format and default format, enabling parsing of data without a content-type using JSON parser.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_98\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  format :json\n  default_format :json\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Params Class for Specific Parameter Blocks in Grape\nDESCRIPTION: Demonstrates how to override the parameter class for a specific parameter block. This allows using different parameter handling styles in different endpoints.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  build_with :hash\n  optional :color, type: String\nend\n```\n\n----------------------------------------\n\nTITLE: Using Endless Ranges for Parameter Validation\nDESCRIPTION: Demonstrates how to use endless ranges (available in ActiveSupport >= 6.0) to validate parameters that should be greater than or less than a specific value without an upper or lower bound.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :minimum, type: Integer, values: 10..\n  optional :maximum, type: Integer, values: ..10\nend\n```\n\n----------------------------------------\n\nTITLE: Renaming Parameters in Conditional Validation\nDESCRIPTION: Demonstrates how to rename parameters using 'as' while maintaining conditional validation with 'given'. When parameters are renamed, the renamed version must be used in 'given' conditions.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :category, as: :type\n  given type: ->(val) { val == 'foo' } do\n    requires :description\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default JSON Format with Format Restriction\nDESCRIPTION: API configuration that restricts formats to JSON only, which will reject non-JSON content types with a 406 error code.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_97\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  format :json\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Parser with Content Types in Grape\nDESCRIPTION: API configuration that registers a custom content type and associates it with a custom parser. This example shows how to use the parser with a PUT endpoint.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_106\n\nLANGUAGE: ruby\nCODE:\n```\ncontent_type :txt, 'text/plain'\ncontent_type :custom, 'text/custom'\nparser :custom, CustomParser\n\nput 'value' do\n  params[:value]\nend\n```\n\n----------------------------------------\n\nTITLE: API Route Inspection and Metadata\nDESCRIPTION: Demonstrates how to add and inspect route metadata and settings at runtime\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_111\n\nLANGUAGE: ruby\nCODE:\n```\nclass TwitterAPI < Grape::API\n  version 'v1'\n  desc 'Includes custom settings.'\n  route_setting :custom, key: 'value'\n  get do\n\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Logic with Procs in 'values' Option\nDESCRIPTION: Demonstrates how to use a one-argument Proc with the 'values' option to implement custom validation logic. The Proc should return a truthy value if the parameter is valid, falsey otherwise.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :number, type: Integer, values: ->(v) { v.even? && v < 25 }\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Method Not Allowed Errors in Ruby Grape\nDESCRIPTION: Demonstrates how to restore the old behavior for handling 405 Method Not Allowed errors using a rescue_from block.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nrescue_from Grape::Exceptions::MethodNotAllowed do |e|\n  error! e.message, e.status, e.headers\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Error Formatter in Grape\nDESCRIPTION: API configuration that uses JSON for regular responses but plain text for error formatting, demonstrating how to override the default error formatter.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_99\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  format :json\n  content_type :txt, 'text/plain'\n  default_error_formatter :txt\nend\n```\n\n----------------------------------------\n\nTITLE: Using return_no_content Helper in Ruby Grape\nDESCRIPTION: Shows how to use the new return_no_content helper to explicitly return a 204 status code and an empty body for any request type.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\ndelete :id do\n  return_no_content\n  'this will not be returned'\nend\n```\n\n----------------------------------------\n\nTITLE: Using Symbol Values with Default allow_blank Behavior\nDESCRIPTION: Shows how 'allow_blank' defaults to true, allowing blank values even when using the 'values' option with a specific set of allowed values. Important consideration when validating enum-like parameters.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :state, type: Symbol, values: [:active, :inactive]\nend\n```\n\n----------------------------------------\n\nTITLE: Default Validator Example in Ruby Grape API\nDESCRIPTION: Demonstrates how default validator is applied for nil values in Grape API parameters. Shows that nil values are now coerced to the default value.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass Api < Grape::API\n  params do\n    requires :my_param, type: Integer, default: 0\n  end\n\n  get 'example' do\n     params[:my_param]\n  end\n  get '/example', params: { my_param: nil } #=> before: nil, after: 0\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Content Types in Grape\nDESCRIPTION: Example showing how to override Grape's default content types by declaring only specific formats. This API only supports XML and RSS formats, making the default :txt format unavailable.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_93\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  content_type :xml, 'application/xml'\n  content_type :rss, 'application/xml+rss'\n\n  default_format :xml\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Headers with Rack 3 Compatibility (Ruby)\nDESCRIPTION: Shows how to check for header values in Grape endpoints with Rack 3 compatibility, using lowercase header names for authentication checks.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nget do\n  # This would use headers['Secret-Password'] in Rack < 3\n  error!('Unauthorized', 401) unless headers['secret-password'] == 'swordfish'\nend\n```\n\n----------------------------------------\n\nTITLE: Using except_values Validator in Grape\nDESCRIPTION: Restricts parameters from having specific values. It accepts an Array, Range, or a Proc with arity zero to define forbidden values.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :browser, except_values: [ 'ie6', 'ie7', 'ie8' ]\n  requires :port, except_values: { value: 0..1024, message: 'is not allowed' }\n  requires :hashtag, except_values: -> { Hashtag.FORBIDDEN_LIST }\nend\n```\n\n----------------------------------------\n\nTITLE: Correct Dependent Parameter Configuration (Ruby)\nDESCRIPTION: Shows the correct way to configure dependent parameters in Grape 1.5.1+, using symbols for parameter names in the given block.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ngiven :matrix do\n  # dependent params\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Implementation\nDESCRIPTION: Shows how to implement basic logging in a Grape API endpoint.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_90\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  helpers do\n    def logger\n      API.logger\n    end\n  end\n  post '/statuses' do\n    logger.info \"#{current_user} has statused\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Status with Entity Documentation\nDESCRIPTION: Shows how to use entity documentation in params block for creating new status entries\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_108\n\nLANGUAGE: ruby\nCODE:\n```\nmodule API\n  class Statuses < Grape::API\n    version 'v1'\n\n    desc 'Create a status'\n    params do\n      requires :all, except: [:ip], using: API::Entities::Status.documentation.except(:id)\n    end\n    post '/status' do\n      Status.create! params\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Formatter with Lambda in Grape\nDESCRIPTION: Example showing how to define a custom formatter for Excel files using a lambda function to convert objects to XLS format.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_100\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  content_type :xls, 'application/vnd.ms-excel'\n  formatter :xls, ->(object, env) { object.to_xls }\nend\n```\n\n----------------------------------------\n\nTITLE: Nil Value Coercion Behavior in Grape (Ruby)\nDESCRIPTION: Demonstrates how nil value coercion behavior changed in Grape 1.5.3, showing the differences between versions when handling nil values with custom coercers.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Api < Grape::API\n  params do\n    optional :value, type: Integer, coerce_with: ->(val) { val || 0 }\n  end\n\n  get 'example' do\n     params[:my_param]\n  end\n  get '/example', params: { value: nil }\n  # 1.5.2 = nil\n  # 1.5.3 = 0\n  get '/example', params: {}\n  # 1.5.2 = nil\n  # 1.5.3 = nil\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Implementation\nDESCRIPTION: Demonstrates how to implement and use a custom logger in Grape API.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_91\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyLogger\n  def warning(message)\n    puts \"this is a warning: #{message}\"\n  end\nend\n\nclass API < Grape::API\n  logger MyLogger.new\n  helpers do\n    def logger\n      API.logger\n    end\n  end\n  get '/statuses' do\n    logger.warning \"#{current_user} has statused\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring API Format with Content Type in Grape\nDESCRIPTION: Example showing how to configure a Grape API with both format and content_type. This configuration will respond to requests with file extensions like '/hello.json'.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  format :json\n  content_type :json, 'application/json'\n\n  get :hello do\n    { hello: 'world' }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Instance Variables Scope Change in Grape 2.1.0+\nDESCRIPTION: Examples showing how instance variables defined in endpoints or before validators are now accessible inside rescue_from handlers in Grape 2.1.0+. This represents a behavior change from previous versions.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass TwitterAPI < Grape::API\n  before do\n    @var = 1\n  end\n\n  get '/' do\n    puts @var # => 1\n    raise\n  end\n\n  rescue_from :all do\n    puts @var # => nil\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass TwitterAPI < Grape::API\n  before do\n    @var = 1\n  end\n\n  get '/' do\n    puts @var # => 1\n    raise\n  end\n\n  rescue_from :all do\n    puts @var # => 1\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing and Using Route Settings Extension in Grape\nDESCRIPTION: Example showing how to transition from using @last_description to the supported route_setting method for extending Grape with custom DSL methods.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Grape\n  module Extensions\n    module SortExtension\n      def sort(value)\n        @last_description ||= {}\n        @last_description[:sort] ||= {}\n        @last_description[:sort].merge! value\n        value\n      end\n    end\n\n    Grape::API.extend self\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Grape\n  module Extensions\n    module SortExtension\n      def sort(value)\n        route_setting :sort, sort: value\n        value\n      end\n    end\n\n    Grape::API.extend self\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Request Path Anchoring Example\nDESCRIPTION: Demonstrates how to use anchor: false option to match partial paths in Grape API routes.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_115\n\nLANGUAGE: ruby\nCODE:\n```\nclass TwitterAPI < Grape::API\n  namespace :statuses do\n    get '/(*:status)', anchor: false do\n\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Multiple API Versions\nDESCRIPTION: Shows how to mount multiple API versions within a single Grape API\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::API < Grape::API\n  mount Twitter::APIv1\n  mount Twitter::APIv2\nend\n```\n\n----------------------------------------\n\nTITLE: Parameter Renaming with 'as' Option in Grape (Ruby)\nDESCRIPTION: Demonstrates parameter renaming behavior change in Grape 1.6.0+, showing how the 'as' option works with the declared helper.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# (1) Rename a to b, while client sends +a+\noptional :a, type: Integer, as: :b\nparams = { a: 1 }\ndeclared(params, include_missing: false)\n# expected => { b: 1 }\n# actual   => { b: 1 }\n\n# (2) Rename a to b, while client sends +b+\noptional :a, type: Integer, as: :b, values: [1, 2, 3]\nparams = { b: '5' }\ndeclared(params, include_missing: false)\n# expected => { }        (>= 1.6.0)\n# actual   => { b: '5' } (uncasted, unvalidated, <= 1.5.3)\n```\n\n----------------------------------------\n\nTITLE: Running Grape with Docker\nDESCRIPTION: Command to run Grape operations through Docker using docker-compose, which provides an isolated environment with all dependencies.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose run --rm --build grape <command_and_parameters>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Path Reloading in Rails for Grape\nDESCRIPTION: This code snippet shows how to configure Rails to auto-load and reload Grape API files in development. It adds API paths to the application configuration and sets up a file watcher to reload routes.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_123\n\nLANGUAGE: ruby\nCODE:\n```\n# Auto-load API and its subdirectories\nconfig.paths.add File.join('app', 'api'), glob: File.join('**', '*.rb')\nconfig.autoload_paths += Dir[Rails.root.join('app', 'api', '*')]\n```\n\nLANGUAGE: ruby\nCODE:\n```\nif Rails.env.development?\n  ActiveSupport::Dependencies.explicitly_unloadable_constants << 'Twitter::API'\n\n  api_files = Dir[Rails.root.join('app', 'api', '**', '*.rb')]\n  api_reloader = ActiveSupport::FileUpdateChecker.new(api_files) do\n    Rails.application.reload_routes!\n  end\n  ActiveSupport::Reloader.to_prepare do\n    api_reloader.execute_if_updated\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Headers in Ruby Grape\nDESCRIPTION: Demonstrates how headers are handled in error responses in Grape version 1.2.4 and later.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleApi < Grape::API\n  before do\n    header 'X-Before-Header', 'before_call'\n  end\n\n  get 'ping' do\n    header 'X-App-Header', 'on_call'\n    error! :pong, 400, 'X-Error-Details' => 'Invalid token'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Dependent Parameters with Renamed Parameters (Ruby)\nDESCRIPTION: Shows how dependent parameter resolution works with renamed parameters in Grape 1.6.0+, where the original parameter name is used in the given block.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :a, as: :b\n  given :a do # (<= 1.5.3 you had to reference +:b+ here to make it work)\n    requires :c\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Declared Helper with Missing Parameters (Ruby)\nDESCRIPTION: Demonstrates how the declared helper behaves with missing parameters in Grape 1.5.0+, showing the behavior with nested hash parameters.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass Api < Grape::API\n  params do\n    optional :outer, type: Hash do\n      optional :inner, type: Hash do\n        optional :value, type: String\n      end\n    end\n  end\n  get 'example' do\n    declared(params, include_missing: true)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using New Block Syntax for API Endpoint Description in Grape\nDESCRIPTION: Comparison between the old and new syntax for describing API endpoints in Grape, showing how to define details, parameters, success/failure responses, and headers.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\n  desc \"some descs\",\n    detail: 'more details',\n    entity: API::Entities::Entity,\n    params: API::Entities::Status.documentation,\n    named: 'a name',\n    headers: [XAuthToken: {\n      description: 'Valdates your identity',\n      required: true\n    }\n  get nil, http_codes: [\n    [401, 'Unauthorized', API::Entities::BaseError],\n    [404, 'not found', API::Entities::Error]\n  ] do\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndesc \"some descs\" do\n  detail 'more details'\n  params API::Entities::Status.documentation\n  success API::Entities::Entity\n  failure [\n    [401, 'Unauthorized', API::Entities::BaseError],\n    [404, 'not found', API::Entities::Error]\n  ]\n  named 'a name'\n  headers [\n    XAuthToken: {\n      description: 'Valdates your identity',\n      required: true\n    },\n    XOptionalHeader: {\n      description: 'Not really needed',\n      required: false\n    }\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Configurable API Mounting\nDESCRIPTION: Example of mounting APIs with configuration parameters\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Voting::API < Grape::API\n  namespace 'votes' do\n    desc \"Vote for your #{configuration[:votable]}\"\n    get do\n      # Your logic\n    end\n  end\nend\n\nclass Post::API < Grape::API\n  mount Voting::API, with: { votable: 'posts' }\nend\n\nclass Comment::API < Grape::API\n  mount Voting::API, with: { votable: 'comments' }\nend\n```\n\n----------------------------------------\n\nTITLE: Streaming File Content in Chunks (Ruby)\nDESCRIPTION: Demonstrates how to stream file content in chunks using the stream helper in Grape 1.4.0+.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  get '/' do\n    stream '/path/to/file'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Versioning with Shared Callbacks in Grape API\nDESCRIPTION: Example demonstrating how version blocks share callbacks in Grape. Callbacks defined in one version block are inherited by subsequent version blocks.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  resource :foo do\n    version 'v1', :using => :path do\n      before do\n        @output ||= 'hello1'\n      end\n      get '/' do\n        @output += '-v1'\n      end\n    end\n\n    version 'v2', :using => :path do\n      before do\n        @output ||= 'hello2'\n      end\n      get '/:id' do\n        @output += '-v2'\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Grape API with MiniTest in Rails\nDESCRIPTION: This code snippet shows how to use MiniTest to test a Grape API in a Rails application. It includes setup for the rack app and sample tests for GET requests.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_121\n\nLANGUAGE: ruby\nCODE:\n```\nclass Twitter::APITest < ActiveSupport::TestCase\n  include Rack::Test::Methods\n\n  def app\n    Rails.application\n  end\n\n  test 'GET /api/statuses/public_timeline returns an empty array of statuses' do\n    get '/api/statuses/public_timeline'\n    assert last_response.ok?\n    assert_equal [], JSON.parse(last_response.body)\n  end\n\n  test 'GET /api/statuses/:id returns a status by id' do\n    status = Status.create!\n    get \"/api/statuses/#{status.id}\"\n    assert_equal status.to_json, last_response.body\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring a Single API Instance in Grape\nDESCRIPTION: Sets configuration values for a specific API instance rather than globally. These configurations are available inside the API via the configuration method.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nAPI.configure do |config|\n  config[key] = value\nend\n```\n\n----------------------------------------\n\nTITLE: Streaming Custom Content with Stream Helper (Ruby)\nDESCRIPTION: Shows how to implement custom streaming with a streamer class that streams paginated data from a database in Grape 1.4.0+.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyObject\n  attr_accessor :result\n\n  def initialize(query)\n    @result = query\n  end\n\n  def each\n    yield '['\n    # Do paginated DB fetches and return each page formatted\n    first = false\n    result.find_in_batches do |records|\n      yield process_records(records, first)\n      first = false\n    end\n    yield ']'\n  end\n\n  def process_records(records, first)\n    buffer = +''\n    buffer << ',' unless first\n    buffer << records.map(&:to_json).join(',')\n    buffer\n  end\nend\n\nclass API < Grape::API\n  get '/' do\n    stream MyObject.new(Sprocket.all)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Nil Values for Array Parameters (Ruby)\nDESCRIPTION: Demonstrates how nil values for array parameters are handled differently across Grape versions 1.3.1 to 1.3.3.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Api < Grape::API\n  params do\n    require :my_param, type: Array[Integer]\n  end\n\n  get 'example' do\n     params[:my_param]\n  end\n  get '/example', params: { my_param: nil }\n  # 1.3.1 = []\n  # 1.3.2 = nil\nend\n```\n\n----------------------------------------\n\nTITLE: Running Tests Against Multiple Rails Versions in Grape\nDESCRIPTION: Commands to install and use Appraisal for testing the Grape project against all supported versions of Rails.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngem install appraisal\nappraisal install\nappraisal rake spec\n```\n\n----------------------------------------\n\nTITLE: Path Recognition Behavior After Grape 2.1.0 (Ruby)\nDESCRIPTION: Shows the improved path recognition in Grape 2.1.0+ where type constraints are considered when matching routes, resulting in more accurate path recognition.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nAPI.recognize_path '/books/1' # => /books/:id\nAPI.recognize_path '/books/share' # => /books/share\nAPI.recognize_path '/books/other' # => nil\n```\n\n----------------------------------------\n\nTITLE: Using Default Validator for Nil Array Handling (Ruby)\nDESCRIPTION: Shows how to use the default validator to maintain backward compatibility with Grape 1.3.1 behavior for nil array parameters in newer versions.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass Api < Grape::API\n  params do\n    require :my_param, type: Array[Integer], default: []\n  end\n\n  get 'example' do\n     params[:my_param]\n  end\n  get '/example', params: { my_param: nil } # => []\nend\n```\n\n----------------------------------------\n\nTITLE: Rebasing Feature Branch with Upstream Master in Grape\nDESCRIPTION: Commands to update your feature branch with changes from the upstream master branch, ensuring your pull request is based on the latest code.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/master\ngit push origin my-feature-branch -f\n```\n\n----------------------------------------\n\nTITLE: Forking and Setting Up the Grape Project Repository\nDESCRIPTION: Commands to clone your forked copy of the Grape repository and add the upstream remote for synchronization with the original repository.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/contributor/grape.git\ncd grape\ngit remote add upstream https://github.com/ruby-grape/grape.git\n```\n\n----------------------------------------\n\nTITLE: Pre-loading Grape Routes\nDESCRIPTION: Shows how to pre-compile Grape routes before server startup\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nTwitter::API.compile!\n```\n\n----------------------------------------\n\nTITLE: Legacy Virtus Custom Type Parser in Ruby Grape\nDESCRIPTION: Shows the old way of implementing custom type parsing using Virtus in Grape before version 1.3.0.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n# Legacy Grape parser\nclass SecureUriType < Virtus::Attribute\n  def coerce(input)\n    URI.parse value\n  end\n\n  def value_coerced?(input)\n    value.is_a? String\n  end\nend\n\nparams do\n  requires :secure_uri, type: SecureUri\nend\n```\n\n----------------------------------------\n\nTITLE: Route Parameter Precedence Example in Grape\nDESCRIPTION: Code example demonstrating route parameter precedence behavior when using Grape::Extensions::Hash::ParamBuilder. Shows how route_param takes higher precedence over regular parameters with the same name.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngrape.configure do |config|\n  config.param_builder = Grape::Extensions::Hash::ParamBuilder\nend\n\nparams do\n  requires :foo, type: String\nend\nroute_param :foo do\n  get do\n    { value: params[:foo] }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format for Grape Pull Requests\nDESCRIPTION: Example format for adding an entry to the CHANGELOG.md file when submitting a pull request to the Grape project.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n* [#123](https://github.com/ruby-grape/grape/pull/123): Reticulated splines - [@contributor](https://github.com/contributor).\n```\n\n----------------------------------------\n\nTITLE: Updating Grape::Exceptions::Validation Usage in Ruby\nDESCRIPTION: Shows how to update the syntax for raising Grape::Exceptions::Validation explicitly, replacing message_key with message.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nfail Grape::Exceptions::Validation, params: [:oauth_token_secret], message_key: :presence\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfail Grape::Exceptions::Validation, params: [:oauth_token_secret], message: :presence\n```\n\n----------------------------------------\n\nTITLE: Array Coercion Example in Ruby Grape\nDESCRIPTION: Shows how to properly coerce array types with explicit coercion blocks in newer Grape versions using dry-types.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nrequires :values, type: Array[String], coerce_with: ->(val) { val.split(',').map(&:strip) }\n\nrequires :values, type: Array[Integer], coerce_with: ->(val) { val.split(',').map(&:strip).map(&:to_i) }\n```\n\n----------------------------------------\n\nTITLE: Path Recognition Behavior Before Grape 2.1.0 (Ruby)\nDESCRIPTION: Demonstrates how path recognition worked in Grape versions prior to 2.1.0, where all paths matched against routes with parameters regardless of type constraints.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nAPI.recognize_path '/books/1' # => /books/:id\nAPI.recognize_path '/books/share' # => /books/:id\nAPI.recognize_path '/books/other' # => /books/:id\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Remote in Grape Project\nDESCRIPTION: Command to push your feature branch to your forked repository on GitHub, making it available for creating a pull request.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests in Grape\nDESCRIPTION: Commands to install project dependencies and run the test suite to ensure the project builds correctly.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\nbundle exec rake\n```\n\n----------------------------------------\n\nTITLE: Specifying DELETE Response Status in Ruby Grape\nDESCRIPTION: Demonstrates how to explicitly set the status code for DELETE requests to maintain the old behavior of returning 200 OK instead of the new default 204 No Content.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\ndelete :id do\n  status 204 # or 200, for < 0.19.0 behavior\n  'foo successfully deleted'\nend\n```\n\n----------------------------------------\n\nTITLE: Running Grape Tests in Ruby\nDESCRIPTION: This snippet shows how to install dependencies and run the test suite for Grape before a release.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbundle install\nrake\n```\n\n----------------------------------------\n\nTITLE: Amending Commit and Force Pushing in Grape Project\nDESCRIPTION: Commands to amend your most recent commit (e.g., to update the CHANGELOG) and force push the changes to your feature branch.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --amend\ngit push origin my-feature-branch -f\n```\n\n----------------------------------------\n\nTITLE: Docker Commands for Running Tests and Tasks in Grape\nDESCRIPTION: Examples of various Docker commands for running tests, specific spec files, Rake tasks, and using different Ruby versions or Gemfiles.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose run --rm --build grape rspec\ndocker-compose run --rm --build grape rspec spec/:file_path\ndocker-compose run --rm --build grape rake <task_name>\ndocker-compose run --rm --build grape rubocop\nRUBY_VERSION=2.7.7 docker-compose run --rm --build grape rspec\ndocker-compose run -e GEMFILE=rails_7_0 --rm --build grape rspec\n```\n\n----------------------------------------\n\nTITLE: Configuring Regexp Validator with nil Value Handling\nDESCRIPTION: Example of configuring a parameter with regexp validation that disallows nil values by setting allow_blank: false. In Grape versions after 0.12.0, nil values pass regexp validation by default.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :email, allow_blank: false, regexp: /.+@.+/\nend\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with Custom Headers (Shell)\nDESCRIPTION: Demonstrates a curl command with Content-Type and custom Secret-Password headers, used to illustrate header case handling differences between Rack versions.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -H \"Secret-Password: foo\" ...\n```\n\n----------------------------------------\n\nTITLE: Mounting Grape with Sinatra\nDESCRIPTION: Example of mounting Grape alongside Sinatra using Rack::Cascade\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Example config.ru\n\nrequire 'sinatra'\nrequire 'grape'\n\nclass API < Grape::API\n  get :hello do\n    { hello: 'world' }\n  end\nend\n\nclass Web < Sinatra::Base\n  get '/' do\n    'Hello world.'\n  end\nend\n\nuse Rack::Session::Cookie\nrun Rack::Cascade.new [Web, API]\n```\n\n----------------------------------------\n\nTITLE: Updating CacheBusterMiddleware for Grape 0.12.0+ Middleware Changes\nDESCRIPTION: Example showing how to update custom middleware that previously accessed @app_response as an array to handle it as a Rack::Response instance for Grape 0.12.0+. This change is necessary due to streaming support being added.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nclass CacheBusterMiddleware < Grape::Middleware::Base\n  def after\n    @app_response[1]['Expires'] = Time.at(0).utc.to_s\n    @app_response\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass CacheBusterMiddleware < Grape::Middleware::Base\n  def after\n    @app_response.headers['Expires'] = Time.at(0).utc.to_s\n    @app_response\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Class Variables in Grape API Methods\nDESCRIPTION: Example showing how to transition from accessing class variables via helper methods (which no longer works) to using class methods in Grape APIs.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\n@@static_variable = 42\n\nhelpers do\n  def get_static_variable\n    @@static_variable\n  end\nend\n\nget do\n  get_static_variable\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n@@static_variable = 42\n\ndef self.get_static_variable\n  @@static_variable\nend\n\nget do\n  get_static_variable\nend\n```\n\n----------------------------------------\n\nTITLE: Using OAuth2 Authentication Middleware in Grape < 0.9.0\nDESCRIPTION: Example showing how to use the OAuth2 authentication middleware in versions of Grape prior to 0.9.0, which was later removed.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\n module API\n   class Root < Grape::API\n     class Protected < Grape::API\n       use Grape::Middleware::Auth::OAuth2,\n           token_class: 'AccessToken',\n           parameter: %w(access_token api_key)\n```\n\n----------------------------------------\n\nTITLE: Rails Inflection Configuration\nDESCRIPTION: Configuration for proper API acronym handling in Rails Zeitwerk\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Inflector.inflections(:en) do |inflect|\n  inflect.acronym 'API'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Grape Repository\nDESCRIPTION: Commands to update your local master branch with the upstream repository and create a new feature branch for development.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull upstream master\ngit checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Raising Validation Exceptions in Grape\nDESCRIPTION: Example showing the change in syntax for raising validation exceptions in Grape, from specifying a single param to accepting an array of params for more flexibility.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nraise Grape::Exceptions::Validation, param: :id, message_key: :presence\n```\n\nLANGUAGE: ruby\nCODE:\n```\nraise Grape::Exceptions::Validation, params: [:id], message_key: :presence\n```\n\n----------------------------------------\n\nTITLE: Committing Post-Release Changes in Git\nDESCRIPTION: This shell command set shows how to commit and push the changes made for preparing the next development iteration.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/RELEASING.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit add CHANGELOG.md README.md lib/grape/version.rb\ngit commit -m \"Preparing for next development iteration, 0.6.1.\"\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Updating CHANGELOG for New Release in Markdown\nDESCRIPTION: This code snippet demonstrates how to update the CHANGELOG.md file with the new release version and date.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/RELEASING.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#### 0.6.0 (2013/9/16)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dependent Parameter Configuration (Ruby)\nDESCRIPTION: Shows the incorrect way to configure dependent parameters in Grape 1.5.1+, using strings instead of symbols for parameter names in the given block.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ngiven 'matrix' do\n  # dependent params\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring API Format with Single JSON Format in Grape\nDESCRIPTION: Example showing how to configure a Grape API with a single JSON format. This configuration will only respond to '/hello' endpoint without file extensions.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nclass API < Grape::API\n  format :json\n\n  get :hello do\n    { hello: 'world' }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating README for Next Version in Markdown\nDESCRIPTION: This snippet shows how to update the README.md file to reflect the upcoming development version.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/RELEASING.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## Stable Release\n\nYou're reading the documentation for the next release of Grape, which should be 0.6.1.\nThe current stable release is [0.6.0](https://github.com/ruby-grape/grape/blob/v0.6.0/README.md).\n```\n\n----------------------------------------\n\nTITLE: Pointing to Grape HEAD in Ruby\nDESCRIPTION: This code demonstrates how to use the latest Grape version from GitHub in a Gemfile.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem grape, github: 'ruby-grape/grape'\n```\n\n----------------------------------------\n\nTITLE: Declaring Lazy-Evaluated Parameter Values in Grape (Incorrect Approach)\nDESCRIPTION: Example showing incorrect usage of proc values for parameter validation in Grape 0.10.0+. This approach would raise an error at startup time.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :v, values: -> { [:x, :y] }, default: -> { :z }\nend\n```\n\n----------------------------------------\n\nTITLE: Releasing Grape Gem Using Rake\nDESCRIPTION: This shell command demonstrates how to use rake to build, tag, and push the new Grape gem release.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/RELEASING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ rake release\n\ngrape 0.6.0 built to pkg/grape-0.6.0.gem.\nTagged v0.6.0.\nPushed git commits and tags.\nPushed grape 0.6.0 to rubygems.org.\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information for Grape Contribution\nDESCRIPTION: Commands to set up your Git user name and email address for making contributions to the Grape project.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"contributor@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Parameter Values in Grape (Correct Approach)\nDESCRIPTION: Example showing the correct approach for parameter validation in Grape 0.10.0+ by removing the proc and using static values.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/UPGRADING.md#2025-04-22_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  optional :v, values: [:x, :y], default: :z\nend\n```\n\n----------------------------------------\n\nTITLE: Committing Release Changes in Git\nDESCRIPTION: This shell command set shows how to commit and push the changes made for the release preparation.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/RELEASING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit add README.md CHANGELOG.md\ngit commit -m \"Preparing for release, 0.6.0.\"\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Updating Grape Version in Ruby\nDESCRIPTION: This Ruby code snippet shows how to update the VERSION constant in the Grape module for the next development iteration.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/RELEASING.md#2025-04-22_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Grape\n  VERSION = '0.6.1'.freeze\nend\n```\n\n----------------------------------------\n\nTITLE: Docker Environment Version Information Example\nDESCRIPTION: Example output showing version information when running Grape in the Docker environment, including Ruby, RubyGems, and Bundler versions.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux-musl]\nrubygems 3.4.12\nBundler version 2.4.1 (2022-12-24 commit f3175f033c)\nRunning default Gemfile\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Grape Project\nDESCRIPTION: Basic Git commands for staging and committing changes to the Grape project repository.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit add ...\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Updating README for Stable Release in Markdown\nDESCRIPTION: This snippet shows how to update the README.md file to reflect the new stable release version.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/RELEASING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Stable Release\n\nYou're reading the documentation for the stable release of Grape, 0.6.0.\n```\n\n----------------------------------------\n\nTITLE: Updating CHANGELOG for Next Version in Markdown\nDESCRIPTION: This code snippet demonstrates how to update the CHANGELOG.md file with a template for the next release.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/RELEASING.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### 0.6.1 (Next)\n\n#### Features\n\n* Your contribution here.\n\n#### Fixes\n\n* Your contribution here.\n```\n\n----------------------------------------\n\nTITLE: Using Ranges with the 'values' Option\nDESCRIPTION: Shows how to use ranges with the 'values' option to validate that parameters fall within a specified range. Useful for numeric values like coordinates that must be within specific bounds.\nSOURCE: https://github.com/ruby-grape/grape/blob/master/README.md#2025-04-22_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nparams do\n  requires :latitude, type: Float, values: -90.0..+90.0\n  requires :longitude, type: Float, values: -180.0..+180.0\n  optional :letters, type: Array[String], values: 'a'..'z'\nend\n```"
  }
]