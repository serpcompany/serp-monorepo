[
  {
    "owner": "microsoft",
    "repo": "bitnet",
    "content": "TITLE: Running Inference with Quantized BitNet Model\nDESCRIPTION: Command to run inference with a quantized BitNet model. The -cnv flag enables conversation mode and the prompt is used as the system prompt.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython run_inference.py -m models/BitNet-b1.58-2B-4T/ggml-model-i2_s.gguf -p \"You are a helpful assistant\" -cnv\n```\n\n----------------------------------------\n\nTITLE: Generating and Benchmarking Dummy BitNet Models\nDESCRIPTION: Commands to generate a dummy BitNet model with specific parameters and then run benchmarks on it. Useful for testing model layouts not supported by public models.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython utils/generate-dummy-bitnet-model.py models/bitnet_b1_58-large --outfile models/dummy-bitnet-125m.tl1.gguf --outtype tl1 --model-size 125M\n\n# Run benchmark with the generated model, use -m to specify the model path, -p to specify the prompt processed, -n to specify the number of token to generate\npython utils/e2e_benchmark.py -m models/dummy-bitnet-125m.tl1.gguf -p 512 -n 128\n```\n\n----------------------------------------\n\nTITLE: Running Inference Benchmark with BitNet Model\nDESCRIPTION: Example command for running the inference benchmark script with a BitNet model. The command specifies the model path, number of generated tokens, prompt size, and thread count.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython utils/e2e_benchmark.py -m /path/to/model -n 200 -p 256 -t 4\n```\n\n----------------------------------------\n\nTITLE: Generating TL1 and TL2 Kernel Code for BitNet\nDESCRIPTION: Command line examples for generating optimized kernel code for bitnet_b1_58-large model. TL1 generates code with specified block dimensions (BM, BK, bm) for matrix multiplication, while TL2 handles cases where BK must be divisible by 6 and splits computation between TL1 and TL2.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/docs/codegen.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For TL1\npython utils/codegen_tl1.py --model bitnet_b1_58-large --BM 256,128,256 --BK 128,64,128 --bm 32,64,32\n\n# For TL2\npython utils/codegen_tl2.py --model bitnet_b1_58-large --BM 256,128,256 --BK 96,192,96 --bm 32,32,32\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration and Build Options\nDESCRIPTION: Sets up the CMake project with minimum version requirements, build types, and compiler options. Configures build output directories and enables compile commands generation.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(\"bitnet.cpp\" C CXX)\ninclude(CheckIncludeFileCXX)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif (NOT XCODE AND NOT MSVC AND NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n```\n\n----------------------------------------\n\nTITLE: Compiler and Dependencies Configuration\nDESCRIPTION: Sets compiler standards, threading preferences, and adds necessary compile options for GNU compiler. Includes required dependencies and subdirectories.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD_REQUIRED true)\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_C_STANDARD_REQUIRED true)\nset(THREADS_PREFER_PTHREAD_FLAG ON)\n\nif (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    add_compile_options(-fpermissive)\nendif()\n\nfind_package(Threads REQUIRED)\n\nadd_subdirectory(src)\nadd_subdirectory(3rdparty/llama.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting up Bitnet CMake Variables and Dependencies\nDESCRIPTION: Configures the necessary source files, headers, and includes for the Bitnet project. It sets paths for header and source files, includes the llama.cpp GGML library, and enforces that either Clang or GCC compilers must be used for compilation.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/src/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(GGML_HEADERS_BITNET ../include/ggml-bitnet.h)\nset(GGML_SOURCES_BITNET ggml-bitnet-mad.cpp)\nset(GGML_SOURCES_BITNET ggml-bitnet-lut.cpp)\n\ninclude_directories(3rdparty/llama.cpp/ggml/include)\n\nif (NOT (CMAKE_C_COMPILER_ID MATCHES \"Clang\" OR CMAKE_C_COMPILER_ID STREQUAL \"GNU\") OR\n    NOT (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\"))\n    message(FATAL_ERROR \"Clang or GCC is required for Bitnet.cpp compilation\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Bitnet Platform-Specific Options\nDESCRIPTION: Defines platform-specific build options for ARM and x86 architectures and sets up GGML-related compile definitions.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\noption(BITNET_ARM_TL1    \"bitnet.cpp: use tl1 on arm platform\"    OFF)\noption(BITNET_X86_TL2    \"bitnet.cpp: use tl2 on x86 platform\"    OFF)\n\nset(GGML_BITNET_ARM_TL1    ${BITNET_ARM_TL1})\nset(GGML_BITNET_X86_TL2    ${BITNET_X86_TL2})\n\nif (GGML_BITNET_ARM_TL1)\n    add_compile_definitions(GGML_BITNET_ARM_TL1)\nendif()\nif (GGML_BITNET_X86_TL2)\n    add_compile_definitions(GGML_BITNET_X86_TL2)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Sets up installation paths and configuration for headers, libraries, and binaries. Generates package version files and configures installation targets.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\nset(LLAMA_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR}\n    CACHE PATH \"Location of header files\")\nset(LLAMA_LIB_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR}\n    CACHE PATH \"Location of library files\")\nset(LLAMA_BIN_INSTALL_DIR ${CMAKE_INSTALL_BINDIR}\n    CACHE PATH \"Location of binary files\")\nset(LLAMA_BUILD_NUMBER ${BUILD_NUMBER})\nset(LLAMA_BUILD_COMMIT ${BUILD_COMMIT})\nset(LLAMA_INSTALL_VERSION 0.0.${BUILD_NUMBER})\n\nwrite_basic_package_version_file(\n        ${CMAKE_CURRENT_BINARY_DIR}/LlamaConfigVersion.cmake\n    VERSION ${LLAMA_INSTALL_VERSION}\n    COMPATIBILITY SameMajorVersion)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/LlamaConfig.cmake\n              ${CMAKE_CURRENT_BINARY_DIR}/LlamaConfigVersion.cmake\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Llama)\n\nset_target_properties(llama PROPERTIES PUBLIC_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/llama.h)\ninstall(TARGETS llama LIBRARY PUBLIC_HEADER)\n```\n\n----------------------------------------\n\nTITLE: Including llama.cpp Requirements Files for BitNet\nDESCRIPTION: References five requirement files from the llama.cpp third-party library to ensure all dependencies for converting various model formats are available. These include tools for converting legacy Llama models, Hugging Face models to GGUF format, updating HF to GGUF conversions, converting GGML to GGUF, and converting LoRA models to GGUF.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r 3rdparty/llama.cpp/requirements/requirements-convert_legacy_llama.txt\n-r 3rdparty/llama.cpp/requirements/requirements-convert_hf_to_gguf.txt\n-r 3rdparty/llama.cpp/requirements/requirements-convert_hf_to_gguf_update.txt\n-r 3rdparty/llama.cpp/requirements/requirements-convert_llama_ggml_to_gguf.txt\n-r 3rdparty/llama.cpp/requirements/requirements-convert_lora_to_gguf.txt\n```\n\n----------------------------------------\n\nTITLE: Microsoft Security Policy Template in Markdown\nDESCRIPTION: Comprehensive markdown template for Microsoft's security vulnerability reporting guidelines, including reporting channels, required information, and policy links.\nSOURCE: https://github.com/microsoft/bitnet/blob/main/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- BEGIN MICROSOFT SECURITY.MD V0.0.9 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet) and [Xamarin](https://github.com/xamarin).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/security.md/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/security.md/msrc/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/security.md/msrc/pgp).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/security.md/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/security.md/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n```"
  }
]