[
  {
    "owner": "redis",
    "repo": "go-redis",
    "content": "TITLE: Basic Redis Client Usage Example\nDESCRIPTION: Demonstrates creating a Redis client, setting and getting values with error handling. Shows basic connection setup and key-value operations.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/redis/go-redis/v9\"\n)\n\nvar ctx = context.Background()\n\nfunc ExampleClient() {\n    rdb := redis.NewClient(&redis.Options{\n        Addr:     \"localhost:6379\",\n        Password: \"\", // no password set\n        DB:       0,  // use default DB\n    })\n\n    err := rdb.Set(ctx, \"key\", \"value\", 0).Err()\n    if err != nil {\n        panic(err)\n    }\n\n    val, err := rdb.Get(ctx, \"key\").Result()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"key\", val)\n\n    val2, err := rdb.Get(ctx, \"key2\").Result()\n    if err == redis.Nil {\n        fmt.Println(\"key2 does not exist\")\n    } else if err != nil {\n        panic(err)\n    } else {\n        fmt.Println(\"key2\", val2)\n    }\n    // Output: key value\n    // key2 does not exist\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Common Redis Operations with go-redis\nDESCRIPTION: Examples of various Redis operations using the go-redis library. Shows how to use SetNX, Sort, ZRangeByScoreWithScores, ZInterStore, Eval, and custom commands with proper syntax and options.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// SET key value EX 10 NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", 10*time.Second).Result()\n\n// SET key value keepttl NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", redis.KeepTTL).Result()\n\n// SORT list LIMIT 0 2 ASC\nvals, err := rdb.Sort(ctx, \"list\", &redis.Sort{Offset: 0, Count: 2, Order: \"ASC\"}).Result()\n\n// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2\nvals, err := rdb.ZRangeByScoreWithScores(ctx, \"zset\", &redis.ZRangeBy{\n    Min: \"-inf\",\n    Max: \"+inf\",\n    Offset: 0,\n    Count: 2,\n}).Result()\n\n// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM\nvals, err := rdb.ZInterStore(ctx, \"out\", &redis.ZStore{\n    Keys: []string{\"zset1\", \"zset2\"},\n    Weights: []int64{2, 3}\n}).Result()\n\n// EVAL \"return {KEYS[1],ARGV[1]}\" 1 \"key\" \"hello\"\nvals, err := rdb.Eval(ctx, \"return {KEYS[1],ARGV[1]}\", []string{\"key\"}, \"hello\").Result()\n\n// custom command\nres, err := rdb.Do(ctx, \"set\", \"key\", \"value\").Result()\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Redis Module\nDESCRIPTION: Commands to initialize a Go module and install go-redis v9 package using go modules.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init github.com/my/repo\ngo get github.com/redis/go-redis/v9\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Tracing and Metrics for go-redis\nDESCRIPTION: This Go code snippet demonstrates how to enable OpenTelemetry tracing and metrics instrumentation for a go-redis client. It imports necessary packages, creates a Redis client, and adds hooks for tracing and metrics.\nSOURCE: https://github.com/redis/go-redis/blob/master/extra/redisotel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/redis/go-redis/v9\"\n    \"github.com/redis/go-redis/extra/redisotel/v9\"\n)\n\nrdb := rdb.NewClient(&rdb.Options{...})\n\n// Enable tracing instrumentation.\nif err := redisotel.InstrumentTracing(rdb); err != nil {\n\tpanic(err)\n}\n\n// Enable metrics instrumentation.\nif err := redisotel.InstrumentMetrics(rdb); err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Prometheus Collector in Go\nDESCRIPTION: Example showing how to create and register a Prometheus collector for a Redis client. This code creates a new Redis client, initializes a collector with namespace and subsystem parameters, and registers it with Prometheus.\nSOURCE: https://github.com/redis/go-redis/blob/master/extra/redisprometheus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient := redis.NewClient(options)\ncollector := redisprometheus.NewCollector(namespace, subsystem, client)\nprometheus.MustRegister(collector)\n```\n\n----------------------------------------\n\nTITLE: Redis URL Connection Example\nDESCRIPTION: Demonstrates connecting to Redis using a URL string that follows the redis URI specification.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/redis/go-redis/v9\"\n)\n\nfunc ExampleClient() *redis.Client {\n    url := \"redis://user:password@localhost:6379/0?protocol=3\"\n    opts, err := redis.ParseURL(url)\n    if err != nil {\n        panic(err)\n    }\n\n    return redis.NewClient(opts)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Redis Cluster URL in Go\nDESCRIPTION: Example of parsing a Redis Cluster URL into ClusterOptions, including authentication, timeouts, and multiple addresses.\nSOURCE: https://github.com/redis/go-redis/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nredis://user:password@localhost:6789?dial_timeout=3&read_timeout=6s&addr=localhost:6790&addr=localhost:6791\n```\n\n----------------------------------------\n\nTITLE: Redis Client with RESP Protocol Configuration\nDESCRIPTION: Shows how to configure the Redis client with specific RESP protocol version (2 or 3) using the protocol option.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    rdb := redis.NewClient(&redis.Options{\n        Addr:     \"localhost:6379\",\n        Password: \"\", // no password set\n        DB:       0,  // use default DB\n        Protocol: 3, // specify 2 for RESP 2 or 3 for RESP 3\n    })\n\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Integration Example\nDESCRIPTION: Shows how to instrument Redis client with OpenTelemetry for tracing and metrics.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/redis/go-redis/v9\"\n    \"github.com/redis/go-redis/extra/redisotel/v9\"\n    \"errors\"\n)\n\nfunc main() {\n    ...\n    rdb := redis.NewClient(&redis.Options{...})\n\n    if err := errors.Join(redisotel.InstrumentTracing(rdb), redisotel.InstrumentMetrics(rdb)); err != nil {\n        log.Fatal(err)\n    }\n```\n\n----------------------------------------\n\nTITLE: Running go-redis Test Suite\nDESCRIPTION: Commands for running tests in the go-redis project. The first command runs the full test suite including starting and stopping containers, while the second is for use when containers are already running.\nSOURCE: https://github.com/redis/go-redis/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test.ci\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker Environment for go-redis Development\nDESCRIPTION: Command to start the Docker containers needed for go-redis development environment. This sets up the necessary Redis infrastructure for testing as specified in the docker-compose.yml file.\nSOURCE: https://github.com/redis/go-redis/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake docker.start\n```\n\n----------------------------------------\n\nTITLE: Running go-redis Tests\nDESCRIPTION: Shell commands for running go-redis tests. Shows the basic command for running all tests with an automatically started Redis server instance.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Running go-redis Tests with Existing Redis Server\nDESCRIPTION: Shell command for running go-redis tests against an already running Redis server. Uses the REDIS_PORT environment variable to specify the port of the existing Redis server.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nREDIS_PORT=9999 go test <your options>\n```\n\n----------------------------------------\n\nTITLE: Running the Redis Key Deletion Example with Go\nDESCRIPTION: Command to execute the Go program that demonstrates how to delete Redis keys without TTL using SCAN and pipelines.\nSOURCE: https://github.com/redis/go-redis/blob/master/example/del-keys-without-ttl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Running the Go-Redis Hash Fields Scanning Example in Shell\nDESCRIPTION: A shell command to execute the Go program that demonstrates scanning Redis hash fields into a struct. The command runs the Go program in the current directory.\nSOURCE: https://github.com/redis/go-redis/blob/master/example/scan-struct/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Running Go Redis Example\nDESCRIPTION: Shell command to execute the Go program for Redis hash field mapping demonstration\nSOURCE: https://github.com/redis/go-redis/blob/master/example/hset-struct/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Running Redis HyperLogLog Example with Go\nDESCRIPTION: Command to execute the Redis HyperLogLog example program. This runs the Go program in the current directory.\nSOURCE: https://github.com/redis/go-redis/blob/master/example/hll/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Running RedisBloom Example\nDESCRIPTION: Command to execute the RedisBloom example program written in Go. Requires RedisBloom module to be installed and configured in Redis server.\nSOURCE: https://github.com/redis/go-redis/blob/master/example/redis-bloom/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Redis Search Configuration Examples\nDESCRIPTION: Demonstrates configuring unstable RESP3 structures and executing search queries with specific dialect versions.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nredis.NewClient(&redis.Options{\n\t\t\tUnstableResp3: true,\n\t\t})\n\nres1, err := client.FTSearchWithArgs(ctx, \"txt\", \"foo bar\", &redis.FTSearchOptions{}).RawResult()\nval1 := client.FTSearchWithArgs(ctx, \"txt\", \"foo bar\", &redis.FTSearchOptions{}).RawVal()\n\nres2, err := rdb.FTSearchWithArgs(ctx,\n\t\t\"idx:bicycle\",\n\t\t\"@pickup_zone:[CONTAINS $bike]\",\n\t\t&redis.FTSearchOptions{\n\t\t\tParams: map[string]interface{}{\n\t\t\t\t\"bike\": \"POINT(-0.1278 51.5074)\",\n\t\t\t},\n\t\t\tDialectVersion: 3,\n\t\t},\n\t).Result()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Redis Server for Local go-redis Testing\nDESCRIPTION: Shell commands to set up a Redis server for local testing with go-redis. Creates symbolic links to the redis-server binary and copies the configuration file to the expected locations.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nln -s /usr/bin/redis-server ./go-redis/testdata/redis/src\ncp ./go-redis/testdata/redis.conf ./go-redis/testdata/redis/\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Server Paths for go-redis Tests\nDESCRIPTION: Code snippet showing how to define paths to the redis-server binary and configuration file in the main_test.go file. These paths are used by go-redis to start a Redis server instance during testing.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\tredisServerBin, _  = filepath.Abs(filepath.Join(\"testdata\", \"redis\", \"src\", \"redis-server\"))\n\tredisServerConf, _ = filepath.Abs(filepath.Join(\"testdata\", \"redis\", \"redis.conf\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Running the Redis Lua scripting example\nDESCRIPTION: Command to execute the Go example for Redis Lua scripting. This runs the main application in the current directory.\nSOURCE: https://github.com/redis/go-redis/blob/master/example/lua-scripting/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Running the Redis Client Example with OpenTelemetry Tracing\nDESCRIPTION: Command to execute the Redis client example that demonstrates OpenTelemetry tracing, which outputs a link to view the generated trace in Uptrace.\nSOURCE: https://github.com/redis/go-redis/blob/master/example/otel/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo run client.go\ntrace: http://localhost:14318/traces/ee029d8782242c8ed38b16d961093b35\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Instrumentation for go-redis\nDESCRIPTION: This command installs the OpenTelemetry instrumentation package for go-redis using the go get command.\nSOURCE: https://github.com/redis/go-redis/blob/master/extra/redisotel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/redis/go-redis/extra/redisotel/v9\n```\n\n----------------------------------------\n\nTITLE: Redis Identity Verification Configuration\nDESCRIPTION: Shows how to disable client identity verification during connection setup.\nSOURCE: https://github.com/redis/go-redis/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nrdb := redis.NewClient(&redis.Options{\n    Addr:            \"localhost:6379\",\n    Password:        \"\",\n    DB:              0,\n    DisableIdentity: true, // Disable set-info on connect\n})\n```\n\n----------------------------------------\n\nTITLE: Using OpenTelemetry Sampler in Go-Redis\nDESCRIPTION: Example of using an OpenTelemetry sampler to control span creation behavior in go-redis, specifically using ParentBased(NeverSample()) to drop orphan spans.\nSOURCE: https://github.com/redis/go-redis/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nParentBased(NeverSample())\n```\n\n----------------------------------------\n\nTITLE: Testing Redis Examples Command\nDESCRIPTION: Commands for testing Redis examples locally. Requires Redis server running on port 6379.\nSOURCE: https://github.com/redis/go-redis/blob/master/doctests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test\ngo test filename.go\n```\n\n----------------------------------------\n\nTITLE: Listing Available Automation Tasks for go-redis\nDESCRIPTION: Command to list all available automation tasks for the go-redis project using the invoke tool. This helps contributors discover available development commands.\nSOURCE: https://github.com/redis/go-redis/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninvoke -l\n```\n\n----------------------------------------\n\nTITLE: Starting Redis and Uptrace Services with Docker Compose\nDESCRIPTION: Command to start the required services (Redis and Uptrace) using Docker Compose in detached mode.\nSOURCE: https://github.com/redis/go-redis/blob/master/example/otel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Checking Uptrace Service Logs\nDESCRIPTION: Command to verify that the Uptrace service is running properly by checking its logs through Docker Compose.\nSOURCE: https://github.com/redis/go-redis/blob/master/example/otel/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose logs uptrace\n```\n\n----------------------------------------\n\nTITLE: Cloning the go-redis Repository and Navigating to Example Directory\nDESCRIPTION: Commands to clone the go-redis repository and navigate to the OpenTelemetry example directory.\nSOURCE: https://github.com/redis/go-redis/blob/master/example/otel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/redis/go-redis.git\ncd example/otel\n```"
  }
]