[
  {
    "owner": "foundry-rs",
    "repo": "book",
    "content": "TITLE: Fuzz Testing Merkle Root Implementation Against TypeScript\nDESCRIPTION: This code snippet illustrates a fuzz test that evaluates the Merkle root generation in Solidity against a reference TypeScript implementation. It constructs a command using the `ffi` cheatcode, executes it, and compares the generated roots for correctness.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/differential-ffi-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMerkleRootMatchesJSImplementationFuzzed(bytes32[] memory leaves) public {\n    vm.assume(leaves.length > 1);\n    bytes memory packed = abi.encodePacked(leaves);\n    string[] memory runJsInputs = new string[](8);\n\n    // Build ffi command string\n    runJsInputs[0] = 'npm';\n    runJsInputs[1] = '--prefix';\n    runJsInputs[2] = 'differential_testing/scripts/';\n    runJsInputs[3] = '--silent';\n    runJsInputs[4] = 'run';\n    runJsInputs[5] = 'generate-root-cli';\n    runJsInputs[6] = leaves.length.toString();\n    runJsInputs[7] = packed.toHexString();\n\n    // Run command and capture output\n    bytes memory jsResult = vm.ffi(runJsInputs);\n    bytes32 jsGeneratedRoot = abi.decode(jsResult, (bytes32));\n\n    // Calculate root using Murky\n    bytes32 murkyGeneratedRoot = m.getRoot(leaves);\n    assertEq(murkyGeneratedRoot, jsGeneratedRoot);\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Foundry Project\nDESCRIPTION: Compiles the Foundry project using the 'forge build' command. This step is necessary before running tests or deploying contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/first-steps.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/hello_foundry/forge-build:all}}\n```\n\n----------------------------------------\n\nTITLE: Building Smart Contracts - Forge - Shell\nDESCRIPTION: This snippet compiles the smart contracts in the 'counter' repository using the Forge tool. It indicates the use of the Solidity compiler (Solc) version 0.8.28 and provides feedback on the success of the compilation process. Users must ensure that the smart contract files are correctly placed in the repository before running this command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ forge build\n```\n\nLANGUAGE: console\nCODE:\n```\n[⠊] Compiling...\n[⠔] Compiling 27 files with Solc 0.8.28\n[⠒] Solc 0.8.28 finished in 452.13ms\nCompiler run successful!\n```\n\n----------------------------------------\n\nTITLE: Forking Mainnet with Anvil in Foundry\nDESCRIPTION: This command uses Anvil to create a fork of the Ethereum mainnet using an Infura endpoint. It sets up a local testnet with 10 pre-funded accounts for testing purposes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/forking-mainnet-with-cast-anvil.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nanvil --fork-url https://mainnet.infura.io/v3/$INFURA_KEY\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Foundry Project\nDESCRIPTION: Creates a new Foundry project using the 'forge init' command. This sets up the initial project structure and files.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/first-steps.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/hello_foundry/forge-init:command}}\n```\n\n----------------------------------------\n\nTITLE: Installing Foundryup via Curl\nDESCRIPTION: Downloads and installs the Foundryup installer script using curl. This is the recommended way to install Foundry tools.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\n```\n\n----------------------------------------\n\nTITLE: Reproducing DSChief Vulnerability with Fixtures\nDESCRIPTION: Example of using fixtures to reproduce the DSChief vulnerability in fuzz testing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fuzz-testing.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction etch(address yay) public returns (bytes32 slate) {\n    bytes32 hash = keccak256(abi.encodePacked(yay));\n\n    slates[hash] = yay;\n\n    return hash;\n}\n\nfunction voteSlate(bytes32 slate) public {\n    uint weight = deposits[msg.sender];\n    subWeight(weight, votes[msg.sender]);\n    votes[msg.sender] = slate;\n    addWeight(weight, votes[msg.sender]);\n}\n\naddress[] public fixtureYay = [\n    makeAddr(\"yay1\"),\n    makeAddr(\"yay2\"),\n    makeAddr(\"yay3\")\n];\n\nbytes32[] public fixtureSlate = [\n    keccak256(abi.encodePacked(makeAddr(\"yay1\"))),\n    keccak256(abi.encodePacked(makeAddr(\"yay2\"))),\n    keccak256(abi.encodePacked(makeAddr(\"yay3\")))\n];\n```\n\n----------------------------------------\n\nTITLE: Initial Unit Test in Solidity\nDESCRIPTION: A basic unit test for a Safe contract that checks withdrawal of 1 ether.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fuzz-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n{{#include ../../projects/fuzz_testing/test/Safe.t.sol.1:all}}\n```\n\n----------------------------------------\n\nTITLE: Running Smart Contract Deployment Script - Forge - Shell\nDESCRIPTION: This command executes a deployment script located at 'script/Counter.s.sol'. It compiles the necessary files before running the script, which handles deployment on the Ethereum network or similar blockchain platforms. Users should confirm that the script file is correctly configured to avoid runtime errors.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ forge script script/Counter.s.sol\n```\n\nLANGUAGE: console\nCODE:\n```\n[⠊] Compiling...\nNo files changed, compilation skipped\nScript ran successfully.\nGas used: 109037\n\nIf you wish to simulate on-chain transactions pass a RPC URL.\n```\n\n----------------------------------------\n\nTITLE: Basic expectEmit Usage Without Checking Emitter\nDESCRIPTION: Example of using expectEmit to verify an ERC20 token emits a Transfer event, without checking which address emitted the event.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-emit.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed from, address indexed to, uint256 amount);\n\nfunction testERC20EmitsTransfer() public {\n    vm.expectEmit();\n\n    // We emit the event we expect to see.\n    emit MyToken.Transfer(address(this), address(1), 10);\n\n    // We perform the call.\n    myToken.transfer(address(1), 10);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Forge Binary Integrity\nDESCRIPTION: Verifies the integrity and provenance of Forge binary using GitHub artifact attestations to ensure it was built and distributed from the official Foundry repository.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh attestation verify --owner foundry-rs $(which forge)\n```\n\n----------------------------------------\n\nTITLE: Using expectPartialRevert with Custom Errors in Solidity\nDESCRIPTION: Example of using expectPartialRevert to test a function that reverts with a custom error, ignoring the error's arguments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-revert.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction count() public {\n    revert WrongNumber(0);\n}\n\nvm.expectPartialRevert(Counter.WrongNumber.selector);\ncounter.count();\n```\n\n----------------------------------------\n\nTITLE: Expecting Token Transfer Call in Solidity Test\nDESCRIPTION: This example demonstrates how to use expectCall to expect a single call to the transfer function of a token contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-call.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\naddress alice = makeAddr(\"alice\");\nemit log_address(alice);\nvm.expectCall(\n  address(token), abi.encodeCall(token.transfer, (alice, 10))\n);\ntoken.transfer(alice, 10);\n// [PASS]\n```\n\n----------------------------------------\n\nTITLE: Complex WriteJson Usage Example\nDESCRIPTION: Advanced example demonstrating nested object updates and deep JSON path navigation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/write-json.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory jsonObj = '{ \"boolean\": true, \"number\": 342, \"obj1\": { \"foo\": \"bar\" } }';\nvm.writeJson(jsonObj, \"./output/example2.json\");\n\nstring memory jsonObj2 = '{ \"aNumber\": 123, \"obj2\": {} }';\nvm.writeJson(jsonObj2, \"./output/example2.json\", \".obj1\");\n\nstring memory jsonObj3 = '{ \"aNumber\": 123, \"obj3\": { \"veryDeep\": 3 } }';\nvm.writeJson(jsonObj3, \"./output/example2.json\", \".obj1.obj2\");\n\nvm.writeJson(\"13371337\", \"./output/example2.json\", \"..veryDeep\");\n```\n\n----------------------------------------\n\nTITLE: Custom Remapping in foundry.toml\nDESCRIPTION: Example of configuring custom dependency remappings in foundry.toml configuration file\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/dependencies.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nremappings = [\n    \"@solady-utils/=lib/solady/src/utils/\",\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing and Testing Signature Verification in Solidity Smart Contracts\nDESCRIPTION: Comprehensive example showing a contract with signature verification and its corresponding test case using Foundry's vm.sign function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract SigningExample is Ownable {\n    using ECDSA for bytes32;\n\n    address public systemAddress;\n\n    function setSystemAddress(address _address) external onlyOwner {\n        systemAddress = _address;\n    }\n\n    function purchase(uint256 _amount, string calldata _nonce, bytes calldata _signature) external payable {\n        require(isValidSignature(\n            systemAddress,\n            keccak256(abi.encodePacked(msg.sender, _amount, _nonce)),\n            _signature\n            ), \"Invalid Signature\"\n        );\n\n        // mint tokens\n    }\n\n    function isValidSignature(address _systemAddress, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        require(_systemAddress != address(0), \"Missing System Address\");\n\n        bytes32 signedHash = hash.toEthSignedMessageHash();\n        return signedHash.recover(signature) == _systemAddress;\n    }\n\n}\n\ncontract SigningExampleTest is Test {\n    using ECDSA for bytes32;\n\n    SigningExample public signingExample;\n\n    uint256 internal userPrivateKey;\n    uint256 internal signerPrivateKey;\n\n    function setUp() public {\n        signingExample = new SigningExample();\n\n        userPrivateKey = 0xa11ce;\n        signerPrivateKey = 0xabc123;\n\n        address signer = vm.addr(signerPrivateKey);\n        signingExample.setSystemAddress(signer);\n    }\n\n    function testPurchase() public {\n        address user = vm.addr(userPrivateKey);\n        address signer = vm.addr(signerPrivateKey);\n\n        uint256 amount = 2;\n        string memory nonce = 'QSfd8gQE4WYzO29';\n\n        vm.startPrank(signer);\n        bytes32 digest = keccak256(abi.encodePacked(user, amount, nonce)).toEthSignedMessageHash();\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(signerPrivateKey, digest);\n        bytes memory signature = abi.encodePacked(r, s, v); // note the order here is different from line above.\n        vm.stopPrank();\n\n        vm.startPrank(user);\n        // Give the user some ETH, just for good measure\n        vm.deal(user, 1 ether);\n\n        signingExample.purchase(\n            amount,\n            nonce,\n            signature\n        );\n        vm.stopPrank();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Details using eth_getTransactionByHash\nDESCRIPTION: This example shows how to fetch transaction details using the eth_getTransactionByHash method with a specific transaction hash. The command queries a localhost Ethereum node for complete information about the specified transaction.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast rpc eth_getTransactionByHash 0x2642e960d3150244e298d52b5b0f024782253e6d0b2c9a01dd4858f7b4665a3f\n```\n\n----------------------------------------\n\nTITLE: Running a Contract Script with Broadcasting\nDESCRIPTION: This snippet demonstrates how to run a smart contract script called 'BroadcastTest' which broadcasts transactions on-chain. It specifies the signature to call the 'deploy()' function and includes verbosity flags for detailed logging.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-script.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nforge script ./test/Broadcast.t.sol --tc BroadcastTest --sig \"deploy()\" \\\n    -vvv --fork-url $SEPOLIA_RPC_URL\n```\n\n----------------------------------------\n\nTITLE: Forge CLI Usage\nDESCRIPTION: This snippet displays the usage instructions for the `forge` command-line interface. It lists all available subcommands with short descriptions and available options like `--help` and `--version`. This helps users understand the functionalities offered by Forge.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/forge.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge --help\nUsage: forge <COMMAND>\n\nCommands:\n  bind               Generate Rust bindings for smart contracts\n  build              Build the project's smart contracts [aliases: b, compile]\n  cache              Manage the Foundry cache\n  clean              Remove the build artifacts and cache directories [aliases: cl]\n  clone              Clone a contract from Etherscan\n  completions        Generate shell completions script [aliases: com]\n  config             Display the current config [aliases: co]\n  coverage           Generate coverage reports\n  create             Deploy a smart contract [aliases: c]\n  debug              Debugs a single smart contract as a script [aliases: d]\n  doc                Generate documentation for the project\n  flatten            Flatten a source file and all of its imports into one file [aliases: f]\n  fmt                Format Solidity source files\n  geiger             Detects usage of unsafe cheat codes in a project and its dependencies\n  generate           Generate scaffold files\n  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]\n  help               Print this message or the help of the given subcommand(s)\n  init               Create a new Forge project\n  inspect            Get specialized information about a smart contract [aliases: in]\n  install            Install one or multiple dependencies [aliases: i]\n  remappings         Get the automatically inferred remappings for the project [aliases: re]\n  remove             Remove one or multiple dependencies [aliases: rm]\n  script             Run a smart contract as a script, building transactions that can be sent onchain\n  selectors          Function selector utilities [aliases: se]\n  snapshot           Create a snapshot of each test's gas usage [aliases: s]\n  test               Run the project's tests [aliases: t]\n  tree               Display a tree visualization of the project's dependency graph [aliases: tr]\n  update             Update one or multiple dependencies [aliases: u]\n  verify-bytecode    Verify the deployed bytecode against its source [aliases: vb]\n  verify-check       Check verification status on Etherscan [aliases: vc]\n  verify-contract    Verify smart contracts on Etherscan [aliases: v]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\nFind more information in the book: http://book.getfoundry.sh/reference/forge/forge.html\n```\n\n----------------------------------------\n\nTITLE: Writing a Simple Test Case in Solidity using Forge\nDESCRIPTION: Demonstrates how to write a simple test case function prefixed with 'test' to be run as a test case by Forge.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/writing-tests.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testNumberIs42() public {\n    assertEq(testNumber, 42);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Forge Standard Library Test Contract in Solidity\nDESCRIPTION: Shows how to import the Forge Standard Library's Test contract, which provides basic logging and assertion functionality for writing tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/writing-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"forge-std/Test.sol\";\n```\n\n----------------------------------------\n\nTITLE: Deploying a Contract on Polygon\nDESCRIPTION: This command shows how to deploy a smart contract script called 'MyScript' on the Polygon network. It includes options for specifying the chain ID, RPC URL, Etherscan API key, and verification settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-script.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nforge script script/NFT.s.sol:MyScript --chain-id 137 --rpc-url $RPC_URL \\\n    --etherscan-api-key $POLYGONSCAN_API_KEY --verifier-url https://api.polygonscan.com/api \\\n    --broadcast --verify -vvvv\n```\n\n----------------------------------------\n\nTITLE: Using assertTrue in Solidity\nDESCRIPTION: The assertTrue functions are used in Solidity to assert that a given boolean statement (data) is true. The first function takes a boolean and the second takes a boolean with an optional error message. It helps ensure that certain conditions hold during the execution of smart contracts. In case the assertion fails, an error message can be included for debugging purposes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertTrue.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assertTrue(bool data) internal;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assertTrue(bool data, string memory err) internal;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nbool success = contract.fun();\nassertTrue(success);\n```\n\n----------------------------------------\n\nTITLE: Implementing setUp Function in Solidity Test\nDESCRIPTION: Shows how to implement the setUp function, which is invoked before each test case is run to set up the initial state.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/writing-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setUp() public {\n    testNumber = 42;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Initial Unit Test with Forge\nDESCRIPTION: Shell command to run the unit test using Forge and its output showing a passing test.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fuzz-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n{{#include ../output/fuzz_testing/forge-test-no-fuzz:all}}\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Forked Environment - Bash\nDESCRIPTION: This snippet illustrates how to execute all tests using the Forge framework in a forked Ethereum environment by providing an RPC URL.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fork-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge test --fork-url <your_rpc_url>\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Foundry\nDESCRIPTION: Executes the test suite for the Foundry project using the 'forge test' command. This runs all tests in the project and displays the results.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/first-steps.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/hello_foundry/forge-test:all}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Foundry Project with Custom Template\nDESCRIPTION: Creates a new Foundry project using a custom template specified by the --template flag. This example uses the forge-template from the foundry-rs GitHub repository.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/creating-a-new-project.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ forge init --template https://github.com/foundry-rs/forge-template hello_template\n```\n\n----------------------------------------\n\nTITLE: Multi-chain Deployment Script\nDESCRIPTION: Solidity script for deploying contracts to multiple chains using forking cheatcodes\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/deploying.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\ncontract CounterScript is Script {\n    function run() public {\n        vm.createSelectFork(\"sepolia\");\n        vm.startBroadcast();\n        new Counter();\n        vm.stopBroadcast();\n\n        vm.createSelectFork(\"base-sepolia\");\n        vm.startBroadcast();\n        new Counter();\n        vm.stopBroadcast();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Anvil with Ethereum Mainnet Fork\nDESCRIPTION: This snippet demonstrates how to start Anvil with a fork of the Ethereum mainnet. It shows the command to run and the resulting output, which includes available accounts, private keys, wallet information, fork details, and network settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/anvil/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ anvil --fork-url https://eth.merkle.io\n\n\n                             _   _\n                            (_) | |\n      __ _   _ __   __   __  _  | |\n     / _` | | '_ \\  \\ \\ / / | | | |\n    | (_| | | | | |  \\ V /  | | | |\n     \\__,_| |_| |_|   \\_/   |_| |_|\n\n    0.2.0 (c4fcf12 2024-12-12T00:23:45.094165202Z)\n    https://github.com/foundry-rs/foundry\n\nAvailable Accounts\n==================\n\n(0) 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (10000.000000000000000000 ETH)\n(1) 0x70997970C51812dc3A010C7d01b50e0d17dc79C8 (10000.000000000000000000 ETH)\n(2) 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC (10000.000000000000000000 ETH)\n(3) 0x90F79bf6EB2c4f870365E785982E1f101E93b906 (10000.000000000000000000 ETH)\n(4) 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65 (10000.000000000000000000 ETH)\n(5) 0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc (10000.000000000000000000 ETH)\n(6) 0x976EA74026E726554dB657fA54763abd0C3a0aa9 (10000.000000000000000000 ETH)\n(7) 0x14dC79964da2C08b23698B3D3cc7Ca32193d9955 (10000.000000000000000000 ETH)\n(8) 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f (10000.000000000000000000 ETH)\n(9) 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720 (10000.000000000000000000 ETH)\n\nPrivate Keys\n==================\n\n(0) 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\n(1) 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d\n(2) 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a\n(3) 0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6\n(4) 0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a\n(5) 0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba\n(6) 0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e\n(7) 0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356\n(8) 0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97\n(9) 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6\n\nWallet\n==================\nMnemonic:          test test test test test test test test test test test junk\nDerivation path:   m/44'/60'/0'/0/\n\n\nFork\n==================\nEndpoint:       https://eth.merkle.io\nBlock number:   21387064\nBlock hash:     0x904aee789b82ac0412448bc2ea9bb3774d10c2dae4a0e5b7f6451ac2ecd0787a\nChain ID:       1\n\nBase Fee\n==================\n\n26049293674\n\nGas Limit\n==================\n\n30000000\n\nGenesis Timestamp\n==================\n\n1734014216\n\nListening on 127.0.0.1:8545\n```\n\n----------------------------------------\n\nTITLE: Resuming a Failed Script Execution\nDESCRIPTION: This snippet illustrates how to resume a previously failed contract script execution. It modifies the previous deploy command by removing the broadcast option and adding the resume flag.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-script.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nforge script script/NFT.s.sol:MyScript --chain-id 137 --rpc-url $RPC_URL \\\n    --etherscan-api-key $POLYGONSCAN_API_KEY --verifier-url https://api.polygonscan.com/api \\\n    --verify -vvvv --resume\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Forge Standard Library in Solidity Tests\nDESCRIPTION: Demonstrates how to import the Test contract from Forge Std and inherit from it in a test contract. This gives access to various testing utilities and cheatcodes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/forge-std.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Test} from \"forge-std/Test.sol\";\n\ncontract ContractTest is Test { ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Harness for Internal Functions in Solidity\nDESCRIPTION: Demonstrates how to create a test harness contract that inherits from the contract under test to expose internal functions for testing. The harness follows the naming convention 'exposed_<function_name>' to clearly indicate test-only methods.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/best-practices.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n// file: src/MyContract.sol\ncontract MyContract {\n  function myInternalMethod() internal returns (uint) {\n    return 42;\n  }\n}\n\n// file: test/MyContract.t.sol\nimport {MyContract} from \"src/MyContract.sol\";\n\ncontract MyContractHarness is MyContract {\n  // Deploy this contract then call this method to test `myInternalMethod`.\n  function exposed_myInternalMethod() external returns (uint) {\n    return myInternalMethod();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forge Test Command Help Output\nDESCRIPTION: Comprehensive help output for the 'forge test' command, displaying all available options categorized by functionality including display, test, filtering, EVM, fork configuration, executor environment, cache, build, and linker options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/test.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge test [OPTIONS] [PATH]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDisplay options:\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n  -q, --quiet\n          Do not print log messages\n\n      --json\n          Format log messages as JSON\n\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n  -s, --suppress-successful-traces\n          Suppress successful test traces and show only traces for failures\n          \n          [env: FORGE_SUPPRESS_SUCCESSFUL_TRACES=]\n\n      --junit\n          Output test results as JUnit XML report\n\n  -l, --list\n          List tests instead of running them\n\n      --show-progress\n          Show test execution progress\n\n      --summary\n          Print test summary table\n\n      --detailed\n          Print detailed test summary table\n\nTest options:\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\n      --debug\n          Run a single test in the debugger.\n          \n          The matching test will be opened in the debugger regardless of the\n          outcome of the test.\n          \n          If the matching test is a fuzz test, then it will open the debugger on\n          the first failure case. If the fuzz test does not fail, it will open\n          the debugger on the last fuzz case.\n\n      --flamegraph\n          Generate a flamegraph for a single test. Implies `--decode-internal`.\n          \n          A flame graph is used to visualize which functions or operations\n          within the smart contract are consuming the most gas overall in a\n          sorted manner.\n\n      --flamechart\n          Generate a flamechart for a single test. Implies `--decode-internal`.\n          \n          A flame chart shows the gas usage over time, illustrating when each\n          function is called (execution order) and how much gas it consumes at\n          each point in the timeline.\n\n      --decode-internal\n          Identify internal functions in traces.\n          \n          This will trace internal functions and decode stack parameters.\n          \n          Parameters stored in memory (such as bytes or arrays) are currently\n          decoded only when a single function is matched, similarly to\n          `--debug`, for performance reasons.\n\n      --dump <PATH>\n          Dumps all debugger steps to file\n\n      --gas-report\n          Print a gas report\n          \n          [env: FORGE_GAS_REPORT=]\n\n      --gas-snapshot-check <GAS_SNAPSHOT_CHECK>\n          Check gas snapshots against previous runs\n          \n          [env: FORGE_SNAPSHOT_CHECK=]\n          [possible values: true, false]\n\n      --gas-snapshot-emit <GAS_SNAPSHOT_EMIT>\n          Enable/disable recording of gas snapshot results\n          \n          [env: FORGE_SNAPSHOT_EMIT=]\n          [possible values: true, false]\n\n      --allow-failure\n          Exit with code 0 even if a test fails\n          \n          [env: FORGE_ALLOW_FAILURE=]\n\n      --fail-fast\n          Stop running tests after the first failure\n\n      --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n      --fuzz-seed <FUZZ_SEED>\n          Set seed used to generate randomness during your fuzz runs\n\n      --fuzz-runs <RUNS>\n          [env: FOUNDRY_FUZZ_RUNS=]\n\n      --fuzz-timeout <TIMEOUT>\n          Timeout for each fuzz run in seconds\n          \n          [env: FOUNDRY_FUZZ_TIMEOUT=]\n\n      --fuzz-input-file <FUZZ_INPUT_FILE>\n          File to rerun fuzz failures from\n\n      --rerun\n          Re-run recorded test failures from last run. If no failure recorded\n          then regular test run is performed\n\n  [PATH]\n          The contract file you want to test, it's a shortcut for --match-path\n\nTest filtering:\n  --match-test <REGEX>\n          Only run test functions matching the specified regex pattern\n          \n          [aliases: mt]\n\n  --no-match-test <REGEX>\n          Only run test functions that do not match the specified regex pattern\n          \n          [aliases: nmt]\n\n  --match-contract <REGEX>\n          Only run tests in contracts matching the specified regex pattern\n          \n          [aliases: mc]\n\n  --no-match-contract <REGEX>\n          Only run tests in contracts that do not match the specified regex\n          pattern\n          \n          [aliases: nmc]\n\n  --match-path <GLOB>\n          Only run tests in source files matching the specified glob pattern\n          \n          [aliases: mp]\n\n  --no-match-path <GLOB>\n          Only run tests in source files that do not match the specified glob\n          pattern\n          \n          [aliases: nmp]\n\n  --no-match-coverage <REGEX>\n          Only show coverage for files that do not match the specified regex\n          pattern\n          \n          [aliases: nmco]\n\nEVM options:\n  -f, --fork-url <URL>\n          Fetch state over a remote endpoint instead of starting from an empty\n          state.\n          \n          If you want to fetch state from a specific block number, see\n          --fork-block-number.\n          \n          [aliases: rpc-url]\n\n      --fork-block-number <BLOCK>\n          Fetch state from a specific block number over a remote endpoint.\n          \n          See --fork-url.\n\n      --fork-retries <RETRIES>\n          Number of retries.\n          \n          See --fork-url.\n\n      --fork-retry-backoff <BACKOFF>\n          Initial retry backoff on encountering errors.\n          \n          See --fork-url.\n\n      --no-storage-caching\n          Explicitly disables the use of RPC caching.\n          \n          All storage slots are read entirely from the endpoint.\n          \n          This flag overrides the project's configuration file.\n          \n          See --fork-url.\n\n      --initial-balance <BALANCE>\n          The initial balance of deployed test contracts\n\n      --sender <ADDRESS>\n          The address which will be executing tests/scripts\n\n      --ffi\n          Enable the FFI cheatcode\n\n      --always-use-create-2-factory\n          Use the create 2 factory in all cases including tests and\n          non-broadcasting scripts\n\n      --create2-deployer <ADDRESS>\n          The CREATE2 deployer address to use, this will override the one in the\n          config\n\nFork config:\n  --compute-units-per-second <CUPS>\n          Sets the number of assumed available compute units per second for this\n          provider\n          \n          default value: 330\n          \n          See also --fork-url and\n          <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>\n\n  --no-rpc-rate-limit\n          Disables rate limiting for this node's provider.\n          \n          See also --fork-url and\n          <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>\n          \n          [aliases: no-rate-limit]\n\nExecutor environment config:\n  --code-size-limit <CODE_SIZE>\n          EIP-170: Contract code size limit in bytes. Useful to increase this\n          because of tests. By default, it is 0x6000 (~25kb)\n\n  --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [aliases: chain-id]\n\n  --gas-price <GAS_PRICE>\n          The gas price\n\n  --block-base-fee-per-gas <FEE>\n          The base fee in a block\n          \n          [aliases: base-fee]\n\n  --tx-origin <ADDRESS>\n          The transaction origin\n\n  --block-coinbase <ADDRESS>\n          The coinbase of the block\n\n  --block-timestamp <TIMESTAMP>\n          The timestamp of the block\n\n  --block-number <BLOCK>\n          The block number\n\n  --block-difficulty <DIFFICULTY>\n          The block difficulty\n\n  --block-prevrandao <PREVRANDAO>\n          The block prevrandao value. NOTE: Before merge this field was mix_hash\n\n  --block-gas-limit <GAS_LIMIT>\n          The block gas limit\n          \n          [aliases: gas-limit]\n\n  --memory-limit <MEMORY_LIMIT>\n          The memory limit per EVM execution in bytes. If this limit is\n          exceeded, a `MemoryLimitOOG` result is thrown.\n          \n          The default is 128MiB.\n\n  --disable-block-gas-limit\n          Whether to disable the block gas limit checks\n          \n          [aliases: no-gas-limit]\n\n  --isolate\n          Whether to enable isolation of calls. In isolation mode all top-level\n          calls are executed as a separate transaction in a separate EVM\n          context, enabling more precise gas accounting and transaction state\n          changes\n\n  --odyssey\n          Whether to enable Odyssey features\n\nCache options:\n  --force\n          Clear the cache and artifacts folder and recompile\n\nBuild options:\n  --no-cache\n          Disable the cache\n\n  --dynamic-test-linking\n          Enable dynamic test linking\n\n  --eof\n          Whether to compile contracts to EOF bytecode\n\n  --skip <SKIP>...\n          Skip building files whose names contain the given filter.\n          \n          `test` and `script` are aliases for `.t.sol` and `.s.sol`.\n\nLinker options:\n  --libraries <LIBRARIES>\n          Set pre-linked libraries\n          \n          [env: DAPP_LIBRARIES=]\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands with FFI in Solidity\nDESCRIPTION: This snippet demonstrates how to use the `ffi` cheatcode to execute shell commands for reading an address from a file in a Solidity test contract. It captures the command's output and decodes it into an address type for use in subsequent test logic.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/differential-ffi-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Test} from \"forge-std/Test.sol\";\n\ncontract TestContract is Test {\n\n    function testMyFFI () public {\n        string[] memory cmds = new string[](2);\n        cmds[0] = \"cat\";\n        cmds[1] = \"address.txt\"; // assume contains abi-encoded address.\n        bytes memory result = vm.ffi(cmds);\n        address loadedAddress = abi.decode(result, (address));\n        // Do something with the address\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading String Array Environment Variable\nDESCRIPTION: Example of reading an array of strings from an environment variable using a delimiter, with value comparison using keccak256 hashing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-string.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"STRING_VALUES\";\nstring memory delimiter = \"|\";\nstring[2] memory expected = [\n    \"hello, world!\",\n    \"0x7109709ECfa91a80626fF3989D68f67F5b1DD12D\"\n];\nstring[] memory output = vm.envString(key, delimiter);\nfor (uint i = 0; i < expected.length; ++i) {\n    assert(keccak256(abi.encodePacked((output[i]))) == keccak256(abi.encodePacked((expected[i]))));\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Events in a Single Call\nDESCRIPTION: Example demonstrating how to verify that multiple events are emitted in the correct sequence during a single contract call, including selective topic checking.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-emit.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testERC20EmitsBatchTransfer() public {\n    // We declare multiple expected transfer events\n    for (uint256 i = 0; i < users.length; i++) {\n        // Here we use the longer signature for demonstration purposes. This call checks\n        // topic0 (always checked), topic1 (true), topic2 (true), NOT topic3 (false), and data (true).\n        vm.expectEmit(true, true, false, true);\n        emit Transfer(address(this), users[i], 10);\n    }\n\n    // We also expect a custom `BatchTransfer(uint256 numberOfTransfers)` event.\n    vm.expectEmit(false, false, false, true);\n    emit BatchTransfer(users.length);\n\n    // We perform the call.\n    myToken.batchTransfer(users, 10);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vm.sol for Cheatcodes Interface\nDESCRIPTION: This code snippet imports the `Vm.sol` contract from the Forge Standard Library, providing access to the cheatcodes interface for testing smart contracts within the Foundry environment. This allows developers to simulate various blockchain states and interactions during testing. No external dependencies beyond Forge Std are required.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/README.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Vm} from \"forge-std/Vm.sol\";\n```\n\n----------------------------------------\n\nTITLE: Cast Transaction Command Usage and Options\nDESCRIPTION: Detailed help output showing all available options and arguments for the cast tx command, including RPC configuration, display options, and verbosity levels\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast tx [OPTIONS] <TX_HASH> [FIELD]\n\nArguments:\n  <TX_HASH>\n          The transaction hash\n\n  [FIELD]\n          If specified, only get the given field of the transaction. If \"raw\",\n          the RLP encoded transaction will be printed\n\nOptions:\n      --raw\n          Print the raw RLP encoded transaction\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring Fine-Tuned Optimizer Settings\nDESCRIPTION: Example of configuring detailed optimizer settings in foundry.toml, including Yul optimizer and constant optimizer flags.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default.optimizer_details]\nconstantOptimizer = true\nyul = true\n\n[profile.default.optimizer_details.yulDetails]\nstackAllocation = true\noptimizerSteps = 'dhfoDgvulfnTUtnIf'\n```\n\n----------------------------------------\n\nTITLE: Calling a Function on a Contract with Cast - Shell\nDESCRIPTION: This snippet demonstrates how to use the 'cast call' command to interact with a smart contract. The example shows calling a function that retrieves the balance of an address, expecting an output in uint256 format. Prerequisite: Ethereum node or endpoint to perform RPC calls.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast call 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 \\ \n  \"balanceOf(address)(uint256)\" 0x...\n```\n\n----------------------------------------\n\nTITLE: Testing Revert Conditions in Solidity using Forge\nDESCRIPTION: Illustrates how to test revert conditions using the expectRevert cheatcode and naming convention for clarity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/writing-tests.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testCannotSubtract43() public {\n    vm.expectRevert(stdError.arithmeticError);\n    testNumber -= 43;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Test Structure in Solidity using Forge\nDESCRIPTION: Demonstrates the basic structure of a test contract in Solidity using Forge, including the setUp function and a simple test case.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/writing-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"forge-std/Test.sol\";\n\ncontract ContractBTest is Test {\n    uint256 testNumber;\n\n    function setUp() public {\n        testNumber = 42;\n    }\n\n    function testNumberIs42() public {\n        assertEq(testNumber, 42);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cast Bind Usage and Options Documentation\nDESCRIPTION: Comprehensive CLI usage documentation for the cast bind command, detailing arguments, options for crate generation, Etherscan integration, and logging configurations\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/bind.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast bind [OPTIONS] <PATH_OR_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Asserting Invariants using Multiple Jobs in Solidity\nDESCRIPTION: This Solidity code snippet illustrates how to use jobs to group multiple invariant assertions. Each job contains a function that calls `assertInvariants`, allowing several invariant checks to be run simultaneously in separate contexts. No specific dependencies are needed aside from the Solidity language environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction invariant_job1() public {\n    assertInvariants();\n}\n\nfunction invariant_job2() public {\n    assertInvariants();\n}\n\nfunction assertInvariants() internal {\n    assertEq(val1, val2);\n    assertEq(val3, val4);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Deposit Handler Function in Solidity\nDESCRIPTION: A basic handler function that mints assets to the handler contract, approves the token contract to spend those assets, and then deposits them into the token contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit(uint256 assets) public virtual {\n    asset.mint(address(this), assets);\n\n    asset.approve(address(token), assets);\n\n    uint256 shares = token.deposit(assets, address(this));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mainnet Fork with Latest Block in Foundry\nDESCRIPTION: Example of how to create and select a new mainnet fork using the latest block, then asserting the current block number.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-fork.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 forkId = vm.createFork(MAINNET_RPC_URL);\nvm.selectFork(forkId);\n\nassertEq(block.number, 15_171_037); // as of time of writing, 2022-07-19 04:55:27 UTC\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry Docker Image\nDESCRIPTION: Commands for pulling the official Foundry Docker image or building it locally from source.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/installation.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull ghcr.io/foundry-rs/foundry:latest\ndocker build -t foundry .\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-Level Assertions in Handler Functions\nDESCRIPTION: Handler function with assertions to verify the ERC-20 balance decrements by the correct amount during deposit operations, combining state changes with immediate validation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit(uint256 assets) public virtual {\n    asset.mint(address(this), assets);\n\n    asset.approve(address(token), assets);\n\n    uint256 beforeBalance = asset.balanceOf(address(this));\n\n    uint256 shares = token.deposit(assets, address(this));\n\n    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);\n\n    sumBalanceOf += shares;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Running Specific Tests in Forge\nDESCRIPTION: The snippet demonstrates how to run only a subset of tests that match specific criteria using various `--match` options with the `forge test` command. This is useful for selective test execution.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-test.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nforge test --match-path test/Contract.t.sol --match-contract BigTest \\\n  --match-test \"testRevert*\"\n```\n\n----------------------------------------\n\nTITLE: Forge Build Command Usage and Options\nDESCRIPTION: This snippet provides the complete usage information and available options for the 'forge build' command, including build options, cache options, linker options, compiler options, project options, watch options, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/build.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge build [OPTIONS] [PATHS]...\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nBuild options:\n  --names\n          Print compiled contract names\n\n  --sizes\n          Print compiled contract sizes. Constructor argument length is not\n          included in the calculation of initcode size\n\n  --ignore-eip-3860\n          Ignore initcode contract bytecode size limit introduced by EIP-3860\n\n  --no-cache\n          Disable the cache\n\n  --dynamic-test-linking\n          Enable dynamic test linking\n\n  --eof\n          Whether to compile contracts to EOF bytecode\n\n  --skip <SKIP>...\n          Skip building files whose names contain the given filter.\n          \n          `test` and `script` are aliases for `.t.sol` and `.s.sol`.\n\n  [PATHS]...\n          Build source files from specified paths\n\nCache options:\n  --force\n          Clear the cache and artifacts folder and recompile\n\nLinker options:\n  --libraries <LIBRARIES>\n          Set pre-linked libraries\n          \n          [env: DAPP_LIBRARIES=]\n\nCompiler options:\n  --ignored-error-codes <ERROR_CODES>\n          Ignore solc warnings by error code\n\n  --deny-warnings\n          Warnings will trigger a compiler error\n\n  --no-auto-detect\n          Do not auto-detect the `solc` version\n\n  --use <SOLC_VERSION>\n          Specify the solc version, or a path to a local solc, to build with.\n          \n          Valid values are in the format `x.y.z`, `solc:x.y.z` or\n          `path/to/solc`.\n\n  --offline\n          Do not access the network.\n          \n          Missing solc versions will not be installed.\n\n  --via-ir\n          Use the Yul intermediate representation compilation pipeline\n\n  --use-literal-content\n          Changes compilation to only use literal content and not URLs\n\n  --no-metadata\n          Do not append any metadata to the bytecode.\n          \n          This is equivalent to setting `bytecode_hash` to `none` and\n          `cbor_metadata` to `false`.\n\n  --ast\n          Includes the AST as JSON in the compiler output\n\n  --evm-version <VERSION>\n          The target EVM version\n\n  --optimize [<OPTIMIZE>]\n          Activate the Solidity optimizer\n          \n          [possible values: true, false]\n\n  --optimizer-runs <RUNS>\n          The number of runs specifies roughly how often each opcode of the\n          deployed code will be executed across the life-time of the contract.\n          This means it is a trade-off parameter between code size (deploy cost)\n          and code execution cost (cost after deployment). An `optimizer_runs`\n          parameter of `1` will produce short but expensive code. In contrast, a\n          larger `optimizer_runs` parameter will produce longer but more gas\n          efficient code\n\n  --extra-output <SELECTOR>...\n          Extra output to include in the contract's artifact.\n          \n          Example keys: evm.assembly, ewasm, ir, irOptimized, metadata\n          \n          For a full description, see\n          <https://docs.soliditylang.org/en/v0.8.13/using-the-compiler.html#input-description>\n\n  --extra-output-files <SELECTOR>...\n          Extra output to write to separate files.\n          \n          Valid values: metadata, ir, irOptimized, ewasm, evm.assembly\n\nProject options:\n  -o, --out <PATH>\n          The path to the contract artifacts folder\n\n      --revert-strings <REVERT>\n          Revert string configuration.\n          \n          Possible values are \"default\", \"strip\" (remove), \"debug\"\n          (Solidity-generated revert strings) and \"verboseDebug\"\n\n      --build-info\n          Generate build info files\n\n      --build-info-path <PATH>\n          Output path to directory that build info files will be written to\n\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -C, --contracts <PATH>\n          The contracts source directory\n\n  -R, --remappings <REMAPPINGS>\n          The project's remappings\n\n      --remappings-env <ENV>\n          The project's remappings from the environment\n\n      --cache-path <PATH>\n          The path to the compiler cache\n\n      --lib-paths <PATH>\n          The path to the library folder\n\n      --hardhat\n          Use the Hardhat-style project layout.\n          \n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n          \n          [aliases: hh]\n\n      --config-path <FILE>\n          Path to the config file\n\nWatch options:\n  -w, --watch [<PATH>...]\n          Watch the given files or directories for changes.\n          \n          If no paths are provided, the source and test directories of the\n          project are watched.\n\n      --no-restart\n          Do not restart the command while it's still running\n\n      --run-all\n          Explicitly re-run all tests when a change is made.\n          \n          By default, only the tests of the last modified test file are\n          executed.\n\n      --watch-delay <DELAY>\n          File update debounce delay.\n          \n          During the delay, incoming change events are accumulated and only once\n          the delay has passed, is an action taken. Note that this does not mean\n          a command will be started: if --no-restart is given and a command is\n          already running, the outcome of the action will be to do nothing.\n          \n          Defaults to 50ms. Parses as decimal seconds by default, but using an\n          integer with the `ms` suffix may be more convenient.\n          \n          When using --poll mode, you'll want a larger duration, or risk\n          overloading disk I/O.\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring Etherscan API Keys in Foundry TOML Configuration\nDESCRIPTION: This snippet demonstrates different valid ways to configure Etherscan API access in a Foundry project's configuration file. It shows how to set API keys directly or via environment variables, specify chain names or IDs, and configure custom Etherscan API URLs for unsupported chains.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/etherscan.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[etherscan]\nmainnet = { key = \"${ETHERSCAN_MAINNET_KEY}\" }\nmainnet2 = { key = \"ABCDEFG\", chain = \"mainnet\" }\noptimism = { key = \"1234567\" }\nunknown_chain = { key = \"ABCDEFG\", url = \"<etherscan api url for this chain>\" }\n```\n\n----------------------------------------\n\nTITLE: Creating and Selecting a Fork in Solidity\nDESCRIPTION: Documentation of the createSelectFork method with three possible signatures. This method creates and selects a new fork from a specified RPC endpoint, optionally at a specific block number or transaction hash.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-select-fork.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createSelectFork(string calldata urlOrAlias) external returns (uint256);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createSelectFork(string calldata urlOrAlias, uint256 block) external returns (uint256);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createSelectFork(string calldata urlOrAlias, bytes32 transaction) external returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Building in Watch Mode\nDESCRIPTION: Example of using forge build in watch mode to automatically rebuild when files change.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nforge build --watch\n```\n\n----------------------------------------\n\nTITLE: Example of Signing and Verifying Messages in Solidity\nDESCRIPTION: Demonstrates how to sign a message with a private key and verify the signature using ecrecover in a Solidity test.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n(address alice, uint256 alicePk) = makeAddrAndKey(\"alice\");\nemit log_address(alice);\nbytes32 hash = keccak256(\"Signed by Alice\");\n(uint8 v, bytes32 r, bytes32 s) = vm.sign(alicePk, hash);\naddress signer = ecrecover(hash, v, r, s);\nassertEq(alice, signer); // [PASS]\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Forge Project\nDESCRIPTION: This command initializes a new Forge project in a directory named `hello_foundry`. It sets up the basic project structure and configuration files required for a Solidity development environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nforge init hello_foundry\n```\n```\n\n----------------------------------------\n\nTITLE: Mocking Exact Function Call with mockFunction in Solidity\nDESCRIPTION: An example of using mockFunction to mock an exact call to the count function, demonstrating how it affects the behavior of the contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-function.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMockFunction() public {\n    vm.mockFunction(\n        address(counter),\n        address(model),\n        abi.encodeWithSelector(Counter.count.selector, 456)\n    );\n    counter.count(456);\n    assertEq(counter.a(), 123 + 456);\n    counter.count(567);\n    assertEq(counter.a(), 321 + 567);\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Contract Function with Parameters in Foundry Cast\nDESCRIPTION: Example of using 'cast mktx' to sign a transaction that calls a contract function 'deposit' with address and uint256 parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-mktx.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast mktx --ledger 0x... \"deposit(address,uint256)\" 0x... 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Remappings in Solidity\nDESCRIPTION: Example of using remappings to redirect Solidity imports to different directories. This shows how to remap imports from OpenZeppelin's contract libraries.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_0\n\nLANGUAGE: ignore\nCODE:\n```\n@openzeppelin/=node_modules/@openzeppelin/openzeppelin-contracts/\n```\n\n----------------------------------------\n\nTITLE: Direct Assertions Example in Solidity Invariant Tests\nDESCRIPTION: An example of direct assertions in Solidity invariant tests where protocol smart contracts are queried to assert that values are as expected. This snippet checks that the total assets of a token are greater than or equal to its total supply.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nassertGe(\n    token.totalAssets(),\n    token.totalSupply()\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Owner-Only Function with Cheatcodes in Solidity\nDESCRIPTION: This snippet demonstrates how to use Foundry's cheatcodes to test a smart contract function that should only be callable by its owner. It includes a simple test and an example using the expectRevert cheatcode.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/cheatcodes.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"forge-std/Test.sol\";\nimport \"../src/OwnerUpOnly.sol\";\n\ncontract OwnerUpOnlyTest is Test {\n    OwnerUpOnly public ownerUpOnly;\n\n    function setUp() public {\n        ownerUpOnly = new OwnerUpOnly();\n    }\n\n    function test_IncrementAsOwner() public {\n        ownerUpOnly.increment();\n        assertEq(ownerUpOnly.count(), 1);\n    }\n\n    function testFail_IncrementAsNotOwner() public {\n        vm.prank(address(0));\n        ownerUpOnly.increment();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Deployment Using Forge CLI\nDESCRIPTION: Example of deploying a contract using forge create command with RPC URL and private key\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/deploying.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ forge create --rpc-url <your_rpc_url> --private-key <your_private_key> src/MyContract.sol:MyContract\n```\n\n----------------------------------------\n\nTITLE: Using expectRevert with Different Error Types in Solidity\nDESCRIPTION: Examples of using expectRevert with string messages, custom error types with and without parameters, and message-less reverts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-revert.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nvm.expectRevert(\"error message\");\n\nvm.expectRevert(CustomError.selector);\n\nvm.expectRevert(\n    abi.encodeWithSelector(CustomError.selector, 1, 2)\n);\n\nfunction testExpectRevertNoReason() public {\n    Reverter reverter = new Reverter();\n    vm.expectRevert(bytes(\"\"));\n    reverter.revertWithoutReason();\n}\n\nfunction testFourLetterMessage() public {\n    vm.expectRevert(bytes(\"AAAA\"));\n}\n\nfunction testMultipleExpectReverts() public {\n    vm.expectRevert(\"INVALID_AMOUNT\");\n    vault.send(user, 0);\n\n    vm.expectRevert(\"INVALID_ADDRESS\");\n    vault.send(address(0), 200);\n}\n\nvm.expectPartialRevert(CustomError.selector);\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Setups for Solidity Tests\nDESCRIPTION: Demonstrates how to create shared setups using helper abstract contracts that can be inherited by multiple test contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/writing-tests.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nabstract contract HelperContract {\n    address constant IMPORTANT_ADDRESS = 0x543d...;\n    SomeContract someContract;\n    constructor() {...}\n}\n\ncontract MyContractTest is Test, HelperContract {\n    function setUp() public {\n        someContract = new SomeContract(0, IMPORTANT_ADDRESS);\n        ...\n    }\n}\n\ncontract MyOtherContractTest is Test, HelperContract {\n    function setUp() public {\n        someContract = new SomeContract(1000, IMPORTANT_ADDRESS);\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Foundry Project Structure\nDESCRIPTION: Changes to the newly created project directory and displays its file structure using the tree command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/creating-a-new-project.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cd hello_foundry\n{{#include ../output/hello_foundry/tree:all}}\n```\n\n----------------------------------------\n\nTITLE: Adding Ghost Variables to Track State Across Function Calls\nDESCRIPTION: Enhanced deposit handler that tracks the sum of all shares owned by LPs after depositing, using a ghost variable to maintain state between test calls.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit(uint256 assets) public virtual {\n    asset.mint(address(this), assets);\n\n    asset.approve(address(token), assets);\n\n    uint256 shares = token.deposit(assets, address(this));\n\n    sumBalanceOf += shares;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract Without Constructor Arguments\nDESCRIPTION: Basic command to deploy a smart contract located in a Solidity source file without any constructor arguments\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-create.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge create src/Contract.sol:ContractWithNoConstructor\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Named Import Syntax in Solidity\nDESCRIPTION: Shows the recommended way to import specific contracts or interfaces using named import syntax, which helps avoid naming conflicts and improves code clarity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/best-practices.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport {MyContract} from \"src/MyContract.sol\"\n```\n\n----------------------------------------\n\nTITLE: Using vm.startPrank Cheatcode\nDESCRIPTION: This code snippet demonstrates the use of the `vm.startPrank` cheatcode from the Forge Standard Library. This allows you to impersonate an address and execute subsequent transactions as that address for testing purposes. `alice` needs to be defined as an address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/README.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nvm.startPrank(alice);\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Implementation\nDESCRIPTION: Sample ERC20 token contract with customizable name, symbol, decimals and initial supply\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/deploying.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\n\ncontract MyToken is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 initialSupply\n    ) ERC20(name, symbol, decimals) {\n        _mint(msg.sender, initialSupply);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Counter Deployment Script in Solidity\nDESCRIPTION: A Solidity script that deploys a Counter contract using Foundry's scripting capabilities. The script inherits from Forge's Script contract and uses broadcast cheatcodes to record deployment transactions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/scripting-with-solidity.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {Script, console} from \"forge-std/Script.sol\";\nimport {Counter} from \"../src/Counter.sol\";\n\ncontract CounterScript is Script {\n    Counter public counter;\n\n    function setUp() public {}\n\n    function run() public {\n        vm.startBroadcast();\n\n        counter = new Counter();\n\n        vm.stopBroadcast();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Verification Command\nDESCRIPTION: Example of verifying a deployed contract on Etherscan using forge verify-contract\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/deploying.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nforge verify-contract \\\n    --chain-id 11155111 \\\n    --num-of-optimizations 1000000 \\\n    --watch \\\n    --constructor-args $(cast abi-encode \"constructor(string,string,uint256,uint256)\" \"ForgeUSD\" \"FUSD\" 18 1000000000000000000000) \\\n    --etherscan-api-key <your_etherscan_api_key> \\\n    --compiler-version v0.8.10+commit.fc410830 \\\n    <the_contract_address> \\\n    src/MyToken.sol:MyToken\n```\n\n----------------------------------------\n\nTITLE: Using parseInt Function in Solidity\nDESCRIPTION: Example of using the parseInt function to convert a string representation of a negative integer to its int256 equivalent.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-int.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory intAsString = \"-12345\";\nint256 stringToInt = vm.parseInt(intAsString); // -12345\n```\n\n----------------------------------------\n\nTITLE: Ghost Variable Assertions in Solidity\nDESCRIPTION: This Solidity snippet demonstrates ghost variable assertions, comparing protocol contract values against persisted test environment values. Here, the code checks equality between the total supply of a token and a pre-stored balance sum.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nassertEq(\n    token.totalSupply(),\n    sumBalanceOf\n)\n```\n\n----------------------------------------\n\nTITLE: Mocking Entire Function Example\nDESCRIPTION: Example showing how to mock all calls to a specific function regardless of parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-call.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMockCall() public {\n    vm.mockCall(\n        address(0),\n        abi.encodeWithSelector(MyToken.balanceOf.selector),\n        abi.encode(10)\n    );\n    assertEq(IERC20(address(0)).balanceOf(address(1)), 10);\n    assertEq(IERC20(address(0)).balanceOf(address(2)), 10);\n}\n```\n\n----------------------------------------\n\nTITLE: Foundry Cheatcodes Interface in Solidity\nDESCRIPTION: Complete Solidity interface for all cheatcodes available in Forge. This interface defines the contract methods that can be called on the vm object to perform various testing operations, manipulate state, and make assertions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/README.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n{{#include ../output/vm/Vm.sol:3:}}\n```\n\n----------------------------------------\n\nTITLE: Using startBroadcast in Solidity Test Contracts\nDESCRIPTION: This example demonstrates how to use startBroadcast in a Solidity test contract. It shows broadcasting transactions from different accounts and using a private key from environment variables.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/start-broadcast.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction t(uint256 a) public returns (uint256) {\n    uint256 b = 0;\n    emit log_string(\"here\");\n    return b;\n}\n\nfunction deployOther() public {\n    vm.startBroadcast(ACCOUNT_A);\n    Test test = new Test();\n    \n    // will trigger a transaction\n    test.t(1);\n    \n    vm.stopBroadcast();\n\n    // broadcast again, this time using a private key from your environment variables\n    vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));\n    test.t(3);\n    vm.stopBroadcast();\n}\n```\n\n----------------------------------------\n\nTITLE: Using serializeJson Functions to Create JSON Objects in Solidity\nDESCRIPTION: This example demonstrates how to use various serializeJson functions to create a complex JSON object. It serializes boolean, unsigned integer, and string values, and combines them into a nested JSON structure.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/serialize-json.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory obj1 = \"some key\";\nvm.serializeBool(obj1, \"boolean\", true);\nvm.serializeUint(obj1, \"number\", uint256(342));\n\nstring memory obj2 = \"some other key\";\nstring memory output = vm.serializeString(obj2, \"title\", \"finally json serialization\");\n\n// IMPORTANT: This works because `serializeString` first tries to interpret `output` as\n//   a stringified JSON object. If the parsing fails, then it treats it as a normal\n//   string instead.\n//   For instance, an `output` equal to '{ \"ok\": \"asd\" }' will produce an object, but\n//   an output equal to '\"ok\": \"asd\" }' will just produce a normal string.\nstring memory finalJson = vm.serializeString(obj1, \"object\", output);\n\nvm.writeJson(finalJson, \"./output/example.json\");\n```\n\n----------------------------------------\n\nTITLE: Mocking Custom Precompiles with vm.etch in Solidity\nDESCRIPTION: A complete example of using vm.etch to mock a custom precompile for the Blast chain, demonstrating how to handle chain-specific features in Foundry tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/etch.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"forge-std/Test.sol\";\nimport \"forge-std/console.sol\";\n\ncontract BlastMockTest is Test {\n    address constant YIELD_CONTRACT_ADDRESS = 0x4300000000000000000000000000000000000002;\n\n    function setUp() public {\n        // mock the YIELD_CONTRACT\n        vm.etch(\n            YIELD_CONTRACT_ADDRESS,\n            hex\"6080604052348015600f57600080fd5b506004361060285760003560e01c80639f8420f914602d575b600080fd5b60336035565b005b56fea2646970667358221220898cde5fee61e24980fb97b6af787ae32454df84f9cca2168da94d2ccb7c006664736f6c63430008110033\"\n        );\n    }\n\n    function testBlastYieldMode() public {\n        (bool success, bytes memory returnData) = YIELD_CONTRACT_ADDRESS.call(\n            abi.encodeWithSignature(\"setYieldMode(uint8)\", 1)\n        );\n        assertTrue(success);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Invariant Assertions in Solidity Tests\nDESCRIPTION: Shows how to write clear and descriptive invariant assertions in Foundry tests, providing verbose English descriptions for better understanding of test failures.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/best-practices.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nassertEq(x + y, z, \"Invariant violated: the sum of x and y must always equal z\")\n```\n\n----------------------------------------\n\nTITLE: MockCallRevert Basic Usage Example\nDESCRIPTION: Example showing how to mock a revert for an ERC20 balanceOf call with a simple error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-call-revert.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMockCallRevert() public {\n    vm.mockCallRevert(\n        address(0),\n        abi.encodeWithSelector(MyToken.balanceOf.selector, address(1)),\n        \"REVERT_MESSAGE\"\n    );\n    vm.expectRevert(\"REVERT_MESSAGE\");\n    IERC20(address(0)).balanceOf(address(1));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mainnet Fork with Specific Block Number in Foundry\nDESCRIPTION: Example of how to create and select a new mainnet fork at a specific block number, then asserting that the correct block has been selected.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-fork.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 forkId = vm.createFork(MAINNET_RPC_URL, 1_337_000);\nvm.selectFork(forkId);\n\nassertEq(block.number, 1_337_000);\n```\n\n----------------------------------------\n\nTITLE: Setting Fork URL in Foundry EVM\nDESCRIPTION: Command-line options for specifying a remote endpoint to fetch state from. Useful for testing against existing blockchain state.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/evm-options.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-f url\n--rpc-url url\n--fork-url url\n```\n\n----------------------------------------\n\nTITLE: Using Std Cheats in Solidity Tests\nDESCRIPTION: Shows an example of using a Std Cheat function (hoax) to set up a test scenario with a specific address and balance.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/forge-std.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// set up a prank as Alice with 100 ETH balance\nhoax(alice, 100 ether);\n```\n\n----------------------------------------\n\nTITLE: Cast Calldata Command Usage Text\nDESCRIPTION: This provides a detailed explanation of the 'cast calldata' command, covering its arguments and options. Key parameters include function signature and arguments for encoding, while options allow customization of thread usage, color output, and verbosity level.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/calldata.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast calldata [OPTIONS] <SIG> [ARGS]...\n\nArguments:\n  <SIG>\n          The function signature in the format `<name>(<in-types>)(<out-types>)`\n\n  [ARGS]...\n          The arguments to encode\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Converting to Property-Based Test in Solidity\nDESCRIPTION: Rewriting the unit test as a property-based test to check withdrawal for any amount.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fuzz-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n{{#include ../../projects/fuzz_testing/test/Safe.t.sol.2:contract_prelude}}\n    // ...\n\n{{#include ../../projects/fuzz_testing/test/Safe.t.sol.2:test}}\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Forks and Persistent Storage in Solidity\nDESCRIPTION: This Solidity contract demonstrates how to manage multiple forks using the ForkTest contract with Foundry vm utilities. It shows the creation of different forks, managing storage, making contracts persistent across forks, and handling EVM configurations. Dependencies include the Foundry testing framework and environment variables for RPC URLs. The outputs are assertions confirming the correctness of fork behavior and contract persistence.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fork-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ForkTest is Test {\n    // the identifiers of the forks\n    uint256 mainnetFork;\n    uint256 optimismFork;\n\n    //Access variables from .env file via vm.envString(\"varname\")\n    //Replace ALCHEMY_KEY by your alchemy key or Etherscan key, change RPC url if need\n    //inside your .env file e.g:\n    //MAINNET_RPC_URL = 'https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_KEY'\n    //string MAINNET_RPC_URL = vm.envString(\"MAINNET_RPC_URL\");\n    //string OPTIMISM_RPC_URL = vm.envString(\"OPTIMISM_RPC_URL\");\n\n    // create two _different_ forks during setup\n    function setUp() public {\n        mainnetFork = vm.createFork(MAINNET_RPC_URL);\n        optimismFork = vm.createFork(OPTIMISM_RPC_URL);\n    }\n\n    // creates a new contract while a fork is active\n    function testCreateContract() public {\n        vm.selectFork(mainnetFork);\n        assertEq(vm.activeFork(), mainnetFork);\n\n        // the new contract is written to `mainnetFork`'s storage\n        SimpleStorageContract simple = new SimpleStorageContract();\n\n        // and can be used as normal\n        simple.set(100);\n        assertEq(simple.value(), 100);\n\n        // after switching to another contract we still know `address(simple)` but the contract only lives in `mainnetFork`\n        vm.selectFork(optimismFork);\n\n        /* this call will therefore revert because `simple` now points to a contract that does not exist on the active fork\n        * it will produce following revert message:\n        *\n        * \"Contract 0xCe71065D4017F316EC606Fe4422e11eB2c47c246 does not exist on active fork with id `1`\n        *       But exists on non active forks: `[0]`\"\n        */\n        simple.value();\n    }\n\n     // creates a new _persistent_ contract while a fork is active\n     function testCreatePersistentContract() public {\n        vm.selectFork(mainnetFork);\n        SimpleStorageContract simple = new SimpleStorageContract();\n        simple.set(100);\n        assertEq(simple.value(), 100);\n\n        // mark the contract as persistent so it is also available when other forks are active\n        vm.makePersistent(address(simple));\n        assert(vm.isPersistent(address(simple)));\n\n        vm.selectFork(optimismFork);\n        assert(vm.isPersistent(address(simple)));\n\n        // This will succeed because the contract is now also available on the `optimismFork`\n        assertEq(simple.value(), 100);\n     }\n}\n\ncontract SimpleStorageContract {\n    uint256 public value;\n\n    function set(uint256 _value) public {\n        value = _value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Uint256 in Solidity\nDESCRIPTION: This function checks for the equality of two uint256 numbers within a Solidity environment. An additional string can be provided for a custom error message in case the assertion does not hold.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(uint256 left, uint256 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(uint256 left, uint256 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Forge\nDESCRIPTION: Command to install the solady library as a dependency using forge install\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/hello_foundry/forge-install:all}}\n```\n\n----------------------------------------\n\nTITLE: Using Force Cache Option in Foundry\nDESCRIPTION: The --force option clears the cache and artifacts folder before recompiling the project.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/core-build-options.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--force\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Address in Solidity\nDESCRIPTION: This function asserts the equality of two Ethereum addresses within a Solidity contract. A supplementary error string can be included for more detailed debugging information.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(address left, address right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(address left, address right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Using Std Errors in Solidity Tests\nDESCRIPTION: Demonstrates how to use Std Errors in combination with the expectRevert cheatcode to test for specific Solidity error conditions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/forge-std.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// expect an arithmetic error on the next call (e.g. underflow)\nvm.expectRevert(stdError.arithmeticError);\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests with Forge CLI\nDESCRIPTION: This shell script snippet demonstrates how to execute tests for a project using the `forge test` command. It supports options for running tests in a standard environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-test.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge test\n```\n\n----------------------------------------\n\nTITLE: Defining the broadcast Function Signatures in Solidity\nDESCRIPTION: Three signature variations of the broadcast function that allow specifying different transaction senders: one without parameters, one that takes an address, and one that takes a private key as a uint256.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/broadcast.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction broadcast() external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction broadcast(address who) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction broadcast(uint256 privateKey) external;\n```\n\n----------------------------------------\n\nTITLE: Expecting Call with Specific Value and Calldata in Solidity Test\nDESCRIPTION: This example demonstrates how to use expectCall to expect a call with a specific msg.value and calldata.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-call.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nContract target = new Contract();\nvm.expectCall(\n            address(target),\n            1,\n            abi.encodeWithSelector(target.pay.selector, 2)\n        );\ntarget.pay{value: 1}(2);\n// [PASS]\n```\n\n----------------------------------------\n\nTITLE: Using Std Storage in Solidity Tests\nDESCRIPTION: Shows how to use Std Storage to manipulate contract storage directly in tests, specifically changing the value of a variable in a target contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/forge-std.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n// find the variable `score` in the contract `game`\n// and change its value to 10\nstdstore\n    .target(address(game))\n    .sig(game.score.selector)\n    .checked_write(10);\n```\n\n----------------------------------------\n\nTITLE: Delegate Call Example with State Diff Recording\nDESCRIPTION: Example demonstrating how to use startPrank with delegate calls and state diff recording, showing interaction between proxy and implementation contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/start-prank.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ImplementationTest {\n    uint public num;\n    address public sender;\n\n    function setNum(uint _num) public {\n        num = _num;\n    }\n}\n\ncontract ProxyTest {\n    uint public num;\n    address public sender;\n}\n\ncontract FoundryIssue is Script {\n    function run() public {\n        ProxyTest proxy = new ProxyTest();\n        ImplementationTest impl = new ImplementationTest();\n\n        vm.label(address(proxy), 'proxy');\n        vm.label(address(impl), 'Impl');\n\n        uint num = 42;\n        vm.startPrank(address(proxy), true);\n        vm.startStateDiffRecording();\n        (bool successTwo,) = address(impl).delegatecall(abi.encodeWithSignature('setNum(uint256)', num));\n\n        VmSafe.AccountAccess[] memory accountAccesses = vm.stopAndReturnStateDiff();\n        console.log('accountAccesses.kind', uint8(accountAccesses[0].kind));\n        console.log('accountAccesses.accessor', vm.getLabel(accountAccesses[0].accessor));\n        console.log('accountAccesses.account', vm.getLabel(accountAccesses[0].account));\n        console.logBytes(accountAccesses[0].data);\n    }\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\n== Logs ==\n  accountAccesses.kind 1\n  accountAccesses.accessor proxy\n  accountAccesses.account Impl\n  0xcd16ecbf000000000000000000000000000000000000000000000000000000000000002a\n```\n\n----------------------------------------\n\nTITLE: Defining expectCall Function Signatures in Solidity\nDESCRIPTION: These are the four function signatures for the expectCall cheatcode in Foundry. They allow developers to expect calls to a specific address with various parameters including calldata, value, and count.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-call.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expectCall(address callee, bytes calldata data) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expectCall(address callee, bytes calldata data, uint64 count) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expectCall(\n    address callee,\n    uint256 value,\n    bytes calldata data\n) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expectCall(\n    address callee,\n    uint256 value,\n    bytes calldata data,\n    uint64 count\n) external;\n```\n\n----------------------------------------\n\nTITLE: ERC20 Account Data Struct and Access\nDESCRIPTION: Defines a gas-optimized ERC20AccountData struct and methods to access an account's balance. Utilizes packed storage slot optimizations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-storage.md#2025-04-22_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\n// AgoraDollar.sol\ncontract AgoraDollar {\n    /// @notice The Erc20AccountData struct\n    /// @param isFrozen A boolean to indicate if the account is frozen\n    /// @param balance A uint248 to store the balance of the account\n    struct Erc20AccountData {\n        bool isFrozen;\n        uint248 balance;\n    }\n\n    /// @notice The Erc20CoreStorage struct\n    /// @param accountData A mapping of address to Erc20AccountData to store account data\n    /// @custom:storage-location erc7201:AgoraDollarErc1967Proxy.Erc20CoreStorage\n    struct Erc20CoreStorage {\n        /// @dev _account The account whose data we are accessing\n        /// @dev _accountData The account data for the account\n        mapping(address _account => Erc20AccountData _accountData) accountData;\n    }\n\n    /// @notice The ```ERC20_CORE_STORAGE_SLOT_``` is the storage slot for the Erc20CoreStorage struct\n    /// @dev keccak256(abi.encode(uint256(keccak256(\"AgoraDollarErc1967Proxy.Erc20CoreStorage\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 internal constant ERC20_CORE_STORAGE_SLOT_ =\n        0x455730fed596673e69db1907be2e521374ba893f1a04cc5f5dd931616cd6b700;\n\n    /// @notice The ```getPointerToErc20CoreStorage``` function returns a pointer to the Erc20CoreStorage struct\n    /// @return $ A pointer to the Erc20CoreStorage struct\n    function getPointerToErc20CoreStorage() internal pure returns (Erc20CoreStorage storage $) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            $.slot := ERC20_CORE_STORAGE_SLOT_\n        }\n    }\n\n    /// @notice The ```balanceOf``` function returns the token balance of a given account\n    /// @param _account The account to check the balance of\n    /// @return The balance of the account\n    function balanceOf(address _account) external view returns (uint256) {\n        return getPointerToErc20CoreStorage().accountData[_account].balance;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Using broadcast Cheatcode in Solidity\nDESCRIPTION: A practical deployment example showing how to use the broadcast cheatcode with different sender specifications: an account address, no parameters, and a private key from environment variables.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/broadcast.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deploy() public {\n    vm.broadcast(ACCOUNT_A);\n    Test test = new Test();\n\n    // this won't generate tx to sign\n    uint256 b = test.t(4);\n\n    // this will\n    vm.broadcast(ACCOUNT_B);\n    test.t(2);\n\n    // this also will, using a private key from your environment variables\n    vm.broadcast(vm.envUint(\"PRIVATE_KEY\"));\n    test.t(3);\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Cheatcode Address from Fuzz Tests in Solidity\nDESCRIPTION: A Solidity code snippet that shows how to exclude the cheatcode address from fuzz tests to avoid errors when using fuzzed addresses. The vm.assume() function is used to add a condition that the fuzzed address is not equal to the cheatcode address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nvm.assume(address_ != 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\n```\n\n----------------------------------------\n\nTITLE: Store Function Usage Example in Solidity\nDESCRIPTION: Example demonstrating how to use the store function to modify a contract's storage slot and verify the change using load function. Shows manipulation of a private variable in a contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/store.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n/// contract LeetContract {\n///     uint256 private leet = 1337; // slot 0\n/// }\n\nvm.store(address(leetContract), bytes32(uint256(0)), bytes32(uint256(31337)));\nbytes32 leet = vm.load(address(leetContract), bytes32(uint256(0)));\nemit log_uint(uint256(leet)); // 31337\n```\n\n----------------------------------------\n\nTITLE: Using Etherscan API Key with Forge - Bash\nDESCRIPTION: This command passes the Etherscan API key while executing tests in a forked environment, allowing for enhanced tracing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fork-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforge test --fork-url <your_rpc_url> --etherscan-api-key <your_etherscan_api_key>\n```\n\n----------------------------------------\n\nTITLE: Call balanceOf(address) on WETH contract with cast\nDESCRIPTION: This example shows how to call the `balanceOf(address)` function on the WETH contract using `cast call`. It takes the WETH contract address and the target address as input, and returns the balance of the target address in WETH. The result is printed to the console.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-call.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast call 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 \\\n  \"balanceOf(address)(uint256)\" 0x...\n```\n\n----------------------------------------\n\nTITLE: Debugging Uncovered Code Locations\nDESCRIPTION: Executes the forge coverage command with the --report debug option to output lines describing where the code is uncovered. Requires no additional setup and is useful for identifying problematic areas in the code base.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-coverage.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge coverage --report debug\n```\n\n----------------------------------------\n\nTITLE: Detailed Usage and Options for cast decode-calldata\nDESCRIPTION: Comprehensive documentation of command syntax, arguments, and configuration options for decoding ABI-encoded calldata, including threading, display, and verbosity settings\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-calldata.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast decode-calldata [OPTIONS] <SIG> <CALLDATA>\n\nArguments:\n  <SIG>\n          The function signature in the format `<name>(<in-types>)(<out-types>)`\n\n  <CALLDATA>\n          The ABI-encoded calldata\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Using Forge Std Features in Solidity Tests\nDESCRIPTION: Shows examples of using various Forge Std features in a test, including cheatcodes, assertions, logging, and standard library functions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/forge-std.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// Access Hevm via the `vm` instance\nvm.startPrank(alice);\n\n// Assert and log using Dappsys Test\nassertEq(dai.balanceOf(alice), 10000e18);\n\n// Log with the Hardhat `console` (`console2`)\nconsole.log(alice.balance);\n\n// Use anything from the Forge Std std-libraries\ndeal(address(dai), alice, 10000e18);\n```\n\n----------------------------------------\n\nTITLE: Configuring Profiles in foundry.toml for Forge\nDESCRIPTION: This TOML snippet demonstrates how to configure multiple profiles in foundry.toml. It shows a default profile with optimizer settings and a CI profile with increased verbosity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default]\noptimizer = true\noptimizer_runs = 20_000\n\n[profile.ci]\nverbosity = 4\n```\n\n----------------------------------------\n\nTITLE: Logging with Solidity Console\nDESCRIPTION: The console.log method in Solidity is used to print formatted strings, supporting various data types and format specifiers similar to printf. It requires importing from the forge-std library and is compatible with networks like Anvil and Hardhat. The method facilitates debugging by providing expendable logging capabilities in development environments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/console-log.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nconsole.log(\"%s:%s\", \"foo\");\n// Returns: \"foo:%s\"\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nconsole.log(\"%s:%s\", \"foo\", \"bar\", \"baz\");\n// Returns: \"foo:bar baz\"\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nconsole.log(\"%% %s\");\n// Returns: \"%% %s\"\n```\n\n----------------------------------------\n\nTITLE: Running Basic Forge Tests in Shell\nDESCRIPTION: This snippet demonstrates how to run all tests in a Foundry project using the 'forge test' command. It shows the output of running tests in a freshly created project with only the default test.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/tests.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/hello_foundry/forge-test:all}}\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry via Cargo\nDESCRIPTION: Installs Foundry tools directly using Cargo package manager from the GitHub repository.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --git https://github.com/foundry-rs/foundry --profile release --locked forge cast chisel anvil\n```\n\n----------------------------------------\n\nTITLE: Forge Create Help Command\nDESCRIPTION: This command displays the help information for the `forge create` command, providing a list of available options and their descriptions. It's useful for understanding the command's syntax and available parameters before deploying a smart contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/create.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge create --help\"\n```\n\n----------------------------------------\n\nTITLE: Generate Complex Contract Address using Shell\nDESCRIPTION: Demonstrates a complex example of using the 'cast create2' tool to generate a contract address with multiple constraints. This includes a starting pattern, case-sensitivity, a specified deployer address, and a known init code hash.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-create2.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncast create2 --starts-with dead --case-sensitive --deployer 0x0000000000FFe8B47B3e2130213B802212439497 --init-code-hash 0x0c591f26891d6443cf08c5be3584c1e6ae10a4c2f07c5c53218741e9755fb9cd\n```\n\n----------------------------------------\n\nTITLE: Installing a dependency using forge\nDESCRIPTION: This command installs the `solmate` library from the `transmissions11` GitHub repository as a dependency for the current Foundry project. It adds the repository as a git submodule by default.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-install.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge install transmissions11/solmate\n```\n\n----------------------------------------\n\nTITLE: Installing a specific dependency version using forge\nDESCRIPTION: This command installs version `v7` of the `solmate` library from the `transmissions11` GitHub repository.  The `@v7` specifies the desired ref (in this case, a tag).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-install.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge install transmissions11/solmate@v7\n```\n\n----------------------------------------\n\nTITLE: Configuring Profiles in TOML\nDESCRIPTION: Demonstrates how to create and configure profiles using TOML in Foundry's configuration system. This allows you to define various profiles that inherit from a default profile. No special dependencies are required, other than being familiar with TOML file syntax. Profiles can be selected at runtime using the `FOUNDRY_PROFILE` environment variable.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[profile.local]\n```\n\n----------------------------------------\n\nTITLE: Testing Event Emission with expectEmit Cheatcode in Solidity\nDESCRIPTION: This snippet shows how to use the expectEmit cheatcode to test event emissions in Solidity contracts. It includes examples of checking indexed and non-indexed event parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/cheatcodes.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"forge-std/Test.sol\";\n\ncontract EmitContractTest is Test {\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    function test_ExpectEmit() public {\n        ExpectEmit emitter = new ExpectEmit();\n\n        // Check topic 1, topic 2, and data\n        vm.expectEmit(true, true, false, true);\n        // The event we expect\n        emit Transfer(address(this), address(1337), 1337);\n        // The event we get\n        emitter.t();\n    }\n\n    function test_ExpectEmit_DoNotCheckData() public {\n        ExpectEmit emitter = new ExpectEmit();\n\n        // Do not check the data field\n        vm.expectEmit(true, true, false, false);\n        // The event we expect\n        emit Transfer(address(this), address(1337), 1337);\n        // The event we get\n        emitter.tdo();\n    }\n}\n\ncontract ExpectEmit {\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    function t() public {\n        emit Transfer(msg.sender, address(1337), 1337);\n    }\n\n    function tdo() public {\n        emit Transfer(msg.sender, address(1337), 1338);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Struct in Solidity\nDESCRIPTION: This code snippet defines the structure of a Wallet in Solidity, including address, public key components, and private key.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-wallet.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Wallet {\n    address addr;\n    uint256 publicKeyX;\n    uint256 publicKeyY;\n    uint256 privateKey;\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Input Data for Transfer Function\nDESCRIPTION: Shows how to decode ABI-encoded input data for a transfer function call, including recipient address and amount parameters\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-decode-abi.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast decode-abi --input \"transfer(address,uint256)\" \\n  0xa9059cbb000000000000000000000000e78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0000000000000000000000000000000000000000000000000008a8e4b1a3d8000\n```\n\n----------------------------------------\n\nTITLE: Forge Install Usage and Options\nDESCRIPTION: This text provides a detailed breakdown of the `forge install` command's syntax, arguments, and options. It includes examples of installing dependencies from GitHub repositories, specifying refs (branches, tags, commits), setting aliases, and using options for shallow clones, Git submodule management, and verbosity control.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/install.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge install [OPTIONS] [DEPENDENCIES]...\n    forge install [OPTIONS] <github username>/<github project>@<tag>...\n    forge install [OPTIONS] <alias>=<github username>/<github project>@<tag>...\n    forge install [OPTIONS] <https://<github token>@git url>...)]\n    forge install [OPTIONS] <https:// git url>...\n\nArguments:\n  [DEPENDENCIES]...\n          The dependencies to install.\n          \n          A dependency can be a raw URL, or the path to a GitHub repository.\n          \n          Additionally, a ref can be provided by adding @ to the dependency\n          path.\n          \n          A ref can be: - A branch: master - A tag: v1.2.3 - A commit: 8e8128\n          \n          For exact match, a ref can be provided with `@tag=`, `@branch=` or\n          `@rev=` prefix.\n          \n          Target installation directory can be added via `<alias>=` suffix. The\n          dependency will installed to `lib/<alias>`.\n\nOptions:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n      --shallow\n          Perform shallow clones instead of deep ones.\n          \n          Improves performance and reduces disk usage, but prevents switching\n          branches or tags.\n\n      --no-git\n          Install without adding the dependency as a submodule\n\n      --commit\n          Create a commit after installing the dependencies\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Deriving Key and Address for Signing Transactions\nDESCRIPTION: This example demonstrates how to derive a private key and address from a mnemonic using `deriveRememberKey`, then use them to sign some data using `vm.sign` and broadcast transactions using `vm.startBroadcast` and `vm.stopBroadcast`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/derive-remember-key.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory mnemonic = \"test test test test test test test test test test test junk\";\n\n(address deployer, uint256 privateKey) = deriveRememberKey(mnemonic, 0);\n\nbytes32 hash = keccak256(\"Signed by deployer\");\n(uint8 v, bytes32 r, bytes32 s) = vm.sign(privateKey, hash);\n\nvm.startBroadcast(deployer);\n...\nvm.stopBroadcast();\n```\n\n----------------------------------------\n\nTITLE: Deploying a Contract to an Arbitrary Address in Solidity\nDESCRIPTION: Shows how to combine getCode with the etch function to deploy a contract to a specific address. It retrieves the bytecode, deploys the contract, and then uses etch to set the bytecode at the target address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-code.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// Deploy\nbytes memory args = abi.encode(arg1, arg2);\nbytes memory bytecode = abi.encodePacked(vm.getCode(\"MyContract.sol:MyContract\"), args);\naddress deployed;\nassembly {\n    deployed := create(0, add(bytecode, 0x20), mload(bytecode))\n}\n\n// Set the bytecode of an arbitrary address\nvm.etch(targetAddr, deployed.code);\n```\n\n----------------------------------------\n\nTITLE: Generating Test Files with Forge CLI - Bash\nDESCRIPTION: This snippet demonstrates the command usage for generating a test file using the Forge CLI. It includes options for specifying the contract name and configuring output verbosity and display settings. Dependencies include having Forge CLI installed and access to the terminal. The command outputs a scaffolded test file for the specified contract. Key options include contract-name, threads, and verbosity settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/generate/test.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge generate test --help\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with Arguments and ETH Value\nDESCRIPTION: Comprehensive contract deployment method supporting both encoded constructor arguments and attached ETH value\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/deployCode.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployCode(string memory what, bytes memory args, uint256 val) public returns (address);\n```\n\n----------------------------------------\n\nTITLE: Pausing Gas Metering in Solidity Tests\nDESCRIPTION: Function that pauses gas metering in the EVM, preventing gasleft() from decreasing during execution. Useful for gas cost analysis and running long scripts that might otherwise hit gas limits. Note that this disables DoS protections tied to gas metering.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/pause-gas-metering.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction pauseGasMetering() external;\n```\n\n----------------------------------------\n\nTITLE: Implementing Unbounded Handler Functions for Comprehensive Testing\nDESCRIPTION: Unbounded variant of the deposit handler function that can be used with fail_on_revert set to false, allowing for testing of edge cases and boundary conditions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\n// Unbounded\nfunction deposit(uint256 assets) public virtual {\n    asset.mint(address(this), assets);\n\n    asset.approve(address(token), assets);\n\n    uint256 beforeBalance = asset.balanceOf(address(this));\n\n    uint256 shares = token.deposit(assets, address(this));\n\n    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);\n\n    sumBalanceOf += shares;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Script.sol for Solidity Scripting Utilities\nDESCRIPTION: This code snippet imports the `Script.sol` contract from the Forge Standard Library. This provides basic utilities for Solidity scripting, allowing developers to automate deployment and other tasks within the Foundry environment. No external dependencies beyond Forge Std are required.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/README.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Script} from \"forge-std/Script.sol\";\n```\n\n----------------------------------------\n\nTITLE: Using warp Function to Set block.timestamp in Solidity\nDESCRIPTION: An example of how to use the warp function to set the block.timestamp to a specific value and then log it.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/warp.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nvm.warp(1641070800);\nemit log_uint(block.timestamp); // 1641070800\n```\n\n----------------------------------------\n\nTITLE: Example: Rolling Active Fork to Block Number in Solidity\nDESCRIPTION: This example demonstrates how to use rollFork to set the block number for the currently active fork. It creates a fork, selects it, and then rolls it to a specific block number.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/roll-fork.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 forkId = vm.createFork(MAINNET_RPC_URL);\nvm.selectFork(forkId);\n\nassertEq(block.number, 15_171_037); // as of time of writing, 2022-07-19 04:55:27 UTC\n\nvm.rollFork(15_171_057);\n\nassertEq(block.number, 15_171_057);\n```\n\n----------------------------------------\n\nTITLE: Using Cast Keccak Command in Shell\nDESCRIPTION: Command syntax for using the 'cast keccak' command to hash arbitrary data using the keccak-256 algorithm. The command accepts various options and requires data input to be hashed.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-keccak.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast keccak [*options*] *data*\n```\n\n----------------------------------------\n\nTITLE: Expecting Multiple Calls with Specific Value and Calldata in Solidity Test\nDESCRIPTION: This example shows how to use expectCall to expect a specific number of calls with a particular msg.value and calldata.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-call.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nContract target = new Contract();\nvm.expectCall(\n            address(target),\n            1,\n            abi.encodeWithSelector(target.pay.selector, 2),\n            3\n        );\ntarget.pay{value: 1}(2);\ntarget.pay{value: 1}(2);\ntarget.pay{value: 1}(2);\n// [PASS]\n```\n\n----------------------------------------\n\nTITLE: Fixing Fuzz Test with Type Restriction in Solidity\nDESCRIPTION: Modifying the fuzz test to restrict the 'amount' parameter to uint96 to prevent overflow.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fuzz-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n{{#include ../../projects/fuzz_testing/test/Safe.t.sol.3:signature}}\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Int256 Arrays in Solidity\nDESCRIPTION: This Solidity function asserts that two int256 arrays are equivalent and offers the provision of a descriptive error message, aiding in precise debugging when assertions fail.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(int256[] memory left, int256[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(int256[] memory left, int256[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Verifying a Contract with Oklink During Deployment Using Shell\nDESCRIPTION: This command verifies a contract with Oklink while simultaneously deploying it, including various configuration options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-verify-contract.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nforge create Counter --rpc-url <rpc_https_endpoint> --verify --verifier oklink --verifier-url https://www.oklink.com/api/v5/explorer/contract/verify-source-code-plugin/XLAYER --etherscan-api-key $OKLINK_API_KEY --private-key $PRIVATE_KEY --legacy\n```\n\n----------------------------------------\n\nTITLE: Defining assertGe for uint256 in Solidity\nDESCRIPTION: This snippet defines the internal function assertGe for comparing two uint256 values. It checks if the first value (left) is greater than or equal to the second (right). It can optionally revert with a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGe.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertGe(uint256 left, uint256 right) internal;\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Test contract for testing\nDESCRIPTION: This shows how to inherit the `Test` contract in your test contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/README.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Test} from \"forge-std/Test.sol\";\n\ncontract ContractTest is Test { ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Forge Configuration File\nDESCRIPTION: This shell command initializes a new basic Forge configuration file named 'foundry.toml' by redirecting the output of the 'forge config' command. No additional dependencies are required, and its purpose is to provide a default configuration setup for a project.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-config.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge config > foundry.toml\n```\n\n----------------------------------------\n\nTITLE: Prank Function with Transaction Origin\nDESCRIPTION: Sets both msg.sender and tx.origin addresses for the next call to enable complete transaction context manipulation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prank.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction prank(address msgSender, address txOrigin) external;\n```\n\n----------------------------------------\n\nTITLE: Executing Forge Coverage Command with Default Options\nDESCRIPTION: Executes the forge coverage command to view a summarized coverage report. No additional dependencies or parameters are required. The command outputs a summary chart showing the percentage of code covered by tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-coverage.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge coverage\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet from Uint256 Example in Solidity\nDESCRIPTION: This example demonstrates how to create a Wallet using a uint256 derived from a keccak256 hash, and shows various properties of the created wallet.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-wallet.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nVm.Wallet memory wallet = vm.createWallet(uint256(keccak256(bytes(\"1\"))));\n\nemit log_uint(wallet.privateKey); // uint256(keccak256(bytes(\"1\")))\n\nemit log_address(wallet.addr); // vm.addr(wallet.privateKey)\n\nemit log_address(\n    address(\n        uint160(\n            uint256(\n                keccak256(abi.encode(wallet.publicKeyX, wallet.publicKeyY))\n            )\n        )\n    )\n); // wallet.addr\n\nemit log_string(vm.getLabel(wallet.addr)); // \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Optimizer Settings in TOML Configuration\nDESCRIPTION: Example of a foundry.toml configuration file showing how to enable and configure the Solidity optimizer for regular compilation with a high number of optimizer runs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default]\nsolc-version = \"0.8.17\"\noptimizer = true\noptimizer-runs = 10_000_000\n```\n\n----------------------------------------\n\nTITLE: Installing a dependency into a specific folder using forge\nDESCRIPTION: This command installs the `solmate` library from the `transmissions11` GitHub repository into a folder named `soulmate`. The `soulmate=` prefix renames the default folder name to `soulmate`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-install.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nforge install soulmate=transmissions11/solmate\n```\n\n----------------------------------------\n\nTITLE: Expecting No Token Transfer Call in Solidity Test\nDESCRIPTION: This example demonstrates how to use expectCall with a count of 0 to expect that a specific function call is not made.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-call.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\naddress alice = makeAddr(\"alice\");\nemit log_address(alice);\nvm.expectCall(\n  address(token), abi.encodeCall(token.transfer, (alice, 10)), 0\n);\ntoken.transferFrom(alice, address(0), 10);\n// [PASS]\n```\n\n----------------------------------------\n\nTITLE: Setting ERC20 Token Balance with deal Function in Solidity\nDESCRIPTION: Shows how to use the alternative signature of 'deal' to set the balance of an ERC20 token for an address. It requires importing StdUtils.sol and specifies the token address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/deal.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\naddress alice = makeAddr(\"alice\");\nemit log_address(alice);\ndeal(address(DAI), alice, 1 ether); // import StdUtils.sol first\nlog_uint256(address(DAI).balanceOf(alice)); // 1000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Using Record Function with Solidity Contract\nDESCRIPTION: Example of using the `record()` function to track storage accesses in a contract. It demonstrates how to start recording, perform a contract operation, and then retrieve the recorded reads and writes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/record.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n/// contract NumsContract {\n///     uint256 public num1 = 100; // slot 0\n///     uint256 public num2 = 200; // slot 1\n/// }\n\nvm.record();\nnumsContract.num2();\n(bytes32[] memory reads, bytes32[] memory writes) = vm.accesses(\n  address(numsContract)\n);\nemit log_uint(uint256(reads[0])); // 1\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet Vanity Command Usage and Options\nDESCRIPTION: Comprehensive documentation of all available options and flags for the cast wallet vanity command, including pattern matching, threading, and output formatting options\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/vanity.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet vanity [OPTIONS]\n\nOptions:\n      --starts-with <PATTERN>\n          Prefix regex pattern or hex string\n\n      --ends-with <PATTERN>\n          Suffix regex pattern or hex string\n\n      --nonce <NONCE>\n          Generate a vanity contract address created by the generated keypair\n          with the specified nonce\n\n      --save-path <PATH>\n          Path to save the generated vanity contract address to.\n          \n          If provided, the generated vanity addresses will appended to a JSON\n          array in the specified file.\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Foundry Testing\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to run Foundry tests on push events. It checks out the repository, installs Foundry, and runs tests using the forge command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/continuous-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non: [push]\n\nname: test\n\njobs:\n  check:\n    name: Foundry project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          submodules: recursive\n\n      - name: Install Foundry\n        uses: foundry-rs/foundry-toolchain@v1\n        with:\n          version: stable\n\n      - name: Run tests\n        run: forge test -vvv\n```\n\n----------------------------------------\n\nTITLE: Mocking Multiple balanceOf Calls in Solidity with Foundry\nDESCRIPTION: Example of using `mockCalls` to mock multiple `balanceOf(address)` calls on an ERC20 token contract. It demonstrates how to set up different return values for consecutive calls.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-calls.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMockCall() public {\n    bytes[] memory mocks = new bytes[](2);\n    mocks[0] = abi.encode(2 ether);\n    mocks[1] = abi.encode(1 ether);\n\n    vm.mockCalls(\n        address(0),\n        abi.encodeWithSelector(IERC20.balanceOf.selector, address(1)),\n        mocks\n    );\n\n    assertEq(IERC20(address(0)).balanceOf(address(1)), 2 ether);\n    assertEq(IERC20(address(0)).balanceOf(address(1)), 1 ether);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining parseJsonKeys Function Signature in Solidity\nDESCRIPTION: This snippet shows the function signature for parseJsonKeys, which takes a JSON string and a key path as inputs and returns an array of keys.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-json-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\n```\n\n----------------------------------------\n\nTITLE: Differential Testing Against OpenZeppelin's Merkle Proof Library\nDESCRIPTION: This snippet showcases differential testing between a custom Merkle tree implementation and OpenZeppelin's library. It verifies that both implementations produce the same result for a given set of data, ensuring compatibility.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/differential-ffi-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nimport {MerkleProof} from \"openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\";\n//...\nfunction testCompatibilityOpenZeppelinProver(bytes32[] memory _data, uint256 node) public {\n    vm.assume(_data.length > 1);\n    vm.assume(node < _data.length);\n    bytes32 root = m.getRoot(_data);\n    bytes32[] memory proof = m.getProof(_data, node);\n    bytes32 valueToProve = _data[node];\n    bool murkyVerified = m.verifyProof(root, proof, valueToProve);\n    bool ozVerified = MerkleProof.verify(proof, root, valueToProve);\n    assertTrue(murkyVerified == ozVerified);\n}\n```\n\n----------------------------------------\n\nTITLE: Block Number Manipulation Example - Solidity\nDESCRIPTION: Example showing how to use vm.roll() to set block.number to a specific value and emit it as a log.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/roll.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nvm.roll(100);\nemit log_uint(block.number); // 100\n```\n\n----------------------------------------\n\nTITLE: Testing Smart Contracts - Forge - Shell\nDESCRIPTION: This command runs tests on the smart contracts located in the 'counter' repository. It ensures that all implemented tests pass successfully, providing a summary of test results, including gas usage for each test case. Proper test files should be present in the specified directory prior to execution.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ forge test\n```\n\nLANGUAGE: console\nCODE:\n```\n[⠊] Compiling...\nNo files changed, compilation skipped\n\nRan 2 tests for test/Counter.t.sol:CounterTest\n[PASS] testFuzz_SetNumber(uint256) (runs: 256, μ: 31121, ~: 31277)\n[PASS] test_Increment() (gas: 31293)\nSuite result: ok. 2 passed; 0 failed; 0 skipped; finished in 5.35ms (4.86ms CPU time)\n\nRan 1 test suite in 5.91ms (5.35ms CPU time): 2 tests passed, 0 failed, 0 skipped (2 total tests)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ethereum Logs Using Topic Hash in Foundry CLI\nDESCRIPTION: Example of using the cast logs command to retrieve logs by specifying the topic hash directly. This queries the same Transfer event but using its keccak256 hash representation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-logs.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast logs --from-block 15537393 --to-block latest 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef --address 0x0000000000000000000000002e8abfe042886e4938201101a63730d04f160a82\n```\n\n----------------------------------------\n\nTITLE: Mocking Call with msg.value Example\nDESCRIPTION: Example demonstrating how to mock calls with specific msg.value amounts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-call.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMockCall() public {\n    assertEq(example.pay{value: 10}(1), 1);\n    assertEq(example.pay{value: 1}(2), 2);\n    vm.mockCall(\n        address(example),\n        10,\n        abi.encodeWithSelector(example.pay.selector),\n        abi.encode(99)\n    );\n    assertEq(example.pay{value: 10}(1), 99);\n    assertEq(example.pay{value: 1}(2), 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Cast Client Usage Information\nDESCRIPTION: This text block shows the usage information and options for the `cast client` command. It includes options for setting the RPC URL, using Flashbots, setting JWT secret, RPC timeout, custom headers, number of threads, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/client.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast client [OPTIONS]\\n\\nOptions:\\n  -r, --rpc-url <URL>\\n          The RPC endpoint, default value is http://localhost:8545\\n          \\n          [env: ETH_RPC_URL=]\\n\\n      --flashbots\\n          Use the Flashbots RPC URL with fast mode\\n          (<https://rpc.flashbots.net/fast>).\\n          \\n          This shares the transaction privately with all registered builders.\\n          \\n          See:\\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\\n\\n      --jwt-secret <JWT_SECRET>\\n          JWT Secret for the RPC endpoint.\\n          \\n          The JWT secret will be used to create a JWT for a RPC. For example,\\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\\n          call:\\n          \\n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\\n          \\n          [env: ETH_RPC_JWT_SECRET=]\\n\\n      --rpc-timeout <RPC_TIMEOUT>\\n          Timeout for the RPC request in seconds.\\n          \\n          The specified timeout will be used to override the default timeout for\\n          RPC requests.\\n          \\n          Default value: 45\\n          \\n          [env: ETH_RPC_TIMEOUT=]\\n\\n      --rpc-headers <RPC_HEADERS>\\n          Specify custom headers for RPC requests\\n          \\n          [env: ETH_RPC_HEADERS=]\\n\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Selecting Forks - Solidity\nDESCRIPTION: This Solidity code demonstrates the creation, selection, and management of multiple forks using the Forge framework in unit tests. Each fork is identified by a unique identifier, allowing for isolated testing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fork-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ForkTest is Test {\n    // the identifiers of the forks\n    uint256 mainnetFork;\n    uint256 optimismFork;\n\n    //Access variables from .env file via vm.envString(\"varname\")\n    //Replace ALCHEMY_KEY by your alchemy key or Etherscan key, change RPC url if need\n    //inside your .env file e.g:\n    //MAINNET_RPC_URL = 'https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_KEY'\n    //string MAINNET_RPC_URL = vm.envString(\"MAINNET_RPC_URL\");\n    //string OPTIMISM_RPC_URL = vm.envString(\"OPTIMISM_RPC_URL\");\n\n    // create two _different_ forks during setup\n    function setUp() public {\n        mainnetFork = vm.createFork(MAINNET_RPC_URL);\n        optimismFork = vm.createFork(OPTIMISM_RPC_URL);\n    }\n\n    // demonstrate fork ids are unique\n    function testForkIdDiffer() public {\n        assert(mainnetFork != optimismFork);\n    }\n\n    // select a specific fork\n    function testCanSelectFork() public {\n        // select the fork\n        vm.selectFork(mainnetFork);\n        assertEq(vm.activeFork(), mainnetFork);\n\n        // from here on data is fetched from the `mainnetFork` if the EVM requests it and written to the storage of `mainnetFork`\n    }\n\n    // manage multiple forks in the same test\n    function testCanSwitchForks() public {\n        vm.selectFork(mainnetFork);\n        assertEq(vm.activeFork(), mainnetFork);\n\n        vm.selectFork(optimismFork);\n        assertEq(vm.activeFork(), optimismFork);\n    }\n\n    // forks can be created at all times\n    function testCanCreateAndSelectForkInOneStep() public {\n        // creates a new fork and also selects it\n        uint256 anotherFork = vm.createSelectFork(MAINNET_RPC_URL);\n        assertEq(vm.activeFork(), anotherFork);\n    }\n\n    // set `block.number` of a fork\n    function testCanSetForkBlockNumber() public {\n        vm.selectFork(mainnetFork);\n        vm.rollFork(1_337_000);\n\n        assertEq(block.number, 1_337_000);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing noGasMetering Modifier in Solidity\nDESCRIPTION: This code snippet demonstrates a Solidity modifier \\\\\"noGasMetering\\\\\" that disables gas metering for a function, allowing it to execute without the usual gas counting. The system will still show some minimal gas usage due to calling the cheat code itself. The modifier is illustrated with a function, \\\\\"addInLoopNoGas\\\\\", which delegates its work to another function, \\\\\"addInLoop\\\\\", to compare gas usage with and without metering. Full tests show significant gas savings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/noGasMetering.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nmodifier noGasMetering();\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction addInLoop() internal returns (uint256) {\n    uint256 b;\n    for (uint256 i; i < 10000; i++) {\n        b + i;\n    }\n    return b;\n}\n\nfunction addInLoopNoGas() internal noGasMetering returns (uint256) {\n    return addInLoop();\n}\n\nfunction testFunc() external {\n  uint256 gas_start = gasleft();\n  addInLoop();\n  uint256 gas_used = gas_start - gasleft();\n\n  uint256 gas_start_no_metering = gasleft();\n  addInLoopNoGas();\n  uint256 gas_used_no_metering = gas_start_no_metering - gasleft();\n\n  emit log_named_uint(\"Gas Metering\", gas_used);\n  emit log_named_uint(\"No Gas Metering\", gas_used_no_metering);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Trace Format Example in Forge\nDESCRIPTION: Demonstrates the basic structure of a Forge trace output showing function calls, parameters, and return values with hierarchical formatting.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/traces.md#2025-04-22_snippet_0\n\nLANGUAGE: ignore\nCODE:\n```\n  [<Gas Usage>] <Contract>::<Function>(<Parameters>)\n    ├─ [<Gas Usage>] <Contract>::<Function>(<Parameters>)\n    │   └─ ← <Return Value>\n    └─ ← <Return Value>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Template\nDESCRIPTION: Template for environment variables required for deployment and verification on Sepolia testnet.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/scripting-with-solidity.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nSEPOLIA_RPC_URL=\nETHERSCAN_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI for Foundry Testing\nDESCRIPTION: This YAML configuration sets up a GitLab CI workflow for Foundry projects. It uses a Docker image with Foundry pre-installed, sets up recursive submodule strategy, installs dependencies, and runs tests using the forge command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/continuous-integration.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  GIT_SUBMODULE_STRATEGY: recursive\n\njobs:\n  image: ghcr.io/foundry-rs/foundry\n  script:\n    - forge install\n    - forge test -vvv\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Difficulty\nDESCRIPTION: Sets the difficulty level for block mining. This affects how challenging it is for miners to successfully add new blocks to the blockchain, thus influencing network security and transaction processing times.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/executor-options.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`--block-difficulty` *difficulty*\n```\n\n----------------------------------------\n\nTITLE: Importing Std Storage in Solidity\nDESCRIPTION: Demonstrates how to import and utilize the Std Storage library in a Solidity test contract. Requires the `forge-std` library.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nimport {stdStorage, StdStorage} from \"forge-std/Test.sol\";\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nusing stdStorage for StdStorage;\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Endpoints in Foundry\nDESCRIPTION: Example configuration for RPC endpoints in Foundry, showing how to define named endpoints with direct URLs or references to environment variables that can be used in tests and Solidity scripts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[rpc_endpoints]\noptimism = \"https://optimism.alchemyapi.io/v2/...\"\nmainnet = \"${RPC_MAINNET}\"\n```\n\n----------------------------------------\n\nTITLE: Decoding Ethereum Transaction Calldata with Cast\nDESCRIPTION: This command shows how to use Cast to decode the calldata of an Ethereum transaction, providing insights into the function being called and its parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cast/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/cast/cast-4byte-calldata:all}}\n```\n\n----------------------------------------\n\nTITLE: Transferring DAI Tokens using Cast in Foundry\nDESCRIPTION: This set of commands impersonates the UNLUCKY_USER account and transfers DAI tokens to the ALICE account. It demonstrates how to use Cast to send transactions and interact with smart contracts on the forked network.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/forking-mainnet-with-cast-anvil.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncast rpc anvil_impersonateAccount $UNLUCKY_USER\ncast send $DAI \\\n--from $UNLUCKY_USER \\\n  \"transfer(address,uint256)(bool)\" \\\n  $ALICE \\\n  300000000000000000000000 \\\n  --unlocked\n```\n\n----------------------------------------\n\nTITLE: Call getAmountsOut(uint,address[]) on Uniswap v2 router with cast\nDESCRIPTION: This example shows how to call the `getAmountsOut(uint,address[])` function on the Uniswap v2 router contract. It provides the contract address, function signature, and arguments (amount and array of addresses) to the `cast call` command. The function returns the output amounts for the given input amount and token path.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-call.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncast call 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D \\\n   \"getAmountsOut(uint,address[])\" 1 \"[0x6b...0f,0xc0...c2]\"\n```\n\n----------------------------------------\n\nTITLE: Verifying a Flattened Contract with Constructor Arguments from a File Using Shell\nDESCRIPTION: This command verifies a flattened contract while specifying constructor arguments that are located in a separate file, ensuring proper formatting for input.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-verify-contract.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nforge verify-contract --flatten --watch --compiler-version \"v0.8.11+commit.d7f03943\" \\\n  --constructor-args-path constructor-args.txt <address> src/Token.sol:MyToken\n```\n\n----------------------------------------\n\nTITLE: Solidity Contract with Struct Definition for Testing\nDESCRIPTION: Sample Solidity contract defining a struct with address and uint256 fields, and a function that accepts the struct as a parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-mktx.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Test {\n    struct MyStruct {\n        address addr;\n        uint256 amount;\n    }\n    function myfunction(MyStruct memory t) public pure {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Coinbase Cheatcode in Solidity Tests\nDESCRIPTION: This example demonstrates how to use the `coinbase` cheatcode to change the `block.coinbase` value in a Solidity test. It shows the initial value, sets a new coinbase address, and then logs the updated value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/coinbase.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nemit log_address(block.coinbase); // 0x0000000000000000000000000000000000000000\nvm.coinbase(0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8);\nemit log_address(block.coinbase); // 0xea674fdde714fd979de3edf0f56aa9716b898ec8\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Block Information using eth_getBlockByNumber\nDESCRIPTION: This example demonstrates how to use the cast rpc command to retrieve the latest block information using the eth_getBlockByNumber method on a localhost Ethereum node. The 'latest' parameter specifies the most recent block, and 'false' indicates that full transaction objects are not needed.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast rpc eth_getBlockByNumber \"latest\" \"false\"\n```\n\n----------------------------------------\n\nTITLE: Deployment Command for Sepolia\nDESCRIPTION: Shell commands for loading environment variables and deploying the contract to Sepolia testnet with verification.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/scripting-with-solidity.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsource .env\nforge script --chain sepolia script/Counter.s.sol:CounterScript --rpc-url $SEPOLIA_RPC_URL --broadcast --verify -vvvv --interactives 1\n```\n\n----------------------------------------\n\nTITLE: Declaring Record Function in Solidity\nDESCRIPTION: The `record()` function signature for instructing the VM to start recording storage reads and writes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/record.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction record() external;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Actor Unbounded Deposit Function\nDESCRIPTION: An unbounded deposit function that uses the useActor modifier to simulate deposits from different addresses and tracks deposits per actor with ghost variables.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\n// Unbounded\nfunction deposit(\n    uint256 assets,\n    uint256 actorIndexSeed\n) public virtual useActor(actorIndexSeed) {\n    asset.mint(currentActor, assets);\n\n    asset.approve(address(token), assets);\n\n    uint256 beforeBalance = asset.balanceOf(address(this));\n\n    uint256 shares = token.deposit(assets, address(this));\n\n    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);\n\n    sumBalanceOf += shares;\n\n    sumDeposits[currentActor] += assets\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Invariant Tests in Solidity\nDESCRIPTION: The contract `InvariantExample1` extends `Test` to set up and verify invariants using forge-std utilities. Two invariants are tested using the `ExampleContract1` to ensure the correctness of arithmetic operations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_6\n\nLANGUAGE: Solidity\nCODE:\n```\ncontract InvariantExample1 is Test {\n\n    ExampleContract1 foo;\n\n    function setUp() external {\n        foo = new ExampleContract1();\n    }\n\n    function invariant_A() external {\n        assertEq(foo.val1() + foo.val2(), foo.val3());\n    }\n\n    function invariant_B() external {\n        assertGe(foo.val1() + foo.val2(), foo.val3());\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining serializeJson Function Signatures in Solidity\nDESCRIPTION: This snippet defines the function signatures for various serializeJson cheatcode functions. These functions serialize different data types (bool, uint, int, address, bytes32, string, bytes) and their array variants into JSON format.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/serialize-json.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction serializeJson(string calldata objectKey, string calldata value)\n    external\n    returns (string memory json);\n\nfunction serializeBool(string calldata objectKey, string calldata valueKey, bool value)\n    external\n    returns (string memory json);\n\nfunction serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\n    external\n    returns (string memory json);\n\nfunction serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\n    external\n    returns (string memory json);\n\nfunction serializeAddress(string calldata objectKey, string calldata valueKey, address value)\n    external\n    returns (string memory json);\n\nfunction serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\n    external\n    returns (string memory json);\n\nfunction serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\n    external\n    returns (string memory json);\n\nfunction serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\n    external\n    returns (string memory json);\n\nfunction serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\n    external\n    returns (string memory json);\n\nfunction serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\n    external\n    returns (string memory json);\n\nfunction serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\n    external\n    returns (string memory json);\n\nfunction serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\n    external\n    returns (string memory json);\n\nfunction serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\n    external\n    returns (string memory json);\n\nfunction serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\n    external\n    returns (string memory json);\n\nfunction serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\n    external\n    returns (string memory json);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Emission Expectations in Solidity Tests\nDESCRIPTION: Demonstrates the recommended way to set up expectations for event emissions in Foundry tests, ensuring all aspects of the event are checked.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/best-practices.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nvm.expectEmit(true, true, true, true)\nvm.expectEmit()\n```\n\n----------------------------------------\n\nTITLE: expectEmit Usage With Emitter Address Check\nDESCRIPTION: Example showing how to verify that a specific contract address emits an event, using the expectEmit overload that takes an emitter address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-emit.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed from, address indexed to, uint256 amount);\n\nfunction testERC20EmitsTransfer() public {\n    // We check that the token is the event emitter by passing the address.\n    vm.expectEmit(address(myToken));\n    emit MyToken.Transfer(address(this), address(1), 10);\n\n    // We perform the call.\n    myToken.transfer(address(1), 10);\n}\n```\n\n----------------------------------------\n\nTITLE: Complex JSON to Nested Structs Example\nDESCRIPTION: Demonstrates parsing nested JSON objects into complex Solidity struct hierarchies with arrays.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-json.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"apples\": [\n        {\n            \"sweetness\": 7,\n            \"sourness\": 3,\n            \"color\": \"Red\"\n        },\n        {\n            \"sweetness\": 5,\n            \"sourness\": 5,\n            \"color\": \"Green\"\n        },\n        {\n            \"sweetness\": 9,\n            \"sourness\": 1,\n            \"color\": \"Yellow\"\n        }\n    ],\n    \"name\": \"Fresh Fruit\"\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Apple {\n    string color;\n    uint8 sourness;\n    uint8 sweetness;\n}\n\nstruct FruitStall {\n    Apple[] apples;\n    string name;\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory root = vm.projectRoot();\nstring memory path = string.concat(root, \"/src/test/fixtures/fruitstall.json\");\nstring memory json = vm.readFile(path);\nbytes memory data = vm.parseJson(json);\nFruitStall memory fruitstall = abi.decode(data, (FruitStall));\n\n// Logs: Welcome to Fresh Fruit\nconsole2.log(\"Welcome to\", fruitstall.name);\n\nfor (uint256 i = 0; i < fruitstall.apples.length; i++) {\n    Apple memory apple = fruitstall.apples[i];\n\n    // Logs:\n    // Color: Red, Sourness: 3, Sweetness: 7\n    // Color: Green, Sourness: 5, Sweetness: 5\n    // Color: Yellow, Sourness: 1, Sweetness: 9\n    console2.log(\n        \"Color: %s, Sourness: %d, Sweetness: %d\",\n        apple.color,\n        apple.sourness,\n        apple.sweetness\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Cast Creation Code Usage and Options\nDESCRIPTION: This section outlines the command-line arguments and options available for the `cast creation-code` command. It includes options for specifying the contract address, ABI path, Etherscan API key, chain ID, RPC URL, and various display settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/creation-code.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast creation-code [OPTIONS] <CONTRACT>\n\nArguments:\n  <CONTRACT>\n          An Ethereum address, for which the bytecode will be fetched\n\nOptions:\n      --abi-path <ABI_PATH>\n          Path to file containing the contract's JSON ABI. It's necessary if the\n          target contract is not verified on Etherscan\n\n      --disassemble\n          Disassemble bytecodes into individual opcodes\n\n      --without-args\n          Return creation bytecode without constructor arguments appended\n\n      --only-args\n          Return only constructor arguments\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ERC-4626 Deposit Contract in Solidity\nDESCRIPTION: This snippet demonstrates a basic implementation of an ERC-4626 compatible deposit contract. It uses another ERC-20 token, specified by `asset`, and allows for deposits and balance transfers. Requires a compliant IERC20 token to interact with.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_7\n\nLANGUAGE: Solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\ninterface IERC20Like {\n\n    function balanceOf(address owner_) external view returns (uint256 balance_);\n\n    function transferFrom(\n        address owner_,\n        address recipient_,\n        uint256 amount_\n    ) external returns (bool success_);\n\n}\n\ncontract Basic4626Deposit {\n\n    /**********************************************************************************************/\n    /*** Storage                                                                                ***/\n    /**********************************************************************************************/\n\n    address public immutable asset;\n\n    string public name;\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    /**********************************************************************************************/\n    /*** Constructor                                                                            ***/\n    /**********************************************************************************************/\n\n    constructor(address asset_, string memory name_, string memory symbol_, uint8 decimals_) {\n        asset    = asset_;\n        name     = name_;\n        symbol   = symbol_;\n        decimals = decimals_;\n    }\n\n    /**********************************************************************************************/\n    /*** External Functions                                                                     ***/\n    /**********************************************************************************************/\n\n    function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_) {\n        shares_ = convertToShares(assets_);\n\n        require(receiver_ != address(0), \"ZERO_RECEIVER\");\n        require(shares_   != uint256(0), \"ZERO_SHARES\");\n        require(assets_   != uint256(0), \"ZERO_ASSETS\");\n\n        totalSupply += shares_;\n\n        // Cannot overflow because totalSupply would first overflow in the statement above.\n        unchecked { balanceOf[receiver_] += shares_; }\n\n        require(\n            IERC20Like(asset).transferFrom(msg.sender, address(this), assets_),\n            \"TRANSFER_FROM\"\n        );\n    }\n\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_) {\n        balanceOf[msg.sender] -= amount_;\n\n        // Cannot overflow because minting prevents overflow of totalSupply,\n        // and sum of user balances == totalSupply.\n        unchecked { balanceOf[recipient_] += amount_; }\n\n        return true;\n    }\n\n    /**********************************************************************************************/\n    /*** Public View Functions                                                                  ***/\n    /**********************************************************************************************/\n\n    function convertToShares(uint256 assets_) public view returns (uint256 shares_) {\n        uint256 supply_ = totalSupply;  // Cache to stack.\n\n        shares_ = supply_ == 0 ? assets_ : (assets_ * supply_) / totalAssets();\n    }\n\n    function totalAssets() public view returns (uint256 assets_) {\n        assets_ = IERC20Like(asset).balanceOf(address(this));\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding RLP data with cast to-rlp\nDESCRIPTION: This example demonstrates how to use `cast to-rlp` to encode a JSON array of hex strings into RLP format.  The input is a string representing a JSON array of hex strings. The output is the RLP encoded representation of the input data.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-rlp.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"cast to-rlp '[\"0xaa\",\"0xbb\",\"cc\"]'\"\n```\n\n----------------------------------------\n\nTITLE: Using FFI for UTF8 String Output in Solidity\nDESCRIPTION: Shows how to use the FFI cheatcode to execute an echo command with UTF8 string output, then assert the result directly.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/ffi.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring[] memory inputs = new string[](3);\ninputs[0] = \"echo\";\ninputs[1] = \"-n\";\ninputs[2] = \"gm\";\n\nbytes memory res = vm.ffi(inputs);\nassertEq(string(res), \"gm\");\n```\n\n----------------------------------------\n\nTITLE: Mocking Exact Call Example\nDESCRIPTION: Example demonstrating how to mock an exact call to a token's balanceOf function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-call.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMockCall() public {\n    vm.mockCall(\n        address(0),\n        abi.encodeWithSelector(MyToken.balanceOf.selector, address(1)),\n        abi.encode(10)\n    );\n    assertEq(IERC20(address(0)).balanceOf(address(1)), 10);\n}\n```\n\n----------------------------------------\n\nTITLE: MockCallRevert Custom Error Example\nDESCRIPTION: Example demonstrating how to mock a revert with a custom error type.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-call-revert.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMockCallRevertWithCustomError() public {\n    bytes memory customError = abi.encodeWithSelector(TestError.selector, \"ERROR_MESSAGE\");\n    vm.mockCallRevert(\n        address(0),\n        abi.encodeWithSelector(MyToken.balanceOf.selector, address(1)),\n        customError\n    );\n    vm.expectRevert(customError);\n    IERC20(address(0)).balanceOf(address(1));\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Less Than in Solidity\nDESCRIPTION: Defines internal functions to check if one uint256 or int256 value is strictly less than another. It optionally allows specifying an error message that is included in the revert string if the assertion fails. These functions are crucial in validating conditions where out-of-range values could lead to computational errors.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertLt.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLt(uint256 left, uint256 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLt(uint256 left, uint256 right, string memory err) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLt(int256 left, int256 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLt(int256 left, int256 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Complex Test Trace Example with Gas Usage\nDESCRIPTION: Shows a real-world example of a test trace with multiple function calls, including gas usage measurements and return values for an ownership test.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/traces.md#2025-04-22_snippet_1\n\nLANGUAGE: ignore\nCODE:\n```\n  [24661] OwnerUpOnlyTest::testIncrementAsOwner()\n    ├─ [2262] OwnerUpOnly::count()\n    │   └─ ← 0\n    ├─ [20398] OwnerUpOnly::increment()\n    │   └─ ← ()\n    ├─ [262] OwnerUpOnly::count()\n    │   └─ ← 1\n    └─ ← ()\n```\n\n----------------------------------------\n\nTITLE: File System Cheatcode Function Signatures\nDESCRIPTION: Core file system manipulation function signatures including reading, writing, and managing files and directories. Includes detailed function comments explaining parameters and behavior.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/fs.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readFile(string calldata) external returns (string memory);\nfunction readFileBinary(string calldata path) external view returns (bytes memory data);\nfunction readDir(string calldata path) external view returns (DirEntry[] memory entries);\nfunction readLine(string calldata) external returns (string memory);\nfunction readLink(string calldata linkPath) external view returns (string memory targetPath);\nfunction writeFile(string calldata, string calldata) external;\nfunction writeLine(string calldata, string calldata) external;\nfunction closeFile(string calldata) external;\nfunction removeFile(string calldata) external;\nfunction exists(string calldata) external returns (bool);\nfunction isFile(string calldata) external returns (bool);\nfunction isDir(string calldata) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Asserting Approximate Equality with Uint256 in Solidity\nDESCRIPTION: This function checks if two uint256 values are approximately equal within a specified percentage delta. The equality is asserted using decimals to express the specific ratio. An optional error message can also be provided to clarify the assertion failure.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqRelDecimal.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) internal;\n```\n\n----------------------------------------\n\nTITLE: Using console.log for logging\nDESCRIPTION: This code snippet demonstrates the use of the `console.log` function for logging from the Forge Standard Library. `alice.balance` is logged to the console. It requires `console.sol` or `console2.sol` import.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/README.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nconsole.log(alice.balance); // or `console2`\n```\n\n----------------------------------------\n\nTITLE: Using rememberKey with Derived Private Key in Solidity\nDESCRIPTION: Example of deriving a private key from a mnemonic, storing it using rememberKey, and using it for broadcasting transactions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/remember-key.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory mnemonic = \"test test test test test test test test test test test junk\";\nuint256 privateKey = vm.deriveKey(mnemonic, 0);\naddress deployer = vm.rememberKey(privateKey);\n\nvm.startBroadcast(deployer);\n...\nvm.stopBroadcast();\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Cast Call\nDESCRIPTION: This text block provides detailed usage instructions for the cast call command, including a description of commands, arguments, options, and how to interact with the Ethereum blockchain. It helps users understand how to properly format their command calls.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/call.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast call [OPTIONS] [TO] [SIG] [ARGS]... [COMMAND]\n\nCommands:\n  --create  ignores the address field and simulates creating a contract\n  help      Print this message or the help of the given subcommand(s)\n\nArguments:\n  [TO]\n          The destination of the transaction\n\n  [SIG]\n          The signature of the function to call\n\n  [ARGS]...\n          The arguments of the function to call\n\nOptions:\n      --data <DATA>\n          Raw hex-encoded data for the transaction. Used instead of [SIG] and\n          [ARGS]\n\n      --trace\n          Forks the remote rpc, executes the transaction locally and prints a\n          trace\n\n      --debug\n          Opens an interactive debugger. Can only be used with `--trace`\n\n      --decode-internal\n           \n      --labels <LABELS>\n          Labels to apply to the traces; format: `address:label`. Can only be\n          used with `--trace`\n\n      --evm-version <EVM_VERSION>\n          The EVM Version to use. Can only be used with `--trace`\n\n  -b, --block <BLOCK>\n          The block height to query at.\n          \n          Can also be the tags earliest, finalized, safe, latest, or pending.\n\n      --odyssey\n          Enable Odyssey features\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nTransaction options:\n  --gas-limit <GAS_LIMIT>\n          Gas limit for the transaction\n          \n          [env: ETH_GAS_LIMIT=]\n\n  --gas-price <PRICE>\n          Gas price for legacy transactions, or max fee per gas for EIP1559\n          transactions, either specified in wei, or as a string with a unit\n          type.\n          \n          Examples: 1ether, 10gwei, 0.01ether\n          \n          [env: ETH_GAS_PRICE=]\n\n  --priority-gas-price <PRICE>\n          Max priority fee per gas for EIP1559 transactions\n          \n          [env: ETH_PRIORITY_GAS_PRICE=]\n\n  --value <VALUE>\n          Ether to send in the transaction, either specified in wei, or as a\n          string with a unit type.\n          \n          Examples: 1ether, 10gwei, 0.01ether\n\n  --nonce <NONCE>\n          Nonce for the transaction\n\n  --legacy\n          Send a legacy transaction instead of an EIP1559 transaction.\n          \n          This is automatically enabled for common networks without EIP1559.\n\n  --blob\n          Send a EIP-4844 blob transaction\n\n  --blob-gas-price <BLOB_PRICE>\n          Gas price for EIP-4844 blob transaction\n          \n          [env: ETH_BLOB_GAS_PRICE=]\n\n  --auth <AUTH>\n          EIP-7702 authorization list.\n          \n          Can be either a hex-encoded signed authorization or an address.\n\n  --access-list [<ACCESS_LIST>]\n          EIP-2930 access list.\n          \n          Accepts either a JSON-encoded access list or an empty value to create\n          the access list via an RPC call to `eth_createAccessList`. To retrieve\n          only the access list portion, use the `cast access-list` command.\n\nEthereum options:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>). \n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\nWallet options - raw:\n  -f, --from <ADDRESS>\n          The sender account\n          \n          [env: ETH_FROM=]\n\n  -i, --interactive\n          Open an interactive prompt to enter your private key\n\n      --private-key <RAW_PRIVATE_KEY>\n          Use the provided private key\n\n      --mnemonic <MNEMONIC>\n          Use the mnemonic phrase of mnemonic file at the specified path\n\n      --mnemonic-passphrase <PASSPHRASE>\n          Use a BIP39 passphrase for the mnemonic\n\n      --mnemonic-derivation-path <PATH>\n          The wallet derivation path.\n          \n          Works with both --mnemonic-path and hardware wallets.\n\n      --mnemonic-index <INDEX>\n          Use the private key from the given mnemonic index.\n          \n          Used with --mnemonic-path.\n          \n          [default: 0]\n\n      --with-local-artifacts\n          Use current project artifacts for trace decoding\n          \n          [aliases: la]\n\nWallet options - keystore:\n  --keystore <PATH>\n          Use the keystore in the given folder or file\n          \n          [env: ETH_KEYSTORE=]\n\n  --account <ACCOUNT_NAME>\n          Use a keystore from the default keystores folder\n          (~/.foundry/keystores) by its filename\n          \n          [env: ETH_KEYSTORE_ACCOUNT=]\n\n  --password <PASSWORD>\n          The keystore password.\n          \n          Used with --keystore.\n\n  --password-file <PASSWORD_FILE>\n          The keystore password file path.\n          \n          Used with --keystore.\n          \n          [env: ETH_PASSWORD=]\n\nWallet options - hardware wallet:\n  -l, --ledger\n          Use a Ledger hardware wallet\n\n  -t, --trezor\n          Use a Trezor hardware wallet\n\nWallet options - remote:\n  --aws\n          Use AWS Key Management Service\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Flatten Solidity contract\nDESCRIPTION: This command flattens the specified Solidity contract and outputs the result to standard output. It resolves all imports and combines them into a single file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-flatten.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge flatten src/Contract.sol\n```\n\n----------------------------------------\n\nTITLE: expectEmit Signature (Basic Version)\nDESCRIPTION: The basic signature of the expectEmit cheatcode function without any parameters. This version checks all topics and data.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-emit.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expectEmit() external;\n```\n\n----------------------------------------\n\nTITLE: expectEmit Signature with Topic Filters and Emitter Address\nDESCRIPTION: The most comprehensive expectEmit signature that allows selective checking of topics and data, plus verification of the emitter address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-emit.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expectEmit(\n    bool checkTopic1,\n    bool checkTopic2,\n    bool checkTopic3,\n    bool checkData,\n    address emitter\n) external;\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Bool in Solidity\nDESCRIPTION: This function asserts that two boolean values are equal in a Solidity contract. It can optionally include a custom error message. This function is commonly used in testing or verification scenarios where boolean equivalence is critical.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bool left, bool right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bool left, bool right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Defining envOr Function Signatures in Solidity\nDESCRIPTION: These function signatures define the envOr function for various data types including bool, uint256, int256, address, bytes32, string, and bytes. It also includes array versions of these types.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-or.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction envOr(string calldata key, bool defaultValue) external returns (bool value);\nfunction envOr(string calldata key, uint256 defaultValue) external returns (uint256 value);\nfunction envOr(string calldata key, int256 defaultValue) external returns (int256 value);\nfunction envOr(string calldata key, address defaultValue) external returns (address value);\nfunction envOr(string calldata key, bytes32 defaultValue) external returns (bytes32 value);\nfunction envOr(string calldata key, string calldata defaultValue) external returns (string memory value);\nfunction envOr(string calldata key, bytes calldata defaultValue) external returns (bytes memory value);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction envOr(string calldata key, string calldata delimiter, bool[] calldata defaultValue) external returns (bool[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, uint256[] calldata defaultValue) external returns (uint256[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, int256[] calldata defaultValue) external returns (int256[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, address[] calldata defaultValue) external returns (address[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, bytes32[] calldata defaultValue) external returns (bytes32[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, string[] calldata defaultValue) external returns (string[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, bytes[] calldata defaultValue) external returns (bytes[] memory value);\n```\n\n----------------------------------------\n\nTITLE: Decoding Output Data for balanceOf Function\nDESCRIPTION: Demonstrates decoding ABI-encoded output data for a balanceOf function call, which typically returns a token balance\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-decode-abi.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast decode-abi \"balanceOf(address)(uint256)\" \\n  0x000000000000000000000000000000000000000000000000000000000000000a\n```\n\n----------------------------------------\n\nTITLE: File Read/Write Example with Full Permissions\nDESCRIPTION: Example demonstrating reading and writing to a file with read-write permissions configured.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/fs.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nfs_permissions = [{ access = \"read-write\", path = \"./\"}]\n```\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory path = \"file.txt\";\nstring memory data = \"hello world\";\nvm.writeFile(path, data);\n\nassertEq(vm.readFile(path), data);\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Formatter for Solidity with Foundry\nDESCRIPTION: This JSON snippet sets up VSCode to use the built-in Foundry formatter for Solidity files. It enables format on save and sets the default formatter for Solidity files.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vscode.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.formatOnSave\": true,\n  \"[solidity]\": {\n    \"editor.defaultFormatter\": \"JuanBlanco.solidity\" \n  },\n  \"solidity.formatter\": \"forge\",\n}\n```\n\n----------------------------------------\n\nTITLE: Reading EIP1559 Transactions\nDESCRIPTION: Example demonstrating how to read EIP1559 transactions from broadcast artifacts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-json.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testReadEIP1559Transactions() public {\n    string memory root = vm.projectRoot();\n    string memory path = string.concat(root, \"/src/test/fixtures/broadcast.log.json\");\n    Tx1559[] memory transactions = readTx1559s(path);\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Tx1559 {\n    string[] arguments;\n    address contractAddress;\n    string contractName;\n    string functionSig;\n    bytes32 hash;\n    Tx1559Detail txDetail;\n    string opcode;\n}\n\nstruct Tx1559Detail {\n    AccessList[] accessList;\n    bytes data;\n    address from;\n    uint256 gas;\n    uint256 nonce;\n    address to;\n    uint256 txType;\n    uint256 value;\n}\n```\n\n----------------------------------------\n\nTITLE: WriteJson Function Signatures in Solidity\nDESCRIPTION: Function signatures for writeJson showing two variations - one for writing a new JSON file and another for updating existing JSON files with a value key.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/write-json.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction writeJson(string calldata json, string calldata path) external;\n\nfunction writeJson(string calldata json, string calldata path, string calldata valueKey) external;\n```\n\n----------------------------------------\n\nTITLE: Nonce Option Description in Rust\nDESCRIPTION: This snippet describes the `--nonce` option for the `cast compute-address` command, allowing users to specify the account's nonce. If not provided, it defaults to the latest fetched nonce from the RPC service. This is crucial for correctly calculating the contract address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-compute-address.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"--nonce *nonce*  \\n\\t\\t\\t\\tThe nonce of the account. Defaults to the latest nonce, fetched from the RPC.\"\n```\n\n----------------------------------------\n\nTITLE: Transaction Replay in Debugger Mode\nDESCRIPTION: Replay a transaction using the interactive debugger for step-by-step analysis and investigation\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-run.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncast run --debug \\\n  0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca\n```\n\n----------------------------------------\n\nTITLE: Cast Chain Command Usage Documentation\nDESCRIPTION: Detailed usage text for the cast chain command, including RPC configuration, authentication, and display options\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/chain.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast chain [OPTIONS]\n\nOptions:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Testing Low-Level Call Reverts in Solidity\nDESCRIPTION: Example of using expectRevert with low-level calls, demonstrating how to check if the revert occurred as expected.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-revert.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testLowLevelCallRevert() public {\n    vm.expectRevert(bytes(\"error message\"));\n    (bool revertsAsExpected, ) = address(myContract).call(myCalldata);\n    assertTrue(revertsAsExpected, \"expectRevert: call did not revert\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using getRecordedLogs to Capture and Validate Event Data in Solidity Tests\nDESCRIPTION: Example demonstrating how to use getRecordedLogs to capture emitted events and validate their contents. The example shows recording events, accessing log data and topics, and handling the consumption behavior of getRecordedLogs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-recorded-logs.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n/// event LogTopic1(\n///   uint256 indexed topic1,\n///   bytes data\n/// );\n\n/// event LogTopic12(\n///   uint256 indexed topic1,\n///   uint256 indexed topic2,\n///   bytes data\n/// );\n\n/// bytes memory testData0 = \"Some data\";\n/// bytes memory testData1 = \"Other data\";\n\n\n// Start the recorder\nvm.recordLogs();\n\nemit LogTopic1(10, testData0);\nemit LogTopic12(20, 30, testData1);\n\n// Notice that your entries are <Interface>.Log[]\n// as opposed to <instance>.Log[]\nVm.Log[] memory entries = vm.getRecordedLogs();\n\nassertEq(entries.length, 2);\n\n// Recall that topics[0] is the event signature\nassertEq(entries[0].topics.length, 2);\nassertEq(entries[0].topics[0], keccak256(\"LogTopic1(uint256,bytes)\"));\nassertEq(entries[0].topics[1], bytes32(uint256(10)));\n// assertEq won't compare bytes variables. Try with strings instead.\nassertEq(abi.decode(entries[0].data, (string)), string(testData0));\n\nassertEq(entries[1].topics.length, 3);\nassertEq(entries[1].topics[0], keccak256(\"LogTopic12(uint256,uint256,bytes)\"));\nassertEq(entries[1].topics[1], bytes32(uint256(20)));\nassertEq(entries[1].topics[2], bytes32(uint256(30)));\nassertEq(abi.decode(entries[1].data, (string)), string(testData1));\n\n// Emit another event\nemit LogTopic1(40, testData0);\n\n// Your last read consumed the recorded logs,\n// you will only get the latest emitted even after that call\nentries = vm.getRecordedLogs();\n\nassertEq(entries.length, 1);\n\nassertEq(entries[0].topics.length, 2);\nassertEq(entries[0].topics[0], keccak256(\"LogTopic1(uint256,bytes)\"));\nassertEq(entries[0].topics[1], bytes32(uint256(40)));\nassertEq(abi.decode(entries[0].data, (string)), string(testData0));\n```\n\n----------------------------------------\n\nTITLE: Importing Test.sol for Forge Std Testing\nDESCRIPTION: This code snippet imports the `Test.sol` contract from the Forge Standard Library. This provides the complete Forge Std testing experience. It's necessary to import `Test.sol` and inherit from `Test` in your test contract to use Forge's testing functionalities.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/README.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Test} from \"forge-std/Test.sol\";\n```\n\n----------------------------------------\n\nTITLE: Internal State Gas Usage Example\nDESCRIPTION: Example demonstrating gas usage capture for multiple state modifications within a contract using multiple start/stop snapshot pairs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/gas-snapshots.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SnapshotGasTest is Test {\n    uint256 public slot0;\n\n    /// Writes to `snapshots/SnapshotGasTest.json` group with name `internalA`, `internalB`, and `internalC`.\n    function testSnapshotGas() public {\n        vm.startSnapshotGas(\"internalA\");\n        slot0 = 1;\n        vm.stopSnapshotGas();\n\n        vm.startSnapshotGas(\"internalB\");\n        slot0 = 2;\n        vm.stopSnapshotGas();\n\n        vm.startSnapshotGas(\"internalC\");\n        slot0 = 0;\n        vm.stopSnapshotGas();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prank Usage Example\nDESCRIPTION: Demonstrates practical usage of prank to pass a require check that validates msg.sender against an owner address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prank.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n/// function withdraw() public {\n///     require(msg.sender == owner);\n\nvm.prank(owner);\nmyContract.withdraw(); // [PASS]\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with CREATE2 Opcode in Solidity\nDESCRIPTION: This Solidity snippet demonstrates how to deploy a contract using the CREATE2 opcode by passing a salt parameter, allowing for deterministic address generation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/deterministic-deployments-using-create2.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// Passing the `salt` parameter to the CREATE2 opcode\nCounter counter = new Counter{salt: salt}();\n```\n\n----------------------------------------\n\nTITLE: Mocking Public Variable Example\nDESCRIPTION: Complete example showing how to mock a public variable's getter function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-call.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Example {\n    uint256 public number = 10;\n}\n\ncontract ExampleTest is Test {\n    Example public example;\n\n    function setUp() public {\n        example = new Example();\n    }\n\n    function testMockPublicVariable() public {\n        assertEq(example.number(), 10);\n        vm.mockCall(\n            address(example),\n            abi.encodeWithSelector(bytes4(keccak256(\"number()\"))),\n            abi.encode(5)\n        );\n        assertEq(example.number(), 5);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Full Storage Layout of Milady Contract (Bash)\nDESCRIPTION: This example shows how to use `cast storage` to retrieve the full storage layout of the Milady contract.  This requires the contract to be verified on Etherscan with a Solidity version > 0.6.5 or you must be in a Forge project with a local contract matching the deployed bytecode. It requires the `cast` command-line tool to be installed and configured with a valid Ethereum RPC endpoint.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n```sh\ncast storage 0x5Af0D9827E0c53E4799BB226655A1de152A425a5\n```\n```\n\n----------------------------------------\n\nTITLE: Solidity `bound` function usage example\nDESCRIPTION: This code snippet demonstrates how to use the `bound` function in Solidity. It shows an example where an input value `input` is passed to the `bound` function along with a minimum value of 99 and a maximum value of 101. This will effectively constrain the possible values of `input` during fuzz testing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/bound.md#2025-04-22_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\n```solidity\ninput = bound(input, 99, 101);\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Help with Forge Commands - Shell\nDESCRIPTION: This shell snippet demonstrates how to invoke the `forge help` command to get detailed help for a specific subcommand. It requires `forge` to be installed. The command displays detailed usage instructions and options for the subcommand specified. For example, 'forge help build' gives help for the build subcommand. An alternative is using the '--help' flag directly with any command, like 'forge build --help'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-help.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge help build\n```\n\nLANGUAGE: sh\nCODE:\n```\nforge build --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Gas Reports in foundry.toml\nDESCRIPTION: This snippet shows how to configure gas reports for specific contracts or all contracts in the foundry.toml file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/gas-reports.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ngas_reports = [\"MyContract\", \"MyContractFactory\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\ngas_reports = [\"*\"]\n```\n\n----------------------------------------\n\nTITLE: Using Std Math in Solidity Tests\nDESCRIPTION: Demonstrates the use of Std Math library to perform mathematical operations not natively available in Solidity, such as finding the absolute value of a number.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/forge-std.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n// get the absolute value of -10\nuint256 ten = stdMath.abs(-10)\n```\n\n----------------------------------------\n\nTITLE: Building a Forge Project\nDESCRIPTION: This command builds the Solidity smart contracts within a Forge project. It compiles the contracts and generates the necessary build artifacts for deployment and testing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nforge build\n```\n```\n\n----------------------------------------\n\nTITLE: Generating and Viewing Gas Snapshots with Forge\nDESCRIPTION: Demonstrates how to generate a gas snapshot using the 'forge snapshot' command and view the results. The snapshot shows gas usage for various ERC20 test functions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/gas-function-snapshots.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge snapshot\n$ cat .gas-snapshot\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nERC20Test:testApprove() (gas: 31162)\nERC20Test:testBurn() (gas: 59875)\nERC20Test:testRevertTransferFromInsufficientAllowance() (gas: 81034)\nERC20Test:testRevertTransferFromInsufficientBalance() (gas: 81662)\nERC20Test:testRevertTransferInsufficientBalance() (gas: 52882)\nERC20Test:testInfiniteApproveTransferFrom() (gas: 90167)\nERC20Test:testMetadata() (gas: 14606)\nERC20Test:testMint() (gas: 53830)\nERC20Test:testTransfer() (gas: 60473)\nERC20Test:testTransferFrom() (gas: 84152)\n```\n\n----------------------------------------\n\nTITLE: Building a Project with forge\nDESCRIPTION: Basic example of using the forge build command to compile a project.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nforge build\n```\n\n----------------------------------------\n\nTITLE: Defining expectRevert Function Signatures in Solidity\nDESCRIPTION: Various function signatures for the expectRevert and expectPartialRevert functions, showing different parameter combinations including message, reverter address, and count.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-revert.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expectRevert() external;\n\nfunction expectRevert(bytes4 message) external;\n\nfunction expectRevert(bytes4 message, address reverter) external;\n\nfunction expectRevert(bytes4 message, uint64 count) external;\n\nfunction expectRevert(bytes4 message, address reverter, uint64 count) external;\n\nfunction expectRevert(bytes calldata message) external;\n\nfunction expectRevert(bytes calldata message, address reverter) external;\n\nfunction expectRevert(bytes calldata message, uint64 count) external;\n\nfunction expectRevert(bytes calldata message, address reverter, uint64 count) external;\n\nfunction expectRevert(address reverter) external;\n\nfunction expectRevert(uint64 count) external;\n\nfunction expectRevert(address reverter, uint64 count) external;\n\nfunction expectPartialRevert(bytes4 message) external;\n\nfunction expectPartialRevert(bytes4 message, address reverter) external;\n```\n\n----------------------------------------\n\nTITLE: MockCallRevert Function Signatures\nDESCRIPTION: Function signatures for mockCallRevert cheatcode, including both standard and value-specific versions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-call-revert.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mockCallRevert(address where, bytes calldata data, bytes calldata retdata) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mockCallRevert(\n    address where,\n    uint256 value,\n    bytes calldata data,\n    bytes calldata retdata\n) external;\n```\n\n----------------------------------------\n\nTITLE: Using FFI for ABI Encoded Output in Solidity\nDESCRIPTION: Demonstrates how to use the FFI cheatcode to execute an echo command with ABI encoded output, then decode and assert the result.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/ffi.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring[] memory inputs = new string[](3);\ninputs[0] = \"echo\";\ninputs[1] = \"-n\";\n// ABI encoded \"gm\", as a hex string\ninputs[2] = \"0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002676d000000000000000000000000000000000000000000000000000000000000\";\n\nbytes memory res = vm.ffi(inputs);\nstring memory output = abi.decode(res, (string));\nassertEq(output, \"gm\");\n```\n\n----------------------------------------\n\nTITLE: Usage Information for Format Units Command\nDESCRIPTION: This text snippet outlines the usage, arguments, and options available for the 'cast format-units' command. It details how to specify values, units for formatting, and additional command-line options to alter command behavior.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/format-units.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast format-units [OPTIONS] [VALUE] [UNIT]\\n\\nArguments:\\n  [VALUE]\\n          The value to format\\n\\n  [UNIT]\\n          The unit to format to\\n\\n          [default: 18]\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n\\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n\\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n\\n          Depending on the context the verbosity levels have different meanings.\\n\\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slot with Bytes4 Selector\nDESCRIPTION: Example of using the sig method with a bytes4 selector to find a storage slot for a specific function and key.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/sig.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 slot = stdstore\n    .target(addr)\n    .sig(addr.fun.selector)\n    .with_key(1)\n    .find();\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot State Cheatcode Signatures in Solidity\nDESCRIPTION: This snippet defines the function signatures for snapshot state cheatcodes in Foundry. It includes functions for creating, reverting, and deleting state snapshots.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/state-snapshots.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n/// Snapshot the current state of the evm.\n/// Returns the ID of the snapshot that was created.\n/// To revert a snapshot use `revertToState`.\nfunction snapshotState() external returns (uint256 snapshotId);\n\n/// Revert the state of the EVM to a previous snapshot\n/// Takes the snapshot ID to revert to.\n/// Returns `true` if the snapshot was successfully reverted.\n/// Returns `false` if the snapshot does not exist.\n/// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteStateSnapshot`.\nfunction revertToState(uint256 snapshotId) external returns (bool success);\n\n/// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\n/// Takes the snapshot ID to revert to.\n/// Returns `true` if the snapshot was successfully reverted and deleted.\n/// Returns `false` if the snapshot does not exist.\nfunction revertToStateAndDelete(uint256 snapshotId) external returns (bool success);\n\n/// Removes the snapshot with the given ID created by `snapshot`.\n/// Takes the snapshot ID to delete.\n/// Returns `true` if the snapshot was successfully deleted.\n/// Returns `false` if the snapshot does not exist.\nfunction deleteStateSnapshot(uint256 snapshotId) external returns (bool success);\n\n/// Removes _all_ snapshots previously created by `snapshot`.\nfunction deleteStateSnapshots() external;\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzz Test with In-line Comments in Solidity\nDESCRIPTION: Example showing how to configure a fuzz test with in-line comments. This demonstrates setting the number of fuzz runs for different profiles and enabling log display for the test.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/inline-test-config.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract MyTest is Test {\n  /// forge-config: default.fuzz.runs = 100\n  /// forge-config: ci.fuzz.runs = 500\n  /// forge-config: default.fuzz.show-logs = true\n  function test_SimpleFuzzTest(uint256 x) public {\n    // --- snip ---\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mockCalls Function Signatures in Solidity\nDESCRIPTION: Function signatures for the `mockCalls` function in Solidity. Two overloads are provided: one for mocking calls without value, and another for mocking calls with a specified value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-calls.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mockCalls(address where, bytes calldata data, bytes[] calldata retdata) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mockCalls(\n    address where,\n    uint256 value,\n    bytes calldata data,\n    bytes[] calldata retdata\n) external;\n```\n\n----------------------------------------\n\nTITLE: Displaying Forge Build Help Information in Bash\nDESCRIPTION: This command shows the help information for the 'forge build' command, which is used to build smart contracts in Foundry projects.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/build.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge build --help\n```\n\n----------------------------------------\n\nTITLE: Using rememberKey with Environment Variable in Solidity\nDESCRIPTION: Example of loading a private key from an environment variable, storing it using rememberKey, and using it for broadcasting transactions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/remember-key.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\naddress deployer = vm.rememberKey(vm.envUint(\"PRIVATE_KEY\"));\n\nvm.startBroadcast(deployer);\n...\nvm.stopBroadcast();\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract without Arguments\nDESCRIPTION: Deploys a contract by its filename, assuming contract name matches filename, without passing constructor arguments\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/deployCode.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployCode(string memory what) public returns (address);\n```\n\n----------------------------------------\n\nTITLE: Usage information for cast estimate --create\nDESCRIPTION: This text block provides the usage information for `cast estimate --create`. It shows the required arguments (bytecode of the contract, constructor signature, constructor arguments) and available options (value, help, threads, color, json, quiet, verbosity) for the command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/estimate/--create.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast estimate --create [OPTIONS] <CODE> [SIG] [ARGS]...\n\nArguments:\n  <CODE>\n          The bytecode of contract\n\n  [SIG]\n          The signature of the constructor\n\n  [ARGS]...\n          Constructor arguments\n\nOptions:\n      --value <VALUE>\n          Ether to send in the transaction\n          \n          Either specified in wei, or as a string with a unit type:\n          \n          Examples: 1ether, 10gwei, 0.01ether\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Decoding input data for a transfer call with cast decode-calldata\nDESCRIPTION: This example demonstrates how to use the cast decode-calldata command to decode ABI-encoded input data for an Ethereum transfer function call. The command takes the function signature in the format 'transfer(address,uint256)' followed by the calldata hex string.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-decode-calldata.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast decode-calldata \"transfer(address,uint256)\" \\\n  0xa9059cbb000000000000000000000000e78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0000000000000000000000000000000000000000000000000008a8e4b1a3d8000\n```\n\n----------------------------------------\n\nTITLE: Creating Forks in Foundry - Basic Function Signatures\nDESCRIPTION: Function signatures for createFork that allow creating a new fork with the latest block, a specific block number, or at a specific transaction with replay functionality.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-fork.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork\nfunction createFork(string calldata urlOrAlias) external returns (uint256)\n```\n\nLANGUAGE: solidity\nCODE:\n```\n// Creates a new fork with the given endpoint and block and returns the identifier of the fork\nfunction createFork(string calldata urlOrAlias, uint256 block) external returns (uint256);\n```\n\nLANGUAGE: solidity\nCODE:\n```\n// Creates a new fork with the given endpoint and at the block the given transaction was mined in, and replays all transaction mined in the block before the transaction\nfunction createFork(string calldata urlOrAlias, bytes32 transaction) external returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Using copyStorage Cheatcode in a Test Function\nDESCRIPTION: Test function that demonstrates how to use the copyStorage cheatcode to copy storage values from one contract instance to another.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/copy-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testCopyStorage() public {\n    Counter original = new Counter();\n    original.setCount(1000);\n    Counter copy = new Counter();\n    copy.setCount(1);\n    // Check initial count on copy.\n    assertEq(copy.count(), 1);\n\n    vm.copyStorage(address(original), address(copy));\n    // Value is copied from first contract to copy.\n    assertEq(copy.count(), 1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Ether to an ENS Address Using Ledger\nDESCRIPTION: Example of sending 0.1 ether to an ENS name (vitalik.eth) using a Ledger hardware wallet for signing the transaction.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-send.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast send --ledger vitalik.eth --value 0.1ether\n```\n\n----------------------------------------\n\nTITLE: Solidity `assertGt` Signature (int256)\nDESCRIPTION: This Solidity function signature defines the `assertGt` function, which asserts that the `left` int256 parameter is strictly greater than the `right` int256 parameter. The function reverts if the assertion fails.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGt.md#2025-04-22_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\n\"function assertGt(int256 left, int256 right) internal;\"\n```\n\n----------------------------------------\n\nTITLE: Creating Bounded Input Parameters for Handler Functions\nDESCRIPTION: Handler function that uses the bound() helper to constrain input values within reasonable ranges, ensuring tests can run with fail_on_revert enabled.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit(uint256 assets) external {\n    assets = bound(assets, 0, 1e30);\n\n    asset.mint(address(this), assets);\n\n    asset.approve(address(token), assets);\n\n    uint256 beforeBalance = asset.balanceOf(address(this));\n\n    uint256 shares = token.deposit(assets, address(this));\n\n    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);\n\n    sumBalanceOf += shares;\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality with Decimal Formatting in Solidity\nDESCRIPTION: The 'assertEqDecimal' function is used to assert that two numbers are equal, considering the specified number of decimals. It includes various overloads that handle both unsigned and signed integers, with an optional error message to be appended to the revert string. This ensures accurate and precise equality checks in smart contracts, using decimals when formatting the error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEqDecimal.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEqDecimal(uint256 left, uint256 right, uint256 decimals) internal\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEqDecimal(int256 left, int256 right, uint256 decimals) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Importing Private Key from Interactive Prompt - Shell\nDESCRIPTION: This snippet demonstrates how to import a private key into an encrypted keystore interactively using the 'cast wallet import' command. It utilizes the account name 'BOB' and prompts the user for additional input during the process.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-import.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast wallet import BOB --interactive\n```\n\n----------------------------------------\n\nTITLE: Failed expectEmit Example\nDESCRIPTION: Example illustrating a failing test case where the expected event is not emitted by the contract call, causing the expectEmit assertion to fail.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-emit.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed from, address indexed to, uint256 amount);\n\nfunction testERC20EmitsTransfer() public {\n    // We check that the token is the event emitter by passing the address as the fifth argument.\n    vm.expectEmit(true, true, false, true, address(myToken));\n    emit MyToken.Transfer(address(this), address(1), 10);\n\n    // We perform an unrelated call that won't emit the intended event,\n    // making the cheatcode fail.\n    myToken.approve(address(this), 1e18);\n    // We perform the call, but it will have no effect as the cheatcode has already failed.\n    myToken.transfer(address(1), 10);\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Contract ABI in JSON Format - Shell Script\nDESCRIPTION: Execute 'forge inspect' with the '--json' option to produce the ABI of a contract in JSON format. This requires specifying the contract name and 'abi' field, ideal for integrations needing structured data.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-inspect.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge inspect --json MyContract abi\n```\n\n----------------------------------------\n\nTITLE: Managing Hoax Functions in Solidity\nDESCRIPTION: The `hoax` function in Solidity is designed to facilitate testing by allowing the simulation of a prank from a specified address. If an ether balance is not provided, it defaults to 2^128 wei. It is used to mimic the presence of funds when testing smart contracts. The function can take additional parameters to specify originating address and ether amount.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/hoax.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction hoax(address who) public;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction hoax(address who, uint256 give) public;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction hoax(address who, address origin) public;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction hoax(address who, address origin, uint256 give) public;\n```\n\n----------------------------------------\n\nTITLE: Generating Gas Report using Forge CLI\nDESCRIPTION: This example illustrates how to generate a gas report for the project's tests by executing the `forge test` command with the `--gas-report` flag. It provides insights into gas usage of transactions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-test.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge test --gas-report\n```\n\n----------------------------------------\n\nTITLE: Creating a Fork at Latest Block\nDESCRIPTION: Example of creating and selecting a mainnet fork at the latest block number. The function returns a fork ID and sets the current block to the latest block on mainnet.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-select-fork.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 forkId = vm.createSelectFork(MAINNET_RPC_URL);\n\nassertEq(block.number, 15_171_037); // as of time of writing, 2022-07-19 04:55:27 UTC\n```\n\n----------------------------------------\n\nTITLE: Expecting Multiple Token Transfer Calls in Solidity Test\nDESCRIPTION: This example shows how to use expectCall to expect at least two calls to the transfer function of a token contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-call.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\naddress alice = makeAddr(\"alice\");\nemit log_address(alice);\nvm.expectCall(\n  address(token), abi.encodeCall(token.transfer, (alice, 10))\n);\nvm.expectCall(\n  address(token), abi.encodeCall(token.transfer, (alice, 10))\n);\ntoken.transfer(alice, 10);\ntoken.transfer(alice, 10);\ntoken.transfer(alice, 10);\n// [PASS]\n```\n\n----------------------------------------\n\nTITLE: Creating a Fork at Specific Block Number\nDESCRIPTION: Example of creating and selecting a mainnet fork at a specific historical block number (1,337,000). This allows testing against a known blockchain state.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-select-fork.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 forkId = vm.createSelectFork(MAINNET_RPC_URL, 1_337_000);\n\nassertEq(block.number, 1_337_000);\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys from Array Objects in JSON using Solidity\nDESCRIPTION: This example illustrates how to use parseJsonKeys to extract keys from an object within an array in a JSON string.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-json-keys.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory json = '{\"root_key\": [{\"a\": 1, \"b\": 2}]}';\nstring[] memory keys = vm.parseJsonKeys(json, \".root_key[0]\"); // [\"a\", \"b\"]\n```\n\n----------------------------------------\n\nTITLE: Using Assume Cheatcode in Fuzz Test\nDESCRIPTION: Example of using the 'assume' cheatcode to exclude certain cases in fuzz testing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fuzz-testing.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testFuzz_Withdraw(uint96 amount) public {\n    vm.assume(amount > 0.1 ether);\n    // snip\n}\n```\n\n----------------------------------------\n\nTITLE: expectEmit Signature with Topic Filters\nDESCRIPTION: The expectEmit signature with boolean parameters to specify which topics and data should be checked. Allows selective checking of event components.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-emit.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expectEmit(\n    bool checkTopic1,\n    bool checkTopic2,\n    bool checkTopic3,\n    bool checkData\n) external;\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Hex String Example\nDESCRIPTION: Example demonstrating conversion of bytes to a hexadecimal string representation with 0x prefix using the cheats.toString function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/to-string.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nbytes memory testBytes = hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\";\nstring memory stringBytes = cheats.toString(testBytes);\nassertEq(\"0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\", stringBytes);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Call Depth in Solidity Contracts\nDESCRIPTION: An example showing how call depth changes when making external calls between contracts A, B, and C.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-revert.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n0 → Contract A (calls B) → 1 → Contract B (calls C) → 2 → Contract C (returns) → 1 → Contract B (returns) → 0\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Private Key in Solidity\nDESCRIPTION: Function signature for signing a digest using a private key, returning the signature components v, r, and s.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sign(uint256 privateKey, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n```\n\n----------------------------------------\n\nTITLE: Testing setArbitraryStorage Implementation\nDESCRIPTION: Test contract showing how to use setArbitraryStorage to handle arbitrary storage values and verify storage manipulation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/set-arbitrary-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ArbitraryStorageTest is Test {\n    function testArbitraryStorage() public {\n        Counter counter = new Counter();\n        vm.setArbitraryStorage(address(counter));\n        // Next call would fail with array out of bounds without arbitrary storage\n        address owner = counter.getOwner(55);\n        // Subsequent calls to same slot returns same value\n        assertEq(counter.getOwner(55), owner);\n        // The new value is returned if explicitly written\n        counter.setOwner(55, address(111));\n        assertEq(counter.getOwner(55), address(111));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with Nested Struct Constructor Argument\nDESCRIPTION: This bash command shows how to deploy a contract that accepts a nested struct as a constructor argument using the 'forge' tool.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/misc/struct-encoding.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nforge create src/Test.sol:Test --constructor-args \"(example,1,(0x...,1))\"\n```\n\n----------------------------------------\n\nTITLE: Cast from-bin Help Command\nDESCRIPTION: This command displays the help information for the `cast from-bin` command. It provides a list of available options and their descriptions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/from-bin.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast from-bin --help\n```\n\n----------------------------------------\n\nTITLE: Fetching Finalized Ethereum Block Information\nDESCRIPTION: This snippet demonstrates how to use the cast command to get information about the finalized Ethereum block. Make sure that the cast command line tool is available and set up properly.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-block.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast block finalized\n```\n\n----------------------------------------\n\nTITLE: Building Specific Source Files\nDESCRIPTION: Example of using forge build to compile only specific source files or directories.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nforge build test/invariant test/RegressionTest.sol\n```\n\n----------------------------------------\n\nTITLE: Extracting Root-Level Keys from JSON in Solidity\nDESCRIPTION: This example shows how to use parseJsonKeys to get the root-level keys from a JSON string.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-json-keys.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory json = '{\"key\": \"something\"}';\nstring[] memory keys = vm.parseJsonKeys(json, \"$\"); // [\"key\"]\n```\n\n----------------------------------------\n\nTITLE: Importing console2.sol for Enhanced Logging\nDESCRIPTION: This code snippet imports the `console2.sol` contract from the Forge Standard Library. This provides patches to `console.sol` that enable Forge to decode traces for console calls. This version is incompatible with Hardhat.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/README.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nimport {console2} from \"forge-std/console2.sol\";\n```\n\n----------------------------------------\n\nTITLE: StdJson Usage Example\nDESCRIPTION: Example showing how to use the stdJson library to parse JSON data into Solidity structs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-json.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory root = vm.projectRoot();\nstring memory path = string.concat(root, \"/src/test/fixtures/broadcast.log.json\");\nstring memory json = vm.readFile(path);\nbytes memory transactionDetails = json.parseRaw(\".transactions[0].tx\");\nRawTx1559Detail memory rawTxDetail = abi.decode(transactionDetails, (RawTx1559Detail));\n```\n\n----------------------------------------\n\nTITLE: Encoding Calldata with Cast - Shell\nDESCRIPTION: This snippet demonstrates calldata encoding using the 'cast calldata' command. It encodes a function call with specified arguments into ABI-compatible format. Inputs are the function signature and its arguments, producing encoded calldata for transaction submission.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncast calldata \"someFunc(address,uint256)\" 0x... 1\n```\n\n----------------------------------------\n\nTITLE: Defining assertGe for int256 in Solidity\nDESCRIPTION: This snippet defines the internal function assertGe for comparing two int256 values. It asserts that the first value (left) is greater than or equal to the second (right) without an error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGe.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertGe(int256 left, int256 right) internal;\n```\n\n----------------------------------------\n\nTITLE: Vyper Script Example\nDESCRIPTION: Example script written in Vyper for interacting with deployed contracts\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vyper.md#2025-04-22_snippet_8\n\nLANGUAGE: vyper\nCODE:\n```\ninterface Vm:\n    def startBroadcast(): nonpayable\n\ninterface ICounter:\n    def increment(): nonpayable\n    def number() -> uint256: view\n\nvm: constant(Vm) = Vm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)\n\n@external\ndef run(counter: address):\n    number_before: uint256 = staticcall ICounter(counter).number()\n\n    extcall vm.startBroadcast()\n    extcall ICounter(counter).increment()\n\n    number_after: uint256 = staticcall ICounter(counter).number()\n\n    assert number_after == number_before + 1\n```\n\n----------------------------------------\n\nTITLE: Expecting Multiple Calls with Any Calldata in Solidity Test\nDESCRIPTION: This example shows how to use expectCall to expect a specific number of calls to a function with any calldata.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-call.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\naddress alice = makeAddr(\"alice\");\nemit log_address(alice);\nvm.expectCall(\n  address(token), abi.encodeWithSelector(token.transfer.selector), 2\n);\ntoken.transfer(alice, 10);\ntoken.transfer(alice, 10);\n// [PASS]\n```\n\n----------------------------------------\n\nTITLE: Testing makePersistent with SimpleStorageContract Example\nDESCRIPTION: Comprehensive example demonstrating how to use makePersistent to maintain contract state across different forks, including creating a contract, marking it as persistent, and verifying its state preservation across fork switches.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/make-persistent.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SimpleStorageContract {\n    string public value;\n\n    function set(uint256 _value) public {\n        value = _value;\n    }\n}\n\nfunction testMarkPersistent() public {\n    // by default the `sender` and the contract itself are persistent\n    assert(cheats.isPersistent(msg.sender));\n    assert(cheats.isPersistent(address(this)));\n\n    // select a specific fork\n    cheats.selectFork(mainnetFork);\n    \n    // create a new contract that's stored in the `mainnetFork` storage\n    SimpleStorageContract simple = new SimpleStorageContract();\n    \n    // `simple` is not marked as persistent\n    assert(!cheats.isPersistent(address(simple)));\n    \n    // contract can be used\n    uint256 expectedValue = 99;\n    simple.set(expectedValue);\n    assertEq(simple.value(), expectedValue);\n    \n    // mark as persistent\n    cheats.makePersistent(address(simple));\n    \n    // select a different fork\n    cheats.selectFork(optimismFork);\n    \n    // ensure contract is still persistent   \n    assert(cheats.isPersistent(address(simple)));\n    \n    // value is set as expected\n    assertEq(simple.value(), expectedValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Wallet Object in Solidity (Alternative Example)\nDESCRIPTION: Demonstrates how to use the Wallet overload of the sign function to sign a message and verify the signature.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nWallet memory alice = vm.createWallet(\"alice\");\nbytes32 hash = keccak256(\"Signed by Alice\");\n(uint8 v, bytes32 r, bytes32 s) = vm.sign(alice, hash);\naddress signer = ecrecover(hash, v, r, s);\nassertEq(alice.addr, signer); // [PASS]\n```\n\n----------------------------------------\n\nTITLE: Adding Forge Output to GitHub Step Summary\nDESCRIPTION: Example showing how to add Forge command output to GitHub step summaries using markdown formatting.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/ci-cd/github-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run snapshot\n  run: NO_COLOR=1 forge snapshot >> $GITHUB_STEP_SUMMARY\n```\n\n----------------------------------------\n\nTITLE: expectEmit Signature with Emitter Address\nDESCRIPTION: The expectEmit signature that takes an emitter address parameter. This version checks all topics, data, and verifies the address that emitted the event.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-emit.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expectEmit(address emitter) external;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat with Foundry Plugin in JavaScript\nDESCRIPTION: This code snippet shows the configuration for the hardhat.config.js file to make the Hardhat and Foundry plugins work together. It includes the necessary require statements and sets the Solidity version.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/hardhat.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-toolbox\");\nrequire(\"@nomicfoundation/hardhat-foundry\");\n/** @type import('hardhat/config').HardhatUserConfig */\nmodule.exports = {\n  solidity: \"0.8.19\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using vm.chainId to Set Chain ID in Solidity\nDESCRIPTION: Example showing how to use the vm.chainId function to set block.chainid to a specific value (31337) and then emit it to logs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/chain-id.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nvm.chainId(31337);\nemit log_uint(block.chainid); // 31337\n```\n\n----------------------------------------\n\nTITLE: Generating an interface from a file using cast interface\nDESCRIPTION: Example command showing how to generate a Solidity interface from an ABI file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-interface.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast interface ./path/to/abi.json\n```\n\n----------------------------------------\n\nTITLE: Converting UTF-8 Text to Hex Using cast Command\nDESCRIPTION: Demonstrates how to use the 'cast from-utf8' command to convert the UTF-8 string 'hello' to its hexadecimal representation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-from-utf8.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast from-utf8 \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with Encoded Arguments\nDESCRIPTION: Deploys a contract by filename or artifact path with encoded constructor arguments, allowing complex parameter passing\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/deployCode.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployCode(string memory what, bytes memory args) public returns (address);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Ethereum Addresses in Bash\nDESCRIPTION: These commands set environment variables for three Ethereum addresses: ALICE (a test account), DAI (the DAI token contract), and UNLUCKY_USER (an account holding DAI tokens).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/forking-mainnet-with-cast-anvil.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport ALICE=0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\nexport DAI=0x6b175474e89094c44da98b954eedeac495271d0f\nexport UNLUCKY_USER=0xfc2eE3bD619B7cfb2dE2C797b96DeeCbD7F68e46\n```\n\n----------------------------------------\n\nTITLE: Forge Selectors Upload Usage and Options\nDESCRIPTION: This text block describes the usage, arguments, and options for the `forge selectors upload` command. It includes options for specifying contracts, thread count, project root, and display settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/selectors/upload.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge selectors upload [OPTIONS] [CONTRACT]\n\nArguments:\n  [CONTRACT]\n          The name of the contract to upload selectors for. Can also be in form\n          of `path:contract name`\n\nOptions:\n      --all\n          Upload selectors for all contracts in the project\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nProject options:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -C, --contracts <PATH>\n          The contracts source directory\n\n  -R, --remappings <REMAPPINGS>\n          The project's remappings\n\n      --remappings-env <ENV>\n          The project's remappings from the environment\n\n      --cache-path <PATH>\n          The path to the compiler cache\n\n      --lib-paths <PATH>\n          The path to the library folder\n\n      --hardhat\n          Use the Hardhat-style project layout.\n          \n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n          \n          [aliases: hh]\n\n      --config-path <FILE>\n          Path to the config file\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Using activeFork with Multiple Forks in Solidity\nDESCRIPTION: Example demonstrating how to use the activeFork function with multiple forks. It shows creating forks, selecting them, and asserting the active fork ID.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/active-fork.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 mainnetForkId = vm.createFork(MAINNET_RPC_URL);\nuint256 optimismForkId = vm.createFork(OPTIMISM_RPC_URL);\n\nassert(mainnetForkId != optimismForkId);\n\nvm.selectFork(mainnetForkId);\nassertEq(vm.activeFork(), mainnetForkId);\n\nvm.selectFork(optimismForkId);\nassertEq(vm.activeFork(), optimismForkId);\n```\n\n----------------------------------------\n\nTITLE: Verifying a Contract with Blockscout Right After Deployment Using Shell\nDESCRIPTION: This command verifies a contract with Blockscout immediately after deployment, ensuring to append '/api?' to the end of the Blockscout homepage URL.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-verify-contract.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nforge create --rpc-url <rpc_https_endpoint> --private-key $devTestnetPrivateKey src/Contract.sol:SimpleStorage --verify --verifier blockscout --verifier-url <blockscout_homepage_explorer_url>/api? \n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for String in Solidity\nDESCRIPTION: This function asserts that two memory strings in Solidity are equal, optionally taking a string for a more specific error message if the assertion fails.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(string memory left, string memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(string memory left, string memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: ABI encoding function arguments in shell\nDESCRIPTION: This example demonstrates how to ABI encode the arguments for a function call using `cast abi-encode`. It takes the function signature and the arguments as input and outputs the ABI encoded data.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-abi-encode.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"cast abi-encode \\\"someFunc(address,uint256)\\\" 0x... 1\"\n```\n\n----------------------------------------\n\nTITLE: ParseJson Cheatcode Signatures\nDESCRIPTION: Core signatures for the parseJson VM cheatcode that allows parsing JSON strings with optional key parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-json.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// Return the value(s) that correspond to 'key'\nvm.parseJson(string memory json, string memory key)\n// Return the entire JSON file\nvm.parseJson(string memory json);\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Smart Contract Repository - Forge - Shell\nDESCRIPTION: This snippet initializes a new repository named 'counter' for smart contract deployment. It sets up the essential structure needed for further development. Ensure that the Foundry framework is installed to utilize the 'forge' command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ forge init counter\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for cast to-unit Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast to-unit' tool, which is used to convert ETH amounts between different units.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-unit.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-unit --help\n```\n\n----------------------------------------\n\nTITLE: Supported Formats for getCode Function in Solidity\nDESCRIPTION: Illustrates various ways to call the getCode function, including using contract path, contract name, and specifying Solidity versions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-code.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nvm.getCode(\"MyContract.sol:MyContract\");\nvm.getCode(\"MyContract\");\nvm.getCode(\"MyContract.sol:0.8.18\");\nvm.getCode(\"MyContract:0.8.18\");\n```\n\n----------------------------------------\n\nTITLE: Publishing a Pre-signed Transaction via Flashbots in Shell\nDESCRIPTION: Example of publishing a pre-signed transaction using the Flashbots relay service, which helps mitigate frontrunning by sending transactions directly to miners.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-publish.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast publish --flashbots $TX\n```\n\n----------------------------------------\n\nTITLE: Asserting Less Than with Decimals in Solidity\nDESCRIPTION: This Solidity function asserts that a uint256 or int256 `left` value is strictly less than a `right` value, both formatted with a specified number of decimals. An optional error message can be included in the revert string. These functions are typically used for validations where precise value comparisons are required. The functions operate internally and check the condition before proceeding with further logic.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertLtDecimal.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLtDecimal(uint256 left, uint256 right, uint256 decimals) internal\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLtDecimal(int256 left, int256 right, uint256 decimals) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Importing console.sol for Logging Functionality\nDESCRIPTION: This code snippet imports the `console.sol` contract from the Forge Standard Library. This provides Hardhat-style logging functionality, which allows developers to print debugging information during test execution. No external dependencies beyond Forge Std are required.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/README.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport {console} from \"forge-std/console.sol\";\n```\n\n----------------------------------------\n\nTITLE: Reading Storage Slots using Solidity\nDESCRIPTION: The functions read values of specified types (bytes32, bool, address, uint256, int256) from contract storage slots. These functions are internal to Solidity contracts and rely on a StdStorage struct as self. If the read operation fails, the functions revert with an error message. These functions are essential for retrieving stored data within a contract, allowing for type-specific read operations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/read.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction read_bytes32(StdStorage storage self) internal returns (bytes32);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction read_bool(StdStorage storage self) internal returns (bool);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction read_address(StdStorage storage self) internal returns (address);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction read_uint(StdStorage storage self) internal returns (uint256);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction read_int(StdStorage storage self) internal returns (int256);\n```\n\n----------------------------------------\n\nTITLE: Standardized Testing with FFI for Merkle Tree Proofs\nDESCRIPTION: This code initializes a testing contract that reads a standardized data set from a file using `ffi`, allowing for consistent generation of Merkle tree proofs across various tests. The snippet highlights data handling in Solidity and emphasizes performance measurement.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/differential-ffi-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32[100] data;\nuint256[8] leaves = [4, 8, 15, 16, 23, 42, 69, 88];\n\nfunction setUp() public {\n    string[] memory inputs = new string[](2);\n    inputs[0] = \"cat\";\n    inputs[1] = \"src/test/standard_data/StandardInput.txt\";\n    bytes memory result =  vm.ffi(inputs);\n    data = abi.decode(result, (bytes32[100]));\n    m = new Merkle();\n}\n\nfunction testMerkleGenerateProofStandard() public view {\n    bytes32[] memory _data = _getData();\n    for (uint i = 0; i < leaves.length; ++i) {\n        m.getProof(_data, leaves[i]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Hardhat Tests for Counter Contract in JavaScript\nDESCRIPTION: This code snippet demonstrates how to write Hardhat tests for a Counter contract. It includes test cases for incrementing and setting the counter value, using Chai assertions and Hardhat's test helpers.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/hardhat.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = require(\"chai\");\nconst hre = require(\"hardhat\");\nconst { loadFixture } = require(\"@nomicfoundation/hardhat-toolbox/network-helpers\");\n\ndescribe(\"Counter contract\", function () {\n  async function CounterLockFixture() {\n    const counter = await ethers.deployContract(\"Counter\");\n    await counter.setNumber(0);\n\n    return { counter };\n  }\n\n  it(\"Should increment the number correctly\", async function () {\n    const { counter } = await loadFixture(CounterLockFixture);\n    await counter.increment();\n    expect(await counter.number()).to.equal(1);\n  });\n\n  // This is not a fuzz test because Hardhat does not support fuzzing yet.\n  it(\"Should set the number correctly\", async function () {\n    const { counter } = await loadFixture(CounterLockFixture);\n    await counter.setNumber(100);\n    expect(await counter.number()).to.equal(100);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Forge Debug Help Command in Bash\nDESCRIPTION: This snippet demonstrates the usage of the `forge debug` command with the `--help` option to display help information for debugging smart contracts. It is a Bash command that provides an overview of available options and usage for the forge debugging tool.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/debug.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge debug --help\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet from Uint256 and String Example in Solidity\nDESCRIPTION: This example demonstrates creating a Wallet using both uint256 and string parameters, showing how the private key is derived and the wallet is labeled.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-wallet.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nVm.Wallet memory wallet = vm.createWallet(uint256(keccak256(bytes(\"1\"))), \"bob's wallet\");\n\nemit log_uint(wallet.privateKey); // uint256(keccak256(bytes(\"1\")))\n\nemit log_address(wallet.addr); // vm.addr(wallet.privateKey)\n\nemit log_address(\n    address(\n        uint160(\n            uint256(\n                keccak256(abi.encode(wallet.publicKeyX, wallet.publicKeyY))\n            )\n        )\n    )\n); // wallet.addr\n\nemit log_string(vm.getLabel(wallet.addr)); // \"bob's wallet\"\n```\n\n----------------------------------------\n\nTITLE: Mocking Multiple Calls with msg.value in Solidity using Foundry\nDESCRIPTION: Example of using `mockCalls` to mock multiple calls with a specified `msg.value`. It demonstrates mocking a `swapETHForToken` function in a DEX pool contract with different return values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-calls.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMockCallsWithMsgValue() public {\n    bytes[] memory mocks = new bytes[](2);\n    mocks[0] = abi.encode(2 ether);\n    mocks[1] = abi.encode(1 ether);\n\n    vm.mockCalls(\n        address(0),\n        1 ether,\n        abi.encodeWithSelector(DexPool.swapETHForToken.selector),\n        mocks\n    );\n\n    uint tokenAmount1 = DexPool(address(0)).swapETHForToken{value: 1 ether}();\n    uint tokenAmount2 = DexPool(address(0)).swapETHForToken{value: 1 ether}();\n\n    assertEq(tokenAmount1, 2 ether);\n    assertEq(tokenAmount2, 1 ether);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Forge Formatting Directives in Solidity\nDESCRIPTION: Shows how to use Forge's formatting directives to disable automatic formatting for specific lines or sections of code, allowing for manual formatting when needed.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/best-practices.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// forgefmt: disable-line\n// forgefmt: disable-next-line\n// forgefmt: disable-next-item\n// forgefmt: disable-start\n// forgefmt: disable-end\n```\n\n----------------------------------------\n\nTITLE: Verified ENS Name Resolution with Cast\nDESCRIPTION: This command performs both a normal ENS lookup and a reverse lookup to verify that the name is correct. It uses the --verify flag to ensure the bidirectional integrity of the ENS name to address mapping.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-resolve-name.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast resolve-name --verify vitalik.eth\n```\n\n----------------------------------------\n\nTITLE: Full Prank Function with All Parameters\nDESCRIPTION: Comprehensive prank function that sets msg.sender, tx.origin, and controls delegate call behavior in one call.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prank.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction prank(address msgSender, address txOrigin, bool delegateCall) external;\n```\n\n----------------------------------------\n\nTITLE: Getting Chain ID from RPC URL - Shell Script\nDESCRIPTION: This snippet demonstrates how to retrieve the Ethereum chain ID using the 'cast chain-id' command with a specified RPC URL. It requires that the environment variable $RPC is set to a valid Ethereum RPC endpoint.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-chain-id.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast chain-id --rpc-url $RPC\n```\n\n----------------------------------------\n\nTITLE: Using Fee Cheatcode in Solidity Tests\nDESCRIPTION: Example of using the `fee` cheatcode to set the block's base fee to 25 gwei and then logging the updated value. This demonstrates how to manipulate and verify the `block.basefee` in Foundry tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/fee.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nvm.fee(25 gwei);\nemit log_uint(block.basefee); // 25000000000\n```\n\n----------------------------------------\n\nTITLE: Calling a Contract Function with Parameters\nDESCRIPTION: Example of calling the deposit function on a contract with address and amount parameters using a Ledger hardware wallet.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-send.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast send --ledger 0x... \"deposit(address,uint256)\" 0x... 1\n```\n\n----------------------------------------\n\nTITLE: Cast Constructor Args CLI Usage Documentation\nDESCRIPTION: Detailed usage documentation for the cast constructor-args command, including arguments, options for RPC endpoints, Etherscan API, and display configurations\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/constructor-args.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast constructor-args [OPTIONS] <CONTRACT>\n```\n\n----------------------------------------\n\nTITLE: Token Deployment with Constructor Arguments\nDESCRIPTION: Example of deploying a token contract with constructor arguments and Etherscan verification\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/deploying.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ forge create --rpc-url <your_rpc_url> \\\n    --constructor-args \"ForgeUSD\" \"FUSD\" 18 1000000000000000000000 \\\n    --private-key <your_private_key> \\\n    --etherscan-api-key <your_etherscan_api_key> \\\n    --verify \\\n    src/MyToken.sol:MyToken\n```\n\n----------------------------------------\n\nTITLE: Using Forge Flatten Command\nDESCRIPTION: This snippet provides the syntax for using the 'forge flatten' command, which flattens a specified contract and its import paths into a single file. The command accepts various options to define the output path, number of threads, and other project-specific settings. It is crucial for simplifying complex contract structures for deployment or analysis.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/flatten.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge flatten --help\n```\n\n----------------------------------------\n\nTITLE: Using stdToml Library for TOML Parsing in Solidity\nDESCRIPTION: Example of using the stdToml library to parse TOML files in Solidity. This library provides helper functions for parsing simple values and entire TOML tables.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-toml.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory root = vm.projectRoot();\nstring memory path = string.concat(root, \"/src/test/fixtures/config.toml\");\nstring memory toml = vm.readFile(path);\nbytes memory data = toml.parseRaw(\".\");\nConfig memory config = abi.decode(data, (Config))\n```\n\n----------------------------------------\n\nTITLE: RPC Endpoint Selection Script\nDESCRIPTION: Script demonstrating how to prompt for and use an RPC endpoint selection.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prompt.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory rpcEndpoint = vm.prompt(\"RPC endpoint\");\nvm.createSelectFork(rpcEndpoint);\n```\n\n----------------------------------------\n\nTITLE: Asserting Signed Integer Array Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two signed integer arrays (int256[]). The function reverts if the two int256 arrays are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(int256[] memory left, int256[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(int256[] memory left, int256[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Uint256 Arrays in Solidity\nDESCRIPTION: This set of functions test the equality of two arrays of uint256 values within the constraints of a Solidity contract. They additionally support an error message for improved debugging.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(uint256[] memory left, uint256[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Using selectFork in Solidity Testing\nDESCRIPTION: An example of how to use the `selectFork` function in a Solidity test. It demonstrates creating a fork, selecting it, and asserting that it's the active fork.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/select-fork.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 forkId = vm.createFork(MAINNET_RPC_URL);\n\nvm.selectFork(forkId);\n\nassertEq(vm.activeFork(), forkId);\n```\n\n----------------------------------------\n\nTITLE: Cloning a Contract from Ethereum Mainnet Using Forge\nDESCRIPTION: This snippet demonstrates the basic usage of the 'forge clone' command to clone the UniswapV3Pool contract from the Ethereum mainnet. The command retrieves the contract's source code and initializes a new Forge project in the specified directory.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-clone.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge clone 0x8f8EF111B67C04Eb1641f5ff19EE54Cda062f163 UniswapV3Pool\n```\n\n----------------------------------------\n\nTITLE: Cast to-uint256 Command Help Output\nDESCRIPTION: Detailed help output showing all available options and arguments for the cast to-uint256 command, including threading options, display settings, and verbosity levels\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-uint256.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-uint256 [OPTIONS] [VALUE]\n\nArguments:\n  [VALUE]\n          The value to convert\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Checking Selector Collisions with Forge CLI\nDESCRIPTION: This Bash command uses Forge to check for selector collisions between two specified smart contracts. The command allows the use of various options to customize the operation, including thread configuration and cache management. To use the command, provide the paths or names of two contracts as arguments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/selectors/collision.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge selectors collision --help\n```\n\n----------------------------------------\n\nTITLE: Example of Transaction Replay in Forking Mode\nDESCRIPTION: Demonstrates how to execute a historical Ethereum transaction in a forked environment. Shows fork creation, transaction execution, and balance verification before and after the transaction.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/transact.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// Enter forking mode at block: https://etherscan.io/block/15596646\nuint256 fork = vm.createFork(MAINNET_RPC_URL, 15596646);\nvm.selectFork(fork);\n\n// a random transfer transaction in the block: https://etherscan.io/tx/0xaba74f25a17cf0d95d1c6d0085d6c83fb8c5e773ffd2573b99a953256f989c89\nbytes32 tx = 0xaba74f25a17cf0d95d1c6d0085d6c83fb8c5e773ffd2573b99a953256f989c89;\n\naddress sender = address(0xa98218cdc4f63aCe91ddDdd24F7A580FD383865b);\naddress recipient = address(0x0C124046Fa7202f98E4e251B50488e34416Fc306);\n\nassertEq(sender.balance, 5764124000000000);\nassertEq(recipient.balance, 3936000000000000);\n\n// transfer amount: 0.003936 Ether\nuint256 transferAmount = 3936000000000000;\n\n// expected balance changes once the transaction is executed\nuint256 expectedRecipientBalance = recipient.balance + transferAmount;\nuint256 expectedSenderBalance = sender.balance - transferAmount;\n\n// execute the transaction\nvm.transact(tx);\n\n// recipient received transfer\nassertEq(recipient.balance, expectedRecipientBalance);\n\n// sender's balance decreased by transferAmount and gas\nassert(sender.balance < expectedSenderBalance);\n```\n\n----------------------------------------\n\nTITLE: Solidity `assertGt` Signature (int256 with error)\nDESCRIPTION: This Solidity function signature defines the `assertGt` function, which asserts that the `left` int256 parameter is strictly greater than the `right` int256 parameter. If the assertion fails, it reverts with the provided error message `err`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGt.md#2025-04-22_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\n\"function assertGt(int256 left, int256 right, string memory err) internal;\"\n```\n\n----------------------------------------\n\nTITLE: Making RPC Calls in Solidity\nDESCRIPTION: Demonstrates how to use the vm.rpc function to make an RPC call to eth_getBalance and assert the result.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/rpc.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n// balance at block <https://etherscan.io/block/18332681>\nbytes memory result = vm.rpc(\"eth_getBalance\", \"[\\\"0x8D97689C9818892B700e27F316cc3E41e17fBeb9\\\", \\\"0x117BC09\\\"]\");\nassertEq(hex\"10b7c11bcb51e6\", result);\n```\n\n----------------------------------------\n\nTITLE: Creating Address and Private Key in Solidity\nDESCRIPTION: This function `makeAddrAndKey` generates a unique address and a private key based on the provided string name. It utilizes internal Solidity functionality and emits logs for the created address and key. Prerequisites include understanding Solidity function syntax and event logging. The expected input is a string representing the name, and the output includes the derived address and private key.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/make-addr-and-key.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction makeAddrAndKey(string memory name) internal returns(address addr, uint256 privateKey);\n```\n\n----------------------------------------\n\nTITLE: Using keyExists with JSON File - Solidity Example\nDESCRIPTION: Example showing how to read a JSON file and check for key existence using vm.keyExists(). Demonstrates reading file content and validating key presence.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/key-exists.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory path = \"./path/to/jsonfile.json\";\nstring memory json = vm.readFile(path);\nbool exists = vm.keyExists(json, \".key\");\nassertTrue(exists);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Address Labels with getLabel Function in Solidity\nDESCRIPTION: The getLabel function takes an address as input and returns a string label. If the address has been previously labeled, it returns that label. Otherwise, it returns the address prefixed with 'unlabeled:'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-label.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getLabel(address) external returns (string memory);\n```\n\n----------------------------------------\n\nTITLE: Defining ExampleContract1 in Solidity\nDESCRIPTION: This snippet defines a simple contract, `ExampleContract1`, with three public uint256 state variables and two functions that modify these variables. It's meant for simple arithmetic operations that can be called upon externally.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_5\n\nLANGUAGE: Solidity\nCODE:\n```\ncontract ExampleContract1 {\n\n    uint256 public val1;\n    uint256 public val2;\n    uint256 public val3;\n\n    function addToA(uint256 amount) external {\n        val1 += amount;\n        val3 += amount;\n    }\n\n    function addToB(uint256 amount) external {\n        val2 += amount;\n        val3 += amount;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Solidity toString Function Signatures\nDESCRIPTION: Function signatures showing all supported type conversions to string, including address, bool, uint256, int256, bytes32, and bytes types.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/to-string.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toString(address) external returns (string memory);\nfunction toString(bool) external returns (string memory);\nfunction toString(uint256) external returns (string memory);\nfunction toString(int256) external returns (string memory);\nfunction toString(bytes32) external returns (string memory);\nfunction toString(bytes) external returns (string memory);\n```\n\n----------------------------------------\n\nTITLE: Basic Foundry GitHub Actions Workflow Configuration\nDESCRIPTION: Example workflow configuration showing how to set up Foundry testing in GitHub Actions, including checkout, installation, and test execution steps.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/ci-cd/github-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non: [push]\n\nname: test\n\njobs:\n  check:\n    name: Foundry project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          submodules: recursive\n\n      - name: Install Foundry\n        uses: foundry-rs/foundry-toolchain@v1\n\n      - name: Run tests\n        run: forge test -vvv\n\n      - name: Run snapshot\n        run: forge snapshot\n```\n\n----------------------------------------\n\nTITLE: Starting Hoax with Origin Address and Ether in Solidity\nDESCRIPTION: This function starts a prank providing both an origin address and ether amount, merging functionalities from previous snippets for comprehensive prank initiation with specified parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/startHoax.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startHoax(address who, address origin, uint256 give) public;\n```\n\n----------------------------------------\n\nTITLE: Sample Genesis Configuration - JSON\nDESCRIPTION: The genesis.json file outlines the initial state for an Ethereum network when using Anvil. It contains essential parameters such as chainId, nonce, timestamp, and pre-allocated accounts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/anvil/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"chainId\": \"0x2323\",\n  \"nonce\": \"0x42\",\n  \"timestamp\": \"0x0\",\n  \"extraData\": \"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\",\n  \"gasLimit\": \"0x1388\",\n  \"difficulty\": \"0x400000000\",\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"stateRoot\": \"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544\",\n  \"alloc\": {\n    \"000d836201318ec6899a67540690382780743280\": {\n      \"balance\": \"0xad78ebc5ac6200000\"\n    }\n  },\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Structs in Solidity\nDESCRIPTION: This snippet demonstrates how to define nested structs in Solidity, with a main struct containing a nested struct as one of its fields.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/misc/struct-encoding.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.8.21;\n\ncontract Test {\n    struct nestedStruct {\n        address addr;\n        uint256 amount;\n    }\n\n    struct MyStruct {\n        string nestedStructName;\n        uint256 nestedStructCount;\n        nestedStruct _nestedStruct;\n    }\n\n    function f(MyStruct memory t) public pure {}\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Stateless Contract with getDeployedCode in Solidity\nDESCRIPTION: Example of using getDeployedCode and etch to deploy a stateless contract at an arbitrary address. It demonstrates creating a contract, fetching its deployed bytecode, and setting it at a specific address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-deployed-code.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// A stateless contract that we want deployed at a specific address\ncontract Override {\n    event Payload(address sender, address target, bytes data);\n\n    function emitPayload(\n        address target, bytes calldata message\n    ) external payable returns (uint256) {\n        emit Payload(msg.sender, target, message);\n        return 0;\n    }\n}\n\n// get the **deployedBytecode**\nbytes memory code = vm.getDeployedCode(\"Override.sol:Override\");\n\n// set the code of an arbitrary address\naddress overrideAddress = address(64);\nvm.etch(overrideAddress, code);\nassertEq(overrideAddress.code, code);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Profiles for Optimization\nDESCRIPTION: Example of a foundry.toml configuration with both default (optimized) and lite profiles for faster development builds.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default]\nsolc-version = \"0.8.17\"\noptimizer = true\noptimizer-runs = 10_000_000\n\n[profile.lite]\noptimizer = false\n```\n\n----------------------------------------\n\nTITLE: Using EIP-7702 Authorization with Signed Auth\nDESCRIPTION: Example of signing an EIP-7702 authorization and attaching it to a transaction from a different sender, demonstrating transaction delegation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-send.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncast send $(cast az) --private-key <sender-pk> --auth $(cast wallet sign-auth <address> --private-key <delegator-pk>)\n```\n\n----------------------------------------\n\nTITLE: Using cast max-uint Command in Foundry\nDESCRIPTION: The command returns the maximum possible value for a uint256 data type in Ethereum/Solidity development. It takes no parameters and outputs the maximum uint256 value (2^256 - 1).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-max-uint.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast max-uint\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Forge Std Components in Solidity\nDESCRIPTION: Demonstrates how to import specific components of Forge Std, such as the Vm interface and console library, for use in Solidity tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/forge-std.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Vm} from \"forge-std/Vm.sol\";\n```\n\nLANGUAGE: solidity\nCODE:\n```\nimport {console} from \"forge-std/console.sol\";\n```\n\nLANGUAGE: solidity\nCODE:\n```\nimport {console2} from \"forge-std/console2.sol\";\n```\n\n----------------------------------------\n\nTITLE: Defining ForgeContext Enum in Solidity\nDESCRIPTION: Enum definition for different Forge execution contexts including test, coverage, snapshot, and script scenarios.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/is-context.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nenum ForgeContext {\n    // Test group execution context (test, coverage or snapshot).\n    TestGroup,\n    // `forge test` execution context.\n    Test,\n    // `forge coverage` execution context.\n    Coverage,\n    // `forge snapshot` execution context.\n    Snapshot,\n    // Script group execution context (dry run, broadcast or resume).\n    ScriptGroup,\n    // `forge script` execution context.\n    ScriptDryRun,\n    // `forge script --broadcast` execution context.\n    ScriptBroadcast,\n    // `forge script --resume` execution context.\n    ScriptResume,\n    // Unknown `forge` execution context.\n    Unknown\n}\n\nfunction isContext(ForgeContext context) external view returns (bool result);\n```\n\n----------------------------------------\n\nTITLE: Encoding Nested Struct for Function Call\nDESCRIPTION: This bash command demonstrates how to encode a nested struct to pass it as a parameter to a function using the 'cast' tool.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/misc/struct-encoding.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncast abi-encode \"f((string,uint256,(address,uint256)))\" \"(example,1,(0x...,1))\"\n```\n\n----------------------------------------\n\nTITLE: Decoding TOML into Solidity Structs\nDESCRIPTION: Example of reading a TOML file, parsing it with vm.parseToml, and decoding the result into a Solidity struct. This demonstrates how to work with complex TOML data structures in Solidity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-toml.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory root = vm.projectRoot();\nstring memory path = string.concat(root, \"/src/test/fixtures/fruitstall.toml\");\nstring memory toml = vm.readFile(path);\nbytes memory data = vm.parseToml(toml);\nFruitStall memory fruitstall = abi.decode(data, (FruitStall));\n\n// Logs: Welcome to Fresh Fruit\nconsole2.log(\"Welcome to\", fruitstall.name);\n\nfor (uint256 i = 0; i < fruitstall.apples.length; i++) {\n    Apple memory apple = fruitstall.apples[i];\n\n    // Logs:\n    // Color: Red, Sourness: 3, Sweetness: 7\n    // Color: Green, Sourness: 5, Sweetness: 5\n    // Color: Yellow, Sourness: 1, Sweetness: 9\n    console2.log(\n        \"Color: %s, Sourness: %d, Sweetness: %d\",\n        apple.color,\n        apple.sourness,\n        apple.sweetness\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vulnerable Transaction Script in Solidity\nDESCRIPTION: This snippet demonstrates a VulnerableScript contract with a run function that broadcasts transactions. It outlines a potential problem with address collisions caused by the nonce of the smart contract factory, showcasing the need for caution during transaction broadcasts to avoid sending funds to unintended addresses.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/best-practices.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n// Pseudo-code, may not compile.\ncontract VulnerableScript is Script {\n   function run() public {\n      vm.startBroadcast();\n\n      // Transaction 1: Deploy a new Gnosis Safe with CREATE.\n      // Because we're using CREATE instead of CREATE2, the address of the new\n      // Safe is a function of the nonce of the gnosisSafeProxyFactory.\n      address mySafe = gnosisSafeProxyFactory.createProxy(singleton, data);\n\n      // Transaction 2: Send tokens to the new Safe.\n      // We know the address of mySafe is a function of the nonce of the\n      // gnosisSafeProxyFactory. If someone else deploys a Gnosis Safe between\n      // the simulation and broadcast, the address of mySafe will be different,\n      // and this script will send 1000 DAI to the other person's Safe. In this\n      // case, we can protect ourselves from this by using CREATE2 instead of\n      // CREATE, but every situation may have different solutions.\n      dai.transfer(mySafe, 1000e18);\n\n      vm.stopBroadcast();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining log_named_array events in Solidity\nDESCRIPTION: These events log arrays of unsigned and signed 256-bit integers with a specified name (key). They are defined to emit an event containing the name and the array values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-logs.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nevent log_named_array(string key, uint256[] val);\nevent log_named_array(string key, int256[] val);\n```\n\n----------------------------------------\n\nTITLE: Setting Ether Balance with deal Function in Solidity\nDESCRIPTION: Demonstrates how to use the 'deal' function to set the Ether balance of an address. It creates a new address, sets its balance to 1 ether, and logs the result.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/deal.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\naddress alice = makeAddr(\"alice\");\nemit log_address(alice);\nvm.deal(alice, 1 ether);\nlog_uint256(alice.balance); // 1000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Supported Formats for getDeployedCode in Solidity\nDESCRIPTION: Examples of different formats supported by getDeployedCode for fetching artifacts, including by contract path, contract name, and specific compiler versions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-deployed-code.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nvm.getDeployedCode(\"MyContract.sol:MyContract\");\nvm.getDeployedCode(\"MyContract\");\nvm.getDeployedCode(\"MyContract.sol:0.8.18\");\nvm.getDeployedCode(\"MyContract:0.8.18\");\n```\n\n----------------------------------------\n\nTITLE: Cloning from BNB Smart Chain Using Forge\nDESCRIPTION: Here, the command is used to clone a contract from the BNB Smart Chain (BSC) by specifying the chain ID. This command effectively expands the cloning capability beyond just the Ethereum mainnet.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-clone.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge clone --chain bsc 0x7862D9B4bE2156B15d54F41ee4EDE2d5b0b455e4 UniswapV3Pool\n```\n\n----------------------------------------\n\nTITLE: Usage of cast age Command\nDESCRIPTION: This snippet provides details on the usage of the 'cast age' command along with its arguments and options. It explains how to specify a block or a block tag and various configuration options for the RPC requests, including timeouts and headers.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/age.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast age [OPTIONS] [BLOCK]\n\nArguments:\n  [BLOCK]\n          The block height to query at.\n          \n          Can also be the tags earliest, finalized, safe, latest, or pending.\n\nOptions:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n```\n\n----------------------------------------\n\nTITLE: Recording Storage State Changes During CREATE Operation in Solidity\nDESCRIPTION: This example demonstrates how to use startStateDiffRecording and stopAndReturnStateDiff to record and analyze state changes during a contract creation operation. It includes assertions to verify the recorded state changes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/stop-and-return-state-diff.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Contract {\n    uint256 internal _reserved;\n    uint256 public data;\n    constructor(uint _data) payable { data = _data; }\n}\n\nvm.startStateDiffRecording();\nContract contract = new Contract{value: 1 ether}(100);\nVm.AccountAccess[] memory records = vm.stopAndReturnStateDiff();\n\nassertEq(records.length, 1);\nassertEq(records[0].kind, Vm.AccountAccessKind.Create);\nassertEq(records[0].account, address(contract));\nassertEq(records[0].accessor, address(this));\nassertEq(records[0].initialized, true);\nassertEq(records[0].oldBalance, 0);\nassertEq(records[0].newBalance, 1 ether);\nassertEq(records[0].deployedCode, address(contract).code);\nassertEq(records[0].value, 1 ether);\nassertEq(records[0].data, abi.encodePacked(type(Contract).creationCode, (uint(100))));\nassertEq(records[0].reverted, false);\n\nassertEq(records[0].storageAccesses.length, 1);\nassertEq(records[0].storageAccesses[0].account, address(contract));\nassertEq(records[0].storageAccesses[0].slot, bytes32(uint256(1)));\nassertEq(records[0].storageAccesses[0].isWrite, true);\nassertEq(records[0].storageAccesses[0].previousValue, bytes32(uint(0)));\nassertEq(records[0].storageAccesses[0].newValue, bytes32(uint(100)));\nassertEq(records[0].storageAccesses[0].reverted, false);\n```\n\n----------------------------------------\n\nTITLE: Defining Counter and ModelCounter Contracts in Solidity\nDESCRIPTION: Two example contracts (Counter and ModelCounter) with the same storage layout but different implementations of the count function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-function.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Counter {\n    uint256 public a;\n\n    function count(uint256 x) public {\n        a = 321 + x;\n    }\n}\n\ncontract ModelCounter {\n    uint256 public a;\n\n    function count(uint256 x) public {\n        a = 123 + x;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading JSON Input Files in Solidity Scripts\nDESCRIPTION: This snippet shows how to implement a readInput function that reads JSON input files for a Solidity script. It constructs the file path dynamically based on the chain ID and provided input string, allowing scripts to utilize external input data stored in specific JSON files.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/best-practices.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readInput(string memory input) internal returns (string memory) {\n  string memory inputDir = string.concat(vm.projectRoot(), \"/script/input/\");\n  string memory chainDir = string.concat(vm.toString(block.chainid), \"/\");\n  string memory file = string.concat(input, \".json\");\n  return vm.readFile(string.concat(inputDir, chainDir, file));\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Relative Approximate Equality for Unsigned Integers\nDESCRIPTION: Checks if two unsigned integers are approximately equal within a specified maximum percentage delta. Supports optional custom error message. Used for comparing numeric values with relative tolerance.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqRel.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Usage Information for Forge Script Command\nDESCRIPTION: This snippet presents detailed usage guidelines for the forge script command, outlining the arguments and options available to users for executing smart contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/script.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage: forge script [OPTIONS] <PATH> [ARGS]...\n\nArguments:\n  <PATH>\n          The contract you want to run. Either the file path or contract name.\n\n          If multiple contracts exist in the same file you must specify the\n          target contract with --target-contract.\n\n  [ARGS]...\n          Arguments to pass to the script function\n\nOptions:\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n\n          [aliases: jobs]\n\n      --target-contract <CONTRACT_NAME>\n          The name of the contract you want to run\n\n          [aliases: tc]\n\n  -s, --sig <SIG>\n          The signature of the function you want to call in the contract, or raw\n          calldata\n\n          [default: run()]\n\n      --priority-gas-price <PRICE>\n          Max priority fee per gas for EIP1559 transactions\n\n          [env: ETH_PRIORITY_GAS_PRICE=]\n\n      --legacy\n          Use legacy transactions instead of EIP1559 ones.\n\n          This is auto-enabled for common networks without EIP1559.\n\n      --broadcast\n          Broadcasts the transactions\n\n      --batch-size <BATCH_SIZE>\n          Batch size of transactions.\n\n          This is ignored and set to 1 if batching is not available or `--slow`\n          is enabled.\n\n          [default: 100]\n\n      --skip-simulation\n          Skips on-chain simulation\n\n  -g, --gas-estimate-multiplier <GAS_ESTIMATE_MULTIPLIER>\n          Relative percentage to multiply gas estimates by\n\n          [default: 130]\n\n      --unlocked\n          Send via `eth_sendTransaction` using the `--from` argument or\n          `$ETH_FROM` as sender\n\n      --resume\n          Resumes submitting transactions that failed or timed-out previously.\n\n          It DOES NOT simulate the script again and it expects nonces to have\n          remained the same.\n\n          Example: If transaction N has a nonce of 22, then the account should\n          have a nonce of 22, otherwise it fails.\n\n      --multi\n          If present, --resume or --verify will be assumed to be a multi chain\n          deployment\n\n      --debug\n          Open the script in the debugger.\n\n          Takes precedence over broadcast.\n\n      --dump <PATH>\n          Dumps all debugger steps to file\n\n      --slow\n          Makes sure a transaction is sent, only after its previous one has been\n          confirmed and succeeded\n\n      --non-interactive\n          Disables interactive prompts that might appear when deploying big\n          contracts.\n\n          For more info on the contract size limit, see EIP-170:\n          <https://eips.ethereum.org/EIPS/eip-170>\n\n      --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n\n          [env: ETHERSCAN_API_KEY=]\n\n      --verify\n          Verifies all the contracts found in the receipts of a script, if any\n\n      --with-gas-price <PRICE>\n          Gas price for legacy transactions, or max fee per gas for EIP1559\n          transactions, either specified in wei, or as a string with a unit\n          type.\n\n          Examples: 1ether, 10gwei, 0.01ether\n\n          [env: ETH_GAS_PRICE=]\n\n      --timeout <TIMEOUT>\n          Timeout to use for broadcasting transactions\n\n          [env: ETH_TIMEOUT=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDisplay options:\n  -v, --verbosity...\n          Verbosity level of the log messages.\n\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n\n          Depending on the context the verbosity levels have different meanings.\n\n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n  -q, --quiet\n          Do not print log messages\n\n      --json\n          Format log messages as JSON\n\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\nCache options:\n  --force\n          Clear the cache and artifacts folder and recompile\n\nBuild options:\n  --no-cache\n          Disable the cache\n\n  --dynamic-test-linking\n          Enable dynamic test linking\n\n  --eof\n          Whether to compile contracts to EOF bytecode\n\n  --skip <SKIP>...\n          Skip building files whose names contain the given filter.\n\n          `test` and `script` are aliases for `.t.sol` and `.s.sol`.\n\nLinker options:\n  --libraries <LIBRARIES>\n          Set pre-linked libraries\n\n          [env: DAPP_LIBRARIES=]\n\nCompiler options:\n  --ignored-error-codes <ERROR_CODES>\n          Ignore solc warnings by error code\n\n  --deny-warnings\n          Warnings will trigger a compiler error\n\n  --no-auto-detect\n          Do not auto-detect the `solc` version\n\n  --use <SOLC_VERSION>\n          Specify the solc version, or a path to a local solc, to build with.\n\n          Valid values are in the format `x.y.z`, `solc:x.y.z` or\n          `path/to/solc`.\n\n  --offline\n          Do not access the network.\n\n          Missing solc versions will not be installed.\n\n  --via-ir\n          Use the Yul intermediate representation compilation pipeline\n\n  --use-literal-content\n          Changes compilation to only use literal content and not URLs\n\n  --no-metadata\n          Do not append any metadata to the bytecode.\n\n          This is equivalent to setting `bytecode_hash` to `none` and\n          `cbor_metadata` to `false`.\n\n  --ast\n          Includes the AST as JSON in the compiler output\n\n  --evm-version <VERSION>\n          The target EVM version\n\n  --optimize [<OPTIMIZE>]\n          Activate the Solidity optimizer\n\n          [possible values: true, false]\n\n  --optimizer-runs <RUNS>\n          The number of runs specifies roughly how often each opcode of the\n          deployed code will be executed across the life-time of the contract.\n          This means it is a trade-off parameter between code size (deploy cost)\n          and code execution cost (cost after deployment). An `optimizer_runs`\n          parameter of `1` will produce short but expensive code. In contrast, a\n          larger `optimizer_runs` parameter will produce longer but more gas\n          efficient code\n\n  --extra-output <SELECTOR>...\n          Extra output to include in the contract's artifact.\n\n          Example keys: evm.assembly, ewasm, ir, irOptimized, metadata\n\n          For a full description, see\n          <https://docs.soliditylang.org/en/v0.8.13/using-the-compiler.html#input-description>\n\n  --extra-output-files <SELECTOR>...\n          Extra output to write to separate files.\n\n          Valid values: metadata, ir, irOptimized, ewasm, evm.assembly\n\nProject options:\n  -o, --out <PATH>\n          The path to the contract artifacts folder\n\n      --revert-strings <REVERT>\n          Revert string configuration.\n\n          Possible values are \"default\", \"strip\" (remove), \"debug\"\n          (Solidity-generated revert strings) and \"verboseDebug\"\n\n      --build-info\n          Generate build info files\n\n      --build-info-path <PATH>\n          Output path to directory that build info files will be written to\n\n      --root <PATH>\n          The project's root path.\n\n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -C, --contracts <PATH>\n          The contracts source directory\n\n  -R, --remappings <REMAPPINGS>\n          The project's remappings\n\n      --remappings-env <ENV>\n          The project's remappings from the environment\n\n      --cache-path <PATH>\n          The path to the compiler cache\n\n      --lib-paths <PATH>\n          The path to the library folder\n\n      --hardhat\n          Use the Hardhat-style project layout.\n\n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n\n          [aliases: hh]\n\n      --config-path <FILE>\n          Path to the config file\n\nWallet options - raw:\n  -a, --froms [<ADDRESSES>...]\n          The sender accounts\n\n          [env: ETH_FROM=]\n\n  -i, --interactives <NUM>\n          Open an interactive prompt to enter your private key.\n\n          Takes a value for the number of keys to enter.\n\n          [default: 0]\n\n      --private-keys <RAW_PRIVATE_KEYS>\n          Use the provided private keys\n\n      --private-key <RAW_PRIVATE_KEY>\n          Use the provided private key\n\n      --mnemonics <MNEMONICS>\n          Use the mnemonic phrases of mnemonic files at the specified paths\n\n      --mnemonic-passphrases <PASSPHRASE>\n          Use a BIP39 passphrases for the mnemonic\n\n      --mnemonic-derivation-paths <PATH>\n          The wallet derivation path.\n\n          Works with both --mnemonic-path and hardware wallets.\n\n      --mnemonic-indexes <INDEXES>\n          Use the private key from the given mnemonic index.\n\n          Can be used with --mnemonics, --ledger, --aws and --trezor.\n\n          [default: 0]\n\nWallet options - keystore:\n  --keystore <PATHS>\n          Use the keystore by its filename in the given folder\n\n          [env: ETH_KEYSTORE=]\n          [aliases: keystores]\n\n  --account <ACCOUNT_NAMES>\n          Use a keystore from the default keystores folder\n          (~/.foundry/keystores) by its filename\n```\n\n----------------------------------------\n\nTITLE: Using keyExistsJson to Check JSON Key Existence in Solidity\nDESCRIPTION: Demonstrates how to use the `keyExistsJson` function. It reads a JSON file, checks if a specific key exists in the JSON string, and asserts the result. This example showcases file reading and JSON key checking operations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/key-exists-json.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory path = \"./path/to/jsonfile.json\";\nstring memory json = vm.readFile(path);\nbool exists = vm.keyExistsJson(json, \".key\");\nassertTrue(exists);\n```\n\n----------------------------------------\n\nTITLE: Complex writeToml Usage Example\nDESCRIPTION: Advanced example demonstrating deep object manipulation and JSON path usage with writeToml.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/write-toml.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory jsonObj = '{ \"boolean\": true, \"number\": 342, \"obj1\": { \"foo\": \"bar\" } }';\nvm.writeToml(jsonObj, \"./output/example2.toml\");\n\nstring memory jsonObj2 = '{ \"aNumber\": 123, \"obj2\": {} }';\nvm.writeToml(jsonObj2, \"./output/example2.toml\", \".obj1\");\n\nstring memory jsonObj3 = '{ \"aNumber\": 123, \"obj3\": { \"veryDeep\": 3 } }';\nvm.writeToml(jsonObj3, \"./output/example2.toml\", \".obj1.obj2\");\n\n// Note that the JSON object is just the value 13371337 in this case.\nvm.writeToml(\"13371337\", \"./output/example2.toml\", \"..veryDeep\");\n```\n\n----------------------------------------\n\nTITLE: JSON to Solidity Struct Mapping Example\nDESCRIPTION: Example showing how to map JSON object properties to Solidity struct fields based on alphabetical ordering.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-json.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a\": 43,\n  \"b\": \"sigma\"\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Json {\n    uint256 a;\n    string b;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Vanity Address with Prefix and Saving to Path\nDESCRIPTION: This snippet illustrates the command to generate a vanity wallet address that starts with a specific prefix and saves the wallet details to a custom path. The '--save-path' option is used to specify the file location for saving the wallet details in JSON format.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-vanity.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncast wallet vanity --starts-with dead --save-path /path/to/save\n```\n\n----------------------------------------\n\nTITLE: Example Usage of `fail` Function in Solidity\nDESCRIPTION: Demonstrates the use of the `fail` function in a test function. Iterates over a leaderboard to check for a specific address. On failure to find the address within the top 10 places, the `fail` function is called with an appropriate failure message. Requires the `game` instance and its method `leaderboard`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/fail.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction test() external {\n    for(uint256 place; place < 10; ++i){\n        if(game.leaderboard(place) == address(this)) return;\n    }\n    fail(\"Not in the top 10.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using vm.etch to Set Bytecode at an Address in Solidity\nDESCRIPTION: An example of using vm.etch to set the bytecode of a target address to that of an existing contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/etch.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nbytes memory code = address(awesomeContract).code;\naddress targetAddr = makeAddr(\"target\");\nvm.etch(targetAddr, code);\nlog_bytes(address(targetAddr).code); // 0x6080604052348015610010...\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Value in Solidity\nDESCRIPTION: A pure internal function that converts a signed integer to its unsigned absolute value. Handles conversion of negative numbers to their positive equivalent without changing positive numbers.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/abs.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction abs(int256 a) internal pure returns (uint256)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 ten = stdMath.abs(-10);\n```\n\n----------------------------------------\n\nTITLE: Proper Usage of Assume for Narrow Checks in Solidity\nDESCRIPTION: Example showing a good use case for the `assume` cheatcode to filter out a specific value during fuzzing. This is appropriate for narrow conditions that exclude only specific values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/assume.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// Good example of using assume\nfunction testSomething(uint256 a) public {\n    vm.assume(a != 1);\n    require(a != 1);\n    // [PASS]\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Fork to Specific Block Number in Solidity\nDESCRIPTION: This function rolls the active fork to a specified block number. It updates the block.number for the currently active fork.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/roll-fork.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rollFork(uint256 blockNumber) external;\n```\n\n----------------------------------------\n\nTITLE: Building with Additional Artifact Output\nDESCRIPTION: Example of using forge build with extra output from the Solidity compiler, specifically the EVM assembly.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nforge build --extra-output evm.assembly\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for String Arrays in Solidity\nDESCRIPTION: These Solidity functions verify that two arrays of string values are identical. They allow for an error message to provide additional context to the assertion failures.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(string[] memory left, string[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(string[] memory left, string[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Profiles with IR Pipeline\nDESCRIPTION: Example of a foundry.toml configuration with both default (IR pipeline) and lite profiles with customized Yul optimizer settings for faster development builds.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default]\nsolc-version = \"0.8.17\"\nvia_ir = true\n\n[profile.lite.optimizer_details.yulDetails]\noptimizerSteps = ''\n```\n\n----------------------------------------\n\nTITLE: Using Bound Instead of Assume for Broad Range Checks in Solidity\nDESCRIPTION: Example demonstrating when to use the `bound` function instead of `assume` for broader range checks. This approach is more efficient than using `assume` for filtering large ranges of values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/assume.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// In this case assume is not a great fit, so you should bound inputs manually\nfunction testSomethingElse(uint256 a) public {\n    a = bound(a, 100, 1e36);\n    require(a >= 100 && a <= 1e36);\n    // [PASS]\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertFalse Function in Solidity\nDESCRIPTION: This snippet demonstrates how to use the `assertFalse` function in a contract. It evaluates a boolean value returned from a contract function and asserts that it is false. If the assertion fails, it will revert the transaction, ensuring that only expected states are allowed.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertFalse.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nbool failure = contract.fun();\nassertFalse(failure);\n```\n\n----------------------------------------\n\nTITLE: Sending an EIP-7702 Transaction with Address Authorization\nDESCRIPTION: Example of sending an EIP-7702 transaction by directly specifying an address for authorization, simplifying the delegation process.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-send.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncast send $(cast az) --auth <address>\n```\n\n----------------------------------------\n\nTITLE: Reading Int256 Array Environment Variable\nDESCRIPTION: Function signature for reading an array of int256 values from an environment variable. Takes a key string and delimiter string as parameters and returns an array of int256 values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-int.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction envInt(string calldata key, string calldata delimiter) external returns (int256[] memory values);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Actor Bounded Deposit Function\nDESCRIPTION: A bounded version of the multi-actor deposit function that constrains the asset amount and calls the parent implementation with the bounded value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\n// Bounded\nfunction deposit(uint256 assets, uint256 actorIndexSeed) external {\n    assets = bound(assets, 0, 1e30);\n\n    super.deposit(assets, actorIndexSeed);\n}\n```\n\n----------------------------------------\n\nTITLE: Using setEnv Cheatcode in Solidity\nDESCRIPTION: An example of how to use the setEnv cheatcode to set an environment variable. It demonstrates setting a key-value pair using string memory variables.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/set-env.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"hello\";\nstring memory val = \"world\";\ncheats.setEnv(key, val);\n```\n\n----------------------------------------\n\nTITLE: Basic mockCall Function Signatures\nDESCRIPTION: The two main function signatures for mockCall - one for basic call mocking and another that includes msg.value parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-call.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mockCall(address where, bytes calldata data, bytes calldata retdata) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mockCall(\n    address where,\n    uint256 value,\n    bytes calldata data,\n    bytes calldata retdata\n) external;\n```\n\n----------------------------------------\n\nTITLE: Cast Call Create: Usage Documentation\nDESCRIPTION: This text snippet details the arguments and options available for the `cast call --create` command, including bytecode, constructor signature, arguments, value transfer, threading, and verbosity options. It explains the purpose of each argument and provides examples for certain options like specifying ether value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/call/--create.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast call --create [OPTIONS] <CODE> [SIG] [ARGS]...\n\nArguments:\n  <CODE>\n          Bytecode of contract\n\n  [SIG]\n          The signature of the constructor\n\n  [ARGS]...\n          The arguments of the constructor\n\nOptions:\n      --value <VALUE>\n          Ether to send in the transaction.\n          \n          Either specified in wei, or as a string with a unit type.\n          \n          Examples: 1ether, 10gwei, 0.01ether\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Bool Arrays in Solidity\nDESCRIPTION: This function assists in verifying the equality of two arrays of boolean values. It is specifically employed in scenarios necessitating alignment-checks between arrays, with optional error handling.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bool[] memory left, bool[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bool[] memory left, bool[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Writing Balance to Packed Storage Slot\nDESCRIPTION: Demonstrates usage of enable_packed_slots to write arbitrary balances to a token contract, bypassing standard storage constraints. Particularly useful for testing gas-optimized contracts with complex storage layouts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/enable_packed_slots.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstdstore\n    .enable_packed_slots()\n    .target(_tokenAddress)\n    .sig(\"balanceOf(address)\")\n    .with_key(_to)\n    .checked_write(\n        _amount\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining Address Generation Function in Solidity\nDESCRIPTION: This code snippet shows the function signature for the `addr` function, which takes a private key as input and returns the corresponding Ethereum address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/addr.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addr(uint256 privateKey) external returns (address);\n```\n\n----------------------------------------\n\nTITLE: Asserting Relative Approximate Equality for Signed Integers\nDESCRIPTION: Checks if two signed integers are approximately equal within a specified maximum percentage delta. Supports optional custom error message. Used for comparing numeric values with relative tolerance.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqRel.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Naive Implementation Assertions for Solidity Invariants\nDESCRIPTION: Example of naive assertions in Solidity, where the contract's logic is compared against a less efficient implementation. This snippet asserts that the calculated outstanding interest matches a naive test interest calculation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nassertEq(\n    pool.outstandingInterest(),\n    test.naiveInterest()\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Vault Contract in Solidity\nDESCRIPTION: The BasicVault contract allows users to deposit and withdraw tokens while tracking their balances. It includes error handling to ensure operations succeed under certain conditions, preventing underflow and overflow.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/arithmeticError.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract BasicVault {\n\n    IERC20 public immutable wmdToken;   \n    mapping(address => uint) public balances;\n\n    event Deposited(address indexed from, uint amount);\n    event Withdrawal(address indexed from, uint amount);\n\n    constructor(IERC20 wmdToken_){\n        wmdToken = wmdToken_;\n    }\n\n    function deposit(uint amount) external {    \n        balances[msg.sender] += amount;\n        bool success = wmdToken.transferFrom(msg.sender, address(this), amount);\n        require(success, \"Deposit failed!\"); \n        emit Deposited(msg.sender, amount);\n    }\n\n    function withdraw(uint amount) external {      \n        balances[msg.sender] -= amount;\n        bool success = wmdToken.transfer(msg.sender, amount);\n        require(success, \"Withdrawal failed!\");\n        emit Withdrawal(msg.sender, amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Signed Integer Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two signed integer values (int256). The function reverts if the two signed integers are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(int256 left, int256 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(int256 left, int256 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Approximate Relative Equality Assertion\nDESCRIPTION: Demonstrates usage of assertApproxEqRel with unsigned integers, showing how to check if two values are within a specified percentage delta. This example would trigger a failure due to exceeding the maximum allowed delta.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqRel.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testRevert() external {\n    uint256 a = 100;\n    uint256 b = 200;\n    assertApproxEqRel(a, b, 0.4e18);\n}\n```\n\n----------------------------------------\n\nTITLE: Prank Function with Delegate Call Control\nDESCRIPTION: Sets msg.sender and controls whether the prank applies to delegate calls using a boolean flag.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prank.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction prank(address msgSender, bool delegateCall) external;\n```\n\n----------------------------------------\n\nTITLE: Deriving Address for Broadcasting Transactions\nDESCRIPTION: This example showcases deriving an address using `deriveRememberKey` and immediately using it with `vm.startBroadcast` and `vm.stopBroadcast` to broadcast transactions. The private key is intentionally ignored.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/derive-remember-key.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory mnemonic = \"test test test test test test test test test test test junk\";\n\n(address deployer, ) = deriveRememberKey(mnemonic, 0);\n\nvm.startBroadcast(deployer);\n...\nvm.stopBroadcast();\n```\n\n----------------------------------------\n\nTITLE: Performing Right Bit Shift with cast-shr in Shell\nDESCRIPTION: This snippet demonstrates how to use the cast-shr command to perform a right bit shift operation on the hexadecimal value 0x12 by 1 bit. The --base-in option indicates the numerical base of the input value, which is essential for correct interpretation when the input could be ambiguous.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-shr.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast shr --base-in 16 0x12 1\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage Difference for Unsigned Integers in Solidity\nDESCRIPTION: This Solidity function computes the percentage difference between two unsigned integers. It returns the result as an unsigned integer, where `1e18` indicates 100%. The function calculates the absolute difference divided by the second integer.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/percentDelta.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\n    return abs((a - b) * 1e18 / b);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Successful Fuzz Test with Forge\nDESCRIPTION: Shell command and output showing the fuzz test passing after fixing the type restriction.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fuzz-testing.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n{{#include ../output/fuzz_testing/forge-test-success-fuzz:all}}\n```\n\n----------------------------------------\n\nTITLE: Vyper Counter Contract\nDESCRIPTION: Simple counter contract implementation in Vyper with initialization, setting, and increment functions\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vyper.md#2025-04-22_snippet_4\n\nLANGUAGE: vyper\nCODE:\n```\nnumber: public(uint256)\n\n@deploy\n@payable\ndef __init__(initial_number: uint256):\n    self.number = initial_number\n\n@external\ndef set_number(new_number: uint256):\n    self.number = new_number\n\n@external\ndef increment():\n    self.number += 1\n```\n\n----------------------------------------\n\nTITLE: Simple Struct Usage in a Solidity Contract\nDESCRIPTION: This example demonstrates how to use a simple struct in a Solidity contract function. It includes the pragma statement and a function that takes the struct as an argument.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/misc/struct-encoding.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity =0.8.15;\n\n\ncontract Test {\n    struct MyStruct {\n        address addr;\n        uint256 amount;\n    }\n    function f(MyStruct memory t) public pure {}\n}\n```\n\n----------------------------------------\n\nTITLE: Vyper Library Configuration\nDESCRIPTION: foundry.toml configuration for external Vyper libraries\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vyper.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nskip = [\"**/lib/snekmate/**\"]\nlibs = [\"lib\", \"lib/snekmate/src\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Struct in Solidity\nDESCRIPTION: This snippet shows how to define a basic struct in Solidity with an address and a uint256 field.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/misc/struct-encoding.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct MyStruct {\n    address addr;\n    uint256 amount;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure\nDESCRIPTION: Shows the default directory structure for a Foundry project, including source files, tests, libraries, and configuration files. The actual structure is included via a template include statement.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/project-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{#include ../output/hello_foundry/tree-with-files:output}}\n```\n\n----------------------------------------\n\nTITLE: Setting Verifier URL Environment Variable\nDESCRIPTION: Defines an environment variable for specifying the URL of a custom contract verification provider.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/script.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n[env: VERIFIER_URL=]\n```\n\n----------------------------------------\n\nTITLE: Running Failed Fuzz Test with Forge\nDESCRIPTION: Shell command and output showing the fuzz test failing for high values of 'amount'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fuzz-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ forge test\n{{#include ../output/fuzz_testing/forge-test-fail-fuzz:output}}\n```\n\n----------------------------------------\n\nTITLE: Single Dependency Update with Forge in Shell\nDESCRIPTION: This snippet demonstrates updating a single dependency using the `forge update` command. It assumes that Forge is installed and configured to manage dependencies. The command updates the specified dependency to the latest version based on the reference set during installation. This works under the condition that the dependency is not pinned in the `foundry.lock` file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-update.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge update lib/solmate\n```\n\n----------------------------------------\n\nTITLE: Using parseBool Function to Convert String to Boolean in Solidity\nDESCRIPTION: This example demonstrates how to use the `parseBool` function to convert a string representation of a boolean value to an actual boolean type.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-bool.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory boolAsString = \"false\";\nbool stringToBool = vm.parseBool(boolAsString); // false\n```\n\n----------------------------------------\n\nTITLE: Mocking All Function Calls with mockFunction in Solidity\nDESCRIPTION: An example of using mockFunction to mock all calls to the count function, showing how it affects multiple function calls with different parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-function.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMockCall() public {\n    vm.mockFunction(\n        address(counter),\n        address(model),\n        abi.encodeWithSelector(Counter.count.selector)\n    );\n    counter.count(678);\n    assertEq(counter.a(), 123 + 678);\n    counter.count(789);\n    assertEq(counter.a(), 123 + 789);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Prompt Timeouts\nDESCRIPTION: Example of using try/catch to handle prompt timeouts gracefully with a default fallback value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prompt.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory input;\n\ntry vm.prompt(\"Username\") returns (string memory res) {\n    input = res;\n}\ncatch (bytes memory) {\n    input = \"Anonymous\";\n}\n```\n\n----------------------------------------\n\nTITLE: MockCallRevert with msg.value Example\nDESCRIPTION: Example showing how to mock a revert for a specific msg.value amount.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-call-revert.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testMockCallRevertWithValue() public {\n    assertEq(example.pay{value: 10}(1), 1);\n    assertEq(example.pay{value: 1}(2), 2);\n    vm.mockCallRevert(\n        address(example),\n        10,\n        abi.encodeWithSelector(example.pay.selector),\n        \"ERROR_MESSAGE\"\n    );\n    assertEq(example.pay{value: 1}(2), 2);\n    vm.expectRevert(\"ERROR_MESSAGE\");\n    assertEq(example.pay{value: 10}(1), 99);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Help Command for Cast Storage Root in Bash\nDESCRIPTION: This snippet shows how to display the help information for the 'cast storage-root' command using the command-line interface.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/storage-root.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast storage-root --help\n```\n\n----------------------------------------\n\nTITLE: Asserting Approximate Equality with Uint256 and Custom Error in Solidity\nDESCRIPTION: This variant of the function checks for approximate equality of two uint256 values with an additional parameter for a custom error message to be returned if the assertion fails. It allows greater flexibility in error handling.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqRelDecimal.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Simple WriteJson Usage Example\nDESCRIPTION: Basic example showing how to write a new JSON file and update specific values using JSON paths.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/write-json.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory jsonObj = '{ \"boolean\": true, \"number\": 342, \"myObject\": { \"title\": \"finally json serialization\" } }';\nvm.writeJson(jsonObj, \"./output/example.json\");\n\n// replaces the value of `myObject` with a new object\nstring memory newJsonObj = '{ \"aNumber\": 123, \"aString\": \"asd\" }';\nvm.writeJson(newJsonObj, \"./output/example.json\", \".myObject\");\n\n// replaces the value of `aString` in the new object\nvm.writeJson(\"my new string\", \"./output/example.json\", \".myObject.aString\");\n```\n\n----------------------------------------\n\nTITLE: Parsing TOML with parseToml Cheatcode in Solidity\nDESCRIPTION: These cheatcodes are used to parse TOML files in the form of strings after converting to JSON. They can return either a specific value corresponding to a key or the entire TOML file as an abi-encoded bytes array.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-toml.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// Return the value(s) that correspond to 'key'\nvm.parseToml(string memory toml, string memory key)\n// Return the entire TOML file\nvm.parseToml(string memory toml);\n```\n\n----------------------------------------\n\nTITLE: Listing Tests in Different Formats\nDESCRIPTION: This code snippet provides examples of listing available tests without executing them. It uses the `forge test --list` command, optionally with `--json` for structured output\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-test.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nforge test --list\nforge test --list --json\nforge test --list --json --match-test \"testRevert*\" | tail -n 1 | json_pp\n```\n\n----------------------------------------\n\nTITLE: Performing Checked Write in Solidity\nDESCRIPTION: This Solidity snippet defines overloaded versions of the 'checked_write' function. The purpose of each function is to securely write to storage using different types: address, uint256, bool, and bytes32. These functions are internal and depend on a storage reference and the type-specific parameter to write. They revert with a message if the operation is unsuccessful.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/checked_write.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction checked_write(StdStorage storage self, address who) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction checked_write(StdStorage storage self, uint256 amt) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction checked_write(StdStorage storage self, bool write) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction checked_write(StdStorage storage self, bytes32 set) internal;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Nonce with getNonce in Solidity (Function Signatures)\nDESCRIPTION: Function signatures for the getNonce method in Foundry, which returns the current nonce (transaction count) of an account. It accepts either an address or a Wallet memory object as input and returns a uint64 value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-nonce.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getNonce(address account) external returns (uint64);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getNonce(Wallet memory wallet) external returns (uint64);\n```\n\n----------------------------------------\n\nTITLE: Solidity `assertGeDecimal` Signature (uint256)\nDESCRIPTION: Defines the signature for the `assertGeDecimal` function that takes two unsigned 256-bit integers (`left` and `right`) and a `decimals` value as input. It asserts `left` is greater than or equal to `right` formatted with the specified `decimals` in the revert string.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGeDecimal.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n\"function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) internal\"\n```\n\n----------------------------------------\n\nTITLE: Deploying with Constructor Arguments in Solidity\nDESCRIPTION: An overload of the deployCodeTo function adds support for constructor arguments by accepting an additional bytes memory parameter. This facilitates the specification of constructor arguments when pseudo-deploying a contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/deployCodeTo.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployCodeTo(string memory what, bytes memory args, address where) internal virtual;\n```\n\n----------------------------------------\n\nTITLE: Example Gas Report Output\nDESCRIPTION: This snippet demonstrates the format and content of a gas report generated by Forge, including deployment costs and function-level gas usage statistics.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/gas-reports.md#2025-04-22_snippet_1\n\nLANGUAGE: ignore\nCODE:\n```\n╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮\n│ MockERC1155 contract  ┆                 ┆        ┆        ┆        ┆         │\n╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡\n│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ balanceOf             ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ balanceOfBatch        ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ batchBurn             ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ batchMint             ┆ 2444            ┆ 135299 ┆ 125081 ┆ 438531 ┆ 18      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ burn                  ┆ 814             ┆ 2117   ┆ 2117   ┆ 3421   ┆ 2       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ isApprovedForAll      ┆ 749             ┆ 749    ┆ 749    ┆ 749    ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ mint                  ┆ 26039           ┆ 31943  ┆ 27685  ┆ 118859 ┆ 22      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ safeBatchTransferFrom ┆ 2561            ┆ 137750 ┆ 126910 ┆ 461304 ┆ 8       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ safeTransferFrom      ┆ 1335            ┆ 34505  ┆ 28103  ┆ 139557 ┆ 9       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ setApprovalForAll     ┆ 24485           ┆ 24485  ┆ 24485  ┆ 24485  ┆ 12      │\n╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯\n\n╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮\n│ Example contract      ┆                 ┆        ┆        ┆        ┆         │\n╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡\n│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ foo                   ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ bar                   ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ baz                   ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │\n╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Cast Send Command Usage and Options\nDESCRIPTION: Detailed usage information for the 'cast send' command, including all available options, arguments, and subcommands. It covers transaction options, Ethereum network settings, wallet configurations, and display preferences.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/send.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast send [OPTIONS] [TO] [SIG] [ARGS]... [COMMAND]\n\nCommands:\n  --create  Use to deploy raw contract bytecode\n  help      Print this message or the help of the given subcommand(s)\n\nArguments:\n  [TO]\n          The destination of the transaction.\n          \n          If not provided, you must use cast send --create.\n\n  [SIG]\n          The signature of the function to call\n\n  [ARGS]...\n          The arguments of the function to call\n\nOptions:\n      --async\n          Only print the transaction hash and exit immediately\n          \n          [env: CAST_ASYNC=]\n\n      --confirmations <CONFIRMATIONS>\n          The number of confirmations until the receipt is fetched\n          \n          [default: 1]\n\n      --unlocked\n          Send via `eth_sendTransaction` using the `--from` argument or\n          $ETH_FROM as sender\n\n      --timeout <TIMEOUT>\n          Timeout for sending the transaction\n          \n          [env: ETH_TIMEOUT=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nTransaction options:\n  --gas-limit <GAS_LIMIT>\n          Gas limit for the transaction\n          \n          [env: ETH_GAS_LIMIT=]\n\n  --gas-price <PRICE>\n          Gas price for legacy transactions, or max fee per gas for EIP1559\n          transactions, either specified in wei, or as a string with a unit\n          type.\n          \n          Examples: 1ether, 10gwei, 0.01ether\n          \n          [env: ETH_GAS_PRICE=]\n\n  --priority-gas-price <PRICE>\n          Max priority fee per gas for EIP1559 transactions\n          \n          [env: ETH_PRIORITY_GAS_PRICE=]\n\n  --value <VALUE>\n          Ether to send in the transaction, either specified in wei, or as a\n          string with a unit type.\n          \n          Examples: 1ether, 10gwei, 0.01ether\n\n  --nonce <NONCE>\n          Nonce for the transaction\n\n  --legacy\n          Send a legacy transaction instead of an EIP1559 transaction.\n          \n          This is automatically enabled for common networks without EIP1559.\n\n  --blob\n          Send a EIP-4844 blob transaction\n\n  --blob-gas-price <BLOB_PRICE>\n          Gas price for EIP-4844 blob transaction\n          \n          [env: ETH_BLOB_GAS_PRICE=]\n\n  --auth <AUTH>\n          EIP-7702 authorization list.\n          \n          Can be either a hex-encoded signed authorization or an address.\n\n  --access-list [<ACCESS_LIST>]\n          EIP-2930 access list.\n          \n          Accepts either a JSON-encoded access list or an empty value to create\n          the access list via an RPC call to `eth_createAccessList`. To retrieve\n          only the access list portion, use the `cast access-list` command.\n\n  --path <BLOB_DATA_PATH>\n          The path of blob data to be sent\n\nEthereum options:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\nWallet options - raw:\n  -f, --from <ADDRESS>\n          The sender account\n          \n          [env: ETH_FROM=]\n\n  -i, --interactive\n          Open an interactive prompt to enter your private key\n\n      --private-key <RAW_PRIVATE_KEY>\n          Use the provided private key\n\n      --mnemonic <MNEMONIC>\n          Use the mnemonic phrase of mnemonic file at the specified path\n\n      --mnemonic-passphrase <PASSPHRASE>\n          Use a BIP39 passphrase for the mnemonic\n\n      --mnemonic-derivation-path <PATH>\n          The wallet derivation path.\n          \n          Works with both --mnemonic-path and hardware wallets.\n\n      --mnemonic-index <INDEX>\n          Use the private key from the given mnemonic index.\n          \n          Used with --mnemonic-path.\n          \n          [default: 0]\n\nWallet options - keystore:\n  --keystore <PATH>\n          Use the keystore in the given folder or file\n          \n          [env: ETH_KEYSTORE=]\n\n  --account <ACCOUNT_NAME>\n          Use a keystore from the default keystores folder\n          (~/.foundry/keystores) by its filename\n          \n          [env: ETH_KEYSTORE_ACCOUNT=]\n\n  --password <PASSWORD>\n          The keystore password.\n          \n          Used with --keystore.\n\n  --password-file <PASSWORD_FILE>\n          The keystore password file path.\n          \n          Used with --keystore.\n          \n          [env: ETH_PASSWORD=]\n\nWallet options - hardware wallet:\n  -l, --ledger\n          Use a Ledger hardware wallet\n\n  -t, --trezor\n          Use a Trezor hardware wallet\n\nWallet options - remote:\n  --aws\n          Use AWS Key Management Service\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Publishing a Pre-signed Transaction with RPC URL in Shell\nDESCRIPTION: Example of publishing a pre-signed transaction to an Ethereum network using the cast publish command with a specified RPC URL from an environment variable.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-publish.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast publish --rpc-url $RPC $TX\n```\n\n----------------------------------------\n\nTITLE: Replaying and Tracing an Ethereum Transaction with Cast\nDESCRIPTION: This command uses Cast to replay and trace a specific Ethereum transaction, providing detailed execution information.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cast/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncast run 0x9c32042f5e997e27e67f82583839548eb19dc78c4769ad6218657c17f2a5ed31 --rpc-url https://eth.merkle.io\n```\n\n----------------------------------------\n\nTITLE: Using skip function in Solidity Foundry tests\nDESCRIPTION: Examples demonstrating how to use the `skip` function in Foundry tests. It shows both a skipped test and a non-skipped test that will fail due to a revert.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/skip.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testSkip() public {\n    vm.skip(true);\n    /// This revert will not be reached as this test will be skipped.\n    revert(\"Should not reach this revert\");\n}\n\nfunction testNotSkip() public {\n    vm.skip(false);\n    /// This revert will be reached as this test will not be skipped, and the test will fail.\n    revert(\"Should reach this revert\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using envOr for Array Environment Variables in Solidity\nDESCRIPTION: These examples show how to use the envOr function to read array environment variables with default values. It demonstrates usage with address arrays and includes two different implementation approaches.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-or.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\naddress[] badTokens;\n\nfunction envBadTokens() public {\n  badTokens = vm.envOr(\"BAD_TOKENS\", \",\", badTokens);\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction envBadTokens() public {\n  address[] memory defaultBadTokens = new address[](0);\n  address[] memory badTokens = vm.envOr(\"BAD_TOKENS\", \",\", defaultBadTokens);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Solidity Compiler Version in Foundry Configuration\nDESCRIPTION: This TOML snippet sets the Solidity compiler version in the Foundry configuration file (foundry.toml). It specifies version 0.8.17 for the default profile.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vscode.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nsolc = \"0.8.17\"\n```\n\n----------------------------------------\n\nTITLE: Flatten and output Solidity contract to file\nDESCRIPTION: This command flattens the specified Solidity contract and writes the output to the specified file.  It combines all imported files into one and saves it to the designated output path.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-flatten.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge flatten --output src/Contract.flattened.sol src/Contract.sol\n```\n\n----------------------------------------\n\nTITLE: Using getCode to Deploy a Contract in Solidity\nDESCRIPTION: Demonstrates how to use getCode to deploy a contract and compare it with a traditionally deployed contract. It retrieves the bytecode, encodes constructor arguments, and uses assembly to create the contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-code.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nMyContract myContract = new MyContract(arg1, arg2);\n\n// Let's do the same thing with `getCode`\nbytes memory args = abi.encode(arg1, arg2);\nbytes memory bytecode = abi.encodePacked(vm.getCode(\"MyContract.sol:MyContract\"), args);\naddress anotherAddress;\nassembly {\n    anotherAddress := create(0, add(bytecode, 0x20), mload(bytecode))\n}\n\nassertEq0(address(myContract).code, anotherAddress.code); // [PASS]\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Call Command\nDESCRIPTION: This bash command provides help documentation for the cast call command, outlining its usage and options. It serves as a guide for users to understand how to utilize the cast call functionality and its commands effectively.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/call.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast call --help\n```\n\n----------------------------------------\n\nTITLE: Cast Decode ABI Usage\nDESCRIPTION: This snippet provides the general usage syntax for the `cast decode-abi` command. It shows the required arguments (signature and calldata) and various options for customizing the decoding process, such as specifying the number of threads, decoding input data instead of output data, and controlling the verbosity of the output.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-abi.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast decode-abi [OPTIONS] <SIG> <CALLDATA>\n\nArguments:\n  <SIG>\n          The function signature in the format `<name>(<in-types>)(<out-types>)`\n\n  <CALLDATA>\n          The ABI-encoded calldata\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDecode input data instead of output data:\n  -i, --input\n          Whether to decode the input or output data\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Defining assertGe with error message for uint256 in Solidity\nDESCRIPTION: This snippet enhances the previous assertGe function by allowing an optional error message. This function checks if the first uint256 value is greater than or equal to the second and can revert with a specified message if the condition fails.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGe.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertGe(uint256 left, uint256 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Initializing New Foundry Project with forge init\nDESCRIPTION: Creates a new Foundry project using the default template. This command initializes a new git repository in a directory named 'hello_foundry'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/creating-a-new-project.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/hello_foundry/forge-init:command}}\n```\n\n----------------------------------------\n\nTITLE: Defining Difficulty Function Signature in Solidity\nDESCRIPTION: Function signature for the difficulty cheatcode that allows setting block.difficulty value\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/difficulty.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction difficulty(uint256) external;\n```\n\n----------------------------------------\n\nTITLE: Asserting Unsigned Integer Array Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two unsigned integer arrays (uint256[]). The function reverts if the two uint256 arrays are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(uint256[] memory left, uint256[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(uint256[] memory left, uint256[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Interactive Solidity Variable Creation and Query\nDESCRIPTION: Example of creating and querying a variable in Chisel REPL, showing the verbose output format including hex and decimal representations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/chisel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n➜ uint256 a = 123;\n➜ a\nType: uint256\n├ Hex: 0x7b\n├ Hex (full word): 0x000000000000000000000000000000000000000000000000000000000000007b\n└ Decimal: 123\n```\n\n----------------------------------------\n\nTITLE: Extracting Function Selectors from WETH Contract Bytecode\nDESCRIPTION: This example demonstrates how to use the 'cast selectors' command to extract function selectors and arguments from the WETH contract bytecode. It first gets the contract code using 'cast code' and then passes it to 'cast selectors'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-selectors.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast selectors $(cast code 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Wallet Sign Command in Bash\nDESCRIPTION: This snippet shows how to display the help information for the 'cast wallet sign' command using the --help flag.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/sign.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet sign --help\n```\n\n----------------------------------------\n\nTITLE: Defining assertLeDecimal in Solidity\nDESCRIPTION: This Solidity snippet defines various overloads of the `assertLeDecimal` function, which asserts that a decimal `left` value is less than or equal to a decimal `right` value. It can handle both unsigned and signed integers and allows inclusion of an error message in the revert string. There are no external dependencies, and it works within the context of a Solidity smart contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertLeDecimal.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assertLeDecimal(uint256 left, uint256 right, uint256 decimals) internal\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assertLeDecimal(int256 left, int256 right, uint256 decimals) internal;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assertLeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Configuring foundry.toml for Deterministic Deployments\nDESCRIPTION: This TOML configuration sets up Foundry for deterministic deployments by pinning the Solidity compiler version, specifying the EVM version, and disabling bytecode hash and CBOR metadata.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/deterministic-deployments-using-create2.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default]\nsolc = \"0.8.28\"\nevm_version = \"cancun\"\nbytecode_hash = \"none\"\ncbor_metadata = false\n```\n\n----------------------------------------\n\nTITLE: Generating LCOV Coverage Report\nDESCRIPTION: Runs the forge coverage command with the --report lcov option to generate an lcov.info file that contains coverage data. This requires lcov to be installed and outputs the data file in the project's root directory.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-coverage.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge coverage --report lcov\n```\n\n----------------------------------------\n\nTITLE: External Contract Gas Usage Example\nDESCRIPTION: Example showing how to capture gas usage when calling an external contract using startSnapshotGas and stopSnapshotGas.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/gas-snapshots.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SnapshotGasTest is Test {\n    Flare public flare;\n\n    function setUp() public {\n        flare = new Flare();\n    }\n\n    function testSnapshotGas() public {\n        vm.startSnapshotGas(\"externalA\");\n        flare.run(256);\n        uint256 gasUsed = vm.stopSnapshotGas();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Adjusting ERC-20 Token Balances in Solidity\nDESCRIPTION: This functionality allows setting the balance of an ERC-20 token for a specified address using the 'deal' function. The function can accept an optional parameter to adjust the token's total supply after setting the balance. This is particularly relevant when testing or simulating transactions in a blockchain environment. Dependencies include Solidity syntax and the 'deal' cheatcode.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/deal.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deal(address to, uint256 give) public;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deal(address token, address to, uint256 give) public;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deal(address token, address to, uint256 give, bool adjust) public;\n```\n\nLANGUAGE: solidity\nCODE:\n```\ndeal(address(dai), alice, 10000e18);\nassertEq(dai.balanceOf(alice), 10000e18);\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract Code to Address in Solidity\nDESCRIPTION: The function deployCodeTo allows pseudo-deploying contract code to a specified address in a Solidity environment. It fetches the contract bytecode from artifacts and facilitates testing by mimicking production deployment conditions. The first version requires the contract filename and the destination address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/deployCodeTo.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployCodeTo(string memory what, address where) internal virtual;\n```\n\n----------------------------------------\n\nTITLE: Asserting Approximate Equality for Unsigned Integers in Solidity\nDESCRIPTION: This function asserts that two unsigned integers are approximately equal, allowing for a specified maximum delta and precision in decimal points. It includes an overload to optionally accept a custom error message for failure scenarios.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqAbsDecimal.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Configuring EVM Versions in Foundry\nDESCRIPTION: The configuration options provided in the toml file and inline forge configuration demonstrate how to manage EVM versions for testing in Foundry. Global configuration can be applied in a foundry.toml file or for individual tests using inline comments. This configuration is crucial for ensuring compatibility with forked chains using different EVM versions. No explicit outputs beyond configuration validation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fork-testing.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nevm_version = \"cancun\"\n```\n\nLANGUAGE: solidity\nCODE:\n```\n/// forge-config: default.evm_version = \"shanghai\"\n```\n\n----------------------------------------\n\nTITLE: Fuzz Test Configuration Example in Solidity\nDESCRIPTION: Complete example of configuring a fuzz test with in-line comments. This sets the number of runs, maximum test rejects, and log display options for the default profile.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/inline-test-config.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract MyFuzzTest is Test {\n  /// forge-config: default.fuzz.runs = 100\n  /// forge-config: default.fuzz.max-test-rejects = 2\n  /// forge-config: default.fuzz.show-logs = true\n  function test_InlineConfig(uint256 x) public {\n    // --- snip ---\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cast Calldata Command Bash\nDESCRIPTION: The 'cast calldata' command allows users to ABI-encode a function call with specified arguments. This snippet demonstrates how to access the help section of the command, which provides instructions and descriptions for the various options available.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/calldata.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast calldata --help\n```\n\n----------------------------------------\n\nTITLE: Transaction Replay with Address Labeling\nDESCRIPTION: Replay a transaction with custom address labels to improve trace readability and context\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-run.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncast run \\\n  --label 0xc564ee9f21ed8a2d8e7e76c085740d5e4c5fafbe:sender \\\n  --label 0x40950267d12e979ad42974be5ac9a7e452f9505e:recipient \\\n  --label 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:weth \\\n  0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca\n```\n\n----------------------------------------\n\nTITLE: Choosing Test Executor Address - Shell\nDESCRIPTION: This command sets the address that will execute the tests, allowing for the specification of which account is to be used as the sender during testing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/anvil/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nanvil --sender 0xC8479C45EE87E0B437c09d3b8FE8ED14ccDa825E\n```\n\n----------------------------------------\n\nTITLE: Running Foundry Project Tests\nDESCRIPTION: Executes the project's tests using the forge test command. This runs all tests in the project and displays the results.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/creating-a-new-project.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/hello_foundry/forge-test:all}}\n```\n\n----------------------------------------\n\nTITLE: Setting Character Level in MetaRPG Test\nDESCRIPTION: Uses stdStorage to set the level field of a Character for a specific address, demonstrating its use in a test contract. Requires the `metaRpg` contract address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\n// MetaRPG.t.sol\n\nstdstore\n    .target(address(metaRpg))\n    .sig(\"playerToCharacter(address)\")\n    .with_key(address(this))\n    .depth(1)\n    .checked_write(120);\n```\n\n----------------------------------------\n\nTITLE: Cast Sig: Struct Encoding Example\nDESCRIPTION: This example demonstrates how to use `cast sig` to get the function selector for the `myfunction((address,uint256))` function, where the argument is a struct that is encoded as a tuple.  It highlights how the struct `MyStruct` defined in the Solidity example is represented as `(address,uint256)` in the `cast sig` command. The command is executed from the shell.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-sig.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"cast sig \\\"myfunction((address,uint256))\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Transaction Information in Bash\nDESCRIPTION: Fetches complete transaction details using a transaction hash stored in a variable. Demonstrates basic usage of the cast tx command for blockchain transaction lookup.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-tx.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast tx $TX_HASH\n```\n\n----------------------------------------\n\nTITLE: Debugging Tests in Forge CLI\nDESCRIPTION: The snippet shows how to open a specific test in the interactive debugger using the `forge test` command with the `--debug` option. Useful for step-by-step examination of a test.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-test.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge test --debug testSomething\n```\n\n----------------------------------------\n\nTITLE: Defining with_key Function Signatures in Solidity\nDESCRIPTION: These are the function signatures for the `with_key` method in the StdStorage library. The function can accept different types of arguments: address, uint256, or bytes32.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/with_key.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction with_key(StdStorage storage self, address who) internal returns (StdStorage storage);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage);\n```\n\n----------------------------------------\n\nTITLE: Using Address Generation Function in Solidity\nDESCRIPTION: This example demonstrates how to use the `addr` function to generate an Ethereum address from a private key and log it. The function is called with a private key value of 1, and the resulting address is emitted as a log.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/addr.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\naddress alice = vm.addr(1);\nemit log_address(alice); // 0x7e5f4552091a69125d5dfcb7b8c2659029395bdf\n```\n\n----------------------------------------\n\nTITLE: Defining Arithmetic Error in Solidity\nDESCRIPTION: This snippet defines the internal Solidity error for failing arithmetic operations such as underflows and overflows. It serves as a foundational part of error handling in smart contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/arithmeticError.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstdError.arithmeticError\n```\n\n----------------------------------------\n\nTITLE: Cast Balance Command Usage Details\nDESCRIPTION: Comprehensive documentation for the cast balance command, detailing arguments, options for block selection, output formatting, RPC configuration, and display preferences\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/balance.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast balance [OPTIONS] <WHO>\n\nArguments:\n  <WHO>\n          The account to query\n\nOptions:\n  -B, --block <BLOCK>\n          The block height to query at.\n          \n          Can also be the tags earliest, finalized, safe, latest, or pending.\n\n  -e, --ether\n          Format the balance in ether\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n      --erc20 <ERC20>\n          erc20 address to query, with the method `balanceOf(address) return\n          (uint256)`, alias with '--erc721'\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Asserting Non-Equality of Unsigned Integers with Error Message in Solidity\nDESCRIPTION: This snippet extends the previous function by adding an optional error message parameter. It ensures that the assertion checks for non-equality of two unsigned integers considering decimal formatting while allowing custom error messages for more informative failed assertions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEqDecimal.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Upload Signatures using cast upload-signature\nDESCRIPTION: This example demonstrates how to use `cast upload-signature` to upload Ethereum function and event signatures to openchain.xyz.  The signatures are passed as arguments to the command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-upload-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast upload-signature 'function approve(address,uint256)' \\\n'transfer(uint256)' 'event Transfer(uint256,address)'\n```\n\n----------------------------------------\n\nTITLE: Store Function Signature in Solidity\nDESCRIPTION: Function signature for storing a value in a specific storage slot of a contract account.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/store.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction store(address account, bytes32 slot, bytes32 value) external;\n```\n\n----------------------------------------\n\nTITLE: Defining parseInt Function Signature in Solidity\nDESCRIPTION: Function signature for parseInt, which takes a string parameter and returns an int256 value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-int.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n```\n\n----------------------------------------\n\nTITLE: Basic Prank Function Signature\nDESCRIPTION: Sets msg.sender to the specified address for the next call, including static calls but excluding delegate calls.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prank.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction prank(address msgSender) external;\n```\n\n----------------------------------------\n\nTITLE: Running Forge Tests in Docker Container\nDESCRIPTION: Command to mount local directory and run Forge tests within Docker container with watch mode enabled.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/foundry-in-docker.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -v $PWD:/app foundry \"forge test --root /app --watch\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Wallet Remove Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast wallet remove' command, which is used to remove a wallet from the keystore.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/remove.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet remove --help\n```\n\n----------------------------------------\n\nTITLE: Solidity `assertGeDecimal` Signature (int256, err)\nDESCRIPTION: Defines the signature for the `assertGeDecimal` function that takes two signed 256-bit integers (`left` and `right`), a `decimals` value, and an error message string as input. It asserts that `left` is greater than or equal to `right`, and includes the specified error message in the revert if the assertion fails.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGeDecimal.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n\"function assertGeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\"\n```\n\n----------------------------------------\n\nTITLE: Measuring Time Intervals with vm.unixTime() in Solidity\nDESCRIPTION: This example demonstrates how to use vm.unixTime() to measure time intervals in Solidity tests. It uses vm.sleep() to pause execution and then calculates the elapsed time.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/unix-time.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint start = vm.unixTime();\nvm.sleep(10_000); // Halts execution for 10 seconds\nuint end = vm.unixTime();\nassertEq(end - start, 10_000);\n```\n\n----------------------------------------\n\nTITLE: Inspecting Contract Bytecode - Shell Script\nDESCRIPTION: Use 'forge inspect' to extract the bytecode of a specified contract. This requires the name of the contract as an argument followed by the 'bytecode' field. The output will display the contract's bytecode.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-inspect.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge inspect MyContract bytecode\n```\n\n----------------------------------------\n\nTITLE: Defining assertGe with error message for int256 in Solidity\nDESCRIPTION: This function extends the assertGe capability for int256 values by including an optional error message. It checks whether the first int256 value is greater than or equal to the second and allows for reversion with a custom message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGe.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertGe(int256 left, int256 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Extracting Nested Object Keys from JSON in Solidity\nDESCRIPTION: This example demonstrates how to use parseJsonKeys to extract keys from a nested object within a JSON string.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-json-keys.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory json = '{\"key\": {\"a\": 1, \"b\": 2}}';\nstring[] memory keys = vm.parseJsonKeys(json, \".key\"); // [\"a\", \"b\"]\n```\n\n----------------------------------------\n\nTITLE: Using getNonce with a Wallet Parameter in Solidity\nDESCRIPTION: Example of retrieving the nonce of a wallet using the Wallet parameter version of getNonce. This first creates a wallet named 'alice', then gets its nonce and logs it to the console.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-nonce.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nWallet memory alice = vm.createWallet(\"alice\");\nuint256 nonce = vm.getNonce(alice);\nemit log_uint(nonce); // 0\n```\n\n----------------------------------------\n\nTITLE: Asserting Non-Equality of Unsigned Integers with Decimals in Solidity\nDESCRIPTION: This snippet defines an internal function `assertNotEqDecimal` that takes two unsigned integers and a number of decimal places to assert that they are not equal. It provides a basic version without an error message, ensuring the comparison considers decimal precision.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEqDecimal.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) internal\n```\n\n----------------------------------------\n\nTITLE: Forge Doc Help Command\nDESCRIPTION: This bash command displays the help information for the `forge doc` command, listing all available options and their descriptions. This helps users understand the available configuration options for generating project documentation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/doc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge doc --help\n```\n\n----------------------------------------\n\nTITLE: Foundry Configuration Setup\nDESCRIPTION: TOML configuration for setting up RPC endpoints and Etherscan API key in foundry.toml file for deployment and verification.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/scripting-with-solidity.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[rpc_endpoints]\nsepolia = \"${SEPOLIA_RPC_URL}\"\n\n[etherscan]\nsepolia = { key = \"${ETHERSCAN_API_KEY}\" }\n```\n\n----------------------------------------\n\nTITLE: Using ParseBytes Function in Solidity\nDESCRIPTION: This example demonstrates how to use the parseBytes function to convert a hexadecimal string representation of bytes into an actual bytes value. It uses the vm object, which is likely a reference to Foundry's testing environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-bytes.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory bytesAsString = \"0x00000000000000000000000000000000\";\nbytes memory stringToBytes = vm.parseBytes(bytesAsString); // 0x00000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for Foundry Signing Documentation\nDESCRIPTION: Markdown list of links to different signing-related documentation pages in the Foundry book, including standard signing and delegation signing documentation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/signing.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`sign`](./sign.md)\n- [`signDelegation`](./sign-delegation.md)\n```\n\n----------------------------------------\n\nTITLE: Complete Help Output for Forge Verify-Contract Command\nDESCRIPTION: The full help text output for the 'forge verify-contract' command showing all available options including contract identification, constructor arguments, compilation settings, verification providers, RPC configurations, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/verify-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge verify-contract [OPTIONS] <ADDRESS> [CONTRACT]\n\nArguments:\n  <ADDRESS>\n          The address of the contract to verify\n\n  [CONTRACT]\n          The contract identifier in the form `<path>:<contractname>`\n\nOptions:\n      --constructor-args <ARGS>\n          The ABI-encoded constructor arguments\n          \n          [aliases: encoded-constructor-args]\n\n      --constructor-args-path <PATH>\n          The path to a file containing the constructor arguments\n\n      --guess-constructor-args\n          Try to extract constructor arguments from on-chain creation code\n\n      --compiler-version <VERSION>\n          The `solc` version to use to build the smart contract\n\n      --compilation-profile <PROFILE_NAME>\n          The compilation profile to use to build the smart contract\n\n      --num-of-optimizations <NUM>\n          The number of optimization runs used to build the smart contract\n          \n          [aliases: optimizer-runs]\n\n      --flatten\n          Flatten the source code before verifying\n\n  -f, --force\n          Do not compile the flattened smart contract before verifying (if\n          --flatten is passed)\n\n      --skip-is-verified-check\n          Do not check if the contract is already verified before verifying\n\n      --watch\n          Wait for verification result after submission\n\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n      --show-standard-json-input\n          Prints the standard json compiler input.\n          \n          The standard json compiler input can be used to manually submit\n          contract verification in the browser.\n\n      --via-ir\n          Use the Yul intermediate representation compilation pipeline\n\n      --evm-version <EVM_VERSION>\n          The EVM version to use.\n          \n          Overrides the version specified in the config.\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n      --retries <RETRIES>\n          Number of attempts for retrying verification\n          \n          [default: 5]\n\n      --delay <DELAY>\n          Optional delay to apply in between verification attempts, in seconds\n          \n          [default: 5]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nLinker options:\n  --libraries <LIBRARIES>\n          Set pre-linked libraries\n          \n          [env: DAPP_LIBRARIES=]\n\nVerifier options:\n  --verifier <VERIFIER>\n          The contract verification provider to use\n          \n          [default: sourcify]\n\n          Possible values:\n          - etherscan\n          - sourcify\n          - blockscout\n          - oklink\n          - custom:     Custom verification provider, requires compatibility\n            with the Etherscan API\n\n  --verifier-api-key <VERIFIER_API_KEY>\n          The verifier API KEY, if using a custom provider\n          \n          [env: VERIFIER_API_KEY=]\n\n  --verifier-url <VERIFIER_URL>\n          The verifier URL, if using a custom provider\n          \n          [env: VERIFIER_URL=]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Solidity Test for Vyper Contract\nDESCRIPTION: Test implementation in Solidity for the Vyper counter contract using forge-std\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vyper.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Test} from \"forge-std/Test.sol\";\n\ninterface ICounter {\n    function increment() external;\n    function number() external view returns (uint256);\n    function set_number(uint256 newNumber) external;\n}\n\ncontract CounterTest is Test {\n    ICounter public counter;\n    uint256 initialNumber = 5;\n\n    function setUp() public {\n        counter = ICounter(deployCode(\"Counter\", abi.encode(initialNumber)));\n        assertEq(counter.number(), initialNumber);\n    }\n\n    function test_Increment() public {\n        counter.increment();\n        assertEq(counter.number(), initialNumber + 1);\n    }\n\n    function testFuzz_SetNumber(uint256 x) public {\n        counter.set_number(x);\n        assertEq(counter.number(), x);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Delegate Contract Implementation\nDESCRIPTION: Implementation of a simple delegate contract with execution capabilities and an ERC20 token contract for testing\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign-delegation.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SimpleDelegateContract {\n    event Executed(address indexed to, uint256 value, bytes data);\n\n    struct Call {\n        bytes data;\n        address to;\n        uint256 value;\n    }\n\n    function execute(Call[] memory calls) external payable {\n        for (uint256 i = 0; i < calls.length; i++) {\n            Call memory call = calls[i];\n            (bool success, bytes memory result) = call.to.call{value: call.value}(call.data);\n            require(success, string(result));\n            emit Executed(call.to, call.value, call.data);\n        }\n    }\n\n    receive() external payable {}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Resumed Account Access in Solidity\nDESCRIPTION: This example shows how to use startStateDiffRecording and stopAndReturnStateDiff to record and analyze state changes, including resumed account access. It includes assertions to verify the recorded state changes and resumed access.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/stop-and-return-state-diff.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Foo {\n    Bar b;\n    uint256 public val;\n    constructor(Bar _b) { b = _b; }\n    function run() external {\n        val = val + 1;\n        b.run();\n        val = val + 1;\n    }\n}\ncontract Bar {\n    function run() external {}\n}\n\nBar bar = new Bar();\nFoo foo = new Foo(bar);\n\nvm.startStateDiffRecording();\nfoo.run();\nVm.AccountAccess[] memory records = vm.stopAndReturnStateDiff();\n\nassertEq(records.length, 3);\nVm.AccountAccess memory fooCall = records[0];\nassertEq(fooCall.kind, Vm.AccountAccessKind.Call);\nassertEq(fooCall.account, address(foo));\nassertEq(fooCall.accessor, address(this));\n// foo.val increment\nassertEq(fooCall.storageAccesses.length, 2);\nassertEq(fooCall.storageAccesses[0].isWrite, false);\nassertEq(fooCall.storageAccesses[1].isWrite, true);\nassertEq(fooCall.storageAccesses[1].oldValue, bytes32(uint(0)));\nassertEq(fooCall.storageAccesses[1].newValue, bytes32(uint(1)));\n\n// bar.run CALL\nVm.AccountAccess memory barCall = records[1];\nassertEq(barCall.kind, Vm.AccountAccessKind.Call);\nassertEq(barCall.account, address(bar));\nassertEq(barCall.accessor, address(foo));\n\n// foo.run RESUME\nVm.AccountAccess memory fooResume = records[2];\nassertEq(fooResume.kind, Vm.AccountAccessKind.Resume);\n// foo.val increment\nassertEq(fooResume.storageAccesses.length, 2);\nassertEq(fooResume.storageAccesses[0].isWrite, false);\nassertEq(fooResume.storageAccesses[1].isWrite, true);\nassertEq(fooResume.storageAccesses[1].oldValue, bytes32(uint(1)));\nassertEq(fooResume.storageAccesses[1].newValue, bytes32(uint(2)));\n```\n\n----------------------------------------\n\nTITLE: Starting Hoax with Single Address in Solidity\nDESCRIPTION: This function initializes a prank from a specified address without any ether distribution. The target address is passed as a parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/startHoax.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startHoax(address who) public;\n```\n\n----------------------------------------\n\nTITLE: Reading Single Boolean Environment Variable in Solidity\nDESCRIPTION: Example demonstrating how to read a single boolean value from an environment variable. The example reads 'BOOL_VALUE=true' and verifies the result matches the expected value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-bool.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"BOOL_VALUE\";\nbool expected = true;\nbool output = cheats.envBool(key);\nassert(output == expected);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getBlockTimestamp in Solidity Tests\nDESCRIPTION: Example showing how to use getBlockTimestamp in Forge tests, including verifying the initial timestamp and testing the vm.warp function's effect on the timestamp.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-block-timestamp.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nassertEq(vm.getBlockTimestamp(), 1, \"timestamp should be 1\");\nvm.warp(10);\nassertEq(vm.getBlockTimestamp(), 10, \"warp failed\");\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet Address Command Usage and Options\nDESCRIPTION: This snippet displays the full usage instructions and available options for the 'cast wallet address' command. It includes details on arguments, general options, wallet options (raw, keystore, hardware, and remote), and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/address.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet address [OPTIONS] [PRIVATE_KEY]\n\nArguments:\n  [PRIVATE_KEY]\n          If provided, the address will be derived from the specified private\n          key\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nWallet options - raw:\n  -f, --from <ADDRESS>\n          The sender account\n          \n          [env: ETH_FROM=]\n\n  -i, --interactive\n          Open an interactive prompt to enter your private key\n\n      --private-key <RAW_PRIVATE_KEY>\n          Use the provided private key\n\n      --mnemonic <MNEMONIC>\n          Use the mnemonic phrase of mnemonic file at the specified path\n\n      --mnemonic-passphrase <PASSPHRASE>\n          Use a BIP39 passphrase for the mnemonic\n\n      --mnemonic-derivation-path <PATH>\n          The wallet derivation path.\n          \n          Works with both --mnemonic-path and hardware wallets.\n\n      --mnemonic-index <INDEX>\n          Use the private key from the given mnemonic index.\n          \n          Used with --mnemonic-path.\n          \n          [default: 0]\n\nWallet options - keystore:\n  --keystore <PATH>\n          Use the keystore in the given folder or file\n          \n          [env: ETH_KEYSTORE=]\n\n  --account <ACCOUNT_NAME>\n          Use a keystore from the default keystores folder\n          (~/.foundry/keystores) by its filename\n          \n          [env: ETH_KEYSTORE_ACCOUNT=]\n\n  --password <PASSWORD>\n          The keystore password.\n          \n          Used with --keystore.\n\n  --password-file <PASSWORD_FILE>\n          The keystore password file path.\n          \n          Used with --keystore.\n          \n          [env: ETH_PASSWORD=]\n\nWallet options - hardware wallet:\n  -l, --ledger\n          Use a Ledger hardware wallet\n\n  -t, --trezor\n          Use a Trezor hardware wallet\n\nWallet options - remote:\n  --aws\n          Use AWS Key Management Service\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: ParseBytes32 Usage Example\nDESCRIPTION: Example demonstrating how to convert a hexadecimal string representation to bytes32 format using the parseBytes32 function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-bytes32.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory bytes32AsString = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nbytes32 stringToBytes32 = vm.parseBytes32(bytes32AsString); // 0x0000000000000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Changing the Port for Anvil - Shell Script\nDESCRIPTION: This command changes the default listening port of the Anvil server from 8545 to a specified port.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/anvil/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nanvil --port <PORT>\n```\n\n----------------------------------------\n\nTITLE: Defining the `accesses` Function Signature in Solidity\nDESCRIPTION: This snippet shows the function signature for the `accesses` cheatcode. It takes an address as input and returns two arrays of bytes32, representing read and written storage slots.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/accesses.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction accesses(\n  address\n)\nexternal\nreturns (\n  bytes32[] memory reads,\n  bytes32[] memory writes\n);\n```\n\n----------------------------------------\n\nTITLE: Foundry Prompt Function Signatures\nDESCRIPTION: Core prompt function signatures for getting user input, including regular text, secret text, and secret uint inputs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prompt.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction prompt(string calldata promptText) external returns (string memory input);\nfunction promptSecret(string calldata promptText) external returns (string memory input);\nfunction promptSecretUint(string calldata promptText) external returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: File Append Example with Read Permissions\nDESCRIPTION: Example showing how to append lines to a file with read permissions configured. Creates file if it doesn't exist.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/fs.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nfs_permissions = [{ access = \"read\", path = \"./\"}]\n```\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory path = \"output.txt\";\n\nstring memory line1 = \"first line\";\nvm.writeLine(path, line1);\n\nstring memory line2 = \"second line\";\nvm.writeLine(path, line2);\n```\n\n----------------------------------------\n\nTITLE: Get Balance of an ENS Name using cast\nDESCRIPTION: This example shows how to use `cast balance` to retrieve the balance of an account using an ENS name (beer.eth). The command directly queries the balance and displays the result in wei.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-balance.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"cast balance beer.eth\"\n```\n\n----------------------------------------\n\nTITLE: Building with a Specific Solidity Version\nDESCRIPTION: Example of using forge build with a specific Solidity compiler version (0.6.0).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nforge build --use solc:0.6.0\n```\n\n----------------------------------------\n\nTITLE: Gas Snapshot Cheatcode Signatures\nDESCRIPTION: Function signatures for gas snapshot cheatcodes including methods to start/stop gas measurements, capture values, and measure last call gas usage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/gas-snapshots.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n/// Start a snapshot capture of the current gas usage by name.\n/// The group name is derived from the contract name.\nfunction startSnapshotGas(string calldata name) external;\n\n/// Start a snapshot capture of the current gas usage by name in a group.\nfunction startSnapshotGas(string calldata group, string calldata name) external;\n\n/// Stop the snapshot capture of the current gas by latest snapshot name, capturing the gas used since the start.\nfunction stopSnapshotGas() external returns (uint256 gasUsed);\n\n/// Stop the snapshot capture of the current gas usage by name, capturing the gas used since the start.\n/// The group name is derived from the contract name.\nfunction stopSnapshotGas(string calldata name) external returns (uint256 gasUsed);\n\n/// Stop the snapshot capture of the current gas usage by name in a group, capturing the gas used since the start.\nfunction stopSnapshotGas(string calldata group, string calldata name) external returns (uint256 gasUsed);\n\n/// Snapshot capture an arbitrary numerical value by name.\n/// The group name is derived from the contract name.\nfunction snapshotValue(string calldata name, uint256 value) external;\n\n/// Snapshot capture an arbitrary numerical value by name in a group.\nfunction snapshotValue(string calldata group, string calldata name, uint256 value) external;\n\n/// Snapshot capture the gas usage of the last call by name from the callee perspective.\nfunction snapshotGasLastCall(string calldata name) external returns (uint256 gasUsed);\n\n/// Snapshot capture the gas usage of the last call by name in a group from the callee perspective.\nfunction snapshotGasLastCall(string calldata group, string calldata name) external returns (uint256 gasUsed);\n```\n\n----------------------------------------\n\nTITLE: Importing Keystore from Mnemonic - Shell\nDESCRIPTION: This snippet illustrates the process of creating a keystore from a mnemonic phrase using the 'cast wallet import' command. The mnemonic phrase 'test test test test test test test test test test test test' is provided to generate the keystore for account 'ALICE'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-import.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncast wallet import ALICE --mnemonic \"test test test test test test test test test test test test\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Contract Storage Layout - Shell Script\nDESCRIPTION: This snippet uses the 'forge inspect' command to extract the storage layout of a specific contract. Enter the contract name followed by the 'storage' field to view the layout of storage slots.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-inspect.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge inspect MyContract storage\n```\n\n----------------------------------------\n\nTITLE: Asserting Less Than or Equal for Unsigned Integers\nDESCRIPTION: Internal function to assert that the left value is less than or equal to the right value for uint256 types. Can be called with or without a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertLe.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLe(uint256 left, uint256 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLe(uint256 left, uint256 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Using computeCreateAddress utility function\nDESCRIPTION: This code snippet demonstrates the use of `computeCreateAddress` function from the Forge Standard Library. This calculates the address a contract will be deployed at for a given deployer address and nonce. It requires importing `Script.sol` or inheriting `Test` contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/README.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n// Compute the address a contract will be deployed at for a given deployer address and nonce\n  address futureContract = computeCreateAddress(alice, 1);\n```\n\n----------------------------------------\n\nTITLE: Debugging Fuzz Test\nDESCRIPTION: Example of debugging a fuzz test function named 'testFuzz_SetNumber', which will debug the first failing or last successful fuzz scenario\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/debugger.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ forge test --debug --match-test \"testFuzz_SetNumber\"\n```\n\n----------------------------------------\n\nTITLE: Using assertEq for assertions\nDESCRIPTION: This code snippet demonstrates the use of the `assertEq` function for assertions from the Forge Standard Library. `dai.balanceOf(alice)` is asserted to be `10000e18`. It requires importing the `Test` contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/README.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nassertEq(dai.balanceOf(alice), 10000e18);\n```\n\n----------------------------------------\n\nTITLE: Defining Absolute Difference Function for Unsigned Integers in Solidity\nDESCRIPTION: This function computes the absolute difference between two unsigned integers. It is marked as 'internal' and 'pure' which indicates it can only be called within the contract and does not modify the state. It takes two parameters, 'a' and 'b', both of type uint256, and returns a uint256 representing the absolute difference.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/delta.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delta(uint256 a, uint256 b) internal pure returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Script Pattern for Testing with Prompts\nDESCRIPTION: Recommended pattern for writing testable scripts that use vm.prompt, separating the prompt logic from the main business logic.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prompt.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Script {\n    function run() public {\n        uint256 myUint = vm.parseUint(vm.prompt(\"enter uint\"));\n        run(myUint);\n    }\n\n    function run(uint256 myUint) public {\n        // actual logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Boolean Array Environment Variable in Solidity\nDESCRIPTION: Example showing how to read an array of boolean values from an environment variable using a delimiter. The example reads 'BOOL_VALUES=true,false,True,False' with a comma delimiter and verifies the results.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-bool.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"BOOL_VALUES\";\nstring memory delimiter = \",\";\nbool[4] memory expected = [true, false, true, false];\nbool[] memory output = cheats.envBool(key, delimiter);\nassert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));\n```\n\n----------------------------------------\n\nTITLE: Defining generic log_array event in Solidity\nDESCRIPTION: This code shows the generic structure for defining a `log_array` event that can accept arrays of different types like `int256`, `uint256`, and `address`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-logs.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nevent log_array(<type>[] val);\n```\n\n----------------------------------------\n\nTITLE: Solidity `bound` function signature\nDESCRIPTION: This code snippet shows the function signature of the `bound` function in Solidity. It takes three `uint256` arguments (`x`, `min`, `max`) and returns a `uint256` result. This function is designed to wrap the input value `x` within the range defined by `min` and `max` in fuzz tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/bound.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\n```solidity\nfunction bound(uint256 x, uint256 min, uint256 max) public returns (uint256 result);\n```\n```\n\n----------------------------------------\n\nTITLE: Using isContext Function in Solidity\nDESCRIPTION: Example usage of the isContext function to check different Forge execution contexts and implement context-specific logic.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/is-context.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport {VmSafe} from \"forge-std/Vm.sol\";\n\nif (vm.isContext(VmSafe.ForgeContext.ScriptDryRun)) {\n    // execute specific script dry run logic\n}\n\nif (vm.isContext(VmSafe.ForgeContext.ScriptBroadcast)) {\n    // execute specific script broadcast logic\n}\n\nif (vm.isContext(VmSafe.ForgeContext.ScriptResume)) {\n    // execute specific script resume logic\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Anvil\nDESCRIPTION: Docker Compose configuration for launching Anvil local Ethereum network.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/foundry-in-docker.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  anvil:\n    image: ghcr.io/foundry-rs/foundry\n    container_name: anvil\n    environment:\n      ANVIL_IP_ADDR: \"0.0.0.0\"\n    working_dir: /anvil\n    ports:\n      - \"8545:8545\"\n    command: anvil\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Bytes in Solidity\nDESCRIPTION: These functions ensure that two dynamic byte arrays are identical, and offer the facility of specifying an error message for additional context in case of a failed assertion.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bytes memory left, bytes memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bytes memory left, bytes memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Computing Storage Slot Location with Cast Index\nDESCRIPTION: Example shell commands showing how to compute a storage slot for a string key in a mapping and then retrieve the value at that slot using cast storage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-index.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n>> cast index string \"hello\" 1\n0x3556fc8e3c702d4479a1ab7928dd05d87508462a12f53307b5407c969223d1f8\n>> cast storage [address] 0x3556fc8e3c702d4479a1ab7928dd05d87508462a12f53307b5407c969223d1f8\nworld\n```\n\n----------------------------------------\n\nTITLE: Get address from keystore.json with cast wallet address\nDESCRIPTION: This example shows how to use `cast wallet address` to retrieve the Ethereum address associated with a private key stored in a `keystore.json` file. The `--keystore` option specifies the path to the keystore file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-address.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"cast wallet address --keystore keystore.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Solidity popError\nDESCRIPTION: This Solidity snippet represents the internal error code that is triggered when attempting to remove an element from an empty array using pop operation. The error highlights improper array manipulation in smart contracts. There are no additional dependencies or parameters required, as the error is linked directly to array operations. Users of Solidity should handle such errors to prevent runtime crashes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/popError.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nstdError.popError\n```\n\n----------------------------------------\n\nTITLE: Deriving Private Key with Custom Path from Test Mnemonic in Solidity\nDESCRIPTION: This example shows how to derive a private key from a test mnemonic using a custom derivation path m/44'/60'/0'/1/0.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/derive-key.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory mnemonic = \"test test test test test test test test test test test junk\";\nuint256 privateKey = vm.deriveKey(mnemonic, \"m/44'/60'/0'/1/\", 0);\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Mktx Command - Bash\nDESCRIPTION: This snippet demonstrates how to display help information for the `cast mktx` command. It provides an overview of usage and available commands.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/mktx.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast mktx --help\"\n```\n\n----------------------------------------\n\nTITLE: Solidity Function Signature for deriveRememberKey\nDESCRIPTION: This snippet presents the function signature for `deriveRememberKey` in Solidity. It accepts a mnemonic string and an index as input, and returns the derived address and private key.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/derive-remember-key.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deriveRememberKey(string memory mnemonic, uint32 index) internal returns (address who, uint256 privateKey)\n```\n\n----------------------------------------\n\nTITLE: Generating a new mnemonic with specified word count\nDESCRIPTION: This example shows how to use the `cast wallet new-mnemonic` command to generate a new mnemonic phrase with a specific number of words (24 in this case). The command will output the generated mnemonic phrase and a list of derived accounts with their addresses and private keys.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-new-mnemonic.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast wallet new-mnemonic --words 24\n```\n\n----------------------------------------\n\nTITLE: Creating Address in Solidity\nDESCRIPTION: The `makeAddr` function in Solidity generates an address from a provided string `name` and associates a label with this address. It is intended for internal use and requires no external dependencies. The function returns an `address` type, calculated based on the input `name`. The function can emit logs for debugging or tracking purposes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/make-addr.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction makeAddr(string memory name) internal returns(address addr);\n```\n\nLANGUAGE: solidity\nCODE:\n```\naddress alice = makeAddr(\"alice\");\nemit log_address(alice); // 0x328809bc894f92807417d2dad6b7c998c1afdac6\n```\n\n----------------------------------------\n\nTITLE: Foundry copyStorage Cheatcode Signature\nDESCRIPTION: Function signature for the copyStorage cheatcode which takes the source and destination contract addresses as parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/copy-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction copyStorage(address from, address to) external;\n```\n\n----------------------------------------\n\nTITLE: Reading Single String Environment Variable\nDESCRIPTION: Example of reading a single string value from an environment variable named STRING_VALUE.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-string.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"STRING_VALUE\";\nstring memory expected = \"hello, world!\";\nstring memory output = vm.envString(key);\nassertEq(output, expected);\n```\n\n----------------------------------------\n\nTITLE: Querying Current Gas Price Using Cast CLI\nDESCRIPTION: Example of using the cast gas-price command to retrieve the current gas price from an Ethereum network. This command requires no additional arguments and returns the current gas price value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-gas-price.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast gas-price\n```\n\n----------------------------------------\n\nTITLE: Forge Format Usage and Options\nDESCRIPTION: This text block outlines the usage, arguments, and options available for the `forge fmt` command. It provides details on how to specify paths, set the root directory, check formatting, and configure watch mode and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/fmt.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge fmt [OPTIONS] [PATH]...\n\nArguments:\n  [PATH]...\n          Path to the file, directory or '-' to read from stdin\n\nOptions:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n      --check\n          Run in 'check' mode.\n          \n          Exits with 0 if input is formatted correctly. Exits with 1 if\n          formatting is required.\n\n  -r, --raw\n          In 'check' and stdin modes, outputs raw formatted code instead of the\n          diff\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nWatch options:\n  -w, --watch [<PATH>...]\n          Watch the given files or directories for changes.\n          \n          If no paths are provided, the source and test directories of the\n          project are watched.\n\n      --no-restart\n          Do not restart the command while it's still running\n\n      --run-all\n          Explicitly re-run all tests when a change is made.\n          \n          By default, only the tests of the last modified test file are\n          executed.\n\n      --watch-delay <DELAY>\n          File update debounce delay.\n          \n          During the delay, incoming change events are accumulated and only once\n          the delay has passed, is an action taken. Note that this does not mean\n          a command will be started: if --no-restart is given and a command is\n          already running, the outcome of the action will be to do nothing.\n          \n          Defaults to 50ms. Parses as decimal seconds by default, but using an\n          integer with the `ms` suffix may be more convenient.\n          \n          When using --poll mode, you'll want a larger duration, or risk\n          overloading disk I/O.\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Address Array Environment Variable Example\nDESCRIPTION: Example showing how to read multiple addresses from an environment variable using a delimiter and verify the array contents using keccak256 hash comparison.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-address.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"ADDRESS_VALUES\";\nstring memory delimiter = \",\";\naddress[2] memory expected = [\n    0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,\n    0x0000000000000000000000000000000000000000\n];\naddress[] memory output = vm.envAddress(key, delimiter);\nassert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast Wallet Help Information (Bash)\nDESCRIPTION: This command shows how to access the help information for the 'cast wallet' utility using the --help flag.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet --help\n```\n\n----------------------------------------\n\nTITLE: Defining vm.etch Function Signature in Solidity\nDESCRIPTION: The function signature for the vm.etch cheatcode, which takes an address and bytecode as parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/etch.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction etch(address who, bytes calldata code) external;\n```\n\n----------------------------------------\n\nTITLE: Solidity `assertGt` Signature (uint256 with error)\nDESCRIPTION: This Solidity function signature defines the `assertGt` function, which asserts that the `left` uint256 parameter is strictly greater than the `right` uint256 parameter. If the assertion fails, it reverts with the provided error message `err`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGt.md#2025-04-22_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\n\"function assertGt(uint256 left, uint256 right, string memory err) internal;\"\n```\n\n----------------------------------------\n\nTITLE: Help Output for cast to-rlp Command\nDESCRIPTION: This snippet shows the detailed help output for the 'cast to-rlp' command. It includes information on the command's usage, arguments, options, and display settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-rlp.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-rlp [OPTIONS] [VALUE]\n\nArguments:\n  [VALUE]\n          The value to convert.\n          \n          This is a hex-encoded string, or an array of hex-encoded strings. Can\n          be arbitrarily recursive.\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Asserting Approximate Equality with Int256 in Solidity\nDESCRIPTION: This function checks if two int256 values are approximately equal based on a percentage delta specified. Decimal formatting is applied to ensure accuracy in comparison.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqRelDecimal.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) internal;\n```\n\n----------------------------------------\n\nTITLE: Defining Absolute Difference Function for Signed Integers in Solidity\nDESCRIPTION: This function computes the absolute difference between two signed integers. Similar to the previous function, it is 'internal' and 'pure'. It accepts two parameters, 'a' and 'b', both of type int256, returning a uint256 that represents the absolute difference of their values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/delta.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delta(int256 a, int256 b) internal pure returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Solidity `assertGt` Signature (uint256)\nDESCRIPTION: This Solidity function signature defines the `assertGt` function, which asserts that the `left` uint256 parameter is strictly greater than the `right` uint256 parameter. The function reverts if the assertion fails.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGt.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\n\"function assertGt(uint256 left, uint256 right) internal;\"\n```\n\n----------------------------------------\n\nTITLE: Using the `accesses` Function in a Solidity Test\nDESCRIPTION: This example demonstrates how to use the `accesses` function in a test scenario. It shows interaction with a contract and how to retrieve the accessed storage slots.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/accesses.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n/// contract NumsContract {\n///     uint256 public num1 = 100; // slot 0\n///     uint256 public num2 = 200; // slot 1\n/// }\n\nvm.record();\nnumsContract.num2();\n(bytes32[] memory reads, bytes32[] memory writes) = vm.accesses(\n  address(numsContract)\n);\nemit log_uint(uint256(reads[0])); // 1\n```\n\n----------------------------------------\n\nTITLE: Asserting Less Than or Equal for Signed Integers\nDESCRIPTION: Internal function to assert that the left value is less than or equal to the right value for int256 types. Can be called with or without a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertLe.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLe(int256 left, int256 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertLe(int256 left, int256 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Asserting Bytes32 Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two bytes32 values. The function reverts if the two bytes32 values are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bytes32 left, bytes32 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bytes32 left, bytes32 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Line Statement Blocks - Solidity\nDESCRIPTION: The `single_line_statement_blocks` option allows customizing the formatting of statement blocks within the code. Possible values include 'single', 'multi', and 'preserve'. This dictates whether code blocks are reformatted to a single line or not.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/formatter.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nif (true) { return true; }\n```\n\nLANGUAGE: solidity\nCODE:\n```\nif (true) {\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet from String Example in Solidity\nDESCRIPTION: This example shows how to create a Wallet using a string parameter, and demonstrates the properties of the resulting wallet, including its label.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-wallet.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nVm.Wallet memory wallet = vm.createWallet(\"bob's wallet\");\n\nemit log_uint(wallet.privateKey); // uint256(keccak256(bytes(\"bob's wallet\")))\n\nemit log_address(wallet.addr); // vm.addr(wallet.privateKey)\n\nemit log_address(\n    address(\n        uint160(\n            uint256(\n                keccak256(abi.encode(wallet.publicKeyX, wallet.publicKeyY))\n            )\n        )\n    )\n); // wallet.addr\n\nemit log_string(vm.getLabel(wallet.addr)); // \"bob's wallet\"\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally - Shell\nDESCRIPTION: This snippet shows the command to generate and serve documentation locally using the --serve option, along with custom port configuration. It enables live documentation review.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-doc.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge doc --serve --port 4000\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Anvil Command\nDESCRIPTION: This snippet demonstrates how to invoke the Anvil command with the help option to display available commands and parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/anvil.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ anvil --help\n```\n\n----------------------------------------\n\nTITLE: Example Contract Deployment\nDESCRIPTION: Demonstrates deploying a contract with encoded constructor arguments using the deployCode function\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/deployCode.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\naddress deployment = deployCode(\"MyContract.sol\", abi.encode(arg1, arg2));\n```\n\n----------------------------------------\n\nTITLE: Help Output for cast tx-pool Command\nDESCRIPTION: This snippet shows the detailed help output for the 'cast tx-pool' command. It includes usage instructions, available subcommands, options for execution, and display settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx-pool.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast tx-pool [OPTIONS] <COMMAND>\n\nCommands:\n  content       Fetches the content of the transaction pool\n  content-from  Fetches the content of the transaction pool filtered by a\n                specific address\n  inspect       Fetches a textual summary of each transaction in the pool\n  status        Fetches the current status of the transaction pool\n  help          Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Fetching Logs Help Menu with Cast CLI\nDESCRIPTION: This snippet demonstrates how to access the help documentation for the 'cast logs' command in the Cast command-line tool. The '--help' flag provides a detailed description of the command's options and arguments, assisting users in fetching Ethereum logs with various filters and display configurations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/logs.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ cast logs --help\n```\n\n----------------------------------------\n\nTITLE: Assume Cheatcode Signature in Solidity\nDESCRIPTION: The function signature for the `assume` cheatcode which takes a boolean condition as input. When the condition evaluates to false, the fuzzer discards the current inputs and starts a new fuzz run.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/assume.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assume(bool) external;\n```\n\n----------------------------------------\n\nTITLE: Verifying Message Signature with Cast Wallet\nDESCRIPTION: This command verifies the signature of a message against a specified address. It requires the address of the message signer, the message to be verified, and the corresponding signature. The primary function is to ensure the integrity and authenticity of messages within the Cast wallet environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-verify.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`cast wallet verify` [*options*] `--address` *address* *message* *signature*\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract With Constructor Arguments\nDESCRIPTION: Deploy a smart contract by providing constructor arguments directly on the command line for token initialization\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-create.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge create src/Contract.sol:MyToken --constructor-args \"My Token\" \"MT\"\n```\n\n----------------------------------------\n\nTITLE: Defining assumeNoRevert Function in Solidity\nDESCRIPTION: The assumeNoRevert function is an external function used in fuzzing to discard current fuzz inputs and start a new fuzz run if the next call reverts. It has no parameters and returns no value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/assume-no-revert.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assumeNoRevert() external;\n```\n\n----------------------------------------\n\nTITLE: Setting Address Labels in Foundry Tests\nDESCRIPTION: Function signature for labeling addresses in Foundry test traces. Takes an address and a string label as parameters. When an address is labeled, the assigned label will be displayed in test traces instead of the raw address value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/label.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction label(address addr, string calldata label) external;\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Bytes Arrays in Solidity\nDESCRIPTION: Functionality to test for identicalness between two arrays of byte arrays, useful for scenarios requiring equivalence testing in Solidity, with an option for custom error messages.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bytes[] memory left, bytes[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Forge Snapshot\nDESCRIPTION: This command displays the help information for the forge snapshot command, showing available options and their descriptions. It helps the user understand how to properly use the snapshot command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/snapshot.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge snapshot --help\n```\n\n----------------------------------------\n\nTITLE: Encoding Hex data with cast to-rlp\nDESCRIPTION: This example shows how to use `cast to-rlp` to encode a single hex string into RLP format. The input is the hexadecimal string `f0a9`. The output is the RLP encoded representation of the input data.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-rlp.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"cast to-rlp f0a9\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast to-hex Help Command\nDESCRIPTION: Shows how to display the help information for the cast to-hex command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-hex.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-hex --help\n```\n\n----------------------------------------\n\nTITLE: Testing Excess Withdrawal in Solidity\nDESCRIPTION: This snippet tests that a user cannot withdraw more tokens than they have deposited into the vault. It uses the arithmetic error handling to assert expected reversion when the condition fails.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/arithmeticError.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testUserCannotWithdrawExcessOfDeposit() public {\n    vm.prank(user);\n    vm.expectRevert(stdError.arithmeticError);\n    vault.withdraw(userTokens + 100*10**18);\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Bytes32 Array Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two bytes32 arrays. The function reverts if the two bytes32 arrays are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bytes32[] memory left, bytes32[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Parsing User Input Example\nDESCRIPTION: Example showing how to use various prompt types and parse responses into native Solidity types.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prompt.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nuint privateKey = vm.promptSecretUint(\"Private key\");\naddress to = vm.parseAddress(vm.prompt(\"Send to\"));\nuint amount = vm.parseUint(vm.prompt(\"Amount (wei)\"));\nvm.broadcast(privateKey);\npayable(to).transfer(amount);\n```\n\n----------------------------------------\n\nTITLE: Help Output for cast to-unit Command\nDESCRIPTION: This is the detailed help output for the 'cast to-unit' command. It shows the command usage, available arguments, options, and display settings. The command converts a given ETH value to a specified unit (ether, gwei, or wei).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-unit.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-unit [OPTIONS] [VALUE] [UNIT]\n\nArguments:\n  [VALUE]\n          The value to convert\n\n  [UNIT]\n          The unit to convert to (ether, gwei, wei)\n          \n          [default: wei]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Asserting Approximate Equality with Absolute Delta in Solidity\nDESCRIPTION: Functions to assert that two numbers are approximately equal within a given maximum absolute delta. There are variations for both uint256 and int256 data types, with or without a custom error message string. No external dependencies are required, but inputs must be valid numbers. The functions are typically used in smart contract testing to ensure expected numerical tolerance.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqAbs.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) internal;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string memory err) internal;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) internal;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Resetting Gas Metering in Solidity\nDESCRIPTION: A function that resets the gas metering to the gas limit of the current execution frame. After calling this function, gasleft() will be restored to its initial value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/reset-gas-metering.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction resetGasMetering() external;\n```\n\n----------------------------------------\n\nTITLE: Asserting Boolean Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two boolean values. The function reverts if the two booleans are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bool left, bool right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bool left, bool right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Importing Remapped Dependencies\nDESCRIPTION: Example of importing a contract using custom remapping in Solidity\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/dependencies.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nimport {LibString} from \"@solady-utils/LibString.sol\";\n```\n\n----------------------------------------\n\nTITLE: Testing Approximate Equality in Solidity\nDESCRIPTION: An example function that demonstrates the use of assertApproxEqAbs with two numbers, where it expects the numbers to be approximately equal within a delta of 90. When executed, it shows usage in a test function context. If the assertion fails, a revert message with details is provided.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqAbs.md#2025-04-22_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction testRevert() external {\n    uint256 a = 100;\n    uint256 b = 200;\n\n    assertApproxEqAbs(a, b, 90);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Path Navigation Example\nDESCRIPTION: Sample JSON structure demonstrating nested objects and how to navigate them using JSON paths.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/write-json.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"boolean\": true,\n  \"number\": 342,\n  \"obj1\": {\n    \"aNumber\": 123,\n    \"obj2\": {\n      \"aNumber\": 123,\n      \"obj3\": {\n        \"veryDeep\": 13371337\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Storage Error in Solidity\nDESCRIPTION: This snippet defines the function for encoding internal Solidity errors that occur when attempting to access corrupted data in storage. The specific error is generated in scenarios where assembly language manipulations compromise data integrity. The use of this function is vital for debugging and proper error handling within smart contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/encodeStorageError.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstdError.encodeStorageError\n```\n\n----------------------------------------\n\nTITLE: ABI Representation of a Simple Struct Function\nDESCRIPTION: This JSON snippet shows the ABI representation of a function that takes a simple struct as an argument. It details the input components and their types.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/misc/struct-encoding.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"inputs\": [\n\t\t{\n\t\t\t\"components\": [\n\t\t\t\t{\n\t\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\t\"name\": \"addr\",\n\t\t\t\t\t\"type\": \"address\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"internalType\": \"struct Test.MyStruct\",\n\t\t\t\"name\": \"t\",\n\t\t\t\"type\": \"tuple\"\n\t\t}\n\t],\n\t\"name\": \"f\",\n\t\"outputs\": [],\n\t\"stateMutability\": \"pure\",\n\t\"type\": \"function\"\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Raw Calldata with Cast - Shell\nDESCRIPTION: This snippet shows how to decode raw ABI-encoded calldata using the 'cast decode-calldata' command. The example decodes a 'transfer' function call. Required input is the function signature and hexadecimal calldata. Output is a parsed representation of the calldata.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncast decode-calldata \"transfer(address,uint256)\" \\ \n  0xa9059cbb000000000000000000000000e78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0000000000000000000000000000000000000000000000000008a8e4b1a3d8000\n```\n\n----------------------------------------\n\nTITLE: Converting Number Bases using cast-to-hex\nDESCRIPTION: The cast-to-hex command is utilized to convert a number from a specified input base to hexadecimal. It requires a base input option and the value to be converted. Expected input is a valid number and chosen base, while the output is the equivalent hexadecimal representation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-hex.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"cast to-hex [*options*] *value*\"\n```\n\n----------------------------------------\n\nTITLE: Cast Proof Command Usage and Options\nDESCRIPTION: This snippet shows the complete usage guide for the 'cast proof' command, including all available arguments and options. It covers RPC configuration, block selection, threading, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/proof.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast proof [OPTIONS] <ADDRESS> [SLOTS]...\n\nArguments:\n  <ADDRESS>\n          The contract address\n\n  [SLOTS]...\n          The storage slot numbers (hex or decimal)\n\nOptions:\n  -B, --block <BLOCK>\n          The block height to query at.\n          \n          Can also be the tags earliest, finalized, safe, latest, or pending.\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Using parseAddress Function in Solidity\nDESCRIPTION: This example demonstrates how to use the parseAddress function to convert a string representation of an Ethereum address into an address type. It uses a zero address as an example.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-address.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory addressAsString = \"0x0000000000000000000000000000000000000000\";\naddress stringToAddress = vm.parseAddress(addressAsString); // 0x0000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: File Removal Example with Write Permissions\nDESCRIPTION: Example showing how to remove a file with write permissions configured.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/fs.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nfs_permissions = [{ access = \"write\", path = \"./\"}]\n```\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory path = \"file.txt\";\nvm.removeFile(path);\n\nassertFalse(vm.exists(validPath));\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet Private Key Command Usage\nDESCRIPTION: Detailed help output showing all available options and arguments for the cast wallet private-key command, including wallet options for raw keys, keystores, hardware wallets, and remote services.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/private-key.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet private-key [OPTIONS] [MNEMONIC] [MNEMONIC_INDEX_OR_DERIVATION_PATH]\n\nArguments:\n  [MNEMONIC]\n          If provided, the private key will be derived from the specified\n          menomonic phrase\n\n  [MNEMONIC_INDEX_OR_DERIVATION_PATH]\n          If provided, the private key will be derived using the specified\n          mnemonic index (if integer) or derivation path\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nWallet options - raw:\n  -f, --from <ADDRESS>\n          The sender account\n          \n          [env: ETH_FROM=]\n\n  -i, --interactive\n          Open an interactive prompt to enter your private key\n\n      --private-key <RAW_PRIVATE_KEY>\n          Use the provided private key\n\n      --mnemonic <MNEMONIC>\n          Use the mnemonic phrase of mnemonic file at the specified path\n\n      --mnemonic-passphrase <PASSPHRASE>\n          Use a BIP39 passphrase for the mnemonic\n\n      --mnemonic-derivation-path <PATH>\n          The wallet derivation path.\n          \n          Works with both --mnemonic-path and hardware wallets.\n\n      --mnemonic-index <INDEX>\n          Use the private key from the given mnemonic index.\n          \n          Used with --mnemonic-path.\n          \n          [default: 0]\n\nWallet options - keystore:\n  --keystore <PATH>\n          Use the keystore in the given folder or file\n          \n          [env: ETH_KEYSTORE=]\n\n  --account <ACCOUNT_NAME>\n          Use a keystore from the default keystores folder\n          (~/.foundry/keystores) by its filename\n          \n          [env: ETH_KEYSTORE_ACCOUNT=]\n\n  --password <PASSWORD>\n          The keystore password.\n          \n          Used with --keystore.\n\n  --password-file <PASSWORD_FILE>\n          The keystore password file path.\n          \n          Used with --keystore.\n          \n          [env: ETH_PASSWORD=]\n\nWallet options - hardware wallet:\n  -l, --ledger\n          Use a Ledger hardware wallet\n\n  -t, --trezor\n          Use a Trezor hardware wallet\n\nWallet options - remote:\n  --aws\n          Use AWS Key Management Service\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Parsing Bytes32 to Ethereum Address using Cast CLI\nDESCRIPTION: Example demonstrating how to parse the bytes32 encoding of the WETH9 contract address to its checksummed Ethereum address representation using the cast command-line tool.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-parse-bytes32-address.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast parse-bytes32-address 0x000000000000000000000000C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n```\n\n----------------------------------------\n\nTITLE: Getting Latest Ethereum Block Information in Shell\nDESCRIPTION: This shell snippet shows how to retrieve information about the latest Ethereum block using the cast command. No additional options are specified, so it defaults to the latest block. Ensure that you have the cast tool installed and configured correctly.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-block.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast block\n```\n\n----------------------------------------\n\nTITLE: Cloning WETH9 Contract with Forge\nDESCRIPTION: This command clones the WETH9 contract from Ethereum mainnet using the `forge clone` command. It creates a new directory, configures it as a Foundry project, and clones all the source code of the contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/clone-a-verified-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/clone_contract/forge-clone:command}}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of percentDelta Function\nDESCRIPTION: Here are example usages of the `percentDelta` function demonstrating its application with real values. The results will show how the percentage difference is computed for given pairs of integers.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/percentDelta.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 percent150 = stdMath.percentDelta(uint256(125), 50);\nuint256 percent60 = stdMath.percentDelta(uint256(50), 125);\n```\n\n----------------------------------------\n\nTITLE: Defining rememberKey Function in Solidity\nDESCRIPTION: Function signature for rememberKey, which takes a uint256 private key and returns an address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/remember-key.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rememberKey(uint256 privateKey) external returns (address);\n```\n\n----------------------------------------\n\nTITLE: Implementing Snapshot State Test in Solidity with Foundry\nDESCRIPTION: This snippet demonstrates the usage of snapshot state cheatcodes in a Foundry test contract. It shows how to create a snapshot, modify state, and then revert to the snapshot, validating the state restoration.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/state-snapshots.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Storage {\n    uint slot0;\n    uint slot1;\n}\n\ncontract SnapshotStateTest is Test {\n    Storage store;\n    uint256 timestamp;\n\n    function setUp() public {\n        store.slot0 = 10;\n        store.slot1 = 20;\n        vm.deal(address(this), 5 ether);            // balance = 5 ether\n        timestamp = block.timestamp;\n    }\n\n    function testSnapshotState() public {\n        uint256 snapshot = vm.snapshotState();      // saves the state\n\n        // let's change the state\n        store.slot0 = 300;\n        store.slot1 = 400;\n        vm.deal(address(this), 500 ether);\n        vm.warp(12345);                             // block.timestamp = 12345\n\n        assertEq(store.slot0, 300);\n        assertEq(store.slot1, 400);\n        assertEq(address(this).balance, 500 ether);\n        assertEq(block.timestamp, 12345);\n\n        vm.revertToState(snapshot);                 // restores the state\n\n        assertEq(store.slot0, 10, \"snapshot revert for slot 0 unsuccessful\");\n        assertEq(store.slot1, 20, \"snapshot revert for slot 1 unsuccessful\");\n        assertEq(address(this).balance, 5 ether, \"snapshot revert for balance unsuccessful\");\n        assertEq(block.timestamp, timestamp, \"snapshot revert for timestamp unsuccessful\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Gas Snapshot Differences with Forge\nDESCRIPTION: Illustrates the use of the '--check' option with 'forge snapshot' to compare the current gas usage against an existing snapshot file. This example compares with '.gas-snapshot2' and shows a difference in the 'testApprove()' function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/gas-function-snapshots.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ forge snapshot --check .gas-snapshot2\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nRunning 10 tests for src/test/ERC20.t.sol:ERC20Test\n[PASS] testApprove() (gas: 31162)\n[PASS] testBurn() (gas: 59875)\n[PASS] testRevertTransferFromInsufficientAllowance() (gas: 81034)\n[PASS] testRevertTransferFromInsufficientBalance() (gas: 81662)\n[PASS] testRevertTransferInsufficientBalance() (gas: 52882)\n[PASS] testInfiniteApproveTransferFrom() (gas: 90167)\n[PASS] testMetadata() (gas: 14606)\n[PASS] testMint() (gas: 53830)\n[PASS] testTransfer() (gas: 60473)\n[PASS] testTransferFrom() (gas: 84152)\nTest result: ok. 10 passed; 0 failed; finished in 2.47ms\nDiff in \"ERC20Test::testApprove()\": consumed \"(gas: 31162)\" gas, expected \"(gas: 31170)\" gas \n```\n\n----------------------------------------\n\nTITLE: Defining SignedDelegation Struct for EIP-7702\nDESCRIPTION: Struct definition for holding signed EIP-7702 authorization details including signature components, nonce, and implementation address\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign-delegation.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct SignedDelegation {\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n    uint64 nonce;\n    address implementation;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing cast max-uint Command in Bash\nDESCRIPTION: This snippet demonstrates how to execute the 'cast max-uint' command in a Bash shell. It provides the help option to display usage instructions for the command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/max-uint.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast max-uint --help\n```\n\n----------------------------------------\n\nTITLE: Multi-chain RPC Configuration\nDESCRIPTION: TOML configuration for setting up RPC endpoints and Etherscan API keys for multiple chains\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/deploying.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[rpc_endpoints]\nsepolia = \"${SEPOLIA_URL}\"\nbase-sepolia = \"${BASE_SEPOLIA_URL}\"\n\n[etherscan]\nsepolia = { key = \"${SEPOLIA_KEY}\" }\nbase-sepolia = { key = \"${BASE_SEPOLIA_KEY}\" }\n```\n\n----------------------------------------\n\nTITLE: Seeding User Balance with AUSD in Test\nDESCRIPTION: Illustrates setting a user's balance in a test contract using stdStorage with packed slot support. Prerequisite: Address of `Constants.Mainnet.AUSD_ERC20`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-storage.md#2025-04-22_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\n// TestAgoraDollar.t.sol\n\nfunction seedUserWithAusd(address _to, uint248 _amount) internal {\n    stdstore\n        .enable_packed_slots()\n        .target(address(Constants.Mainnet.AUSD_ERC20)) //0x00000000eFE302BEAA2b3e6e1b18d08D69a9012a\n        .sig(\"balanceOf(address)\")\n        .with_key(_to)\n        .checked_write(_amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Signing a message using a keystore\nDESCRIPTION: This example demonstrates how to sign a message using a keystore file with the `cast wallet sign` command.  The `--keystore` option specifies the path to the keystore file, and `--interactive` prompts for the password. The message to be signed is \"hello\".\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-sign.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"cast wallet sign --keystore keystore.json --interactive \\\"hello\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using txGasPrice for Accurate Gas Usage Calculation in Solidity\nDESCRIPTION: An example of how to use txGasPrice to set a specific gas price for accurate gas usage calculation in a test function. It sets the gas price, measures gas before and after an operation, and calculates the total gas used.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/tx-gas-price.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testCalculateGas() public {\n    vm.txGasPrice(2);\n    uint256 gasStart = gasleft();\n    myContract.doStuff();\n    uint256 gasEnd = gasleft();\n    uint256 gasUsed = (gasStart - gasEnd) * tx.gasprice; // tx.gasprice is now 2\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Time in Solidity\nDESCRIPTION: This function allows users to skip forward in time by modifying the block's timestamp. It accepts a parameter specifying the number of seconds to skip. Expected inputs are a uint256 representing the time to skip, and the output is the updated block timestamp as part of a test scenario.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/skip.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction skip(uint256 time) public;\n```\n\n----------------------------------------\n\nTITLE: Asserting Non-Equality of Signed Integers with Error Message in Solidity\nDESCRIPTION: This snippet enhances the signed integer comparison by including an error message parameter. It provides a way to assert that two signed integers are not equal while allowing custom messages to be displayed in case of failure, which improves debugging and error reporting.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEqDecimal.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Int256 Array Environment Variable Example\nDESCRIPTION: Example demonstrating how to read an array of int256 values (min and max) from an environment variable using a delimiter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-int.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"INT_VALUES\";\nstring memory delimiter = \",\";\nint256[2] memory expected = [type(int256).min, type(int256).max];\nint256[] memory output = cheats.envInt(key, delimiter);\nassert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));\n```\n\n----------------------------------------\n\nTITLE: Sorting Transactions in Mempool - Shell\nDESCRIPTION: This command changes the sorting algorithm of transactions in the mempool to FIFO (First In First Out), which can affect how transactions are processed during testing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/anvil/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nanvil --order fifo\n```\n\n----------------------------------------\n\nTITLE: Defining warp Function Signature in Solidity\nDESCRIPTION: The signature of the warp function, which takes a uint256 parameter to set the block.timestamp.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/warp.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction warp(uint256) external;\n```\n\n----------------------------------------\n\nTITLE: Defining failure_persist_dir Configuration\nDESCRIPTION: The `failure_persist_dir` setting indicates a path where invariant failures are recorded and can be replayed. It is of string type with a default value of `./cache/invariant`, controlled by the environment variable `FOUNDRY_INVARIANT_FAILURE_PERSIST_DIR`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `failure_persist_dir`\n\n- Type: string (path)\n- Default: `./cache/invariant`\n- Environment: `FOUNDRY_INVARIANT_FAILURE_PERSIST_DIR`\n\nPath where invariant failures are recorded and replayed.\n```\n\n----------------------------------------\n\nTITLE: Generating Vanity Address with Prefix\nDESCRIPTION: This snippet demonstrates how to generate a new keypair that starts with a specified prefix using the Cast CLI. The command utilizes the '--starts-with' option to specify the hex prefix for the generated address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-vanity.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast wallet vanity --starts-with dead\n```\n\n----------------------------------------\n\nTITLE: Implementing a Function with Amount Range in Solidity\nDESCRIPTION: This snippet shows a function that requires an amount within a specific range. It demonstrates a use case where assumeNoRevert might be helpful in testing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/assume-no-revert.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction doSomething(uint256 amount) public {\n    require(amount > 100 ether && amount < 1_000 ether);\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Cast Find-Block\nDESCRIPTION: Provides detailed usage information for the 'cast find-block' command. Describes available options such as specifying an RPC URL, adjusting verbosity levels, and setting timeout values for the RPC calls.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/find-block.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast find-block [OPTIONS] <TIMESTAMP>\n\nArguments:\n  <TIMESTAMP>\n          The UNIX timestamp to search for, in seconds\n\nOptions:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Converting Address to String Example\nDESCRIPTION: Example showing the conversion of an Ethereum address to its string representation while maintaining case sensitivity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/to-string.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\naddress testAddress =  0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;\nstring memory stringAddress = cheats.toString(testAddress);\nassertEq(\"0x7109709ECfa91a80626fF3989D68f67F5b1DD12D\", stringAddress);\n```\n\n----------------------------------------\n\nTITLE: Cast Int256 Help Command\nDESCRIPTION: Command to display help information for the cast to-int256 utility.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-int256.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-int256 --help\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-linked Libraries in Foundry\nDESCRIPTION: The --libraries option allows setting pre-linked libraries. The parameter must follow a specific format which includes the remapped path, library name, and address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/core-build-options.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--libraries <remapped path to lib>:<library name>:<address>\n```\n\n----------------------------------------\n\nTITLE: Configuring Always Use CREATE2 Factory in foundry.toml\nDESCRIPTION: This TOML configuration ensures that the CREATE2 factory is always used for deployments, which is useful for consistent addresses in tests and scripts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/deterministic-deployments-using-create2.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nalways_use_create_2_factory = true\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast Bind Help Command\nDESCRIPTION: Demonstrates how to access help information for the cast bind command, showing available options and usage instructions\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/bind.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast bind --help\n```\n\n----------------------------------------\n\nTITLE: Add 0x prefix using cast to-hexdata\nDESCRIPTION: This example demonstrates how to use `cast to-hexdata` to add a 0x prefix to a hexadecimal value. The input `deadbeef` is converted to `0xdeadbeef`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-hexdata.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\ncast to-hexdata deadbeef\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Checker Settings\nDESCRIPTION: Example of configuring Solidity's built-in model checker in foundry.toml, specifying contracts to verify, engine type, timeout, and verification targets.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n## foundry.toml\n[profile.default.model_checker]\ncontracts = { '/path/to/project/src/Contract.sol' = [ 'Contract' ] }\nengine = 'chc'\ntimeout = 10000\ntargets = [ 'assert' ]\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Directories from Coverage Report\nDESCRIPTION: Runs the forge coverage command with the --no-match-coverage option to exclude specified directories, such as the script directory, from the coverage report. Helps customize what is included in the results, allowing for more focused analysis.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-coverage.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nforge coverage --no-match-coverage script\n```\n\n----------------------------------------\n\nTITLE: Debugging Specific Test Function\nDESCRIPTION: Example of debugging a specific test function named 'test_Increment'\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/debugger.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ forge test --debug --match-test \"test_Increment\"\n```\n\n----------------------------------------\n\nTITLE: Foundry File System Permissions Configuration\nDESCRIPTION: TOML configuration for setting up file system permissions in foundry.toml. Controls read/write access permissions for different paths.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/fs.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nfs_permissions = []\n```\n\n----------------------------------------\n\nTITLE: changePrank Signature in Solidity\nDESCRIPTION: This snippet shows the signature of the `changePrank` function in Solidity. It takes an address `who` as input and is marked as `internal`, meaning it can only be called from within the contract or derived contracts. The function is used to change the address currently being pranked.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/change-prank.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\n```solidity\nfunction changePrank(address who) internal;\n```\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Forge Tests in Shell\nDESCRIPTION: This example shows how to run specific tests by applying filters. It demonstrates running tests in the 'ComplicatedContractTest' contract with 'testDeposit' in the name.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/tests.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/test_filters/forge-test-match-contract-and-test:all}}\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving a New Keypair in Keystore\nDESCRIPTION: Illustrates the usage of 'cast wallet new' command alongside specifying a directory path to save the generated keypair in a JSON keystore. Options cover password handling and warning against unsafe password usage. Aimed at securing keypairs while utilizing Foundry CLI capabilities.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-new.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncast wallet new keystore\n```\n\n----------------------------------------\n\nTITLE: Cast from-rlp Help Command\nDESCRIPTION: This command displays the help information for the `cast from-rlp` tool, providing users with a summary of its available options and arguments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/from-rlp.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast from-rlp --help\n```\n\n----------------------------------------\n\nTITLE: Setting Block Time for Mining in Anvil - Shell Script\nDESCRIPTION: This command configures Anvil to mine a new block every 10 seconds by using the --block-time flag.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/anvil/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Produces a new block every 10 seconds\nanvil --block-time 10\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slot with String Signature\nDESCRIPTION: Example of using the sig method with a string function signature to find a storage slot for a specific function and key.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/sig.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 slot = stdstore\n    .target(addr)\n    .sig(\"fun(uint256)\")\n    .with_key(1)\n    .find();\n```\n\n----------------------------------------\n\nTITLE: Delegation Signing and Attachment Function Definitions\nDESCRIPTION: Core function signatures for signing and attaching EIP-7702 delegations, including individual and combined operations\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign-delegation.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction signDelegation(address implementation, uint256 privateKey)\n    external\n    returns (SignedDelegation memory signedDelegation);\n\nfunction attachDelegation(SignedDelegation calldata signedDelegation) external;\n\nfunction signAndAttachDelegation(address implementation, uint256 privateKey)\n    external\n    returns (SignedDelegation memory signedDelegation);\n```\n\n----------------------------------------\n\nTITLE: Using cast to Get Block Timestamp - Shell\nDESCRIPTION: These snippets demonstrate how to use the `cast age` command to obtain the timestamp of a blockchain block. It supports block numbers and tags such as 'earliest' or 'latest'. Ensure the appropriate blockchain network is specified in the options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-age.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast age\n```\n\nLANGUAGE: sh\nCODE:\n```\ncast age 1\n```\n\n----------------------------------------\n\nTITLE: Rolling Specified Fork to Transaction in Solidity\nDESCRIPTION: This function is similar to rollFork(bytes32 transaction) but allows specifying a particular fork using its ID. It rolls the specified fork to the block of the given transaction.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/roll-fork.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rollFork(uint256 forkId, bytes32 transaction) external;\n```\n\n----------------------------------------\n\nTITLE: Emitting log_named_array event in Solidity\nDESCRIPTION: This example shows how to emit a `log_named_array` event, including a name and the array data. It is assumed that the array `data` is already defined in storage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-logs.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n// Assuming storage\n// uint256[] data = [10, 20, 30, 40, 50]; \n\nemit log_named_array(\"Data\", data);\n```\n\n----------------------------------------\n\nTITLE: Reading Single Address from Environment Variable\nDESCRIPTION: Function signature for reading a single address value from an environment variable. Takes a string key parameter and returns an address value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-address.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction envAddress(string calldata key) external returns (address value);\n```\n\n----------------------------------------\n\nTITLE: Solidity Struct Definition for Cast Sig Example\nDESCRIPTION: This Solidity code defines a simple contract `Test` with a struct `MyStruct` containing an address and a uint256. It also defines a function `myfunction` that takes `MyStruct` as an argument, demonstrating how structs are handled with cast sig.  Structs are encoded as tuples.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-sig.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n\"contract Test {\n    struct MyStruct {\n        address addr;\n        uint256 amount;\n    }\n    function myfunction(MyStruct memory t) public pure {}\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Block Prevrandao Example\nDESCRIPTION: Example showing how to set block.prevrandao to a specific value (42) using the vm.prevrandao cheatcode and logging the result. Only works with Paris hard fork and later EVM versions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prevrandao.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nvm.prevrandao(bytes32(uint256(42)));\nemit log_uint(block.prevrandao); // 42\n```\n\n----------------------------------------\n\nTITLE: Defining parseBool Function Signature in Solidity\nDESCRIPTION: This code snippet shows the function signature for the `parseBool` function. It takes a string input and returns a boolean value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-bool.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n```\n\n----------------------------------------\n\nTITLE: Defining show_metrics Configuration\nDESCRIPTION: This snippet outlines the `show_metrics` setting, a boolean flag that determines whether to collect and display fuzzed selectors metrics in the test report. It defaults to false and can be updated with the environment variable `FOUNDRY_INVARIANT_SHOW_METRICS`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `show_metrics`\n\n- Type: boolean\n- Default: false\n- Environment: `FOUNDRY_INVARIANT_SHOW_METRICS`\n\nThe flag indicating whether to collect and display fuzzed selectors metrics in test report.\n```\n\n----------------------------------------\n\nTITLE: Testing with assumeNoRevert in Solidity\nDESCRIPTION: This example demonstrates how to use assumeNoRevert in a test function. It allows the test to pass by discarding reverts, or fail if the maximum number of rejects is reached.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/assume-no-revert.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testSomething(uint256 amount) public {\n    vm.assumeNoRevert();\n    target.doSomething(amount);\n    // [PASS]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ENS Reverse Lookup with Cast CLI\nDESCRIPTION: A simple example showing how to use the cast lookup-address command to get the ENS name for an Ethereum address. The command takes an address as input and returns the associated ENS name.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-lookup-address.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast lookup-address $ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Configuring zsh Autocompletion in ~/.zshrc\nDESCRIPTION: Add these lines to the ~/.zshrc file to enable autocompletion in zsh.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/shell-autocompletion.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nautoload -U compinit\ncompinit -i\n```\n\n----------------------------------------\n\nTITLE: Usage and Options for Cast Wallet New Mnemonic Command\nDESCRIPTION: This snippet details the usage and available options for the 'cast wallet new-mnemonic' command. It includes options for specifying the number of words, accounts, entropy, and other display and performance settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/new-mnemonic.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet new-mnemonic [OPTIONS]\n\nOptions:\n  -w, --words <WORDS>\n          Number of words for the mnemonic\n          \n          [default: 12]\n\n  -a, --accounts <ACCOUNTS>\n          Number of accounts to display\n          \n          [default: 1]\n\n  -e, --entropy <ENTROPY>\n          Entropy to use for the mnemonic\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Defining a Character Mapping in MetaRPG Contract\nDESCRIPTION: Tracks player characters in a mapping from address to Character struct. Contains a Character struct with name and level fields.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\n// MetaRPG.sol\n\nstruct Character {\n    string name;\n    uint256 level;\n}\n\nmapping (address => Character) public playerToCharacter;\n```\n\n----------------------------------------\n\nTITLE: Cast Upload-Signature Help Command\nDESCRIPTION: Command to display help information for the cast upload-signature tool\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/upload-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast upload-signature --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Checker in Solidity (TOML)\nDESCRIPTION: This snippet demonstrates how to configure model checker settings in a Solidity project. The recommended settings include specifying which contracts to analyze, the engine to use, and a timeout value. It's crucial to set contracts accurately to avoid long verification times.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default.model_checker]\ncontracts = {'/path/to/project/src/Contract.sol' = ['Contract']}\nengine = 'chc'\ntimeout = 10000\ntargets = ['assert']\n```\n\n----------------------------------------\n\nTITLE: Keccak Command Usage\nDESCRIPTION: This snippet outlines the usage details of the 'cast keccak' command, including its positional arguments and various options available for customizing its behavior. Notable parameters include '[DATA]' for the data to hash and options for verbosity and output format.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/keccak.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast keccak [OPTIONS] [DATA]\"\n\n\"Arguments:\"\n\"  [DATA]\"\n\"          The data to hash\"\n\n\"Options:\"\n\"  -h, --help\"\n\"          Print help (see a summary with '-h')\"\n\n\"  -j, --threads <THREADS>\"\n\"          Number of threads to use. Specifying 0 defaults to the number of\"\n\"          logical cores\"\n\"          \\\\n\"          [aliases: jobs]\"\n\n\"Display options:\"\n\"      --color <COLOR>\"\n\"          The color of the log messages\"\n\n\"          Possible values:\"\n\"          - auto:   Intelligently guess whether to use color output (default)\"\n\"          - always: Force color output\"\n\"          - never:  Force disable color output\"\n\n\"      --json\"\n\"          Format log messages as JSON\"\n\n\"  -q, --quiet\"\n\"          Do not print log messages\"\n\n\"  -v, --verbosity...\"\n\"          Verbosity level of the log messages.\"\n\"          \\\\n\"          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\"\n\"          \\\\n\"          Depending on the context the verbosity levels have different meanings.\"\n\"          \\\\n\"          For example, the verbosity levels of the EVM are:\"\n\"          - 2 (-vv): Print logs for all tests.\"\n\"          - 3 (-vvv): Print execution traces for failing tests.\"\n\"          - 4 (-vvvv): Print execution traces for all tests, and setup traces\"\n\"          for failing tests.\"\n\"          - 5 (-vvvvv): Print execution and setup traces for all tests,\"\n\"          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Cast Run Command Usage and Options\nDESCRIPTION: Comprehensive documentation of the cast run command syntax, including all available options and arguments for transaction execution, debugging, tracing, and environment configuration.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/run.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast run [OPTIONS] <TX_HASH>\n\nArguments:\n  <TX_HASH>\n          The transaction hash\n\nOptions:\n  -d, --debug\n          Opens the transaction in the debugger\n\n      --decode-internal\n          Whether to identify internal functions in traces\n\n  -t, --trace-printer\n          Print out opcode traces\n\n      --quick\n          Executes the transaction only with the state from the previous block.\n          \n          May result in different results than the live execution!\n\n  -l, --label <LABEL>\n          Label addresses in the trace.\n          \n          Example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045:vitalik.eth\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n      --evm-version <EVM_VERSION>\n          The EVM version to use.\n          \n          Overrides the version specified in the config.\n\n      --compute-units-per-second <CUPS>\n          Sets the number of assumed available compute units per second for this\n          provider\n          \n          default value: 330\n          \n          See also,\n          <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>\n\n      --no-rate-limit\n          Disables rate limiting for this node's provider.\n          \n          default value: false\n          \n          See also,\n          <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>\n          \n          [aliases: no-rpc-rate-limit]\n\n      --odyssey\n          Enables Odyssey features\n\n      --with-local-artifacts\n          Use current project artifacts for trace decoding\n          \n          [aliases: la]\n\n      --disable-block-gas-limit\n          Disable block gas limit check\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Executing cast block-number Command in Shell\nDESCRIPTION: The snippet demonstrates the use of the 'cast block-number' command in a shell environment to obtain the latest block number. No additional dependencies are required, but the 'cast' utility should be installed. This command does not take arguments, and it outputs the latest block number.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-block-number.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast block-number\n```\n\n----------------------------------------\n\nTITLE: Resolving Remapping Conflicts\nDESCRIPTION: Example of resolving dependency conflicts using remapping contexts in remappings.txt\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/dependencies.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nlib/lib_1/:@openzeppelin/=lib/lib_1/node_modules/@openzeppelin/\nlib/lib_2/:@openzeppelin/=lib/lib_2/node_modules/@openzeppelin/\n```\n\n----------------------------------------\n\nTITLE: Sample Counter Contract with Storage Layout\nDESCRIPTION: Example contract demonstrating a basic storage layout with an array of owners and getter/setter functions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/set-arbitrary-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Counter {\n    address[] public owners;\n\n    function getOwner(uint256 pos) public view returns (address) {\n        return owners[pos];\n    }\n\n    function setOwner(uint256 pos, address owner) public {\n        owners[pos] = owner;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining skip function in Solidity for Foundry tests\nDESCRIPTION: Function signature for the `skip` method in Foundry's testing framework. It takes a boolean parameter to determine whether a test should be skipped.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/skip.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction skip(bool skip) external;\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeTestSetup in Solidity Test\nDESCRIPTION: Shows how to implement the beforeTestSetup function to configure a set of transactions to be executed before a specific test.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/writing-tests.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ContractTest is Test {\n    uint256 a;\n    uint256 b;\n\n    function beforeTestSetup(\n        bytes4 testSelector\n    ) public pure returns (bytes[] memory beforeTestCalldata) {\n        if (testSelector == this.testC.selector) {\n            beforeTestCalldata = new bytes[](2);\n            beforeTestCalldata[0] = abi.encodePacked(this.testA.selector);\n            beforeTestCalldata[1] = abi.encodeWithSignature(\"setB(uint256)\", 1);\n        }\n    }\n\n    function testA() public {\n        require(a == 0);\n        a += 1;\n    }\n\n    function setB(uint256 value) public {\n        b = value;\n    }\n\n    function testC() public {\n        assertEq(a, 1);\n        assertEq(b, 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signature Fragment\nDESCRIPTION: This snippet illustrates how to define a function signature fragment using type parameters, demonstrating a basic structure for signature definition in Ethereum smart contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/sig-description.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsomeFunction(uint256,bytes32)\n```\n\n----------------------------------------\n\nTITLE: Defining Packed Slots Storage Function in Solidity\nDESCRIPTION: Internal function that enables manipulation of packed storage slots, returning a modified StdStorage instance for further chained operations. Useful for writing to compact storage structures in a more flexible manner.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/enable_packed_slots.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage);\n```\n\n----------------------------------------\n\nTITLE: Reading bytes32 Array from Environment Variable in Solidity\nDESCRIPTION: This snippet shows how to read an array of bytes32 values from an environment variable using the vm.envBytes32 function with a delimiter. It sets up the environment variable with multiple values, defines the expected array, and compares the output with the expected values using keccak256 hashing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-bytes32.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"BYTES32_VALUES\";\nstring memory delimiter = \",\";\nbytes32[2] memory expected = [\n    bytes32(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D000000000000000000000000),\n    bytes32(0x0000000000000000000000000000000000000000000000000000000000000000)\n];\nbytes32[] memory output = vm.envBytes32(key, delimiter);\nassert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet from Uint256 and String in Solidity\nDESCRIPTION: This function signature shows how to create a Wallet using both uint256 and string parameters in Solidity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-wallet.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createWallet(uint256, string calldata) external returns (Wallet memory);\n```\n\n----------------------------------------\n\nTITLE: Generating an interface from Etherscan with output file\nDESCRIPTION: Example command showing how to generate a Solidity interface from a contract address on Etherscan and save it to a file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-interface.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast interface -o IWETH.sol 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n```\n\n----------------------------------------\n\nTITLE: Using getBlockNumber in Solidity Tests\nDESCRIPTION: Demonstrates how to use vm.getBlockNumber() in Foundry tests, comparing it with block.number and showing its behavior after vm.roll().\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-block-number.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 height = vm.getBlockNumber();\nassertEq(height, uint256(block.number));\nvm.roll(10);\nassertEq(vm.getBlockNumber(), 10);\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with ETH Value\nDESCRIPTION: Deploys a contract by filename with an attached ETH value, useful for contracts requiring initial funding during construction\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/deployCode.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployCode(string memory what, uint256 val) public returns (address);\n```\n\n----------------------------------------\n\nTITLE: Defining envBool Function Signatures in Solidity\nDESCRIPTION: Function signatures for envBool that can read environment variables as boolean values. The first signature returns a single boolean, while the second returns an array of booleans using a specified delimiter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-bool.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction envBool(string calldata key) external returns (bool value);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction envBool(string calldata key, string calldata delimiter) external returns (bool[] memory values);\n```\n\n----------------------------------------\n\nTITLE: Sample Slither Analysis Output\nDESCRIPTION: Example output from Slither showing detected issues in a Counter contract\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/static-analyzers.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPragma version^0.8.13 (Counter.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7\nsolc-0.8.13 is not recommended for deployment\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity\n\nsetNumber(uint256) should be declared external:\n        - Counter.setNumber(uint256) (Counter.sol#7-9)\nincrement() should be declared external:\n        - Counter.increment() (Counter.sol#11-13)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external\nCounter.sol analyzed (1 contracts with 78 detectors), 4 result(s) found\n```\n\n----------------------------------------\n\nTITLE: Setting Block Difficulty Example in Solidity\nDESCRIPTION: Example showing how to use the difficulty cheatcode to set block.difficulty to a specific value and log it\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/difficulty.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nvm.difficulty(25);\nemit log_uint(block.difficulty); // 25\n```\n\n----------------------------------------\n\nTITLE: Using Cast to Concatenate Hex Strings - Bash\nDESCRIPTION: This Bash command snippet demonstrates how to use the 'cast concat-hex' command to concatenate hex strings. The command allows specifying the number of threads, log message verbosity, and log formatting options such as colors or JSON formatting. It supports multiple verbosity levels to adjust the detail of log output according to user needs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/concat-hex.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast concat-hex --help\n```\n\n----------------------------------------\n\nTITLE: Defining and Handling Memory Overflow Errors in Solidity\nDESCRIPTION: This Solidity snippet defines an internal error called 'memOverflowError', which occurs when attempting to allocate a dynamic memory array exceeding 2^64-1 items. It is essential for developers to handle this error to prevent runtime failures associated with excessive memory allocation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/memOverflowError.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nstdError.memOverflowError\n```\n\n----------------------------------------\n\nTITLE: Get WETH Contract Bytecode Size with Cast\nDESCRIPTION: This command retrieves the runtime bytecode size of the WETH contract deployed at address `0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2`. It utilizes the `cast codesize` command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-codesize.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"cast codesize 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n```\n\n----------------------------------------\n\nTITLE: Generating Zsh Completion Script\nDESCRIPTION: This command generates a Zsh completion script for Forge. The output is redirected to a file in the oh-my-zsh completions directory, which enables autocompletion for Forge commands in the Zsh shell.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-completions.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge completions zsh > $HOME/.oh-my-zsh/completions/_forge\n```\n\n----------------------------------------\n\nTITLE: Help Output for Cast Wallet Decrypt-Keystore Command\nDESCRIPTION: This snippet shows the detailed help output for the 'cast wallet decrypt-keystore' command. It includes information on required arguments, optional parameters, and various display options for customizing the command's behavior and output.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/decrypt-keystore.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet decrypt-keystore [OPTIONS] <ACCOUNT_NAME>\n\nArguments:\n  <ACCOUNT_NAME>\n          The name for the account in the keystore\n\nOptions:\n  -k, --keystore-dir <KEYSTORE_DIR>\n          If not provided, keystore will try to be located at the default\n          keystores directory (~/.foundry/keystores)\n\n      --unsafe-password <PASSWORD>\n          Password for the JSON keystore in cleartext This is unsafe, we\n          recommend using the default hidden password prompt\n          \n          [env: CAST_UNSAFE_PASSWORD=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Signing EIP-7702 Authorization Using Private Key - Shell\nDESCRIPTION: This command signs an EIP-7702 authorization for the specified address using a raw private key. It requires the address to be signed and the private key environment variable to complete the signing process.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-sign-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast wallet sign-auth 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 --private-key $PRIV_KEY\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Forge Clone\nDESCRIPTION: This snippet details the usage format for the 'forge clone' command, specifying required arguments and optional parameters like API keys and logging formats.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/clone.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge clone [OPTIONS] <ADDRESS> [PATH]\\n\\nArguments:\\n  <ADDRESS>\\n          The contract address to clone\\n\\n  [PATH]\\n          The root directory of the cloned project\\n          \\n          [default: .]\\n\\nOptions:\\n      --no-remappings-txt\\n          Do not generate the remappings.txt file. Instead, keep the remappings\\n          in the configuration\\n\\n      --keep-directory-structure\\n          Keep the original directory structure collected from Etherscan.\\n          \\n          If this flag is set, the directory structure of the cloned project\\n          will be kept as is. By default, the directory structure is re-organized\\n          to increase the readability, but may risk some compilation failures.\\n\\n  -e, --etherscan-api-key <KEY>\\n          The Etherscan (or equivalent) API key\\n          \\n          [env: ETHERSCAN_API_KEY=]\\n\\n  -c, --chain <CHAIN>\\n          The chain name or EIP-155 chain ID\\n          \\n          [env: CHAIN=]\\n\\n      --shallow\\n          Perform shallow clones instead of deep ones.\\n          \\n          Improves performance and reduces disk usage, but prevents switching\\n          branches or tags.\\n\\n      --no-git\\n          Install without adding the dependency as a submodule\\n\\n      --commit\\n          Create a commit after installing the dependencies\\n\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Decode Error Command - Bash\nDESCRIPTION: This snippet shows the command to display help information for the 'cast decode-error' functionality. It provides quick access to usage details and command options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-error.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast decode-error --help\n```\n\n----------------------------------------\n\nTITLE: Initializing State Difference Recording in Solidity\nDESCRIPTION: The startStateDiffRecording function begins recording all state changes that occur during contract execution. It captures changes from CREATE, CALL, and SELFDESTRUCT opcodes, along with the context of the calls. This function is part of Foundry's testing framework and is used in conjunction with stopAndReturnStateDiff to analyze contract behavior.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/start-state-diff-recording.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startStateDiffRecording()\n```\n\n----------------------------------------\n\nTITLE: Displaying .clone.meta File Contents\nDESCRIPTION: This command displays the contents of the `.clone.meta` file, which is a JSON file containing metadata about the cloned contract, such as its address and constructor arguments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/clone-a-verified-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/clone_contract/clone-meta:output}}\n```\n\n----------------------------------------\n\nTITLE: Migrated TestFail to ExpectRevert\nDESCRIPTION: Updated version of the testFail function using vm.expectRevert instead\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/v1.0-migration.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction test_RevertWhen_CallerIsNotOwner() public {\n    vm.expectRevert(Unauthorized.selector);\n    vm.prank(address(0));\n    upOnly.increment();\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Storage Slot in Solidity\nDESCRIPTION: This Solidity function ‘find’ is intended to locate an arbitrary storage slot within a contract. It requires a StdStorage instance and works by utilizing four parameters: ‘target’, ‘sig’, ‘with_key’, and ‘depth’, each of which represents a component involved in the determination of the storage location. The function operates internally and returns a uint256 representing the storage slot. It will revert with an error message if the process is not successful.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/find.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction find(StdStorage storage self) internal returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Function Signatures for envString in Solidity\nDESCRIPTION: Function signatures for reading single string and array of strings from environment variables.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-string.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction envString(string calldata key) external returns (string value);\n\nfunction envString(string calldata key, string calldata delimiter) external returns (string[] memory values);\n```\n\n----------------------------------------\n\nTITLE: Using getNonce with an Address Parameter in Solidity\nDESCRIPTION: Example of retrieving the nonce of an account using the address parameter version of getNonce. This gets the transaction count of address(100) and logs it to the console.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-nonce.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 nonce = vm.getNonce(address(100));\nemit log_uint(nonce); // 0\n```\n\n----------------------------------------\n\nTITLE: Setting Chain ID\nDESCRIPTION: Defines the chain ID for differentiating between multiple blockchain networks. This is critical for ensuring that transactions are processed in the correct chain context.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/executor-options.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`--chain-id` *chain_id*\n```\n\n----------------------------------------\n\nTITLE: Prevrandao Function Signature in Solidity\nDESCRIPTION: Function signature for the prevrandao cheatcode that allows setting the block.prevrandao value. Takes a bytes32 parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prevrandao.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction prevrandao(bytes32) external;\n```\n\n----------------------------------------\n\nTITLE: Displaying Chisel Eval Help Command\nDESCRIPTION: Shows how to access the help documentation for the chisel eval command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/chisel/eval.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ chisel eval --help\n```\n\n----------------------------------------\n\nTITLE: Single Int256 Environment Variable Example\nDESCRIPTION: Example showing how to read a minimum int256 value from an environment variable named INT_VALUE.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-int.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"INT_VALUE\";\nint256 expected = type(int256).min;\nint256 output = cheats.envInt(key);\nassert(output == expected);\n```\n\n----------------------------------------\n\nTITLE: Rolling Fork to Specific Transaction in Solidity\nDESCRIPTION: This function rolls the active fork to the block where a specific transaction was mined. It then replays all previously executed transactions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/roll-fork.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rollFork(bytes32 transaction) external;\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Forge Debug Command\nDESCRIPTION: This snippet outlines the usage format for the `forge debug` command, explaining the arguments and options that can be passed. It includes expected inputs such as contract paths and additional arguments, as well as options like specifying a target contract or debugging mode.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/debug.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge debug [OPTIONS] <PATH> [ARGS]...\n\nArguments:\n  <PATH>\n          The contract you want to run. Either the file path or contract name.\n          \n          If multiple contracts exist in the same file you must specify the\n          target contract with --target-contract.\n\n  [ARGS]...\n          Arguments to pass to the script function\n\nOptions:\n      --target-contract <CONTRACT_NAME>\n          The name of the contract you want to run\n          \n          [aliases: tc]\n\n  -s, --sig <SIGNATURE>\n          The signature of the function you want to call in the contract, or raw\n          calldata\n          \n          [default: run()]\n\n      --debug\n          Open the script in the debugger\n\n      --dump <PATH>\n          File path to dump execution details as JSON\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Specific Fork Block - Bash\nDESCRIPTION: This command allows executing tests in a forked environment with a specific block number, utilizing the Forge framework.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fork-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge test --fork-url <your_rpc_url> --fork-block-number 1\n```\n\n----------------------------------------\n\nTITLE: Verifying Deployed Contracts via Script\nDESCRIPTION: This command verifies contracts that have just been deployed using a script. It specifies the RPC URL and includes the verification and resume flags.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-script.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nforge script script/NFT.s.sol --rpc-url $RPC_URL --verify --resume\n```\n\n----------------------------------------\n\nTITLE: Converting Base Numbers to Decimal using cast in Shell\nDESCRIPTION: This shell command converts a given number from a specified base to a decimal. Dependencies include the availability of the cast command in the user's environment. The key parameter is the input base specified with '--base-in' followed by the base number. The command takes a number in the given base and returns its decimal equivalent. The example demonstrates converting a hexadecimal number 'ff' to its decimal form.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-dec.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast to-dec ff\n```\n\n----------------------------------------\n\nTITLE: Reading Bytes Array from Environment Variable in Solidity\nDESCRIPTION: This snippet shows how to read a bytes array from an environment variable using the `envBytes` function with a delimiter. It assumes the environment variable 'BYTES_VALUES' contains multiple hexadecimal strings separated by commas.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-bytes.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nbytes memory key = \"BYTES_VALUES\";\nbytes memory delimiter = \",\";\nbytes[] memory expected = new bytes[](2);\nexpected[0] = hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\";\nexpected[1] = hex\"00\";\nbytes[] memory output = cheats.envBytes(key, delimiter);\nfor (uint i = 0; i < expected.length; ++i) {\n    assert(keccak256(abi.encodePacked((output[i]))) == keccak256(abi.encodePacked((expected[i]))));\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Contract Address in Rust\nDESCRIPTION: This snippet defines the `cast compute-address` command which calculates the Ethereum contract address given a nonce and a deployer address. It includes options to set the nonce or default to the latest nonce via RPC. The code demonstrates the command's structure and uses options for addressing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-compute-address.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"cast compute-address [*options*] *address*\"\n```\n\n----------------------------------------\n\nTITLE: Forge Clone Command Output\nDESCRIPTION: This snippet shows the output of the `forge clone` command, displaying the cloning process and the files created in the new WETH9 directory.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/clone-a-verified-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/clone_contract/forge-clone:output}}\n```\n\n----------------------------------------\n\nTITLE: Getting Help for cast 4byte Command in Bash\nDESCRIPTION: This code snippet demonstrates how to display help information for the cast 4byte command. The command output outlines the various options and arguments available for retrieving function signatures based on the provided selector.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/4byte.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast 4byte --help\n```\n\n----------------------------------------\n\nTITLE: Using keyExistsToml Function in Solidity\nDESCRIPTION: Example usage of the `keyExistsToml` function. It demonstrates reading a TOML file, checking for a key's existence, and asserting the result.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/key-exists-toml.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory path = \"./path/to/tomlfile.toml\";\nstring memory toml = vm.readFile(path);\nbool exists = vm.keyExistsToml(toml, \".key\");\nassertTrue(exists);\n```\n\n----------------------------------------\n\nTITLE: Defining stopBroadcast Function Signature in Solidity\nDESCRIPTION: Function signature for stopping transaction broadcast collection in Foundry tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/stop-broadcast.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction stopBroadcast() external;\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Bytes32 Arrays in Solidity\nDESCRIPTION: This function asserts that two arrays of bytes32 values are equivalent, and can include a descriptive error message to assist with debugging during development or testing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bytes32[] memory left, bytes32[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Cast RPC Command Usage and Options in Plain Text\nDESCRIPTION: This snippet provides a detailed explanation of the 'cast rpc' command, including its usage, arguments, options, and display settings. It covers various parameters such as RPC method, URL, JWT secret, timeout, and custom headers.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast rpc [OPTIONS] <METHOD> [PARAMS]...\n\nArguments:\n  <METHOD>\n          RPC method name\n\n  [PARAMS]...\n          RPC parameters\n          \n          Interpreted as JSON:\n          \n          cast rpc eth_getBlockByNumber 0x123 false => {\"method\":\n          \"eth_getBlockByNumber\", \"params\": [\"0x123\", false] ... }\n\nOptions:\n  -w, --raw\n          Send raw JSON parameters\n          \n          The first param will be interpreted as a raw JSON array of params. If\n          no params are given, stdin will be used. For example:\n          \n          cast rpc eth_getBlockByNumber '[\"0x123\", false]' --raw => {\"method\":\n          \"eth_getBlockByNumber\", \"params\": [\"0x123\", false] ... }\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Example Counter Contract for copyStorage\nDESCRIPTION: A simple contract that stores a count value with a setter function, used to demonstrate the copyStorage cheatcode.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/copy-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Counter {\n    uint256 public count;\n\n    function setCount(uint256 x) public {\n        count = x;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Forge EIP-712 Command\nDESCRIPTION: This command displays help information for the Forge EIP-712 command-line interface, detailing its usage and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/eip712.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge eip712 --help\"\n```\n\n----------------------------------------\n\nTITLE: Running Cast Wallet Verify Help Command in Bash\nDESCRIPTION: This command displays help information for the 'cast wallet verify' command. It provides users with an overview of available options and usage instructions for verifying message signatures with Cast Wallet.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/verify.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet verify --help\n```\n\n----------------------------------------\n\nTITLE: Forge Verify-Bytecode Command Reference\nDESCRIPTION: Comprehensive reference for the forge verify-bytecode command, including all available arguments, options, and flags. Details contract verification options, RPC configuration, verification providers, and output formatting settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/verify-bytecode.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge verify-bytecode [OPTIONS] <ADDRESS> <CONTRACT>\n\nArguments:\n  <ADDRESS>\n          The address of the contract to verify\n\n  <CONTRACT>\n          The contract identifier in the form `<path>:<contractname>`\n\nOptions:\n      --block <BLOCK>\n          The block at which the bytecode should be verified\n\n      --constructor-args <ARGS>...\n          The constructor args to generate the creation code\n\n      --encoded-constructor-args <HEX>\n          The ABI-encoded constructor arguments\n\n      --constructor-args-path <PATH>\n          The path to a file containing the constructor arguments\n\n  -r, --rpc-url <RPC_URL>\n          The rpc url to use for verification\n          \n          [env: ETH_RPC_URL=]\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n      --ignore <BYTECODE_TYPE>\n          Ignore verification for creation or runtime bytecode\n          \n          [possible values: creation, runtime]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nVerifier options:\n  --verifier <VERIFIER>\n          The contract verification provider to use\n          \n          [default: sourcify]\n\n          Possible values:\n          - etherscan\n          - sourcify\n          - blockscout\n          - oklink\n          - custom:     Custom verification provider, requires compatibility\n            with the Etherscan API\n\n  --verifier-api-key <VERIFIER_API_KEY>\n          The verifier API KEY, if using a custom provider\n          \n          [env: VERIFIER_API_KEY=]\n\n  --verifier-url <VERIFIER_URL>\n          The verifier URL, if using a custom provider\n          \n          [env: VERIFIER_URL=]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Using envOr for Single Value Environment Variables in Solidity\nDESCRIPTION: These examples demonstrate how to use the envOr function to read single value environment variables with default values. It shows usage for boolean and address types.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-or.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nbool fork = vm.envOr(\"FORK\", false);\n```\n\nLANGUAGE: solidity\nCODE:\n```\naddress owner;\n\nfunction setUp() {\n  owner = vm.envOr(\"OWNER\", address(this));\n}\n```\n\n----------------------------------------\n\nTITLE: Anvil Launch Command for EIP-7702 Testing\nDESCRIPTION: Command to start Anvil with Prague hardfork support for EIP-7702 testing\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign-delegation.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nanvil --hardfork prague\n```\n\n----------------------------------------\n\nTITLE: CallerMode Enum Definition in Solidity\nDESCRIPTION: Defines the enum CallerMode that represents different states of caller modifications in Foundry tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/read-callers.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nenum CallerMode {\n    None,\n    Broadcast,\n    RecurrentBroadcast,\n    Prank,\n    RecurrentPrank\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transact Function Signatures in Solidity\nDESCRIPTION: Function signatures for executing transactions from active or specific forks. Provides two overloads - one that uses the active fork and another that specifies a fork ID.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/transact.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// Fetches the given transaction from the active fork and executes it on the current state\nfunction transact(bytes32 txHash) external;\n// Fetches the given transaction from the given fork and executes it on the current state\nfunction transact(uint256 forkId, bytes32 txHash) external;\n```\n\n----------------------------------------\n\nTITLE: Convert Ether to Gwei using cast to-unit\nDESCRIPTION: This example demonstrates converting 1 ether to gwei using the `cast to-unit` command. It shows how to specify the input value with the source unit attached, along with the target unit.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-unit.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncast to-unit 1ether gwei\n```\n\n----------------------------------------\n\nTITLE: Setting Block Coinbase Address\nDESCRIPTION: Defines the coinbase address for the block where rewards are sent. This is an important parameter for miners as it determines where the mined block rewards will be credited.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/executor-options.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`--block-coinbase` *address*\n```\n\n----------------------------------------\n\nTITLE: Configuring Mythril Analysis Settings\nDESCRIPTION: Mythril configuration file with remappings and optimizer settings\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/static-analyzers.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remappings\": [\n    \"ds-test/=lib/ds-test/src/\",\n    \"forge-std/=lib/forge-std/src/\"\n  ],\n  \"optimizer\": {\n    \"enabled\": true,\n    \"runs\": 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Fig Spec Command Usage in Bash\nDESCRIPTION: A bash command to display help for generating Fig autocompletion spec with Anvil. It requires Anvil installed and configured in the shell environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/anvil/generate-fig-spec.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ anvil generate-fig-spec --help\n```\n\n----------------------------------------\n\nTITLE: Decoding RLP-encoded data using cast from-rlp command\nDESCRIPTION: Examples showing how to decode RLP-encoded data using the cast from-rlp command. This command accepts hexadecimal input data with an optional 0x prefix, and returns the decoded result.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-from-rlp.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast from-rlp 0xc481f181f2\n\ncast from-rlp c481f181f2\n```\n\n----------------------------------------\n\nTITLE: Deriving Private Key with Custom Path in Solidity\nDESCRIPTION: This function derives a private key from a given mnemonic, custom derivation path, and index. It allows specifying a custom derivation path.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/derive-key.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deriveKey(\n  string calldata mnemonic,\n  string calldata path,\n  uint32 index\n) external returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Running index-erc7201 with cast Command in Bash\nDESCRIPTION: Provides help information for the cast index-erc7201 command in Bash. It is used to compute storage slots using the ERC-7201 namespace, with options for specifying formula IDs, threads, color output, JSON formatting, and adjusting verbosity levels for log messages.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/index-erc7201.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast index-erc7201 --help\n```\n\n----------------------------------------\n\nTITLE: Building Foundry Project\nDESCRIPTION: Builds the Foundry project using the forge build command. This compiles the contracts and generates necessary artifacts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/creating-a-new-project.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/hello_foundry/forge-build:all}}\n```\n\n----------------------------------------\n\nTITLE: Generating Event Signature with cast sig-event\nDESCRIPTION: This example demonstrates how to use the `cast sig-event` command to generate the hash for the log `Transfer(address indexed from, address indexed to, uint256 amount)`. The command takes the event string as input and outputs the corresponding signature hash.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-sig-event.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"cast sig-event \\\"Transfer(address indexed from, address indexed to, uint256 amount)\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Fee Cheatcode Function in Solidity\nDESCRIPTION: Function signature for the `fee` cheatcode in Foundry. It takes a uint256 parameter to set the block's base fee.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/fee.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fee(uint256) external;\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Cast Decode-EOF Command\nDESCRIPTION: Shows the usage instructions of the 'cast decode-eof' command. The optional arguments include specifying the number of threads, log verbosity, and output color options. Log verbosity can be adjusted with multiple '-v' flags.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-eof.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast decode-eof [OPTIONS] [EOF]\n\nArguments:\n  [EOF]\n          \n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring IR Pipeline in TOML Configuration\nDESCRIPTION: Example of a foundry.toml configuration file showing how to enable the Solidity IR compilation pipeline.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-build.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default]\nsolc-version = \"0.8.17\"\nvia_ir = true\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for cast string-decode Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast string-decode' tool, which is used to decode ABI-encoded strings in Ethereum development.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/string-decode.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast string-decode --help\n```\n\n----------------------------------------\n\nTITLE: Adding OpenZeppelin Remapping to remappings.txt\nDESCRIPTION: This Solidity snippet shows the content to be added to the remappings.txt file for remapping OpenZeppelin contracts. It maps the @openzeppelin prefix to the local directory.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vscode.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n@openzeppelin/=lib/openzeppelin-contracts/\n```\n\n----------------------------------------\n\nTITLE: Cast To-Dec Command Usage and Options\nDESCRIPTION: This snippet provides detailed information about the usage, arguments, and options for the 'cast to-dec' command. It includes input options, display options, and verbosity settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-dec.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-dec [OPTIONS] [VALUE]\n\nArguments:\n  [VALUE]\n          The value to convert\n\nOptions:\n  -i, --base-in <BASE_IN>\n          The input base\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Foundry Versions\nDESCRIPTION: Command to list all installed versions of Foundry and their components.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/announcements.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nfoundryup --list\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet Import Command Usage and Options\nDESCRIPTION: This snippet shows the full usage information, arguments, and options for the 'cast wallet import' command. It includes details on keystore directory, password handling, threading, wallet options for private keys and mnemonics, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/import.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet import [OPTIONS] <ACCOUNT_NAME>\n\nArguments:\n  <ACCOUNT_NAME>\n          The name for the account in the keystore\n\nOptions:\n  -k, --keystore-dir <KEYSTORE_DIR>\n          If provided, keystore will be saved here instead of the default\n          keystores directory (~/.foundry/keystores)\n\n      --unsafe-password <PASSWORD>\n          Password for the JSON keystore in cleartext This is unsafe, we\n          recommend using the default hidden password prompt\n          \n          [env: CAST_UNSAFE_PASSWORD=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nWallet options - raw:\n  -i, --interactive\n          Open an interactive prompt to enter your private key\n\n      --private-key <RAW_PRIVATE_KEY>\n          Use the provided private key\n\n      --mnemonic <MNEMONIC>\n          Use the mnemonic phrase of mnemonic file at the specified path\n\n      --mnemonic-passphrase <PASSPHRASE>\n          Use a BIP39 passphrase for the mnemonic\n\n      --mnemonic-derivation-path <PATH>\n          The wallet derivation path.\n          \n          Works with both --mnemonic-path and hardware wallets.\n\n      --mnemonic-index <INDEX>\n          Use the private key from the given mnemonic index.\n          \n          Used with --mnemonic-path.\n          \n          [default: 0]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Defining Signature Selector with String\nDESCRIPTION: Overloaded function that sets a function selector for storage manipulation using a string representation of the function signature. Provides flexibility in specifying function signatures.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/sig.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage);\n```\n\n----------------------------------------\n\nTITLE: Asserting String Array Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two string arrays. The function reverts if the two string arrays are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(string[] memory left, string[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(string[] memory left, string[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Generating Help Output with Forge Init in Bash\nDESCRIPTION: The Bash command `$ forge init --help` provides detailed information about the available options and arguments for initializing a new Forge project. This includes details on templates, branches, installation flags, verbosity, logging, and more.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/init.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge init --help\n```\n\n----------------------------------------\n\nTITLE: Forge verify-check command help output\nDESCRIPTION: Complete help text for the 'forge verify-check' command, showing all available options including verification ID, retries, delay, API keys, chain selection, verifier options, and display settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/verify-check.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge verify-check [OPTIONS] <ID>\n\nArguments:\n  <ID>\n          The verification ID.\n          \n          For Etherscan - Submission GUID.\n          \n          For Sourcify - Contract Address.\n\nOptions:\n      --retries <RETRIES>\n          Number of attempts for retrying verification\n          \n          [default: 5]\n\n      --delay <DELAY>\n          Optional delay to apply in between verification attempts, in seconds\n          \n          [default: 5]\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nVerifier options:\n  --verifier <VERIFIER>\n          The contract verification provider to use\n          \n          [default: sourcify]\n\n          Possible values:\n          - etherscan\n          - sourcify\n          - blockscout\n          - oklink\n          - custom:     Custom verification provider, requires compatibility\n            with the Etherscan API\n\n  --verifier-api-key <VERIFIER_API_KEY>\n          The verifier API KEY, if using a custom provider\n          \n          [env: VERIFIER_API_KEY=]\n\n  --verifier-url <VERIFIER_URL>\n          The verifier URL, if using a custom provider\n          \n          [env: VERIFIER_URL=]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Conversion Commands in Foundry CLI\nDESCRIPTION: Set of utility commands for converting between different blockchain-related units and data formats\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nto-unit: Convert an ETH amount into another unit (ether, gwei or wei)\n```\n\nLANGUAGE: bash\nCODE:\n```\nto-utf8: Convert hex data to a utf-8 string\n```\n\nLANGUAGE: bash\nCODE:\n```\nto-wei: Convert an ETH amount to wei\n```\n\n----------------------------------------\n\nTITLE: Encoding Function Call Data in Shell Script\nDESCRIPTION: The snippet demonstrates how to ABI-encode the arguments for an Ethereum function call using the \"cast calldata\" command. This command takes a function signature and a list of arguments, and returns the encoded call data. It requires the \"cast\" tool to be installed and available in the system path.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-calldata.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast calldata \"someFunc(address,uint256)\" 0x... 1\n```\n\n----------------------------------------\n\nTITLE: Using Assertions with Custom Messages in Solidity Tests\nDESCRIPTION: Shows how to use assertions with custom messages in Foundry tests to make it easier to identify failures and provide context for test results.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/best-practices.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nassertEq(x, y, \"1\")\nassertEq(x, y, \"sum1\")\n```\n\n----------------------------------------\n\nTITLE: Defining revokePersistent Function Signatures in Solidity\nDESCRIPTION: Shows the function signatures for the revokePersistent cheatcode, which can accept either a single address or an array of addresses.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/revoke-persistent.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction revokePersistent(address) external;\nfunction revokePersistent(address[] calldata) external;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Multiple expectRevert Calls in Solidity\nDESCRIPTION: An example demonstrating incorrect usage of multiple expectRevert calls at the same call depth, which can lead to unexpected behavior.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/expect-revert.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// DO NOT IMPLEMENT AS FOLLOWS! THIS IS AN INCORRECT USE.\nfunction testMultipleReverts() public {\n    vm.expectRevert();\n    revert();\n\n    vm.expectRevert();\n    console2.log(\"Does not revert\");\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Rolling Specified Fork to Block Number in Solidity\nDESCRIPTION: This example shows how to use rollFork with a specified fork ID. It creates an Optimism fork, rolls it to a specific block number, then selects the fork and verifies the block number.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/roll-fork.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 optimismForkId = vm.createFork(OPTIMISM_RPC_URL);\n\nvm.rollFork(optimismForkId, 1_337_000);\n\nvm.selectFork(optimismForkId);\n\nassertEq(block.number, 1_337_000);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base Fee using 'cast' - Shell\nDESCRIPTION: The snippets demonstrate how to retrieve the basefee of a block using the 'cast base-fee' command. Note that the specified block can be a block number or a predefined tag indicating the block's state, such as 'latest' or 'pending'. The first snippet shows how to get the basefee of the latest block, while the second one retrieves the basefee of the genesis block (block number 1).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-basefee.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast base-fee\n```\n\nLANGUAGE: shell\nCODE:\n```\ncast base-fee 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast Balance Help Command\nDESCRIPTION: Command to show help documentation for the cast balance subcommand, providing usage instructions and available options for querying account balances\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/balance.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast balance --help\n```\n\n----------------------------------------\n\nTITLE: Using Cast Decode-String Command\nDESCRIPTION: Explains the usage of the 'cast decode-string' command, which decodes ABI-encoded strings. It supports various options like verbosity levels, JSON output, and color configurations, allowing flexibility in logging and output display.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-string.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast decode-string [OPTIONS] <DATA>\n\nArguments:\n  <DATA>\n          The ABI-encoded string\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Forge Create Usage Documentation\nDESCRIPTION: This text block presents the usage documentation for the `forge create` command. It specifies the command's arguments and options, including details on constructor arguments, broadcasting, verification, and various compiler and transaction settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/create.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge create [OPTIONS] <CONTRACT>\\n\\nArguments:\\n  <CONTRACT>\\n          The contract identifier in the form `<path>:<contractname>`\\n\\nOptions:\\n      --constructor-args <ARGS>...\\n          The constructor arguments\\n\\n      --constructor-args-path <PATH>\\n          The path to a file containing the constructor arguments\\n\\n      --broadcast\\n          Broadcast the transaction\\n\\n      --verify\\n          Verify contract after creation\\n\\n      --unlocked\\n          Send via `eth_sendTransaction` using the `--from` argument or\n          `$ETH_FROM` as sender\\n\\n      --show-standard-json-input\\n          Prints the standard json compiler input if `--verify` is provided.\n          \\n          The standard json compiler input can be used to manually submit\n          contract verification in the browser.\\n\\n      --timeout <TIMEOUT>\\n          Timeout to use for broadcasting transactions\n          \\n          [env: ETH_TIMEOUT=]\\n\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \\n          [aliases: jobs]\\n\\nCache options:\\n  --force\\n          Clear the cache and artifacts folder and recompile\\n\\nBuild options:\\n  --no-cache\\n          Disable the cache\\n\\n  --dynamic-test-linking\\n          Enable dynamic test linking\\n\\n  --eof\\n          Whether to compile contracts to EOF bytecode\\n\\n  --skip <SKIP>...\\n          Skip building files whose names contain the given filter.\n          \\n          `test` and `script` are aliases for `.t.sol` and `.s.sol`.\n\\nLinker options:\\n  --libraries <LIBRARIES>\\n          Set pre-linked libraries\n          \\n          [env: DAPP_LIBRARIES=]\\n\\nCompiler options:\\n  --ignored-error-codes <ERROR_CODES>\\n          Ignore solc warnings by error code\\n\\n  --deny-warnings\\n          Warnings will trigger a compiler error\\n\\n  --no-auto-detect\\n          Do not auto-detect the `solc` version\\n\\n  --use <SOLC_VERSION>\\n          Specify the solc version, or a path to a local solc, to build with.\n          \\n          Valid values are in the format `x.y.z`, `solc:x.y.z` or\n          `path/to/solc`.\n\\n  --offline\\n          Do not access the network.\n          \\n          Missing solc versions will not be installed.\n\\n  --via-ir\\n          Use the Yul intermediate representation compilation pipeline\\n\\n  --use-literal-content\\n          Changes compilation to only use literal content and not URLs\\n\\n  --no-metadata\\n          Do not append any metadata to the bytecode.\n          \\n          This is equivalent to setting `bytecode_hash` to `none` and\n          `cbor_metadata` to `false`.\n\\n  --ast\\n          Includes the AST as JSON in the compiler output\\n\\n  --evm-version <VERSION>\\n          The target EVM version\\n\\n  --optimize [<OPTIMIZE>]\\n          Activate the Solidity optimizer\n          \\n          [possible values: true, false]\\n\\n  --optimizer-runs <RUNS>\\n          The number of runs specifies roughly how often each opcode of the\n          deployed code will be executed across the life-time of the contract.\n          This means it is a trade-off parameter between code size (deploy cost)\n          and code execution cost (cost after deployment). An `optimizer_runs`\n          parameter of `1` will produce short but expensive code. In contrast, a\n          larger `optimizer_runs` parameter will produce longer but more gas\n          efficient code\\n\\n  --extra-output <SELECTOR>...\\n          Extra output to include in the contract's artifact.\n          \\n          Example keys: evm.assembly, ewasm, ir, irOptimized, metadata\n          \\n          For a full description, see\n          <https://docs.soliditylang.org/en/v0.8.13/using-the-compiler.html#input-description>\\n\\n  --extra-output-files <SELECTOR>...\\n          Extra output to write to separate files.\n          \\n          Valid values: metadata, ir, irOptimized, ewasm, evm.assembly\\n\\nProject options:\\n  -o, --out <PATH>\\n          The path to the contract artifacts folder\\n\\n      --revert-strings <REVERT>\\n          Revert string configuration.\n          \\n          Possible values are \"default\", \"strip\" (remove), \"debug\"\n          (Solidity-generated revert strings) and \"verboseDebug\"\\n\\n      --build-info\\n          Generate build info files\\n\\n      --build-info-path <PATH>\\n          Output path to directory that build info files will be written to\\n\\n      --root <PATH>\\n          The project's root path.\n          \\n          By default root of the Git repository, if in one, or the current\n          working directory.\\n\\n  -C, --contracts <PATH>\\n          The contracts source directory\\n\\n  -R, --remappings <REMAPPINGS>\\n          The project's remappings\\n\\n      --remappings-env <ENV>\\n          The project's remappings from the environment\\n\\n      --cache-path <PATH>\\n          The path to the compiler cache\\n\\n      --lib-paths <PATH>\\n          The path to the library folder\\n\\n      --hardhat\\n          Use the Hardhat-style project layout.\n          \\n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n          \\n          [aliases: hh]\\n\\n      --config-path <FILE>\\n          Path to the config file\\n\\nTransaction options:\\n  --gas-limit <GAS_LIMIT>\\n          Gas limit for the transaction\n          \\n          [env: ETH_GAS_LIMIT=]\\n\\n  --gas-price <PRICE>\\n          Gas price for legacy transactions, or max fee per gas for EIP1559\n          transactions, either specified in wei, or as a string with a unit\n          type.\n          \\n          Examples: 1ether, 10gwei, 0.01ether\n          \\n          [env: ETH_GAS_PRICE=]\\n\\n  --priority-gas-price <PRICE>\\n          Max priority fee per gas for EIP1559 transactions\n          \\n          [env: ETH_PRIORITY_GAS_PRICE=]\\n\\n  --value <VALUE>\\n          Ether to send in the transaction, either specified in wei, or as a\n          string with a unit type.\n          \\n          Examples: 1ether, 10gwei, 0.01ether\\n\\n  --nonce <NONCE>\\n          Nonce for the transaction\\n\\n  --legacy\\n          Send a legacy transaction instead of an EIP1559 transaction.\n          \\n          This is automatically enabled for common networks without EIP1559.\\n\\n  --blob\\n          Send a EIP-4844 blob transaction\\n\\n  --blob-gas-price <BLOB_PRICE>\\n          Gas price for EIP-4844 blob transaction\n          \\n          [env: ETH_BLOB_GAS_PRICE=]\\n\\n  --auth <AUTH>\\n          EIP-7702 authorization list.\n          \\n          Can be either a hex-encoded signed authorization or an address.\\n\\n  --access-list [<ACCESS_LIST>]\\n          EIP-2930 access list.\n          \\n          Accepts either a JSON-encoded access list or an empty value to create\n          the access list via an RPC call to `eth_createAccessList`. To retrieve\n          only the access list portion, use the `cast access-list` command.\\n\\nEthereum options:\\n  -r, --rpc-url <URL>\\n          The RPC endpoint, default value is http://localhost:8545\n          \\n          [env: ETH_RPC_URL=]\\n\\n      --flashbots\\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \\n          This shares the transaction privately with all registered builders.\n          \\n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\\n\\n      --jwt-secret <JWT_SECRET>\\n          JWT Secret for the RPC endpoint.\n          \\n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \\n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\\n          \\n          [env: ETH_RPC_JWT_SECRET=]\\n\\n      --rpc-timeout <RPC_TIMEOUT>\\n          Timeout for the RPC request in seconds.\n          \\n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \\n          Default value: 45\n          \\n          [env: ETH_RPC_TIMEOUT=]\\n\\n      --rpc-headers <RPC_HEADERS>\\n          Specify custom headers for RPC requests\n          \\n          [env: ETH_RPC_HEADERS=]\\n\\n  -e, --etherscan-api-key <KEY>\\n          The Etherscan (or equivalent) API key\n          \\n          [env: ETHERSCAN_API_KEY=]\\n\\n  -c, --chain <CHAIN>\\n          The chain name or EIP-155 chain ID\n          \\n          [env: CHAIN=]\\n\\nWallet options - raw:\\n  -f, --from <ADDRESS>\\n          The sender account\n          \\n          [env: ETH_FROM=]\\n\\n  -i, --interactive\\n          Open an interactive prompt to enter your private key\\n\\n      --private-key <RAW_PRIVATE_KEY>\\n          Use the provided private key\\n\\n      --mnemonic <MNEMONIC>\\n          Use the mnemonic phrase of mnemonic file at the specified path\\n\\n      --mnemonic-passphrase <PASSPHRASE>\\n          Use a BIP39 passphrase for the mnemonic\\n\\n      --mnemonic-derivation-path <PATH>\\n          The wallet derivation path.\n          \\n          Works with both --mnemonic-path and hardware wallets.\\n\\n      --mnemonic-index <INDEX>\\n          Use the private key from the given mnemonic index.\n          \\n          Used with --mnemonic-path.\n          \\n          [default: 0]\\n\\n      --retries <RETRIES>\\n          Number of attempts for retrying verification\n          \\n          [default: 5]\\n\\n      --delay <DELAY>\\n          Optional delay to apply in between verification attempts, in seconds\n          \\n          [default: 5]\\n\\nWallet options - keystore:\\n  --keystore <PATH>\\n          Use the keystore in the given folder or file\n          \\n          [env: ETH_KEYSTORE=]\\n\\n  --account <ACCOUNT_NAME>\\n          Use a keystore from the default keystores folder\n          (~/.foundry/keystores) by its filename\n          \\n          [env: ETH_KEYSTORE_ACCOUNT=]\"\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Wallet Object in Solidity\nDESCRIPTION: Function signature for signing a digest using a Wallet object, returning the signature components v, r, and s.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sign(Wallet memory wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n```\n\n----------------------------------------\n\nTITLE: Configuring Future EVM Hardfork in TOML\nDESCRIPTION: Example of configuring a future Ethereum hardfork (Prague) that includes EIP-7702 in the foundry.toml configuration file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nevm_version = \"prague\"\n```\n\n----------------------------------------\n\nTITLE: Defining include_storage Configuration\nDESCRIPTION: This configuration defines the `include_storage` flag, which indicates whether values from storage should be included during fuzz tests. It is a boolean type defaulting to true, controlled by the environment variable `FOUNDRY_FUZZ_INCLUDE_STORAGE`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `include_storage`\n\n- Type: boolean\n- Default: true\n- Environment: `FOUNDRY_FUZZ_INCLUDE_STORAGE`\n\nThe flag indicating whether to include values from storage. See also [fuzz.include_storage](#include_storage)\n```\n\n----------------------------------------\n\nTITLE: ABI encoding a tuple type in shell\nDESCRIPTION: This example demonstrates how to ABI encode a type with components, such as a tuple or custom struct, using `cast abi-encode`. It takes the function signature, including the complex type, and the arguments as input and outputs the ABI encoded data.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-abi-encode.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"cast abi-encode \\\"someFunc((string,uint256))\\\" \\\"(myString,1)\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Declaring vm.chainId Function in Solidity\nDESCRIPTION: Function signature for the vm.chainId cheat code that allows setting the block.chainid value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/chain-id.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction chainId(uint256) external;\n```\n\n----------------------------------------\n\nTITLE: Checking Forge Remappings\nDESCRIPTION: Command to view automatically generated dependency remappings\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/dependencies.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/hello_foundry/forge-remappings:all}}\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation - Shell\nDESCRIPTION: This snippet demonstrates the basic command to generate documentation from Solidity source files using forge doc. It does not require any additional options and defaults to the current directory.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-doc.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge doc\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Pretty-Calldata Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast pretty-calldata' command, providing details on its usage and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/pretty-calldata.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast pretty-calldata --help\n```\n\n----------------------------------------\n\nTITLE: JSON Path Navigation Example\nDESCRIPTION: Complex JSON object structure demonstrating various levels of nesting for JSON path navigation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/write-toml.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"boolean\": true,\n  \"number\": 342,\n  \"obj1\": {\n    \"aNumber\": 123,\n    \"obj2\": {\n      \"aNumber\": 123,\n      \"obj3\": {\n        \"veryDeep\": 13371337\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Account Nonce Example Usage\nDESCRIPTION: Example showing how to use the setNonce function to set a specific nonce value for an account address in Foundry tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/set-nonce.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nvm.setNonce(address(100), 1234);\n```\n\n----------------------------------------\n\nTITLE: Cast Receipt Command Usage and Options in Plain Text\nDESCRIPTION: This snippet provides a detailed breakdown of the 'cast receipt' command's usage, arguments, and options. It includes information on RPC settings, display options, and various flags for customizing the command's behavior.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/receipt.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast receipt [OPTIONS] <TX_HASH> [FIELD]\n\nArguments:\n  <TX_HASH>\n          The transaction hash\n\n  [FIELD]\n          If specified, only get the given field of the transaction\n\nOptions:\n      --confirmations <CONFIRMATIONS>\n          The number of confirmations until the receipt is fetched\n          \n          [default: 1]\n\n      --async\n          Exit immediately if the transaction was not found\n          \n          [env: CAST_ASYNC=]\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Cast Send Create Command Usage Documentation\nDESCRIPTION: Detailed documentation showing the command syntax, arguments, and available options for deploying contract bytecode including threading, display formatting, and verbosity controls.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/send/--create.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast send --create [OPTIONS] <CODE> [SIG] [ARGS]...\n\nArguments:\n  <CODE>\n          The bytecode of the contract to deploy\n\n  [SIG]\n          The signature of the function to call\n\n  [ARGS]...\n          The arguments of the function to call\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Forge Selectors Collision Usage Details\nDESCRIPTION: Describes the usage instructions for the Forge 'selectors collision' command. It specifies the required arguments (first and second contract) and lists multiple options for configurations such as thread count, cache behavior, compiler options, and other project-specific settings. Provides users with the ability to handle complex Forge configurations for development and testing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/selectors/collision.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge selectors collision [OPTIONS] <FIRST_CONTRACT> <SECOND_CONTRACT>\n\nArguments:\n  <FIRST_CONTRACT>\n          The first of the two contracts for which to look selector collisions\n          for, in the form `(<path>:)?<contractname>`\n\n  <SECOND_CONTRACT>\n          The second of the two contracts for which to look selector collisions\n          for, in the form `(<path>:)?<contractname>`\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n\n          [aliases: jobs]\n\nCache options:\n  --force\n          Clear the cache and artifacts folder and recompile\n\nBuild options:\n  --no-cache\n          Disable the cache\n\n  --dynamic-test-linking\n          Enable dynamic test linking\n\n  --eof\n          Whether to compile contracts to EOF bytecode\n\n  --skip <SKIP>...\n          Skip building files whose names contain the given filter.\n\n          `test` and `script` are aliases for `.t.sol` and `.s.sol`.\n\nLinker options:\n  --libraries <LIBRARIES>\n          Set pre-linked libraries\n\n          [env: DAPP_LIBRARIES=]\n\nCompiler options:\n  --ignored-error-codes <ERROR_CODES>\n          Ignore solc warnings by error code\n\n  --deny-warnings\n          Warnings will trigger a compiler error\n\n  --no-auto-detect\n          Do not auto-detect the `solc` version\n\n  --use <SOLC_VERSION>\n          Specify the solc version, or a path to a local solc, to build with.\n\n          Valid values are in the format `x.y.z`, `solc:x.y.z` or\n          `path/to/solc`.\n\n  --offline\n          Do not access the network.\n\n          Missing solc versions will not be installed.\n\n  --via-ir\n          Use the Yul intermediate representation compilation pipeline\n\n  --use-literal-content\n          Changes compilation to only use literal content and not URLs\n\n  --no-metadata\n          Do not append any metadata to the bytecode.\n\n          This is equivalent to setting `bytecode_hash` to `none` and\n          `cbor_metadata` to `false`.\n\n  --ast\n          Includes the AST as JSON in the compiler output\n\n  --evm-version <VERSION>\n          The target EVM version\n\n  --optimize [<OPTIMIZE>]\n          Activate the Solidity optimizer\n\n          [possible values: true, false]\n\n  --optimizer-runs <RUNS>\n          The number of runs specifies roughly how often each opcode of the\n          deployed code will be executed across the life-time of the contract.\n          This means it is a trade-off parameter between code size (deploy cost)\n          and code execution cost (cost after deployment). An `optimizer_runs`\n          parameter of `1` will produce short but expensive code. In contrast, a\n          larger `optimizer_runs` parameter will produce longer but more gas\n          efficient code\n\n  --extra-output <SELECTOR>...\n          Extra output to include in the contract's artifact.\n\n          Example keys: evm.assembly, ewasm, ir, irOptimized, metadata\n\n          For a full description, see\n          <https://docs.soliditylang.org/en/v0.8.13/using-the-compiler.html#input-description>\n\n  --extra-output-files <SELECTOR>...\n          Extra output to write to separate files.\n\n          Valid values: metadata, ir, irOptimized, ewasm, evm.assembly\n\nProject options:\n  -o, --out <PATH>\n          The path to the contract artifacts folder\n\n      --revert-strings <REVERT>\n          Revert string configuration.\n\n          Possible values are \"default\", \"strip\" (remove), \"debug\"\n          (Solidity-generated revert strings) and \"verboseDebug\"\n\n      --build-info\n          Generate build info files\n\n      --build-info-path <PATH>\n          Output path to directory that build info files will be written to\n\n      --root <PATH>\n          The project's root path.\n\n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -C, --contracts <PATH>\n          The contracts source directory\n\n  -R, --remappings <REMAPPINGS>\n          The project's remappings\n\n      --remappings-env <ENV>\n          The project's remappings from the environment\n\n      --cache-path <PATH>\n          The path to the compiler cache\n\n      --lib-paths <PATH>\n          The path to the library folder\n\n      --hardhat\n          Use the Hardhat-style project layout.\n\n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n\n          [aliases: hh]\n\n      --config-path <FILE>\n          Path to the config file\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n\n          Depending on the context the verbosity levels have different meanings.\n\n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Signature Selector with Bytes4\nDESCRIPTION: Overloaded function that sets a 4-byte function selector for storage manipulation using bytes4 input. Used to target specific function signatures in storage operations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/sig.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage);\n```\n\n----------------------------------------\n\nTITLE: Running Forge Selectors Cache Command (Bash)\nDESCRIPTION: This snippet demonstrates how to execute the forge selectors cache command with the '--help' option to display help information. It aims to provide a quick reference for users on how to retrieve command usage and options available.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/selectors/cache.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge selectors cache --help\"\n```\n\n----------------------------------------\n\nTITLE: Cast Artifact Command Usage\nDESCRIPTION: This snippet details the command usage for 'cast artifact', including arguments and options such as the contract address, ABI path, output path, and various network settings. Dependencies include Ethereum chain access via an RPC and potentially an Etherscan API key. The input is a contract address, and the output is an artifact file, or stdout if not specified. Constraints include the need for an RPC URL and optional Etherscan verification if the ABI is not locally available.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/artifact.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast artifact [OPTIONS] <CONTRACT>\n\nArguments:\n  <CONTRACT>\n          An Ethereum address, for which the artifact will be produced\n\nOptions:\n      --abi-path <ABI_PATH>\n          Path to file containing the contract's JSON ABI. It's necessary if the\n          target contract is not verified on Etherscan\n\n  -o, --output <PATH>\n          The path to the output file.\n          \n          If not specified, the artifact will be output to stdout.\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Using with_key Function in Solidity\nDESCRIPTION: This example demonstrates how to use the `with_key` function multiple times to pass multiple arguments to a function. The order of calling `with_key` matters as it corresponds to the order of arguments in the target function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/with_key.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 slot = stdstore\n    .target(addr)\n    .sig(\"fun(uint256,address)\")\n    .with_key(1)\n    .with_key(address(this))\n    .find();\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Wallet Import Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast wallet import' command, which is used to import a private key into an encrypted keystore.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/import.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet import --help\n```\n\n----------------------------------------\n\nTITLE: Cast Parse-Units Help Output\nDESCRIPTION: Displays the complete help documentation including all available arguments, options, and display settings for the parse-units command. Details usage syntax, value conversion parameters, threading options, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/parse-units.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast parse-units [OPTIONS] [VALUE] [UNIT]\n\nArguments:\n  [VALUE]\n          The value to convert\n\n  [UNIT]\n          The unit to convert to\n          \n          [default: 18]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Defining a Pure Function in Solidity\nDESCRIPTION: Defines an internal pure function named `hash64` that takes two `bytes32` arguments and returns a `bytes32` hash. This function uses inline assembly to store and hash the input data leveraging the Ethereum `keccak256` hashing function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/chisel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction hash64(\n  bytes32 _a,\n  bytes32 _b\n) internal pure returns (bytes32 _hash) { \n    assembly {\n        // Store the 64 bytes we want to hash in scratch space\n        mstore(0x00, _a)\n        mstore(0x20, _b)\n\n        // Hash the memory in scratch space\n        // and assign the result to `_hash`\n        _hash := keccak256(0x00, 0x40)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Solidity Struct for Function Call Example\nDESCRIPTION: Solidity contract example that defines a struct and a function that accepts the struct as a parameter, provided as context for the next example.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-send.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Test {\n    struct MyStruct {\n        address addr;\n        uint256 amount;\n    }\n    function myfunction(MyStruct memory t) public pure {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gas Price in Wei\nDESCRIPTION: Specifies the gas price for transactions in wei, which determines the cost that users must pay for transaction processing. This is vital for incentivizing miners to process transactions in the network.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/executor-options.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n`--gas-price` *gas_price*\n```\n\n----------------------------------------\n\nTITLE: Usage and Options for cast sig Command in Foundry\nDESCRIPTION: This snippet outlines the detailed usage, arguments, and options for the 'cast sig' command. It includes information on function signature input, optimization, threading, display options, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/sig.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast sig [OPTIONS] [SIG] [OPTIMIZE]\n\nArguments:\n  [SIG]\n          The function signature, e.g. transfer(address,uint256)\n\n  [OPTIMIZE]\n          Optimize signature to contain provided amount of leading zeroes in\n          selector\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Test Naming Conventions in Solidity\nDESCRIPTION: Illustrates various test naming conventions for different types of tests in Foundry, including standard, fuzz, revert, and fork tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/best-practices.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ntest_Description\ntestFuzz_Description\ntest_RevertIf_Condition\ntest_RevertWhen_Condition\ntestFork_Description\ntestForkFuzz_RevertIf_Condition\ntestForkFuzz_RevertWhen_Condition\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom HD Derivation Paths for Hardware Wallets\nDESCRIPTION: Command line option to specify custom hierarchical deterministic (HD) derivation paths when using hardware wallets with Foundry. Takes a parameter to define the custom paths.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-hardware.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--hd-paths *paths*\n```\n\n----------------------------------------\n\nTITLE: Forge Script Execution Command\nDESCRIPTION: Command to run the delegation script against a local Anvil instance\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign-delegation.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nforge script script/SignDelegation.s.sol --rpc-url http://localhost:8545 --broadcast\n```\n\n----------------------------------------\n\nTITLE: Cast TX-Pool Status Command Help Output\nDESCRIPTION: Detailed help output showing all available options for the cast tx-pool status command, including RPC configuration, authentication settings, threading options, and display customization\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx-pool/status.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast tx-pool status [OPTIONS]\n\nOptions:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Options in Markdown\nDESCRIPTION: This snippet outlines the project-specific options for the Foundry CLI, including output paths, revert string configuration, and project layout settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/test.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nProject options:\n  -o, --out <PATH>\n          The path to the contract artifacts folder\n\n      --revert-strings <REVERT>\n          Revert string configuration.\n          \n          Possible values are \"default\", \"strip\" (remove), \"debug\"\n          (Solidity-generated revert strings) and \"verboseDebug\"\n\n      --build-info\n          Generate build info files\n\n      --build-info-path <PATH>\n          Output path to directory that build info files will be written to\n\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -C, --contracts <PATH>\n          The contracts source directory\n\n  -R, --remappings <REMAPPINGS>\n          The project's remappings\n\n      --remappings-env <ENV>\n          The project's remappings from the environment\n\n      --cache-path <PATH>\n          The path to the compiler cache\n\n      --lib-paths <PATH>\n          The path to the library folder\n\n      --hardhat\n          Use the Hardhat-style project layout.\n          \n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n          \n          [aliases: hh]\n\n      --config-path <FILE>\n          Path to the config file\n```\n\n----------------------------------------\n\nTITLE: Configuring EVM Version in TOML\nDESCRIPTION: Example of setting a specific EVM version in the foundry.toml configuration file. This pins the EVM version to Paris for compatibility reasons.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nevm_version = \"paris\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Bytes Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two bytes values. The function reverts if the two bytes values are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bytes memory left, bytes memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bytes memory left, bytes memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Defining shrink_run_limit Configuration\nDESCRIPTION: This snippet outlines the `shrink_run_limit` configuration, which specifies the maximum number of attempts to shrink a failed sequence in invariant testing. It is an integer type with a default of 5000 and can be set to 0 to disable shrinking.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `shrink_run_limit`\n\n- Type: integer\n- Default: 5000\n- Environment: `FOUNDRY_INVARIANT_SHRINK_RUN_LIMIT`\n\nThe maximum number of attempts to shrink a failed the sequence. Shrink process is disabled if set to 0.\n```\n\n----------------------------------------\n\nTITLE: Decoding Calldata with cast 4byte-calldata\nDESCRIPTION: This example demonstrates how to use `cast 4byte-calldata` to decode the calldata of an Ethereum transaction. The command takes ABI-encoded calldata as input and queries openchain.xyz to find a matching function signature.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-4byte-calldata.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast 4byte-calldata 0xa9059cbb000000000000000000000000e78388b4ce79068e89bf8aa7f218ef6b9ab0e9d00000000000000000000000000000000000000000000000000174b37380cea000\n```\n\n----------------------------------------\n\nTITLE: Setting Block Number Signature - Solidity\nDESCRIPTION: Function signature for the roll method that allows setting block.number in test environments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/roll.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction roll(uint256) external;\n```\n\n----------------------------------------\n\nTITLE: Disabling Storage Caching in Foundry EVM\nDESCRIPTION: Command-line option to explicitly disable RPC caching, forcing all storage slots to be read from the endpoint.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/evm-options.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--no-storage-caching\n```\n\n----------------------------------------\n\nTITLE: Cast Source Command Usage Documentation\nDESCRIPTION: Comprehensive help output showing all available arguments and options for the cast source command, including address specification, flattening options, API configuration, and display settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/source.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast source [OPTIONS] <ADDRESS>\n\nArguments:\n  <ADDRESS>\n          The contract's address\n\nOptions:\n  -f, --flatten\n          Whether to flatten the source code\n\n  -d <DIRECTORY>\n          The output directory/file to expand source tree into\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\n      --explorer-api-url <EXPLORER_API_URL>\n          Alternative explorer API URL to use that adheres to the Etherscan API.\n          If not provided, defaults to Etherscan\n          \n          [env: EXPLORER_API_URL=]\n\n      --explorer-url <EXPLORER_URL>\n          Alternative explorer browser URL\n          \n          [env: EXPLORER_URL=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Cast Lookup Address Help\nDESCRIPTION: This snippet shows how to display the help message for the `cast lookup-address` command. The help message provides information about the command's usage, arguments, and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/lookup-address.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast lookup-address --help\n```\n\n----------------------------------------\n\nTITLE: Multiple Private Keys Specification in Foundry CLI\nDESCRIPTION: Command line option to directly provide multiple raw private keys for wallet operations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-raw.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--private-keys raw_private_keys\n```\n\n----------------------------------------\n\nTITLE: Invariant Test Configuration Example in Solidity\nDESCRIPTION: Example of configuring an invariant test with in-line comments. This sets the number of runs, depth, fail-on-revert behavior, and call-override options for the default profile.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/inline-test-config.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract MyInvariantTest is Test {\n  /// forge-config: default.invariant.runs = 100\n  /// forge-config: default.invariant.depth = 2\n  /// forge-config: default.invariant.fail-on-revert = false\n  /// forge-config: default.invariant.call-override = true\n  function invariant_InlineConfig() public {\n    // --- snip ---\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cast Help Command in Bash\nDESCRIPTION: Use the 'cast find-block --help' command in bash to display help information about locating blocks by timestamp. This command shows available options and parameters for successful execution.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/find-block.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast find-block --help\n```\n\n----------------------------------------\n\nTITLE: Usage and Options for cast sig-event Command\nDESCRIPTION: This snippet outlines the usage, arguments, options, and display settings for the 'cast sig-event' command. It includes details on thread usage, color output, JSON formatting, verbosity levels, and other command-specific options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/sig-event.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast sig-event [OPTIONS] [EVENT_STRING]\n\nArguments:\n  [EVENT_STRING]\n          The event string\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Defining show_logs Configuration\nDESCRIPTION: This snippet defines the `show_logs` configuration, which is a boolean flag to indicate whether console logs should be displayed during fuzz tests. The environment variable `FOUNDRY_FUZZ_SHOW_LOGS` can be used to control this behavior.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `show_logs`\n\n- Type: boolean\n- Default: false\n- Environment: `FOUNDRY_FUZZ_SHOW_LOGS`\n\nThe flag indicates whether to display console logs in fuzz tests or not. Note that in order to enable displaying console logs, you'll need to set `show_logs = true` and then use `forge test -vv` or set `verbosity >= 2`.\n```\n\n----------------------------------------\n\nTITLE: Defining Block Gas Limit\nDESCRIPTION: Specifies the maximum amount of gas that can be used in a block, impacting the total number of transactions that can be processed at once. It is essential for managing network congestion and transaction throughput.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/executor-options.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`--block-gas-limit` *gas_limit*\n```\n\n----------------------------------------\n\nTITLE: Executing Cast Wallet List Command in Bash\nDESCRIPTION: This snippet shows how to execute the cast wallet list command. It provides help documentation for using the command with various options to list accounts from different sources such as default directories, Ledger hardware wallets, Trezor hardware wallets, AWS KMS, and all configured accounts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/list.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet list --help\n```\n\n----------------------------------------\n\nTITLE: Building Foundry from Source\nDESCRIPTION: Complete process for cloning the Foundry repository and building all tools (Forge, Cast, Anvil, Chisel) from source code.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# clone the repository\ngit clone https://github.com/foundry-rs/foundry.git\ncd foundry\n# install Forge\ncargo install --path ./crates/forge --profile release --force --locked\n# install Cast\ncargo install --path ./crates/cast --profile release --force --locked\n# install Anvil\ncargo install --path ./crates/anvil --profile release --force --locked\n# install Chisel\ncargo install --path ./crates/chisel --profile release --force --locked\n```\n\n----------------------------------------\n\nTITLE: Configuring Blank Lines Around Contracts - Solidity\nDESCRIPTION: The `contract_new_lines` option controls the addition of blank lines before and after contract definitions for better visual separation. Enabling this feature improves readability by separating contracts from surrounding code.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/formatter.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// Empty line before contract\ncontract MyContract {\n  // ... \n}\n// Empty line after contract\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Mainnet for Latest Block using Custom RPC URL\nDESCRIPTION: This example demonstrates how to retrieve the latest block information from the Ethereum mainnet by specifying a custom RPC URL. The command uses the --rpc-url flag to point to an Infura endpoint instead of the default localhost.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-rpc.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncast rpc --rpc-url https://mainnet.infura.io/v3/ eth_getBlockByNumber \"latest\" \"false\"\n```\n\n----------------------------------------\n\nTITLE: Last Call Gas Usage Example\nDESCRIPTION: Example showing how to capture gas usage of the most recent external call.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/gas-snapshots.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SnapshotGasTest is Test {\n    Flare public flare;\n\n    function setUp() public {\n        flare = new Flare();\n    }\n\n    /// Writes to `snapshots/SnapshotGasTest.json` group with name `lastCallA`.\n    function testSnapshotGasLastCall() public {\n        flare.run(1);\n        vm.snapshotGasLastCall(\"lastCallA\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cast Publish Command Usage and Options\nDESCRIPTION: Comprehensive documentation of the cast publish command including all available options, arguments, and environmental variables. Includes RPC configuration, Flashbots integration, threading options, and display settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/publish.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast publish [OPTIONS] <RAW_TX>\n\nArguments:\n  <RAW_TX>\n          The raw transaction\n\nOptions:\n      --async\n          Only print the transaction hash and exit immediately\n          \n          [env: CAST_ASYNC=]\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Converting Hexadecimal to Binary in Shell\nDESCRIPTION: Example of converting the hexadecimal number 0x100 to its binary representation using the cast to-base command\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-base.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast to-base 0x100 2\n```\n\n----------------------------------------\n\nTITLE: Performing Checked Integer Write in Solidity\nDESCRIPTION: This function, 'checked_write_int', is an internal Solidity function designed for safely writing an integer (int256) to a storage slot. It operates on the same pattern as 'checked_write' but specifically caters to integer values. The function ensures correctness through internal logic and reverts with a message if the operation fails.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/checked_write.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction checked_write_int(StdStorage storage self, int256 val) internal;\n```\n\n----------------------------------------\n\nTITLE: Solidity Error Signature: assertionError\nDESCRIPTION: This code snippet shows the signature of the `assertionError` in Solidity, represented as `stdError.assertionError`. This error is internally raised by Solidity when an `assert` statement evaluates to false.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertionError.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n\"stdError.assertionError\"\n```\n\n----------------------------------------\n\nTITLE: Cast Chain ID Options\nDESCRIPTION: Provides a detailed breakdown of the various options available with the `cast chain-id` command. These include RPC endpoint configuration, Flashbots integration, JWT secret, RPC timeout, custom headers, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/chain-id.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast chain-id [OPTIONS]\n\nOptions:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Watch Options in Markdown\nDESCRIPTION: This snippet presents the watch mode options for the Foundry CLI, including file watching, test execution, and debounce delay settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/test.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nWatch options:\n  -w, --watch [<PATH>...]\n          Watch the given files or directories for changes.\n          \n          If no paths are provided, the source and test directories of the\n          project are watched.\n\n      --no-restart\n          Do not restart the command while it's still running\n\n      --run-all\n          Explicitly re-run all tests when a change is made.\n          \n          By default, only the tests of the last modified test file are\n          executed.\n\n      --watch-delay <DELAY>\n          File update debounce delay.\n          \n          During the delay, incoming change events are accumulated and only once\n          the delay has passed, is an action taken. Note that this does not mean\n          a command will be started: if --no-restart is given and a command is\n          already running, the outcome of the action will be to do nothing.\n          \n          Defaults to 50ms. Parses as decimal seconds by default, but using an\n          integer with the `ms` suffix may be more convenient.\n          \n          When using --poll mode, you'll want a larger duration, or risk\n          overloading disk I/O.\n```\n\n----------------------------------------\n\nTITLE: Parsing Top-Level TOML Key in Solidity\nDESCRIPTION: This example shows how to parse a top-level key from a TOML string. It extracts the key 'key' from the root level of the TOML structure.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-toml-keys.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory toml = 'key = \"something\"';\nstring[] memory keys = vm.parseTomlKeys(toml, \"$\"); // [\"key\"]\n```\n\n----------------------------------------\n\nTITLE: Usage Documentation for Forge EIP-712 Command\nDESCRIPTION: This snippet provides the usage information for the Forge EIP-712 command, detailing its options, arguments, and expected input.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/eip712.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"Usage: forge eip712 [OPTIONS] <PATH>\\n\\nArguments:\\n  <PATH>\\n          The path to the file from which to read struct definitions\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nCache options:\\n  --force\\n          Clear the cache and artifacts folder and recompile\\n\\nBuild options:\\n  --no-cache\\n          Disable the cache\\n\\n  --dynamic-test-linking\\n          Enable dynamic test linking\\n\\n  --eof\\n          Whether to compile contracts to EOF bytecode\\n\\n  --skip <SKIP>...\\n          Skip building files whose names contain the given filter.\\n          \\n          `test` and `script` are aliases for `.t.sol` and `.s.sol`.\\n\\nLinker options:\\n  --libraries <LIBRARIES>\\n          Set pre-linked libraries\\n          \\n          [env: DAPP_LIBRARIES=]\\n\\nCompiler options:\\n  --ignored-error-codes <ERROR_CODES>\\n          Ignore solc warnings by error code\\n\\n  --deny-warnings\\n          Warnings will trigger a compiler error\\n\\n  --no-auto-detect\\n          Do not auto-detect the `solc` version\\n\\n  --use <SOLC_VERSION>\\n          Specify the solc version, or a path to a local solc, to build with.\\n          \\n          Valid values are in the format `x.y.z`, `solc:x.y.z` or\\n          `path/to/solc`.\\n\\n  --offline\\n          Do not access the network.\\n          \\n          Missing solc versions will not be installed.\\n\\n  --via-ir\\n          Use the Yul intermediate representation compilation pipeline\\n\\n  --use-literal-content\\n          Changes compilation to only use literal content and not URLs\\n\\n  --no-metadata\\n          Do not append any metadata to the bytecode.\\n          \\n          This is equivalent to setting `bytecode_hash` to `none` and\\n          `cbor_metadata` to `false`.\\n\\n  --ast\\n          Includes the AST as JSON in the compiler output\\n\\n  --evm-version <VERSION>\\n          The target EVM version\\n\\n  --optimize [<OPTIMIZE>]\\n          Activate the Solidity optimizer\\n          \\n          [possible values: true, false]\\n\\n  --optimizer-runs <RUNS>\\n          The number of runs specifies roughly how often each opcode of the\\n          deployed code will be executed across the life-time of the contract.\\n          This means it is a trade-off parameter between code size (deploy cost)\\n          and code execution cost (cost after deployment). An `optimizer_runs`\\n          parameter of `1` will produce short but expensive code. In contrast, a\\n          larger `optimizer_runs` parameter will produce longer but more gas\\n          efficient code\\n\\n  --extra-output <SELECTOR>...\\n          Extra output to include in the contract's artifact.\\n          \\n          Example keys: evm.assembly, ewasm, ir, irOptimized, metadata\\n          \\n          For a full description, see\\n          <https://docs.soliditylang.org/en/v0.8.13/using-the-compiler.html#input-description>\\n\\n  --extra-output-files <SELECTOR>...\\n          Extra output to write to separate files.\\n          \\n          Valid values: metadata, ir, irOptimized, ewasm, evm.assembly\\n\\nProject options:\\n  -o, --out <PATH>\\n          The path to the contract artifacts folder\\n\\n      --revert-strings <REVERT>\\n          Revert string configuration.\\n          \\n          Possible values are \"default\", \"strip\" (remove), \"debug\"\\n          (Solidity-generated revert strings) and \"verboseDebug\"\\n\\n      --build-info\\n          Generate build info files\\n\\n      --build-info-path <PATH>\\n          Output path to directory that build info files will be written to\\n\\n      --root <PATH>\\n          The project's root path.\\n          \\n          By default root of the Git repository, if in one, or the current\\n          working directory.\\n\\n  -C, --contracts <PATH>\\n          The contracts source directory\\n\\n  -R, --remappings <REMAPPINGS>\\n          The project's remappings\\n\\n      --remappings-env <ENV>\\n          The project's remappings from the environment\\n\\n      --cache-path <PATH>\\n          The path to the compiler cache\\n\\n      --lib-paths <PATH>\\n          The path to the library folder\\n\\n      --hardhat\\n          Use the Hardhat-style project layout.\\n          \\n          This is the same as using: `--contracts contracts --lib-paths\\n          node_modules`.\\n          \\n          [aliases: hh]\\n\\n      --config-path <FILE>\\n          Path to the config file\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Solidity Structs for TOML Parsing\nDESCRIPTION: Example of defining Solidity structs to decode TOML tables into structured data. The struct fields must match the types of the TOML values in alphabetical order of the TOML keys.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-toml.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Apple {\n    string color;\n    uint8 sourness;\n    uint8 sweetness;\n}\n\nstruct FruitStall {\n    Apple[] apples;\n    string name;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unix Timestamp in Solidity using Foundry's vm.unixTime()\nDESCRIPTION: The unixTime() function returns the current time since the Unix epoch in milliseconds. It's part of Foundry's vm object used for testing Solidity contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/unix-time.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unixTime() external returns (uint milliseconds);\n```\n\n----------------------------------------\n\nTITLE: Get ERC20 Balance using cast with RPC URL\nDESCRIPTION: This example shows how to use `cast balance` to retrieve the ERC20 balance of an address using an RPC URL and specifies the token address. The `source .env` command is used to load environment variables containing the RPC URL.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-balance.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"# To load the variables in the .env file\nsource .env\n\n# To get the USDT balance of Binance\ncast balance --erc20 0xdAC17F958D2ee523a2206206994597C13D831ec7 0xF977814e90dA44bFA03b6295A0616a897441aceC --rpc-url $MAINNET_RPC_URL\"\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Depth in Solidity\nDESCRIPTION: This function, 'depth', is an internal method that allows a Solidity smart contract to set the depth of a value in a tuple (such as a struct). The method takes a 'StdStorage' reference and a 'uint256' value representing the depth to be set. It returns the updated 'StdStorage' reference. The default depth is initialized to zero.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/depth.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage);\n```\n\n----------------------------------------\n\nTITLE: Cast Call Create Help: Displaying Usage\nDESCRIPTION: This snippet shows how to use the `--help` flag with `cast call --create` to display the command's usage instructions, including available options and arguments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/call/--create.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast call --create --help\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Endpoints in Foundry.toml\nDESCRIPTION: Demonstrates how to configure RPC endpoints in the foundry.toml file, including direct URL references and environment variable usage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# --snip--\n[rpc_endpoints]\noptimism = \"https://optimism.alchemyapi.io/v2/...\"\nmainnet = \"${RPC_MAINNET}\"\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet Sign Command Usage and Options\nDESCRIPTION: This snippet provides the full usage information, arguments, and options for the 'cast wallet sign' command, including wallet options for various types of wallets and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/sign.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet sign [OPTIONS] <MESSAGE>\n\nArguments:\n  <MESSAGE>\n          The message, typed data, or hash to sign.\n          \n          Messages starting with 0x are expected to be hex encoded, which get\n          decoded before being signed.\n          \n          The message will be prefixed with the Ethereum Signed Message header\n          and hashed before signing, unless `--no-hash` is provided.\n          \n          Typed data can be provided as a json string or a file name. Use --data\n          flag to denote the message is a string of typed data. Use --data\n          --from-file to denote the message is a file name containing typed\n          data. The data will be combined and hashed using the EIP712\n          specification before signing. The data should be formatted as JSON.\n\nOptions:\n      --data\n          Treat the message as JSON typed data\n\n      --from-file\n          Treat the message as a file containing JSON typed data. Requires\n          `--data`\n\n      --no-hash\n          Treat the message as a raw 32-byte hash and sign it directly without\n          hashing it again\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nWallet options - raw:\n  -f, --from <ADDRESS>\n          The sender account\n          \n          [env: ETH_FROM=]\n\n  -i, --interactive\n          Open an interactive prompt to enter your private key\n\n      --private-key <RAW_PRIVATE_KEY>\n          Use the provided private key\n\n      --mnemonic <MNEMONIC>\n          Use the mnemonic phrase of mnemonic file at the specified path\n\n      --mnemonic-passphrase <PASSPHRASE>\n          Use a BIP39 passphrase for the mnemonic\n\n      --mnemonic-derivation-path <PATH>\n          The wallet derivation path.\n          \n          Works with both --mnemonic-path and hardware wallets.\n\n      --mnemonic-index <INDEX>\n          Use the private key from the given mnemonic index.\n          \n          Used with --mnemonic-path.\n          \n          [default: 0]\n\nWallet options - keystore:\n  --keystore <PATH>\n          Use the keystore in the given folder or file\n          \n          [env: ETH_KEYSTORE=]\n\n  --account <ACCOUNT_NAME>\n          Use a keystore from the default keystores folder\n          (~/.foundry/keystores) by its filename\n          \n          [env: ETH_KEYSTORE_ACCOUNT=]\n\n  --password <PASSWORD>\n          The keystore password.\n          \n          Used with --keystore.\n\n  --password-file <PASSWORD_FILE>\n          The keystore password file path.\n          \n          Used with --keystore.\n          \n          [env: ETH_PASSWORD=]\n\nWallet options - hardware wallet:\n  -l, --ledger\n          Use a Ledger hardware wallet\n\n  -t, --trezor\n          Use a Trezor hardware wallet\n\nWallet options - remote:\n  --aws\n          Use AWS Key Management Service\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry Tools Autocompletion for zsh (macOS)\nDESCRIPTION: Commands to generate and install autocompletion scripts for forge, cast, and anvil in zsh on macOS systems.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/shell-autocompletion.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge completions zsh > /opt/homebrew/completions/zsh/_forge\ncast completions zsh > /opt/homebrew/completions/zsh/_cast\nanvil completions zsh > /opt/homebrew/completions/zsh/_anvil\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Cost for WETH Deposit Function in Shell\nDESCRIPTION: This example demonstrates how to estimate the gas cost of calling the deposit() function on the WETH contract while sending 0.1 ETH. The command targets the WETH contract address and specifies the function signature along with a value parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-estimate.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast estimate 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 \\\n  --value 0.1ether \"deposit()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fork Retry Backoff in Foundry EVM\nDESCRIPTION: Command-line option for setting the initial retry backoff when encountering errors during forking.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/evm-options.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--fork-retry-backoff <BACKOFF>\n```\n\n----------------------------------------\n\nTITLE: Forge Bind Help Command\nDESCRIPTION: Command to display the help information for forge bind\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/bind.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge bind --help\n```\n\n----------------------------------------\n\nTITLE: Cast Format Bytes32 String Usage\nDESCRIPTION: This text block defines the usage and arguments for the `cast format-bytes32-string` command, including the optional string argument and various options for customizing the command's behavior.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/format-bytes32-string.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast format-bytes32-string [OPTIONS] [STRING]\n\nArguments:\n  [STRING]\n          The string to format\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Limit as String in Foundry Configuration\nDESCRIPTION: Example of setting the gas limit in Foundry using a string value to overcome the limitation in a dependency that prevents raising the gas limit beyond the default with an integer value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ngas_limit = \"18446744073709551615\" # u64::MAX\n```\n\n----------------------------------------\n\nTITLE: Cast Upload-Signature Usage Documentation\nDESCRIPTION: Detailed usage instructions and options for the cast upload-signature command, including arguments for signatures, threading options, and display configuration\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/upload-signature.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast upload-signature [OPTIONS] [SIGNATURES]...\n\nArguments:\n  [SIGNATURES]...\n          The signatures to upload.\n          \n          Prefix with 'function', 'event', or 'error'. Defaults to function if\n          no prefix given. Can also take paths to contract artifact JSON.\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Displaying help for cast estimate --create\nDESCRIPTION: This command displays the help information for the `cast estimate --create` command. It shows the available options and arguments for estimating the gas cost of deploying a smart contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/estimate/--create.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast estimate --create --help\n```\n\n----------------------------------------\n\nTITLE: Modified Gas Report Output with Ignored Contracts\nDESCRIPTION: This snippet shows the modified gas report output when certain contracts are ignored using the gas_reports_ignore configuration.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/gas-reports.md#2025-04-22_snippet_3\n\nLANGUAGE: ignore\nCODE:\n```\n╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮\n│ MockERC1155 contract  ┆                 ┆        ┆        ┆        ┆         │\n╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡\n│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ balanceOf             ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ balanceOfBatch        ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ batchBurn             ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ batchMint             ┆ 2444            ┆ 135299 ┆ 125081 ┆ 438531 ┆ 18      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ burn                  ┆ 814             ┆ 2117   ┆ 2117   ┆ 3421   ┆ 2       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ isApprovedForAll      ┆ 749             ┆ 749    ┆ 749    ┆ 749    ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ mint                  ┆ 26039           ┆ 31943  ┆ 27685  ┆ 118859 ┆ 22      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ safeBatchTransferFrom ┆ 2561            ┆ 137750 ┆ 126910 ┆ 461304 ┆ 8       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ safeTransferFrom      ┆ 1335            ┆ 34505  ┆ 28103  ┆ 139557 ┆ 9       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ setApprovalForAll     ┆ 24485           ┆ 24485  ┆ 24485  ┆ 24485  ┆ 12      │\n╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Cast Transaction Pool Command Usage\nDESCRIPTION: Detailed usage instructions and options for the cast tx-pool content-from command, including RPC configuration, flashbots integration, JWT authentication, timeout settings, and display options\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx-pool/content-from.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast tx-pool content-from [OPTIONS] --from <FROM>\n\nOptions:\n  -f, --from <FROM>\n          The Signer to filter the transactions by\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Retrieving DAI Token Total Supply with Cast\nDESCRIPTION: This command demonstrates how to use Cast to call a smart contract function and retrieve the total supply of the DAI token.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cast/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/cast/cast-call:all}}\n```\n\n----------------------------------------\n\nTITLE: Installing Release Candidate\nDESCRIPTION: Command to install the release candidate version of Foundry.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/announcements.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfoundryup -i rc\n```\n\n----------------------------------------\n\nTITLE: Usage documentation for cast 4byte-calldata\nDESCRIPTION: This text block describes the usage, arguments, and options available for the `cast 4byte-calldata` command. It includes details about the input calldata, thread configuration, display options, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/4byte-calldata.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast 4byte-calldata [OPTIONS] [CALLDATA]\n\nArguments:\n  [CALLDATA]\n          The ABI-encoded calldata\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Fixed Point Number with Shell Script\nDESCRIPTION: This snippet demonstrates the use of the 'cast to-fixed-point' command in a shell environment to convert an integer to a fixed point number with a given number of decimal places. No additional dependencies are mentioned for this operation. The command takes a 'decimals' parameter to determine the number of decimal places and a 'value' parameter that represents the integer to be converted. The output is a fixed point number. No specific constraints are outlined.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-fixed-point.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast to-fixed-point 2 250\n```\n\n----------------------------------------\n\nTITLE: Defining runs Configuration\nDESCRIPTION: This configuration specifies the `runs` setting, an integer value determining how many times each invariant test group should run. It has a default value of 256 and can be adjusted via the environment variable `FOUNDRY_INVARIANT_RUNS`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `runs`\n\n- Type: integer\n- Default: 256\n- Environment: `FOUNDRY_INVARIANT_RUNS`\n\nThe number of runs that must execute for each invariant test group. See also [fuzz.runs](#runs)\n```\n\n----------------------------------------\n\nTITLE: Solidity Deployment Script\nDESCRIPTION: Script for deploying Vyper contracts using Solidity and forge-std\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vyper.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Script} from \"forge-std/Script.sol\";\n\ncontract CounterScript is Script {\n    function run() public {\n        vm.broadcast();\n        deployCode(\"src/Counter.vy\", abi.encode(1));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cast Address Zero Usage and Options\nDESCRIPTION: This block provides the detailed usage information for the `cast address-zero` command. It defines available options such as `--help`, `--threads`, `--color`, `--json`, `--quiet`, and `--verbosity`, explaining their purpose and possible values. This helps users understand and customize the command's behavior.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/address-zero.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast address-zero [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Forge Snapshot Command\nDESCRIPTION: This section provides detailed usage information for the forge snapshot command, outlining its options for creating and managing gas snapshots, such as outputting diffs, checking against previous snapshots, and setting tolerances for gas deviations. It is essential to understand parameter functions for effective utilization.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/snapshot.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge snapshot [OPTIONS] [PATH]\n\nOptions:\n      --diff [<SNAPSHOT_FILE>]\n          Output a diff against a pre-existing gas snapshot.\n          \n          By default, the comparison is done with .gas-snapshot.\n\n      --check [<SNAPSHOT_FILE>]\n          Compare against a pre-existing gas snapshot, exiting with code 1 if\n          they do not match.\n          \n          Outputs a diff if the gas snapshots do not match.\n          \n          By default, the comparison is done with .gas-snapshot.\n\n      --snap <FILE>\n          Output file for the gas snapshot\n          \n          [default: .gas-snapshot]\n\n      --tolerance <SNAPSHOT_THRESHOLD>\n          Tolerates gas deviations up to the specified percentage\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDisplay options:\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n  -q, --quiet\n          Do not print log messages\n\n      --json\n          Format log messages as JSON\n\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n  -s, --suppress-successful-traces\n          Suppress successful test traces and show only traces for failures\n          \n          [env: FORGE_SUPPRESS_SUCCESSFUL_TRACES=]\n\n      --junit\n          Output test results as JUnit XML report\n\n  -l, --list\n          List tests instead of running them\n\n      --show-progress\n          Show test execution progress\n\n      --summary\n          Print test summary table\n\n      --detailed\n          Print detailed test summary table\n\nTest options:\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\n      --debug\n          Run a single test in the debugger.\n          \n          The matching test will be opened in the debugger regardless of the\n          outcome of the test.\n          \n          If the matching test is a fuzz test, then it will open the debugger on\n          the first failure case. If the fuzz test does not fail, it will open\n          the debugger on the last fuzz case.\n\n      --flamegraph\n          Generate a flamegraph for a single test. Implies `--decode-internal`.\n          \n          A flame graph is used to visualize which functions or operations\n          within the smart contract are consuming the most gas overall in a\n          sorted manner.\n\n      --flamechart\n          Generate a flamechart for a single test. Implies `--decode-internal`.\n          \n          A flame chart shows the gas usage over time, illustrating when each\n          function is called (execution order) and how much gas it consumes at\n          each point in the timeline.\n\n      --decode-internal\n          Identify internal functions in traces.\n          \n          This will trace internal functions and decode stack parameters.\n          \n          Parameters stored in memory (such as bytes or arrays) are currently\n          decoded only when a single function is matched, similarly to\n          `--debug`, for performance reasons.\n\n      --dump <PATH>\n          Dumps all debugger steps to file\n\n      --gas-report\n          Print a gas report\n          \n          [env: FORGE_GAS_REPORT=]\n\n      --gas-snapshot-check <GAS_SNAPSHOT_CHECK>\n          Check gas snapshots against previous runs\n          \n          [env: FORGE_SNAPSHOT_CHECK=]\n          [possible values: true, false]\n\n      --gas-snapshot-emit <GAS_SNAPSHOT_EMIT>\n          Enable/disable recording of gas snapshot results\n          \n          [env: FORGE_SNAPSHOT_EMIT=]\n          [possible values: true, false]\n\n      --allow-failure\n          Exit with code 0 even if a test fails\n          \n          [env: FORGE_ALLOW_FAILURE=]\n\n      --fail-fast\n          Stop running tests after the first failure\n\n      --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n      --fuzz-seed <FUZZ_SEED>\n          Set seed used to generate randomness during your fuzz runs\n\n      --fuzz-runs <RUNS>\n          [env: FOUNDRY_FUZZ_RUNS=]\n\n      --fuzz-timeout <TIMEOUT>\n          Timeout for each fuzz run in seconds\n          \n          [env: FOUNDRY_FUZZ_TIMEOUT=]\n\n      --fuzz-input-file <FUZZ_INPUT_FILE>\n          File to rerun fuzz failures from\n\n      --rerun\n          Re-run recorded test failures from last run. If no failure recorded\n          then regular test run is performed\n\n  [PATH]\n          The contract file you want to test, it's a shortcut for --match-path\n\nTest filtering:\n  --match-test <REGEX>\n          Only run test functions matching the specified regex pattern\n          \n          [aliases: mt]\n\n  --no-match-test <REGEX>\n          Only run test functions that do not match the specified regex pattern\n          \n          [aliases: nmt]\n\n  --match-contract <REGEX>\n          Only run tests in contracts matching the specified regex pattern\n          \n          [aliases: mc]\n\n  --no-match-contract <REGEX>\n          Only run tests in contracts that do not match the specified regex\n          pattern\n          \n          [aliases: nmc]\n\n  --match-path <GLOB>\n          Only run tests in source files matching the specified glob pattern\n          \n          [aliases: mp]\n\n  --no-match-path <GLOB>\n          Only run tests in source files that do not match the specified glob\n          pattern\n          \n          [aliases: nmp]\n\n  --no-match-coverage <REGEX>\n          Only show coverage for files that do not match the specified regex\n          pattern\n          \n          [aliases: nmco]\n\nEVM options:\n  -f, --fork-url <URL>\n          Fetch state over a remote endpoint instead of starting from an empty\n          state.\n          \n          If you want to fetch state from a specific block number, see\n          --fork-block-number.\n          \n          [aliases: rpc-url]\n\n      --fork-block-number <BLOCK>\n          Fetch state from a specific block number over a remote endpoint.\n          \n          See --fork-url.\n\n      --fork-retries <RETRIES>\n          Number of retries.\n          \n          See --fork-url.\n\n      --fork-retry-backoff <BACKOFF>\n          Initial retry backoff on encountering errors.\n          \n          See --fork-url.\n\n      --no-storage-caching\n          Explicitly disables the use of RPC caching.\n          \n          All storage slots are read entirely from the endpoint.\n          \n          This flag overrides the project's configuration file.\n          \n          See --fork-url.\n\n      --initial-balance <BALANCE>\n          The initial balance of deployed test contracts\n\n      --sender <ADDRESS>\n          The address which will be executing tests/scripts\n\n      --ffi\n          Enable the FFI cheatcode\n\n      --always-use-create-2-factory\n          Use the create 2 factory in all cases including tests and\n          non-broadcasting scripts\n\n      --create2-deployer <ADDRESS>\n          The CREATE2 deployer address to use, this will override the one in the\n          config\n\nFork config:\n  --compute-units-per-second <CUPS>\n          Sets the number of assumed available compute units per second for this\n          provider\n          \n          default value: 330\n          \n          See also --fork-url and\n          <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>\n\n  --no-rpc-rate-limit\n          Disables rate limiting for this node's provider.\n          \n          See also --fork-url and\n          <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>\n          \n          [aliases: no-rate-limit]\n\nExecutor environment config:\n  --code-size-limit <CODE_SIZE>\n          EIP-170: Contract code size limit in bytes. Useful to increase this\n          because of tests. By default, it is 0x6000 (~25kb)\n\n  --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [aliases: chain-id]\n\n  --gas-price <GAS_PRICE>\n          The gas price\n\n  --block-base-fee-per-gas <FEE>\n          The base fee in a block\n          \n          [aliases: base-fee]\n\n  --tx-origin <ADDRESS>\n          The transaction origin\n\n  --block-coinbase <ADDRESS>\n          The coinbase of the block\n\n  --block-timestamp <TIMESTAMP>\n          The timestamp of the block\n\n  --block-number <BLOCK>\n          The block number\n\n  --block-difficulty <DIFFICULTY>\n          The block difficulty\n\n  --block-prevrandao <PREVRANDAO>\n          The block prevrandao value. NOTE: Before merge this field was mix_hash\n\n  --block-gas-limit <GAS_LIMIT>\n          The block gas limit\n          \n          [aliases: gas-limit]\n\n  --memory-limit <MEMORY_LIMIT>\n          The memory limit per EVM execution in bytes. If this limit is\n          exceeded, a `MemoryLimitOOG` result is thrown.\n          \n          The default is 128MiB.\n\n  --disable-block-gas-limit\n          Whether to disable the block gas limit checks\n          \n          [aliases: no-gas-limit]\n\n  --isolate\n          Whether to enable isolation of calls. In isolation mode all top-level\n          calls are executed as a separate transaction in a separate EVM\n```\n\n----------------------------------------\n\nTITLE: Generating a named interface from a file\nDESCRIPTION: Example command showing how to generate a Solidity interface with a custom name from an ABI file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-interface.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncast interface -n LilENS ./path/to/abi.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Forge Clone Command\nDESCRIPTION: This snippet demonstrates how to display the help for the 'forge clone' command, which provides usage details, arguments, and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/clone.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge clone --help\"\n```\n\n----------------------------------------\n\nTITLE: Running Forge Test Help Command in Bash\nDESCRIPTION: Command to display the help information for the 'forge test' command in Foundry, showing all available options and parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/test.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge test --help\n```\n\n----------------------------------------\n\nTITLE: Signing a message using a raw private key\nDESCRIPTION: This example demonstrates how to sign a message using a raw private key with the `cast wallet sign` command. The `--private-key` option is used to provide the private key, and the message to be signed is \"hello\".  The private key is stored in the `$PRIV_KEY` environment variable.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-sign.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"cast wallet sign --private-key $PRIV_KEY \\\"hello\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Division Error in Solidity\nDESCRIPTION: This snippet defines the divisionError which is triggered when a division operation fails, such as division by zero. It is part of the stdError library in Solidity, and understanding this error is critical for developers to manage exceptions effectively during arithmetic operations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/divisionError.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstdError.divisionError\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Mythril\nDESCRIPTION: Commands for installing and running Mythril analysis\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/static-analyzers.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrustup default nightly\npip3 install mythril\nmyth analyze src/Contract.sol --solc-json mythril.config.json\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ myth analyze src/Counter.sol --solc-json mythril.config.json\n.\n.\nmythril.laser.plugin.loader [INFO]: Loading laser plugin: coverage\nmythril.laser.plugin.loader [INFO]: Loading laser plugin: mutation-pruner\n.\n.\nAchieved 11.56% coverage for code: 608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220659fce8aadca285da9206b61f95de294d3958c409cc3011ded856f421885867464736f6c63430008100033\nmythril.laser.plugin.plugins.coverage.coverage_plugin [INFO]: Achieved 90.13% coverage for code: 6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220659fce8aadca285da9206b61f95de294d3958c409cc3011ded856f421885867464736f6c63430008100033\nmythril.laser.plugin.plugins.instruction_profiler [INFO]: Total: 1.0892839431762695 s\n[ADD         ]   0.9974 %,  nr      9,  total   0.0109 s,  avg   0.0012 s,  min   0.0011 s,  max   0.0013 s\n.\n.\n[SWAP1       ]   1.8446 %,  nr     18,  total   0.0201 s,  avg   0.0011 s,  min   0.0010 s,  max   0.0013 s\n[SWAP2       ]   0.8858 %,  nr      9,  total   0.0096 s,  avg   0.0011 s,  min   0.0010 s,  max   0.0011 s\n\nmythril.analysis.security [INFO]: Starting analysis\nmythril.mythril.mythril_analyzer [INFO]: Solver statistics: \nQuery count: 61 \nSolver time: 3.6820807456970215\nThe analysis was completed successfully. No issues were detected.\n```\n\n----------------------------------------\n\nTITLE: Asserting String Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two strings. The function reverts if the two strings are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(string memory left, string memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(string memory left, string memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast To Fixed Point Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast to-fixed-point command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-fixed-point.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-fixed-point --help\n```\n\n----------------------------------------\n\nTITLE: Showing Help for Forge Verify-Contract Command in Bash\nDESCRIPTION: Command to display the help information for the 'forge verify-contract' function, which shows all available options and arguments for contract verification.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/verify-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge verify-contract --help\n```\n\n----------------------------------------\n\nTITLE: Enabling FFI in Forge Configuration\nDESCRIPTION: This command enables FFI (Foreign Function Interface) in the 'foundry.toml' file by executing 'forge config' with the '--ffi' option. The command output is redirected to a configuration file, updating it accordingly. No prerequisites are required aside from having Forge installed.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-config.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge config --ffi > foundry.toml\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Cast Wallet Verify Command\nDESCRIPTION: This snippet provides detailed usage instructions for the 'cast wallet verify' command. It explains the function of each argument and option when used to verify the signature of a message. Users must specify the original message, the associated signature, and the signer's address. Additional options allow for customization of logging and thread usage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/verify.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet verify [OPTIONS] --address <ADDRESS> <MESSAGE> <SIGNATURE>\n\nArguments:\n  <MESSAGE>\n          The original message\n\n  <SIGNATURE>\n          The signature to verify\n\nOptions:\n  -a, --address <ADDRESS>\n          The address of the message signer\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Help Output for cast to-hexdata Command\nDESCRIPTION: This snippet shows the detailed help output for the 'cast to-hexdata' command. It includes information on the command's usage, arguments, options for execution control, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-hexdata.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-hexdata [OPTIONS] [INPUT]\n\nArguments:\n  [INPUT]\n          The input to normalize\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring Invariant Test Failure Persistence in foundry.toml\nDESCRIPTION: This configuration in foundry.toml specifies a custom directory path for persisting invariant test failures.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/replay-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[invariant]\nfailure_persist_dir=\"/tests/dir\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Cache Data for a Specific Chain in Forge\nDESCRIPTION: Demonstrates how to list cache data for a specific blockchain by name, using 'rinkeby' as an example.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache-ls.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge cache ls rinkeby\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Format Units Command\nDESCRIPTION: This snippet shows how to invoke the help option for the 'cast format-units' command, which provides the user with the available options and arguments for using the command effectively.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/format-units.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast format-units --help\"\n```\n\n----------------------------------------\n\nTITLE: Cast Command Usage and Subcommands\nDESCRIPTION: Provides the full usage information and list of subcommands for the 'cast' tool, including brief descriptions of each subcommand's functionality.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast [OPTIONS] <COMMAND>\n\nCommands:\n  4byte                  Get the function signatures for the given selector from\n                         <https://openchain.xyz> [aliases: 4, 4b]\n  4byte-calldata         Decode ABI-encoded calldata using\n                         <https://openchain.xyz> [aliases: 4c, 4bc]\n  4byte-event            Get the event signature for a given topic 0 from\n                         <https://openchain.xyz> [aliases: 4e, 4be,\n                         topic0-event, t0e]\n  abi-encode             ABI encode the given function argument, excluding the\n                         selector [aliases: ae]\n  access-list            Create an access list for a transaction [aliases: ac,\n                         acl]\n  address-zero           Prints the zero address [aliases: --address-zero, az]\n  admin                  Fetch the EIP-1967 admin account [aliases: adm]\n  age                    Get the timestamp of a block [aliases: a]\n  artifact               Generate an artifact file, that can be used to deploy a\n                         contract locally [aliases: ar]\n  balance                Get the balance of an account in wei [aliases: b]\n  base-fee               Get the basefee of a block [aliases: ba, fee, basefee]\n  bind                   Generate a rust binding from a given ABI [aliases: bi]\n  block                  Get information about a block [aliases: bl]\n  block-number           Get the latest block number [aliases: bn]\n  call                   Perform a call on an account without publishing a\n                         transaction [aliases: c]\n  calldata               ABI-encode a function with arguments [aliases: cd]\n  chain                  Get the symbolic name of the current chain\n  chain-id               Get the Ethereum chain ID [aliases: ci, cid]\n  client                 Get the current client version [aliases: cl]\n  code                   Get the runtime bytecode of a contract [aliases: co]\n  codehash               Get the codehash for an account\n  codesize               Get the runtime bytecode size of a contract [aliases:\n                         cs]\n  completions            Generate shell completions script [aliases: com]\n  compute-address        Compute the contract address from a given nonce and\n                         deployer address [aliases: ca]\n  concat-hex             Concatenate hex strings [aliases: --concat-hex, ch]\n  constructor-args       Display constructor arguments used for the contract\n                         initialization [aliases: cra]\n  create2                Generate a deterministic contract address using CREATE2\n                         [aliases: c2]\n  creation-code          Download a contract creation code from Etherscan and\n                         RPC [aliases: cc]\n  decode-abi             Decode ABI-encoded input or output data [aliases:\n                         abi-decode, --abi-decode, ad]\n  decode-calldata        Decode ABI-encoded input data [aliases:\n                         calldata-decode, --calldata-decode, cdd]\n  decode-eof             Decodes EOF container bytes\n  decode-error           Decode custom error data [aliases: error-decode,\n                         --error-decode, erd]\n  decode-event           Decode event data [aliases: event-decode,\n                         --event-decode, ed]\n  decode-string          Decode ABI-encoded string [aliases: string-decode,\n                         --string-decode, sd]\n  decode-transaction     Decodes a raw signed EIP 2718 typed transaction\n                         [aliases: dt, decode-tx]\n  disassemble            Disassembles a hex-encoded bytecode into a\n                         human-readable representation [aliases: da]\n  estimate               Estimate the gas cost of a transaction [aliases: e]\n  find-block             Get the block number closest to the provided timestamp\n                         [aliases: f]\n  format-bytes32-string  Formats a string into bytes32 encoding [aliases:\n                         --format-bytes32-string]\n  format-units           Format a number from smallest unit to decimal with\n                         arbitrary decimals [aliases: --format-units, fun]\n  from-bin               Convert binary data into hex data [aliases: --from-bin,\n                         from-binx, fb]\n  from-fixed-point       Convert a fixed point number into an integer [aliases:\n                         --from-fix, ff]\n  from-rlp               Decodes RLP hex-encoded data [aliases: --from-rlp]\n  from-utf8              Convert UTF8 text to hex [aliases: --from-ascii,\n                         --from-utf8, from-ascii, fu, fa]\n  from-wei               Convert wei into an ETH amount [aliases: --from-wei,\n                         fw]\n  gas-price              Get the current gas price [aliases: g]\n  generate-fig-spec      Generate Fig autocompletion spec [aliases: fig]\n  hash-message           Hash a message according to EIP-191 [aliases:\n                         --hash-message, hm]\n  hash-zero              Prints the zero hash [aliases: --hash-zero, hz]\n  help                   Print this message or the help of the given\n                         subcommand(s)\n  implementation         Fetch the EIP-1967 implementation for a contract Can\n                         read from the implementation slot or the beacon slot\n                         [aliases: impl]\n  index                  Compute the storage slot for an entry in a mapping\n                         [aliases: in]\n  index-erc7201          Compute storage slots as specified by `ERC-7201:\n                         Namespaced Storage Layout` [aliases: index7201, in7201]\n  interface              Generate a Solidity interface from a given ABI\n                         [aliases: i]\n  keccak                 Hash arbitrary data using Keccak-256 [aliases: k,\n                         keccak256]\n  logs                   Get logs by signature or topic [aliases: l]\n  lookup-address         Perform an ENS reverse lookup [aliases: la]\n  max-int                Prints the maximum value of the given integer type\n                         [aliases: --max-int, maxi]\n  max-uint               Prints the maximum value of the given integer type\n                         [aliases: --max-uint, maxu]\n  min-int                Prints the minimum value of the given integer type\n                         [aliases: --min-int, mini]\n  mktx                   Build and sign a transaction [aliases: m]\n  namehash               Calculate the ENS namehash of a name [aliases: na, nh]\n  nonce                  Get the nonce for an account [aliases: n]\n  parse-bytes32-address  Parses a checksummed address from bytes32 encoding.\n                         [aliases: --parse-bytes32-address]\n  parse-bytes32-string   Parses a string from bytes32 encoding [aliases:\n                         --parse-bytes32-string]\n  parse-units            Convert a number from decimal to smallest unit with\n                         arbitrary decimals [aliases: --parse-units, pun]\n  pretty-calldata        Pretty print calldata [aliases: pc]\n  proof                  Generate a storage proof for a given storage slot\n                         [aliases: pr]\n  publish                Publish a raw transaction to the network [aliases: p]\n  receipt                Get the transaction receipt for a transaction [aliases:\n                         re]\n  resolve-name           Perform an ENS lookup [aliases: rn]\n  rpc                    Perform a raw JSON-RPC request [aliases: rp]\n  run                    Runs a published transaction in a local environment and\n                         prints the trace [aliases: r]\n  selectors              Extracts function selectors and arguments from bytecode\n                         [aliases: sel]\n  send                   Sign and publish a transaction [aliases: s]\n  shl                    Perform a left shifting operation\n  shr                    Perform a right shifting operation\n  sig                    Get the selector for a function [aliases: si]\n  sig-event              Generate event signatures from event string [aliases:\n                         se]\n  source                 Get the source code of a contract from a block explorer\n                         [aliases: et, src]\n  storage                Get the raw value of a contract's storage slot\n                         [aliases: st]\n  storage-root           Get the storage root for an account [aliases: sr]\n  to-ascii               Convert hex data to an ASCII string [aliases:\n                         --to-ascii, tas, 2as]\n  to-base                Converts a number of one base to another [aliases:\n                         --to-base, --to-radix, to-radix, tr, 2r]\n  to-bytes32             Right-pads hex data to 32 bytes [aliases: --to-bytes32,\n                         tb, 2b]\n  to-check-sum-address   Convert an address to a checksummed format (EIP-55)\n                         [aliases: --to-checksum-address, --to-checksum,\n                         to-checksum, ta, 2a]\n  to-dec                 Converts a number of one base to decimal [aliases:\n                         --to-dec, td, 2d]\n  to-fixed-point         Convert an integer into a fixed point number [aliases:\n                         --to-fix, tf, 2f]\n  to-hex                 Converts a number of one base to another [aliases:\n                         --to-hex, th, 2h]\n  to-hexdata             Normalize the input to lowercase, 0x-prefixed hex\n                         [aliases: --to-hexdata, thd, 2hd]\n  to-int256              Convert a number to a hex-encoded int256 [aliases:\n                         --to-int256, ti, 2i]\n  to-rlp                 RLP encodes hex data, or an array of hex data [aliases:\n                         --to-rlp]\n  to-uint256             Convert a number to a hex-encoded uint256 [aliases:\n                         --to-uint256, tu, 2u]\n```\n\n----------------------------------------\n\nTITLE: Configuring Override Spacing - Solidity\nDESCRIPTION: The `override_spacing` configuration option affects whether a space is printed between the 'override' keyword and the parent contracts when overriding functions or modifiers. This enhances code clarity based on user preference.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/formatter.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction foo() override (Parent) public { }\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction foo() override(Parent) public { }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Function Signature using cast 4byte\nDESCRIPTION: This command retrieves the function signature associated with the provided selector from the Openchain database. The selector is passed as a hexadecimal value.  The output will be the function signature if found.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-4byte.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast 4byte 0x8cc5ce99\n```\n\n----------------------------------------\n\nTITLE: cast admin command usage\nDESCRIPTION: This text block outlines the usage, arguments, and options available for the `cast admin` command. It details parameters such as specifying the block height, RPC URL, and various flags for configuring the command's behavior, including options for Flashbots, JWT secrets, and RPC timeouts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/admin.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast admin [OPTIONS] <WHO>\n\nArguments:\n  <WHO>\n          The address from which the admin account will be fetched\n\nOptions:\n  -B, --block <BLOCK>\n          The block height to query at.\n          \n          Can also be the tags earliest, finalized, safe, latest, or pending.\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n```\n\n----------------------------------------\n\nTITLE: Cast Estimate CLI Help Command\nDESCRIPTION: Displays help information for the cast estimate command, showing available options and usage instructions for estimating transaction gas costs\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/estimate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast estimate --help\n```\n\n----------------------------------------\n\nTITLE: Generated Solidity Contract from REPL Session\nDESCRIPTION: The generated Solidity contract showing how Chisel translates REPL commands into a complete contract with proper imports and structure.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/chisel/README.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport {Vm} from \"forge-std/Vm.sol\";\n\ncontract REPL {\n    Vm internal constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    /// @notice REPL contract entry point\n    function run() public {\n        uint256 a = 123;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Single bytes32 Environment Variable in Solidity\nDESCRIPTION: This snippet demonstrates how to read a single bytes32 value from an environment variable using the vm.envBytes32 function. It sets up the environment variable, defines the expected value, and asserts the output matches the expected value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-bytes32.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"BYTES32_VALUE\";\nbytes32 expected = bytes32(0x0000000000000000000000000000000000000000000000000000000000000000);\nbytes32 output = vm.envBytes32(key);\nassert(output == expected);\n```\n\n----------------------------------------\n\nTITLE: Display and Logging Configuration Options for Ethereum Tools\nDESCRIPTION: Command line options for controlling output display preferences, including color settings, JSON formatting, verbosity levels, and quieting output. Verbosity levels provide granular control over logging details.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/create.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Forge Cache Command Usage Documentation\nDESCRIPTION: Comprehensive documentation of the forge cache command, including available subcommands (clean, ls), options for threading, display configuration, and verbosity levels\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/cache.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge cache [OPTIONS] <COMMAND>\n\nCommands:\n  clean  Cleans cached data from the global foundry directory\n  ls     Shows cached data from the global foundry directory\n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Initializing a Foundry Project without Git\nDESCRIPTION: This command initializes a new Foundry project named 'hello_foundry' but skips the creation of a Git repository.  This is useful when you don't want to immediately track changes using Git.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-init.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"forge init --no-git hello_foundry\"\n```\n\n----------------------------------------\n\nTITLE: Understanding Forge Commands and Options\nDESCRIPTION: This plaintext snippet details the various commands and options available with the Forge CLI tool. It includes functionalities like building contracts, generating documentation, managing dependencies, and verifying bytecode on Etherscan.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage: forge [OPTIONS] <COMMAND>\n\nCommands:\n  bind               Generate Rust bindings for smart contracts\n  bind-json          Generate bindings for serialization/deserialization of\n                     project structs via JSON cheatcodes\n  build              Build the project\\'s smart contracts [aliases: b, compile]\n  cache              Manage the Foundry cache\n  clean              Remove the build artifacts and cache directories [aliases:\n                     cl]\n  clone              Clone a contract from Etherscan\n  compiler           Compiler utilities\n  completions        Generate shell completions script [aliases: com]\n  config             Display the current config [aliases: co]\n  coverage           Generate coverage reports\n  create             Deploy a smart contract [aliases: c]\n  doc                Generate documentation for the project\n  eip712             Generate EIP-712 struct encodings for structs from a given\n                     file\n  flatten            Flatten a source file and all of its imports into one file\n                     [aliases: f]\n  fmt                Format Solidity source files\n  geiger             Detects usage of unsafe cheat codes in a project and its\n                     dependencies\n  generate           Generate scaffold files\n  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]\n  help               Print this message or the help of the given subcommand(s)\n  init               Create a new Forge project\n  inspect            Get specialized information about a smart contract\n                     [aliases: in]\n  install            Install one or multiple dependencies [aliases: i]\n  remappings         Get the automatically inferred remappings for the project\n                     [aliases: re]\n  remove             Remove one or multiple dependencies [aliases: rm]\n  script             Run a smart contract as a script, building transactions\n                     that can be sent onchain\n  selectors          Function selector utilities [aliases: se]\n  snapshot           Create a gas snapshot of each test\\'s gas usage [aliases: s]\n  soldeer            Soldeer dependency manager\n  test               Run the project\\'s tests [aliases: t]\n  tree               Display a tree visualization of the project\\'s dependency\n                     graph [aliases: tr]\n  update             Update one or multiple dependencies [aliases: u]\n  verify-bytecode    Verify the deployed bytecode against its source on\n                     Etherscan [aliases: vb]\n  verify-check       Check verification status on Etherscan [aliases: vc]\n  verify-contract    Verify smart contracts on Etherscan [aliases: v]\n\nOptions:\n  -h, --help\n          Print help (see a summary with \\'-h\\')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\n  -V, --version\n          Print version\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\nFind more information in the book:\nhttp://book.getfoundry.sh/reference/forge/forge.html\n```\n\n----------------------------------------\n\nTITLE: Loading Storage Slot Value Example\nDESCRIPTION: Example showing how to load a uint256 value from storage slot 0 of a contract using vm.load. Demonstrates reading a private variable's value and logging it.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/load.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n/// contract LeetContract {\n///     uint256 private leet = 1337; // slot 0\n/// }\n\nbytes32 leet = vm.load(address(leetContract), bytes32(uint256(0)));\nemit log_uint(uint256(leet)); // 1337\n```\n\n----------------------------------------\n\nTITLE: Executing Cast Client with Help Option\nDESCRIPTION: This bash command executes the `cast client` command with the `--help` option. It displays the available options and usage information for the `cast client` subcommand.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast client --help\"\n```\n\n----------------------------------------\n\nTITLE: Replaying Basic Transaction Hash\nDESCRIPTION: Basic command to replay a transaction using its hash, which will execute the transaction with full block state\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-run.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast run 0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca\n```\n\n----------------------------------------\n\nTITLE: Call tokenURI(uint256) on Tubby Cats NFT contract with cast\nDESCRIPTION: This example demonstrates how to call the `tokenURI(uint256)` function on the Tubby Cats NFT contract. It sets environment variables for the contract address and token ID, and then uses `cast call` to execute the function. The function returns the token URI for the specified token ID.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-call.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport CONTRACT=0xca7ca7bcc765f77339be2d648ba53ce9c8a262bd\nexport TOKEN_ID=19938\ncast call $CONTRACT \"tokenURI(uint256)(string)\" $TOKEN_ID\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Management Modifier for Multi-User Testing\nDESCRIPTION: A modifier that allows handler functions to simulate calls from different addresses by selecting an actor from a predefined list and using the prank cheatcode.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\naddress[] public actors;\n\naddress internal currentActor;\n\nmodifier useActor(uint256 actorIndexSeed) {\n    currentActor = actors[bound(actorIndexSeed, 0, actors.length - 1)];\n    vm.startPrank(currentActor);\n    _;\n    vm.stopPrank();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining log_array events in Solidity\nDESCRIPTION: These events are used to log arrays of unsigned and signed 256-bit integers. They are defined to emit an event containing the array values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-logs.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent log_array(uint256[] val);\nevent log_array(int256[] val);\n```\n\n----------------------------------------\n\nTITLE: Asserting Address Array Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two address arrays. The function reverts if the two address arrays are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(address[] memory left, address[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(address[] memory left, address[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Cast Format Bytes32 String Help\nDESCRIPTION: This bash command invokes the `cast format-bytes32-string` command with the `--help` flag, which displays the command's usage instructions and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/format-bytes32-string.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast format-bytes32-string --help\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry Tools Autocompletion for bash\nDESCRIPTION: Commands to generate and install autocompletion scripts for forge, cast, and anvil in the bash shell.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/shell-autocompletion.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p $HOME/.local/share/bash-completion/completions\nforge completions bash > $HOME/.local/share/bash-completion/completions/forge\ncast completions bash > $HOME/.local/share/bash-completion/completions/cast\nanvil completions bash > $HOME/.local/share/bash-completion/completions/anvil\nexec bash\n```\n\n----------------------------------------\n\nTITLE: Timestamp of Block Creation\nDESCRIPTION: Records the timestamp when a block is created in seconds. This helps in verifying the order of transactions and maintaining the integrity of the blockchain's timeline.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/executor-options.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`--block-timestamp` *timestamp*\n```\n\n----------------------------------------\n\nTITLE: Specifying Remote Signing Accounts in Foundry CLI\nDESCRIPTION: Command-line options for specifying which remote accounts should sign transactions in Foundry tools. The `-a` or `--froms` flag allows you to provide one or more addresses that will sign transactions through the connected RPC. This can also be configured using the ETH_FROM environment variable.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-remote.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-a *addresses*\n--froms *addresses*\n```\n\n----------------------------------------\n\nTITLE: Forge Flatten Command Options and Usage\nDESCRIPTION: This text snippet describes the command-line arguments and options available for the 'forge flatten' command. It provides a detailed overview of how to specify input paths, output destinations, threading, project configurations, display preferences, and verbosity levels. These settings allow users to customize the flattening process according to their project's structure and requirements.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/flatten.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge flatten [OPTIONS] <PATH>\n\nArguments:\n  <PATH>\n          The path to the contract to flatten\n\nOptions:\n  -o, --output <PATH>\n          The path to output the flattened contract.\n          \n          If not specified, the flattened contract will be output to stdout.\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nProject options:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -C, --contracts <PATH>\n          The contracts source directory\n\n  -R, --remappings <REMAPPINGS>\n          The project's remappings\n\n      --remappings-env <ENV>\n          The project's remappings from the environment\n\n      --cache-path <PATH>\n          The path to the compiler cache\n\n      --lib-paths <PATH>\n          The path to the library folder\n\n      --hardhat\n          Use the Hardhat-style project layout.\n          \n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n          \n          [aliases: hh]\n\n      --config-path <FILE>\n          Path to the config file\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Executing Cast Nonce Command in Bash\nDESCRIPTION: The 'cast nonce --help' command displays help information for retrieving the nonce for a specified Ethereum account using the 'cast' tool. This tool is part of the 'foundry-rs' suite and provides various options to customize the command behavior, such as specifying an RPC endpoint or adjusting timeout settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/nonce.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast nonce --help\n```\n\n----------------------------------------\n\nTITLE: Rerunning Failed Tests in Forge\nDESCRIPTION: This command uses the --rerun option to replay only the recorded failures from the last test run, omitting successful tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/replay-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge test --rerun\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Address Arrays in Solidity\nDESCRIPTION: These functions are devised to ensure that two arrays of Ethereum addresses are the same, with the optional feature of specifying a descriptive error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(address[] memory left, address[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(address[] memory left, address[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Using cast wallet derive-private-key Command\nDESCRIPTION: Command-line interface help output for the cast wallet derive-private-key command. Shows command syntax and available arguments for deriving a private key from a mnemonic phrase with an optional mnemonic index.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/derive-private-key.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet derive-private-key --help\nUsage: cast wallet derive-private-key <MNEMONIC> [MNEMONIC_INDEX]\n\nArguments:\n  <MNEMONIC>        \n  [MNEMONIC_INDEX]  \n\nOptions:\n  -h, --help  Print help\n```\n\n----------------------------------------\n\nTITLE: Multi-Wallet Options with Raw Private Keys\nDESCRIPTION: This snippet likely demonstrates how to configure Foundry to use multiple wallets based on raw private keys.  This is often used for testing or development, but is generally discouraged for production due to security concerns. The snippet likely resides within a markdown file included in the Foundry book.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#include multi-wallet-options-raw.md}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chain Name with Cast Command - Shell\nDESCRIPTION: This shell command retrieves the symbolic name of the chain connected via the specified RPC URL. The command can be used by specifying an RPC URL with the --rpc-url option or by setting the ETH_RPC_URL environment variable. It returns the symbolic name of the connected blockchain network.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-chain.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast chain --rpc-url $RPC\n```\n\nLANGUAGE: shell\nCODE:\n```\ncast chain\n```\n\n----------------------------------------\n\nTITLE: Decoding transfer calldata with cast pretty-calldata command in Foundry\nDESCRIPTION: An example showing how to decode the calldata for an ERC-20 token transfer function using the cast pretty-calldata command. This command parses the raw calldata and formats it in a human-readable way.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-pretty-calldata.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast pretty-calldata 0xa9059cbb000000000000000000000000e78388b4ce79068e89bf8aa7f218ef6b9ab0e9d00000000000000000000000000000000000000000000000000174b37380cea000\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for cast to-base Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast to-base' command, which provides details on its usage, arguments, and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-base.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-base --help\n```\n\n----------------------------------------\n\nTITLE: Contract Verification Provider Configuration Options\nDESCRIPTION: Command line options for specifying and configuring Ethereum contract verification providers, including built-in providers like Etherscan and Sourcify, as well as custom API endpoints.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/create.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--verifier <VERIFIER>\n          The contract verification provider to use\n          \n          [default: sourcify]\n\n          Possible values:\n          - etherscan\n          - sourcify\n          - blockscout\n          - oklink\n          - custom:     Custom verification provider, requires compatibility\n            with the Etherscan API\n\n  --verifier-api-key <VERIFIER_API_KEY>\n          The verifier API KEY, if using a custom provider\n          \n          [env: VERIFIER_API_KEY=]\n\n  --verifier-url <VERIFIER_URL>\n          The verifier URL, if using a custom provider\n          \n          [env: VERIFIER_URL=]\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzz Test Failure Persistence in foundry.toml\nDESCRIPTION: This configuration in foundry.toml specifies a custom file path for persisting and rerunning fuzz test failures.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/replay-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[fuzz]\nfailure_persist_file=\"/tests/failures.txt\"\n```\n\n----------------------------------------\n\nTITLE: Defining mockFunction Signature in Solidity\nDESCRIPTION: The signature of the mockFunction cheatcode, which takes three parameters: the callee address, the target address, and the call data.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/mock-function.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mockFunction(address callee, address target, bytes calldata data) external;\n```\n\n----------------------------------------\n\nTITLE: Defining FFI Function Signature in Solidity\nDESCRIPTION: Declares the function signature for the FFI cheatcode, which takes an array of strings as input and returns bytes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/ffi.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction ffi(string[] calldata) external returns (bytes memory);\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet from Uint256 in Solidity\nDESCRIPTION: This function signature demonstrates creating a Wallet using a uint256 parameter in Solidity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-wallet.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createWallet(uint256) external returns (Wallet memory);\n```\n\n----------------------------------------\n\nTITLE: Defining parseTomlKeys Function Signature in Solidity\nDESCRIPTION: This snippet shows the function signature for `parseTomlKeys`, which takes a TOML string and a key as input and returns an array of keys.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-toml-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);\n```\n\n----------------------------------------\n\nTITLE: Generating and Building Documentation - Shell\nDESCRIPTION: This snippet illustrates how to generate and build documentation with a specified output directory. The --build flag compiles the mdbook and the --out option defines the output path.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-doc.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge doc --build --out ./documentation\n```\n\n----------------------------------------\n\nTITLE: Displaying forge update help information\nDESCRIPTION: This command displays the help information for the forge update command, showing all available options and arguments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/update.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge update --help\n```\n\n----------------------------------------\n\nTITLE: Defining writeToml Function Signatures in Solidity\nDESCRIPTION: Function signatures for writeToml showing two variants - one for writing new files and another for updating existing files with a valueKey parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/write-toml.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction writeToml(string calldata json, string calldata path) external;\n\nfunction writeToml(string calldata json, string calldata path, string calldata valueKey) external;\n```\n\n----------------------------------------\n\nTITLE: Calling a Contract Function with Struct Parameter in Foundry Cast\nDESCRIPTION: Example of using 'cast mktx' to sign a transaction calling a function with a struct parameter, showing the tuple encoding format.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-mktx.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncast mktx 0x... \"myfunction((address,uint256))\" \"(0x...,1)\"\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet Public Key Options\nDESCRIPTION: This text block outlines the available options for the `cast wallet public-key` command, including specifying private keys, mnemonics, keystores, and hardware wallets. It also includes options for controlling display settings and logging verbosity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/public-key.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet public-key [OPTIONS]\n\nOptions:\n      --raw-private-key <PRIVATE_KEY>\n          If provided, the public key will be derived from the specified private\n          key\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nWallet options - raw:\n  -f, --from <ADDRESS>\n          The sender account\n          \n          [env: ETH_FROM=]\n\n  -i, --interactive\n          Open an interactive prompt to enter your private key\n\n      --private-key <RAW_PRIVATE_KEY>\n          Use the provided private key\n\n      --mnemonic <MNEMONIC>\n          Use the mnemonic phrase of mnemonic file at the specified path\n\n      --mnemonic-passphrase <PASSPHRASE>\n          Use a BIP39 passphrase for the mnemonic\n\n      --mnemonic-derivation-path <PATH>\n          The wallet derivation path.\n          \n          Works with both --mnemonic-path and hardware wallets.\n\n      --mnemonic-index <INDEX>\n          Use the private key from the given mnemonic index.\n          \n          Used with --mnemonic-path.\n          \n          [default: 0]\n\nWallet options - keystore:\n  --keystore <PATH>\n          Use the keystore in the given folder or file\n          \n          [env: ETH_KEYSTORE=]\n\n  --account <ACCOUNT_NAME>\n          Use a keystore from the default keystores folder\n          (~/.foundry/keystores) by its filename\n          \n          [env: ETH_KEYSTORE_ACCOUNT=]\n\n  --password <PASSWORD>\n          The keystore password.\n          \n          Used with --keystore.\n\n  --password-file <PASSWORD_FILE>\n          The keystore password file path.\n          \n          Used with --keystore.\n          \n          [env: ETH_PASSWORD=]\n\nWallet options - hardware wallet:\n  -l, --ledger\n          Use a Ledger hardware wallet\n\n  -t, --trezor\n          Use a Trezor hardware wallet\n\nWallet options - remote:\n  --aws\n          Use AWS Key Management Service\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast TX Pool Inspect Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast tx-pool inspect command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx-pool/inspect.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast tx-pool inspect --help\n```\n\n----------------------------------------\n\nTITLE: Defining Verifier URL Option - Markdown\nDESCRIPTION: This snippet specifies the optional command-line argument for setting the verifier URL. It indicates the corresponding environment variable and signifies the flexibility in submitting verification requests based on user configuration.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/verifier-options.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n`--verifier-url` *url*  \n&nbsp;&nbsp;&nbsp;&nbsp;The optional verifier url for submitting the verification request.  \n&nbsp;&nbsp;&nbsp;&nbsp;Environment: `VERIFIER_URL`\n```\n\n----------------------------------------\n\nTITLE: Using JSON output flags in Foundry CLI\nDESCRIPTION: Command line flags that enable JSON-formatted output for deployment information in Foundry. The -j or --json flags can be used to print deployment data as structured JSON rather than the default text format.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/display-options.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-j\n```\n\nLANGUAGE: bash\nCODE:\n```\n--json\n```\n\n----------------------------------------\n\nTITLE: Fetching Gas Price Using Cast CLI in Bash\nDESCRIPTION: This snippet demonstrates how to invoke the 'cast gas-price' command with the option for help to display its usage instructions. It serves as an entry point for users seeking to understand the command's available functions and parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/gas-price.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast gas-price --help\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for 'cast parse-bytes32-address'\nDESCRIPTION: This snippet details the usage and options available for the 'cast parse-bytes32-address' command. It explains the arguments and flags that can be passed to the command, including thread usage, verbosity levels, and display options. No special dependencies are required to execute this command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/parse-bytes32-address.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast parse-bytes32-address [OPTIONS] [BYTES]\\n\\nArguments:\\n  [BYTES]\\n          \\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Implementation Help - Bash\nDESCRIPTION: This snippet shows how to access help documentation for the 'cast implementation' command in the Cast tool, which fetches the EIP-1967 implementation for a contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/implementation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast implementation --help\"\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Receipt with Cast CLI\nDESCRIPTION: This shell command shows how to use 'cast receipt' to get a transaction's receipt using its hash. You must have the hash stored in the $TX_HASH variable. The command will display the complete transaction receipt unless specified otherwise.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-receipt.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast receipt $TX_HASH\n```\n\n----------------------------------------\n\nTITLE: Rewinding Block Timestamp in Solidity\nDESCRIPTION: The 'rewind' function in Solidity is intended to adjust the 'block.timestamp' backwards by the number of seconds provided as an argument. It is publicly callable and changes the timestamp for the current block. Dependencies include a functioning Ethereum environment where 'block.timestamp' can be manipulated. This function primarily takes a single parameter 'time' of type 'uint256', which determines the amount of time, in seconds, to rewind. The expected effect of the function is a decrease in the 'block.timestamp'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/rewind.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction rewind(uint256 time) public;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nassertEq(block.timestamp, 3600);\nrewind(3600);\nassertEq(block.timestamp, 0);\n```\n\n----------------------------------------\n\nTITLE: Defining assumeNotPrecompile Function (Address, Chain ID)\nDESCRIPTION: This Solidity code defines another overload of the `assumeNotPrecompile` function. This version accepts both an address and a chain ID as input.  It's designed to filter precompile addresses based on the specified chain, improving the accuracy of fuzz tests in multi-chain environments by considering chain-specific precompiles.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assume-no-precompiles.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity\nfunction assumeNotPrecompile(address addr, uint256 chainid) public;\n```\n```\n\n----------------------------------------\n\nTITLE: Cast SHR Command Usage and Options\nDESCRIPTION: Detailed documentation of the cast shr command syntax, including required arguments for value and bits to shift, along with optional parameters for input/output bases, threading, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/shr.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast shr [OPTIONS] <VALUE> <BITS>\n\nArguments:\n  <VALUE>\n          The value to shift\n\n  <BITS>\n          The number of bits to shift\n\nOptions:\n      --base-in <BASE_IN>\n          The input base,\n\n      --base-out <BASE_OUT>\n          The output base,\n          \n          [default: 16]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Cast Implementation Command Usage - Text\nDESCRIPTION: This snippet outlines the usage documentation for the cast implementation command, detailing its arguments, options, and expected behaviors when invoked.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/implementation.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast implementation [OPTIONS] <WHO>\\n\\nArguments:\\n  <WHO>\\n          The address for which the implementation will be fetched\\n\\nOptions:\\n  -B, --block <BLOCK>\\n          The block height to query at.\\n          \\n          Can also be the tags earliest, finalized, safe, latest, or pending.\\n\\n      --beacon\\n          Fetch the implementation from the beacon slot.\\n          \\n          If not specified, the implementation slot is used.\\n\\n  -r, --rpc-url <URL>\\n          The RPC endpoint, default value is http://localhost:8545\\n          \\n          [env: ETH_RPC_URL=]\\n\\n      --flashbots\\n          Use the Flashbots RPC URL with fast mode\\n          (<https://rpc.flashbots.net/fast>).\\n          \\n          This shares the transaction privately with all registered builders.\\n          See:\\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\\n\\n      --jwt-secret <JWT_SECRET>\\n          JWT Secret for the RPC endpoint.\\n          \\n          The JWT secret will be used to create a JWT for a RPC. For example,\\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\\n          call:\\n          \\n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\\n          '[]'\\n          \\n          [env: ETH_RPC_JWT_SECRET=]\\n\\n      --rpc-timeout <RPC_TIMEOUT>\\n          Timeout for the RPC request in seconds.\\n          \\n          The specified timeout will be used to override the default timeout for\\n          RPC requests.\\n          \\n          Default value: 45\\n          \\n          [env: ETH_RPC_TIMEOUT=]\\n\\n      --rpc-headers <RPC_HEADERS>\\n          Specify custom headers for RPC requests\\n          \\n          [env: ETH_RPC_HEADERS=]\\n\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Proof Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast proof' command, providing details on its usage, arguments, and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/proof.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast proof --help\n```\n\n----------------------------------------\n\nTITLE: Running Tests in a Forge Project\nDESCRIPTION: This command executes the test suite within a Forge project. It runs the tests defined in the project and provides feedback on their success or failure.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nforge test\n```\n```\n\n----------------------------------------\n\nTITLE: Invoking cast decode-calldata Help Command\nDESCRIPTION: Demonstrates how to access help documentation for the cast decode-calldata command, showing available options and usage instructions\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-calldata.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast decode-calldata --help\n```\n\n----------------------------------------\n\nTITLE: Cast parse-bytes32-string Command Usage Documentation\nDESCRIPTION: Detailed documentation showing the command syntax, arguments, and all available options including threading, display options, and verbosity levels\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/parse-bytes32-string.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast parse-bytes32-string [OPTIONS] [BYTES]\n\nArguments:\n  [BYTES]\n          The string to parse\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Removing cache for multiple specific blocks\nDESCRIPTION: Demonstrates how to clean cache data for multiple specific block numbers on a chain using the --blocks flag with comma-separated values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache-clean.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nforge cache clean rinkeby --blocks 530000,9000000,9200000\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Contract Deployment Address Computation in Solidity\nDESCRIPTION: This snippet demonstrates how to use the computed contract address in a deployment scenario. It first computes the governance address using the 'computeCreateAddress' function, then creates a new instance of 'Contract' using that address. Finally, it deploys a new 'Governance' contract, ensuring that the governance address matches the computed address. The snippet illustrates internal dependencies and the flow of contract creation based on computed addresses.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/compute-create-address.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\naddress governanceAddress = computeCreateAddress(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, 1);\n\n// this contract requires a governance contract which hasn't been deployed yet\nContract contract = new Contract(governanceAddress);\n// now we deploy it\nGovernance governance = new Governance(contract);\n\n// assuming `contract` has a `governance()` accessor\nassertEq(governanceAddress, address(governance)); // [PASS]\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet from String in Solidity\nDESCRIPTION: This function signature shows how to create a Wallet using a string parameter in Solidity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/create-wallet.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createWallet(string calldata) external returns (Wallet memory);\n```\n\n----------------------------------------\n\nTITLE: Defining getCode Function Signature in Solidity\nDESCRIPTION: The function signature for getCode, which takes a string calldata parameter and returns bytes memory.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-code.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCode(string calldata) external returns (bytes memory);\n```\n\n----------------------------------------\n\nTITLE: Cast Create2 Help: Display Usage Information\nDESCRIPTION: This bash command invokes the `cast create2` command with the `--help` flag. This will print the usage information, including available options, to the console. It serves as a quick reference for understanding the command's syntax and functionality.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/create2.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast create2 --help\n```\n\n----------------------------------------\n\nTITLE: Generate Contract Address Starting with Specific Pattern using Shell\nDESCRIPTION: This command snippet demonstrates how to generate a contract address that begins with a specific hexadecimal pattern using the 'cast create2' tool. It requires specifying the pattern using the '--starts-with' option.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-create2.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast create2 --starts-with dead\n```\n\n----------------------------------------\n\nTITLE: Calling a Function with a Struct Parameter\nDESCRIPTION: Example of calling a function that expects a struct parameter, showing how structs are encoded as tuples in the function call.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-send.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncast send 0x... \"myfunction((address,uint256))\" \"(0x...,1)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying forge tree Help Information in Bash\nDESCRIPTION: Command to show the help information for the forge tree command, which displays dependency visualization options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/tree.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge tree --help\n```\n\n----------------------------------------\n\nTITLE: Setting Sender Address in Foundry EVM\nDESCRIPTION: Command-line option for specifying the address that will be executing tests.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/evm-options.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--sender address\n```\n\n----------------------------------------\n\nTITLE: Checking DAI Balance with Cast in Foundry\nDESCRIPTION: This Cast command calls the balanceOf function on the DAI token contract to check the balance of the ALICE address. It demonstrates how to interact with ERC20 tokens on the forked network.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/forking-mainnet-with-cast-anvil.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncast call $DAI \\\n  \"balanceOf(address)(uint256)\" \\\n  $ALICE\n```\n\n----------------------------------------\n\nTITLE: Generating Cast Completions Command Reference\nDESCRIPTION: Command-line usage for generating shell completions with support for multiple shells and configuration options\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/completions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast completions --help\n```\n\n----------------------------------------\n\nTITLE: Defining generic log_named_array event in Solidity\nDESCRIPTION: This code snippet illustrates the general structure for defining a `log_named_array` event that can handle arrays of varying types, such as `int256`, `uint256`, and `address`, along with a name.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-logs.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nevent log_named_array(string key, <type>[] val);\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage for Cast Wallet List Command in Text\nDESCRIPTION: This snippet outlines the usage information for the cast wallet list command, describing available options and their functionalities. Options include specifying the directory, hardware wallet types, maximum senders, and various display settings for log messages.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/list.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet list [OPTIONS]\n\nOptions:\n      --dir [<DIR>]\n          List all the accounts in the keystore directory. Default keystore\n          directory is used if no path provided\n\n  -l, --ledger\n          List accounts from a Ledger hardware wallet\n\n  -t, --trezor\n          List accounts from a Trezor hardware wallet\n\n      --aws\n          List accounts from AWS KMS\n\n      --all\n          List all configured accounts\n\n  -m, --max-senders <MAX_SENDERS>\n          Max number of addresses to display from hardware wallets\n          \n          [default: 3]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Usage Documentation for cast max-uint Command\nDESCRIPTION: This snippet provides the usage documentation for the 'cast max-uint' command, detailing the required arguments and available options. It highlights how to specify the integer type and various logging features such as verbosity and color output.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/max-uint.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage: cast max-uint [OPTIONS] [TYPE]\n\nArguments:\n  [TYPE]\n          The unsigned integer type to get the maximum value of\n          \n          [default: uint256]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Starting Hoax with Address and Ether in Solidity\nDESCRIPTION: This function initializes a prank from a specified address and distributes a specified amount of ether to it. It allows control over the ether amount provided to the prankster.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/startHoax.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startHoax(address who, uint256 give) public;\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for cast sig-event Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast sig-event' command in Foundry, which is used to generate event signatures from event strings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/sig-event.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast sig-event --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Hashing a Message - Bash\nDESCRIPTION: This snippet provides the help command usage for hashing messages using the 'cast hash-message' command. It outlines the required arguments and various options, helping users understand how to effectively use the command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/hash-message.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast hash-message --help\n```\n\n----------------------------------------\n\nTITLE: Forge CLI Coverage Help Output - Text\nDESCRIPTION: This snippet presents the output format of the Forge CLI help command, listing options for generating coverage reports with descriptions of each parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/coverage.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge coverage [OPTIONS] [PATH]\n\nOptions:\n      --report <REPORT>\n          The report type to use for coverage.\n          \n          This flag can be used multiple times.\n          \n          [default: summary]\n          [possible values: summary, lcov, debug, bytecode]\n\n      --lcov-version <LCOV_VERSION>\n          The version of the LCOV \"tracefile\" format to use.\n          \n          Format: `MAJOR[.MINOR]`.\n          \n          Main differences: - `1.x`: The original v1 format. - `2.0`: Adds\n          support for \"line end\" numbers for functions. - `2.2`: Changes the\n          format of functions.\n          \n          [default: 1]\n\n      --ir-minimum\n          Enable viaIR with minimum optimization\n          \n          This can fix most of the \"stack too deep\" errors while resulting a\n          relatively accurate source map.\n\n  -r, --report-file <PATH>\n          The path to output the report.\n          \n          If not specified, the report will be stored in the root of the\n          project.\n\n      --include-libs\n          Whether to include libraries in the coverage report\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDisplay options:\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n  -q, --quiet\n          Do not print log messages\n\n      --json\n          Format log messages as JSON\n\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n  -s, --suppress-successful-traces\n          Suppress successful test traces and show only traces for failures\n          \n          [env: FORGE_SUPPRESS_SUCCESSFUL_TRACES=]\n\n      --junit\n          Output test results as JUnit XML report\n\n  -l, --list\n          List tests instead of running them\n\n      --show-progress\n          Show test execution progress\n\n      --summary\n          Print test summary table\n\n      --detailed\n          Print detailed test summary table\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast Parse-Units Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast parse-units command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/parse-units.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast parse-units --help\n```\n\n----------------------------------------\n\nTITLE: Setting EVM Verbosity Level in Foundry\nDESCRIPTION: Command-line options for configuring the verbosity of EVM output. Supports multiple levels for detailed execution tracing.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/evm-options.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-v\n--verbosity\n```\n\n----------------------------------------\n\nTITLE: Ignoring Contracts in Gas Reports\nDESCRIPTION: This snippet demonstrates how to configure Forge to ignore specific contracts when generating gas reports.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/gas-reports.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ngas_reports_ignore = [\"Example\"]\n```\n\n----------------------------------------\n\nTITLE: Forge Remove Command Usage Details\nDESCRIPTION: Outlines the usage, options, and arguments for the 'forge remove' command in a project. Key parameters include dependencies to remove, project root path, and threads. Describes how to control verbosity and log message formats. The command is constrained by the output color and JSON format settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/remove.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge remove [OPTIONS] <DEPENDENCIES>...\n\nArguments:\n  <DEPENDENCIES>...\n          The dependencies you want to remove\n\nOptions:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -f, --force\n          Override the up-to-date check\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Hash Message Command Usage - Plaintext\nDESCRIPTION: This snippet outlines the command usage, arguments, and options available for the 'cast hash-message' command. It includes descriptions for each option, such as thread usage, log color, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/hash-message.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage: cast hash-message [OPTIONS] [MESSAGE]\n\nArguments:\n  [MESSAGE]\n          The message to hash\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Cast Namehash Help Command\nDESCRIPTION: This command displays the help information for the `cast namehash` command. It provides details on the command's usage, available options, and arguments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/namehash.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast namehash --help\n```\n\n----------------------------------------\n\nTITLE: Running Forge Tests with Path Matching in Shell\nDESCRIPTION: This snippet illustrates how to run tests in files that match a specific glob pattern using the '--match-path' option in Forge.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/tests.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/test_filters/forge-test-match-path:all}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Information using cast block in Bash\nDESCRIPTION: The snippet provides a command line example to query block information using 'cast block'. This requires no dependencies other than having the 'cast' tool installed. The command can be customized with various options such as specifying a block height or RPC URL.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/block.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast block --help\n```\n\n----------------------------------------\n\nTITLE: index-erc7201 Command Usage and Options\nDESCRIPTION: Documents the usage of the cast index-erc7201 command with its optional and positional arguments, including ID, formula ID, thread count, display settings like color and format (JSON), and verbosity level. The default formula is erc7201, and multiple levels of verbosity are available for detailed logging.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/index-erc7201.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast index-erc7201 [OPTIONS] [ID]\n\nArguments:\n  [ID]\n          The arbitrary identifier\n\nOptions:\n      --formula-id <FORMULA_ID>\n          The formula ID. Currently the only supported formula is `erc7201`\n          \n          [default: erc7201]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Asserting Unsigned Integer Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two unsigned integer values (uint256).  The function reverts if the two unsigned integers are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(uint256 left, uint256 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(uint256 left, uint256 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: AWS Key Management Service Option for Ethereum Wallets\nDESCRIPTION: Command line flag to enable AWS Key Management Service for Ethereum wallet operations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/create.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--aws\n          Use AWS Key Management Service\n```\n\n----------------------------------------\n\nTITLE: Basic startPrank Function Signatures\nDESCRIPTION: Four overloads of the startPrank function that allow setting msg.sender and tx.origin for subsequent calls until stopPrank is called.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/start-prank.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startPrank(address msgSender) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startPrank(address msgSender, bool delegateCall) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startPrank(address msgSender, address txOrigin) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startPrank(address msgSender, address txOrigin, bool delegateCall) external;\n```\n\n----------------------------------------\n\nTITLE: Forge Verify Check Synopsis\nDESCRIPTION: This snippet shows the basic syntax of the `forge verify-check` command. It takes an *id* (verification identifier) and optionally an *etherscan_key* as arguments. The *id* represents the submission GUID for Etherscan and Bloxroute, and the contract address for Sourcify.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-verify-check.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"forge verify-check\" [*options*] *id* [*etherscan_key*]\"\n```\n\n----------------------------------------\n\nTITLE: Generate Contract Address Ending with Specific Pattern using Shell\nDESCRIPTION: This command snippet shows how to generate a contract address that ends with a specific hexadecimal pattern by using the 'cast create2' tool. The pattern is specified with the '--ends-with' option.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-create2.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast create2 --ends-with beef\n```\n\n----------------------------------------\n\nTITLE: Setting Etherscan API Key in Foundry\nDESCRIPTION: Command-line option for providing an Etherscan API key, which can be directly specified or referenced from an Etherscan configuration table. The API key can also be provided through an environment variable.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/etherscan-options.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`--etherscan-api-key` *key*  \n&nbsp;&nbsp;&nbsp;&nbsp;Etherscan API key, or the key of an [Etherscan configuration table](../config/etherscan.md#etherscan).  \n&nbsp;&nbsp;&nbsp;&nbsp;Environment: `ETHERSCAN_API_KEY`\n```\n\n----------------------------------------\n\nTITLE: Getting Address from ENS Name using Cast\nDESCRIPTION: This command resolves an ENS name (vitalik.eth) to its corresponding Ethereum address. It demonstrates the basic usage of the cast resolve-name command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-resolve-name.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast resolve-name vitalik.eth\n```\n\n----------------------------------------\n\nTITLE: Setting Accounts and Balance - Shell\nDESCRIPTION: This command sets the number of accounts to 15 and their balance to 300 ETH. It is used to configure the initial state of Anvil before testing or development.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/anvil/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nanvil --accounts 15 --balance 300\n```\n\n----------------------------------------\n\nTITLE: Usage Information for Cast from-Wei Command - Text\nDESCRIPTION: This section details the usage of the 'cast from-wei' command, including arguments and options available for the conversion of wei to ETH.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/from-wei.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast from-wei [OPTIONS] [VALUE] [UNIT]\\n\\nArguments:\\n  [VALUE]\\n          The value to convert\\n\\n  [UNIT]\\n          The unit to convert from (ether, gwei, wei)\\n\\n          [default: eth]\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n\\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n\\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n\\n          Depending on the context the verbosity levels have different meanings.\\n\\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Directory Structure\nDESCRIPTION: Command to view the lib folder contents after installing dependencies\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n{{#include ../output/hello_foundry/tree:all}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast to-bytes32 Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast to-bytes32 command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-bytes32.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-bytes32 --help\n```\n\n----------------------------------------\n\nTITLE: forge bind-json Command Usage and Options\nDESCRIPTION: This snippet shows the full usage syntax and all available options for the 'forge bind-json' command, including arguments, cache options, build options, linker options, compiler options, project options, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/bind-json.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge bind-json [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          The path to write bindings to\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nCache options:\n  --force\n          Clear the cache and artifacts folder and recompile\n\nBuild options:\n  --no-cache\n          Disable the cache\n\n  --dynamic-test-linking\n          Enable dynamic test linking\n\n  --eof\n          Whether to compile contracts to EOF bytecode\n\n  --skip <SKIP>...\n          Skip building files whose names contain the given filter.\n          \n          `test` and `script` are aliases for `.t.sol` and `.s.sol`.\n\nLinker options:\n  --libraries <LIBRARIES>\n          Set pre-linked libraries\n          \n          [env: DAPP_LIBRARIES=]\n\nCompiler options:\n  --ignored-error-codes <ERROR_CODES>\n          Ignore solc warnings by error code\n\n  --deny-warnings\n          Warnings will trigger a compiler error\n\n  --no-auto-detect\n          Do not auto-detect the `solc` version\n\n  --use <SOLC_VERSION>\n          Specify the solc version, or a path to a local solc, to build with.\n          \n          Valid values are in the format `x.y.z`, `solc:x.y.z` or\n          `path/to/solc`.\n\n  --offline\n          Do not access the network.\n          \n          Missing solc versions will not be installed.\n\n  --via-ir\n          Use the Yul intermediate representation compilation pipeline\n\n  --use-literal-content\n          Changes compilation to only use literal content and not URLs\n\n  --no-metadata\n          Do not append any metadata to the bytecode.\n          \n          This is equivalent to setting `bytecode_hash` to `none` and\n          `cbor_metadata` to `false`.\n\n  --ast\n          Includes the AST as JSON in the compiler output\n\n  --evm-version <VERSION>\n          The target EVM version\n\n  --optimize [<OPTIMIZE>]\n          Activate the Solidity optimizer\n          \n          [possible values: true, false]\n\n  --optimizer-runs <RUNS>\n          The number of runs specifies roughly how often each opcode of the\n          deployed code will be executed across the life-time of the contract.\n          This means it is a trade-off parameter between code size (deploy cost)\n          and code execution cost (cost after deployment). An `optimizer_runs`\n          parameter of `1` will produce short but expensive code. In contrast, a\n          larger `optimizer_runs` parameter will produce longer but more gas\n          efficient code\n\n  --extra-output <SELECTOR>...\n          Extra output to include in the contract's artifact.\n          \n          Example keys: evm.assembly, ewasm, ir, irOptimized, metadata\n          \n          For a full description, see\n          <https://docs.soliditylang.org/en/v0.8.13/using-the-compiler.html#input-description>\n\n  --extra-output-files <SELECTOR>...\n          Extra output to write to separate files.\n          \n          Valid values: metadata, ir, irOptimized, ewasm, evm.assembly\n\nProject options:\n  -o, --out <PATH>\n          The path to the contract artifacts folder\n\n      --revert-strings <REVERT>\n          Revert string configuration.\n          \n          Possible values are \"default\", \"strip\" (remove), \"debug\"\n          (Solidity-generated revert strings) and \"verboseDebug\"\n\n      --build-info\n          Generate build info files\n\n      --build-info-path <PATH>\n          Output path to directory that build info files will be written to\n\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -C, --contracts <PATH>\n          The contracts source directory\n\n  -R, --remappings <REMAPPINGS>\n          The project's remappings\n\n      --remappings-env <ENV>\n          The project's remappings from the environment\n\n      --cache-path <PATH>\n          The path to the compiler cache\n\n      --lib-paths <PATH>\n          The path to the library folder\n\n      --hardhat\n          Use the Hardhat-style project layout.\n          \n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n          \n          [aliases: hh]\n\n      --config-path <FILE>\n          Path to the config file\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: JSON Structure Example\nDESCRIPTION: Example of a valid JSON structure that can be passed as a string to the writeJson function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/write-json.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{ \"boolean\": true, \"number\": 342, \"object\": { \"title\": \"finally json serialization\" } }\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for cast to-ascii Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast to-ascii' command, which provides details on its usage, arguments, and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-ascii.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-ascii --help\n```\n\n----------------------------------------\n\nTITLE: Fig Spec Command Usage and Options\nDESCRIPTION: This text snippet outlines the command usage, including the available options for the 'forge generate-fig-spec' command. It describes various command-line options such as '--help', '--threads', '--color', and verbosity control, which modify the command's behavior and output formatting.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/generate-fig-spec.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge generate-fig-spec [OPTIONS]\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for Hash-Zero Command in Text Format\nDESCRIPTION: This snippet lists the usage and available options for the 'cast hash-zero' command, including parameters for threads, color output, JSON formatting, quiet mode, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/hash-zero.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast hash-zero [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring Slither Analysis Settings\nDESCRIPTION: Basic Slither configuration file that excludes library files from analysis\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/static-analyzers.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter_paths\": \"lib\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ethereum Logs Using Event Signature in Foundry CLI\nDESCRIPTION: Example of using the cast logs command to retrieve Transfer event logs from a specific contract address, filtering by block range from 15537393 to latest.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-logs.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast logs --from-block 15537393 --to-block latest 'Transfer (address indexed from, address indexed to, uint256 value)' --address 0x2e8ABfE042886E4938201101A63730D04F160A82\n```\n\n----------------------------------------\n\nTITLE: Forge Selectors Help Command\nDESCRIPTION: This bash command displays the help message for the `forge selectors` tool, listing available subcommands and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/selectors.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge selectors --help\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for Foundry Testing\nDESCRIPTION: This YAML configuration sets up a Travis CI workflow for Foundry projects. It specifies the Rust language, caches dependencies, installs Foundry using a curl command, and runs tests with the forge command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/continuous-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: rust\ncache:\n  cargo: true\n  directories:\n    - $HOME/.foundry\n\ninstall:\n  - curl -L https://foundry.paradigm.xyz | bash\n  - export PATH=$PATH:$HOME/.foundry/bin\n  - foundryup -b master\n\nscript:\n  - forge test -vvv\n```\n\n----------------------------------------\n\nTITLE: Help Output for cast to-base Command\nDESCRIPTION: This snippet shows the detailed help output for the 'cast to-base' command. It includes information on command usage, arguments (VALUE and BASE), various options like input base and threading, and display options such as color settings and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-base.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-base [OPTIONS] [VALUE] [BASE]\n\nArguments:\n  [VALUE]\n          The value to convert\n\n  [BASE]\n          The output base\n\nOptions:\n  -i, --base-in <BASE_IN>\n          The input base\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Switching Between Foundry Versions\nDESCRIPTION: Commands demonstrating how to switch between different installed versions of Foundry.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/announcements.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nfoundryup --use nightly\nfoundryup --use stable\nfoundryup --use 0.3.0\n```\n\n----------------------------------------\n\nTITLE: Cast Run Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast run command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/run.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast run --help\n```\n\n----------------------------------------\n\nTITLE: Base Fee Command Usage - Text\nDESCRIPTION: This snippet outlines the usage details for the 'cast base-fee' command, including its arguments and options. Users can query the base fee either at a specific block height or at predefined tags, with various configurations such as RPC settings and response formats.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/base-fee.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast base-fee [OPTIONS] [BLOCK]\n\nArguments:\n  [BLOCK]\n          The block height to query at.\n          \n          Can also be the tags earliest, finalized, safe, latest, or pending.\n\nOptions:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Suppression in TOML\nDESCRIPTION: Example of configuring paths from which compiler warnings should be ignored during compilation. This is useful for suppressing known warnings from specific files.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\nignored_warnings_from = [\"path/to/warnings/file1.sol\", \"path/to/warnings/file2.sol\"]\n```\n\n----------------------------------------\n\nTITLE: Solidity `assertGeDecimal` Signature (int256)\nDESCRIPTION: Defines the signature for the `assertGeDecimal` function that takes two signed 256-bit integers (`left` and `right`) and a `decimals` value as input. It asserts `left` is greater than or equal to `right` after applying the decimal formatting in the revert message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGeDecimal.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n\"function assertGeDecimal(int256 left, int256 right, uint256 decimals) internal;\"\n```\n\n----------------------------------------\n\nTITLE: Testing Skip Functionality in Solidity\nDESCRIPTION: This snippet executes tests to verify that the `skip` function correctly updates the block's timestamp. It asserts that the timestamp is initially zero, calls the skip function to advance the timestamp by one hour (3600 seconds), and checks that the new timestamp is correct. The snippet is crucial for ensuring the functionality of the `skip` method in a testing environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/skip.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nassertEq(block.timestamp, 0);\nskip(3600);\nassertEq(block.timestamp, 3600);\n```\n\n----------------------------------------\n\nTITLE: Defining Assert Greater Than Decimal Function - Solidity\nDESCRIPTION: This snippet defines an internal function, `assertGtDecimal`, which asserts that the `left` value is strictly greater than the `right` value while considering decimal places. It requires three parameters: `left` and `right` as the values to compare, and `decimals` to specify the decimal precision. An optional error message can also be provided to clarify the nature of the assertion failure. The function is designed to assist in ensuring numerical correctness in smart contracts that require decimal comparisons.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGtDecimal.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertGtDecimal(uint256 left, uint256 right, uint256 decimals) internal\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertGtDecimal(int256 left, int256 right, uint256 decimals) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertGtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Anvil Command Usage Documentation\nDESCRIPTION: This snippet provides a detailed explanation of the usage of the Anvil command, including its commands and options available to users. It also outlines default values and aliases for certain parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/anvil.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: anvil [OPTIONS] [COMMAND]\n\nCommands:\n  completions        Generate shell completions script [aliases: com]\n  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]\n  help               Print this message or the help of the given subcommand(s)\n\nOptions:\n  -a, --accounts <NUM>\n          Number of dev accounts to generate and configure\n          \n          [default: 10]\n\n  -b, --block-time <SECONDS>\n          Block time in seconds for interval mining\n          \n          [aliases: blockTime]\n\n      --balance <NUM>\n          The balance of every dev account in Ether\n          \n          [default: 10000]\n\n      --config-out <FILE>\n          Writes output of `anvil` as json to user-specified file\n\n      --derivation-path <DERIVATION_PATH>\n          Sets the derivation path of the child key to be derived.\n          \n          [default: m/44'/60'/0'/0/]\n\n      --dump-state <PATH>\n          Dump the state and block environment of chain on exit to the given\n          file.\n          \n          If the value is a directory, the state will be written to\n          `<VALUE>/state.json`.\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n      --hardfork <HARDFORK>\n          The EVM hardfork to use.\n          \n          Choose the hardfork by name, e.g. `cancun`, `shanghai`, `paris`,\n          `london`, etc... [default: latest]\n\n      --init <PATH>\n          Initialize the genesis block with the given `genesis.json` file\n\n      --ipc [<PATH>]\n          Launch an ipc server at the given path or default path =\n          `/tmp/anvil.ipc`\n          \n          [aliases: ipcpath]\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\n      --load-state <PATH>\n          Initialize the chain from a previously saved state snapshot\n\n  -m, --mnemonic <MNEMONIC>\n          BIP39 mnemonic phrase used for generating accounts. Cannot be used if\n          `mnemonic_random` or `mnemonic_seed` are used\n\n      --max-persisted-states <MAX_PERSISTED_STATES>\n          Max number of states to persist on disk.\n          \n          Note that `prune_history` will overwrite `max_persisted_states` to 0.\n\n      --mixed-mining\n          [aliases: mixed-mining]\n\n      --mnemonic-random [<MNEMONIC_RANDOM>]\n          Automatically generates a BIP39 mnemonic phrase, and derives accounts\n          from it. Cannot be used with other `mnemonic` options. You can specify\n          the number of words you want in the mnemonic. [default: 12]\n\n      --mnemonic-seed-unsafe <MNEMONIC_SEED>\n          Generates a BIP39 mnemonic phrase from a given seed Cannot be used\n          with other `mnemonic` options.\n          \n          CAREFUL: This is NOT SAFE and should only be used for testing. Never\n          use the private keys generated in production.\n\n      --no-mining\n          Disable auto and interval mining, and mine on demand instead\n          \n          [aliases: no-mine]\n\n      --number <NUM>\n          The number of the genesis block\n\n      --order <ORDER>\n          How transactions are sorted in the mempool\n          \n          [default: fees]\n\n  -p, --port <NUM>\n          Port number to listen on\n          \n          [default: 8545]\n\n      --preserve-historical-states\n          Preserve historical state snapshots when dumping the state.\n          \n          This will save the in-memory states of the chain at particular block\n          hashes.\n          \n          These historical states will be loaded into the memory when\n          `--load-state` / `--state`, and aids in RPC calls beyond the block at\n          which state was dumped.\n\n      --prune-history [<PRUNE_HISTORY>]\n          Don't keep full chain history. If a number argument is specified, at\n          most this number of states is kept in memory.\n          \n          If enabled, no state will be persisted on disk, so\n          `max_persisted_states` will be 0.\n\n  -s, --state-interval <SECONDS>\n          Interval in seconds at which the state and block environment is to be\n          dumped to disk.\n          \n          See --state and --dump-state\n\n      --slots-in-an-epoch <SLOTS_IN_AN_EPOCH>\n          Slots in an epoch\n          \n          [default: 32]\n\n      --state <PATH>\n          This is an alias for both --load-state and --dump-state.\n          \n          It initializes the chain with the state and block environment stored\n          at the file, if it exists, and dumps the chain's state on exit.\n\n      --timestamp <NUM>\n          The timestamp of the genesis block\n\n      --transaction-block-keeper <TRANSACTION_BLOCK_KEEPER>\n          Number of blocks with transactions to keep in memory\n\n  -V, --version\n          Print version\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\nServer options:\n  --allow-origin <ALLOW_ORIGIN>\n          The cors `allow_origin` header\n          \n          [default: *]\n\n  --cache-path <PATH>\n          Path to the cache directory where states are stored\n\n  --host <IP_ADDR>\n          The hosts the server will listen on\n          \n          [env: ANVIL_IP_ADDR=]\n          [default: 127.0.0.1]\n\n  --no-cors\n          Disable CORS\n\n  --no-request-size-limit\n          Disable the default request body size limit. At time of writing the\n          default limit is 2MB\n\nFork config:\n      --compute-units-per-second <CUPS>\n          Sets the number of assumed available compute units per second for this\n          provider\n          \n          default value: 330\n          \n          See also --fork-url and\n          <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>\n\n  -f, --fork-url <URL>\n          Fetch state over a remote endpoint instead of starting from an empty\n          state.\n          \n          If you want to fetch state from a specific block number, add a block\n          number like `http://localhost:8545@1400000` or use the\n          `--fork-block-number` argument.\n          \n          [aliases: rpc-url]\n\n      --fork-block-number <BLOCK>\n          Fetch state from a specific block number over a remote endpoint.\n          \n          If a negative the the given value is subtracted from the `latest`\n          block number.\n          \n          See --fork-url.\n\n      --fork-chain-id <CHAIN>\n          Specify chain id to skip fetching it from remote endpoint. This\n          enables offline-start mode.\n          \n          You still must pass both `--fork-url` and `--fork-block-number`, and\n          already have your required state cached on disk, anything missing\n          locally would be fetched from the remote.\n\n      --fork-header <HEADERS>\n          Headers to use for the rpc client, e.g. \"User-Agent: test-agent\"\n          \n          See --fork-url.\n\n      --fork-retry-backoff <BACKOFF>\n          Initial retry backoff on encountering errors.\n          \n          See --fork-url.\n\n      --fork-transaction-hash <TRANSACTION>\n          Fetch state from a specific transaction hash over a remote endpoint.\n          \n          See --fork-url.\n\n      --no-rate-limit\n          Disables rate limiting for this node's provider.\n          \n          default value: false\n          \n          See also --fork-url and\n          <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>\n          \n          [aliases: no-rpc-rate-limit]\n\n      --no-storage-caching\n          Explicitly disables the use of RPC caching.\n          \n          All storage slots are read entirely from the endpoint.\n          \n          This flag overrides the project's configuration file.\n          \n          See --fork-url.\n\n      --retries <retries>\n          Number of retry requests for spurious networks (timed out requests)\n          \n          Default value 5\n\n      --timeout <timeout>\n          Timeout in ms for requests sent to remote JSON-RPC server in forking\n          mode.\n          \n          Default value 45000\n\nEnvironment config:\n  --block-base-fee-per-gas <FEE>\n          The base fee in a block\n          \n          [aliases: base-fee]\n\n  --chain-id <CHAIN_ID>\n          The chain ID\n\n  --code-size-limit <CODE_SIZE>\n          EIP-170: Contract code size limit in bytes. Useful to increase this\n          because of tests. To disable entirely, use\n          `--disable-code-size-limit`. By default, it is 0x6000 (~25kb)\n\n  --disable-block-gas-limit\n          Disable the `call.gas_limit <= block.gas_limit` constraint\n\n  --disable-code-size-limit\n          Disable EIP-170: Contract code size limit\n\n  --disable-min-priority-fee\n          Disable the enforcement of a minimum suggested priority fee\n          \n          [aliases: no-priority-fee]\n\n  --gas-limit <GAS_LIMIT>\n          The block gas limit\n\n  --gas-price <GAS_PRICE>\n          The gas price\n\nEVM options:\n  --auto-impersonate\n          Enables automatic impersonation on startup. This allows any\n```\n\n----------------------------------------\n\nTITLE: Parsing bytes32 string encoding with Cast CLI\nDESCRIPTION: This command uses the 'cast parse-bytes32-string' utility to convert a bytes32 encoded representation of the string \"hello\" back to its original string form. It demonstrates how to decode bytes32 data into human-readable text.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-parse-bytes32-string.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast parse-bytes32-string \"0x68656c6c6f000000000000000000000000000000000000000000000000000000\"\n```\n\n----------------------------------------\n\nTITLE: Using Breakpoint Cheatcode in Solidity Test Function\nDESCRIPTION: Demonstrates how to use the breakpoint cheatcode within a Solidity test function. It sets a breakpoint with the identifier 'a'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/breakpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testBreakpoint() public {\n    vm.breakpoint(\"a\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Help Flag with Cast Commands\nDESCRIPTION: Alternative way to get help information by using the --help flag directly with the Cast command. This approach works with any Cast subcommand.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-help.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast call --help\n```\n\n----------------------------------------\n\nTITLE: Signing an Ether Transaction with Ledger Hardware Wallet in Foundry Cast\nDESCRIPTION: Example of using 'cast mktx' to sign a transaction that sends 0.1 ether to Vitalik's ENS address using a Ledger hardware wallet.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-mktx.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast mktx --ledger vitalik.eth --value 0.1ether\n```\n\n----------------------------------------\n\nTITLE: Uploading ABI to Selector Database - Shell\nDESCRIPTION: This snippet demonstrates the usage of the `forge upload-selectors` command to upload the ABI for a specified contract to the OpenChain signature database. It is a single command that requires the contract name as an argument.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-upload-selectors.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nforge upload-selectors LinearVestingVault\n```\n\n----------------------------------------\n\nTITLE: Creating Access List for Transactions - Markdown\nDESCRIPTION: This code snippet provides the command-line syntax and options for creating an access list for Ethereum transactions. It describes required parameters such as destination address and block options, along with various querying options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-access-list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n``cast access-list`` [*options*] *to* *sig* [*args...*]\n```\n\n----------------------------------------\n\nTITLE: Displaying Foundry CLI Options in Plain Text\nDESCRIPTION: This snippet shows the various command-line options available in Foundry, including cache, build, linker, compiler, project, and watch options. It details flags and their descriptions for configuring Foundry's behavior.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/snapshot.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  --odyssey\n          Whether to enable Odyssey features\n\nCache options:\n  --force\n          Clear the cache and artifacts folder and recompile\n\nBuild options:\n  --no-cache\n          Disable the cache\n\n  --dynamic-test-linking\n          Enable dynamic test linking\n\n  --eof\n          Whether to compile contracts to EOF bytecode\n\n  --skip <SKIP>...\n          Skip building files whose names contain the given filter.\n          \n          `test` and `script` are aliases for `.t.sol` and `.s.sol`.\n\nLinker options:\n  --libraries <LIBRARIES>\n          Set pre-linked libraries\n          \n          [env: DAPP_LIBRARIES=]\n\nCompiler options:\n  --ignored-error-codes <ERROR_CODES>\n          Ignore solc warnings by error code\n\n  --deny-warnings\n          Warnings will trigger a compiler error\n\n  --no-auto-detect\n          Do not auto-detect the `solc` version\n\n  --use <SOLC_VERSION>\n          Specify the solc version, or a path to a local solc, to build with.\n          \n          Valid values are in the format `x.y.z`, `solc:x.y.z` or\n          `path/to/solc`.\n\n  --offline\n          Do not access the network.\n          \n          Missing solc versions will not be installed.\n\n  --via-ir\n          Use the Yul intermediate representation compilation pipeline\n\n  --use-literal-content\n          Changes compilation to only use literal content and not URLs\n\n  --no-metadata\n          Do not append any metadata to the bytecode.\n          \n          This is equivalent to setting `bytecode_hash` to `none` and\n          `cbor_metadata` to `false`.\n\n  --ast\n          Includes the AST as JSON in the compiler output\n\n  --evm-version <VERSION>\n          The target EVM version\n\n  --optimize [<OPTIMIZE>]\n          Activate the Solidity optimizer\n          \n          [possible values: true, false]\n\n  --optimizer-runs <RUNS>\n          The number of runs specifies roughly how often each opcode of the\n          deployed code will be executed across the life-time of the contract.\n          This means it is a trade-off parameter between code size (deploy cost)\n          and code execution cost (cost after deployment). An `optimizer_runs`\n          parameter of `1` will produce short but expensive code. In contrast, a\n          larger `optimizer_runs` parameter will produce longer but more gas\n          efficient code\n\n  --extra-output <SELECTOR>...\n          Extra output to include in the contract's artifact.\n          \n          Example keys: evm.assembly, ewasm, ir, irOptimized, metadata\n          \n          For a full description, see\n          <https://docs.soliditylang.org/en/v0.8.13/using-the-compiler.html#input-description>\n\n  --extra-output-files <SELECTOR>...\n          Extra output to write to separate files.\n          \n          Valid values: metadata, ir, irOptimized, ewasm, evm.assembly\n\nProject options:\n  -o, --out <PATH>\n          The path to the contract artifacts folder\n\n      --revert-strings <REVERT>\n          Revert string configuration.\n          \n          Possible values are \"default\", \"strip\" (remove), \"debug\"\n          (Solidity-generated revert strings) and \"verboseDebug\"\n\n      --build-info\n          Generate build info files\n\n      --build-info-path <PATH>\n          Output path to directory that build info files will be written to\n\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -C, --contracts <PATH>\n          The contracts source directory\n\n  -R, --remappings <REMAPPINGS>\n          The project's remappings\n\n      --remappings-env <ENV>\n          The project's remappings from the environment\n\n      --cache-path <PATH>\n          The path to the compiler cache\n\n      --lib-paths <PATH>\n          The path to the library folder\n\n      --hardhat\n          Use the Hardhat-style project layout.\n          \n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n          \n          [aliases: hh]\n\n      --config-path <FILE>\n          Path to the config file\n\nWatch options:\n  -w, --watch [<PATH>...]\n          Watch the given files or directories for changes.\n          \n          If no paths are provided, the source and test directories of the\n          project are watched.\n\n      --no-restart\n          Do not restart the command while it's still running\n\n      --run-all\n          Explicitly re-run all tests when a change is made.\n          \n          By default, only the tests of the last modified test file are\n          executed.\n\n      --watch-delay <DELAY>\n          File update debounce delay.\n          \n          During the delay, incoming change events are accumulated and only once\n          the delay has passed, is an action taken. Note that this does not mean\n          a command will be started: if --no-restart is given and a command is\n          already running, the outcome of the action will be to do nothing.\n          \n          Defaults to 50ms. Parses as decimal seconds by default, but using an\n          integer with the `ms` suffix may be more convenient.\n          \n          When using --poll mode, you'll want a larger duration, or risk\n          overloading disk I/O.\n\n      --asc\n          Sort results by gas used (ascending)\n\n      --desc\n          Sort results by gas used (descending)\n\n      --min <MIN_GAS>\n          Only include tests that used more gas that the given amount\n\n      --max <MAX_GAS>\n          Only include tests that used less gas that the given amount\n```\n\n----------------------------------------\n\nTITLE: Cast Lookup Address Usage\nDESCRIPTION: This snippet shows the usage information for the `cast lookup-address` command. It describes the available arguments and options for performing an ENS reverse lookup.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/lookup-address.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast lookup-address [OPTIONS] [WHO]\n\nArguments:\n  [WHO]\n          The account to perform the lookup for\n\nOptions:\n      --verify\n          Perform a normal lookup to verify that the address is correct\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Executing 'forge selectors find' Command in Bash\nDESCRIPTION: This snippet illustrates how to execute the 'forge selectors find' command to display its help information. It's intended for command line usage within a terminal environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/selectors/find.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge selectors find --help\"\n```\n\n----------------------------------------\n\nTITLE: Generating Storage Proof with cast-proof in Shell\nDESCRIPTION: This shell snippet demonstrates how to obtain a storage proof for a specific storage slot using the 'cast proof' command. The command requires an address, which can be an ENS name or a blockchain address, and specifies slots for which proofs are desired. Additional options allow specifying the block height for the query.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-proof.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast proof 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 0\n```\n\n----------------------------------------\n\nTITLE: Computing Contract Deployment Address in Solidity\nDESCRIPTION: This function calculates the future address where a contract will be deployed given a deployer address and a nonce. It is an internal function that returns the computed address based on the inputs, which is crucial for scenarios where predicting contract addresses is necessary before actual contract deployment. The function requires two parameters: 'deployer' which is the address of the entity deploying the contract, and 'nonce' which is a unique numerical identifier for the deployment instances.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/compute-create-address.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction computeCreateAddress(address deployer, uint256 nonce) internal pure returns (address)\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet Help Command\nDESCRIPTION: Shows the help command to display usage information for the cast wallet new functionality.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/new.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet new --help\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Fig Spec Generation Command in Text\nDESCRIPTION: This snippet outlines usage instructions for the 'cast generate-fig-spec' command, including various options available for the user. It details the parameters such as '--help', '--threads', '--color', '--json', '--quiet', and '--verbosity' for customizing the command's functionality.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/generate-fig-spec.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"Usage: cast generate-fig-spec [OPTIONS]\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n\\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n\\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n\\n          Depending on the context the verbosity levels have different meanings.\\n\\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast Wallet Vanity Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast wallet vanity command\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/vanity.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet vanity --help\n```\n\n----------------------------------------\n\nTITLE: Usage Guide for Cast Block-Number Command - Text\nDESCRIPTION: The text provides a detailed usage guide for the cast block-number command, listar arguments and options available. Key parameters include block hash or tag, RPC URL, Flashbots mode, JWT secret, RPC timeout, and verbosity levels. Users can customize RPC requests and log outputs based on their needs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/block-number.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast block-number [OPTIONS] [BLOCK]\\n\\nArguments:\\n  [BLOCK]\\n          The hash or tag to query. If not specified, the latest number is\\n          returned\\n\\nOptions:\\n  -r, --rpc-url <URL>\\n          The RPC endpoint, default value is http://localhost:8545\\n          \\n          [env: ETH_RPC_URL=]\\n\\n      --flashbots\\n          Use the Flashbots RPC URL with fast mode\\n          (<https://rpc.flashbots.net/fast>).\\n          \\n          This shares the transaction privately with all registered builders.\\n          \\n          See:\\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\\n\\n      --jwt-secret <JWT_SECRET>\\n          JWT Secret for the RPC endpoint.\\n          \\n          The JWT secret will be used to create a JWT for a RPC. For example,\\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\\n          call:\\n          \\n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\\n          \\n          [env: ETH_RPC_JWT_SECRET=]\\n\\n      --rpc-timeout <RPC_TIMEOUT>\\n          Timeout for the RPC request in seconds.\\n          \\n          The specified timeout will be used to override the default timeout for\\n          RPC requests.\\n          \\n          Default value: 45\\n          \\n          [env: ETH_RPC_TIMEOUT=]\\n\\n      --rpc-headers <RPC_HEADERS>\\n          Specify custom headers for RPC requests\\n          \\n          [env: ETH_RPC_HEADERS=]\\n\\n  -h, --help\\n          Print help (see a summary with \\'-h\\')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Combined State and External Call Gas Usage\nDESCRIPTION: Example showing gas usage capture for operations that combine external calls and state modifications.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/gas-snapshots.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SnapshotGasTest is Test {\n    uint256 public slot0;\n    Flare public flare;\n\n    function setUp() public {\n        flare = new Flare();\n    }\n\n    /// Writes to `snapshots/SnapshotGasTest.json` group with name `combinedA`.\n    function testSnapshotGas() public {\n        vm.startSnapshotGas(\"combinedA\");\n        flare.run(256);\n        slot0 = 1;\n        vm.stopSnapshotGas();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chisel Eval Command Help Output\nDESCRIPTION: Displays the complete help output for the chisel eval command, including available arguments, options, and display configuration settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/chisel/eval.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: chisel eval [OPTIONS] <COMMAND>\n\nArguments:\n  <COMMAND>\n          The command to be evaluated\n\nOptions:\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDisplay options:\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n  -q, --quiet\n          Do not print log messages\n\n      --json\n          Format log messages as JSON\n\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n```\n\n----------------------------------------\n\nTITLE: Cast TX Pool Inspect Command Usage and Options\nDESCRIPTION: Comprehensive documentation of all available options and configurations for the cast tx-pool inspect command, including RPC settings, display options, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx-pool/inspect.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast tx-pool inspect [OPTIONS]\n\nOptions:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Running 'cast keccak' Command\nDESCRIPTION: This snippet provides the command to display help for the 'cast keccak' functionality, which hashes arbitrary data using the Keccak-256 algorithm. It outlines how to access the command's help options for usage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/keccak.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast keccak --help\"\n```\n\n----------------------------------------\n\nTITLE: Using the cast block Command in Bash\nDESCRIPTION: This usage guide describes the options available with the 'cast block' command. The command parameters include specifying a block, field selection, or using a custom RPC URL. The tool's output can be customized using options for verbosity, colorization, and more.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/block.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast block [OPTIONS] [BLOCK]\n\nArguments:\n  [BLOCK]\n          The block height to query at.\n          \n          Can also be the tags earliest, finalized, safe, latest, or pending.\n\nOptions:\n  -f, --field <FIELD>\n          If specified, only get the given field of the block\n\n      --full\n          [env: CAST_FULL_BLOCK=]\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Forge Compiler Usage and Options\nDESCRIPTION: This text block describes the usage and options available for the `forge compiler` command. It details subcommands like `resolve`, aliases, and options for threads, display, and verbosity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/compiler.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge compiler [OPTIONS] <COMMAND>\n\nCommands:\n  resolve  Retrieves the resolved version(s) of the compiler within the project\n           [aliases: r]\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Cast Resolve-Name Command Usage and Options\nDESCRIPTION: This snippet provides detailed information about the usage, arguments, options, and display settings for the 'cast resolve-name' command. It includes explanations for various options such as RPC URL, Flashbots integration, JWT authentication, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/resolve-name.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast resolve-name [OPTIONS] [WHO]\n\nArguments:\n  [WHO]\n          The name to lookup\n\nOptions:\n      --verify\n          Perform a reverse lookup to verify that the name is correct\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory in Foundry\nDESCRIPTION: The -o or --out options specify the project's artifacts directory where build outputs will be stored.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/core-build-options.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-o <path>\n--out <path>\n```\n\n----------------------------------------\n\nTITLE: Including Markdown file\nDESCRIPTION: This snippet demonstrates how to include the content of `SUMMARY.md` into the current document. The `{{#include ./SUMMARY.md}}` syntax suggests a templating engine is in use, where this directive is replaced with the actual content of the specified markdown file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\"{{#include ./SUMMARY.md}}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Project Root Directory in Solidity for Foundry\nDESCRIPTION: The projectRoot function returns the root directory of the current Foundry project. It is an external function that returns a string memory representing the project's root path.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/project-root.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction projectRoot() external returns (string memory);\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Int256 in Solidity\nDESCRIPTION: This Solidity function asserts that two int256 values are equal. It supports an optional error message for customized revert explanations provided during equality mismatches.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(int256 left, int256 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(int256 left, int256 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Cleaning block explorer cache for a specific chain\nDESCRIPTION: Demonstrates how to remove only the block explorer cache data for a specific chain. This command does not work if --blocks are specified.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache-clean.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nforge cache clean rinkeby --etherscan\n```\n\n----------------------------------------\n\nTITLE: Understanding Cast Interface Usage\nDESCRIPTION: Provides a detailed description of the cast interface command's usage, arguments, and options. The primary input is the CONTRACT argument, which can be an ABI file path, a contract identifier, or an Ethereum address. Outputs could be set to a file or stdout, with additional options available for API keys, chain settings, output formatting, and verbosity of logs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/interface.md#2025-04-22_snippet_1\n\nLANGUAGE: plain text\nCODE:\n```\nUsage: cast interface [OPTIONS] <CONTRACT>\n\nArguments:\n  <CONTRACT>\n          The target contract, which can be one of: - A file path to an ABI JSON file. - A contract identifier in the form `<path>:<contractname>` or just `<contractname>`. - An Ethereum address, for which the ABI will be fetched from Etherscan\n\nOptions:\n  -n, --name <NAME>\n          The name to use for the generated interface.\n          \n          Only relevant when retrieving the ABI from a file.\n\n  -p, --pragma <VERSION>\n          Solidity pragma version\n          \n          [default: ^0.8.4]\n\n  -o, --output <PATH>\n          The path to the output file.\n          \n          If not specified, the interface will be output to stdout.\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests, including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Forge Create Command\nDESCRIPTION: Command line example for deploying Vyper contracts using forge create\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vyper.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nforge create Counter --constructor-args '1' --rpc-url $RPC_URL --private-key $PRIVATE_KEY\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Compiler Profile Settings (TOML)\nDESCRIPTION: This snippet shows how to define an additional compiler profile with specific settings for the Solidity compiler, such as enabling the new IR optimizer and specifying the evm version.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\nadditional_compiler_profiles = [ { name = \"via-ir\", via_ir = true } ]\n```\n\n----------------------------------------\n\nTITLE: Display Dependency Graph using Forge Tree\nDESCRIPTION: This snippet is intended to be replaced with the actual output of the `forge tree` command. It visualizes the project's dependency graph. The actual output would show the dependencies in a tree structure, illustrating the relationships between different parts of the project.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-tree.md#2025-04-22_snippet_0\n\nLANGUAGE: ignore\nCODE:\n```\n\n{{#include ../../output/forge_tree/forge-tree:all}}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Mainnet Block Number with Cast\nDESCRIPTION: This command uses Cast to check the latest block number on Ethereum Mainnet using a specified RPC URL.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cast/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast block-number --rpc-url https://eth.merkle.io\n```\n\n----------------------------------------\n\nTITLE: Defining getBlockNumber Function Signature in Solidity\nDESCRIPTION: Declares the function signature for getBlockNumber, which returns the current block number as a uint256.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-block-number.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getBlockNumber() external view returns (uint256 height);\n```\n\n----------------------------------------\n\nTITLE: Displaying help for cast 4byte-calldata in bash\nDESCRIPTION: This command displays the help message for the `cast 4byte-calldata` command, providing information on its usage, available options, and arguments. It is useful for understanding the tool's capabilities and how to use it effectively.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/4byte-calldata.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast 4byte-calldata --help\"\n```\n\n----------------------------------------\n\nTITLE: Generating Fig Spec Help Command\nDESCRIPTION: This snippet illustrates how to invoke the help command for generating Fig specification using 'forge'. It serves as a starting point for users unfamiliar with the 'forge generate-fig-spec' command's usage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/generate-fig-spec.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge generate-fig-spec --help\"\n```\n\n----------------------------------------\n\nTITLE: Basic writeToml Usage Example\nDESCRIPTION: Simple example showing how to write and update TOML files using writeToml, including updating nested values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/write-toml.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory jsonObj = '{ \"boolean\": true, \"number\": 342, \"myObject\": { \"title\": \"finally json serialization\" } }';\nvm.writeToml(jsonObj, \"./output/example.toml\");\n\n// replaces the value of `myObject` with a new object\nstring memory newJsonObj = '{ \"aNumber\": 123, \"aString\": \"asd\" }';\nvm.writeToml(newJsonObj, \"./output/example.toml\", \".myObject\");\n\n// replaces the value of `aString` in the new object\nvm.writeToml(\"my new string\", \"./output/example.toml\", \".myObject.aString\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast Wallet Private Key Help\nDESCRIPTION: Shows how to access the help documentation for the cast wallet private-key command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/private-key.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet private-key --help\n```\n\n----------------------------------------\n\nTITLE: Help Output for cast to-ascii Command\nDESCRIPTION: This snippet shows the detailed help output for the 'cast to-ascii' command. It includes information on command usage, arguments, options for execution control, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-ascii.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-ascii [OPTIONS] [HEXDATA]\n\nArguments:\n  [HEXDATA]\n          The hex data to convert\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Chisel List Command in Bash\nDESCRIPTION: This command shows the help information for the 'chisel list' command, which provides details on its usage and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/chisel/list.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ chisel list --help\n```\n\n----------------------------------------\n\nTITLE: Usage Documentation for cast 4byte Command in Text\nDESCRIPTION: This text snippet provides detailed usage information for the cast 4byte command. It describes the arguments and options, including specifications for the function selector, threading options, log message display preferences, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/4byte.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast 4byte [OPTIONS] [SELECTOR]\n\nArguments:\n  [SELECTOR]\n          The function selector\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Reading Single Bytes Value from Environment Variable in Solidity\nDESCRIPTION: This snippet demonstrates how to read a single bytes value from an environment variable using the `envBytes` function. It assumes the environment variable 'BYTES_VALUE' is set to a hexadecimal string.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-bytes.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nbytes memory key = \"BYTES_VALUE\";\nbytes expected = hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\";\nbytes output = cheats.envBytes(key);\nassertEq(output, expected);\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for cast to-rlp Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast to-rlp' command, which provides details on its usage, arguments, and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-rlp.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-rlp --help\n```\n\n----------------------------------------\n\nTITLE: Output Base Specification Options for Foundry-rs\nDESCRIPTION: Command-line options for specifying the desired base for output numbers in Foundry-rs. Supports binary (base 2), octal (base 8), decimal (base 10), and hexadecimal (base 16) outputs with various alias options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/base-options.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--base-out *base*\n```\n\n----------------------------------------\n\nTITLE: Chisel List Command Usage and Options\nDESCRIPTION: This snippet outlines the usage and available options for the 'chisel list' command. It includes details on thread configuration, verbosity levels, output formatting, and color settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/chisel/list.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: chisel list [OPTIONS]\n\nOptions:\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDisplay options:\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n  -q, --quiet\n          Do not print log messages\n\n      --json\n          Format log messages as JSON\n\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n```\n\n----------------------------------------\n\nTITLE: Cast from-rlp Usage and Options\nDESCRIPTION: This provides a textual representation of the tool's usage, arguments, and available options, including decoding as an integer, controlling threads, and configuring display options such as color, JSON format, verbosity, and quiet mode.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/from-rlp.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast from-rlp [OPTIONS] [VALUE]\n\nArguments:\n  [VALUE]\n          The RLP hex-encoded data\n\nOptions:\n      --as-int\n          Decode the RLP data as int\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Convert Wei to Gwei using cast to-unit\nDESCRIPTION: This example demonstrates how to convert 1000 wei to gwei using the `cast to-unit` command. It showcases the basic usage of the command with a numeric value and the target unit.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-unit.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast to-unit 1000 gwei\n```\n\n----------------------------------------\n\nTITLE: Hardware Wallet Configuration Options for Ethereum Development\nDESCRIPTION: Command line flags for specifying hardware wallet usage, supporting both Ledger and Trezor devices.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/create.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-l, --ledger\n          Use a Ledger hardware wallet\n\n  -t, --trezor\n          Use a Trezor hardware wallet\n```\n\n----------------------------------------\n\nTITLE: Defining max_assume_rejects Configuration\nDESCRIPTION: The `max_assume_rejects` configuration specifies the maximum number of rejects via `vm.assume` that can occur in a single invariant run. This integer type has a default of 65536 and can be modified using the environment variable `FOUNDRY_INVARIANT_MAX_ASSUME_REJECTS`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `max_assume_rejects`\n\n- Type: integer\n- Default: 65536\n- Environment: `FOUNDRY_INVARIANT_MAX_ASSUME_REJECTS`\n\nThe maximum number of rejects via `vm.assume` which can be encountered during a single invariant run.\n```\n\n----------------------------------------\n\nTITLE: Displaying Non-Standard Project Layout for OpenZeppelin Integration\nDESCRIPTION: This bash snippet shows the directory structure for a project using OpenZeppelin contracts with a non-standard layout. It includes the contracts, lib, script, src, and test directories.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vscode.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n.\n└── project\n    └── contracts\n        ├── lib\n        │   ├── forge-std\n        │   └── openzeppelin-contracts\n        ├── script\n        ├── src\n        └── test\n```\n\n----------------------------------------\n\nTITLE: Identifying Block Number\nDESCRIPTION: Indicates the specific block number, which can be useful for referencing particular states in the blockchain history. Each block is sequentially numbered as part of its identification.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/executor-options.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`--block-number` *block*\n```\n\n----------------------------------------\n\nTITLE: Defining dictionary_weight Configuration\nDESCRIPTION: The `dictionary_weight` setting is an integer that specifies the weight of the dictionary used in fuzz testing, constrained between 0 and 100. The default value is 80, adjustable via the environment variable `FOUNDRY_INVARIANT_DICTIONARY_WEIGHT`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `dictionary_weight`\n\n- Type: integer (between 0 and 100)\n- Default: 80\n- Environment: `FOUNDRY_INVARIANT_DICTIONARY_WEIGHT`\n\nThe weight of the dictionary. See also [fuzz.dictionary_weight](#dictionary_weight)\n```\n\n----------------------------------------\n\nTITLE: Multi-Wallet Options with Remote Signing\nDESCRIPTION: This snippet demonstrates how to configure Foundry to use remote signing services or servers. Remote signing allows for transaction signing to occur on a separate, potentially more secure machine. The snippet resides within a markdown file included in the Foundry book.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{#include multi-wallet-options-remote.md}}\n```\n\n----------------------------------------\n\nTITLE: Comparing Gas Snapshots with Forge Diff\nDESCRIPTION: Shows how to use the '--diff' option with 'forge snapshot' to compare the current gas usage against a previous snapshot. This example demonstrates comparing with a file named '.gas-snapshot2'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/gas-function-snapshots.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ forge snapshot --diff .gas-snapshot2\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nRunning 10 tests for src/test/ERC20.t.sol:ERC20Test\n[PASS] testApprove() (gas: 31162)\n[PASS] testBurn() (gas: 59875)\n[PASS] testRevertTransferFromInsufficientAllowance() (gas: 81034)\n[PASS] testRevertTransferFromInsufficientBalance() (gas: 81662)\n[PASS] testRevertTransferInsufficientBalance() (gas: 52882)\n[PASS] testInfiniteApproveTransferFrom() (gas: 90167)\n[PASS] testMetadata() (gas: 14606)\n[PASS] testMint() (gas: 53830)\n[PASS] testTransfer() (gas: 60473)\n[PASS] testTransferFrom() (gas: 84152)\nTest result: ok. 10 passed; 0 failed; finished in 2.86ms\ntestBurn() (gas: 0 (0.000%))\ntestRevertTransferFromInsufficientAllowance() (gas: 0 (0.000%))\ntestRevertTransferFromInsufficientBalance() (gas: 0 (0.000%))\ntestRevertTransferInsufficientBalance() (gas: 0 (0.000%))\ntestInfiniteApproveTransferFrom() (gas: 0 (0.000%))\ntestMetadata() (gas: 0 (0.000%))\ntestMint() (gas: 0 (0.000%))\ntestTransfer() (gas: 0 (0.000%))\ntestTransferFrom() (gas: 0 (0.000%))\ntestApprove() (gas: -8 (-0.000%))\nOverall gas change: -8 (-0.000%)\n```\n\n----------------------------------------\n\nTITLE: Defining keyExistsJson Function Signature in Solidity\nDESCRIPTION: Declares the function signature for `keyExistsJson`, which checks if a key exists in a JSON string. It takes two string parameters: the JSON string and the key to check, and returns a boolean.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/key-exists-json.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// Check if a key exists in a JSON string.\nvm.keyExistsJson(string memory json, string memory key) returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Resuming Gas Metering with resumeGasMetering() in Solidity\nDESCRIPTION: The `resumeGasMetering()` function is used to resume gas metering in Solidity. When called, it allows `gasleft()` to start decreasing again as operations are executed. The gas usage will continue from the same amount at which it was paused.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/resume-gas-metering.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction resumeGasMetering() external;\n```\n\n----------------------------------------\n\nTITLE: Including Gas Snapshots Cheatcode Documentation in Markdown\nDESCRIPTION: This snippet includes the content of a separate Markdown file that contains documentation on gas snapshots cheatcodes. It demonstrates how to reference external documentation within a Markdown file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/gas-section-snapshots.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#include ../cheatcodes/gas-snapshots.md}}\n```\n\n----------------------------------------\n\nTITLE: Starting Chisel REPL\nDESCRIPTION: Command to launch the Chisel REPL interface from the terminal.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/chisel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchisel\n```\n\n----------------------------------------\n\nTITLE: Configuring Vyper Path in Foundry\nDESCRIPTION: Configuration for setting custom Vyper compiler path in foundry.toml\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vyper.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[vyper]\npath = \"/path/to/vyper\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast to-uint256 Command\nDESCRIPTION: Shows how to access the help documentation for the cast to-uint256 command\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-uint256.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-uint256 --help\n```\n\n----------------------------------------\n\nTITLE: Understanding cast index Command Options in Text\nDESCRIPTION: This snippet provides a detailed breakdown of the 'cast index' command options, including parameters for key type, key, slot number, and optional settings like threads, color, and verbosity. Users should be familiar with CLI options and may need to install necessary dependencies.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/index.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast index [OPTIONS] <KEY_TYPE> <KEY> <SLOT_NUMBER>\n\nArguments:\n  <KEY_TYPE>\n          The mapping key type\n\n  <KEY>\n          The mapping key\n\n  <SLOT_NUMBER>\n          The storage slot of the mapping\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Forge Remappings Command Options\nDESCRIPTION: This text block outlines the various options and usages available for the 'forge remappings' command. It describes options for setting the project root path, controlling output formatting and verbosity, and configuring logging settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/remappings.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge remappings [OPTIONS]\n\nOptions:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n      --pretty\n          Pretty-print the remappings, grouping each of them by context\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n```\n\n----------------------------------------\n\nTITLE: Defining call_override Configuration\nDESCRIPTION: This snippet describes the `call_override` configuration, a boolean flag that overrides unsafe external calls during invariant tests. Its default value is false, and it is controlled through the environment variable `FOUNDRY_INVARIANT_CALL_OVERRIDE`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `call_override`\n\n- Type: boolean\n- Default: false\n- Environment: `FOUNDRY_INVARIANT_CALL_OVERRIDE`\n\nOverrides unsafe external calls when running invariant tests, useful for e.g. performing reentrancy checks.\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality for Bytes32 in Solidity\nDESCRIPTION: This set of functions assesses the equality of two bytes32 values. They are primarily used in environments where condensed data forms need to be compared and an optional error message can be added.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bytes32 left, bytes32 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq(bytes32 left, bytes32 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Executing Cast Wallet Change Password Command\nDESCRIPTION: This code snippet demonstrates the basic syntax for executing the `cast wallet change-password` command in a bash shell.  It will display the help message and available options for the command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/change-password.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast wallet change-password --help\"\n```\n\n----------------------------------------\n\nTITLE: Cast SHL Command Usage Documentation\nDESCRIPTION: Detailed help output showing all available options and arguments for the cast shl command, including base conversion options, threading configuration, and verbosity settings\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/shl.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast shl [OPTIONS] <VALUE> <BITS>\n\nArguments:\n  <VALUE>\n          The value to shift\n\n  <BITS>\n          The number of bits to shift\n\nOptions:\n      --base-in <BASE_IN>\n          The input base\n\n      --base-out <BASE_OUT>\n          The output base\n          \n          [default: 16]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Foundry CLI Display and Logging Options\nDESCRIPTION: Configuration options for controlling CLI output, color, verbosity, and logging format\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nColor options: auto, always, never\n```\n\nLANGUAGE: bash\nCODE:\n```\nJSON output formatting\n```\n\nLANGUAGE: bash\nCODE:\n```\nVerbosity levels (-v, -vv, -vvv) with increasing detail\n```\n\n----------------------------------------\n\nTITLE: Usage and Options for cast tx-pool content Command\nDESCRIPTION: This snippet provides a detailed breakdown of the usage and available options for the 'cast tx-pool content' command. It includes RPC-related options, display settings, and verbosity levels for logging.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx-pool/content.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast tx-pool content [OPTIONS]\n\nOptions:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Cast Sig: Function Selector Extraction Example\nDESCRIPTION: This example demonstrates how to use `cast sig` to get the function selector for the `transfer(address,uint256)` function.  It shows the basic syntax of the command and the expected output. The command is executed from the shell.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-sig.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"cast sig \\\"transfer(address,uint256)\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Chisel Load Command Usage Documentation\nDESCRIPTION: Detailed documentation showing the full usage syntax, arguments, and options for the chisel load command, including threading options and display configurations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/chisel/load.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: chisel load [OPTIONS] <ID>\n\nArguments:\n  <ID>\n          The ID of the session to load\n\nOptions:\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDisplay options:\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n  -q, --quiet\n          Do not print log messages\n\n      --json\n          Format log messages as JSON\n\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n```\n\n----------------------------------------\n\nTITLE: Cast Transaction Help Command\nDESCRIPTION: Basic command to display help information for the cast tx command\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast tx --help\n```\n\n----------------------------------------\n\nTITLE: Defining ParseBytes Function Signature in Solidity\nDESCRIPTION: This snippet shows the function signature for parseBytes, which takes a string calldata parameter and returns a bytes memory value. It's marked as external and pure, indicating it doesn't modify contract state and can be called externally.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-bytes.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\n```\n\n----------------------------------------\n\nTITLE: Cast Pretty-Calldata Command Usage and Options in Text Format\nDESCRIPTION: This snippet displays the full usage information for the 'cast pretty-calldata' command, including its arguments, options, and display settings. It covers offline mode, thread configuration, color options, JSON formatting, verbosity levels, and more.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/pretty-calldata.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast pretty-calldata [OPTIONS] [CALLDATA]\n\nArguments:\n  [CALLDATA]\n          The calldata\n\nOptions:\n  -o, --offline\n          Skip the <https://openchain.xyz> lookup\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Sleep Function Usage Example\nDESCRIPTION: Example showing how to use the sleep function to pause execution for 10 seconds (10,000 milliseconds).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sleep.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nvm.sleep(10_000); // Halts execution for 10 seconds\n```\n\n----------------------------------------\n\nTITLE: Forge Soldeer Init Options\nDESCRIPTION: Lists the available options for the `forge soldeer init` command. These options include `--clean` for removing `.gitmodules` and the `lib` directory, `--config-location` for specifying the config location, `-h/--help` for displaying help, `-j/--threads` for setting the number of threads, and various display options for controlling log message output.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/init.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge soldeer init [OPTIONS]\\n\\nOptions:\\n      --clean\\n          Clean the Foundry project by removing .gitmodules and the lib\\n          directory\\n\\n      --config-location <CONFIG_LOCATION>\\n          Specify the config location.\\n          \\n          This prevents prompting the user if the automatic detection can't\\n          determine the config location.\\n          \\n          [possible values: foundry, soldeer]\\n\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: readCallers Usage Examples in Solidity\nDESCRIPTION: Demonstrates various usage scenarios of readCallers function including default state, prank mode, and broadcast mode checks.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/read-callers.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nCallerMode callerMode;\naddress msgSender;\naddress txOrigin;\n\n// Example 1\n(callerMode, msgSender, txOrigin) = vm.readCallers();\nassertEq(callerMode, CallerMode.None);\nassertEq(msgSender, defaultSenderAddress);\nassertEq(txOrigin, defaultOriginAddress);\n\n// Example 2\nvm.prank(senderPrankAddress);\n(callerMode, msgSender, txOrigin) = vm.readCallers();\nassertEq(callerMode, CallerMode.Prank);\nassertEq(msgSender, senderPrankAddress);\nassertEq(txOrigin, defaultOriginAddress);\n\n// Example 3\nvm.prank(senderPrankAddress, originPrankAddress);\n(callerMode, msgSender, txOrigin) = vm.readCallers();\nassertEq(callerMode, CallerMode.Prank);\nassertEq(msgSender, senderPrankAddress);\nassertEq(txOrigin, originPrankAddress);\n\n// Example 4\nvm.broadcast(broadcastAddress);\n(callerMode, msgSender, txOrigin) = vm.readCallers();\nassertEq(callerMode, CallerMode.Broadcast);\nassertEq(msgSender, broadcastAddress);\nassertEq(txOrigin, broadcastAddress);\n```\n\n----------------------------------------\n\nTITLE: Defining the isPersistent Cheatcode Function Signature in Solidity\nDESCRIPTION: Function signature for the `isPersistent` cheatcode which takes an address parameter and returns a boolean indicating persistence status.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/is-persistent.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isPersistent(address) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Recording Logs Function Signature in Solidity\nDESCRIPTION: Function signature for the recordLogs cheatcode that initiates event logging in the VM.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/record-logs.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction recordLogs() external;\n```\n\n----------------------------------------\n\nTITLE: Multi-Wallet Options with Hardware Wallets\nDESCRIPTION: This snippet demonstrates configuring Foundry to interact with multiple hardware wallets. Hardware wallets offer the highest level of security by storing private keys offline. The snippet probably shows how to specify the necessary configurations to communicate with the connected hardware wallets. The snippet resides within a markdown file included in the Foundry book.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{#include multi-wallet-options-hardware.md}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Wallet Address for Transaction Signing\nDESCRIPTION: Allows specification of a remote account address for signing transactions using CLI flags or environment variable. Provides flexibility in selecting the signing account on a remote RPC endpoint.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/wallet-options-remote.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-f address\n```\n\nLANGUAGE: shell\nCODE:\n```\n--from address\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies via Command Line with Forge Soldeer (Bash)\nDESCRIPTION: This Bash command initializes the installation process for dependencies using the Forge Soldeer tool. The command accepts options such as specifying a URL for the dependency zip file, a Git repository link, and control flags for various installation behaviors.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge soldeer install --help\n```\n\n----------------------------------------\n\nTITLE: Defining selectFork Function Signature in Solidity\nDESCRIPTION: The signature of the `selectFork` function, which takes a fork identifier as a parameter and sets the corresponding forked state as active.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/select-fork.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction selectFork(uint256 forkId) external;\n```\n\n----------------------------------------\n\nTITLE: Enum Conversion Error Signature\nDESCRIPTION: This snippet presents the signature of the `enumConversionError` in Solidity. It shows that the error is a part of the standard error set, `stdError`, and is specifically named `enumConversionError`. This signature is used to identify and handle this particular error in Solidity contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/enumConversionError.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n\"stdError.enumConversionError\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Wallet Options with Keystore Files\nDESCRIPTION: This snippet demonstrates how to configure Foundry to use multiple wallets stored in keystore files. Keystore files provide a more secure way to store private keys compared to raw keys, as they are encrypted. The snippet resides within a markdown file included in the Foundry book.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{#include multi-wallet-options-keystore.md}}\n```\n\n----------------------------------------\n\nTITLE: Gas Price Command Options in Text\nDESCRIPTION: This snippet outlines the various options available for the 'cast gas-price' command, including RPC URL, Flashbots, JWT secret, RPC timeout, custom headers, logging preferences, and verbosity levels. The details assist users in configuring the command according to their needs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/gas-price.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast gas-price [OPTIONS]\n\nOptions:\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring Allow Paths for solc\nDESCRIPTION: In this TOML snippet, adding 'node_modules' to allow_paths in 'foundry.toml' grants solc access to that directory, enabling it to read symlinked files during the build process.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/faq.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# This translates to `solc --allow-paths ../node_modules`\nallow_paths = [\"../node_modules\"]\n```\n\n----------------------------------------\n\nTITLE: Cast To Fixed Point Command Help Output\nDESCRIPTION: Detailed help documentation showing the command syntax, arguments, and available options including threading, display formatting, and verbosity controls.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-fixed-point.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-fixed-point [OPTIONS] [DECIMALS] [VALUE]\n\nArguments:\n  [DECIMALS]\n          The number of decimals to use\n\n  [VALUE]\n          The value to convert\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Deploying with ETH Value in Solidity\nDESCRIPTION: This overload of the deployCodeTo function allows for the addition of a uint256 parameter to include ETH value during construction. It is useful for scenarios where contracts require initial ETH funding during deployment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/deployCodeTo.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual;\n```\n\n----------------------------------------\n\nTITLE: Vyper Import Example\nDESCRIPTION: Example of importing external Vyper library\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vyper.md#2025-04-22_snippet_1\n\nLANGUAGE: vyper\nCODE:\n```\nfrom snekmate.utils import eip712_domain_separator\n```\n\n----------------------------------------\n\nTITLE: Displaying Constructor Args Help Command\nDESCRIPTION: Command to show help information for retrieving constructor arguments of a smart contract\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/constructor-args.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast constructor-args --help\n```\n\n----------------------------------------\n\nTITLE: Forge Selectors Usage Information\nDESCRIPTION: This text block outlines the usage of `forge selectors` command. It lists available subcommands and options for the tool including collision checking, uploading, listing, finding and caching. It also details verbosity and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/selectors.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge selectors [OPTIONS] <COMMAND>\n\nCommands:\n  collision  Check for selector collisions between contracts [aliases: co]\n  upload     Upload selectors to registry [aliases: up]\n  list       List selectors from current workspace [aliases: ls]\n  find       Find if a selector is present in the project [aliases: f]\n  cache      Cache project selectors (enables trace with local contracts\n             functions and events) [aliases: c]\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Anvil Generate Fig Spec Options\nDESCRIPTION: This text snippet outlines the usage and options available for the 'anvil generate-fig-spec' command. Key options include thread management, log color settings, JSON formatting, and verbosity levels, which alter the verbosity of log messages depending on their context.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/anvil/generate-fig-spec.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: anvil generate-fig-spec [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Forge Soldeer Uninstall Command Options and Usage\nDESCRIPTION: This snippet provides the usage information, arguments, and options available for the 'forge soldeer uninstall' command. It describes various flags such as '--help', '--threads', and verbosity levels that can be used to customize the behavior of the command. The '--json' flag is also available for formatting log messages. The text primarily serves as documentation to guide users in correctly executing the command with the desired configurations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/uninstall.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge soldeer uninstall [OPTIONS] <DEPENDENCY>\n\nArguments:\n  <DEPENDENCY>\n          The dependency name. Specifying a version is not necessary\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\nFor more information, read the README.md\n```\n\n----------------------------------------\n\nTITLE: Specifying Model Checker Contracts (TOML)\nDESCRIPTION: This snippet specifies which contracts the model checker will analyze. It demonstrates the format for defining contracts associated with their respective source files.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default.model_checker]\ncontracts = { \"src/MyContracts.sol\" = [\"ContractA\", \"ContractB\"] }\n```\n\n----------------------------------------\n\nTITLE: Cast to-utf8 Command Usage\nDESCRIPTION: Detailed help output showing all available options and arguments for the cast to-utf8 command, including threading options, display customization, and verbosity levels\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-utf8.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-utf8 [OPTIONS] [HEXDATA]\n\nArguments:\n  [HEXDATA]\n          The hex data to convert\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for cast tx-pool Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast tx-pool' tool, which is used to inspect the transaction pool of a node.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx-pool.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast tx-pool --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast parse-bytes32-string Help Command\nDESCRIPTION: Shows how to access the help documentation for the parse-bytes32-string command using the --help flag\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/parse-bytes32-string.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast parse-bytes32-string --help\n```\n\n----------------------------------------\n\nTITLE: Using Forge Init Command in Text Output Format\nDESCRIPTION: The text output describes the usage of the `forge init` command, including its arguments and options. It specifies the default behavior, possible templates and branches, as well as flags for installation without dependencies, shallow cloning, verbosity, and color settings. This text serves as help documentation for the command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/init.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge init [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          The root directory of the new project\n          \n          [default: .]\n\nOptions:\n  -t, --template <TEMPLATE>\n          The template to start from\n\n  -b, --branch <BRANCH>\n          Branch argument that can only be used with template option. If not\n          specified, the default branch is used\n\n      --offline\n          Do not install dependencies from the network\n          \n          [aliases: no-deps]\n\n      --force\n          Create the project even if the specified root directory is not empty\n\n      --vscode\n          Create a .vscode/settings.json file with Solidity settings, and\n          generate a remappings.txt file\n\n      --shallow\n          Perform shallow clones instead of deep ones.\n          \n          Improves performance and reduces disk usage, but prevents switching\n          branches or tags.\n\n      --no-git\n          Install without adding the dependency as a submodule\n\n      --commit\n          Create a commit after installing the dependencies\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Importing Keystore from Mnemonic with Index - Shell\nDESCRIPTION: This snippet shows how to create a keystore from a mnemonic phrase while specifying a mnemonic index using the 'cast wallet import' command. It uses the same mnemonic as before and sets the mnemonic index to 1 for account 'ALICE'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-import.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncast wallet import ALICE --mnemonic \"test test test test test test test test test test test test\" --mnemonic-index 1\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet Public Key Help Command\nDESCRIPTION: This command displays the help information for the `cast wallet public-key` command, providing a summary of its options and usage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/public-key.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet public-key --help\n```\n\n----------------------------------------\n\nTITLE: Inline Configuration for Invariant Test Failure Persistence in Solidity\nDESCRIPTION: This inline configuration in a Solidity file sets a custom directory path for persisting invariant test failures.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/replay-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\n/// forge-config: default.invariant.failure-persist-dir = /tests/dir\n```\n\n----------------------------------------\n\nTITLE: Deriving Private Key from Mnemonic in Solidity\nDESCRIPTION: This function derives a private key from a given mnemonic and index. It uses the derivation path m/44'/60'/0'/0/{index}.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/derive-key.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deriveKey(\n  string calldata mnemonic,\n  uint32 index\n) external returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Displaying Chisel View Help Command\nDESCRIPTION: Shows how to access the help documentation for the chisel view command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/chisel/view.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ chisel view --help\n```\n\n----------------------------------------\n\nTITLE: Single Private Key Specification in Foundry CLI\nDESCRIPTION: Command line option to directly provide a single raw private key for wallet operations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-raw.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--private-key raw_private_key\n```\n\n----------------------------------------\n\nTITLE: Defining Base Fee in Wei\nDESCRIPTION: Specifies the base fee parameter for a block in wei, which is utilized to determine transaction costs. This option is crucial for adjusting the economic model of transaction processing based on network demand.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/executor-options.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`--base-fee <FEE>`\n```\n\n----------------------------------------\n\nTITLE: Usage and Options for cast etherscan-source\nDESCRIPTION: This section describes the usage, arguments, and options available for the `cast etherscan-source` command. It details how to specify the contract address, API key, chain ID, output directory, and other parameters for retrieving contract source code from Etherscan.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/etherscan-source.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast etherscan-source [OPTIONS] <ADDRESS>\n\nArguments:\n  <ADDRESS>\n          The contract's address\n\nOptions:\n  -f, --flatten\n          Whether to flatten the source code\n\n  -d <DIRECTORY>\n          The output directory/file to expand source tree into\n\n  -e, --etherscan-api-key <KEY>\n          The Etherscan (or equivalent) API key\n          \n          [env: ETHERSCAN_API_KEY=]\n\n  -c, --chain <CHAIN>\n          The chain name or EIP-155 chain ID\n          \n          [env: CHAIN=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Simple TOML Key-Value Pairs in Solidity\nDESCRIPTION: This example demonstrates parsing a simple TOML string with key-value pairs under a section. It extracts the keys 'a' and 'b' from the 'key' section.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-toml-keys.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory toml = '[key]\\n a = 1\\n b = 2';\nstring[] memory keys = vm.parseTomlKeys(toml, \".key\"); // [\"a\", \"b\"]\n```\n\n----------------------------------------\n\nTITLE: Clearing Mocked Calls Function Signature in Solidity\nDESCRIPTION: This code snippet shows the function signature for clearMockedCalls. It is an external function that takes no parameters and returns no value. Its purpose is to clear all previously mocked calls in the testing environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/clear-mocked-calls.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction clearMockedCalls() external;\n```\n\n----------------------------------------\n\nTITLE: Creating Remappings File in Shell\nDESCRIPTION: This shell command creates a 'remappings.txt' file from the automatically inferred remappings of the project. It assumes 'forge' is installed and properly configured in the environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-remappings.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge remappings > remappings.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Flashbots RPC Endpoint in Foundry\nDESCRIPTION: Command-line option to use the Flashbots RPC URL for executing transactions through the Flashbots network. This allows for private transaction submission to avoid front-running and MEV.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/rpc-options.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`--flashbots`  \n&nbsp;&nbsp;&nbsp;&nbsp;Use the Flashbots RPC URL (<https://rpc.flashbots.net>).\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction with Raw Hex Data\nDESCRIPTION: Example of sending a transaction with raw hexadecimal data in the input field of the transaction object.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-send.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncast send 0x... 0x68656c6c6f20776f726c64\n```\n\n----------------------------------------\n\nTITLE: Defining include_push_bytes Configuration\nDESCRIPTION: The `include_push_bytes` configuration is a boolean flag that determines whether push byte values should be included in the tests. Its default is true, and it can be set via the environment variable `FOUNDRY_FUZZ_INCLUDE_PUSH_BYTES`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `include_push_bytes`\n\n- Type: boolean\n- Default: true\n- Environment: `FOUNDRY_FUZZ_INCLUDE_PUSH_BYTES`\n\nThe flag indicating whether to include push bytes values. See also [fuzz.include_push_bytes](#include_push_bytes)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for cast to-hexdata Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast to-hexdata' command, providing details on its usage, arguments, and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-hexdata.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-hexdata --help\n```\n\n----------------------------------------\n\nTITLE: Concatenating Hex Strings Using Cast CLI - Shell Script\nDESCRIPTION: This snippet demonstrates the usage of the 'cast concat-hex' command-line utility to concatenate multiple hex string arguments. The required input consists of one or more hex strings prefixed with '0x'. The output will be a single concatenated hex string. Ensure that you have the 'cast' command available in your environment to execute this snippet.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-concat-hex.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"cast concat-hex 0xa 0xb 0xc\"\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry Tools Autocompletion for fish\nDESCRIPTION: Commands to generate and install autocompletion scripts for forge, cast, and anvil in the fish shell.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/shell-autocompletion.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p $HOME/.config/fish/completions\nforge completions fish > $HOME/.config/fish/completions/forge.fish\ncast completions fish > $HOME/.config/fish/completions/cast.fish\nanvil completions fish > $HOME/.config/fish/completions/anvil.fish\nsource $HOME/.config/fish/config.fish\n```\n\n----------------------------------------\n\nTITLE: Enabling Never Mining Mode in Anvil - Shell Script\nDESCRIPTION: This command disables both auto-mining and interval mining in Anvil, allowing mining only on demand.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/anvil/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Enables never mining mode\nanvil --no-mining\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Forge Verify-Bytecode Command in Bash\nDESCRIPTION: Shows how to access the help documentation for the forge verify-bytecode command using the --help flag.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/verify-bytecode.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge verify-bytecode --help\n```\n\n----------------------------------------\n\nTITLE: Emitting log_array event in Solidity\nDESCRIPTION: This example demonstrates how to emit a `log_array` event with an array named `data`.  It assumes the array `data` is already defined in storage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/std-logs.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// Assuming storage\n// uint256[] data = [10, 20, 30, 40, 50]; \n\nemit log_array(data);\n```\n\n----------------------------------------\n\nTITLE: Usage Documentation of 'forge selectors find'\nDESCRIPTION: This snippet outlines the usage details and options for the 'forge selectors find' command. It includes arguments, project options, and display options relevant for configuring the command execution.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/selectors/find.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"Usage: forge selectors find [OPTIONS] <SELECTOR>\\n\\nArguments:\\n  <SELECTOR>\\n          The selector to search for (with or without 0x prefix)\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nProject options:\\n      --root <PATH>\\n          The project's root path.\\n          \\n          By default root of the Git repository, if in one, or the current\\n          working directory.\\n\\n  -C, --contracts <PATH>\\n          The contracts source directory\\n\\n  -R, --remappings <REMAPPINGS>\\n          The project's remappings\\n\\n      --remappings-env <ENV>\\n          The project's remappings from the environment\\n\\n      --cache-path <PATH>\\n          The path to the compiler cache\\n\\n      --lib-paths <PATH>\\n          The path to the library folder\\n\\n      --hardhat\\n          Use the Hardhat-style project layout.\\n          \\n          This is the same as using: `--contracts contracts --lib-paths\\n          node_modules`.\\n          \\n          [aliases: hh]\\n\\n      --config-path <FILE>\\n          Path to the config file\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Usage Information for Forge Soldeer Install Command (Text)\nDESCRIPTION: This text provides detailed usage information for the 'forge soldeer install' command, including arguments and options available during the installation of dependencies.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/install.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge soldeer install [OPTIONS] [DEPENDENCY~VERSION]\n\nArguments:\n  [DEPENDENCY~VERSION]\n          The dependency name and version, separated by a tilde. The version is\n          always required.\n          \n          If not present, this command will install all dependencies which are\n          missing.\n\nOptions:\n      --url <ZIP_URL>\n          The URL to the dependency zip file.\n          \n          Example: https://my-domain/dep.zip\n\n      --git <GIT_URL>\n          The URL to the dependency repository.\n          \n          Example: git@github.com:foo/bar.git\n\n      --rev <REV>\n          A Git commit hash\n\n      --tag <TAG>\n          A Git tag\n\n      --branch <BRANCH>\n          A Git branch\n\n  -g, --regenerate-remappings\n          If set, this command will delete the existing remappings and re-create\n          them\n\n  -d, --recursive-deps\n          If set, this command will install dependencies recursively (via git\n          submodules or via soldeer)\n\n      --clean\n          Perform a clean install by re-installing all dependencies\n\n      --config-location <CONFIG_LOCATION>\n          Specify the config location without prompting.\n          \n          This prevents prompting the user if the automatic detection can't\n          determine the config location.\n          \n          [possible values: foundry, soldeer]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\nFor more information, read the README.md\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Wallet Decrypt-Keystore Command in Bash\nDESCRIPTION: This command displays the help information for the 'cast wallet decrypt-keystore' command, showing its usage, arguments, and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/decrypt-keystore.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet decrypt-keystore --help\n```\n\n----------------------------------------\n\nTITLE: Forge Cache Command Usage and Options\nDESCRIPTION: Detailed documentation of the forge cache ls command syntax, including all available arguments and options for controlling output format, verbosity, and execution parameters\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/cache/ls.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge cache ls [OPTIONS] [CHAINS]...\n\nArguments:\n  [CHAINS]...\n          The chains to list the cache for.\n          \n          Can also be \"all\" to list all chains.\n          \n          [env: CHAIN=]\n          [default: all]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Help Output for Cast Wallet Remove Command\nDESCRIPTION: This snippet shows the detailed help output for the 'cast wallet remove' command, including usage, options, and display settings. It provides information on required and optional parameters, as well as various configuration options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/remove.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet remove --name <NAME>\n\nOptions:\n      --name <NAME>\n          The alias (or name) of the wallet to remove\n\n      --dir <DIR>\n          Optionally provide the keystore directory if not provided. default\n          directory will be used (~/.foundry/keystores)\n\n      --unsafe-password <PASSWORD>\n          Password for the JSON keystore in cleartext This is unsafe, we\n          recommend using the default hidden password prompt\n          \n          [env: CAST_UNSAFE_PASSWORD=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Send Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast send' command, providing an overview of its usage, options, and arguments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/send.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast send --help\n```\n\n----------------------------------------\n\nTITLE: Command-Line Options for Maximum Integer Value\nDESCRIPTION: Provides a detailed description of the arguments and options available for the 'cast max-int' command including the types of inputs the command accepts and their expected behaviors. This includes default values and potential aliases for the options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/max-int.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast max-int [OPTIONS] [TYPE]\n\nArguments:\n  [TYPE]\n          The integer type to get the maximum value of\n          \n          [default: int256]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Running Aderyn Analysis\nDESCRIPTION: Command for running Aderyn analysis on a Solidity project\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/static-analyzers.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd path/to/solidity/project/root\n$ aderyn\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Receipt Command in Bash\nDESCRIPTION: This snippet shows how to display the help information for the 'cast receipt' command using the --help flag.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/receipt.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast receipt --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Compiler Options in Markdown\nDESCRIPTION: This snippet shows the available compiler options for the Foundry CLI, including error handling, solc version specification, and optimization settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/test.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nCompiler options:\n  --ignored-error-codes <ERROR_CODES>\n          Ignore solc warnings by error code\n\n  --deny-warnings\n          Warnings will trigger a compiler error\n\n  --no-auto-detect\n          Do not auto-detect the `solc` version\n\n  --use <SOLC_VERSION>\n          Specify the solc version, or a path to a local solc, to build with.\n          \n          Valid values are in the format `x.y.z`, `solc:x.y.z` or\n          `path/to/solc`.\n\n  --offline\n          Do not access the network.\n          \n          Missing solc versions will not be installed.\n\n  --via-ir\n          Use the Yul intermediate representation compilation pipeline\n\n  --use-literal-content\n          Changes compilation to only use literal content and not URLs\n\n  --no-metadata\n          Do not append any metadata to the bytecode.\n          \n          This is equivalent to setting `bytecode_hash` to `none` and\n          `cbor_metadata` to `false`.\n\n  --ast\n          Includes the AST as JSON in the compiler output\n\n  --evm-version <VERSION>\n          The target EVM version\n\n  --optimize [<OPTIMIZE>]\n          Activate the Solidity optimizer\n          \n          [possible values: true, false]\n\n  --optimizer-runs <RUNS>\n          The number of runs specifies roughly how often each opcode of the\n          deployed code will be executed across the life-time of the contract.\n          This means it is a trade-off parameter between code size (deploy cost)\n          and code execution cost (cost after deployment). An `optimizer_runs`\n          parameter of `1` will produce short but expensive code. In contrast, a\n          larger `optimizer_runs` parameter will produce longer but more gas\n          efficient code\n\n  --extra-output <SELECTOR>...\n          Extra output to include in the contract's artifact.\n          \n          Example keys: evm.assembly, ewasm, ir, irOptimized, metadata\n          \n          For a full description, see\n          <https://docs.soliditylang.org/en/v0.8.13/using-the-compiler.html#input-description>\n\n  --extra-output-files <SELECTOR>...\n          Extra output to write to separate files.\n          \n          Valid values: metadata, ir, irOptimized, ewasm, evm.assembly\n```\n\n----------------------------------------\n\nTITLE: Defining startBroadcast Function Signatures in Solidity\nDESCRIPTION: These are the three overloaded function signatures for the startBroadcast function in Foundry. They allow starting a broadcast session with different parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/start-broadcast.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startBroadcast() external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startBroadcast(address who) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startBroadcast(uint256 privateKey) external;\n```\n\n----------------------------------------\n\nTITLE: Understanding Cast Nonce Command Options\nDESCRIPTION: This text block describes the available options for the 'cast nonce' command. Key options include specifying the account address, selecting a block height, and setting an RPC URL. Additional parameters allow for setting JWT secrets, modifying RPC request timeouts, and customizing logging and verbosity settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/nonce.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast nonce [OPTIONS] <WHO>\n\nArguments:\n  <WHO>\n          The address to get the nonce for\n\nOptions:\n  -B, --block <BLOCK>\n          The block height to query at.\n          \n          Can also be the tags earliest, finalized, safe, latest, or pending.\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Gas Limit\nDESCRIPTION: Sets the gas limit for transactions within a block, ensuring that sufficient resources are allocated for transaction execution without overwhelming the network.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/executor-options.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`--gas-limit` *gas_limit*\n```\n\n----------------------------------------\n\nTITLE: Cast Chain ID Help\nDESCRIPTION: Displays the help message for the `cast chain-id` command, outlining available options and their descriptions. This command is used to fetch the Ethereum chain ID.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/chain-id.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast chain-id --help\n```\n\n----------------------------------------\n\nTITLE: Using cast from-wei Command in Bash\nDESCRIPTION: Example syntax for using the 'cast from-wei' command to convert wei into an ETH amount. The command accepts a value parameter and an optional unit parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-from-wei.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast from-wei [*options*] *value* [*unit*]\n```\n\n----------------------------------------\n\nTITLE: Migrated External Contract Expect Revert Test\nDESCRIPTION: Updated version of the expect revert test using an external contract to properly handle revert expectations\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/v1.0-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract CustomContract {\n    error CustomError();\n\n    function revertWithCustomError() external {\n        revert CustomError();\n    }\n}\n\ncontract ContractTest is Test {\n    CustomContract internal c;\n\n    function setUp() public {\n        c = new CustomContract();\n    }\n\n    function testExample() public {\n        vm.expectRevert();\n        c.revertWithCustomError();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: forge tree Command Help Output\nDESCRIPTION: Complete help output for the forge tree command, showing all available options including tree visualization settings, project configuration options, and display preferences.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/tree.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge tree [OPTIONS]\n\nOptions:\n      --no-dedupe\n          Do not de-duplicate (repeats all shared dependencies)\n\n      --charset <CHARSET>\n          Character set to use in output.\n          \n          [possible values: utf8, ascii]\n          \n          [default: utf8]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nProject options:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -C, --contracts <PATH>\n          The contracts source directory\n\n  -R, --remappings <REMAPPINGS>\n          The project's remappings\n\n      --remappings-env <ENV>\n          The project's remappings from the environment\n\n      --cache-path <PATH>\n          The path to the compiler cache\n\n      --lib-paths <PATH>\n          The path to the library folder\n\n      --hardhat\n          Use the Hardhat-style project layout.\n          \n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n          \n          [aliases: hh]\n\n      --config-path <FILE>\n          Path to the config file\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Using Keystore Paths\nDESCRIPTION: This command-line option allows users to specify folders or files containing keystore files for wallet management. It utilizes the environment variable `ETH_KEYSTORE` to locate these paths.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-keystore.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`--keystores` *paths*  \n&nbsp;&nbsp;&nbsp;&nbsp;Use the keystores in the given folders or files.  \n&nbsp;&nbsp;&nbsp;&nbsp;Environment: `ETH_KEYSTORE`\n```\n\n----------------------------------------\n\nTITLE: Get bytecode of WETH contract using cast code\nDESCRIPTION: This example demonstrates how to use the `cast code` command to retrieve the bytecode of the WETH contract. The command takes the contract address as an argument.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-code.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"cast code 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Balance in Foundry EVM\nDESCRIPTION: Command-line option for setting the initial balance of deployed contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/evm-options.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--initial-balance balance\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast Help Information\nDESCRIPTION: Shows how to display the help information for the 'cast' command, which lists all available subcommands and their descriptions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast --help\n```\n\n----------------------------------------\n\nTITLE: Performing a Left Bit Shift with Cast\nDESCRIPTION: This snippet demonstrates how to perform a left bit shift of the number 61 by 3 positions using the 'cast shl' command. The command uses base 10 input, specified by the --base-in option, which is necessary for correctly interpreting the numeric input.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-shl.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast shl --base-in 10 61 3\n```\n\n----------------------------------------\n\nTITLE: Asserting Boolean Array Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two boolean arrays. The function reverts if the two boolean arrays are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bool[] memory left, bool[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bool[] memory left, bool[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Asserting Approximate Equality with Int256 and Custom Error in Solidity\nDESCRIPTION: This variant allows for an assertion of approximate equality between two int256 values with the added capability of providing a custom error message. This is useful for debugging and clarity when assertions fail.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqRelDecimal.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Forge Soldeer Update Help Command\nDESCRIPTION: This snippet shows how to display the help message for the `forge soldeer update` command. This will print all available options and a brief description of each.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/update.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge soldeer update --help\"\n```\n\n----------------------------------------\n\nTITLE: Block Query Options - Markdown\nDESCRIPTION: This snippet details the options available for query parameters related to block height. Users can specify a block number or utilize predefined tags to indicate the target block height.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-access-list.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`-B` *block*  \n`--block` *block*  \n&nbsp;&nbsp;&nbsp;&nbsp;The block height you want to query at.  \n&nbsp;&nbsp;&nbsp;&nbsp;Can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`.\n```\n\n----------------------------------------\n\nTITLE: Chisel View Command Usage Documentation\nDESCRIPTION: Comprehensive documentation of the chisel view command syntax, arguments, and options including threading configuration, verbosity levels, and display formatting options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/chisel/view.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: chisel view [OPTIONS] <ID>\n\nArguments:\n  <ID>\n          The ID of the session to load\n\nOptions:\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDisplay options:\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n  -q, --quiet\n          Do not print log messages\n\n      --json\n          Format log messages as JSON\n\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n```\n\n----------------------------------------\n\nTITLE: Rolling Specified Fork to Block Number in Solidity\nDESCRIPTION: This function is similar to rollFork(uint256 blockNumber) but allows specifying a particular fork using its ID. It updates the block.number for the specified fork.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/roll-fork.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rollFork(uint256 forkId, uint256 blockNumber) external;\n```\n\n----------------------------------------\n\nTITLE: Cast Completions Usage and Options Documentation\nDESCRIPTION: Detailed documentation of command-line arguments, shell compatibility, threading, display, and verbosity options for the cast completions utility\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/completions.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast completions [OPTIONS] <SHELL>\\n\\nArguments:\\n  <SHELL>\\n          [possible values: bash, elvish, fish, powershell, zsh]\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Minimum Integer Command - Text\nDESCRIPTION: This text snippet provides detailed usage instructions for the 'cast min-int' command, explaining the expected arguments, options available, and their functionalities. It delineates how users can customize the output format and verbosity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/min-int.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast min-int [OPTIONS] [TYPE]\\n\\nArguments:\\n  [TYPE]\\n          The integer type to get the minimum value of\\n          \\n          [default: int256]\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Fuzz Test Fixtures in Solidity\nDESCRIPTION: Examples of defining fuzz test fixtures using storage arrays and functions in Solidity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/fuzz-testing.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nuint32[] public fixtureAmount = [1, 5, 555];\n\nfunction fixtureOwner() public returns (address[] memory)\n```\n\n----------------------------------------\n\nTITLE: Using cast to Compute Mapping Storage Slot in Bash\nDESCRIPTION: This snippet demonstrates the help command for the 'cast index' utility in bash, used to calculate the storage slot given a key type, key, and slot number in the mapping. This requires familiarity with mapping in smart contracts and command-line operations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast index --help\n```\n\n----------------------------------------\n\nTITLE: Usage Information for Cast Mktx Command - Text\nDESCRIPTION: This snippet provides detailed usage information for the `cast mktx` command, including commands, arguments, and options. It outlines how the command can be used to deploy contracts and manage transaction parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/mktx.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast mktx [OPTIONS] [TO] [SIG] [ARGS]... [COMMAND]\\n\\nCommands:\\n  --create  Use to deploy raw contract bytecode\\n  help      Print this message or the help of the given subcommand(s)\\n\\nArguments:\\n  [TO]\\n          The destination of the transaction.\\n\\n          If not provided, you must use `cast mktx --create`.\\n\\n  [SIG]\\n          The signature of the function to call\\n\\n  [ARGS]...\\n          The arguments of the function to call\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          [aliases: jobs]\\n\\nTransaction options:\\n  --gas-limit <GAS_LIMIT>\\n          Gas limit for the transaction\\n          [env: ETH_GAS_LIMIT=]\\n\\n  --gas-price <PRICE>\\n          Gas price for legacy transactions, or max fee per gas for EIP1559\\n          transactions, either specified in wei, or as a string with a unit\\n          type.\\n          Examples: 1ether, 10gwei, 0.01ether\\n          [env: ETH_GAS_PRICE=]\\n\\n  --priority-gas-price <PRICE>\\n          Max priority fee per gas for EIP1559 transactions\\n          [env: ETH_PRIORITY_GAS_PRICE=]\\n\\n  --value <VALUE>\\n          Ether to send in the transaction, either specified in wei, or as a\\n          string with a unit type.\\n          Examples: 1ether, 10gwei, 0.01ether\\n\\n  --nonce <NONCE>\\n          Nonce for the transaction\\n\\n  --legacy\\n          Send a legacy transaction instead of an EIP1559 transaction.\\n          This is automatically enabled for common networks without EIP1559.\\n\\n  --blob\\n          Send a EIP-4844 blob transaction\\n\\n  --blob-gas-price <BLOB_PRICE>\\n          Gas price for EIP-4844 blob transaction\\n          [env: ETH_BLOB_GAS_PRICE=]\\n\\n  --auth <AUTH>\\n          EIP-7702 authorization list.\\n          Can be either a hex-encoded signed authorization or an address.\\n\\n  --access-list [<ACCESS_LIST>]\\n          EIP-2930 access list.\\n          Accepts either a JSON-encoded access list or an empty value to create\\n          the access list via an RPC call to `eth_createAccessList`. To retrieve\\n          only the access list portion, use the `cast access-list` command.\\n\\n  --path <BLOB_DATA_PATH>\\n          The path of blob data to be sent\\n\\nEthereum options:\\n  -r, --rpc-url <URL>\\n          The RPC endpoint, default value is http://localhost:8545\\n          [env: ETH_RPC_URL=]\\n\\n      --flashbots\\n          Use the Flashbots RPC URL with fast mode\\n          (<https://rpc.flashbots.net/fast>).\\n          This shares the transaction privately with all registered builders.\\n          See:\\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\\n\\n      --jwt-secret <JWT_SECRET>\\n          JWT Secret for the RPC endpoint.\\n          The JWT secret will be used to create a JWT for a RPC. For example,\\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\\n          call:\\n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\\n          [env: ETH_RPC_JWT_SECRET=]\\n\\n      --rpc-timeout <RPC_TIMEOUT>\\n          Timeout for the RPC request in seconds.\\n          The specified timeout will be used to override the default timeout for\\n          RPC requests.\\n          Default value: 45\\n          [env: ETH_RPC_TIMEOUT=]\\n\\n      --rpc-headers <RPC_HEADERS>\\n          Specify custom headers for RPC requests\\n          [env: ETH_RPC_HEADERS=]\\n\\n  -e, --etherscan-api-key <KEY>\\n          The Etherscan (or equivalent) API key\\n          [env: ETHERSCAN_API_KEY=]\\n\\n  -c, --chain <CHAIN>\\n          The chain name or EIP-155 chain ID\\n          [env: CHAIN=]\\n\\nWallet options - raw:\\n  -f, --from <ADDRESS>\\n          The sender account\\n          [env: ETH_FROM=]\\n\\n  -i, --interactive\\n          Open an interactive prompt to enter your private key\\n\\n      --private-key <RAW_PRIVATE_KEY>\\n          Use the provided private key\\n\\n      --mnemonic <MNEMONIC>\\n          Use the mnemonic phrase of mnemonic file at the specified path\\n\\n      --mnemonic-passphrase <PASSPHRASE>\\n          Use a BIP39 passphrase for the mnemonic\\n\\n      --mnemonic-derivation-path <PATH>\\n          The wallet derivation path.\\n          Works with both --mnemonic-path and hardware wallets.\\n\\n      --mnemonic-index <INDEX>\\n          Use the private key from the given mnemonic index.\\n          Used with --mnemonic-path.\\n          [default: 0]\\n\\n      --raw-unsigned\\n          Generate a raw RLP-encoded unsigned transaction.\\n          Relaxes the wallet requirement.\\n\\nWallet options - keystore:\\n  --keystore <PATH>\\n          Use the keystore in the given folder or file\\n          [env: ETH_KEYSTORE=]\\n\\n  --account <ACCOUNT_NAME>\\n          Use a keystore from the default keystores folder\\n          (~/.foundry/keystores) by its filename\\n          [env: ETH_KEYSTORE_ACCOUNT=]\\n\\n  --password <PASSWORD>\\n          The keystore password.\\n          Used with --keystore.\\n\\n  --password-file <PASSWORD_FILE>\\n          The keystore password file path.\\n          Used with --keystore.\\n          [env: ETH_PASSWORD=]\\n\\nWallet options - hardware wallet:\\n  -l, --ledger\\n          Use a Ledger hardware wallet\\n\\n  -t, --trezor\\n          Use a Trezor hardware wallet\\n\\nWallet options - remote:\\n  --aws\\n          Use AWS Key Management Service\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          Depending on the context the verbosity levels have different meanings.\\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Cast Source Help Command\nDESCRIPTION: Command to display help information for the cast source tool.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast source --help\n```\n\n----------------------------------------\n\nTITLE: Cast Create2 Usage: Command Options\nDESCRIPTION: This text block provides a detailed listing of the options available for the `cast create2` command. It includes explanations of parameters like `--starts-with`, `--ends-with`, `--matching`, `--deployer`, `--salt`, `--init-code`, `--init-code-hash`, `--threads`, `--caller`, `--seed`, `--no-random`, display options, and verbosity levels, allowing users to fine-tune the contract address generation process.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/create2.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast create2 [OPTIONS]\n\nOptions:\n  -s, --starts-with <HEX>\n          Prefix for the contract address\n\n  -e, --ends-with <HEX>\n          Suffix for the contract address\n\n  -m, --matching <HEX>\n          Sequence that the address has to match\n\n  -c, --case-sensitive\n          Case sensitive matching\n\n  -d, --deployer <ADDRESS>\n          Address of the contract deployer\n          \n          [default: 0x4e59b44847b379578588920ca78fbf26c0b4956c]\n\n      --salt <HEX>\n          Salt to be used for the contract deployment. This option separate from\n          the default salt mining with filters\n\n  -i, --init-code <HEX>\n          Init code of the contract to be deployed\n\n      --init-code-hash <HASH>\n          Init code hash of the contract to be deployed\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\n      --caller <ADDRESS>\n          Address of the caller. Used for the first 20 bytes of the salt\n\n      --seed <HEX>\n          The random number generator's seed, used to initialize the salt\n\n      --no-random\n          Don't initialize the salt with a random value, and instead use the\n          default value of 0\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n```\n\n----------------------------------------\n\nTITLE: Reading Address Array from Environment Variable\nDESCRIPTION: Function signature for reading multiple addresses from an environment variable. Takes a key and delimiter parameter to split the string into an array of addresses.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-address.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction envAddress(string calldata key, string calldata delimiter) external returns (address[] memory values);\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage for 'cast from-fixed-point'\nDESCRIPTION: This command line tool accepts arguments for the number of decimals and the value to convert, and includes options for adjusting thread usage, log coloring, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/from-fixed-point.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast from-fixed-point [OPTIONS] [DECIMALS] [VALUE]\n\nArguments:\n  [DECIMALS]\n          The number of decimals to use\n\n  [VALUE]\n          The value to convert\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n```\n\n----------------------------------------\n\nTITLE: Enabling FFI Cheatcode in Foundry EVM\nDESCRIPTION: Command-line option for enabling the FFI (Foreign Function Interface) cheatcode, which allows calling external programs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/evm-options.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n--ffi\n```\n\n----------------------------------------\n\nTITLE: Cast mktx --create Help Command\nDESCRIPTION: This snippet shows how to get help information for the `cast mktx --create` command. It uses the `--help` flag to display the command's usage, available options, and argument descriptions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/mktx/--create.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast mktx --create --help\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Artifacts and Cache in a Foundry Project\nDESCRIPTION: This example demonstrates how to use the forge clean command to remove build artifacts and cache directories in a Foundry project.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-clean.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge clean\n```\n\n----------------------------------------\n\nTITLE: Granting Cheatcode Access in Foundry (Solidity)\nDESCRIPTION: The `allowCheatcodes` function explicitly grants cheatcode access to a given address in forking mode. It takes an address as a parameter and is primarily used for complex test setups when forking a network.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/allow-cheatcodes.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction allowCheatcodes(address) external;\n```\n\n----------------------------------------\n\nTITLE: Importing Console from Forge Std\nDESCRIPTION: This Solidity code snippet imports the console functionality from the Forge Std library, enabling the use of console.log for debugging within a Solidity project.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nimport {console} from \"forge-std/console.sol\";\n```\n\n----------------------------------------\n\nTITLE: Verifying a Contract with JSON Standard Input on Etherscan Using Shell\nDESCRIPTION: This command verifies a smart contract on Etherscan using JSON standard input and waits for the verification result.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-verify-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge verify-contract <address> SomeContract --watch\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum 256-bit Integer\nDESCRIPTION: Command-line command to output the minimum i256 integer value. This utility is part of the cast toolset and provides a quick way to access the lower bound of a 256-bit signed integer range.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-min-int.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast min-int\n```\n\n----------------------------------------\n\nTITLE: Retrieving WETH Contract Source Code using Cast Etherscan-Source\nDESCRIPTION: This command fetches the source code of the WETH (Wrapped Ether) contract from Etherscan by providing its address. The result is displayed in stdout without any additional formatting.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-etherscan-source.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast etherscan-source 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n```\n\n----------------------------------------\n\nTITLE: Defining parseUint Function Signature in Solidity\nDESCRIPTION: Declares the parseUint function that takes a string parameter and returns a uint256 value. It is an external pure function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-uint.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\n```\n\n----------------------------------------\n\nTITLE: Reading Single Int256 Environment Variable\nDESCRIPTION: Function signature for reading a single int256 value from an environment variable. Takes a key string parameter and returns an int256 value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-int.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction envInt(string calldata key) external returns (int256 value);\n```\n\n----------------------------------------\n\nTITLE: Signature of getDeployedCode in Solidity\nDESCRIPTION: Function signature for the getDeployedCode cheatcode, which takes a string calldata parameter and returns bytes memory.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-deployed-code.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getDeployedCode(string calldata) external returns (bytes memory);\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry Tools Autocompletion for zsh (Linux)\nDESCRIPTION: Commands to generate and install autocompletion scripts for forge, cast, and anvil in zsh on Linux systems.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/shell-autocompletion.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge completions zsh | sudo tee /usr/local/share/zsh/site-functions/_forge\ncast completions zsh | sudo tee /usr/local/share/zsh/site-functions/_cast\nanvil completions zsh | sudo tee /usr/local/share/zsh/site-functions/_anvil\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Field from Transaction Receipt\nDESCRIPTION: This example demonstrates how to retrieve a specific field, such as the block number, from a transaction’s receipt using 'cast receipt'. Ensure the field name is provided after the transaction hash. This command assumes the transaction hash is stored in $TX_HASH.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-receipt.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast receipt $TX_HASH blockNumber\n```\n\n----------------------------------------\n\nTITLE: Solidity `assertGeDecimal` Signature (uint256, err)\nDESCRIPTION: Defines the signature for the `assertGeDecimal` function that takes two unsigned 256-bit integers (`left` and `right`), a `decimals` value, and an error message string as input. It asserts `left` is greater than or equal to `right`, formatting with `decimals` and including the custom error message on revert.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertGeDecimal.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n\"function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast Publish Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast publish command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/publish.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast publish --help\n```\n\n----------------------------------------\n\nTITLE: Cast to-bytes32 Synopsis\nDESCRIPTION: Shows the synopsis, demonstrating the command-line syntax for `cast to-bytes32` with options and a bytes input. This indicates how to call the command with optional flags and the hexadecimal data to be padded. No programming language is associated with this snippet, it's a command-line instruction.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-bytes32.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"cast to-bytes32\" [*options*] *bytes*\n```\n\n----------------------------------------\n\nTITLE: Forge Bind Command Usage and Options\nDESCRIPTION: Detailed usage instructions and available options for the forge bind command, including binding path configurations, crate settings, compiler options, and project configurations\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/bind.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge bind [OPTIONS]\n\nOptions:\n  -b, --bindings-path <PATH>\n          Path to where the contract artifacts are stored\n\n      --select <SELECT>\n          Create bindings only for contracts whose names match the specified\n          filter(s)\n\n      --select-all\n          Explicitly generate bindings for all contracts\n          \n          By default all contracts ending with `Test` or `Script` are excluded.\n\n      --crate-name <NAME>\n          The name of the Rust crate to generate.\n          \n          This should be a valid crates.io crate name, however, this is not\n          currently validated by this command.\n          \n          [default: foundry-contracts]\n\n      --crate-version <VERSION>\n          The version of the Rust crate to generate.\n          \n          This should be a standard semver version string, however, this is not\n          currently validated by this command.\n          \n          [default: 0.1.0]\n\n      --crate-description <DESCRIPTION>\n          The description of the Rust crate to generate.\n          \n          This will be added to the package.description field in Cargo.toml.\n          \n          [default: ]\n\n      --crate-license <LICENSE>\n          The license of the Rust crate to generate.\n          \n          This will be added to the package.license field in Cargo.toml.\n          \n          [default: ]\n\n      --module\n          Generate the bindings as a module instead of a crate\n\n      --overwrite\n          Overwrite existing generated bindings.\n          \n          By default, the command will check that the bindings are correct, and\n          then exit. If --overwrite is passed, it will instead delete and\n          overwrite the bindings.\n\n      --single-file\n          Generate bindings as a single file\n\n      --skip-cargo-toml\n          Skip Cargo.toml consistency checks\n\n      --skip-build\n          Skips running forge build before generating binding\n\n      --skip-extra-derives\n          Don't add any additional derives to generated bindings\n\n      --alloy-version <ALLOY_VERSION>\n          Specify the `alloy` version on Crates\n\n      --alloy-rev <ALLOY_REV>\n          Specify the `alloy` revision on GitHub\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nCache options:\n  --force\n          Clear the cache and artifacts folder and recompile\n\nBuild options:\n  --no-cache\n          Disable the cache\n\n  --dynamic-test-linking\n          Enable dynamic test linking\n\n  --eof\n          Whether to compile contracts to EOF bytecode\n\n  --skip <SKIP>...\n          Skip building files whose names contain the given filter.\n          \n          `test` and `script` are aliases for `.t.sol` and `.s.sol`.\n\nLinker options:\n  --libraries <LIBRARIES>\n          Set pre-linked libraries\n          \n          [env: DAPP_LIBRARIES=]\n\nCompiler options:\n  --ignored-error-codes <ERROR_CODES>\n          Ignore solc warnings by error code\n\n  --deny-warnings\n          Warnings will trigger a compiler error\n\n  --no-auto-detect\n          Do not auto-detect the `solc` version\n\n  --use <SOLC_VERSION>\n          Specify the solc version, or a path to a local solc, to build with.\n          \n          Valid values are in the format `x.y.z`, `solc:x.y.z` or\n          `path/to/solc`.\n\n  --offline\n          Do not access the network.\n          \n          Missing solc versions will not be installed.\n\n  --via-ir\n          Use the Yul intermediate representation compilation pipeline\n\n  --use-literal-content\n          Changes compilation to only use literal content and not URLs\n\n  --no-metadata\n          Do not append any metadata to the bytecode.\n          \n          This is equivalent to setting `bytecode_hash` to `none` and\n          `cbor_metadata` to `false`.\n\n  --ast\n          Includes the AST as JSON in the compiler output\n\n  --evm-version <VERSION>\n          The target EVM version\n\n  --optimize [<OPTIMIZE>]\n          Activate the Solidity optimizer\n          \n          [possible values: true, false]\n\n  --optimizer-runs <RUNS>\n          The number of runs specifies roughly how often each opcode of the\n          deployed code will be executed across the life-time of the contract.\n          This means it is a trade-off parameter between code size (deploy cost)\n          and code execution cost (cost after deployment). An `optimizer_runs`\n          parameter of `1` will produce short but expensive code. In contrast, a\n          larger `optimizer_runs` parameter will produce longer but more gas\n          efficient code\n\n  --extra-output <SELECTOR>...\n          Extra output to include in the contract's artifact.\n          \n          Example keys: evm.assembly, ewasm, ir, irOptimized, metadata\n          \n          For a full description, see\n          <https://docs.soliditylang.org/en/v0.8.13/using-the-compiler.html#input-description>\n\n  --extra-output-files <SELECTOR>...\n          Extra output to write to separate files.\n          \n          Valid values: metadata, ir, irOptimized, ewasm, evm.assembly\n\nProject options:\n  -o, --out <PATH>\n          The path to the contract artifacts folder\n\n      --revert-strings <REVERT>\n          Revert string configuration.\n          \n          Possible values are \"default\", \"strip\" (remove), \"debug\"\n          (Solidity-generated revert strings) and \"verboseDebug\"\n\n      --build-info\n          Generate build info files\n\n      --build-info-path <PATH>\n          Output path to directory that build info files will be written to\n\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -C, --contracts <PATH>\n          The contracts source directory\n\n  -R, --remappings <REMAPPINGS>\n          The project's remappings\n\n      --remappings-env <ENV>\n          The project's remappings from the environment\n\n      --cache-path <PATH>\n          The path to the compiler cache\n\n      --lib-paths <PATH>\n          The path to the library folder\n\n      --hardhat\n          Use the Hardhat-style project layout.\n          \n          This is the same as using: `--contracts contracts --lib-paths\n          node_modules`.\n          \n          [aliases: hh]\n\n      --config-path <FILE>\n          Path to the config file\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Using isPersistent to Check Default Status of Accounts in Solidity Tests\nDESCRIPTION: Example showing how to use the `isPersistent` cheatcode to verify that both the message sender and the test contract are persistent by default.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/is-persistent.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// By default the `sender` and the test contract itself are persistent\nassert(cheats.isPersistent(msg.sender));\nassert(cheats.isPersistent(address(this)));\n```\n\n----------------------------------------\n\nTITLE: Cast Decode ABI Help\nDESCRIPTION: This snippet shows how to access the help information for the `cast decode-abi` command. Running this command will display the available options and arguments for the tool.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-abi.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast decode-abi --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Wallet New Mnemonic Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast wallet new-mnemonic' command, which is used to generate a random BIP39 mnemonic phrase.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/new-mnemonic.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet new-mnemonic --help\n```\n\n----------------------------------------\n\nTITLE: Updating Rust Compiler\nDESCRIPTION: Updates the Rust compiler to the latest stable version, which is required for building Foundry from source.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrustup update stable\n```\n\n----------------------------------------\n\nTITLE: Forge Soldeer Push Usage and Options\nDESCRIPTION: This text block details the usage, arguments, and options for the `forge soldeer push` command. It describes how to specify the dependency and version, the optional path to the package, and various options for controlling the publishing process, such as dry runs, skipping warnings, and setting the number of threads.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/push.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge soldeer push [OPTIONS] <DEPENDENCY>~<VERSION> [PATH]\\n\\nArguments:\\n  <DEPENDENCY>~<VERSION>\\n          The dependency name and version, separated by a tilde.\\n          \\n          This should always be used when you want to push a dependency to the\\n          central repository: `<https://soldeer.xyz>`.\\n\\n  [PATH]\\n          Use this if the package you want to push is not in the current\\n          directory.\\n          \\n          Example: `soldeer push mypkg~0.1.0 /path/to/dep`.\\n\\nOptions:\\n  -d, --dry-run\\n          If set, does not publish the package but generates a zip file that can\\n          be inspected\\n\\n      --skip-warnings\\n          Use this if you want to skip the warnings that can be triggered when\\n          trying to push dotfiles like .env\\n\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\\n\\nFor more information, read the README.md\"\n```\n\n----------------------------------------\n\nTITLE: Setting Rust Toolchain\nDESCRIPTION: This snippet configures the Rust toolchain to use the latest stable version. It updates the toolchain and is essential for ensuring compatibility with Foundry projects.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrustup default stable\nrustup update stable\n```\n\n----------------------------------------\n\nTITLE: Executing Cast Interface Help Command\nDESCRIPTION: Demonstrates how to access the help menu for the cast interface command to understand its usage. No dependencies are required. This command outputs a summary of the command's usage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/interface.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast interface --help\n```\n\n----------------------------------------\n\nTITLE: Cast mktx --create Usage and Options\nDESCRIPTION: This text block describes the usage and options available for the `cast mktx --create` command. It outlines the required arguments (CODE, SIG, ARGS), and various options for controlling threading, color output, JSON formatting, and verbosity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/mktx/--create.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast mktx --create [OPTIONS] <CODE> [SIG] [ARGS]...\\n\\nArguments:\\n  <CODE>\\n          The initialization bytecode of the contract to deploy\\n\n  [SIG]\\n          The signature of the constructor\\n\n  [ARGS]...\\n          The constructor arguments\\n\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\n      --json\\n          Format log messages as JSON\\n\n  -q, --quiet\\n          Do not print log messages\\n\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Active Prank in Solidity for Foundry Testing\nDESCRIPTION: The stopPrank function is used to end an active prank initiated by startPrank. It resets msg.sender and tx.origin to their values before startPrank was called. This function is external and takes no parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/stop-prank.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction stopPrank() external;\n```\n\n----------------------------------------\n\nTITLE: Cast from-bin Options\nDESCRIPTION: This text block describes the available options for the `cast from-bin` command, including options for setting the number of threads, display colors, output format (JSON), verbosity level, and quiet mode. It details the function of each option.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/from-bin.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast from-bin [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Parsing TOML Array of Tables in Solidity\nDESCRIPTION: This example demonstrates parsing keys from a TOML array of tables. It extracts the keys 'a' and 'b' from the first item in the 'root_key' array.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-toml-keys.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory toml = '[[root_key]]\\n a = 1\\n b = 2';\nstring[] memory keys = vm.parseTomlKeys(toml, \".root_key.0\"); // [\"a\", \"b\"]\n```\n\n----------------------------------------\n\nTITLE: Cast Storage Root Command Usage and Options in Plain Text\nDESCRIPTION: This snippet provides detailed information about the 'cast storage-root' command, including its usage, arguments, options, and display settings. It explains how to specify the account address, storage slots, and various RPC-related options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/storage-root.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast storage-root [OPTIONS] <WHO> [SLOTS]...\n\nArguments:\n  <WHO>\n          The address to get the storage root for\n\n  [SLOTS]...\n          The storage slot numbers (hex or decimal)\n\nOptions:\n  -B, --block <BLOCK>\n          The block height to query at.\n          \n          Can also be the tags earliest, finalized, safe, latest, or pending.\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Converting Number to Hex-Encoded uint256 in Foundry Cast\nDESCRIPTION: Command-line interface for transforming numeric input into a standardized 256-bit unsigned integer hexadecimal format using Foundry's cast utility\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-uint256.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast to-uint256 [*options*] *value*\n```\n\n----------------------------------------\n\nTITLE: Cast Checksum Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast to-check-sum-address command\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-check-sum-address.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-check-sum-address --help\n```\n\n----------------------------------------\n\nTITLE: Soldeer CLI Command Reference\nDESCRIPTION: Comprehensive documentation of the Soldeer dependency manager CLI, including all available commands, options, and display settings. Details the purpose of each command and configuration option available in the tool.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: Native Solidity Package Manager, `run forge soldeer [COMMAND] --help` for more details\n\nCommands:\n  init       Convert a Foundry project to use Soldeer\n  install    Install a dependency\n  update     Update dependencies by reading the config file\n  login      Log into the central repository to push packages\n  push       Push a dependency to the repository\n  uninstall  Uninstall a dependency\n  version    Display the version of Soldeer\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules Command\nDESCRIPTION: Command to ensure all submodules are properly initialized and updated in the repository.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/output/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Expanding WETH Contract Source into Directory using Cast Etherscan-Source\nDESCRIPTION: This command retrieves the WETH contract source code and expands it into a directory named 'weth' rather than displaying in stdout. This is useful for larger contracts with multiple files.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-etherscan-source.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast etherscan-source -d weth 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n```\n\n----------------------------------------\n\nTITLE: Executing forge bind-json help command in Bash\nDESCRIPTION: This command displays the help information for the 'forge bind-json' command, showing its usage and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/bind-json.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge bind-json --help\n```\n\n----------------------------------------\n\nTITLE: readCallers Function Signature in Solidity\nDESCRIPTION: Function signature for readCallers that returns the current CallerMode and address information.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/read-callers.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readCallers() \nexternal \nreturns (CallerMode callerMode, address msgSender, address txOrigin);\n```\n\n----------------------------------------\n\nTITLE: Displaying Foundry Project Structure\nDESCRIPTION: Shows the directory structure of a newly created Foundry project using the 'tree' command. This illustrates the default project layout.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/first-steps.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd hello_foundry\n{{#include ../output/hello_foundry/tree:all}}\n```\n\n----------------------------------------\n\nTITLE: Example Solidity Import Before Remapping\nDESCRIPTION: An example of a Solidity import statement before remapping is applied. This imports the Context contract from OpenZeppelin's utilities.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n```\n\n----------------------------------------\n\nTITLE: Specifying EVM Version for Compilation in Foundry\nDESCRIPTION: This configuration option allows restricting compilation to a specific EVM version. It conflicts with the 'min_evm_version' and 'max_evm_version' settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n##### `compilation_restriction.evm_version`\n\n- Type: string\n\nRestrict compilation for specific [evm_version](#evm_version) setting. Conflicts with `min_evm_version` and `max_evm_version` settings.\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry-Toolchain in GitHub Actions\nDESCRIPTION: YAML configuration for using a specific version of Foundry in GitHub Actions workflows.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/announcements.md#2025-04-22_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\n- name: Install Foundry\n  uses: foundry-rs/foundry-toolchain@v1\n  with:\n    version: nightly\n```\n\n----------------------------------------\n\nTITLE: Help Output for cast string-decode Command\nDESCRIPTION: This snippet shows the detailed help output for the 'cast string-decode' command. It includes usage syntax, arguments, options for execution control, and display options such as color output and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/string-decode.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast string-decode [OPTIONS] <DATA>\n\nArguments:\n  <DATA>\n          The ABI-encoded string\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests.\n```\n\n----------------------------------------\n\nTITLE: Identifying Transaction Origin Address\nDESCRIPTION: Defines the origin address for a transaction, helping to trace the sources of transactions on the blockchain. This is important for auditability and tracking transaction flows across the network.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/executor-options.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n`--tx-origin` *address*\n```\n\n----------------------------------------\n\nTITLE: Updated Console.sol Usage\nDESCRIPTION: Migration of console.log calls to use explicit type casting and new signatures\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/v1.0-migration.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nconsole.log(\"testMisc\", uint256(42));\nconsole.log(uint256(0));\nconsole.logUint(0);\n```\n\n----------------------------------------\n\nTITLE: Using 'cast from-fixed-point' Command Bash\nDESCRIPTION: The command 'cast from-fixed-point' is used to convert a fixed point number into an integer on the command line using Bash. It includes options for setting the number of decimals, managing threads, and controlling log verbosity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/from-fixed-point.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast from-fixed-point --help\n```\n\n----------------------------------------\n\nTITLE: Forge Compiler Resolve Command Options\nDESCRIPTION: This snippet outlines the command-line options available for 'forge compiler resolve'. It details options for specifying root paths, thread count for parallel execution, verbosity levels, color output, and JSON formatting. It also explains the purpose of each option.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/compiler/resolve.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage: forge compiler resolve [OPTIONS]\n\nOptions:\n  -r, --root <PATH>\n          The root directory\n\n  -s, --skip <REGEX>\n          Skip files that match the given regex pattern\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Defining parseAddress Function Signature in Solidity\nDESCRIPTION: This snippet shows the function signature for parseAddress, which takes a string as input and returns an address. It's marked as external and pure, indicating it doesn't modify contract state and can be called externally.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-address.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\n```\n\n----------------------------------------\n\nTITLE: Mnemonic Path Specification in Foundry CLI\nDESCRIPTION: Command line option to specify the file path(s) to mnemonic phrase files. Used to derive private keys based on the provided mnemonic.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-raw.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--mnemonic-paths paths\n```\n\n----------------------------------------\n\nTITLE: Forge Cache Clean Command Usage Guide\nDESCRIPTION: Detailed command-line usage guide showing all available options and arguments for the forge cache clean command, including chain selection, block specification, threading options, and display configurations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/cache/clean.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge cache clean [OPTIONS] [CHAINS]...\n\nArguments:\n  [CHAINS]...\n          The chains to clean the cache for.\n          \n          Can also be \"all\" to clean all chains.\n          \n          [env: CHAIN=]\n          [default: all]\n\nOptions:\n  -b, --blocks <BLOCKS>...\n          The blocks to clean the cache for\n\n      --etherscan\n          Whether to clean the Etherscan cache\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Forge Selectors Upload Help Command\nDESCRIPTION: This bash command displays the help message for the `forge selectors upload` command. It shows available options and arguments for uploading contract selectors.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/selectors/upload.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge selectors upload --help\n```\n\n----------------------------------------\n\nTITLE: Forge Completions Usage: Command Arguments and Options\nDESCRIPTION: This text snippet provides the usage information and available options for the `forge completions` command. It details the required `SHELL` argument, possible values, and options for customizing the command's behavior, such as specifying the number of threads, color output, verbosity, and JSON formatting.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/completions.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge completions [OPTIONS] <SHELL>\n\nArguments:\n  <SHELL>\n          [possible values: bash, elvish, fish, powershell, zsh]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Custom Remapping Configuration in remappings.txt\nDESCRIPTION: Example of custom dependency remapping in remappings.txt file\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/dependencies.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n@solady-utils/=lib/solady/src/utils/\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet Command Usage and Options (Text)\nDESCRIPTION: This snippet provides a detailed overview of the 'cast wallet' command, including its subcommands, options, and usage. It covers various wallet operations such as creating new keypairs, signing messages, and managing keystores.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet [OPTIONS] <COMMAND>\n\nCommands:\n  new               Create a new random keypair [aliases: n]\n  new-mnemonic      Generates a random BIP39 mnemonic phrase [aliases: nm]\n  vanity            Generate a vanity address [aliases: va]\n  address           Convert a private key to an address [aliases: a, addr]\n  sign              Sign a message or typed data [aliases: s]\n  sign-auth         EIP-7702 sign authorization [aliases: sa]\n  verify            Verify the signature of a message [aliases: v]\n  import            Import a private key into an encrypted keystore [aliases: i]\n  list              List all the accounts in the keystore default directory\n                    [aliases: ls]\n  remove            Remove a wallet from the keystore [aliases: rm]\n  private-key       Derives private key from mnemonic [aliases: pk]\n  public-key        Get the public key for the given private key [aliases:\n                    pubkey]\n  decrypt-keystore  Decrypt a keystore file to get the private key [aliases: dk]\n  change-password   Change the password of a keystore file [aliases: cp]\n  help              Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Running Slither Analysis Commands\nDESCRIPTION: Shell commands for running Slither analysis on entire projects or single files\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/static-analyzers.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nslither .\n```\n\nLANGUAGE: sh\nCODE:\n```\nslither src/Contract.sol\n```\n\nLANGUAGE: sh\nCODE:\n```\nslither --config-file <path>/file.config.json .\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast Send Create Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast send --create command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/send/--create.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast send --create --help\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ethereum Block Hash with Shell\nDESCRIPTION: This command retrieves the hash of the latest Ethereum block using the cast command with the field option specified. It requires the cast tool to be installed and operational.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-block.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncast block latest -f hash\n```\n\n----------------------------------------\n\nTITLE: Asserting Bytes32 Inequality (Legacy) in Solidity\nDESCRIPTION: This snippet shows the signature for the legacy `assertNotEq32` function when comparing two bytes32 values. The function reverts if the two bytes32 values are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq32(bytes32 left, bytes32 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq32(bytes32 left, bytes32 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Specifying Solidity Compiler Version in VSCode\nDESCRIPTION: This JSON snippet sets the Solidity compiler version to be used in VSCode. It specifies version 0.8.17 for remote compilation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vscode.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"solidity.compileUsingRemoteVersion\": \"v0.8.17\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Keypair with Foundry CLI\nDESCRIPTION: Demonstrates the 'cast wallet new' command to generate a new keypair using the Foundry CLI. The command can generate a keypair and write it to a JSON keystore if a path is specified. It supports options for password protection of the keystore. No dependencies are outside the Foundry CLI environment. Inputs include options like password and keystore path, and output will be a keypair either displayed or stored.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-new.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast wallet new\n```\n\n----------------------------------------\n\nTITLE: Inline Configuration for Fuzz Test Failure Persistence in Solidity\nDESCRIPTION: This inline configuration in a Solidity file sets a custom file path for persisting and rerunning fuzz test failures.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/replay-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\n/// forge-config: default.fuzz.failure-persist-file = /tests/failures.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzz Test with Block Comments in Solidity\nDESCRIPTION: Example showing how to configure a fuzz test using block comments. This sets the number of runs, maximum test rejects, and enables log display for the test.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/inline-test-config.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract MyTest is Test {\n  /**\n   * forge-config: default.fuzz.runs = 1024\n   * forge-config: default.fuzz.max-test-rejects = 500\n   * forge-config: default.fuzz.show-logs = true\n   */\n  function test_SimpleFuzzTest(uint256 x) public {\n    // --- snip ---\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dependency using forge soldeer Command-Line Tool\nDESCRIPTION: The snippet shows how to invoke the help option for the 'forge soldeer uninstall' command which is used for removing specified dependencies. It is a bash command executed in the terminal. No additional dependencies are required other than having forge soldeer installed. This command helps developers manage project dependencies by cleanly removing them when no longer needed.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/uninstall.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge soldeer uninstall --help\n```\n\n----------------------------------------\n\nTITLE: Setting Account Nonce Function Signature\nDESCRIPTION: Function signature for setNonce that takes an account address and nonce value as parameters. Used to modify account nonces in test environments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/set-nonce.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setNonce(address account, uint64 nonce) external;\n```\n\n----------------------------------------\n\nTITLE: Running cast max-int Command in Bash\nDESCRIPTION: Command syntax for retrieving the maximum i256 value using the cast utility from the Foundry toolchain.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-max-int.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast max-int\n```\n\n----------------------------------------\n\nTITLE: Fetching Function Signature by Name\nDESCRIPTION: This snippet explains how to fetch the function signature from Etherscan using only the function name, offering a fallback method for signature retrieval when other methods are not available.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/sig-description.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCast will try to fetch the function signature from Etherscan\n```\n\n----------------------------------------\n\nTITLE: Removing a Dependency by Path - Shell\nDESCRIPTION: This snippet demonstrates how to remove a dependency from the project using its path. The primary purpose is to illustrate the basic usage of the command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-remove.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nforge remove lib/solmate\n```\n\n----------------------------------------\n\nTITLE: Default Extra Output Configuration in TOML\nDESCRIPTION: The default extra_output configuration that's always included in Forge artifacts, showing required fields for contract artifacts such as ABI and bytecode.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nextra_output = [\n  \"abi\",\n  \"evm.bytecode\",\n  \"evm.deployedBytecode\",\n  \"evm.methodIdentifiers\",\n]\n```\n\n----------------------------------------\n\nTITLE: Defining fail_on_revert Configuration\nDESCRIPTION: The `fail_on_revert` flag is a boolean configuration that determines whether invariant fuzzing should fail if a revert occurs, defaulting to false and adjustable via the environment variable `FOUNDRY_INVARIANT_FAIL_ON_REVERT`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `fail_on_revert`\n\n- Type: boolean\n- Default: false\n- Environment: `FOUNDRY_INVARIANT_FAIL_ON_REVERT`\n\nFails the invariant fuzzing if a revert occurs.\n```\n\n----------------------------------------\n\nTITLE: Generating Forge Remappings Using Bash\nDESCRIPTION: This snippet shows how to invoke the 'forge remappings' command in a Bash shell to display help information. The command provides options for customizing the output and controlling the running environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/remappings.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge remappings --help\n```\n\n----------------------------------------\n\nTITLE: Deriving Private Key from Test Mnemonic in Solidity\nDESCRIPTION: This example demonstrates deriving a private key from a test mnemonic at the default path m/44'/60'/0'/0/0.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/derive-key.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory mnemonic = \"test test test test test test test test test test test junk\";\nuint256 privateKey = vm.deriveKey(mnemonic, 0);\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Maximum Integer Command\nDESCRIPTION: This snippet shows the command to display help information for the 'cast max-int' command, detailing its usage and options. It requires the 'cast' command-line tool to be installed and accessible in the user's environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/max-int.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast max-int --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information with Cast Decode-EOF Command in Bash\nDESCRIPTION: This Bash snippet demonstrates how to display help information for the 'cast decode-eof' command. The '--help' flag provides a summary of usage and available options for the tool used in decoding EOF container bytes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-eof.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast decode-eof --help\n```\n\n----------------------------------------\n\nTITLE: Defining makePersistent Function Signatures in Solidity\nDESCRIPTION: Function signatures for the makePersistent cheatcode showing different overloads that accept various combinations of account addresses to mark as persistent.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/make-persistent.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction makePersistent(address account) external;\nfunction makePersistent(address account0, address account1) external;\nfunction makePersistent(address account0, address account1, address account2) external;\nfunction makePersistent(address[] calldata accounts) external;\n```\n\n----------------------------------------\n\nTITLE: Generating Shell Completions for Zsh - Shell Script\nDESCRIPTION: This script generates a shell completions script for the zsh shell using the 'cast completions' command. It takes 'zsh' as an argument and outputs the completion script to the specified directory. This is useful for users of the Cast application who want to enable tab-completion of commands in their zsh shell.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-completions.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast completions zsh > $HOME/.oh-my-zsh/completions/_cast\n```\n\n----------------------------------------\n\nTITLE: Cast Code Command Usage Details in Text Format\nDESCRIPTION: This snippet provides detailed usage information for the cast code command, outlining options, arguments, and their respective purposes when retrieving bytecode from blockchain contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/code.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast code [OPTIONS] <WHO>\n\nArguments:\n  <WHO>\n          The contract address\n\nOptions:\n  -B, --block <BLOCK>\n          The block height to query at.\n          \n          Can also be the tags earliest, finalized, safe, latest, or pending.\n\n  -d, --disassemble\n          Disassemble bytecodes\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Forge Generate Command - Bash\nDESCRIPTION: This snippet demonstrates how to display help information for the 'forge generate' command using the command line interface. It provides a way for users to understand the options and subcommands available for scaffolding files.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/generate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge generate --help\"\n```\n\n----------------------------------------\n\nTITLE: cast decode-event usage and options\nDESCRIPTION: This block of text describes the usage and available options for the `cast decode-event` command. It details the arguments like `<DATA>` for event data and options to specify the event signature (`--sig`), number of threads (`--threads`), verbosity level (`-v`), and display settings (color, JSON output, quiet mode).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-event.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast decode-event [OPTIONS] <DATA>\n\nArguments:\n  <DATA>\n          The event data to decode\n\nOptions:\n      --sig <SIG>\n          The event signature. If none provided then tries to decode from local\n          cache or <https://api.openchain.xyz>\n          \n          [aliases: event-sig]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with Default CREATE Opcode in Solidity\nDESCRIPTION: This Solidity snippet shows how to deploy a contract using the default CREATE opcode, which uses the sender's address and nonce to determine the new contract address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/deterministic-deployments-using-create2.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// Using the default CREATE opcode\nCounter counter = new Counter();\n```\n\n----------------------------------------\n\nTITLE: Transaction and Wallet Commands in Foundry CLI\nDESCRIPTION: Commands for inspecting transactions, wallet management, and blockchain-related utilities\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntx: Get information about a transaction\n```\n\nLANGUAGE: bash\nCODE:\n```\ntx-pool: Inspect the TxPool of a node\n```\n\nLANGUAGE: bash\nCODE:\n```\nupload-signature: Upload signatures to openchain.xyz\n```\n\nLANGUAGE: bash\nCODE:\n```\nwallet: Wallet management utilities\n```\n\n----------------------------------------\n\nTITLE: Cleaning cache for multiple chains\nDESCRIPTION: Shows how to remove cache data for multiple chains by specifying each chain name separated by a space.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache-clean.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nforge cache clean rinkeby mainnet\n```\n\n----------------------------------------\n\nTITLE: Executing Help Command for Hash-Zero in Bash\nDESCRIPTION: This snippet provides the command to display help information for the 'cast hash-zero' command in Bash, outlining usage and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/hash-zero.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast hash-zero --help\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet New Command Usage\nDESCRIPTION: Detailed help output showing all available arguments and options for creating new wallets, including path specification, account naming, password handling, and various display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/new.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast wallet new [OPTIONS] [PATH] [ACCOUNT_NAME]\n\nArguments:\n  [PATH]\n          If provided, then keypair will be written to an encrypted JSON\n          keystore\n\n  [ACCOUNT_NAME]\n          Account name for the keystore file. If provided, the keystore file\n          will be named using this account name\n\nOptions:\n  -p, --password\n          Triggers a hidden password prompt for the JSON keystore.\n          \n          Deprecated: prompting for a hidden password is now the default.\n\n      --unsafe-password <PASSWORD>\n          Password for the JSON keystore in cleartext.\n          \n          This is UNSAFE to use and we recommend using the --password.\n          \n          [env: CAST_PASSWORD=]\n\n  -n, --number <NUMBER>\n          Number of wallets to generate\n          \n          [default: 1]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Using Ledger Hardware Wallet with Foundry\nDESCRIPTION: Command line option to specify using a Ledger hardware wallet when running Foundry tools. Can be provided in short form (-l) or long form (--ledger).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-hardware.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-l\n--ledger\n```\n\n----------------------------------------\n\nTITLE: Signing EIP-7702 Authorization Using Keystore - Shell\nDESCRIPTION: This command signs an EIP-7702 authorization for the specified address using a provided keystore file. The command requires the address to be signed and the keystore file, and allows for interactive mode to prompt for sensitive information.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-sign-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast wallet sign-auth 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 --keystore keystore.json --interactive\n```\n\n----------------------------------------\n\nTITLE: Configuring Solc Optimizer Settings in TOML\nDESCRIPTION: Configuration settings to explicitly enable the Solidity optimizer and set optimizer runs in foundry.toml\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/v1.0-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\noptimizer = true\noptimizer_runs = 200\n```\n\n----------------------------------------\n\nTITLE: JSON Structure Example\nDESCRIPTION: Example of valid JSON input structure that can be processed by writeToml.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/write-toml.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{ \"boolean\": true, \"number\": 342, \"object\": { \"title\": \"finally json serialization\" } }\n```\n\n----------------------------------------\n\nTITLE: Running Output Generation Script\nDESCRIPTION: Command to execute the script that generates CLI output examples from the projects directory.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/output/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/gen_output.sh\n```\n\n----------------------------------------\n\nTITLE: Internal Expect Revert Test with Config Override\nDESCRIPTION: Example showing how to enable internal expect revert behavior using forge-config comment\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/v1.0-migration.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n    /// forge-config: default.allow_internal_expect_revert = true\n    function testExample() public {\n        vm.expectRevert();\n        revertWithCustomError();\n    }\n```\n\n----------------------------------------\n\nTITLE: Asserting Bytes Array Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two bytes arrays. The function reverts if the two bytes arrays are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bytes[] memory left, bytes[] memory right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(bytes[] memory left, bytes[] memory right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Generating Shell Completions - Shell\nDESCRIPTION: This command generates a shell completions script for zsh. It helps to enable autocompletion features for Anvil commands in the specified shell environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/anvil/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nanvil completions zsh > $HOME/.oh-my-zsh/completions/_anvil\n```\n\n----------------------------------------\n\nTITLE: Example Solidity Import After Remapping\nDESCRIPTION: The resulting import statement after remapping is applied. The path is expanded to the full directory structure specified in the remapping.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nimport {Context} from \"node_modules/@openzeppelin/openzeppelin-contracts/contracts/utils/Context.sol\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Etherscan Chain Option in Foundry\nDESCRIPTION: Command-line option for specifying which Ethereum chain to use with Etherscan. This allows users to target specific networks when interacting with the Etherscan API.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/etherscan-options.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`--chain` *chain_name*  \n```\n\n----------------------------------------\n\nTITLE: Setting Keystore Account Environment Variable\nDESCRIPTION: Defines an environment variable for specifying the Ethereum keystore account.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/script.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[env: ETH_KEYSTORE_ACCOUNT=]\n```\n\n----------------------------------------\n\nTITLE: Custom Group Snapshot Example\nDESCRIPTION: Example showing how to use custom group names for organizing gas snapshots.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/gas-snapshots.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SnapshotGasTest is Test {\n    uint256 public slot0;\n\n    /// Writes to `snapshots/CustomGroup.json` group with name `internalA`, `internalB`, and `internalC`.\n    function testSnapshotGas() public {\n        vm.startSnapshotGas(\"CustomGroup\", \"internalA\");\n        slot0 = 1;\n        vm.stopSnapshotGas();\n\n        vm.startSnapshotGas(\"CustomGroup\", \"internalB\");\n        slot0 = 2;\n        vm.stopSnapshotGas();\n\n        vm.startSnapshotGas(\"CustomGroup\", \"internalC\");\n        slot0 = 0;\n        vm.stopSnapshotGas();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cast Int256 Help Output\nDESCRIPTION: Detailed help output showing all available options and arguments for the cast to-int256 command, including threading options, display configurations, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-int256.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-int256 [OPTIONS] [VALUE]\n\nArguments:\n  [VALUE]\n          The value to convert\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Including Common Options in Rust\nDESCRIPTION: This code snippet indicates where common RPC options are included for the command, which are essential for its functioning by providing necessary configurations for remote procedure calls.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-compute-address.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n\"{{#include ../common/rpc-url-option.md}}\"\n```\n\nLANGUAGE: markdown\nCODE:\n```\n\"{{#include common-options.md}}\"\n```\n\n----------------------------------------\n\nTITLE: Defining assumeNotPrecompile Function (Address)\nDESCRIPTION: This Solidity code defines a function named `assumeNotPrecompile` that takes an address as input. It's used to filter out precompile addresses during fuzz testing in Foundry. This helps avoid interacting with precompiles in scenarios where they are not intended to be tested directly.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assume-no-precompiles.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity\nfunction assumeNotPrecompile(address addr) public;\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Help for a Cast Command\nDESCRIPTION: Example of using the cast help command to get documentation for the 'call' subcommand. This command prints detailed help information about the specified subcommand.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-help.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast help call\n```\n\n----------------------------------------\n\nTITLE: Asserting Non-Equality of Signed Integers with Decimals in Solidity\nDESCRIPTION: This snippet defines an internal function that handles non-equality assertions for signed integers, taking two signed integers and a decimal precision parameter. This ensures that signed values are compared correctly while considering the specified decimal places.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEqDecimal.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEqDecimal(int256 left, int256 right, uint256 decimals) internal;\n```\n\n----------------------------------------\n\nTITLE: Displaying Forge Cache Help Command\nDESCRIPTION: Shows how to access the help documentation for the forge cache command\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/cache.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge cache --help\n```\n\n----------------------------------------\n\nTITLE: Forge Clean Command Usage and Options\nDESCRIPTION: Detailed documentation showing all available options and parameters for the forge clean command, including root path configuration, threading options, display settings, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/clean.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge clean [OPTIONS]\n\nOptions:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Converting Number to String Example\nDESCRIPTION: Example showing how to convert a uint256 number to its string representation and verify the conversion using vm.assertEq.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/to-string.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 number = 420;\nstring memory stringNumber = vm.toString(number);\nvm.assertEq(stringNumber, \"420\");\n```\n\n----------------------------------------\n\nTITLE: Cast Transaction Pool Help Command\nDESCRIPTION: Command to display help information for the cast tx-pool content-from utility\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx-pool/content-from.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast tx-pool content-from --help\n```\n\n----------------------------------------\n\nTITLE: Including Only Output in Documentation\nDESCRIPTION: Shows how to include just the output portion of auto-generated CLI results using Handlebars include syntax. This allows focusing on command results in documentation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#include ../output/abc/xyz:output}}\n```\n\n----------------------------------------\n\nTITLE: Displaying help for cast disassemble using bash\nDESCRIPTION: This snippet demonstrates how to display the help message for the `cast disassemble` command using the `cast disassemble --help` command in bash. The help message provides information on the command's usage, arguments, and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/disassemble.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast disassemble --help\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for cast sig Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast sig' command in Foundry, providing details on its usage and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/sig.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast sig --help\n```\n\n----------------------------------------\n\nTITLE: Defining assertFalse Function in Solidity\nDESCRIPTION: The `assertFalse` function ensures that a given boolean `data` is false. An optional error message can be provided for clarity upon failure. It is intended to help with debugging and ensure that contracts behave as expected.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertFalse.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertFalse(bool data) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertFalse(bool data, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Creating Contributor Table in HTML\nDESCRIPTION: HTML table structure displaying contributor information including avatars, usernames, and contribution types. Each contributor is represented in a cell with their GitHub avatar, profile link, username, and contribution badges.\nSOURCE: https://github.com/foundry-rs/book/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DaniPopes\"><img src=\"https://avatars.githubusercontent.com/u/57450786?v=4?s=100\" width=\"100px;\" alt=\"DaniPopes\"/><br /><sub><b>DaniPopes</b></sub></a><br /><a href=\"#maintenance-DaniPopes\" title=\"Maintenance\">🚧</a></td>\n```\n\n----------------------------------------\n\nTITLE: Verifying a Contract on Custom Sourcify Instance Using Shell\nDESCRIPTION: This command verifies a smart contract on a specified Sourcify instance with a custom verifier URL.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-verify-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge verify-contract --verifier sourcify \\\n  --verifier-url http://localhost:5000 <address> SomeContract\n```\n\n----------------------------------------\n\nTITLE: Legacy TestFail Example\nDESCRIPTION: Example of a deprecated testFail function that needs migration in v1.0\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/v1.0-migration.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testFail_IncrementAsNotOwner() public {\n    vm.prank(address(0));\n    upOnly.increment();\n}\n```\n\n----------------------------------------\n\nTITLE: Forge Doc Options\nDESCRIPTION: This text block outlines the options available for the `forge doc` command. It includes settings for the project root path, output path, building, serving, hostname, threads, watching files, deployment, and display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/doc.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge doc [OPTIONS]\n\nOptions:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -o, --out <PATH>\n          The doc's output path.\n          \n          By default, it is the `docs/` in project root.\n\n  -b, --build\n          Build the `mdbook` from generated files\n\n  -s, --serve\n          Serve the documentation\n\n      --open\n          Open the documentation in a browser after serving\n\n      --hostname <HOSTNAME>\n          Hostname for serving documentation\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nWatch options:\n  -w, --watch [<PATH>...]\n          Watch the given files or directories for changes.\n          \n          If no paths are provided, the source and test directories of the\n          project are watched.\n\n      --no-restart\n          Do not restart the command while it's still running\n\n      --run-all\n          Explicitly re-run all tests when a change is made.\n          \n          By default, only the tests of the last modified test file are\n          executed.\n\n      --watch-delay <DELAY>\n          File update debounce delay.\n          \n          During the delay, incoming change events are accumulated and only once\n          the delay has passed, is an action taken. Note that this does not mean\n          a command will be started: if --no-restart is given and a command is\n          already running, the outcome of the action will be to do nothing.\n          \n          Defaults to 50ms. Parses as decimal seconds by default, but using an\n          integer with the `ms` suffix may be more convenient.\n          \n          When using --poll mode, you'll want a larger duration, or risk\n          overloading disk I/O.\n\n  -p, --port <PORT>\n          Port for serving documentation\n\n      --deployments [<DEPLOYMENTS>]\n          The relative path to the `hardhat-deploy` or `forge-deploy` artifact\n          directory. Leave blank for default\n\n  -i, --include-libraries\n          Whether to create docs for external libraries\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n```\n\n----------------------------------------\n\nTITLE: Disabling RPC Cache in Foundry Toolchain\nDESCRIPTION: Configuration example showing how to disable the default RPC response caching mechanism in the Foundry toolchain action.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/ci-cd/github-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install Foundry\n  uses: foundry-rs/foundry-toolchain@v1\n  with:\n    cache: false\n```\n\n----------------------------------------\n\nTITLE: Forge Script Execution Command\nDESCRIPTION: Command line example for running Vyper scripts using forge script\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vyper.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/Increment.s.vy  --sig 'run' '<counter address>' --rpc-url $RPC_URL --broadcast  --private-key $PRIVATE_KEY\n```\n\n----------------------------------------\n\nTITLE: Forge update command usage and options\nDESCRIPTION: Detailed output showing the syntax, arguments, and available options for the forge update command. Includes project root options, update behavior flags, threading settings, and display configuration options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/update.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge update [OPTIONS] [DEPENDENCIES]...\n\nArguments:\n  [DEPENDENCIES]...\n          The dependencies you want to update\n\nOptions:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n  -f, --force\n          Override the up-to-date check\n\n  -r, --recursive\n          Recursively update submodules\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Updating All Dependencies with Forge in Shell\nDESCRIPTION: This command updates all dependencies managed by Forge. Dependencies pinned to tags or revisions in `foundry.lock` will not be updated unless explicitly stated otherwise. This information should be taken into account when executing this command to ensure that all dependencies are updated as intended.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-update.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Note: Dependencies pinned to tags/revs in `foundry.lock` will not be updated.\n# They must be overwritten explicitly.\nforge update\n```\n\n----------------------------------------\n\nTITLE: Running Forge Debugger\nDESCRIPTION: Basic command to start the debugger with a test regex pattern match\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/debugger.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ forge test --debug --match-test \"<REGEX>\"\n```\n\n----------------------------------------\n\nTITLE: Checking JSON Key Existence - Solidity Function Signature\nDESCRIPTION: Function signature for vm.keyExists() that checks if a key exists in a JSON string. Note that this function is being deprecated in favor of keyExistsJson.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/key-exists.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nvm.keyExists(string memory json, string memory key) returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Updating Foundryup\nDESCRIPTION: Command to update the Foundryup tool to the latest version.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/announcements.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfoundryup --update\n```\n\n----------------------------------------\n\nTITLE: Interactive Private Key Input Option in Foundry CLI\nDESCRIPTION: Command line option to open an interactive prompt for entering private keys. Takes a numeric value specifying how many keys to enter. Defaults to 0 if not specified.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-raw.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-i\n--interactives num\n```\n\n----------------------------------------\n\nTITLE: Resolving Compiler Version with Forge CLI\nDESCRIPTION: This bash command provides help and usage information for the 'forge compiler resolve' command in Forge. It includes options for specifying root directories, skipping files based on regex, controlling verbosity, and adjusting output format.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/compiler/resolve.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge compiler resolve --help\n```\n\n----------------------------------------\n\nTITLE: Cast Wallet Change Password Usage\nDESCRIPTION: This text block describes the usage of the `cast wallet change-password` command. It explains the purpose of the `<ACCOUNT_NAME>` argument and details various options like specifying the keystore directory, providing passwords, and configuring display options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/change-password.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast wallet change-password [OPTIONS] <ACCOUNT_NAME>\n\nArguments:\n  <ACCOUNT_NAME>\n          The name for the account in the keystore\n\nOptions:\n  -k, --keystore-dir <KEYSTORE_DIR>\n          If not provided, keystore will try to be located at the default\n          keystores directory (~/.foundry/keystores)\n\n      --unsafe-password <PASSWORD>\n          Current password for the JSON keystore in cleartext This is unsafe, we\n          recommend using the default hidden password prompt\n          \n          [env: CAST_UNSAFE_PASSWORD=]\n\n      --unsafe-new-password <NEW_PASSWORD>\n          New password for the JSON keystore in cleartext This is unsafe, we\n          recommend using the default hidden password prompt\n          \n          [env: CAST_UNSAFE_NEW_PASSWORD=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Dependency by GitHub Repository Name - Shell\nDESCRIPTION: This snippet shows how to remove a dependency by specifying its GitHub repository. This allows users to quickly handle dependencies that are sourced from GitHub repositories.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-remove.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nforge remove dapphub/solmate\n```\n\n----------------------------------------\n\nTITLE: Suppressing Output in Foundry\nDESCRIPTION: The --silent option suppresses all output during the build process.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/core-build-options.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--silent\n```\n\n----------------------------------------\n\nTITLE: Executing cast admin command\nDESCRIPTION: This command executes the `cast admin` command with the `--help` flag to display the available options and usage information. This provides users with a quick overview of how to use the command and its various parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/admin.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast admin --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast RPC Command in Bash\nDESCRIPTION: This command shows how to access the help documentation for the 'cast rpc' command using the --help flag.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast rpc --help\n```\n\n----------------------------------------\n\nTITLE: Running Forge Remove Command\nDESCRIPTION: Demonstrates how to access the help documentation for the 'forge remove' command. It is essential to understand the available options and arguments to effectively use this command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/remove.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge remove --help\n```\n\n----------------------------------------\n\nTITLE: Executing cast decode-event with help option\nDESCRIPTION: This command executes the `cast decode-event` command with the `--help` option. This displays the help message for the command, providing information on its usage, arguments, and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-event.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast decode-event --help\n```\n\n----------------------------------------\n\nTITLE: Asserting Address Inequality in Solidity\nDESCRIPTION: This snippet shows the signature for the `assertNotEq` function when comparing two address values. The function reverts if the two addresses are equal, optionally including a custom error message.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertNotEq.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(address left, address right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertNotEq(address left, address right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Parsing Addresses with Bash\nDESCRIPTION: This snippet shows how to invoke the help command for 'cast parse-bytes32-address', providing a summary of its options and usage. The command is part of a tool for interacting with Ethereum and requires no additional dependencies.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/parse-bytes32-address.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast parse-bytes32-address --help\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Invariant Assertion Example in Solidity\nDESCRIPTION: Solidity snippet illustrating a conditional invariant where assertions depend on the protocol's state. This example demonstrates how different checks can be applied based on a condition, ensuring that corresponding invariants are always verified.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction invariant_example() external {\n    if (protocolCondition) return;\n\n    assertEq(val1, val2);\n}\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction invariant_example() external {\n    if (protocolCondition) {\n        assertLe(val1, val2);\n        return;\n    };\n\n    assertEq(val1, val2);\n}\n```\n\n----------------------------------------\n\nTITLE: Usage and Options for 'cast concat-hex' Command - Text Format\nDESCRIPTION: This textual snippet outlines the command-line usage and options available for the 'cast concat-hex' command. It explains the arguments, thread options, and display options, including color preferences and JSON format log messages. User-defined verbosity levels provide varying levels of detail for log messages.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/concat-hex.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast concat-hex [OPTIONS] [DATA]...\n\nArguments:\n  [DATA]...\n          The data to concatenate\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Setting Verifier API Key Environment Variable\nDESCRIPTION: Defines an environment variable for specifying the API key for contract verification services.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/script.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n[env: VERIFIER_API_KEY=]\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Navigation tree structure showing the organization of the Foundry-rs documentation book sections and subsections.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/SUMMARY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Std Math](./reference/forge-std/std-math.md)\n  - [`abs`](./reference/forge-std/abs.md)\n  - [`delta`](./reference/forge-std/delta.md)\n  - [`percentDelta`](./reference/forge-std/percentDelta.md)\n- [Script Utils](./reference/forge-std/script-utils.md)\n  - [`computeCreateAddress`](./reference/forge-std/compute-create-address.md)\n  - [`deriveRememberKey`](./reference/forge-std/derive-remember-key.md)\n- [Console Logging](./reference/forge-std/console-log.md)\n- [DSTest Reference](./reference/ds-test.md)\n- [Miscellaneous](./misc/README.md)\n  - [Struct encoding](./misc/struct-encoding.md)\n```\n\n----------------------------------------\n\nTITLE: Input Base Specification Options for Foundry-rs\nDESCRIPTION: Command-line options for specifying the base of input numbers in Foundry-rs. Supports decimal (base 10) and hexadecimal (base 16) inputs with various alias options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/base-options.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--base-in *base*\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Optimizer Runs in Foundry\nDESCRIPTION: This setting restricts compilation to a maximum number of optimizer runs. It conflicts with the 'optimizer_runs' setting and requires the 'min_optimizer_runs' setting to be specified.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n##### `compilation_restriction.max_optimizer_runs`\n\n- Type: integer\n\nRestrict compilation for max of [optimizer_runs](#optimizer_runs) setting. Conflicts with `optimizer_runs` setting, requires `min_optimizer_runs` setting.\n```\n\n----------------------------------------\n\nTITLE: Command Usage for Compute Address in Cast CLI\nDESCRIPTION: This snippet outlines the command usage format and options for the 'compute-address' command in the Cast CLI. It details arguments such as the deployer address and options including nonce, RPC URL, JWT secret, and others. This text format provides extensive information without requiring any specific dependencies.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/compute-address.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast compute-address [OPTIONS] [ADDRESS]\n\nArguments:\n  [ADDRESS]\n          The deployer address\n\nOptions:\n      --nonce <NONCE>\n          The nonce of the deployer address\n\n  -r, --rpc-url <URL>\n          The RPC endpoint, default value is http://localhost:8545\n          \n          [env: ETH_RPC_URL=]\n\n      --flashbots\n          Use the Flashbots RPC URL with fast mode\n          (<https://rpc.flashbots.net/fast>).\n          \n          This shares the transaction privately with all registered builders.\n          \n          See:\n          <https://docs.flashbots.net/flashbots-protect/quick-start#faster-transactions>\n\n      --jwt-secret <JWT_SECRET>\n          JWT Secret for the RPC endpoint.\n          \n          The JWT secret will be used to create a JWT for a RPC. For example,\n          the following can be used to simulate a CL `engine_forkchoiceUpdated`\n          call:\n          \n          cast rpc --jwt-secret <JWT_SECRET> engine_forkchoiceUpdatedV2\n          '[\"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\",\n          \"0x6bb38c26db65749ab6e472080a3d20a2f35776494e72016d1e339593f21c59bc\"]'\n          \n          [env: ETH_RPC_JWT_SECRET=]\n\n      --rpc-timeout <RPC_TIMEOUT>\n          Timeout for the RPC request in seconds.\n          \n          The specified timeout will be used to override the default timeout for\n          RPC requests.\n          \n          Default value: 45\n          \n          [env: ETH_RPC_TIMEOUT=]\n\n      --rpc-headers <RPC_HEADERS>\n          Specify custom headers for RPC requests\n          \n          [env: ETH_RPC_HEADERS=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry Using Foundryup Options\nDESCRIPTION: Demonstrates using Foundryup installation flags to install from specific branches or local paths.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/getting-started/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfoundryup --branch master\nfoundryup --path path/to/foundry\n```\n\n----------------------------------------\n\nTITLE: Using Trezor Hardware Wallet with Foundry\nDESCRIPTION: Command line option to specify using a Trezor hardware wallet when running Foundry tools. Can be provided in short form (-t) or long form (--trezor).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-hardware.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-t\n--trezor\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Key Configuration for Multiple Jobs\nDESCRIPTION: Example showing how to configure custom cache keys for sharing caches between different jobs while maintaining unique keys per execution.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/ci-cd/github-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install Foundry\n  uses: foundry-rs/foundry-toolchain@v1\n  with:\n    cache-key: custom-seed-test-${{ github.sha }}\n    cache-restore-keys: |-\n      custom-seed-test-\n      custom-seed-\n---\n- name: Install Foundry\n  uses: foundry-rs/foundry-toolchain@v1\n  with:\n    cache-key: custom-seed-coverage-${{ github.sha }}\n    cache-restore-keys: |-\n      custom-seed-coverage-\n      custom-seed-\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Solidity Extension for OpenZeppelin Remapping\nDESCRIPTION: This JSON snippet configures the VSCode Solidity extension to use the OpenZeppelin remapping. It specifies the path to the OpenZeppelin contracts in the project structure.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vscode.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"solidity.remappings\": [\n    \"@openzeppelin/=project/contracts/lib/openzeppelin-contracts/\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Console.sol Usage\nDESCRIPTION: Example of deprecated console.log usage that needs updating in v1.0\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/v1.0-migration.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nconsole.log(\"testMisc\", 42);\nconsole.log(0);\n```\n\n----------------------------------------\n\nTITLE: Viewing Cache Data for Multiple Chains in Forge\nDESCRIPTION: Shows how to list cache data for multiple blockchain networks in a single command, using 'rinkeby' and 'mainnet' as examples.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache-ls.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge cache ls rinkeby mainnet\n```\n\n----------------------------------------\n\nTITLE: Defining Verifier Name Option - Markdown\nDESCRIPTION: This snippet defines the command-line option for specifying the verification provider. It lists available providers and notes the default setting. The setting requires the user to append `/api?` to the Blockscout homepage explorer URL for proper functionality.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/verifier-options.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`--verifier` *name*   \n&nbsp;&nbsp;&nbsp;&nbsp;The verification provider. Available options: `etherscan`, `sourcify` & `blockscout`. Default: `etherscan`. Note: make sure you add \"/api\\?\" to the end of the Blockscout homepage explorer URL.\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Tags or Revisions with Forge in Shell\nDESCRIPTION: This code snippet provides commands to update the tags or revisions of dependencies using Forge. It requires Forge to be installed and configured. The commands allow you to specify the owner, dependency name, and the new tag or revision. Expected inputs are the current paths or identifiers of dependencies, and outputs are updates in the dependency versions according to the command given.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-update.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Update the tag of the dependency\nforge update owner/dependency-name@new-tag\nforge update owner/dependency-name@tag=some-tag\n\n# Update the revision of the dependency\nforge update owner/dependency-name@01234abc\nforge update owner/dependency-name@rev=01234abc\n```\n\n----------------------------------------\n\nTITLE: cast disassemble - Usage Description\nDESCRIPTION: This snippet displays the usage information for the `cast disassemble` command, indicating that it takes an optional hex-encoded bytecode as an argument. It also shows available options such as `--help`, `--threads`, `--color`, `--json`, `--quiet`, and `--verbosity`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/disassemble.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: cast disassemble [OPTIONS] [BYTECODE]\\n\\nArguments:\\n  [BYTECODE]\\n          The hex-encoded bytecode\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          \\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          \\n          Depending on the context the verbosity levels have different meanings.\\n          \\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Raw Stack Data in Chisel\nDESCRIPTION: Illustrates the use of the `!rawstack` command to display the raw value and memory pointer of a variable's stack allocation in the Chisel REPL. In this example, the address `addr` is set and its stack value inspected.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/chisel/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n➜ address addr\n➜ assembly {\n    addr := not(0)\n}\n➜ addr\nType: address\n└ Data: 0xffffffffffffffffffffffffffffffffffffffff\n➜ !rs addr\nType: bytes32\n└ Data: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n➜ \n```\n\n----------------------------------------\n\nTITLE: File Path Verification Example\nDESCRIPTION: Example showing how to verify if a file path exists in the filesystem.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/fs.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory validPath = \"foo/files/bar.txt\";\ntrueBool(vm.exists(validPath));\n```\n\n----------------------------------------\n\nTITLE: Cast SHL Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast shl command\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/shl.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast shl --help\n```\n\n----------------------------------------\n\nTITLE: Using forge cache command with its basic syntax\nDESCRIPTION: Basic syntax examples for the forge cache command, showing different ways to invoke it with options and subcommands.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge cache [*options*] *command* [*args*]  \nforge cache [*options*] `--version`  \nforge cache [*options*] `--help`  \n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Forge Geiger Command - Bash\nDESCRIPTION: This snippet demonstrates how to access help information for the 'forge geiger' command, providing the user with usage guidance and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/geiger.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge geiger --help\n```\n\n----------------------------------------\n\nTITLE: Executing cast abi-encode Command in Bash\nDESCRIPTION: This snippet runs the 'cast abi-encode' command with the help option, providing access to detailed usage instructions for encoding function arguments according to the ABI specification. The command can be customized with additional options like packed encoding, verbosity level, and output formatting. Ensure that the required function signature and arguments are provided.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/abi-encode.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast abi-encode --help\n```\n\n----------------------------------------\n\nTITLE: Event Logging and Verification Example in Solidity\nDESCRIPTION: Demonstrates how to use recordLogs to capture events, emit a test event, and verify the recorded log entries including topic validation and data decoding.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/record-logs.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n/// event LogCompleted(\n///   uint256 indexed topic1,\n///   bytes data\n/// );\n\nvm.recordLogs();\n\nemit LogCompleted(10, \"operation completed\");\n\nVm.Log[] memory entries = vm.getRecordedLogs();\n\nassertEq(entries.length, 1);\nassertEq(entries[0].topics[0], keccak256(\"LogCompleted(uint256,bytes)\"));\nassertEq(entries[0].topics[1], bytes32(uint256(10)));\nassertEq(abi.decode(entries[0].data, (string)), \"operation completed\");\n```\n\n----------------------------------------\n\nTITLE: Usage Documentation for Decode Error Command - Text\nDESCRIPTION: This snippet provides detailed usage documentation for the 'cast decode-error' command, including arguments and options to configure its behavior. It specifies how to pass error data and customize output through various flags.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-error.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast decode-error [OPTIONS] <DATA>\n\nArguments:\n  <DATA>\n          The error data to decode\n\nOptions:\n      --sig <SIG>\n          The error signature. If none provided then tries to decode from local\n          cache or <https://api.openchain.xyz>\n          \n          [aliases: error-sig]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Illustrating Bad Import Practice in Solidity\nDESCRIPTION: Demonstrates the discouraged practice of importing entire files, which can lead to naming conflicts and compilation issues, especially in larger projects.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/best-practices.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"src/MyContract.sol\"\n```\n\n----------------------------------------\n\nTITLE: Executing Fig Spec Generation Command in Bash\nDESCRIPTION: This snippet demonstrates how to invoke the 'cast generate-fig-spec' command with the help parameter to display usage information. It is a part of the command-line interface tools intended for generating Fig autocompletion specs.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/generate-fig-spec.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast generate-fig-spec --help\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Account Name\nDESCRIPTION: This command-line option allows users to specify an account by its name to use a keystore from the default folder. The default location for the keystore is `~/.foundry/keystores`, and it uses the `ETH_KEYSTORE_ACCOUNT` environment variable.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-keystore.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n`--account` _account-name_  \n&nbsp;&nbsp;&nbsp;&nbsp;Use a keystore from the default keystores folder (~/.foundry/keystores) by its filename.  \n&nbsp;&nbsp;&nbsp;&nbsp;Environment: `ETH_KEYSTORE_ACCOUNT`\n```\n\n----------------------------------------\n\nTITLE: Defining RPC-Related Cheatcode Functions in Solidity\nDESCRIPTION: Defines three functions: rpcUrl for retrieving a URL for a configured alias, rpcUrls for getting all configured (alias, URL) pairs, and rpc for performing an Ethereum JSON-RPC request to the current fork URL.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// Returns the URL for a configured alias\nfunction rpcUrl(string calldata alias) external returns (string memory);\n// Returns all configured (alias, URL) pairs\nfunction rpcUrls() external returns(string[2][] memory);\n/// Performs an Ethereum JSON-RPC request to the current fork URL.\nfunction rpc(string calldata method, string calldata params) external returns (bytes memory data);\n```\n\n----------------------------------------\n\nTITLE: Providing Keystore Passwords\nDESCRIPTION: This command-line option allows users to provide passwords associated with keystore files. This is required when using the `--keystore` option to access sensitive store information.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-keystore.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`--password` *passwords*  \n&nbsp;&nbsp;&nbsp;&nbsp;The keystore passwords. Used with `--keystore`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilation Restrictions (TOML)\nDESCRIPTION: This code snippet shows how to enforce compilation restrictions for specific files or directories. It demonstrates adding custom compiler profiles and setting compilation rules to optimize the build process for certain contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\nadditional_compiler_profiles = [ { name = \"via-ir\", via_ir = true } ]\ncompilation_restrictions = [\n    { paths = \"test/**\", via_ir = false },\n    { paths = \"src/Counter.sol\", via_ir = true },\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving RPC URL in Solidity\nDESCRIPTION: Shows how to use the vm.rpcUrl function to retrieve a configured RPC URL in Solidity code.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/rpc.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory url = vm.rpcUrl(\"optimism\");\nassertEq(url, \"https://optimism.alchemyapi.io/v2/...\");\n```\n\n----------------------------------------\n\nTITLE: Password Authentication Options for Ethereum Keystore\nDESCRIPTION: Command line options for providing keystore passwords either directly or via a file. The password file option also supports setting via the ETH_PASSWORD environment variable.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/create.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--password <PASSWORD>\n          The keystore password.\n          \n          Used with --keystore.\n\n  --password-file <PASSWORD_FILE>\n          The keystore password file path.\n          \n          Used with --keystore.\n          \n          [env: ETH_PASSWORD=]\n```\n\n----------------------------------------\n\nTITLE: Cleaning cache for a specific chain by name\nDESCRIPTION: Demonstrates how to remove cache data for a specific chain by providing the chain name (in this example, Rinkeby).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache-clean.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge cache clean rinkeby\n```\n\n----------------------------------------\n\nTITLE: Defining Function Selector and Encoded Calldata\nDESCRIPTION: This snippet provides an example of a function selector and corresponding encoded calldata, which is used to call a specific function in Ethereum contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/sig-description.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0xcdba2fd40000000000000000000000000000000000000000000000000000000000007a69\n```\n\n----------------------------------------\n\nTITLE: Running Forge Bind Command with Options in Bash\nDESCRIPTION: Command syntax for 'forge bind' which generates Rust bindings for smart contracts using Alloy. It can generate bindings in a crate (default), module, or single file format with various customization options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-bind.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge bind [options]\n```\n\n----------------------------------------\n\nTITLE: Single Address Environment Variable Example\nDESCRIPTION: Example demonstrating how to read a single address value from an environment variable and verify its value using assertion.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/env-address.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory key = \"ADDRESS_VALUE\";\naddress expected = 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;\naddress output = vm.envAddress(key);\nassert(output == expected);\n```\n\n----------------------------------------\n\nTITLE: Legacy Internal Expect Revert Test Example\nDESCRIPTION: Example of a test using vm.expectRevert with internal calls that needs migration in v1.0\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/v1.0-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ContractTest is Test {\n    error CustomError();\n\n    function revertWithCustomError() internal {\n        revert CustomError();\n    }\n\n    function testExample() public {\n        vm.expectRevert();\n        revertWithCustomError();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing the Entire Cache in Forge\nDESCRIPTION: Shows how to display the entire cache content from ~/.foundry/cache using the 'forge cache ls all' command, which is also the default behavior of 'forge cache ls'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache-ls.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge cache ls all\n```\n\n----------------------------------------\n\nTITLE: Legacy Helper Assert Functions in Solidity\nDESCRIPTION: Legacy helper functions include assertEqUint for asserting truncated uints and assertEq32 for bytes32 equality. They uphold compatibility with older data structures.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertEq.md#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\n// legacy helper for asserting two uints shorter than 256 bits: `assertEqUint(uint8(1), uint128(1));`\nfunction assertEqUint(uint256 a, uint256 b) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq32(bytes32 left, bytes32 right) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertEq32(bytes32 left, bytes32 right, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Defining Log Structure and getRecordedLogs Signature in Solidity\nDESCRIPTION: The signature of the getRecordedLogs function that retrieves emitted events recorded by recordLogs. The function returns an array of Log structures containing event topics, data, and emitter address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-recorded-logs.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Log {\n  bytes32[] topics;\n  bytes data;\n  address emitter;\n}\n\nfunction getRecordedLogs()\nexternal\nreturns (\n  Log[] memory\n);\n```\n\n----------------------------------------\n\nTITLE: Quick Transaction Replay with Minimal State\nDESCRIPTION: Replay a transaction using quick mode, which applies the transaction only on the previous block's state for faster execution\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-run.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast run --quick \\\n  0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca\n```\n\n----------------------------------------\n\nTITLE: Running 'cast base-fee' Command - Bash\nDESCRIPTION: This snippet demonstrates how to access the help menu for the 'cast base-fee' command, allowing users to understand the command's options and usage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/base-fee.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast base-fee --help\n```\n\n----------------------------------------\n\nTITLE: Running mdbook Server Locally\nDESCRIPTION: Command to start the mdbook server locally for live preview of book changes.\nSOURCE: https://github.com/foundry-rs/book/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmdbook serve\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for cast to-wei Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast to-wei' command, which provides details on its usage, arguments, and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-wei.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-wei --help\n```\n\n----------------------------------------\n\nTITLE: Installing multiple dependencies using forge\nDESCRIPTION: This command installs two dependencies: version `v7` of `solmate` from `transmissions11` and the latest version of `openzeppelin-contracts` from `OpenZeppelin`.  Each dependency is treated as a git submodule.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-install.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge install transmissions11/solmate@v7 OpenZeppelin/openzeppelin-contracts\n```\n\n----------------------------------------\n\nTITLE: Display help for cast etherscan-source\nDESCRIPTION: This command displays the help information for the `cast etherscan-source` command.  It provides a list of available options and arguments, along with a brief description of each.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/etherscan-source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast etherscan-source --help\"\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Cast Code Command in Bash\nDESCRIPTION: This snippet shows how to get help information for the cast code command used to retrieve the runtime bytecode of an Ethereum contract. It provides a summary of usage and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/code.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast code --help\n```\n\n----------------------------------------\n\nTITLE: Solidity Error Signature\nDESCRIPTION: Defines the signature for the `indexOOBError` in Solidity.  This error is triggered when trying to access an element of an array that is out of bounds.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/indexOOBError.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\n\"stdError.indexOOBError\"\n```\n\n----------------------------------------\n\nTITLE: Defining keyExistsToml Function Signature in Solidity\nDESCRIPTION: Function signature for `keyExistsToml`, which checks if a key exists in a TOML table. It takes two string parameters: the TOML content and the key to check.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/key-exists-toml.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// Check if a key exists in a TOML table.\nvm.keyExistsToml(string memory toml, string memory key) returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Running mdbook Server with Docker\nDESCRIPTION: Docker command to run the mdbook server, mapping port 3000 and mounting the current directory as a volume.\nSOURCE: https://github.com/foundry-rs/book/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -p 3000:3000 -v `pwd`:/book peaceiris/mdbook serve\n```\n\n----------------------------------------\n\nTITLE: Anvil Completions Usage and Options\nDESCRIPTION: This snippet details the usage and available options for the `anvil completions` command. It shows the required argument `<SHELL>` and various options for customizing the command's behavior, such as the number of threads, display colors, JSON formatting, verbosity, and quiet mode.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/anvil/completions.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: anvil completions [OPTIONS] <SHELL>\n\nArguments:\n  <SHELL>\n          [possible values: bash, elvish, fish, powershell, zsh]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Cast to-hex Command Help Output\nDESCRIPTION: Detailed help output showing all available options and arguments for the cast to-hex command, including base conversion options, threading controls, display formatting, and verbosity settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-hex.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-hex [OPTIONS] [VALUE]\n\nArguments:\n  [VALUE]\n          The value to convert\n\nOptions:\n  -i, --base-in <BASE_IN>\n          The input base\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Verifying a Contract with Oklink Using Shell\nDESCRIPTION: This command verifies a specified contract on Oklink with the necessary API keys and URL.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-verify-contract.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nforge verify-contract 0x8CDDE82cFB4555D6ca21B5b28F97630265DA94c4 Counter --verifier oklink --verifier-url https://www.oklink.com/api/v5/explorer/contract/verify-source-code-plugin/XLAYER  --api-key $OKLINK_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Defining gas_report_samples Configuration\nDESCRIPTION: This configuration specifies the `gas_report_samples`, which is an integer indicating how many runs to use when generating a gas report. The default value is 256 and can be adjusted via the environment variable `FOUNDRY_INVARIANT_GAS_REPORT_SAMPLES`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `gas_report_samples`\n\n- Type: integer\n- Default: 256\n- Environment: `FOUNDRY_INVARIANT_GAS_REPORT_SAMPLES`\n\nNumber of runs to use for generating gas report.\n```\n\n----------------------------------------\n\nTITLE: Using Broadcast Controls in Solidity Deployment\nDESCRIPTION: Example demonstrating how to use broadcast controls including stopBroadcast() in a deployment function. Shows both single transaction broadcasting and multiple transaction broadcasting scenarios.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/stop-broadcast.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployNoArgs() public {\n    // broadcast the next call\n    cheats.broadcast();\n    Test test1 = new Test();\n\n    // broadcast all calls between this line and `stopBroadcast`\n    cheats.startBroadcast();\n    Test test2 = new Test();\n    cheats.stopBroadcast();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum EVM Version for Compilation in Foundry\nDESCRIPTION: This setting defines the minimum EVM version for compilation. It conflicts with the 'evm_version' setting and requires the 'max_evm_version' setting to be specified.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n##### `compilation_restriction.min_evm_version`\n\n- Type: string\n\nRestrict compilation for a min version of [evm_version](#evm_version) setting. Conflicts with `evm_version` setting, requires `max_evm_version` setting.\n```\n\n----------------------------------------\n\nTITLE: Defining AccountAccessKind Enum and Structs for State Diff Recording in Solidity\nDESCRIPTION: This snippet defines the AccountAccessKind enum and several structs (ChainInfo, AccountAccess, StorageAccess) used for recording and representing state changes in Ethereum smart contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/stop-and-return-state-diff.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nenum AccountAccessKind {\n    Call,\n    DelegateCall,\n    CallCode,\n    StaticCall,\n    Create,\n    SelfDestruct,\n    Resume,\n    Balance,\n    Extcodesize,\n    Extcodehash,\n    Extcodecopy\n}\n\nstruct ChainInfo {\n    uint256 forkId;\n    uint256 chainId;\n}\n\nstruct AccountAccess {\n    ChainInfo chainInfo;\n    AccountAccessKind kind;\n    address account;\n    address accessor;\n    bool initialized;\n    uint256 oldBalance;\n    uint256 newBalance;\n    bytes deployedCode;\n    uint256 value;\n    bytes data;\n    bool reverted;\n    StorageAccess[] storageAccesses;\n    uint64 depth;\n}\n\nstruct StorageAccess {\n    address account;\n    bytes32 slot;\n    bool isWrite;\n    bytes32 previousValue;\n    bytes32 newValue;\n    bool reverted;\n}\n\nfunction stopAndReturnStateDiff() external returns (AccountAccess[] memory accesses);\n```\n\n----------------------------------------\n\nTITLE: Importing OpenZeppelin ERC20 Contract in Solidity\nDESCRIPTION: This JavaScript snippet demonstrates how to import the ERC20 contract from OpenZeppelin after setting up the remappings. It uses the @openzeppelin prefix to import the contract.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vscode.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: RPC Endpoint Configuration\nDESCRIPTION: TOML configuration for defining RPC endpoints that can be used with prompts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prompt.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[rpc_endpoints]\nmainnet = \"https://eth.llamarpc.com\"\npolygon = \"https://polygon.llamarpc.com\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Selectors Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast selectors' command in Foundry, providing details on its usage, arguments, and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/selectors.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast selectors --help\n```\n\n----------------------------------------\n\nTITLE: Verified ENS Reverse Lookup with Cast CLI\nDESCRIPTION: An example showing how to perform an ENS reverse lookup with verification. The --verify flag performs both a reverse lookup and a normal lookup to ensure the address is correct.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-lookup-address.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast lookup-address --verify $ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Displaying Chisel Load Help Command\nDESCRIPTION: Shows how to access the help documentation for the chisel load command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/chisel/load.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ chisel load --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Resolve-Name Command in Bash\nDESCRIPTION: This snippet shows how to display the help information for the 'cast resolve-name' command using the --help option.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/resolve-name.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast resolve-name --help\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Forge in Bash\nDESCRIPTION: This snippet provides a command to display the help message for the Forge CLI, which aids users in understanding available commands and options for managing Solidity smart contracts.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge --help\n```\n\n----------------------------------------\n\nTITLE: Executing Cast Decode-String Command\nDESCRIPTION: Provides a command to display help information for the 'cast decode-string' utility. This is used to understand the available commands and options for decoding ABI-encoded strings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/decode-string.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast decode-string --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiline Function Headers - Solidity\nDESCRIPTION: The `multiline_func_header` option controls the formatting of long function headers that exceed the maximum line length. It allows different styles such as 'attributes_first', 'params_first', and 'all' for better readability.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/formatter.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction myFunction(\n    uint256 param1, \n    uint256 param2,\n    uint256 param3\n) public returns (uint256) {\n  // ...\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction myFunction(\n    uint256 param1,\n    uint256 param2, \n    uint256 param3\n) \n    public \n    returns (uint256) \n{\n  // ...  \n}\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Foundry Versions\nDESCRIPTION: Commands demonstrating how to install different versions of Foundry using Foundryup.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/announcements.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nfoundryup --install nightly\nfoundryup --install stable\nfoundryup --install 0.3.0\n```\n\n----------------------------------------\n\nTITLE: Running Cast Block Query with Docker\nDESCRIPTION: Example of using the Foundry Docker image to fetch latest block information using cast command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/foundry-in-docker.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run foundry \"cast block --rpc-url $RPC_URL latest\"\n```\n\n----------------------------------------\n\nTITLE: Cast Checksum Usage Documentation\nDESCRIPTION: Detailed help output showing all available options and arguments for the to-check-sum-address command, including threading options, display configurations, and verbosity levels\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-check-sum-address.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-check-sum-address [OPTIONS] [ADDRESS]\n\nArguments:\n  [ADDRESS]\n          The address to convert\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Asserting Approximate Equality for Signed Integers in Solidity\nDESCRIPTION: This function asserts that two signed integers are approximately equal, with a designated maximum delta and decimal precision. Similar to the unsigned version, it can also take an error message to describe the assertion failure.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assertApproxEqAbsDecimal.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) internal;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string memory err) internal;\n```\n\n----------------------------------------\n\nTITLE: Installing libusb on MacOS\nDESCRIPTION: This command installs the libusb library on MacOS using Homebrew, which is necessary for running certain Foundry binaries without errors related to missing libraries.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install libusb\n```\n\n----------------------------------------\n\nTITLE: Executing Cast Chain Help Command\nDESCRIPTION: Command to display help documentation for the cast chain command, showing available options and usage instructions\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/chain.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast chain --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Sorting - Solidity\nDESCRIPTION: The `sort_imports` option in Foundry organizes import statements alphabetically within their groups, improving code readability and maintainability. It is dependent on whether the sorting feature is enabled.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/formatter.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// Example of sorted imports\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum EVM Version for Compilation in Foundry\nDESCRIPTION: This option sets the maximum EVM version for compilation. It conflicts with the 'evm_version' setting and requires the 'min_evm_version' setting to be specified.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/solidity-compiler.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n##### `compilation_restriction.max_evm_version`\n\n- Type: string\n\nRestrict compilation for a max version of [evm_version](#evm_version) setting. Conflicts with `evm_version` setting, requires `min_evm_version` setting.\n```\n\n----------------------------------------\n\nTITLE: Finding Blocks by Timestamp using Cast in Shell\nDESCRIPTION: Example showing how to use the cast find-block command to retrieve the block number closest to a specific Unix timestamp (New Years 2021).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-find-block.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast find-block 1609459200\n```\n\n----------------------------------------\n\nTITLE: Sleep Function Signature\nDESCRIPTION: Function signature for sleep operation that accepts milliseconds as input parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sleep.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sleep(uint256 milliseconds) external;\n```\n\n----------------------------------------\n\nTITLE: Forcibly Initializing a Foundry Project\nDESCRIPTION: This command forces the initialization of a new Foundry project in the current directory, even if the directory is not empty. Using the `--force` flag overrides the default behavior that prevents initialization in non-empty directories.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-init.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"forge init --force \"\n```\n\n----------------------------------------\n\nTITLE: Defining Mappings in Solidity Smart Contract\nDESCRIPTION: Example Solidity code showing the declaration of two mappings in a smart contract: one that maps addresses to uint256 values and another that maps strings to strings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-index.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// World.sol\n\nmapping (address => uint256) public mapping1;\nmapping (string => string) public mapping2;\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Forge Geiger Command - Text\nDESCRIPTION: This snippet provides detailed usage instructions for the 'forge geiger' command, including arguments and available options, allowing users to customize how the command operates.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/geiger.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: forge geiger [OPTIONS] [PATH]...\n\nArguments:\n  [PATH]...\n          Paths to files or directories to detect\n\nOptions:\n      --root <PATH>\n          The project's root path.\n          \n          By default root of the Git repository, if in one, or the current\n          working directory.\n\n      --ignore <PATH>...\n          Globs to ignore\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Chisel Clear Cache Command Help Output\nDESCRIPTION: This snippet shows the full help output for the 'chisel clear-cache' command. It includes usage syntax, available options for thread control and display settings, and detailed explanations for each option.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/chisel/clear-cache.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: chisel clear-cache [OPTIONS]\n\nOptions:\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDisplay options:\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n\n  -q, --quiet\n          Do not print log messages\n\n      --json\n          Format log messages as JSON\n\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Compute Address Command in Cast CLI\nDESCRIPTION: This snippet demonstrates how to invoke the help command for the 'compute-address' operation within the Cast CLI, providing information on its usage and options. It is a bash command that does not require additional dependencies.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/compute-address.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast compute-address --help\n```\n\n----------------------------------------\n\nTITLE: Updating Foundry Installation\nDESCRIPTION: Command to update the Foundry installation to the latest stable release using curl.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/announcements.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\n```\n\n----------------------------------------\n\nTITLE: Exporting and Executing Shell Commands with Chisel\nDESCRIPTION: Demonstrates the execution of a shell command within the Chisel REPL environment. The command executed lists all files in the current directory, showcasing the ability to perform system-level operations from within Chisel.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/chisel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n➜ !e ls\nCHANGELOG.md\nLICENSE\nREADME.md\nTESTS.md\nartifacts\ncache\ncontracts\ncrytic-export\ndeploy\ndeploy-config\ndeployments\ndist\nechidna.yaml\nforge-artifacts\nfoundry.toml\nhardhat.config.ts\nlayout-lock.json\nnode_modules\npackage.json\nscripts\nslither.config.json\nslither.db.json\nsrc\ntasks\ntest-case-generator\ntsconfig.build.json\ntsconfig.build.tsbuildinfo\ntsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Cast to-utf8 Help Command\nDESCRIPTION: Command to display the help information for the cast to-utf8 utility\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-utf8.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-utf8 --help\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy for Connection Issues\nDESCRIPTION: This command sets the HTTP and HTTPS proxy for the terminal to solve connection issues while running the 'forge build' command due to network restrictions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/faq.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexport http_proxy=http://127.0.0.1:7890 https_proxy=http://127.0.0.1:7890\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Assertion in DSTest\nDESCRIPTION: This Solidity code snippet demonstrates how to create a custom assertion method in a DSTest-based testing framework. A test contract can inherit from TestBase to use custom assertions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/faq.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract TestBase is DSTest {\n    function myCustomAssertion(uint a, uint b) {\n      if (a != b) {\n          emit log_string(\"a and b did not match\");\n          fail();\n      }\n    }\n}\n\n```\n\nLANGUAGE: solidity\nCODE:\n```\ncontract MyContractTest is TestBase {\n    function testSomething() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using revokePersistent in a Foundry Test\nDESCRIPTION: Demonstrates how to use the revokePersistent cheatcode in a Foundry test. It creates a contract, makes it persistent, and then revokes its persistent status.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/revoke-persistent.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SimpleStorageContract {\n    string public value;\n\n    function set(uint256 _value) public {\n        value = _value;\n    }\n}\n\nfunction testRevokePersistent() public {\n    // select a specific fork\n    cheats.selectFork(mainnetFork);\n    \n    // create a new contract that's stored in the `mainnetFork` storage\n    SimpleStorageContract simple = new SimpleStorageContract();\n    \n    // `simple` is not marked as persistent\n    assert(!cheats.isPersistent(address(simple)));\n       \n    // make it persistent\n    cheats.makePersistent(address(simple));\n    \n    // ensure it is persistent\n    assert(cheats.isPersistent(address(simple)));\n    \n    // revoke it\n    cheats.revokePersistent(address(simple));\n    \n    // contract no longer persistent\n    assert(!cheats.isPersistent(address(simple)));\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring activeFork Function in Solidity\nDESCRIPTION: Function signature for the activeFork cheatcode in Foundry. It returns the identifier of the currently active fork as a uint256.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/active-fork.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction activeFork() external returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Setting Password Environment Variable\nDESCRIPTION: Defines an environment variable for specifying the Ethereum keystore password.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/script.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[env: ETH_PASSWORD=]\n```\n\n----------------------------------------\n\nTITLE: Display Help for Cast Address Zero\nDESCRIPTION: This snippet shows how to use the `--help` flag with the `cast address-zero` command to display a list of available options and usage instructions. This is useful for understanding the command's functionality and available parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/address-zero.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast address-zero --help\n```\n\n----------------------------------------\n\nTITLE: File and Directory Path Type Verification\nDESCRIPTION: Example demonstrating how to verify if a path points to a file or directory.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/fs.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory validFilePath = \"foo/files/bar.txt\";\ntrueBool(vm.isFile(validFilePath));\n\nstring memory validDirPath = \"foo/files\";\ntrueBool(vm.isDir(validDirPath));\n```\n\n----------------------------------------\n\nTITLE: Soldeer Version Options\nDESCRIPTION: This text block describes the available options for the `forge soldeer version` command, including options for setting the number of threads, controlling color output, formatting logs as JSON, suppressing logs, and adjusting verbosity levels. It outlines the behavior of each option and its potential values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/version.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge soldeer version [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast Wallet Address Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast wallet address' command, providing details on its usage and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/wallet/address.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast wallet address --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Forge Cache Help Command\nDESCRIPTION: Shows the help information for the forge cache ls command\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/cache/ls.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge cache ls --help\n```\n\n----------------------------------------\n\nTITLE: Forge Soldeer Update Options\nDESCRIPTION: This snippet describes the available options for the `forge soldeer update` command. These options allow for customizing dependency updates, remapping management, thread control, and logging verbosity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/update.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge soldeer update [OPTIONS]\n\nOptions:\n  -g, --regenerate-remappings\n          If set, this command will delete the existing remappings and re-create\n          them\n\n  -d, --recursive-deps\n          If set, this command will install the dependencies recursively (via\n          submodules or via soldeer)\n\n      --config-location <CONFIG_LOCATION>\n          Specify the config location without prompting.\n          \n          This prevents prompting the user if the automatic detection can't\n          determine the config location.\n          \n          [possible values: foundry, soldeer]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Example Metadata JSON for Solidity Contract\nDESCRIPTION: This JSON snippet shows an example of the metadata file generated by the Solidity compiler, including compiler version, ABI, and other settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/deterministic-deployments-using-create2.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compiler\": {\n    \"version\": \"0.8.28+commit.7893614a\"\n  },\n  \"language\": \"Solidity\",\n  \"output\": {\n    \"abi\": [\n      {\n        \"inputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\",\n        \"name\": \"increment\"\n      },\n      {\n        \"inputs\": [],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\",\n        \"name\": \"number\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ]\n      },\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"newNumber\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\",\n        \"name\": \"setNumber\"\n      }\n    ],\n    \"devdoc\": {\n      \"kind\": \"dev\",\n      \"methods\": {},\n      \"version\": 1\n    },\n    \"userdoc\": {\n      \"kind\": \"user\",\n      \"methods\": {},\n      \"version\": 1\n    }\n  },\n  \"settings\": {\n    \"remappings\": [\"forge-std/=lib/forge-std/src/\"],\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"metadata\": {\n      \"bytecodeHash\": \"ipfs\"\n    },\n    \"compilationTarget\": {\n      \"src/Counter.sol\": \"Counter\"\n    },\n    \"evmVersion\": \"cancun\",\n    \"libraries\": {}\n  },\n  \"sources\": {\n    \"src/Counter.sol\": {\n      \"keccak256\": \"0x09277f949d59a9521708c870dc39c2c434ad8f86a5472efda6a732ef728c0053\",\n      \"urls\": [\n        \"bzz-raw://94cd5258357da018bf911aeda60ed9f5b130dce27445669ee200313cd3389200\",\n        \"dweb:/ipfs/QmNbEfWAqXCtfQpk6u7TpGa8sTHXFLpUz7uebz2FVbchSC\"\n      ],\n      \"license\": \"UNLICENSED\"\n    }\n  },\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Contributors Table Structure\nDESCRIPTION: HTML table layout displaying contributor information including GitHub avatars, usernames, and contribution types using emoji indicators.\nSOURCE: https://github.com/foundry-rs/book/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ZeroEkkusu\"><img src=\"https://avatars.githubusercontent.com/u/94782988?v=4?s=100\" width=\"100px;\" alt=\"Zero Ekkusu\"/><br /><sub><b>Zero Ekkusu</b></sub></a><br /><a href=\"https://github.com/foundry-rs/book/commits?author=ZeroEkkusu\" title=\"Documentation\">📖</a> <a href=\"https://github.com/foundry-rs/book/pulls?q=is%3Apr+reviewed-by%3AZeroEkkusu\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#maintenance-ZeroEkkusu\" title=\"Maintenance\">🚧</a></td>\n      <!-- Additional contributor cells follow similar pattern -->\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Getting Chain ID using ETH_RPC_URL - Shell Script\nDESCRIPTION: This snippet shows how to get the Ethereum chain ID using the 'cast chain-id' command without explicitly setting the RPC URL, assuming $ETH_RPC_URL is already configured. This provides a quick way to retrieve the chain ID as long as the environment variable is defined.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-chain-id.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast chain-id\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Link for Struct Encoding Documentation\nDESCRIPTION: Markdown link syntax connecting to the struct encoding documentation page in the Foundry book.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/misc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Struct encoding](./struct-encoding.md)\n```\n\n----------------------------------------\n\nTITLE: Using Forge CLI for Coverage Reporting - Bash\nDESCRIPTION: This code snippet demonstrates how to use the Forge CLI to access help information on coverage reporting. Run this command in the terminal to display the help menu for guidance on available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/coverage.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge coverage --help\n```\n\n----------------------------------------\n\nTITLE: Printing Minimum Integer Value - Bash\nDESCRIPTION: This Bash command executes the 'cast min-int' command with the '--help' option to display usage information. It outlines the available arguments and options for retrieving the minimum integer value for specified types.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/min-int.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast min-int --help\"\n```\n\n----------------------------------------\n\nTITLE: Cast Creation Code Help\nDESCRIPTION: This command displays the help information for the `cast creation-code` command. It lists all available options, arguments, and their descriptions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/creation-code.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast creation-code --help\n```\n\n----------------------------------------\n\nTITLE: Removing the entire cache using forge cache clean\nDESCRIPTION: Demonstrates how to remove the entire Foundry cache. The command 'forge cache clean' is an alias for this operation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache-clean.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge cache clean all\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Settings for Solidity Dependencies\nDESCRIPTION: This JSON snippet configures VSCode settings to locate Solidity dependencies in the project structure. It specifies the contracts directory as 'src' and the dependencies directory as 'lib'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vscode.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"solidity.packageDefaultDependenciesContractsDirectory\": \"src\",\n  \"solidity.packageDefaultDependenciesDirectory\": \"lib\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Value of Slot 0 on WETH Contract (Bash)\nDESCRIPTION: This example demonstrates how to use `cast storage` to retrieve the value of storage slot 0 for the WETH contract. It requires the `cast` command-line tool to be installed and configured with a valid Ethereum RPC endpoint.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\ncast storage 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 0\n```\n```\n\n----------------------------------------\n\nTITLE: Forge Soldeer Init Help Command\nDESCRIPTION: Displays the help information for the `forge soldeer init` command. This command converts a Foundry project to use Soldeer and has various options related to cleaning, configuration, threads, and display settings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/init.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge soldeer init --help\"\n```\n\n----------------------------------------\n\nTITLE: Usage Information for Forge Selectors Cache (Plaintext)\nDESCRIPTION: This snippet outlines the usage syntax and available options for the forge selectors cache command. It is intended for users to understand how to use the command effectively, including threading, project options, and display configurations.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/selectors/cache.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"Usage: forge selectors cache [OPTIONS]\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          [aliases: jobs]\\n\\nProject options:\\n      --root <PATH>\\n          The project's root path.\\n          By default root of the Git repository, if in one, or the current\\n          working directory.\\n\\n  -C, --contracts <PATH>\\n          The contracts source directory\\n\\n  -R, --remappings <REMAPPINGS>\\n          The project's remappings\\n\\n      --remappings-env <ENV>\\n          The project's remappings from the environment\\n\\n      --cache-path <PATH>\\n          The path to the compiler cache\\n\\n      --lib-paths <PATH>\\n          The path to the library folder\\n\\n      --hardhat\\n          Use the Hardhat-style project layout.\\n          This is the same as using: `--contracts contracts --lib-paths\\n          node_modules`.\\n          [aliases: hh]\\n\\n      --config-path <FILE>\\n          Path to the config file\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          Depending on the context the verbosity levels have different meanings.\\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Usage Command Overview for Forge Generate - Text\nDESCRIPTION: This snippet outlines the usage and available commands for the 'forge generate' command. It specifies the options such as help, threads, and verbosity levels, which control various aspects of generating scaffolding files.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/generate.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge generate [OPTIONS] <COMMAND>\\n\\nCommands:\\n  test  Scaffolds test file for given contract\\n  help  Print this message or the help of the given subcommand(s)\\n\\nOptions:\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          [aliases: jobs]\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\\n\\n      --json\\n          Format log messages as JSON\\n\\n  -q, --quiet\\n          Do not print log messages\\n\\n  -v, --verbosity...\\n          Verbosity level of the log messages.\\n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\\n          Depending on the context the verbosity levels have different meanings.\\n          For example, the verbosity levels of the EVM are:\\n          - 2 (-vv): Print logs for all tests.\\n          - 3 (-vvv): Print execution traces for failing tests.\\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\\n          for failing tests.\\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\\n          including storage changes.\"\n```\n\n----------------------------------------\n\nTITLE: Cast Artifact Command Line\nDESCRIPTION: The snippet demonstrates how to execute the 'cast artifact' command to generate an artifact file for a specified Ethereum contract. This tool is used to deploy contracts locally, and it provides several options such as specifying the ABI path, output location, chain details, and additional RPC configurations. This usage information is essential for developers working with Ethereum contracts and deploying them in different environments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/artifact.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast artifact --help\n```\n\n----------------------------------------\n\nTITLE: Forge Completions Help: Displaying Command Usage\nDESCRIPTION: This code snippet shows how to display the help message for the `forge completions` command using the `--help` flag. This will output the command's usage, available arguments, and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/completions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge completions --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage Information for cast from-utf8 - Text\nDESCRIPTION: This text block provides the detailed usage information for the 'cast from-utf8' command, describing the arguments and options available for users. It includes parameters for threading, logging colors, quiet mode, and verbosity.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/from-utf8.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast from-utf8 [OPTIONS] [TEXT]\n\nArguments:\n  [TEXT]\n          The text to convert\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Defining setArbitraryStorage Cheatcode Signature in Solidity\nDESCRIPTION: Function signature for the setArbitraryStorage cheatcode that accepts a target address parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/set-arbitrary-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setArbitraryStorage(address target) external;\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Table of Contributors\nDESCRIPTION: This HTML snippet renders a table of contributors to the Foundry-rs book project. It includes avatars, usernames, and contribution types for each contributor.\nSOURCE: https://github.com/foundry-rs/book/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.youtube.com/channel/UCaU88FuhkVKO0PJViRjvTLw\"><img src=\"https://avatars.githubusercontent.com/u/85150796?v=4?s=100\" width=\"100px;\" alt=\"Kristian Quirapas\"/><br /><sub><b>Kristian Quirapas</b></sub></a><br /><a href=\"#maintenance-kquirapas\" title=\"Maintenance\">🚧</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Sweng0d\"><img src=\"https://avatars.githubusercontent.com/u/101097089?v=4?s=100\" width=\"100px;\" alt=\"Bruno Filetti\"/><br /><sub><b>Bruno Filetti</b></sub></a><br /><a href=\"https://github.com/foundry-rs/book/commits?author=Sweng0d\" title=\"Documentation\">📖</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/PraneshASP\"><img src=\"https://avatars.githubusercontent.com/u/42379522?v=4?s=100\" width=\"100px;\" alt=\"Pranesh A S\"/><br /><sub><b>Pranesh A S</b></sub></a><br /><a href=\"#maintenance-PraneshASP\" title=\"Maintenance\">🚧</a></td>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Creating Address and Private Key in Solidity\nDESCRIPTION: This snippet demonstrates how to call the `makeAddrAndKey` function, capturing the resulting address and private key for further use. It includes logging the results of these values to the console, providing insight into the function's output. Required dependencies include emitting events to log addresses and integers. The inputs are the string name for address generation, and the outputs are the logged address and private key values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/make-addr-and-key.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(address alice, uint256 key) = makeAddrAndKey(\"alice\");\nemit log_address(alice); // 0x328809bc894f92807417d2dad6b7c998c1afdac6\nemit log_uint(key); // 70564938991660933374592024341600875602376452319261984317470407481576058979585\n```\n\n----------------------------------------\n\nTITLE: Displaying Cast TX-Pool Status Help Command\nDESCRIPTION: Shows how to access the help documentation for the cast tx-pool status command\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx-pool/status.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast tx-pool status --help\n```\n\n----------------------------------------\n\nTITLE: Defining the `fail` Function in Solidity\nDESCRIPTION: Defines the signature of the `fail` function, which is used internally to terminate execution and indicate test failure by accepting a string message. No additional dependencies are required as it is an internal function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/fail.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fail(string memory err) internal virtual;\n```\n\n----------------------------------------\n\nTITLE: Cast to-bytes32 Command Help Output\nDESCRIPTION: Comprehensive help documentation showing usage, arguments, and options for the cast to-bytes32 command, including threading options, display customization, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-bytes32.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-bytes32 [OPTIONS] [BYTES]\n\nArguments:\n  [BYTES]\n          The hex data to convert\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Defining Coinbase Cheatcode Signature in Solidity\nDESCRIPTION: This snippet shows the function signature for the `coinbase` cheatcode in Foundry. It takes an address parameter and is an external function.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/coinbase.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction coinbase(address) external;\n```\n\n----------------------------------------\n\nTITLE: Displaying Forge Soldeer Version Dry Run Help\nDESCRIPTION: This command displays the help information for the `forge soldeer version-dry-run` command. It shows the usage and available options, such as the `--help` flag, which provides a description of each available flag or argument. The output gives users insight into how to use this command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/version-dry-run.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge soldeer version-dry-run --help\nUsage: forge soldeer version-dry-run\n\nOptions:\n  -h, --help  Print help\n```\n\n----------------------------------------\n\nTITLE: Executing cast Command with Help Option - Bash\nDESCRIPTION: This command illustrates the usage of the 'cast from-utf8' command to display help information about its options. It is intended for users to quickly understand how to use the command-line tool.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/from-utf8.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast from-utf8 --help\n```\n\n----------------------------------------\n\nTITLE: Defining txGasPrice Function Signature in Solidity\nDESCRIPTION: The function signature for txGasPrice, which takes a uint256 parameter to set the new gas price.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/tx-gas-price.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction txGasPrice(uint256) external;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction txGasPrice(uint256 newGasPrice) external;\n```\n\n----------------------------------------\n\nTITLE: ABI Representation of a Nested Struct Function\nDESCRIPTION: This JSON snippet shows the ABI representation of a function that takes a nested struct as an argument. It details the complex input structure including the nested components.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/misc/struct-encoding.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"inputs\": [\n        {\n            \"name\": \"t\",\n            \"type\": \"tuple\",\n            \"internalType\": \"struct Test.MyStruct\",\n            \"components\": [\n                {\n                    \"name\": \"nestedStructName\",\n                    \"type\": \"string\",\n                    \"internalType\": \"string\"\n                },\n                {\n                    \"name\": \"nestedStructCount\",\n                    \"type\": \"uint256\",\n                    \"internalType\": \"uint256\"\n                },\n                {\n                    \"name\": \"_nestedStruct\",\n                    \"type\": \"tuple\",\n                    \"internalType\": \"struct Test.nestedStruct\",\n                    \"components\": [\n                        {\n                            \"name\": \"addr\",\n                            \"type\": \"address\",\n                            \"internalType\": \"address\"\n                        },\n                        {\n                            \"name\": \"amount\",\n                            \"type\": \"uint256\",\n                            \"internalType\": \"uint256\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    \"name\": \"f\",\n    \"outputs\": [],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\"\n}\n```\n\n----------------------------------------\n\nTITLE: Foundry Configuration for EIP-7702\nDESCRIPTION: Required Foundry configuration to enable Prague hardfork features for EIP-7702 support\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/sign-delegation.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nevm_version = \"prague\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast from-Wei Command - Bash\nDESCRIPTION: This command provides help information for using the 'from-wei' function of the 'cast' tool, outlining its usage and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/from-wei.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cast from-wei --help\"\n```\n\n----------------------------------------\n\nTITLE: Getting Help for cast age Command\nDESCRIPTION: This snippet shows how to display help information for the 'cast age' command, which provides usage instructions and options available for retrieving block timestamps. No additional dependencies are required for this command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/age.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast age --help\n```\n\n----------------------------------------\n\nTITLE: Defining Breakpoint Cheatcode Signatures in Solidity\nDESCRIPTION: Defines the function signatures for the breakpoint cheatcode. It includes two overloads: one that takes a string parameter, and another that takes a string and a boolean parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/breakpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction breakpoint(string) external;\nfunction breakpoint(string, bool) external;\n```\n\n----------------------------------------\n\nTITLE: Setting Fork Block Number in Foundry EVM\nDESCRIPTION: Command-line option for fetching state from a specific block number. Works in conjunction with the fork URL option.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/evm-options.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--fork-block-number block\n```\n\n----------------------------------------\n\nTITLE: Executing Anvil Completions with Help Flag\nDESCRIPTION: This snippet shows the basic usage of the `anvil completions` command with the `--help` flag to display help information about the command and its options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/anvil/completions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ anvil completions --help\"\n```\n\n----------------------------------------\n\nTITLE: Checking Soldeer Help Command\nDESCRIPTION: Shows how to access the help documentation for the Soldeer dependency manager using the Forge CLI.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge soldeer --help\n```\n\n----------------------------------------\n\nTITLE: Generating Vanity Address with Suffix\nDESCRIPTION: This snippet shows how to create a new keypair that ends with a specified suffix. The command uses the '--ends-with' option to define the hex suffix for the generated address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-wallet-vanity.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast wallet vanity --ends-with beef\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Value Snapshot Example\nDESCRIPTION: Example demonstrating how to capture arbitrary numerical values in snapshots.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/gas-snapshots.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SnapshotGasTest is Test {\n    uint256 public slot0;\n\n    /// Writes to `snapshots/SnapshotGasTest.json` group with name `valueA`, `valueB`, and `valueC`.\n    function testSnapshotValue() public {\n        uint256 a = 123;\n        uint256 b = 456;\n        uint256 c = 789;\n\n        vm.snapshotValue(\"valueA\", a);\n        vm.snapshotValue(\"valueB\", b);\n        vm.snapshotValue(\"valueC\", c);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for cast tx-pool content Command in Bash\nDESCRIPTION: This command shows the help information for the 'cast tx-pool content' command, which is used to fetch the content of the transaction pool.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/tx-pool/content.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast tx-pool content --help\n```\n\n----------------------------------------\n\nTITLE: Implementing Bounded Function with Inheritance\nDESCRIPTION: Bounded handler function that leverages inheritance to reuse the implementation from the unbounded version while adding input validation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/invariant-testing.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\n// Bounded\nfunction deposit(uint256 assets) external {\n    assets = bound(assets, 0, 1e30);\n\n    super.deposit(assets);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages Between Anvil Accounts with Cast\nDESCRIPTION: This command demonstrates how to use Cast to send a message from one Anvil account to another, encoding the message as UTF-8 data.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cast/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncast send --private-key <PRIVATE_KEY> 0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc $(cast from-utf8 \"hello world\") --rpc-url http://127.0.0.1:8545/\n```\n\n----------------------------------------\n\nTITLE: Undecoded Contract Trace Format\nDESCRIPTION: Illustrates the trace format when Forge cannot decode function signatures or values, showing raw address and calldata information.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/traces.md#2025-04-22_snippet_2\n\nLANGUAGE: ignore\nCODE:\n```\n  [<Gas Usage>] <Address>::<Calldata>\n    └─ ← <Return Data>\n```\n\n----------------------------------------\n\nTITLE: Loading Storage Slot Value Function Signature\nDESCRIPTION: Function signature for loading a value from a specific storage slot of a contract account\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/load.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction load(address account, bytes32 slot) external returns (bytes32);\n```\n\n----------------------------------------\n\nTITLE: Usage and Options for cast to-wei Command\nDESCRIPTION: This snippet outlines the complete usage guide for the 'cast to-wei' command, including its arguments, options, and display settings. It details the command's ability to convert ETH amounts to wei, with customizable units and various output formatting options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-wei.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast to-wei [OPTIONS] [VALUE] [UNIT]\n\nArguments:\n  [VALUE]\n          The value to convert\n\n  [UNIT]\n          The unit to convert from (ether, gwei, wei)\n          \n          [default: eth]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Removing the entire block explorer cache with forge cache clean\nDESCRIPTION: Shows how to specifically clean only the block explorer cache data across all chains using the --etherscan flag.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache-clean.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge cache clean all --etherscan\n```\n\n----------------------------------------\n\nTITLE: Cast Namehash Usage and Options\nDESCRIPTION: This text block outlines the usage, arguments, and options available for the `cast namehash` command. It details the command's structure, available arguments, and customizable options for thread control, display settings, and verbosity levels.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/namehash.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast namehash [OPTIONS] [NAME]\n\nArguments:\n  [NAME]\n          \n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Defining assumePayable in Solidity\nDESCRIPTION: The function `assumePayable` is used to test if a given address can accept Ether by attempting an external call. It relies on the `assume` functionality for this verification. This function requires the address to be public. There are no other specific dependencies for this function, but it assumes the presence of `assume` capability in the surrounding environment.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/assume-payable.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction assumePayable(address addr) public;\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Difference Function in Solidity\nDESCRIPTION: This snippet demonstrates how to call the 'delta' function with example values of -1 and 3, storing the result in 'four'. It showcases the functionality of the 'delta' function and its expected output, which will be 4.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/delta.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 four = stdMath.delta(-1, 3);\n```\n\n----------------------------------------\n\nTITLE: Help Output for Cast Selectors Command\nDESCRIPTION: This snippet shows the detailed help output for the 'cast selectors' command, including its usage, arguments, options, and display settings. It explains how to use the command to extract function selectors from bytecode and optionally resolve their signatures.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/selectors.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast selectors [OPTIONS] [BYTECODE]\n\nArguments:\n  [BYTECODE]\n          The hex-encoded bytecode\n\nOptions:\n  -r, --resolve\n          Resolve the function signatures for the extracted selectors using\n          <https://openchain.xyz>\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -j, --threads <THREADS>\n          Number of threads to use. Specifying 0 defaults to the number of\n          logical cores\n          \n          [aliases: jobs]\n\nDisplay options:\n      --color <COLOR>\n          The color of the log messages\n\n          Possible values:\n          - auto:   Intelligently guess whether to use color output (default)\n          - always: Force color output\n          - never:  Force disable color output\n\n      --json\n          Format log messages as JSON\n\n  -q, --quiet\n          Do not print log messages\n\n  -v, --verbosity...\n          Verbosity level of the log messages.\n          \n          Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n          \n          Depending on the context the verbosity levels have different meanings.\n          \n          For example, the verbosity levels of the EVM are:\n          - 2 (-vv): Print logs for all tests.\n          - 3 (-vvv): Print execution traces for failing tests.\n          - 4 (-vvvv): Print execution traces for all tests, and setup traces\n          for failing tests.\n          - 5 (-vvvvv): Print execution and setup traces for all tests,\n          including storage changes.\n```\n\n----------------------------------------\n\nTITLE: Converting Hex to ASCII Using Shell\nDESCRIPTION: This shell command converts hexadecimal data into an ASCII string. No additional dependencies are needed besides having the command 'cast to-ascii' available in the shell environment. It accepts a hex string prefixed with '0x' as input and outputs the equivalent ASCII string. The command assumes that the input is correctly formatted hex data.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-ascii.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast to-ascii \\\"0x68656c6c6f\\\"\n```\n\n----------------------------------------\n\nTITLE: Normalize hex value from environment variable using cast to-hexdata\nDESCRIPTION: This example demonstrates how to normalize a hexadecimal value stored in an environment variable using `cast to-hexdata`. The input `@MY_VAR` refers to the value stored in the `MY_VAR` environment variable, which `cast to-hexdata` will process.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-hexdata.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n```sh\ncast to-hexdata \"@MY_VAR\"\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning a Contract Without Creating a Git Repository\nDESCRIPTION: This command shows how to clone a contract while preventing the automatic creation of a git repository. It's useful when the user does not want version control for the cloned project.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-clone.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge clone --no-git 0x8f8EF111B67C04Eb1641f5ff19EE54Cda062f163 UniswapV3Pool\n```\n\n----------------------------------------\n\nTITLE: Defining deal Function Signature in Solidity\nDESCRIPTION: Specifies the function signature for the 'deal' cheatcode in Foundry. It takes an address and a new balance as parameters.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/deal.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deal(address who, uint256 newBalance) external;\n```\n\n----------------------------------------\n\nTITLE: Getting Event Signature using Cast CLI - Shell\nDESCRIPTION: This snippet illustrates how to use the 'cast 4byte-event' command to retrieve the event signature for a specified topic 0. It is part of a command line tool that interfaces with the OpenChain signatures service.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-4byte-event.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast 4byte-event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n```\n\n----------------------------------------\n\nTITLE: Using Raw Hex Data in Transaction Input with Foundry Cast\nDESCRIPTION: Example of using 'cast mktx' to sign a transaction with raw hexadecimal data in the input field instead of ABI-encoded function call.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-mktx.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncast mktx 0x... 0x68656c6c6f20776f726c64\n```\n\n----------------------------------------\n\nTITLE: Converting Address to Checksummed Format Using Shell Script\nDESCRIPTION: This snippet demonstrates how to convert a given Ethereum address into a checksummed format using the 'cast to-check-sum-address' command. The functionality relies on EIP-55 which defines the checksum format for Ethereum addresses. The input must be a valid Ethereum address, and the output will be the checksummed version of that address.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-check-sum-address.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast to-check-sum-address 0xDf99A0839818B3f120EBAC9B73f82B617Dc6A555\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Target Address in StdStorage (Solidity)\nDESCRIPTION: This function sets the address of the contract to be targeted for storage manipulation in the StdStorage contract. It takes the storage reference of StdStorage and the target address as parameters, and returns the updated StdStorage object. The default value for the target address is address(0).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/target.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction target(StdStorage storage self, address _target) internal returns (StdStorage storage);\n```\n\n----------------------------------------\n\nTITLE: Converting Fixed Point Number to Integer using cast from-fixed-point\nDESCRIPTION: Example showing how to use the cast from-fixed-point command to convert 10.55 with 2 decimal places to an integer value. The command takes the number of decimals as the first parameter and the fixed point value as the second parameter.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-from-fixed-point.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast from-fixed-point 2 10.55\n```\n\n----------------------------------------\n\nTITLE: Verifying a Flattened Contract with Specific Compiler Version Using Shell\nDESCRIPTION: This command verifies a flattened contract built with a specific version of the Solidity compiler, including ABI-encoded constructor arguments.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-verify-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge verify-contract --flatten --watch --compiler-version \"v0.8.11+commit.d7f03943\" \\\n  --constructor-args $(cast abi-encode \"constructor(string,string,uint256,uint256)\" \"ForgeUSD\" \"FUSD\" 18 1000000000000000000000) \\\n  <address> MyToken\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Transaction Field in Bash\nDESCRIPTION: Demonstrates how to extract a specific field from a transaction, in this case retrieving the sender (from) address of a transaction. Useful for targeted transaction information retrieval.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-tx.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast tx $TX_HASH from\n```\n\n----------------------------------------\n\nTITLE: Converting String to Bytes32 Format in Bash\nDESCRIPTION: Example of using the cast format-bytes32-string command to convert the string \"hello\" into bytes32 hex encoding. This command is specifically designed for Solidity string literals and not for padding byte strings.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-format-bytes32-string.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast format-bytes32-string \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Installing a dependency without git submodule using forge\nDESCRIPTION: This command installs the `solmate` library from the `transmissions11` GitHub repository, but it prevents the repository from being added as a git submodule. The `--no-git` flag disables submodule creation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-install.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nforge install --no-git transmissions11/solmate\n```\n\n----------------------------------------\n\nTITLE: Including Command and Output in Documentation\nDESCRIPTION: Shows how to include auto-generated CLI output with both command and its result using Handlebars include syntax. This helps maintain documentation accuracy when CLI tools change.\nSOURCE: https://github.com/foundry-rs/book/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#include ../output/abc/xyz:all}}\n```\n\n----------------------------------------\n\nTITLE: Starting Hoax with Origin Address in Solidity\nDESCRIPTION: This function allows the initiation of a prank from a designated address while specifying the origin address. This can be useful for scenarios requiring identity preservation.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/startHoax.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startHoax(address who, address origin) public;\n```\n\n----------------------------------------\n\nTITLE: Forge Config Options: Listing Available Configuration Parameters\nDESCRIPTION: This text block presents the available options for the `forge config` command. The options are grouped by functionality such as build, cache, compiler, project, watch, EVM, fork, executor environment, and display.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/config.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"Usage: forge config [OPTIONS] [PATHS]...\\n\\nOptions:\\n      --basic\\n          Print only a basic set of the currently set config values\\n\\n      --fix\\n          Attempt to fix any configuration warnings\\n\\n  -h, --help\\n          Print help (see a summary with '-h')\\n\\n  -j, --threads <THREADS>\\n          Number of threads to use. Specifying 0 defaults to the number of\\n          logical cores\\n          \\n          [aliases: jobs]\\n\\nBuild options:\\n  --names\\n          Print compiled contract names\\n\\n  --sizes\\n          Print compiled contract sizes. Constructor argument length is not\\n          included in the calculation of initcode size\\n\\n  --ignore-eip-3860\\n          Ignore initcode contract bytecode size limit introduced by EIP-3860\\n\\n  --no-cache\\n          Disable the cache\\n\\n  --dynamic-test-linking\\n          Enable dynamic test linking\\n\\n  --eof\\n          Whether to compile contracts to EOF bytecode\\n\\n  --skip <SKIP>...\\n          Skip building files whose names contain the given filter.\\n          \\n          `test` and `script` are aliases for `.t.sol` and `.s.sol`.\\n\\n  [PATHS]...\\n          Build source files from specified paths\\n\\nCache options:\\n  --force\\n          Clear the cache and artifacts folder and recompile\\n\\nLinker options:\\n  --libraries <LIBRARIES>\\n          Set pre-linked libraries\\n          \\n          [env: DAPP_LIBRARIES=]\\n\\nCompiler options:\\n  --ignored-error-codes <ERROR_CODES>\\n          Ignore solc warnings by error code\\n\\n  --deny-warnings\\n          Warnings will trigger a compiler error\\n\\n  --no-auto-detect\\n          Do not auto-detect the `solc` version\\n\\n  --use <SOLC_VERSION>\\n          Specify the solc version, or a path to a local solc, to build with.\\n          \\n          Valid values are in the format `x.y.z`, `solc:x.y.z` or\\n          `path/to/solc`.\\n\\n  --offline\\n          Do not access the network.\\n          \\n          Missing solc versions will not be installed.\\n\\n  --via-ir\\n          Use the Yul intermediate representation compilation pipeline\\n\\n  --use-literal-content\\n          Changes compilation to only use literal content and not URLs\\n\\n  --no-metadata\\n          Do not append any metadata to the bytecode.\\n          \\n          This is equivalent to setting `bytecode_hash` to `none` and\\n          `cbor_metadata` to `false`.\\n\\n  --ast\\n          Includes the AST as JSON in the compiler output\\n\\n  --evm-version <VERSION>\\n          The target EVM version\\n\\n  --optimize [<OPTIMIZE>]\\n          Activate the Solidity optimizer\\n          \\n          [possible values: true, false]\\n\\n  --optimizer-runs <RUNS>\\n          The number of runs specifies roughly how often each opcode of the\\n          deployed code will be executed across the life-time of the contract.\\n          This means it is a trade-off parameter between code size (deploy cost)\\n          and code execution cost (cost after deployment). An `optimizer_runs`\\n          parameter of `1` will produce short but expensive code. In contrast, a\\n          larger `optimizer_runs` parameter will produce longer but more gas\\n          efficient code\\n\\n  --extra-output <SELECTOR>...\\n          Extra output to include in the contract's artifact.\\n          \\n          Example keys: evm.assembly, ewasm, ir, irOptimized, metadata\\n          \\n          For a full description, see\\n          <https://docs.soliditylang.org/en/v0.8.13/using-the-compiler.html#input-description>\\n\\n  --extra-output-files <SELECTOR>...\\n          Extra output to write to separate files.\\n          \\n          Valid values: metadata, ir, irOptimized, ewasm, evm.assembly\\n\\nProject options:\\n  -o, --out <PATH>\\n          The path to the contract artifacts folder\\n\\n      --revert-strings <REVERT>\\n          Revert string configuration.\\n          \\n          Possible values are \\\"default\\\", \\\"strip\\\" (remove), \\\"debug\\\"\\n          (Solidity-generated revert strings) and \\\"verboseDebug\\\"\\n\\n      --build-info\\n          Generate build info files\\n\\n      --build-info-path <PATH>\\n          Output path to directory that build info files will be written to\\n\\n      --root <PATH>\\n          The project's root path.\\n          \\n          By default root of the Git repository, if in one, or the current\\n          working directory.\\n\\n  -C, --contracts <PATH>\\n          The contracts source directory\\n\\n  -R, --remappings <REMAPPINGS>\\n          The project's remappings\\n\\n      --remappings-env <ENV>\\n          The project's remappings from the environment\\n\\n      --cache-path <PATH>\\n          The path to the compiler cache\\n\\n      --lib-paths <PATH>\\n          The path to the library folder\\n\\n      --hardhat\\n          Use the Hardhat-style project layout.\\n          \\n          This is the same as using: `--contracts contracts --lib-paths\\n          node_modules`.\\n          \\n          [aliases: hh]\\n\\n      --config-path <FILE>\\n          Path to the config file\\n\\nWatch options:\\n  -w, --watch [<PATH>...]\\n          Watch the given files or directories for changes.\\n          \\n          If no paths are provided, the source and test directories of the\\n          project are watched.\\n\\n      --no-restart\\n          Do not restart the command while it's still running\\n\\n      --run-all\\n          Explicitly re-run all tests when a change is made.\\n          \\n          By default, only the tests of the last modified test file are\\n          executed.\\n\\n      --watch-delay <DELAY>\\n          File update debounce delay.\\n          \\n          During the delay, incoming change events are accumulated and only once\\n          the delay has passed, is an action taken. Note that this does not mean\\n          a command will be started: if --no-restart is given and a command is\\n          already running, the outcome of the action will be to do nothing.\\n          \\n          Defaults to 50ms. Parses as decimal seconds by default, but using an\\n          integer with the `ms` suffix may be more convenient.\\n          \\n          When using --poll mode, you'll want a larger duration, or risk\\n          overloading disk I/O.\\n\\nEVM options:\\n  -f, --fork-url <URL>\\n          Fetch state over a remote endpoint instead of starting from an empty\\n          state.\\n          \\n          If you want to fetch state from a specific block number, see\\n          --fork-block-number.\\n          \\n          [aliases: rpc-url]\\n\\n      --fork-block-number <BLOCK>\\n          Fetch state from a specific block number over a remote endpoint.\\n          \\n          See --fork-url.\\n\\n      --fork-retries <RETRIES>\\n          Number of retries.\\n          \\n          See --fork-url.\\n\\n      --fork-retry-backoff <BACKOFF>\\n          Initial retry backoff on encountering errors.\\n          \\n          See --fork-url.\\n\\n      --no-storage-caching\\n          Explicitly disables the use of RPC caching.\\n          \\n          All storage slots are read entirely from the endpoint.\\n          \\n          This flag overrides the project's configuration file.\\n          \\n          See --fork-url.\\n\\n      --initial-balance <BALANCE>\\n          The initial balance of deployed test contracts\\n\\n      --sender <ADDRESS>\\n          The address which will be executing tests/scripts\\n\\n      --ffi\\n          Enable the FFI cheatcode\\n\\n      --always-use-create-2-factory\\n          Use the create 2 factory in all cases including tests and\\n          non-broadcasting scripts\\n\\n      --create2-deployer <ADDRESS>\\n          The CREATE2 deployer address to use, this will override the one in the\\n          config\\n\\nFork config:\\n  --compute-units-per-second <CUPS>\\n          Sets the number of assumed available compute units per second for this\\n          provider\\n          \\n          default value: 330\\n          \\n          See also --fork-url and\\n          <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>\\n\\n  --no-rpc-rate-limit\\n          Disables rate limiting for this node's provider.\\n          \\n          See also --fork-url and\\n          <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>\\n          \\n          [aliases: no-rate-limit]\\n\\nExecutor environment config:\\n  --code-size-limit <CODE_SIZE>\\n          EIP-170: Contract code size limit in bytes. Useful to increase this\\n          because of tests. By default, it is 0x6000 (~25kb)\\n\\n  --chain <CHAIN>\\n          The chain name or EIP-155 chain ID\\n          \\n          [aliases: chain-id]\\n\\n  --gas-price <GAS_PRICE>\\n          The gas price\\n\\n  --block-base-fee-per-gas <FEE>\\n          The base fee in a block\\n          \\n          [aliases: base-fee]\\n\\n  --tx-origin <ADDRESS>\\n          The transaction origin\\n\\n  --block-coinbase <ADDRESS>\\n          The coinbase of the block\\n\\n  --block-timestamp <TIMESTAMP>\\n          The timestamp of the block\\n\\n  --block-number <BLOCK>\\n          The block number\\n\\n  --block-difficulty <DIFFICULTY>\\n          The block difficulty\\n\\n  --block-prevrandao <PREVRANDAO>\\n          The block prevrandao value. NOTE: Before merge this field was mix_hash\\n\\n  --block-gas-limit <GAS_LIMIT>\\n          The block gas limit\\n          \\n          [aliases: gas-limit]\\n\\n  --memory-limit <MEMORY_LIMIT>\\n          The memory limit per EVM execution in bytes. If this limit is\\n          exceeded, a `MemoryLimitOOG` result is thrown.\\n          \\n          The default is 128MiB.\\n\\n  --disable-block-gas-limit\\n          Whether to disable the block gas limit checks\\n          \\n          [aliases: no-gas-limit]\\n\\n  --isolate\\n          Whether to enable isolation of calls. In isolation mode all top-level\\n          calls are executed as a separate transaction in a separate EVM\\n          context, enabling more precise gas accounting and transaction state\\n          changes\\n\\n  --odyssey\\n          Whether to enable Odyssey features\\n\\nDisplay options:\\n      --color <COLOR>\\n          The color of the log messages\\n\\n          Possible values:\\n          - auto:   Intelligently guess whether to use color output (default)\\n          - always: Force color output\\n          - never:  Force disable color output\"\n```\n\n----------------------------------------\n\nTITLE: Helping with Cast Block-Number Command - Bash\nDESCRIPTION: The command \\\\\"cast block-number --help\\\\\" provides an overview of all available options and arguments for the cast block-number command. It helps users understand how to interact with the command to retrieve the latest block number.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/block-number.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast block-number --help\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Headings in Chapters\nDESCRIPTION: Shows the correct way to format chapter headings using second-level headings (##) instead of first-level headings (#). This demonstrates the stylistic choice used throughout the book.\nSOURCE: https://github.com/foundry-rs/book/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Some Page\n```\n\n----------------------------------------\n\nTITLE: Forge Install Help Command\nDESCRIPTION: This command displays the help information for the `forge install` command. It lists available options, arguments, and usage examples for installing dependencies in a Foundry project.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge install --help\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Foundry Project\nDESCRIPTION: This command initializes a new Foundry project named 'hello_foundry' in the current directory. It creates the basic project structure and initializes a Git repository (unless the `--no-git` option is used).\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-init.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"forge init hello_foundry\"\n```\n\n----------------------------------------\n\nTITLE: Forge Config Help: Displaying Command Usage\nDESCRIPTION: This command displays the help information for the `forge config` command, providing a summary of available options and their usage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/config.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge config --help\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Conflicting Remappings\nDESCRIPTION: Example output showing conflicting dependency remappings\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/projects/dependencies.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ forge remappings  \n@openzeppelin/=lib/lib_1/node_modules/@openzeppelin/ \n```\n\n----------------------------------------\n\nTITLE: Including Only Command in Documentation\nDESCRIPTION: Shows how to include just the command portion of auto-generated CLI output using Handlebars include syntax. This allows flexible documentation of CLI commands.\nSOURCE: https://github.com/foundry-rs/book/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#include ../output/abc/xyz:command}}\n```\n\n----------------------------------------\n\nTITLE: Foundry Deployment Dockerfile\nDESCRIPTION: Dockerfile configuration for building, testing, and deploying smart contracts using Foundry.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/foundry-in-docker.md#2025-04-22_snippet_4\n\nLANGUAGE: docker\nCODE:\n```\n# Use the latest foundry image\nFROM ghcr.io/foundry-rs/foundry\n\n# Copy our source code into the container\nWORKDIR /app\n\n# Build and test the source code\nCOPY . .\nRUN forge build\nRUN forge test\n\n# Set the entrypoint to the forge deployment command\nENTRYPOINT [\"forge\", \"create\"]\n```\n\n----------------------------------------\n\nTITLE: Foundry Build and Test Dockerfile\nDESCRIPTION: Basic Dockerfile configuration for building and testing Solidity code using Foundry.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/foundry-in-docker.md#2025-04-22_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\n# Use the latest foundry image\nFROM ghcr.io/foundry-rs/foundry\n\n# Copy our source code into the container\nWORKDIR /app\n\n# Build and test the source code\nCOPY . .\nRUN forge build\nRUN forge test\n```\n\n----------------------------------------\n\nTITLE: Incorrect Heading Usage Example\nDESCRIPTION: Demonstrates the incorrect way to format chapter headings in the book using first-level headings, which should be avoided according to the style guidelines.\nSOURCE: https://github.com/foundry-rs/book/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Some Page\n```\n\n----------------------------------------\n\nTITLE: Running Forge Script Help Command\nDESCRIPTION: This snippet demonstrates how to invoke the help option for the forge script command. It serves to inform users about the command's options and usage.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/script.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge script --help\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage Difference for Signed Integers in Solidity\nDESCRIPTION: This Solidity function computes the percentage difference between two signed integers. Similar to its unsigned counterpart, it returns an unsigned integer representing the percentage difference, with `1e18` as the base for 100%. The calculation involves taking the absolute difference divided by the second integer.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/percentDelta.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction percentDelta(int256 a, int256 b) internal pure returns (uint256) {\n    return abs((a - b) * 1e18 / b);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Chisel Clear Cache Help in Bash\nDESCRIPTION: This command shows the help information for the 'chisel clear-cache' command, which provides details on its usage and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/chisel/clear-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ chisel clear-cache --help\n```\n\n----------------------------------------\n\nTITLE: Checking Ether Balance of an ENS Address with Cast\nDESCRIPTION: This command retrieves the Ether balance of the ENS address 'vitalik.eth' using Cast, with the result displayed in Ether units.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cast/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncast balance vitalik.eth --ether --rpc-url https://eth.merkle.io\n```\n\n----------------------------------------\n\nTITLE: Fetching JSON ABI from Etherscan\nDESCRIPTION: Example command showing how to fetch the raw JSON ABI of a contract from Etherscan and save it to a file.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-interface.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncast interface -o IWETH.sol -j 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n```\n\n----------------------------------------\n\nTITLE: Displaying Forge verify-check help command\nDESCRIPTION: This command displays the help information for the 'forge verify-check' command, showing its usage syntax and available options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/verify-check.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge verify-check --help\n```\n\n----------------------------------------\n\nTITLE: Forge Compiler Help Command\nDESCRIPTION: This bash command displays the help information for the `forge compiler` command, providing a list of available subcommands and options.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/compiler.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge compiler --help\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Cast To-Dec Command in Bash\nDESCRIPTION: This snippet shows how to display the help information for the 'cast to-dec' command using the --help option in a Bash terminal.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/to-dec.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast to-dec --help\n```\n\n----------------------------------------\n\nTITLE: Cast Estimate Command Usage Documentation\nDESCRIPTION: Comprehensive documentation for the cast estimate command, detailing syntax, arguments, options, and transaction configuration parameters\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/estimate.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: cast estimate [OPTIONS] [TO] [SIG] [ARGS]... [COMMAND]\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information in Foundry CLI Tools\nDESCRIPTION: These command-line flags can be used with Foundry tools to display help information. The -h and --help flags are functionally equivalent and will print usage guidelines and available options for the command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/common-options.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-h\n```\n\nLANGUAGE: bash\nCODE:\n```\n--help\n```\n\n----------------------------------------\n\nTITLE: Forge Format Help Command\nDESCRIPTION: This command displays the help information for the `forge fmt` tool. It shows the available options and arguments that can be used with the command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/fmt.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge fmt --help\"\n```\n\n----------------------------------------\n\nTITLE: Forge Soldeer Push Help Command\nDESCRIPTION: This command displays the help information for the `forge soldeer push` command. It provides a list of available options and arguments, as well as a brief description of their usage. Running this command will output the usage instructions for the `forge soldeer push` tool.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/push.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge soldeer push --help\"\n```\n\n----------------------------------------\n\nTITLE: ParseBytes32 Function Signature\nDESCRIPTION: Function signature for parseBytes32 method that takes a string parameter and returns a bytes32 value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-bytes32.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\n```\n\n----------------------------------------\n\nTITLE: Defining setEnv Function Signature in Solidity\nDESCRIPTION: The signature of the setEnv function, which takes two string parameters (key and value) and is external.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/set-env.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setEnv(string calldata key, string calldata value) external;\n```\n\n----------------------------------------\n\nTITLE: Displaying Soldeer Version\nDESCRIPTION: This bash command shows how to display the version of Soldeer using Forge. The `--help` flag provides a list of available options for the command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/soldeer/version.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ forge soldeer version --help\"\n```\n\n----------------------------------------\n\nTITLE: Multi-chain Deployment Execution\nDESCRIPTION: Command to execute multi-chain deployment script with verification\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/forge/deploying.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ forge script script/CounterScript.s.sol --slow --multi --broadcast --private-key <your_private_key> --verify\n```\n\n----------------------------------------\n\nTITLE: Displaying Forge Clean Help Command\nDESCRIPTION: Shows how to access the help documentation for the forge clean command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/clean.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge clean --help\n```\n\n----------------------------------------\n\nTITLE: Removing cache for specific block number on a chain\nDESCRIPTION: Shows how to clean cache data for a specific block number on a specific chain using the -b flag. This does not work if 'chain' is set to 'all'.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge/forge-cache-clean.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nforge cache clean rinkeby -b 150000\n```\n\n----------------------------------------\n\nTITLE: Cast SHR Help Command\nDESCRIPTION: Shows how to display the help information for the cast shr command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/cast/shr.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cast shr --help\n```\n\n----------------------------------------\n\nTITLE: Failed Test Example in Solidity\nDESCRIPTION: Example of a failing test case in Solidity to demonstrate Docker build failure.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/guides/foundry-in-docker.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n    function testFuzz_SetNumber(uint256 x) public {\n        counter.setNumber(x);\n        assertEq(counter.number(), 5);\n    }\n```\n\n----------------------------------------\n\nTITLE: Python Environment Library Configuration\nDESCRIPTION: foundry.toml configuration for Python virtual environment libraries\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/config/vyper.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nlibs = [\"lib\", \".venv/lib/python3.12/site-packages/\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Forge Cache Clean Help\nDESCRIPTION: Shows how to access the help documentation for the forge cache clean command.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cli/forge/cache/clean.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forge cache clean --help\n```\n\n----------------------------------------\n\nTITLE: Function Signature for getBlockTimestamp in Solidity\nDESCRIPTION: The function signature for getBlockTimestamp, which returns the current block timestamp as a uint256 value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/get-block-timestamp.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getBlockTimestamp() external view returns (uint256 timestamp);\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Environment Variables in Solidity\nDESCRIPTION: Demonstrates how to handle and test for missing environment variables when using vm.rpcUrl.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/rpc.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nvm.expectRevert(\"Failed to resolve env var `${RPC_MAINNET}` in `RPC_MAINNET`: environment variable not found\");\nstring memory url = vm.rpcUrl(\"mainnet\");\n```\n\n----------------------------------------\n\nTITLE: Converting Decimal to Hexadecimal in Shell\nDESCRIPTION: Example of converting the decimal number 64 to its hexadecimal representation using the cast to-base command\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-base.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast to-base 64 hex\n```\n\n----------------------------------------\n\nTITLE: Accessing zeroVarError in Solidity\nDESCRIPTION: This code snippet shows how to access the zeroVarError from the stdError library in Solidity. It represents the error thrown when trying to call a function via an uninitialized function pointer.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/forge-std/zeroVarError.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstdError.zeroVarError\n```\n\n----------------------------------------\n\nTITLE: Retrieving All RPC URLs in Solidity\nDESCRIPTION: Shows how to use the vm.rpcUrls function to retrieve all configured RPC URL pairs and assert their values.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/rpc.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstring[2][] memory allUrls = vm.rpcUrls();\nassertEq(allUrls.length, 2);\n\nstring[2] memory val = allUrls[0];\nassertEq(val[0], \"optimism\");\n\nstring[2] memory env = allUrls[1];\nassertEq(env[0], \"mainnet\");\n```\n\n----------------------------------------\n\nTITLE: Foundry Prompt Timeout Configuration\nDESCRIPTION: TOML configuration for setting the prompt timeout duration in seconds.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/prompt.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nprompt_timeout = 120\n```\n\n----------------------------------------\n\nTITLE: Using cast from-bin Command in Shell\nDESCRIPTION: The syntax for the 'cast from-bin' command which takes binary data from stdin and converts it to hexadecimal format.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-from-bin.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast from-bin\n```\n\n----------------------------------------\n\nTITLE: Error Message for Nightly Build\nDESCRIPTION: Example of an error message that may occur when running Foundry's latest nightly build.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/announcements.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[FAIL: call didn't revert at a lower depth than cheatcode call depth]\n```\n\n----------------------------------------\n\nTITLE: Printing Zero Address in Foundry Cast\nDESCRIPTION: Command-line utility to display the zero address, which is a standard 20-byte address consisting of all zeros. Useful for blockchain and smart contract interactions.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-address-zero.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast address-zero\n```\n\n----------------------------------------\n\nTITLE: Cast To-Int256 Command Syntax\nDESCRIPTION: Command-line interface for converting numbers to hex-encoded int256 values with optional parameters\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-int256.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncast to-int256 [options] value\n```\n\n----------------------------------------\n\nTITLE: Using parseUint Function to Convert String to Uint256 in Solidity\nDESCRIPTION: Demonstrates how to use the parseUint function to convert a string representation of a number to a uint256 value. It uses the vm object, likely from a testing framework.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/cheatcodes/parse-uint.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory uintAsString = \"12345\";\nuint256 stringToUint = vm.parseUint(uintAsString); // 12345\n```\n\n----------------------------------------\n\nTITLE: Concatenate hex values using cast to-hexdata\nDESCRIPTION: This example shows how to concatenate two hexadecimal values using `cast to-hexdata`. The input `deadbeef:0xbeef` is treated as two separate hexadecimal strings which gets concatenated together.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-to-hexdata.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n```sh\ncast to-hexdata \"deadbeef:0xbeef\"\n```\n```\n\n----------------------------------------\n\nTITLE: Calculating ENS Namehash using Cast in Shell\nDESCRIPTION: Example showing how to use the cast namehash command to calculate the ENS namehash of 'vitalik.eth'. This command takes a domain name as input and outputs its corresponding ENS namehash value.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-namehash.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast namehash vitalik.eth\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Nonce with cast Command\nDESCRIPTION: Example of using the cast nonce command to get the transaction count (nonce) of an Ethereum account identified by an ENS name.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/cast/cast-nonce.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncast nonce beer.eth\n```\n\n----------------------------------------\n\nTITLE: Defining depth Configuration\nDESCRIPTION: This snippet defines the `depth` configuration, which indicates the number of calls attempted to break invariants for each run. The integer type defaults to 500, controlled by the environment variable `FOUNDRY_INVARIANT_DEPTH`.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/config/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n##### `depth`\n\n- Type: integer\n- Default: 500\n- Environment: `FOUNDRY_INVARIANT_DEPTH`\n\nThe number of calls executed to attempt to break invariants in one run.\n```\n\n----------------------------------------\n\nTITLE: Mnemonic Index Selection in Foundry CLI\nDESCRIPTION: Command line option to specify which mnemonic indexes to use when deriving private keys. Must be used in conjunction with the --mnemonic-path option. Defaults to index 0 if not specified.\nSOURCE: https://github.com/foundry-rs/book/blob/master/src/reference/common/multi-wallet-options-raw.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--mnemonic-indexes indexes\n```"
  }
]