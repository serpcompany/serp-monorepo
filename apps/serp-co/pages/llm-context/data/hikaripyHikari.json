[
  {
    "owner": "hikari-py",
    "repo": "hikari",
    "content": "TITLE: Creating a Simple GatewayBot in Python\nDESCRIPTION: Example of creating a GatewayBot that responds with 'Pong!' when mentioned. Demonstrates how to set up a bot, listen for events, and respond to messages.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport hikari\n\nbot = hikari.GatewayBot(token=\"...\")\n\n@bot.listen()\nasync def ping(event: hikari.GuildMessageCreateEvent) -> None:\n    \"\"\"If a non-bot user mentions your bot, respond with 'Pong!'.\"\"\"\n\n    # Do not respond to bots nor webhooks pinging us, only user accounts\n    if not event.is_human:\n        return\n\n    me = bot.get_me()\n\n    if me.id in event.message.user_mentions_ids:\n        await event.message.respond(\"Pong!\")\n\nbot.run()\n```\n\n----------------------------------------\n\nTITLE: Configuring GatewayBot Intents in Python\nDESCRIPTION: Example of creating a GatewayBot with custom intents. This enables all intents, including privileged ones that require whitelisting.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport hikari\n\n# the default is to enable all unprivileged intents (all events that do not target the\n# presence, activity of a specific member nor message content).\nbot = hikari.GatewayBot(intents=hikari.Intents.ALL, token=\"...\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple RESTBot in Python\nDESCRIPTION: Example of creating a RESTBot that handles slash commands. Includes functions for handling interactions and registering commands on startup.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nimport hikari\n\n\n# This function will handle the interactions received\nasync def handle_command(interaction: hikari.CommandInteraction):\n    # Create an initial response to be able to take longer to respond\n    yield interaction.build_deferred_response()\n\n    await asyncio.sleep(5)\n\n    # Edit the initial response\n    await interaction.edit_initial_response(\"Edit after 5 seconds!\")\n\n\n# Register the commands on startup.\n#\n# Note that this is not a nice way to manage this, as it is quite spammy\n# to do it every time the bot is started. You can either use a command handler\n# or only run this code in a script using `RESTApp` or add checks to not update\n# the commands if there were no changes\nasync def create_commands(bot: hikari.RESTBot):\n    application = await bot.rest.fetch_application()\n\n    await bot.rest.set_application_commands(\n        application=application.id,\n        commands=[\n            bot.rest.slash_command_builder(\"test\", \"My first test command!\"),\n        ],\n    )\n\n\nbot = hikari.RESTBot(\n    token=\"...\",\n    token_type=\"...\",\n    public_key=\"...\",\n)\n\nbot.add_startup_callback(create_commands)\nbot.set_listener(hikari.CommandInteraction, handle_command)\n\nbot.run()\n```\n\n----------------------------------------\n\nTITLE: Alternative Event Listener Syntax in Python\nDESCRIPTION: Demonstrates two ways to define event listeners in Hikari: using type annotations or explicitly specifying the event type in the decorator.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport hikari\n\nbot = hikari.GatewayBot(\"...\")\n\n@bot.listen()\nasync def ping(event: hikari.MessageCreateEvent):\n    ...\n\n# or\n\n@bot.listen(hikari.MessageCreateEvent)\nasync def ping(event):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Hikari via pip\nDESCRIPTION: Commands to install Hikari from PyPI using pip. Includes a note for Windows users who may need to use a different command.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -U hikari\n# Windows users may need to run this instead...\npy -3 -m pip install -U hikari\n```\n\n----------------------------------------\n\nTITLE: Creating a REST-only Application in Python\nDESCRIPTION: Example of using Hikari's REST API without a bot, suitable for web dashboards. Demonstrates how to create a RESTApp and use it to fetch user data.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport hikari\nimport asyncio\n\nrest = hikari.RESTApp()\n\nasync def print_my_user(token):\n    await rest.start()\n\n    # We acquire a client with a given token. This allows one REST app instance\n    # with one internal connection pool to be reused.\n    async with rest.acquire(token) as client:\n        my_user = await client.fetch_my_user()\n        print(my_user)\n\n    await rest.close()\n\nasyncio.run(print_my_user(\"user token acquired through OAuth here\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Bot Run Options in Python\nDESCRIPTION: Example of running a bot with additional development options enabled, such as asyncio debugging and coroutine tracking.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport hikari\n\nbot = hikari.GatewayBot(\"...\")\n# or\nbot = hikari.RESTBot(\"...\", \"...\")\n\nbot.run(\n    asyncio_debug=True,             # enable asyncio debug to detect blocking and slow code.\n\n    coroutine_tracking_depth=20,    # enable tracking of coroutines, makes some asyncio\n                                    # errors clearer.\n\n    propagate_interrupts=True,      # Any OS interrupts get rethrown as errors.\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing uvloop Event Loop Policy in Python\nDESCRIPTION: Code to enable uvloop as the asyncio event loop policy on UNIX-like systems for improved performance. This replaces the default asyncio event loop with one that uses libuv internally.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/README.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\n\nif os.name != \"nt\":\n    import uvloop\n    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())\n\n\n# Your code goes here\n```\n\n----------------------------------------\n\nTITLE: Installing Hikari with Optional Features\nDESCRIPTION: Commands to install Hikari with optional features such as 'speedups' and 'server'. These features provide additional functionality or performance improvements.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# To install hikari with the speedups feature:\npython -m pip install -U hikari[speedups]\n\n# To install hikari with both the speedups and server features:\npython -m pip install -U hikari[speedups, server]\n```\n\n----------------------------------------\n\nTITLE: Adding New Permission Flags to Permissions Enum in Python\nDESCRIPTION: This code snippet adds two new permission flags to the Permissions enum in Hikari. SEND_POLLS allows for creating polls, while USE_EXTERNAL_APPS enables the use of external applications within Discord.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/changes/2311.feature.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nPermissions.SEND_POLLS\nPermissions.USE_EXTERNAL_APPS\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment with UV in Bash\nDESCRIPTION: Creates a virtual environment for the Hikari project using the UV package manager. This is the recommended approach for setting up the development environment.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\n```\n\n----------------------------------------\n\nTITLE: Installing Nox with UV in Bash\nDESCRIPTION: Installs Nox, a tool for running pipelines and tests, using the UV package manager. Nox is essential for running various development tasks in the Hikari project.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --group nox\n```\n\n----------------------------------------\n\nTITLE: Installing Towncrier with UV in Bash\nDESCRIPTION: Installs Towncrier, a tool for managing changelog entries, using the UV package manager. Towncrier is used to generate the CHANGELOG.md file and release notes for Hikari.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --group towncrier\n```\n\n----------------------------------------\n\nTITLE: Generating Hikari ASCII Art with Version Information\nDESCRIPTION: This snippet creates a colorful ASCII art representation of the Hikari logo, including version information, copyright notice, and system details. It uses ANSI color codes for formatting and incorporates various dynamic values like version numbers and system information.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/hikari/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  ${bold_red}oooo         o8o  oooo                            o8o      ${reset}${bold_white} 光 ${hikari_version} ${thin_white}[${hikari_git_sha1}]${reset}\n  ${red}`888         `\"'  `888                            `\"'       ${reset}${bold_white}© ${hikari_copyright}${thin_white} - ${hikari_license} license${reset}\n  ${yellow} 888 .oo.   oooo   888  oooo   .oooo.   oooo d8b oooo       ${reset}${bold_white}interpreter:   ${thin_white}${python_implementation} ${python_version}${reset}\n  ${green} 888P\"Y88b  `888   888 .8P'   `P  )88b  `888\"\"8P `888       ${reset}${bold_white}running on:    ${thin_white}${system_description}${reset}\n  ${blue} 888   888   888   888888.     .oP\"888   888      888       ${reset}${bold_white}installed at:  ${thin_white}${hikari_install_location}${reset}\n  ${cyan} 888   888   888   888 `88b.  d8(  888   888      888       ${reset}${bold_white}documentation: ${thin_white}${hikari_documentation_url}${reset}\n  ${purple}o888o o888o o888o o888o o888o `Y888\"\"8o d888b    o888o      ${reset}${bold_white}support:       ${thin_white}${hikari_discord_invite}${reset}\n```\n\n----------------------------------------\n\nTITLE: Previewing Changelog Draft using Towncrier in Markdown\nDESCRIPTION: Command to generate a draft preview of the changelog from the fragment files using the towncrier tool. This allows developers to see what the final changelog will look like before building the official release version.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/changes/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntowncrier --draft\n```\n\n----------------------------------------\n\nTITLE: Including README Content in Markdown Documentation\nDESCRIPTION: This snippet uses the MkDocs-specific syntax to include the content of README.md in the documentation page. This is a common pattern for maintaining documentation consistency between GitHub and documentation sites.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"README.md\"\n```\n\n----------------------------------------\n\nTITLE: Including External Changelog with Markdown Snippets\nDESCRIPTION: This code snippet uses the MkDocs material syntax to include content from an external CHANGELOG.md file. The snippet employs the '--8<--' fence notation which is used for content transclusion in MkDocs.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/docs/changelog.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"CHANGELOG.md\"\n```\n\n----------------------------------------\n\nTITLE: Towncrier Draft Directive in MkDocs\nDESCRIPTION: This snippet uses a custom directive ':: towncrier-draft' which likely integrates with the towncrier tool to generate changelog drafts automatically in the documentation.\nSOURCE: https://github.com/hikari-py/hikari/blob/master/docs/changelog.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:: towncrier-draft\n```"
  }
]