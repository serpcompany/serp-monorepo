[
  {
    "owner": "dotnet",
    "repo": "docfx",
    "content": "TITLE: Creating Standard Markdown Links in Docfx Markdown\nDESCRIPTION: Demonstrates how to create hyperlinks using the standard markdown link syntax to absolute or relative URLs and how Docfx renders these links to HTML anchors. The snippet shows creating domain-independent links with paths starting from the root ('/'). Required input is markdown source including an inline link, with output as the corresponding HTML anchor. It supports referencing local files and external URLs.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[docfx](https://dotnet.github.io/docfx)\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources by UID Using Markdown Autolink Syntax\nDESCRIPTION: Demonstrates using xref autolink syntax to reference resources by UID in markdown documents. This link format automatically uses the referenced resource's title as link text. Requires that the UID exists and is properly registered in Docfx or imported xrefmaps.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n<xref:file1>\n```\n\n----------------------------------------\n\nTITLE: Documenting Code with XML Comments in C#\nDESCRIPTION: This C# code snippet demonstrates the use of XML comments to document a method. The comments provide a summary, parameter descriptions, return value description, and remarks about the code. Docfx uses these XML comments to generate API documentation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/basic-concepts.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n    /// <summary>\n    /// Calculates the age of a person on a certain date based on the supplied date of birth.  Takes account of leap years,\n    /// using the convention that someone born on 29th February in a leap year is not legally one year older until 1st March\n    /// of a non-leap year.\n    /// </summary>\n    /// <param name=\"dateOfBirth\">Individual's date of birth.</param>\n    /// <param name=\"date\">Date at which to evaluate age at.</param>\n    /// <returns>Age of the individual in years (as an integer).</returns>\n    /// <remarks>This code is not guaranteed to be correct for non-UK locales, as some countries have skipped certain dates\n    /// within living memory.</remarks>\n    public static int AgeAt(this DateOnly dateOfBirth, DateOnly date)\n    {\n        int age = date.Year - dateOfBirth.Year;\n\n        return dateOfBirth > date.AddYears(-age) ? --age : age;\n    }\n```\n\n----------------------------------------\n\nTITLE: Automating DocFX Deployment to GitHub Pages (YAML)\nDESCRIPTION: Configures a GitHub Actions workflow triggered on pushes to the `main` branch. It checks out the code, sets up .NET, installs/updates `docfx`, builds the documentation using a specified `docfx.json` path, uploads the generated `_site` folder as a pages artifact, and deploys it to GitHub Pages. Requires `<docfx-project-path>` to be replaced with the actual path to the DocFX project directory containing `docfx.json`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/index.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Your GitHub workflow file under .github/workflows/\n# Trigger the action on push to main\non:\n  push:\n    branches:\n      - main\n\n# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages\npermissions:\n  actions: read\n  pages: write\n  id-token: write\n\n# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.\n# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: false\n  \njobs:\n  publish-docs:\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Dotnet Setup\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 8.x\n\n    - run: dotnet tool update -g docfx\n    - run: docfx <docfx-project-path>/docfx.json\n\n    - name: Upload artifact\n      uses: actions/upload-pages-artifact@v3\n      with:\n        # Upload entire repository\n        path: '<docfx-project-path>/_site'\n    - name: Deploy to GitHub Pages\n      id: deployment\n      uses: actions/deploy-pages@v4\n```\n\n----------------------------------------\n\nTITLE: Shorthand UID Cross Reference Syntax in Markdown\nDESCRIPTION: Shows the shorthand xref form using '@{uid}' to create quick references to other files by UID within markdown content. This syntax requires specific character rules for valid reference recognition to reduce false positives. When resolved, it renders with a link using the target title as link text.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\nsee @file1\n```\n\n----------------------------------------\n\nTITLE: Building a DocFX Project (Bash)\nDESCRIPTION: Executes the `docfx` command with the project configuration file (`docfx.json`) to generate the static documentation files without starting a local server. This is typically used after making local changes or before publishing, outputting files to the `_site` directory.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocfx docfx.json\n```\n\n----------------------------------------\n\nTITLE: Installing DocFX Global Tool\nDESCRIPTION: This command installs DocFX as a global .NET tool. This allows you to use DocFX from the command line. Prerequisites include the .NET SDK.  The output is the installation confirmation.  There are no specific limitations.\nSOURCE: https://github.com/dotnet/docfx/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g docfx\n```\n\n----------------------------------------\n\nTITLE: Executing the Build Step with Docfx CLI\nDESCRIPTION: This shell command demonstrates how to execute the build step of the Docfx process using the command line interface. It specifies the path to the `docfx.json` configuration file. The `--serve` option starts a local web server for previewing the output. This step converts Markdown content into HTML and applies templates and themes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/basic-concepts.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocfx build path/to/docfx.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Content Files (Expanded Form) in DocFX (JSON)\nDESCRIPTION: This JSON snippet demonstrates the expanded form for defining content file mappings in the `build` section of `docfx.json`. It allows specifying source directories (`src`), destination folders (`dest`), explicit file patterns (`files` using glob syntax), and exclusion patterns (`exclude`). In this example, it maps Markdown files from a `docs` subfolder to a `docs` destination and maps YAML/Markdown files from a parallel `api` folder to an `api` destination, excluding any file containing 'Private'. Files are resolved relative to the `src` directory if specified, otherwise relative to the `docfx.json` location.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"content\": [\n      {\"files\": \"docs/**/*.md\", \"dest\": \"docs\"},\n      {\"files\": [\"**/*.yml\", \"*.md\"], \"exclude\": [\"**/*Private*\"], \"src\": \"../api\", \"dest\": \"api\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Reference Assemblies for Metadata Generation\nDESCRIPTION: This JSON snippet configures Docfx to include external reference assemblies during the metadata generation phase. It specifies a list of paths to DLLs. This is crucial when the assembly being documented depends on other assemblies that may not be in the same directory or the global assembly cache.  It helps resolve dependencies during reflection.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"src\": [{\n      \"files\": [\"**/bin/Release/**.dll\"],\n      \"src\": \"../\"\n    }],\n    \"dest\": \"api\",\n    \"references\": [\n      \"path-to-reference-assembly.dll\"\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding xrefmap Path to docfx.json for Cross Project Referencing\nDESCRIPTION: Illustrates how to configure a Docfx project to consume an external xrefmap file by adding its path or URL to the 'xref' array in the build section of docfx.json. This enables cross project cross references using UIDs defined in the imported map.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"build\": {\n    \"xref\": [\n      \"<path_to_xrefmap>\"\n    ],\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Unit Tests in C# with xUnit.net\nDESCRIPTION: This snippet demonstrates the ideal structure for writing unit tests in C#. It enforces the Arrange-Act-Assert pattern to improve test clarity and reliability, ensuring that the action being tested is a single statement. It also shows how to test for specific exceptions by verifying exception messages using Assert.Throws. Dependencies include the xUnit.net testing framework. Input parameters involve setting up test data in the arrange phase, and the output is verification of expected behavior or exception through assertions. This structure avoids ambiguous failures caused by complex parameter creation within the action statement.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/csharp_coding_standards.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Arrange\nP1 p1 = GetComplexParam1();\nP2 p2 = GetComplexParam2();\nP3 p3 = GetComplexParam3();\n\n// Act\nint result = myObj.CallSomeMethod(p1, p2, p3);\n\n// Assert\nAssert.AreEqual(1234, result);\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar ex = Assert.Throws<InvalidOperationException>(\n    () => fruitBasket.GetBananaById(1234));\nAssert.Equal(\n    \"1234\",\n    ex.Message);\n```\n\n----------------------------------------\n\nTITLE: Describing C# Object Class Metadata YAML\nDESCRIPTION: This YAML snippet represents a metadata file structure for the C# Object class. It defines the 'items' section, including unique identifiers (UIDs), parent-child relationships, and illustrates how class members are organized within the hierarchical structure.  It is used to generate reference documentation, showcasing item properties like UID, parent, and children.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/metadata_format_spec.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n- uid: System.Object\n  parent: System\n  children:\n  - System.Object.Object()\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.Finalize()\n  - System.Object.GetHashCode()\n  - System.Object.GetType()\n  - System.Object.MemberwiseClone()\n  - System.Object.ReferenceEquals()\n  - System.Object.ToString()\n- uid: System.Object.Object()\n  parent: System.Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n- uid: System.Object.Finalize()\n  parent: System.Object\n- uid: System.Object.GetHashCode()\n  parent: System.Object\n- uid: System.Object.GetType()\n  parent: System.Object\n- uid: System.Object.MemberwiseClone()\n  parent: System.Object\n- uid: System.Object.ReferenceEquals()\n  parent: System.Object\n- uid: System.Object.ToString()\n  parent: System.Object\nreferences:\n...\n```\n\n----------------------------------------\n\nTITLE: Filter API by Type\nDESCRIPTION: This YAML snippet demonstrates excluding APIs based on their type using the `type` property, in conjunction with `uidRegex`. This filters out APIs whose UID starts with `Microsoft.DevDiv` and are also of type `Type`. This enables precise control over API exclusion based on both identifier and the type.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiRules:\n- exclude:\n    uidRegex: ^Microsoft\\.DevDiv\n    type: Type\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Generation Timeout in DocFX\nDESCRIPTION: The `DOCFX_PDF_TIMEOUT` environment variable specifies the maximum time, in milliseconds, to override the default Playwright timeout for PDF generation. The timeout controls how long DocFX will wait for PDF generation to complete. The input is a number representing time in milliseconds. It impacts the `docfx pdf` command to customize PDF generation, preventing it from running indefinitely in some circumstances.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-environment-variables-reference.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Referencing DocFX NuGet Libraries in a .NET Project (XML)\nDESCRIPTION: Shows the `<PackageReference>` elements to add to a `.csproj` file to include the `Docfx.App` library and specific, matching versions of `Microsoft.CodeAnalysis` dependencies. This enables programmatic interaction with DocFX build processes. Version numbers for CodeAnalysis must align exactly with the `Docfx.App` build requirements.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/index.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Docfx.App\" Version=\"2.77.0\" />\n<!-- the versions of Microsoft.CodeAnalysis.* must match exactly what Docfx.App was built against, not the latest stable version -->\n<PackageReference Include=\"Microsoft.CodeAnalysis.Workspaces.MSBuild\" Version=\"4.10.0\" />\n<PackageReference Include=\"Microsoft.CodeAnalysis.CSharp.Workspaces\" Version=\"4.10.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Extraction in docfx.json `metadata` Section\nDESCRIPTION: Shows a sample configuration for the `metadata` section, which controls the `docfx metadata` command. It defines an array of metadata projects. Each project specifies source files (`src` using File Mappings, here targeting `.csproj` files in `../src` while excluding `bin`/`obj`) and the destination directory (`dest`) for the generated metadata YAML files.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": [\n    {\n      \"src\": [\n        {\n          \"files\": [\"**/*.csproj\"],\n          \"exclude\": [ \"**/bin/**\", \"**/obj/**\" ],\n          \"src\": \"../src\"\n        }\n      ],\n      \"dest\": \"api\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Link Syntax with Xref Schema for Cross References\nDESCRIPTION: Shows how to create cross references by combining standard markdown link syntax with the 'xref:' schema in the URL to target a UID resource. This allows custom link text to be displayed, differing from autolink which uses the target's title.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n[link text](xref:file1)\n```\n\n----------------------------------------\n\nTITLE: Adding Startup Scripts in Modern Template JS\nDESCRIPTION: Demonstrates the structure for adding custom JavaScript code that executes on page load within a modern template's `main.js` file (`my-template/public/main.js`). The initialization logic should be placed inside the exported object's `start` function.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/template.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  start: () => {\n    // Startup script goes here\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering UID-Based Autolink to HTML Anchor\nDESCRIPTION: Shows the HTML anchor generated from a markdown xref autolink. The anchor href points to the resolved html page for the referenced UID and the link text is the title of the linked topic. This output is dynamically generated by Docfx based on cross reference metadata.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"file1.html\">This is file1</a>\n```\n\n----------------------------------------\n\nTITLE: Loading Global Metadata from External Files in docfx.json\nDESCRIPTION: Shows how to load global metadata from external JSON files using the `globalMetadataFiles` property within the `build` section. Provide an array of file paths relative to `docfx.json`. Metadata from these files will be applied globally.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"globalMetadataFiles\":  [\"global1.json\", \"global2.json\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Xref Markdown Link to HTML Anchor with Custom Text\nDESCRIPTION: Demonstrates the HTML anchor output generated for embedded UID cross reference links using standard markdown syntax with 'xref:' URLs. The href corresponds to the resolved topic and the inner text is explicitly specified in markdown.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"file1.html\">link text</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring DocFX Post-Processors in docfx.json (JSON)\nDESCRIPTION: Shows how to configure custom or built-in post-processors within the `docfx.json` build settings. The `postProcessors` array specifies the names of the processors to run, in the order listed, after the main build process completes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_add_a_customized_post_processor.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    ...\n    \"postProcessors\": [\"OutputPDF\", \"BeautifyHTML\", \"OutputPDF\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Contact Manager Link via REST API\nDESCRIPTION: This snippet demonstrates how to retrieve a link to the manager object for a specific contact using the Azure AD Graph API. It targets the contacts resource collection, specifies the contact by its object ID, and uses the /$links/manager segment to get the relationship link. The request requires a valid access token and tenant identifier.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/Docfx.Build.RestApi.Tests/TestData/contacts-operations.md#_snippet_0\n\nLANGUAGE: HTTP Request\nCODE:\n```\nGET https://graph.windows.net/myorganization/contacts/a2fb3752-08b4-413d-af6f-1d99c4c131d9/$links/manager?api-version=1.6\n```\n\n----------------------------------------\n\nTITLE: Defining DocFX LandingPage Schema in JSON\nDESCRIPTION: This JSON snippet provides a formal schema definition that validates and describes the landing page YAML structure for DocFX. It specifies types, custom keywords (like 'xrefProperties', 'tags', 'mergeType'), and how to merge or interpret properties. The schema must be referenced using the \"$schema\" attribute and includes structured rules for required keys, custom operations on sections, and integration with DocFX conventions. Requires JSON Schema support for usage.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/docfx_document_schema.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://dotnet.github.io/docfx/schemas/v1.0/schema.json#\",\n    \"version\": \"1.0.0\",\n    \"id\": \"https://github.com/dotnet/docfx/schemas/landingpage.schema.json\",\n    \"title\": \"LandingPage\",\n    \"description\": \"The schema for landing page\",\n    \"type\": \"object\",\n    \"xrefProperties\": [ \"title\", \"description\" ],\n    \"properties\": {\n        \"metadata\": {\n            \"type\": \"object\",\n            \"tags\": [ \"metadata\" ]\n        },\n        \"uid\": {\n            \"type\": \"string\",\n            \"contentType\": \"uid\"\n        },\n        \"sections\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"children\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"href\": {\n                                    \"type\": \"string\",\n                                    \"contentType\": \"href\"\n                                },\n                                \"text\": {\n                                    \"type\": \"string\",\n                                    \"tags\": [ \"localizable\" ]\n                                },\n                                \"content\": {\n                                    \"type\": \"string\",\n                                    \"contentType\": \"markdown\"\n                                }\n                            }\n                        }\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"mergeType\": \"key\"\n                    }\n                }\n            }\n        },\n        \"title\": {\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross Referencing Using UID Metadata in Docfx Markdown Files\nDESCRIPTION: Introduces using the 'uid' metadata property to assign a unique identifier to a markdown file, enabling cross referencing by UID rather than file path. This facilitates path-independent linking within and across projects. The snippet shows how to set UID in markdown YAML front matter.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nuid: file1\n---\n\n# This is file1\n...\n```\n\n----------------------------------------\n\nTITLE: Cross-Referencing Items using xref URI in DocFX Markdown\nDESCRIPTION: Illustrates the standard ways to create cross-references to other documentation items within DocFX Markdown using the `xref` URI scheme. It shows both the standard Markdown link syntax `[text](uri)` and the automatic link syntax `<uri>` to reference an item by its unique identifier (UID), allowing navigation between related documentation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/metadata_format_spec.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[System.String](xref:System.String)\n\n<xref:System.String>\n```\n\n----------------------------------------\n\nTITLE: Disabling Markup Parsing in XML Documentation\nDESCRIPTION: This JSON snippet disables markdown parsing within the XML documentation comments. This is useful when XML documentation contains markup that is not intended to be parsed as markdown.  Setting `shouldSkipMarkup` to `true` prevents unintended rendering issues, allowing XML tags to render correctly.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"src\": [{\n      \"files\": [\"**/bin/Release/**.dll\"],\n      \"src\": \"../\"\n    }],\n    \"dest\": \"api\",\n    \"shouldSkipMarkup\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example `build` Section Configuration in docfx.json\nDESCRIPTION: Provides a sample configuration for the `build` section, which governs settings for the `docfx build` command. This example specifies patterns for including content files (`.md`, `.yml`) and resource files (`media/**`), and sets a global metadata variable `_appTitle`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"content\": [\"**/*.{md|yml}\"],\n    \"resource\": [\"**/media/**\"],\n    \"globalMetadata\": {\n      \"_appTitle\": \"My App\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSBuild Properties in DocFX Metadata (JSON)\nDESCRIPTION: This JSON snippet shows how to define MSBuild properties within the `metadata` array in `docfx.json`. It specifically sets the `TargetFramework` property to `netstandard2.0`, which is necessary when a project targets multiple platforms. These properties are passed to MSBuild during metadata generation, similar to the `/property:name=value` command-line argument. Note that when generating metadata directly from source files, only `DefineConstants` and `AllowUnsafeBlocks` are supported.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": [\n    {\n      \"properties\": {\n          \"TargetFramework\": \"netstandard2.0\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Class Member Ordering in C#\nDESCRIPTION: This snippet defines the mandatory order of class member definitions in C#, starting from the least restrictive (public) to the most restrictive (private). This ordering includes nested types, fields, constructors, finalizers, methods, and private nested types. Following this order helps maintain code consistency and readability across the codebase. No specific dependencies are required, but usage of StyleCop or FxCop can enforce this rule.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/csharp_coding_standards.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nThe class definition contains class members in the following order, from less restricted scope (public) to more restrictive (private):\n\n* Nested types, e.g. classes, enum, struct, etc.\n* Field members, e.g. member variables, const, etc.\n* Member functions\n\t* Constructors\n\t* Finalizer (Do not use unless absolutely necessary)\n\t* Methods (Properties, Events, Operations, Overridables, Static)\n\t* Private nested types\n```\n\n----------------------------------------\n\nTITLE: Example Generated sitemap.xml Output from DocFX\nDESCRIPTION: Provides an example of the `sitemap.xml` file that DocFX can generate based on the configuration in the `sitemap` property. It adheres to the sitemap protocol, listing URLs (`<loc>`) along with metadata like last modification date (`<lastmod>`), change frequency (`<changefreq>`), and priority (`<priority>`).\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://dotnet.github.io/docfx/api/System.String.html</loc>\n    <lastmod>2001-01-01T00:00:00.00+08:00</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.3</priority>\n  </url>\n  <url>\n    <loc>https://dotnet.github.io/docfx/conceptual/GettingStarted.html</loc>\n    <lastmod>2017-09-21T10:00:00.00+08:00</lastmod>\n    <changefreq>daily</changefreq>\n    <priority>0.3</priority>\n  </url>\n  <url>\n    <loc>https://dotnet.github.io/docfx/ReadMe.html</loc>\n    <lastmod>2017-09-21T10:00:00.00+08:00</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.1</priority>\n  </url>\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Mapping C# Constructors to YAML Items\nDESCRIPTION: Provides C# examples of a parameterless constructor and a constructor with parameters for the `String` class. The associated YAML shows how constructors are represented, using `#ctor` for the `id` (optionally followed by parameter type UIDs in parentheses) and including language-specific names and full names.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System\n{\n    public sealed class String\n    {\n        public String();\n        public String(char[] chars);\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- uid: System.String.#ctor\n  id: #ctor\n  name.csharp: String()\n  fullName.csharp: System.String.String()\n- uid: System.String.#ctor(System.Char[])\n  id: #ctor(System.Char[])\n  name.csharp: String(Char[])\n  fullName.csharp: System.String.String(System.Char[])\n```\n\n----------------------------------------\n\nTITLE: Example xrefmap.yml Structure Generated by Docfx\nDESCRIPTION: Shows the YAML format of the xrefmap file generated by Docfx during build. It contains a list of references with UID, display name, href URL, and optional fullName (for API references). This file is used to share UID mappings across projects for consistent cross referencing.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nreferences:\n- uid: uid_of_topic\n  name: title_of_topic\n  href: url_of_topic.html\n  fullName: full_title_of_topic\n- ...\n```\n\n----------------------------------------\n\nTITLE: Representing C# Methods in YAML Format\nDESCRIPTION: Shows C# method overloads (`ToString()`, `ToString(IFormatProvider)`) and their corresponding YAML representation. It highlights how the method `id` includes the method name and a parenthesized list of parameter type UIDs (required even for parameterless methods), and the `name.csharp` reflects the C# signature.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System\n{\n    public sealed class String\n    {\n        public String ToString();\n        public String ToString(IFormatProvider provider);\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- uid: System.String.ToString()\n  id: ToString()\n  name.csharp: ToString()\n  fullName.csharp: System.String.ToString()\n- uid: System.String.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  name.csharp: ToString(IFormatProvider)\n  fullName.csharp: System.String.ToString(System.IFormatProvider)\n```\n\n----------------------------------------\n\nTITLE: Defining DocFX Post-Processor Class (C#)\nDESCRIPTION: Defines the basic C# class structure for a custom DocFX post-processor. It implements the `IPostProcessor` interface and uses the `[Export]` attribute from `System.Composition` to make the class discoverable by the DocFX plugin system. This is the entry point for the custom logic.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_add_a_customized_post_processor.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Export(nameof(MyProcessor), typeof(IPostProcessor))]\npublic class MyProcessor : IPostProcessor\n{\n    // TODO: implements IPostProcessor\n}\n```\n\n----------------------------------------\n\nTITLE: Representing C# Explicit Interface Implementations in YAML\nDESCRIPTION: Demonstrates a C# explicit implementation of `IEnumerable.GetEnumerator` within the `String` class. The YAML shows how the `uid` and `id` are constructed by prefixing the member name with the interface's UID, replacing dots within the interface name with hash symbols (`System#Collections#IEnumerable#GetEnumerator`).\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System\n{\n    using System.Collections;\n\n    public sealed class String : IEnumerable\n    {\n        IEnumerator IEnumerable.GetEnumerator();\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- uid: \"System.String.System#Collections#IEnumerable#GetEnumerator\"\n  id: \"System#Collections#IEnumerable#GetEnumerator\"\n  name.csharp: IEnumerable.GetEnumerator()\n  fullName.csharp: System.String.System.Collections.IEnumerable.GetEnumerator()\n```\n\n----------------------------------------\n\nTITLE: Mapping C# Operator Overloads to YAML\nDESCRIPTION: Provides C# examples for an implicit conversion operator and the equality operator (`==`). The corresponding YAML demonstrates how these operators are represented, using metadata names like `op_Implicit` or `op_Equality` in the `id` and `uid`, and user-friendly names like `Implicit(Char to Decimal)` or `Equality(String,String)` in `name.csharp`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System\n{\n    public struct Decimal\n    {\n        public static implicit operator Decimal(Char value);\n    }\n\n    public sealed class String\n    {\n        public static bool operator ==(String a, String b);\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- uid: System.Decimal.op_Implicit(System.Char)~System.Decimal\n  id: op_Implicit(System.Char)~System.Decimal\n  name.csharp: Implicit(Char to Decimal)\n  fullName.csharp: System.Decimal.Implicit(System.Char to System.Decimal)\n- uid: System.String.op_Equality(System.String,System.String)\n  id: op_Equality(System.String,System.String)\n  name.csharp: Equality(String,String)\n  fullName.csharp: System.String.Equality(System.String,System.String)\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Path Referencing for Local Files in Markdown\nDESCRIPTION: Shows referencing a local markdown file using an absolute path relative to the docfx.json root using the '~/` syntax. This method simplifies link maintenance by avoiding complex relative paths. Requirements include proper docfx.json configuration and that target files are included in the project to prevent build warnings.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n[file1](~/subfolder/file2.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Language-Specific Property Values in DocFX YAML\nDESCRIPTION: Demonstrates how to define different values for a documentation item property based on the target programming language within DocFX's YAML metadata. This is achieved by appending the language name (e.g., `.csharp`, `.vb`) to the property name, allowing variations like type names to be accurately represented for different languages.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/metadata_format_spec.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- uid: System.Collections.Generic.Dictionary`2\n  name.csharp: Dictionary<TKey, TValue>\n  name.vb: Dictionary(Of TKey, TValue)\n```\n\n----------------------------------------\n\nTITLE: Representing C# Nested Types in YAML\nDESCRIPTION: Illustrates the YAML mapping for a C# nested enum (`SpecialFolder` within `Environment`). It shows how the `id` for a nested type is formed by concatenating the containing type's name and the nested type's name (`Environment.SpecialFolder`), while the `uid` includes the full namespace.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System\n{\n    public class Environment\n    {\n        public enum SpecialFolder {}\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuid: System.Environment.SpecialFolder\nid: Environment.SpecialFolder\nname.csharp: Environment.SpecialFolder\nfullName.csharp: System.Environment.SpecialFolder\n```\n\n----------------------------------------\n\nTITLE: Example of Overwrite Section with YAML Header in Markdown\nDESCRIPTION: This snippet illustrates how to define an Overwrite Section in a Markdown file using a YAML header that starts with a 'uid' property, which identifies the target Model to overwrite. It also demonstrates how to include additional properties and Markdown content using the '*content' anchor.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_overwrite_files.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nuid: microsoft.com/docfx/Contacts\nsome_property: value\n---\nFurther description for `microsoft.com/docfx/Contacts`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nuid: microsoft.com/docfx/Contacts\nfooter: *content\n---\nFooter for `microsoft.com/docfx/Contacts`\n```\n\n----------------------------------------\n\nTITLE: Configuring docfx.json to Include Custom API Converter Output\nDESCRIPTION: This JSON snippet demonstrates how to modify the 'docfx.json' configuration file to include YAML files generated by a custom API converter in the Docfx build process. It specifies the path pattern for YAML files within the 'content' array to ensure they are processed during documentation generation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/additional-languages.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"content\": [\n      { \"files\": \"api/**/*.yml\" }\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter API by Attribute\nDESCRIPTION: This YAML snippet provides an example of excluding APIs based on the attributes that they have. This specific example excludes all APIs with the `AttributeUsageAttribute`, where its constructor's first argument is `System.AttributeTargets.Class` and the named argument `Inherited` is set to `True`. This is a fine-grained way to filter APIs that are decorated by specific attributes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiRules:\n- exclude:\n    hasAttribute:\n      uid: System.AttributeUsageAttribute\n      ctorArguments:\n      - System.AttributeTargets.Class\n      ctorNamedArguments:\n        Inherited: \"True\"\n```\n\n----------------------------------------\n\nTITLE: Using @ shorthand for Cross-Referencing in DocFX Markdown\nDESCRIPTION: Introduces a concise shorthand syntax provided by DocFX for cross-referencing items in Markdown. A string starting with `@` followed immediately by the item's UID enclosed in single (`''`) or double (`\"\"`) quotes is automatically processed as an `xref` reference, simplifying the syntax for linking to documented items.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/metadata_format_spec.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n@\"System.String\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Text for xref Cross-References in DocFX Markdown\nDESCRIPTION: Demonstrates how to use standard Markdown link syntax to provide custom display text for `xref` cross-references instead of using the item's default name. By placing the desired text in the link's square brackets (`[Dictionary]`) and the `xref:UID` in the parentheses, you can control how the cross-reference appears in the generated documentation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/metadata_format_spec.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[Dictionary](xref:System.Collections.Generic.Dictionary`2)<[String](xref:System.String), [String](xref:System.String)>\n```\n\n----------------------------------------\n\nTITLE: Declaring RtfDocumentProcessor Implementing IDocumentProcessor in C#\nDESCRIPTION: Defines a new class RtfDocumentProcessor exported as an implementation of IDocumentProcessor to be used by DocFX. This class declares that it will handle processing of documents, specifically `.rtf` files. It acts as the entry point for loading, saving, and providing build steps for the RTF file processing pipeline. Implementation of the interface methods is required in subsequent snippets.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_build_your_own_type_of_documentation_with_custom_plug-in.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Export(typeof(IDocumentProcessor))]\npublic class RtfDocumentProcessor : IDocumentProcessor\n{\n    // todo : implements IDocumentProcessor.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mustache Template to Render View Model Property in DocFX\nDESCRIPTION: This snippet shows a Mustache template example that renders the _title property from the View Model provided by the transform function. It uses triple curly braces {{{_title}}} to inject the title string into the output without escaping it. When combined with the transform function that sets _title to \"Hello World\", rendering an input Markdown file named A.md produces a text file A.txt containing the text \"Hello World\". This demonstrates the linkage between DocFX data transformation and templating for output generation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_13\n\nLANGUAGE: Mustache\nCODE:\n```\n{{{_title}}}\n```\n\n----------------------------------------\n\nTITLE: Implementing PrepareMetadata for DocFX Post-Processor (C#)\nDESCRIPTION: Implements the `PrepareMetadata` method of the `IPostProcessor` interface in C#. This method allows modifying the global metadata dictionary before DocFX starts building individual files. It receives the current metadata and must return an immutable dictionary with any changes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_add_a_customized_post_processor.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic ImmutableDictionary<string, object> PrepareMetadata(ImmutableDictionary<string, object> metadata)\n{\n    // TODO: add/remove/update property from global metadata\n    return metadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Serving a DocFX Project Locally (Bash)\nDESCRIPTION: Runs the `docfx` command with the project configuration file (`docfx.json`) and the `--serve` flag. This builds the static site (usually into `_site`) and hosts it locally, typically on http://localhost:8080, for previewing.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocfx docfx.json --serve\n```\n\n----------------------------------------\n\nTITLE: Preferred Formatting and Style in C# Source Files\nDESCRIPTION: This snippet defines mandatory formatting guidelines including use of spaces instead of tabs with a tab size of 4, placing using directives inside the namespace declaration, and spacing practices around control statements like for and if. These rules improve code readability and consistency, and are enforced via IDE configuration or tooling such as StyleCop. No external library dependencies required.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/csharp_coding_standards.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nUse spaces over tabs (tab size: 4).\nAdd using directives inside namespace declaration.\nExample:\nnamespace Microsoft.Content.Build.BuildWorker.UnitTest\n{\n\tusing System;\n}\n\nAdd a space in for and if statements:\nfor (var i = 0; i < 1; i++)\nif (a == b)\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Coding Recommendations in C#\nDESCRIPTION: This snippet advises using Environment.NewLine for line breaks instead of hard-coded \\r\\n sequences to ensure compatibility across Windows, OSX, and Linux. It also recommends using Path.Combine() or Path.DirectorySeparatorChar for file paths; if not possible, using forward slash '/' as a fallback. These practices increase code portability across different operating systems. The expected input is OS-dependent strings, and output is system-correct formatted strings and paths.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/csharp_coding_standards.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nUse Environment.NewLine instead of hard-coded line breaks.\nUse Path.Combine() or Path.DirectorySeparatorChar to separate directories.\nFallback to forward slash '/' only if necessary.\nNote: Be cautious using @\"\" text blocks with line breaks as line endings can cause issues.\n```\n\n----------------------------------------\n\nTITLE: Building Static Site with Default Configuration\nDESCRIPTION: Demonstrates how to build static site contents using the default docfx.json configuration file.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-build.md#_snippet_1\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx build\n```\n\n----------------------------------------\n\nTITLE: Parameterized Code Snippet Reference - Markdown\nDESCRIPTION: This snippet explains the template syntax for referencing a code snippet from a file, which allows specifying the programming language ('<language>'), file path, and optional query for line/region selection. The [!code-<language>[](<filepath><query-options>)] format provides flexible inclusion of code and controls highlighting, language, and selection.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n[!code-<language>[](<filepath><query-options>)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Process for DocFX Post-Processor (C#)\nDESCRIPTION: Implements the `Process` method of the `IPostProcessor` interface in C#. This method is executed after the DocFX build process is complete, allowing custom logic to modify or create output files within the specified `outputFolder`, based on the provided `manifest` which lists all generated files.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_add_a_customized_post_processor.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic Manifest Process(Manifest manifest, string outputFolder)\n{\n    // TODO: add/remove/update all the files included in manifest\n    return manifest;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Local Prerelease DocFX Tool (PowerShell)\nDESCRIPTION: Uses the `dotnet tool update` command with the `-g` (global), `--prerelease`, and `--source ./` flags to install or update the `docfx` tool from a NuGet package (`.nupkg`) located in the current directory. This is used to install prerelease versions downloaded manually, such as nightly builds obtained via the previous script.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/index.md#_snippet_9\n\nLANGUAGE: pwsh\nCODE:\n```\ndotnet tool update docfx -g --prerelease --source ./\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Files in docfx.json `build` Section\nDESCRIPTION: Shows how to use the `content` property within the `build` section to define an array of file patterns (supporting glob syntax and File Mappings) that specify which content files (like Markdown or YAML files) should be processed by DocFX.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"content\": [\"**/*.{md,yml}\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Generated Documentation\nDESCRIPTION: Shows how to build static site contents with the default configuration, then serve the generated site and open it in the default browser.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-build.md#_snippet_2\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx build --serve --open-browser\n```\n\n----------------------------------------\n\nTITLE: Installing/Updating the DocFX Global Tool (Bash)\nDESCRIPTION: Uses the .NET CLI to install or update the `docfx` tool globally. This makes the `docfx` command available from any directory in the terminal. Requires the .NET SDK (8.0 or higher) to be installed.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool update -g docfx\n```\n\n----------------------------------------\n\nTITLE: Defining C# Generic Class Cat<T, K>\nDESCRIPTION: Defines the generic C# class `Cat<T, K>`. It is marked as `Serializable` and `Obsolete`. The generic parameter T is constrained to be a reference type with a parameterless constructor (`class, new()`), and K is constrained to be a value type (`struct`). The class implements the `ICat` and `IAnimal` interfaces.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Serializable]\n[Obsolete]\npublic class Cat<T, K> : ICat, IAnimal where T : class, new() where K : struct\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Colors with CSS Variables (Modern Template)\nDESCRIPTION: Shows how to customize the site's link colors in a custom modern template (`my-template/public/main.css`). It overrides default Bootstrap CSS variables (`--bs-link-color-rgb` and `--bs-link-hover-color-rgb`) within the `body` selector to change the appearance of links.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/template.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* file: my-template/public/main.css */\nbody {\n  --bs-link-color-rgb: 66, 184, 131 !important;\n  --bs-link-hover-color-rgb: 64, 180, 128 !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Running DocFX with Default Configuration in PowerShell\nDESCRIPTION: Example of running DocFX with the default configuration file (docfx.json) to execute metadata, build and pdf commands without additional options.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx.md#_snippet_1\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx\n```\n\n----------------------------------------\n\nTITLE: Mapping C# Namespaces to YAML Properties\nDESCRIPTION: Provides a basic C# namespace definition (`System.IO`) and its corresponding YAML representation. It highlights that for namespaces, the `uid`, `id`, `name`, and `fullName` properties typically share the same value, establishing the base identifier for containing types.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System.IO\n{\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuid: System.IO\nid: System.IO\nname: System.IO\nfullName: System.IO\n```\n\n----------------------------------------\n\nTITLE: Specifying a Single Template in docfx.json `build` Section\nDESCRIPTION: Shows how to specify a single template to be used for transforming generated YAML models into output pages. The `template` property is set to the name of the template folder (`custom`). If omitted, the embedded `default` template is used.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"template\": \"custom\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Mermaid Diagram in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to embed a Mermaid diagram using a code block with the `mermaid` language identifier. The snippet shows a simple flowchart diagram defined using Mermaid syntax. Mermaid diagrams are only supported in the `modern` template.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_11\n\nLANGUAGE: md\nCODE:\n```\n```mermaid\nflowchart LR\n\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n```\n\n----------------------------------------\n\nTITLE: Using Block Markdown Includes - Markdown\nDESCRIPTION: This markdown snippet shows how to include an entire block of content from another markdown file using the [!INCLUDE] directive on its own line. The block is replaced at build time with the referenced file's full content. It accepts a title and filepath and is often used for section-level reuse. The included file should not be built separately and must exist at the specified relative path.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE [<title>](<filepath>)]\n```\n\n----------------------------------------\n\nTITLE: Defining File-Specific Metadata in docfx.json `build` Section\nDESCRIPTION: Demonstrates configuring file-specific metadata using the `fileMetadata` property within the `build` section. It allows associating metadata values (like `priority`, `keywords`, `_noindex`) with files matching specific glob patterns. This provides fine-grained control over metadata per file or file group.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"fileMetadata\": {\n        \"priority\": {\n            \"**.md\": 2.5,\n            \"spec/**.md\": 3\n        },\n        \"keywords\": {\n            \"obj/docfx/**\": [\"API\", \"Reference\"],\n            \"spec/**.md\": [\"Spec\", \"Conceptual\"]\n        },\n        \"_noindex\": {\n            \"articles/**/article.md\": true\n        }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docfx as NuGet Package\nDESCRIPTION: This snippet demonstrates how to include Docfx as a NuGet package in a .NET project.  It specifies the package name and version to be installed.  This is a prerequisite for customizing Markdig markdown extensions programmatically.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Docfx.App\" Version=\"2.70.0\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring Application Entry Point with Main Method - CSharp - C#\nDESCRIPTION: This snippet implements the static Main method, the standard entry point for C# console applications. It takes a string array 'args' as its parameter, allowing input arguments during program execution. No dependencies are required aside from standard C# libraries, and the method returns void. Inputs: string[] args. Output: none (void). This method should be present in the top-level class to launch the application; its body is not detailed here.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromCSharpSourceCode.CSharp.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void Main(string[] args)\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF per TOC in toc.yml\nDESCRIPTION: This snippet shows how to configure PDF generation directly within a `toc.yml` file.  Setting `pdf: true` enables PDF generation for the specific table of contents. This allows for selective PDF generation for different sections of the documentation.  It requires a valid `toc.yml` file with valid `items`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/pdf.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npdf: true\nitems:\n- name: Getting Started\n  href: getting-started.md\n```\n\n----------------------------------------\n\nTITLE: Adding Docfx .NET API Generation NuGet Package via XML\nDESCRIPTION: This XML snippet shows how to include the Docfx.Dotnet package version 2.62.0 as a NuGet dependency in a project. This package is required to access the Docfx .NET API generation functionalities programmatically.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<PackageReference Include=\"Docfx.Dotnet\" Version=\"2.62.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight.js in Modern Template JS\nDESCRIPTION: Shows how to customize the highlight.js library for syntax highlighting within a modern template's `main.js` (`my-template/public/main.js`). Customizations, such as registering new languages, are performed within the exported object's `configureHljs` function, which receives the `hljs` object.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/template.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  configureHljs: (hljs) => {\n    // Customize hightlight.js here\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Metadata in docfx.json `build` Section\nDESCRIPTION: Explains how to set key-value pairs of global metadata using the `globalMetadata` property within the `build` section. This metadata is applied to every file processed during the build. The example defines `_appTitle` and `_enableSearch`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"globalMetadata\": {\n      \"_appTitle\": \"DocFX website\",\n      \"_enableSearch\": \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Print Media Styles for PDF Customization\nDESCRIPTION: This snippet provides an example of using CSS print media queries (`@media print`) to customize the styling of PDF pages.  This allows you to apply specific styles when generating the PDF, such as adjusting margins, fonts, and background graphics, to control the appearance of the document. This will be used in conjunction with the HTML template used by Docfx.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/pdf.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@media print {\n  /* All your print styles go here */\n}\n```\n\n----------------------------------------\n\nTITLE: Running DocFX with Web Server and Browser in PowerShell\nDESCRIPTION: Example of running DocFX with all default commands, then serving the generated site and opening it in the default web browser for immediate preview.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx.md#_snippet_2\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx --serve --open-browser\n```\n\n----------------------------------------\n\nTITLE: Adding Copyright Header - JavaScript\nDESCRIPTION: This code snippet demonstrates the required copyright header for all JavaScript files. It includes licensing information from the .NET Foundation under the MIT license.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/engineering_guidelines.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n```\n\n----------------------------------------\n\nTITLE: Defining ICatExtension Static Class in C#\nDESCRIPTION: Declaration of the ICatExtension static class that contains extension methods for the ICat interface. This class must be public and static, and should not be generic.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.ICatExtension.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ICatExtension\n```\n\n----------------------------------------\n\nTITLE: Saving Document Model to Output in RtfDocumentProcessor Using C#\nDESCRIPTION: Implements the Save method which writes the processed content from the model to the specified output file. This typically outputs the transformed content such as HTML to disk. The method accesses the model dictionary for the key \"content\" and writes it to the output location.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_build_your_own_type_of_documentation_with_custom_plug-in.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic SaveResult Save(FileAndType file, object model, string outputFolder)\n{\n    var dict = model as Dictionary<string, object>;\n    var content = dict?[\"content\"] as string ?? string.Empty;\n    var outputPath = Path.Combine(outputFolder, Path.ChangeExtension(file.File, \".html\"));\n    File.WriteAllText(outputPath, content);\n    return new SaveResult(outputPath);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Copyright Header - CSS\nDESCRIPTION: This code snippet presents the required copyright header for CSS files. It includes licensing information from the .NET Foundation under the MIT license.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/engineering_guidelines.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/**\n * Licensed to the .NET Foundation under one or more agreements.\n * The .NET Foundation licenses this file to you under the MIT license.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Output Groups in docfx.json `build` Section\nDESCRIPTION: Shows how to use the `groups` property within the `build` section to define named output groups. Each key is a group name (e.g., `v1`), and the value specifies configuration for that group, such as a custom output destination directory (`dest`).\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"groups\": {\n  \"v1\": {\n    \"dest\": \"output_dir_v1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of docfx.json\nDESCRIPTION: Illustrates the fundamental top-level structure of the `docfx.json` file. It outlines the primary configuration sections: `build` for build-related settings, `metadata` for metadata extraction settings, and `pdf` for PDF generation settings (details not shown). All relative paths within the file are relative to its location.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": { },\n  \"metadata\": { },\n  \"pdf\": { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Name Property for RtfDocumentProcessor in C#\nDESCRIPTION: Defines a simple Name property returning a constant string identifying the processor. This name is used for logging and diagnostics within the DocFX build process.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_build_your_own_type_of_documentation_with_custom_plug-in.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic string Name => \"RtfDocumentProcessor\";\n```\n\n----------------------------------------\n\nTITLE: DFM Note Callout with Code Block - Markdown\nDESCRIPTION: This snippet shows how a note callout ([!NOTE]) with an indented code block appears in Markdown. In DocFX Flavored Markdown (DFM), the code block is rendered as a code note, while in GitHub Flavored Markdown (GFM), it is treated as a plain blockquote. The example demonstrates cross-rendering differences and should be used to highlight important code remarks in documentation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_28\n\nLANGUAGE: md\nCODE:\n```\n> [!NOTE]\n>     This is code.\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple CSharp Class - CSharp - C#\nDESCRIPTION: This snippet defines a public class named CSharp, serving as a minimal container for additional functionality or as an application entry point. The class inherits directly from the System.Object base class. No member variables or methods are declared here aside from what is defined elsewhere in the file. Suitable for demonstrating class declaration syntax and establishing type structure in C#.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromCSharpSourceCode.CSharp.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CSharp\n```\n\n----------------------------------------\n\nTITLE: Downloading an xrefmap File with docfx download (PowerShell)\nDESCRIPTION: Provides an example of downloading a specific xrefmap file from a URL using the `--xref` option and saving it locally as `xrefmap.zip`. The command requires the destination path (`xrefmap.zip`) and the URL of the remote xrefmap file (`.json` or `.yml`). Note that the downloaded file is always archived as `.zip` containing `xrefmap.yml`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-download.md#_snippet_1\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx download xrefmap.zip --xref https://github.com/dotnet/docfx/raw/main/.xrefmap.json\n```\n\n----------------------------------------\n\nTITLE: Tab Group Markup for Platform-Specific Content - Markdown\nDESCRIPTION: This snippet presents the markdown syntax for creating tabbed content sections, for instance to differentiate Linux and Windows documentation. Each tab uses a header with a Markdown link in the format '# [Display Name](#tab/id)'. The set is separated from the rest of the file by '---'. Switching tabs synchronizes content display based on the tab ID. No dependencies required beyond DocFX markdown support.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n# [Linux](#tab/linux)\n\nContent for Linux...\n\n# [Windows](#tab/windows)\n\nContent for Windows...\n\n---\n```\n\n----------------------------------------\n\nTITLE: Defining C# Public Indexer Property for Cat\nDESCRIPTION: Defines a public indexer property for the `Cat<T, K>` class that takes a string key and returns/sets an integer value. The `get` accessor is protected, while the `set` accessor is public.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic int this[string a] { protected get; set; }\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Rule for API Exclusion by UID\nDESCRIPTION: This YAML snippet shows an example of a custom filter rule that excludes APIs by matching a regular expression against their UID.  In this example, all APIs with UIDs starting with `Microsoft.DevDiv` are excluded, except for those whose UIDs start with `Microsoft.DevDiv.SpecialCase`.  This is used to refine the API documentation by selective filtering.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiRules:\n- include:\n    uidRegex: ^Microsoft\\.DevDiv\\.SpecialCase\n- exclude:\n    uidRegex: ^Microsoft\\.DevDiv\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Build Content and Resources in Docfx with JSON\nDESCRIPTION: This JSON snippet configures the docfx.json 'build' section to specify which content files (Markdown and YAML) to transform into HTML and which static resource files to copy as-is. It uses glob patterns for file matching and excludes specified folders to control the scope of site content and resources during the build process. Dependencies include having a Docfx site directory with docfx.json.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/config.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"content\": [\n      { \"files\": \"**/*.{md,yml}\", \"exclude\": \"**/include/**\" }\n    ],\n    \"resource\": [\n      { \"files\": \"**/images/**\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Math Expression in Markdown\nDESCRIPTION: This Markdown snippet shows how to include an inline math expression using LaTeX formatting, enclosed by single dollar signs (`$`). This will render as a math expression within the same line of text. MathJax is required for the correct rendering in the `modern` template.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_9\n\nLANGUAGE: md\nCODE:\n```\nThis sentence uses `$` delimiters to show math inline:  $\\sqrt{3x-1}+(1+x)^2$\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in Included Code Snippet - Markdown\nDESCRIPTION: This markdown snippet shows how to highlight specific lines in an included code file using the '?highlight=' query option. For instance, [!code-csharp[](Program.cs?highlight=2,5-7,9-)] will visually emphasize lines 2, 5 to 7, and lines 9 to the file's end. The highlight option takes a comma-separated list of numbers or ranges.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n[!code-csharp[](Program.cs?highlight=2,5-7,9-)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Constructor for Class1 in C#\nDESCRIPTION: This snippet defines the public default constructor for the `Class1` class. It is parameterless, allowing instances of `Class1` to be created without arguments. No specific dependencies or return value are associated with this constructor.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromAssembly.Class1.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic Class1()\n```\n\n----------------------------------------\n\nTITLE: Configuring PlantUML Rendering Settings - JSON\nDESCRIPTION: This JSON snippet configures PlantUML rendering settings in the docfx.json build file. It demonstrates how to set the output format to 'svg', define a remote PlantUML server URL, and specify 'remote' as the rendering mode. Required dependencies include a valid PlantUML server and DocFX supporting markdownEngineProperties. Parameters: outputFormat (svg/ascii/ascii_unicode), remoteUrl (PlantUML server endpoint), renderingMode (remote or local). This configuration applies globally to markdown processed during build.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"markdownEngineProperties\": {\n      \"plantUml\": {\n          \"outputFormat\": \"svg\",\n          \"remoteUrl\": \"http://www.plantuml.com/plantuml/\",\n          \"renderingMode\": \"remote\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Get Contact MemberOf Links Parameters\nDESCRIPTION: This snippet documents the parameters needed to get memberOf links in the Microsoft Graph API for contacts.  It defines a `bodyparam` and its associated schema, including `allOf`, which describes properties, such as `location` and `level`.  The `level` parameter also includes an enum of acceptable values.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/Docfx.Build.RestApi.Tests/TestData/overwrite/rest.overwrite.parameters.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    - name: bodyparam\n      description: The new bodyparam description\n      schema:\n        allOf:\n          - null\n          - description: this is second overwrite allOf description\n            properties:\n              location:\n                description: this is overwrite location description\n          - properties:\n              level:\n                description: this is overwrite level description\n                enum:\n                  - Verbose\n                  - Info\n                  - Warning\n```\n\n----------------------------------------\n\nTITLE: Documenting Update Contact Parameters\nDESCRIPTION: This snippet documents the parameters needed to update a contact in the Microsoft Graph API. It specifies the `object_id` and a `bodyparam` which includes properties like `objectType` and `provisioningErrors`.  The schema also defines properties for the errors.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/Docfx.Build.RestApi.Tests/TestData/overwrite/rest.overwrite.parameters.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    - name: object_id\n      description: The new object_id description\n    - name: bodyparam\n      description: The new bodyparam description\n      schema:\n        properties:\n          objectType:\n            description: this is overwrite objectType description\n          provisioningErrors:\n            items:\n              schema:\n                properties:\n                  errorDetail:\n                    readOnly: false\n                    description: this is overwrite errorDetail description\n```\n\n----------------------------------------\n\nTITLE: Gantt Chart Mermaid Diagram in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to embed a Gantt chart diagram using a code block with the `mermaid` language identifier. The snippet shows a simple Gantt chart defined using Mermaid syntax. Mermaid diagrams are only supported in the `modern` template.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_13\n\nLANGUAGE: md\nCODE:\n```\n```mermaid\ngantt\n    title Git Issues - days since last update\n    dateFormat  X\n    axisFormat %s\n\n    section Issue19062\n    71   : 0, 71\n    section Issue19401\n    36   : 0, 36\n    section Issue193\n    34   : 0, 34\n    section Issue7441\n    9    : 0, 9\n    section Issue1300\n    5    : 0, 5\n```\n```\n\n----------------------------------------\n\nTITLE: Class Definition for Dog in C#\nDESCRIPTION: Defines the Dog class, its inheritance from the base object class, and documents inherited members. It serves as the foundational class representing a dog with properties for name and age, along with constructor details.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Dog.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Dog\n```\n\n----------------------------------------\n\nTITLE: Defining the Issue7629 Method in C#\nDESCRIPTION: Defines the `Issue7629` method within the `IInheritdoc` interface. This method takes no parameters and has a `void` return type, indicating it performs an action without returning a value. The surrounding documentation suggests it should perform a specific task related to the interface's purpose.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.IInheritdoc.verified.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvoid Issue7629()\n```\n\n----------------------------------------\n\nTITLE: Pie Chart Mermaid Diagram in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to embed a Pie chart diagram using a code block with the `mermaid` language identifier. The snippet shows a simple pie chart defined using Mermaid syntax. Mermaid diagrams are only supported in the `modern` template.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_12\n\nLANGUAGE: md\nCODE:\n```\n```mermaid\npie\n\"Dogs\" : 386\n\"Cats\" : 85.9\n\"Rats\" : 15\n```\n```\n\n----------------------------------------\n\nTITLE: Mustache Partial Example\nDESCRIPTION: Shows how to define a Mustache partial that can be reused in multiple renderers.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_2\n\nLANGUAGE: mustache\nCODE:\n```\nInside Partial\n{{ name }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Generation for .NET API Docs\nDESCRIPTION: This JSON snippet configures Docfx to generate API documentation. It specifies the source files (DLLs in this case), source directory, and the destination directory for the generated YAML files, which are used by the build stage.  It's a fundamental setup for API documentation generation from a .NET project.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"src\": [{\n      \"files\": [\"**/bin/Release/**.dll\"],\n      \"src\": \"../\"\n    }],\n    \"dest\": \"api\"\n  },\n  \"build\": {\n    \"content\": [{\n      \"files\": [ \"api/*.yml\" ]\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF for TOC via fileMetadata in docfx.json\nDESCRIPTION: This code snippet shows how to configure PDF generation on a per-TOC file basis using `fileMetadata` within the `docfx.json` file. This is useful when the TOC file is auto-generated or when applying PDF configuration selectively. This configuration associates a rule with a glob pattern (`api/**/toc.yml`) to enable PDF generation for the specified TOC files. It is required that a valid `toc.yml` exists.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/pdf.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"fileMetadata\": {\n      \"pdf\": {\n        \"api/**/toc.yml\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing C# Dictionary Class Metadata YAML\nDESCRIPTION: This YAML snippet represents a metadata example for a C# Dictionary class. It provides detailed properties for an item, including `id`, `alias`, `name`, `fullName`, `type`, `url`, and `source`.  The 'source' property provides information about the code's repository, branch, revision, file path, and line numbers for documentation purposes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/metadata_format_spec.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- uid: System.Collections.Generic.Dictionary`2\n  id: Dictionary`2\n  alias:\n  - Dictionary\n  parent: System.Collections.Generic\n  name: Dictionary<TKey, TValue>\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>\n  type: class\n  url: System.Collections.Generic.Dictionary`2.yml\n  source:\n    repo: https://github.com/dotnet/netfx.git\n    branch: master\n    revision: 5ed47001acfb284a301260271f7d36d2bb014432\n    path: src/system/collections/generic/dictionary.cs\n    startLine: 1\n    endLine: 100\n```\n\n----------------------------------------\n\nTITLE: Data Model for Managed Reference in DocFX\nDESCRIPTION: This snippet details the JSON schema of the Managed Reference Model used by DocFX, including its properties, types, and behaviors for overwriting, merging, replacing, or ignoring data within the model. It covers nested objects such as 'Source', 'GitSource', 'Commit', 'User', 'Exception', and 'LinkInfo'.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_overwrite_files.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nuid:                   string  # Unique identifier for the Model, with merge behavior\nassemblies:            string[]  # Ignored during overwrite\nattributes:            [Attribute]  # Ignored during overwrite\nchildren:              uid[]  # Ignored during overwrite\ndocumentation:         [Source]  # Merge\nexample:               string[]  # Replace\nexceptions:            [Exception]  # Merge keyed list\nfullName:              string  # Replace\nfullName.<lang>:        string  # Replace\nid:                    string  # Replace\nimplements:            uid[]  # Ignored\ninheritance:           uid[]  # Ignored\ninheritedMembers:      uid[]  # Ignored\nisEii:                 boolean  # Replace\nisExtensionMethod:     boolean  # Replace\nlangs:                 string[]  # Replace\nmodifiers.<lang>:      string[]  # Ignored\nname:                  string  # Replace\nname.<lang>:          string  # Replace\nnamespace:             uid  # Replace\noverridden:            uid  # Replace\nparent:                uid  # Replace\nplatform:              string[]  # Replace\nremarks:               markdown  # Replace\nsee:                   [LinkInfo]  # Merge keyed list\nseealso:               [LinkInfo]  # Merge keyed list\nsource:                [Source]  # Merge\nsyntax:                [Syntax]  # Merge\nsummary:               markdown  # Replace\ntype:                  string  # Replace\n\n# Nested property example: Source\nbase:                  string  # Replace\ncontent:               string  # Replace\nendLine:               integer  # Replace\nid:                    string  # Replace\nisExternal:            boolean  # Replace\nhref:                  string  # Replace\npath:                  string  # Replace\nremote:                [GitSource]  # Merge\nstartLine:             integer  # Replace\n\n# Nested property: GitSource\npath:                  string  # Replace\nbranch:                string  # Replace\nrepo:                  url  # Replace\ncommit:                [Commit]  # Merge\nkey:                   string  # Replace\n\n# Nested property: Commit\ncommitter:             [User]  # Replace\nauthor:                [User]  # Replace\nid:                    string  # Replace\nmessage:               string  # Replace\n\n# Nested property: User\nname:                  string  # Replace\nemail:                 string  # Replace\ndate:                  datetime  # Replace\n\n# Nested property: Exception\ntype:                  uid  # Merge key\ndescription:           markdown  # Replace\ncommentId:             string  # Ignored\n\n# Nested property: LinkInfo\nlinkId:                uid or href  # Merge key\naltText:               markdown  # Replace\ncommentId:             string  # Ignore\nlinkType:              enum(`CRef` or `HRef`)  # Ignore\n```\n\n----------------------------------------\n\nTITLE: IAnimal Eat() Method\nDESCRIPTION: This code snippet defines the Eat() method of the IAnimal interface. It represents the basic eating behavior of an animal. This method takes no parameters and returns void.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.IAnimal.verified.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Eat()\n```\n\n----------------------------------------\n\nTITLE: IAnimal Indexer\nDESCRIPTION: This code snippet defines an indexer for the IAnimal interface, allowing access to animal names using an integer index. It returns a string representing the animal's name at the specified index. The indexer is read-only.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.IAnimal.verified.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring this[int index] { get; }\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Links to HTML Anchors\nDESCRIPTION: Shows the output HTML anchor element generated by Docfx from markdown link syntax. It is the rendered result of the markdown link pointing to the specified URL, displaying the link text appropriately.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://dotnet.github.io/docfx\">docfx</a>\n```\n\n----------------------------------------\n\nTITLE: Declaring a storage account resource in Bicep\nDESCRIPTION: This Bicep snippet defines a resource for an Azure Storage Account with a specified name, demonstrating infrastructure as code syntax for resource deployment. It requires Bicep and Azure deployment context, focusing on resource declaration with properties.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/markdown.md#_snippet_1\n\nLANGUAGE: Bicep\nCODE:\n```\nresource storageAccount 'Microsoft.Storage/storageAccounts@2021-06-01' = {\n  name: 'hello'\n  // (...) \n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ICat Interface in C#\nDESCRIPTION: Declares the public interface `ICat` within the `CatLibrary` namespace. This interface inherits from the `IAnimal` interface, establishing a base contract for cat-like objects. Implementations must provide the members defined in both `ICat` and `IAnimal`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.ICat.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICat : IAnimal\n```\n\n----------------------------------------\n\nTITLE: Basic DocFX Build Command Usage\nDESCRIPTION: Shows the basic syntax pattern for using the docfx build command with optional configuration file and additional options.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-build.md#_snippet_0\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx build [config] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Filter APIs with Custom Configuration\nDESCRIPTION: This JSON snippet illustrates the use of a custom filter configuration file in the `docfx.json`. It points to a YAML file (`filterConfig.yml`) which defines rules for filtering APIs based on various criteria. This enables precise control over which APIs are included in the generated documentation.  The `filter` property specifies the location of the custom filter.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"src\": [{\n      \"files\": [\"**/bin/Release/**.dll\"],\n      \"src\": \"../\"\n    }],\n    \"dest\": \"api\",\n    \"filter\": \"filterConfig.yml\" // <-- Path to custom filter config\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Require\nDESCRIPTION: Shows how to require a CommonJS module and use its exported function in a preprocessor.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar common = require('./common.js');\n// call util\ncommon.util();\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Method DoNothing<T> in C#\nDESCRIPTION: This snippet defines a public method `DoNothing` that accepts a generic type parameter `T` and has a void return type. The accompanying documentation states this method performs no operation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8948.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void DoNothing<T>()\n```\n\n----------------------------------------\n\nTITLE: Implementing Sleep Extension Method for ICat in C#\nDESCRIPTION: Extension method that defines how long a cat can sleep. Takes an ICat instance and a long parameter representing hours of sleep.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.ICatExtension.verified.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void Sleep(this ICat icat, long hours)\n```\n\n----------------------------------------\n\nTITLE: Mustache Renderer with Partial\nDESCRIPTION: Shows how to use a Mustache partial in a renderer.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_3\n\nLANGUAGE: mustache\nCODE:\n```\nInside Renderer\n{{ >part }}\n```\n\n----------------------------------------\n\nTITLE: Executing docfx serve to Host a Static Website - PowerShell\nDESCRIPTION: This snippet shows the basic command syntax to run 'docfx serve' with an optional directory argument to host a local static website. The command can be executed in any PowerShell environment. The directory argument specifies the path of the website root to serve; if omitted, the current directory is used as the root. This snippet requires that the 'docfx' tool is installed and available in the system PATH.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-serve.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocfx serve [directory] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Hosting a Static Website from a Specified Directory Using docfx serve - PowerShell\nDESCRIPTION: This example demonstrates hosting a website located in the '_site' directory generated by 'docfx build'. It runs the 'docfx serve' command with the directory argument specifying the location to serve. This serves the static website on a local server using default hostname and port settings and requires docfx to be installed and the _site folder populated with site content.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-serve.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocfx serve _site\n```\n\n----------------------------------------\n\nTITLE: Declaring URL Redirects in Markdown Front Matter for Docfx\nDESCRIPTION: This snippet shows how to define a redirect rule within a Markdown file using YAML Front Matter syntax. Adding a 'redirect_url' attribute enables simple redirection from the current Markdown file's URL to a new URL, which can be relative or external. This supports maintaining backward compatibility or reorganizing documentation without breaking links. It requires the markdown file to be processed by Docfx with front matter parsing enabled.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/config.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nredirect_url: [new URL]  \n---\n```\n\n----------------------------------------\n\nTITLE: Representing Generic Methods in YAML\nDESCRIPTION: This YAML snippet represents the metadata for the generic methods defined in the C# code. Note the backtick notation (``n``) in the UID and ID attributes, which is used to specify the number of generic type parameters.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- uid: System.Tuple.Create``1(``0)\n  id: Create``1(``0)\n  name.csharp:  Create<T1>(T1)\n  fullName.csharp: System.Tuple.Create<T1>(T1)\n- uid: System.Tuple.Create``2(``0,``1)\n  id: Create``2(``0,``1)\n  name.csharp:  Create<T1,T2>(T1,T2)\n  fullName.csharp: System.Tuple.Create<T1,T2>(T1,T2)\n```\n\n----------------------------------------\n\nTITLE: Initializing DocFX Project via Command Line in PowerShell\nDESCRIPTION: Runs the 'docfx init' command in PowerShell to generate initial docfx.json configuration, guiding the user through project setup. Requires DocFX CLI to be installed and available in the environment. Key options include '--help' for listing available flags, '-y'/'--yes' to answer all prompts affirmatively, and '-o'/'--output' to specify the target output directory. Input is given entirely through the command line, and the output is a set of DocFX configuration files in the specified directory.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-init.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocfx init [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Defining C# Method Jump with Generic Parameters\nDESCRIPTION: Defines the public method `Jump` for the `Cat<T, K>` class. It is marked with the `Conditional(\"Debug\")` attribute, meaning it's only included in debug builds. It accepts parameters of generic types T and K, and a boolean `ref` parameter. It may throw an `ArgumentException`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[Conditional(\"Debug\")]\npublic void Jump(T ownType, K anotherOwnType, ref bool cheat)\n```\n\n----------------------------------------\n\nTITLE: Customizing Footer with Mustache Partial (Default Template)\nDESCRIPTION: Example of a custom Mustache partial file (`partials/footer.tmpl.partial`) for the default template. This HTML snippet replaces the default site footer with content including a GitHub Follow button, utilizing the `{{source.remote.repo}}` template variable and embedding an external script.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/template.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<footer>\n  <a class=\"github-button\" href=\"{{source.remote.repo}}\" data-size=\"large\" aria-label=\"Follow\">Follow</a>\n  <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Modern Template in docfx.json\nDESCRIPTION: Demonstrates how to include a custom template folder (e.g., `my-template`) in the `docfx.json` configuration when using the 'modern' template. The custom template path is added to the `template` array after 'default' and 'modern' to allow overriding or extending styles and scripts.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/template.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"template\": [\n      \"default\",\n      \"modern\",\n      \"my-template\" // <-- Path to custom template\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Example\nDESCRIPTION: Demonstrates a Markdown link that will be transformed based on the primary renderer.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Link To B](B.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Tween Method (int)\nDESCRIPTION: This code snippet defines the `Tween` method that animates an integer value from a starting value to an end value over a specified duration, invoking a callback function on each change. It takes `from`, `to` and `duration` as input and `onChange` as a callback. It returns a generic object representing the tween instance.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue8101.verified.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static object Tween(int from, int to, float duration, Action<int> onChange)\n```\n\n----------------------------------------\n\nTITLE: Exporting a Specific Template Using DocFX CLI - PowerShell\nDESCRIPTION: Illustrates exporting the contents of a specific DocFX template (such as 'modern') using the export sub-command. Requires DocFX to be installed. The command outputs the chosen template to the default '_exported_templates' directory, unless an output directory is specified via '--output'. The 'modern' parameter specifies which template to export.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-template.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocfx template export modern\n```\n\n----------------------------------------\n\nTITLE: Extension Method Foo for ContainersRefType in C#\nDESCRIPTION: This method provides a 'Foo' extension to ContainersRefType, enabling call syntax c.Foo(). It accepts a ContainersRefType argument and executes specific logic, likely related to container management or processing. Similar to Bar, it returns void and is intended for use as an extension method.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.Issue231.verified.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static void Foo(this ContainersRefType c)\n```\n\n----------------------------------------\n\nTITLE: Instantiating C# Cat<T, K> and Using Unsafe Method\nDESCRIPTION: Demonstrates how to create an instance of the generic `Cat<T, K>` class using `object` for T and `int` for K. It also shows calling the `GetFeetLength` method, which requires an `unsafe` context because it takes an integer pointer.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar a = new Cat(object, int)();\nint catNumber = new int();\nunsafe\n{\n    a.GetFeetLength(catNumber);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap Generation Options in docfx.json\nDESCRIPTION: Illustrates the configuration options for generating a `sitemap.xml` file, specified within the `sitemap` property under the `build` section. Key options include `baseUrl` (required for generation), default `priority` and `changefreq`, and `fileOptions` for overriding these settings for specific file patterns.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"sitemap\":{\n        \"baseUrl\": \"https://dotnet.github.io/docfx\",\n        \"priority\": 0.1,\n        \"changefreq\": \"monthly\",\n        \"fileOptions\":{\n            \"**/api/**.yml\": {\n                \"priority\": 0.3,\n                \"lastmod\": \"2001-01-01\",\n            },\n            \"**/GettingStarted.md\": {\n                \"baseUrl\": \"https://dotnet.github.io/docfx/conceptual\",\n                \"priority\": 0.8,\n                \"changefreq\": \"daily\"\n            }\n        }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Patterns for Docfx Site Using src and dest in JSON\nDESCRIPTION: This JSON snippet demonstrates how to customize URLs in Docfx by specifying 'src' and 'dest' properties in the content build configuration. It remaps the base URL from the file system directory name to a new URL prefix, allowing flexible URL structures. Files residing in a specific directory, e.g., 'articles', are served under a different URL path, e.g., 'docs'. This approach requires files to be organized accordingly in the source directory relative to docfx.json.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/config.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"content\": [\n      { \"files\": \"**/*.{md,yml}\", \"src\": \"articles\", \"dest\": \"docs\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C# Static Subtraction Operator\nDESCRIPTION: Defines a public `static` subtraction operator (`-`) for the `Cat<T, K>` class. Similar to the addition operator, it takes a `Cat<T, K>` instance and an integer, returning an integer result.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic static int operator -(Cat<T, K> lsr, int rsr)\n```\n\n----------------------------------------\n\nTITLE: Generic Issue8764<T> Method with Unmanaged Constraint in C#\nDESCRIPTION: Generic method with a type parameter T that must be an unmanaged type, showing how to define constraints on generic type parameters.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue8764<T>() where T : unmanaged\n```\n\n----------------------------------------\n\nTITLE: Customizing H1 Font Size in Modern Template CSS\nDESCRIPTION: Provides a CSS example for a custom modern template, placed in `my-template/public/main.css`. This snippet targets `<h1>` elements within the `article` tag and sets their font size to 40px, illustrating a basic style override.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/template.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* file: my-template/public/main.css */\narticle h1 {\n  font-size: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Export\nDESCRIPTION: Demonstrates how to export a function from a CommonJS module in a preprocessor.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexports.util = function () {}\n```\n\n----------------------------------------\n\nTITLE: Customizing H1 Font Size in Default Template CSS\nDESCRIPTION: Provides a CSS example for a custom default template, intended to be placed in `styles/main.css`. This snippet targets `<h1>` elements within the `article` tag and sets their font size to 40px.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/template.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* file: styles/main.css */\narticle h1 {\n  font-size: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Message Severity Rules in docfx.json\nDESCRIPTION: Demonstrates how to override the default severity level for specific log messages using the global `rules` property. The key is the log code (e.g., `InvalidHref`), and the value specifies the desired severity (`verbose`, `info`, `suggestion`, `warning`, `error`). This example sets `InvalidHref` messages to `info` severity.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"InvalidHref\": \"info\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Resource Files in docfx.json `build` Section\nDESCRIPTION: Illustrates configuring the `resource` property in the `build` section. This property takes an array of file patterns (supporting glob syntax and File Mappings) to include non-processed files like images or CSS as resources in the output.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"resource\": [\"**/*.png\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Template with Master Page\nDESCRIPTION: Illustrates a conceptual template that uses a master page.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_8\n\nLANGUAGE: mustache\nCODE:\n```\n{{!master('_master.html')}}\nHello World\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Method - C#\nDESCRIPTION: This C# code defines an abstract method named `TestMethod1` within the abstract class. The method takes a generic type parameter `T` and an integer as input parameters, and returns a value of type `T`. The comments around the code describe the documentation of the function, including parameters and return types. This method is intended to be implemented by the child classes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue6366.Class1-1.verified.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract T TestMethod1(T parm1, int parm2)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Dispose Method in C#\nDESCRIPTION: Declares the `Dispose` method for the `Inheritdoc` class, fulfilling the contract of the `System.IDisposable` interface. This method is intended for releasing unmanaged resources.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Dispose()\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only Name Property in C#\nDESCRIPTION: Declares a public, read-only string property named `Name` within the `Issue5432` struct. This property provides access to a string value associated with an instance of the struct. The property type is `System.String`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromAssembly.Issue5432.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic string Name { get; }\n```\n\n----------------------------------------\n\nTITLE: Specifying MSBuild Properties\nDESCRIPTION: This JSON snippet demonstrates specifying MSBuild properties within the Docfx configuration,  allowing you to influence the build process when generating API docs from projects or solutions. In this example, the `TargetFramework` property is set to `net8.0`, optimizing the build process by targeting a specific framework. This is particularly useful for projects targeting multiple frameworks.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"src\": [{\n      \"files\": [\"**/bin/Release/**.dll\"],\n      \"src\": \"../\"\n    }],\n    \"dest\": \"api\",\n    \"properties\": {\n      \"TargetFramework\": \"net8.0\"\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing REST APIs Using Tags in Swagger 2.0 Specification\nDESCRIPTION: This example demonstrates how to define and use tags in a Swagger 2.0 file to organize APIs into logical groups. It shows the definition of 'Basic' and 'Advanced' tags and how to assign operations to these tags, including the use of x-bookmark-id for URL fragments.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/rest-api-docs.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"Contacts\",\n    \"version\": \"1.6\"\n  },\n  \"host\": \"microsoft.com\",\n  \"basePath\": \"/docfx\",\n  \"schemes\": [\n    \"https\"\n  ],\n  \"tags\": [\n    {\n      \"name\": \"Basic\",\n      \"x-bookmark-id\": \"BasicBookmark\",\n      \"description\": \"Basic description\"\n    },\n    {\n      \"name\": \"Advanced\",\n      \"description\": \"Advanced description\"\n    }\n  ],\n  \"paths\": {\n    \"/contacts\": {\n      \"get\": {\n        \"operationId\": \"get_contacts\",\n        \"tags\": [\n          \"Basic\",\n          \"Advanced\"\n        ]\n      },      \n      \"set\": {\n        \"operationId\": \"set_contacts\",\n        \"tags\": [\n          \"Advanced\"\n        ]\n      },\n      \"delete\": {\n        \"operationId\": \"delete_contacts\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Struct Issue5432 in C#\nDESCRIPTION: Defines a public structure named `Issue5432` within the `BuildFromAssembly` namespace. This struct is part of the `BuildFromAssembly.dll` assembly and inherits standard members from `System.Object`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromAssembly.Issue5432.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic struct Issue5432\n```\n\n----------------------------------------\n\nTITLE: Example Mustache Master Page\nDESCRIPTION: Illustrates a basic HTML master page using mustache syntax with a body placeholder.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_7\n\nLANGUAGE: html with mustache\nCODE:\n```\n<html>\n    <head></head>\n    <body>\n        {{!body}}\n    <body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Mustache Dependency Include Syntax\nDESCRIPTION: Illustrates the syntax for including dependencies in a Mustache template.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_4\n\nLANGUAGE: mustache\nCODE:\n```\n{{!include('<file_name>')}}\n```\n\n----------------------------------------\n\nTITLE: Issue2723 Method with Remarks in C#\nDESCRIPTION: Method demonstrating various documentation features including note blocks, inline code with angle brackets, links, and code snippets with special characters.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue2723()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nfor (var i = 0; i > 10; i++) // & \" '\nvar range = new Range<int> { Min = 0, Max = 10 };\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar range = new Range<int> { Min = 0, Max = 10 };\n```\n\n----------------------------------------\n\nTITLE: Including Specific Markdown Block in Article - Markdown\nDESCRIPTION: This snippet illustrates a practical example of including a specific markdown block file located at '../../includes/my-markdown-block.md' under the title 'my-markdown-block'. It's a block-level [!INCLUDE] directive used to insert shared documentation content into multiple articles. Make sure the file path is correct and the included file is managed separately from the main documentation build.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE [my-markdown-block](../../includes/my-markdown-block.md)]\n```\n\n----------------------------------------\n\nTITLE: Declaring RtfBuildStep Implementing IDocumentBuildStep in C#\nDESCRIPTION: Defines the RtfBuildStep class exported as an IDocumentBuildStep specifically for the RtfDocumentProcessor. This step encapsulates the logic of transforming RTF content into HTML within the build pipeline. Interface methods like Build, Prebuild, and Postbuild need to be implemented.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_build_your_own_type_of_documentation_with_custom_plug-in.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Export(nameof(RtfDocumentProcessor), typeof(IDocumentBuildStep))]\npublic class RtfBuildStep : IDocumentBuildStep\n{\n    // todo : implements IDocumentBuildStep.\n}\n```\n\n----------------------------------------\n\nTITLE: Method Definition: DoNothing<T>() (C#)\nDESCRIPTION: Defines the `DoNothing<T>()` method within the `Class1.IIssue8948` interface. This method takes a generic type `T` as a type parameter but performs no specific operation with it. It demonstrates the use of generics in an interface method.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.IIssue8948.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid DoNothing<T>()\n```\n\n----------------------------------------\n\nTITLE: Enabling PDF Generation in docfx.json\nDESCRIPTION: This snippet demonstrates how to enable PDF generation for the entire site by setting the `pdf` global metadata to `true` within the `docfx.json` configuration file. This setting enables a 'Download PDF' button on the website and configures Docfx to generate PDF files during the build process.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/pdf.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"globalMetadata\": {\n      \"pdf\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Other Required Methods in RtfBuildStep in C#\nDESCRIPTION: Implements placeholder or no-op versions of other IDocumentBuildStep interface methods such as Prebuild and Postbuild. These methods can manipulate the entire document set or finalize transformations but are left minimal here due to the plugin's scope.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_build_your_own_type_of_documentation_with_custom_plug-in.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic IEnumerable<FileModel> Prebuild(IEnumerable<FileModel> models, IHostService host)\n{\n    return models;\n}\n\npublic void Postbuild(ImmutableList<FileModel> models, IHostService host)\n{\n    // No additional processing needed after build\n}\n\npublic int BuildOrder => 0;\n```\n\n----------------------------------------\n\nTITLE: Defining C# Public Read-Only Property Name\nDESCRIPTION: Defines the public string property `Name` for the `Cat<T, K>` class. It is a read-only property with only a `get` accessor.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic string Name { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining C# Class Inheritance in YAML using Spec IDs\nDESCRIPTION: Shows a C# generic class (`KeyedByTypeCollection<TItem>`) inheriting from another generic class (`KeyedCollection<Type, TItem>`). The corresponding YAML snippet displays the `inheritance` property as a list of spec identifiers representing the full inheritance chain, including base types like `System.Object`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System.Collections.Generic\n{\n    public class KeyedByTypeCollection<TItem> : KeyedCollection<Type, TItem>\n    {\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuid : System.Collections.Generic.KeyedByTypeCollection`1\ninheritance:\n- System.Collections.ObjectModel.KeyedCollection{System.Type,{TItem}}\n- System.Collections.ObjectModel.Collection{{TItem}}\n- System.Object\n```\n\n----------------------------------------\n\nTITLE: Adding .NET BCL Xrefmap URL to docfx.json Build Configuration\nDESCRIPTION: Demonstrates how to configure Docfx to cross reference .NET base class library types by adding the official Microsoft BCL xrefmap JSON URL to the build 'xref' property within docfx.json. This integration enables resolving .NET API UIDs automatically in markdown files.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"build\": {\n    \"xref\": [\n      \"https://learn.microsoft.com/en-us/dotnet/.xrefmap.json\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example YAML Output from Docfx Metadata Step\nDESCRIPTION: This YAML snippet is an example of the output generated by the Docfx metadata step. It contains metadata information about a C# method, including its UID, comment ID, name, type, source location, and summary.  The `uid` is important when referencing entities from Markdown content.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/basic-concepts.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n### YamlMime:ManagedReference\nitems:\n- uid: MyProject.Extensions.DateOnlyExtensions.AgeAt(System.DateOnly,System.DateOnly)\n  commentId: M:MyProject.Extensions.DateOnlyExtensions.AgeAt(System.DateOnly,System.DateOnly)\n  id: AgeAt(System.DateOnly,System.DateOnly)\n  isExtensionMethod: true\n  parent: MyProject.Extensions.DateOnlyExtensions\n  langs:\n  - csharp\n  - vb\n  name: AgeAt(DateOnly, DateOnly)\n  nameWithType: DateOnlyExtensions.AgeAt(DateOnly, DateOnly)\n  fullName: MyProject.Extensions.DateOnlyExtensions.AgeAt(System.DateOnly, System.DateOnly)\n  type: Method\n  source:\n    remote:\n      path: src/MyProject/Extensions/DateOnlyExtensions.cs\n      branch: main\n      repo: https://github.com/MyUser/MyProject.git\n    id: AgeAt\n    path: ../../MyProject/src/MyProject/Extensions/DateOnlyExtensions.cs\n    startLine: 63\n  assemblies:\n  - MyProject.Common\n  namespace: MyProject.Extensions\n  summary: >-\n    Calculates the age of a person on a certain date based on the supplied date of birth.  Takes account of leap years, using the convention that someone born on 29th February in a leap year is not legally one year older until 1st March of a non-leap year.\n```\n\n----------------------------------------\n\nTITLE: Configuring docfx.json to Include Swagger Files for REST API Documentation\nDESCRIPTION: This snippet shows how to configure the docfx.json file to include Swagger JSON files in the build process. The configuration specifies that any file with the .swagger.json extension should be processed as part of the content build.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/rest-api-docs.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"content\": [{\n      \"files\": [ \"**/*.swagger.json\" ] // <-- Include swagger JSON files\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Project with Dotnet Run (Bash)\nDESCRIPTION: This command executes the sample project's build process using the .NET CLI's `dotnet run` command. It specifies `--project build` to target the build project within the solution, which is configured to use the `Docfx.App` package programmatically instead of the global `docfx` command.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/extensions/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run --project build\n```\n\n----------------------------------------\n\nTITLE: Defining enum Class1.Issue9260 in C#\nDESCRIPTION: This snippet defines the enum `Class1.Issue9260` as a public enum. It's a basic enum definition in C#, representing a set of named integer constants.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue9260.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum Class1.Issue9260\n```\n\n----------------------------------------\n\nTITLE: Declaring Generic Class Complex<T, J> - C#\nDESCRIPTION: This snippet declares the `Complex` class in C#. It is a generic class with two type parameters, `T` and `J`, intended to represent a complex type structure. The class is publicly accessible and part of the CatLibrary namespace, as indicated by the surrounding documentation context.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Complex-2.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Complex<T, J>\n```\n\n----------------------------------------\n\nTITLE: Executing the Metadata Step with Docfx CLI\nDESCRIPTION: This shell command demonstrates how to execute the metadata step of the Docfx build process using the command line interface. It specifies the path to the `docfx.json` configuration file. This step extracts metadata from the specified .NET projects and outputs YAML files.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/basic-concepts.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocfx metadata path/to/docfx.json\n```\n\n----------------------------------------\n\nTITLE: Specifying Metadata for Docfx Content Using YAML Front Matter and JSON Config\nDESCRIPTION: This combined snippet explains methods to attach metadata to content in Docfx. Using YAML Front Matter in markdown files allows per-article metadata (like title and description). The 'globalMetadata' property in docfx.json sets metadata for the entire site, while 'fileMetadata' sets metadata for files matching glob patterns. The precedence order is YAML front matter over fileMetadata over globalMetadata. This metadata controls page context, appearance, and behavior during site generation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/config.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: a title\ndescription: a description\n---\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"globalMetadata\": {\n      \"_appTitle\": \"My App\"\n    },\n    \"fileMetadata\": {\n      \"_appTitle\": {\n        \"articles/dotnet/**/*.md\": \".NET\",\n        \"articles/typescript/**/*.md\": \"TypeScript\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting API Documentation Structure Example\nDESCRIPTION: This snippet shows the resulting documentation structure based on the tag organization in the previous example. It illustrates how APIs are grouped by their tags, with untagged APIs appearing in the 'Other APIs' section.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/rest-api-docs.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nBasic\n├─ get_contacts\nAdvanced\n├─ get_contacts\n├─ set_contacts\nOther APIs\n├─ delete_contacts\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Redirection Configuration\nDESCRIPTION: A YAML front matter block that specifies a redirection URL to navigate users to a parent index page.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/walkthrough/walkthrough_overview.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nredirect_url: ../../index.html\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Content Files (Shorthand) in DocFX (JSON)\nDESCRIPTION: This JSON snippet illustrates the shorthand method for specifying content files within the `build` section of `docfx.json`. It uses glob patterns (`**/*.md`, `TOC.yml`) to include all Markdown files recursively and the top-level `TOC.yml` file. Filenames are resolved relative to the directory containing the `docfx.json` file.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"content\": [\"**/*.md\", \"TOC.yml\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property: DoDad in C#\nDESCRIPTION: Defines a public read-only string property named DoDad within the Inheritdoc.Issue7484 class. This property could hold an arbitrary string value.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue7484.verified.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic string DoDad { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining a DocFX LandingPage Sample in YAML\nDESCRIPTION: This snippet demonstrates a complete YAML document for a DocFX landing page model using the custom schema keywords described earlier. It includes core keys such as 'title', 'description', 'uid', and complex properties like 'metadata' and an array of 'sections'. This YAML is designed as an input example, highlighting structures validated by the schema, and shows where DocFX resolutions such as links (with 'href') and localizable strings are intended.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/docfx_document_schema.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n### YamlMime:LandingPage\ntitle: Web Apps Documentation\ndescription: This is description\nuid: webapp\nmetadata:\n  title: Azure Web Apps Documentation - Tutorials, API Reference\n  meta.description: Learn how to use App Service Web Apps to build and host websites and web applications.\n  services: app-service\n  author: apexprodleads\n  manager: carolz\n  ms.service: app-service\n  ms.tgt_pltfrm: na\n  ms.devlang: na\n  ms.topic: landing-page\n  ms.date: 01/23/2017\n  ms.author: carolz\nsections:\n- title: 5-Minute Quickstarts\n  children:\n  - text: .NET\n    href: app-service-web-get-started-dotnet.md\n  - text: Node.js\n    href: app-service-web-get-started-nodejs.md\n  - text: PHP\n    href: app-service-web-get-started-php.md\n  - text: Java\n    href: app-service-web-get-started-java.md\n  - text: Python\n    href: app-service-web-get-started-python.md\n  - text: HTML\n    href: app-service-web-get-started-html.md\n- title: Step-by-Step Tutorials\n  children:\n  - content: \"Create an application using [.NET with Azure SQL DB](app-service-web-tutorial-dotnet-sqldatabase.md) or [Node.js with MongoDB](app-service-web-tutorial-nodejs-mongodb-app.md)\"\n  - content: \"[Map an existing custom domain to your application](app-service-web-tutorial-custom-domain.md)\"\n  - content: \"[Bind an existing SSL certificate to your application](app-service-web-tutorial-custom-SSL.md)\"\n```\n\n----------------------------------------\n\nTITLE: Age Property in Dog Class C#\nDESCRIPTION: The Age property exposes the dog's age as an integer. It is a read-only property allowing external access to the dog's age value, which is set via the constructor.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Dog.verified.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic int Age { get; }\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Default Template in docfx.json\nDESCRIPTION: Configures the DocFX build process to include a custom template folder (`my-template`) when using the 'default' template. The custom template path is added to the `templates` (plural) array within the `build` section of `docfx.json`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/template.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"templates\": [\n      \"default\",\n      \"my-template\" // <-- Path to custom template\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Code with Region or Line Range - Markdown\nDESCRIPTION: This markdown snippet demonstrates how to include only a specific region or line range from a code file using the [!code-csharp[](file#region)] and [!code-csharp[](file#Lx-Ly)] formats. Regions are code blocks tagged within source files; line ranges are specified by line numbers. These options allow for displaying relevant portions of code in documentation while skipping unrelated or lengthy sections.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n[!code-csharp[](Program.cs#region)]\n[!code-csharp[](Program.cs#L12-L16)]\n```\n\n----------------------------------------\n\nTITLE: Testing DocFX Project\nDESCRIPTION: This command runs the tests for the docfx project. Prerequisites include the .NET SDK.  The output will be the test results. This command is used within the build and test process.\nSOURCE: https://github.com/dotnet/docfx/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Initializing and Building DocFX Website\nDESCRIPTION: This series of commands initializes a DocFX project, builds a website from the initialized project, and serves the website locally.  It requires the DocFX global tool to be installed. The `--serve` flag enables the website to be viewed at http://localhost:8080.  The output is a website ready to be viewed locally.\nSOURCE: https://github.com/dotnet/docfx/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocfx init -y\ndocfx build docfx_project\\docfx.json --serve\n```\n\n----------------------------------------\n\nTITLE: Defining an Indexer in C#\nDESCRIPTION: This C# code snippet defines an indexer within the `IList` interface.  Indexers allow instances of a class to be accessed like arrays using the square bracket notation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System.Collections\n{\n    public interface IList\n    {\n        object this[int index] { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C# Struct Inheritdoc.Issue8129\nDESCRIPTION: Defines the public C# struct `Inheritdoc.Issue8129`. This is the primary declaration of the struct type documented on this page.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue8129.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic struct Inheritdoc.Issue8129\n```\n\n----------------------------------------\n\nTITLE: Delegate Definition: ContainersRefTypeDelegate in C#\nDESCRIPTION: Defines the ContainersRefTypeDelegate delegate. This delegate does not take any parameters and returns void. It is part of the CatLibrary.Core namespace and defined within the CatLibrary.Core.dll assembly.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ContainersRefType.ContainersRefTypeDelegate.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic delegate void ContainersRefType.ContainersRefTypeDelegate()\n```\n\n----------------------------------------\n\nTITLE: Issue896 Method with See Also References in C#\nDESCRIPTION: Simple method that includes see-also links to related class members, demonstrating cross-referencing in documentation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue896()\n```\n\n----------------------------------------\n\nTITLE: C# Unit Test Method Naming Conventions\nDESCRIPTION: This snippet illustrates correct and incorrect unit test method naming styles in C#. The recommended style is descriptive, indicating what is tested, under which conditions, and the expected outcome, using either Pascal casing or underscores for readability. This practice improves code clarity and maintainability. Incorrect examples are simple generic names that do not convey intent. No additional dependencies are required.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/csharp_coding_standards.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nPublicApiArgumentsShouldHaveNotNullAnnotation\nPublic_api_arguments_should_have_not_null_annotation\n```\n\nLANGUAGE: C#\nCODE:\n```\nTest1\nConstructor\nFormatString\nGetData\n```\n\n----------------------------------------\n\nTITLE: Representing C# Method Signatures with Spec Identifiers in YAML\nDESCRIPTION: Shows a C# method with generic type parameters, array parameters, and pointer parameters, alongside the corresponding YAML `references` section illustrating how these complex types are represented using Spec Identifiers (e.g., `{TArg}`, `System.Int32[]`, `System.Byte*`, `System.Collections.Generic.List{{TArg}[]}`). This demonstrates mapping complex C# type signatures to unique YAML identifiers.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Foo\n{\n   public class Bar\n   {\n      public unsafe List<String> FooBar<TArg>(int[] arg1, byte* arg2, TArg arg3, List<TArg[]> arg4)\n      {\n          return null;\n      }\n   }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nreferences:\n- uid: System.Collections.Generic.List{System.String}\n- uid: System.Int32[]\n- uid: System.Byte*\n- uid: {TArg}\n- uid: System.Collections.Generic.List{{TArg}[]}\n```\n\n----------------------------------------\n\nTITLE: Embedding YAML Metadata Section in DocFX Markdown\nDESCRIPTION: Shows how to include a YAML metadata block at the beginning of a DocFX Markdown file. This section, enclosed by `---` lines, is used to associate the Markdown content with a specific documentation item identified by its `uid` and can also override properties defined elsewhere, except for forbidden ones like `uid` or `parent`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/metadata_format_spec.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\nuid: System.String\nsummary: String class\n---\n\nThis is a **string** class.\n```\n\n----------------------------------------\n\nTITLE: Expanding Xref Template to HTML Output\nDESCRIPTION: This HTML snippet represents the rendered output after expanding a Mustache-based xref template in DocFX, using provided 'title' and 'description'. It demonstrates the actual HTML produced for documentation, with the title as heading and the description as a paragraph. The snippet is output of a pure rendering process and does not require runtime execution.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/docfx_document_schema.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nWeb Apps Documentation: <p>This is description</p>\n```\n\n----------------------------------------\n\nTITLE: Constructor: Issue7484() in C#\nDESCRIPTION: Defines the constructor for the Inheritdoc.Issue7484 class. This is a public constructor that takes no arguments and initializes a new instance of the class.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue7484.verified.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic Issue7484()\n```\n\n----------------------------------------\n\nTITLE: Listing Available Templates Using DocFX CLI - PowerShell\nDESCRIPTION: Demonstrates how to list all available DocFX templates from the command line using PowerShell syntax. No dependencies beyond having DocFX installed and available in the system PATH. The command takes no required parameters, and outputs a list of template names to the console. Useful for discovering available templates before exporting or customizing them.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-template.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocfx template list\n```\n\n----------------------------------------\n\nTITLE: Representing Fields, Properties, and Events in YAML\nDESCRIPTION: This YAML snippet represents the metadata for a field (`Empty`), a property (`Length`), and an event (`CancelKeyPress`) from the C# code. It shows how UIDs, IDs, names, and full names are structured to describe these elements for documentation generation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- uid: System.String.Empty\n  id: Empty\n  name.csharp: Empty\n  fullName.csharp: System.String.Empty\n- uid: System.String.Length\n  id: Length\n  name.csharp: Length\n  fullName.csharp: System.String.Length\n- uid: System.Console.CancelKeyPress\n  id: CancelKeyPress\n  name.csharp: CancelKeyPress\n  fullName.csharp: System.Console.CancelKeyPress\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Info in DocFX\nDESCRIPTION: This environment variable, `DOCFX_KEEP_DEBUG_INFO`, when set to \"true\", instructs DocFX to retain debugging information within the generated HTML output. This includes details like source file paths, line numbers, JSON paths, raw source data, and a 'nocheck' attribute.  This is useful for debugging and tracing the source of information within the documentation. No dependencies are required for this configuration to function.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-environment-variables-reference.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Class Definition for BuildFromProject.Namespace Class1.Issue8665\nDESCRIPTION: Defines the \"Class1.Issue8665\" class, including its inheritance from the base object class. Provides metadata about its assembly and namespace.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8665.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Class1.Issue8665\n```\n\n----------------------------------------\n\nTITLE: Default Footer Template Example in HTML\nDESCRIPTION: This is an example of the default footer template used by Docfx, presented in HTML. It demonstrates how to structure a footer with elements like page number and total pages. The `pageNumber` and `totalPages` classes are used to inject printing values. The `font-size` style is explicitly set.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/pdf.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"width: 100%; font-size: 12px;\">\n  <div style=\"float: right; padding: 0 2em\">\n    <span class=\"pageNumber\"></span> / <span class=\"totalPages\"></span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example of Nested TOCs for Single PDF\nDESCRIPTION: This YAML snippet demonstrates how to construct a single PDF file using nested TOCs. The `order` attribute is set to a higher value (200) to prevent the PDF TOC from being displayed on the website.  The example then lists `href` entries to the sub-TOCs to be included. This assumes nested TOC files exist for each section.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/pdf.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\norder: 200\nitems:\n- name: Section 1\n  href: section-1/toc.yml\n- name: Section 2\n  href: section-2/toc.yml\n```\n\n----------------------------------------\n\nTITLE: Excluding an API using XML Documentation\nDESCRIPTION: This C# snippet shows the `<exclude />` documentation comment which excludes a type or member on a per-API basis. This functionality is useful when you want to specifically hide certain classes, methods or properties from the generated documentation without altering other filter configurations.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n/// <exclude />\npublic class Foo { }\n```\n\n----------------------------------------\n\nTITLE: Property: Bar in Issue8665\nDESCRIPTION: Read-only property returning a character value \"Bar\" associated with the instance. Used to access internal \"bar\" data.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8665.verified.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic char Bar { get; }\n```\n\n----------------------------------------\n\nTITLE: Property: Baz in Issue8665\nDESCRIPTION: Read-only property providing access to the string \"Baz\" associated with the instance. Represents descriptive or additional data.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8665.verified.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic string Baz { get; }\n```\n\n----------------------------------------\n\nTITLE: Property: Foo in Issue8665\nDESCRIPTION: Read-only integer property \"Foo\" that exposes the \"foo\" value within the class instance. Useful for retrieving stored numerical data.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8665.verified.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic int Foo { get; }\n```\n\n----------------------------------------\n\nTITLE: Disabling Certificate Revocation Checks in DocFX\nDESCRIPTION: The `DOCFX_NO_CHECK_CERTIFICATE_REVOCATION_LIST` environment variable disables the Certificate Revocation List (CRL) check within DocFX. This setting is primarily intended for offline environments where access to CRL servers is not available. No extra configuration is required to use this, however, this variable is only effective if the environment it is run in can't check CRL. The result is that CRL checks are skipped when the variable is set.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-environment-variables-reference.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Linking to Local Files with HTML Anchor Tags in Markdown\nDESCRIPTION: Docfx supports directly referencing local files in HTML anchor tags within markdown files. The example shows linking to a local markdown file with an <a> tag. Docfx processes and converts these file links to the equivalent HTML file references in the published output.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n<a href=\"subfolder/file2.md\">\n```\n\n----------------------------------------\n\nTITLE: Declaring the Issue7629 Method in C#\nDESCRIPTION: Declares the public method `Issue7629` within the `Inheritdoc` class. Similar to `Issue7628`, the comment suggests this method should perform an action, probably related to issue #7629.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.verified.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue7629()\n```\n\n----------------------------------------\n\nTITLE: Empty UpdateHref Method in RtfDocumentProcessor for Unsupported Hyperlinks in C#\nDESCRIPTION: Implements the UpdateHref method as a no-op since hyperlink support is out of scope for this plugin. This method would normally update references and links, but here it remains empty to comply with the interface.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_build_your_own_type_of_documentation_with_custom_plug-in.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic void UpdateHref(FileModel file, IDocumentBuildContext context)\n{\n    // No implementation as hyperlinks are not supported\n}\n```\n\n----------------------------------------\n\nTITLE: Issue7484 Method with Table Formatting in C#\nDESCRIPTION: Method that includes a documentation table with term and description columns, demonstrating how to format tabular data in documentation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue7484()\n```\n\n----------------------------------------\n\nTITLE: Exporting All Templates Using DocFX CLI - PowerShell\nDESCRIPTION: Shows how to export all available DocFX templates by using the 'export' sub-command with the '--all' option. Requires DocFX installed; the command outputs template files to the default '_exported_templates' directory unless otherwise specified. The '--all' flag directs the CLI to include every template in the export operation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-template.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocfx template export --all\n```\n\n----------------------------------------\n\nTITLE: Exporting Embedded Templates with Docfx CLI\nDESCRIPTION: This shell command shows how to export embedded templates within Docfx to a specified directory. The `docfx template export` command is used to export the `default` template to a specified output path.  `docfx template list` can be used to list available templates.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/basic-concepts.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ndocfx template export default -o path/for/exported_templates\n```\n\n----------------------------------------\n\nTITLE: Translating C# Type Definitions (Class, Struct, Enum, etc.) to YAML\nDESCRIPTION: Demonstrates the YAML representation for different C# type declarations (class `String`, struct `Boolean`, interface `IComparable`, enum `ConsoleColor`, delegate `Action`). Each type becomes a YAML item with unique `uid`, `id` (type name), and language-specific `name.csharp` and `fullName.csharp` properties, inheriting the namespace UID.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System\n{\n    public class String {}\n    public struct Boolean {}\n    public interface IComparable {}\n    public enum ConsoleColor {}\n    public delegate void Action();\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- uid: System.String\n  id: String\n  name.csharp: String\n  fullName.csharp: System.String\n- uid: System.Boolean\n  id: Boolean\n  name.csharp: Boolean\n  fullName.csharp: System.String\n- uid: System.IComparable\n  id: IComparable\n  name.csharp: IComparable\n  fullName.csharp: System.IComparable\n- uid: System.ConsoleColor\n  id: ConsoleColor\n  name.csharp: ConsoleColor\n  fullName.csharp: System.ConsoleColor\n- uid: System.Action\n  id: Action\n  name.csharp: Action\n  fullName.csharp: System.Action\n```\n\n----------------------------------------\n\nTITLE: Defining C# Protected Property Age\nDESCRIPTION: Defines the protected integer property `Age` for the `Cat<T, K>` class. It is marked as `Obsolete` and has both `get` and `set` accessors.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Obsolete]\nprotected int Age { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Pipeline for DocFX Deployment (YAML)\nDESCRIPTION: Defines an Azure DevOps pipeline triggered by pushes to the main branch. It uses an Ubuntu VM, installs the .NET SDK (version 8.x), installs the global DocFX tool, builds the documentation using the `docfx build` command, and then executes a Bash script to deploy the built site to GitHub Pages. It relies on a variable group named `GitHubPAT` containing the secret `GITHUB_PAT`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/publish-azure-devops.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n  branches:\n    include:\n      - main  # Trigger on main branch\n\npool:\n  vmImage: 'ubuntu-latest'  # Use the latest Ubuntu VM\n\nvariables:\n  - group: GitHubPAT\n\nsteps:\n  # Step 1: Install DocFX\n  - task: UseDotNet@2\n    inputs:\n      packageType: 'sdk'\n      version: '8.x'  # Ensure you have .NET SDK installed\n      installationPath: $(Agent.ToolsDirectory)/dotnet\n\n  - script: |\n      dotnet tool install -g docfx\n    displayName: 'Install DocFX'\n\n  # Step 2: Build the Documentation using DocFX\n  - script: |\n      docfx build\n    displayName: 'Build Documentation'\n\n  # Step 3: Deploy to GitHub Pages\n  - task: Bash@3\n    displayName: 'Deploy to GitHub Pages'\n    inputs:\n      targetType: 'inline'\n      script: |\n        git config --global user.email \"your-email@example.com\"\n        git config --global user.name \"Your Name\"\n        git clone --branch gh-pages https://$GITHUB_PAT@github.com/$GITHUB_REPO.git out\n        rm -rf out/*\n        cp -r _site/* out/\n        cd out\n        git add --all\n        git commit -m \"Update documentation\"\n        git push origin gh-pages\n    env:\n      GITHUB_PAT: $(GITHUB_PAT)  # The GitHub Personal Access Token\n      GITHUB_REPO: your-github-username/your-repo-name  # Update with your repo details\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Documentation Overwrite for CatLibrary.Cat Generic Class Constructor\nDESCRIPTION: A DocFX documentation overwrite that specifies a unique identifier for the Cat class constructor with two generic parameters and provides a custom summary text to replace the original documentation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/Docfx.Build.ManagedReference.Tests/TestData/overwrite/mref.overwrite.default.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nuid: \"CatLibrary.Cat`2.#ctor\"\nsummary: Overwrite summary\n---\n```\n\n----------------------------------------\n\nTITLE: exports.getOptions Function\nDESCRIPTION: Illustrates the `exports.getOptions` function signature for a preprocessor.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexports.getOptions = function (model) {\n    return {\n        isShared: true;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of docfx download (PowerShell)\nDESCRIPTION: Demonstrates the basic command syntax for `docfx download`. It requires a `path` argument to specify the local save location and accepts optional parameters. Use `docfx download --help` for a full list of options.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-download.md#_snippet_0\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx download <path> [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Defining Fields, Properties and Events in C#\nDESCRIPTION: This C# code snippet demonstrates the definition of a field (`Empty`), a property (`Length`), and an event (`CancelKeyPress`). It showcases how these elements are declared within a namespace and class structure.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System\n{\n    public sealed class String\n    {\n        public static readonly String Empty;\n        public int Length { get; }\n    }\n\n    public static class Console\n    {\n        public static event ConsoleCancelEventHandler CancelKeyPress;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Build Method in RtfBuildStep to Convert RTF to HTML in C#\nDESCRIPTION: Implements the Build method that extracts RTF content from the model, converts it into HTML format (using an external or custom converter), and updates the model content accordingly. This method performs the core transformation of document content during the build pipeline.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_build_your_own_type_of_documentation_with_custom_plug-in.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Build(FileModel model, IHostService host)\n{\n    if (model.Content is Dictionary<string, object> dict && dict.TryGetValue(\"content\", out var rtfObj))\n    {\n        var rtfContent = rtfObj as string;\n        // Use MarkupConverter or another library to convert RTF to HTML\n        var htmlContent = ConvertRtfToHtml(rtfContent);\n        dict[\"content\"] = htmlContent;\n    }\n}\n\nprivate string ConvertRtfToHtml(string rtfContent)\n{\n    // Implementation of conversion goes here.\n    // This can call into the referenced MarkupConverter project.\n    return \"<html><body>\" + rtfContent + \"</body></html>\"; // placeholder\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme and Icons in Modern Template JS\nDESCRIPTION: Example configuration for the `main.js` file (`my-template/public/main.js`) in a custom modern template. It exports an object setting the `defaultTheme` to 'dark' and defining an array of `iconLinks` (GitHub, Twitter) to be displayed in the site header.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/template.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* file: my-template/public/main.js */\nexport default {\n  defaultTheme: 'dark',\n  iconLinks: [\n    {\n      icon: 'github',\n      href: 'https://github.com/dotnet/docfx',\n      title: 'GitHub'\n    },\n    {\n      icon: 'twitter',\n      href: 'https://twitter.com',\n      title: 'Twitter'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Class Definition in C#\nDESCRIPTION: Defines the Inheritdoc.Issue6366.Class2 class which inherits from Inheritdoc.Issue6366.Class1<bool>. This class is part of the BuildFromProject namespace.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue6366.Class2.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Inheritdoc.Issue6366.Class2 : Inheritdoc.Issue6366.Class1<bool>\n```\n\n----------------------------------------\n\nTITLE: Initializing a New DocFX Project (Bash)\nDESCRIPTION: Executes the `docfx init` command to interactively set up a new documentation project in the current working directory. This creates necessary files like `docfx.json` and default folders. Requires the `docfx` global tool to be installed.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocfx init\n```\n\n----------------------------------------\n\nTITLE: Running docfx merge Command Using PowerShell\nDESCRIPTION: This snippet shows how to invoke the docfx merge command via PowerShell to merge multiple .NET API metadata YAML files and toc files into a single output. It assumes the docfx CLI tool is installed and available in PATH. The command can optionally take configuration files and arguments for logging, verbosity, and output destination. The result is a unified YAML artifact created in the designated folder; input config defaults to docfx.json if not specified.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-merge.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocfx merge [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Declaring File Handling Priority for RtfDocumentProcessor in C#\nDESCRIPTION: Implements a method to specify that the processor can handle files with the `.rtf` extension in the article category and assigns a processing priority. This helps DocFX decide which processor to invoke when multiple processors are available for the same file type. A higher priority value means higher precedence in selection.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_build_your_own_type_of_documentation_with_custom_plug-in.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Returns processing priority for .rtf files to indicate this processor handles them\npublic ProcessingPriority GetProcessingPriority(FileAndType file)\n{\n    if (file.Type == DocumentType.Article\n        && Path.GetExtension(file.File) == \".rtf\")\n        return ProcessingPriority.Normal;\n    return ProcessingPriority.NotSupported;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Contact Group Memberships Links (RESTAPIdocs)\nDESCRIPTION: This snippet defines the REST API operation to retrieve a contact's group memberships via the `memberOf` navigation property. It returns links only to the groups where the contact is a direct member, not transitive memberships. A successful call returns a collection of links to Group objects, but removing the \"$links\" segment allows retrieving the full DirectoryObject entities.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/Docfx.Build.RestApi.Tests/TestData/contacts-operations.md#_snippet_3\n\nLANGUAGE: RESTAPIdocs\nCODE:\n```\n{\n    \"api\":  \"Contacts\",\n    \"operation\":    \"get contact memberOf links\",\n     \"showComponents\": {\n        \"codeGenerator\":    \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hosting a Static Website and Automatically Opening the Web Browser Using docfx serve - PowerShell\nDESCRIPTION: This snippet extends the previous example by adding the '--open-browser' option to launch the default web browser automatically when the server starts hosting the site. This facilitates immediate viewing of the served website. It requires the '_site' directory to contain the website content. The command depends on the docfx tool and a compatible environment capable of opening a browser.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-serve.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocfx --serve _site --open-browser\n```\n\n----------------------------------------\n\nTITLE: Embedding Image in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to embed an image using standard Markdown syntax.  The `![alt-text](image-link)` syntax is used, where `alt-text` provides alternative text for the image, and `image-link` specifies the URL of the image.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_8\n\nLANGUAGE: md\nCODE:\n```\n![ <alt-text> ]( <image-link> )\n```\n\nLANGUAGE: md\nCODE:\n```\n![alt-text](https://learn.microsoft.com/en-us/media/learn/not-found/learn-not-found-light-mode.png?branch=main)\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET Project Metadata in docfx.json\nDESCRIPTION: This JSON snippet shows how to configure Docfx to process .NET projects by specifying .csproj files in the `docfx.json` file.  It demonstrates defining the source files to be included for metadata extraction and the destination directory for the generated YAML files. The `src` property specifies the file patterns to include, and the `dest` property defines the output directory.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/basic-concepts.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"metadata\": [\n    {\n      \"src\": [\n        {\n          \"files\": [\n            \"src/MyProject.Abc/*.csproj\",\n            \"src/MyProject.Xyz/*.csproj\"\n          ],\n          \"src\": \"path/to/csprojs\"\n        }\n      ],\n      \"dest\": \"api\"\n    }\n  ],\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: IAnimal Name Property\nDESCRIPTION: This code snippet defines the Name property of the IAnimal interface. It returns a string representing the name of the animal. The property is read-only, as indicated by the `get;` accessor.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.IAnimal.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstring Name { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining TomFromBaseClass inheriting Tom in C#\nDESCRIPTION: Declares the TomFromBaseClass class as a subclass of the Tom class, enabling it to inherit properties and methods from Tom. This snippet establishes the class inheritance relationship within the CatLibrary namespace and assembly.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.TomFromBaseClass.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TomFromBaseClass : Tom\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple TargetFrameworks for Metadata in DocFX Configuration - JSON\nDESCRIPTION: Shows how to specify multiple .NET TargetFrameworks for DocFX's metadata extraction using the latest csproj format. This JSON snippet should be included in the docfx.json configuration file, under the 'metadata' and 'merge' sections. It instructs DocFX to extract API metadata from .csproj files targeting different frameworks (e.g., netstandard1.4, net46), then merge the generated YAML files into a unified API set. Key parameters: 'src', 'dest', 'properties.TargetFramework' for each metadata entry, and 'merge.content', 'merge.fileMetadata' mapping platforms. Input is docfx.json; output is organized API documentation per target framework. Limitations: The 'TargetFrameworks' property from new csproj files is not fully supported; explicit 'TargetFramework' values must be set.\nSOURCE: https://github.com/dotnet/docfx/blob/main/RELEASENOTE.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"metadata\": [\n        {\n            \"src\": \"*.csproj\",\n            \"dest\": \"temp/api/netstandard1.4\",\n            \"properties\": {\n                \"TargetFramework\": \"netstandard1.4\"\n            }\n        },\n        {\n            \"src\": \"*.csproj\",\n            \"dest\": \"temp/api/net46\",\n            \"properties\": {\n                \"TargetFramework\": \"net46\"\n            }\n        }\n    ],\n    \"merge\": {\n        \"content\": [\n            {\n                \"files\": \"*.yml\",\n                \"src\": \"temp/api/netstandard1.4\"\n            },\n            {\n                \"files\": \"*.yml\",\n                \"src\": \"temp/api/net46\"\n            }\n        ],\n        \"fileMetadata\": {\n            \"platform\": {\n                \"temp/api/netstandard1.4/*.yml\": [\n                    \"netstandard1.4\"\n                ],\n                \"temp/api/net46/*.yml\": [\n                    \"net46\"\n                ]\n            }\n        },\n        \"dest\": \"api\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: FixLink Method in RtfDocumentProcessor\nDESCRIPTION: The `FixLink` method is designed to correct file links within the RTF documents. It likely takes a file link and updates it to ensure that it is a valid and correct link. The specifics of its functionality depend on the context within the rtf document processor.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/advanced_support_hyperlink.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n // The code for FixLink method is not provided in this document.\n```\n\n----------------------------------------\n\nTITLE: Save Method in RtfDocumentProcessor\nDESCRIPTION: The `Save` method in the `RtfDocumentProcessor` is responsible for persisting the processed RTF file, potentially with modifications to the hyperlink structure.  It likely updates the links collected by `CollectLinksAndFixDocument`. After modifying the document, the save method will report the correct links.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/advanced_support_hyperlink.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n // The code for Save method is not provided in this document.\n```\n\n----------------------------------------\n\nTITLE: Using docfx metadata command syntax - PowerShell\nDESCRIPTION: This snippet shows the basic command-line syntax for the `docfx metadata` command. It includes placeholders for an optional configuration file path and various command-line options. This command is used to generate YAML metadata files from source code.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-metadata.md#_snippet_0\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx metadata [config] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Mustache Master Page Syntax\nDESCRIPTION: Demonstrates the syntax for using a master page in a Mustache template.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_5\n\nLANGUAGE: mustache\nCODE:\n```\n{{!master('<master_page_name>')}}\n```\n\n----------------------------------------\n\nTITLE: Loading RTF File Content into Model in RtfDocumentProcessor Using C#\nDESCRIPTION: Implements the Load method which reads all text from the provided RTF file and stores it in a dictionary model under the key \"content\". This model serves as the internal representation of the document content to be transformed during build steps. It uses a file reading utility and returns a DocumentBuildContext containing the model.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_build_your_own_type_of_documentation_with_custom_plug-in.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic LoadResult Load(FileAndType file, ImmutableDictionary<string, object> metadata)\n{\n    var content = File.ReadAllText(file.File);\n    var model = new Dictionary<string, object>\n    {\n        [\"content\"] = content\n    };\n    return new LoadResult\n    {\n        DocumentType = DocumentType.Article,\n        Content = model\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Loading File-Specific Metadata from External Files in docfx.json\nDESCRIPTION: Illustrates specifying external JSON files to load file-specific metadata using the `fileMetadataFiles` property in the `build` section. Provide an array of file paths relative to `docfx.json`. The structure within these files should follow the `fileMetadata` format.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"fileMetadataFiles\": [\"file1.json\", \"file2.json\"],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definition: Class1.IIssue8948 (C#)\nDESCRIPTION: Defines the interface `Class1.IIssue8948` in C#. This interface serves as a contract that implementing classes must adhere to. It is part of the `BuildFromProject` namespace and resides in the `BuildFromProject.dll` assembly.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.IIssue8948.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface Class1.IIssue8948\n```\n\n----------------------------------------\n\nTITLE: CollectLinksAndFixDocument in RtfDocumentProcessor\nDESCRIPTION: The `CollectLinksAndFixDocument` method is responsible for collecting all the hyperlinks from the document and modifying them to make them compatible with the expected output during the documentation generation. This likely involves parsing the RTF file to find the links, and then uses the relative path to build the correct links.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/advanced_support_hyperlink.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n // The code for CollectLinksAndFixDocument method is not provided in this document.\n```\n\n----------------------------------------\n\nTITLE: Defining transform Function for DocFX View Model in JavaScript\nDESCRIPTION: This snippet defines the exports.transform function which takes the input data model produced by DocFX's document processor and returns the View Model to be used by the corresponding Renderer. The function demonstrates adding a _title property with value \"Hello World\" to the model before returning it. This transform function is essential for shaping the input data into the desired output format, and its output is consumed by templates (such as Mustache) to generate final documents. No external dependencies are required besides DocFX itself. The input model parameter contains both content-derived and system-meant properties, some of which are described below.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.transform = function (model) {\n    model._title = \"Hello World\"\n    return model;\n}\n```\n\n----------------------------------------\n\nTITLE: IAnimal Eat<Tool>(Tool) Method\nDESCRIPTION: This code snippet defines the generic Eat<Tool>(Tool) method of the IAnimal interface. It allows the animal to eat using a specific tool.  The `Tool` parameter is constrained to be a class.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.IAnimal.verified.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Eat<Tool>(Tool tool) where Tool : class\n```\n\n----------------------------------------\n\nTITLE: Defining Method B() in C#\nDESCRIPTION: This code snippet defines a public method B() within the Inheritdoc.Issue7035 class. The method returns void, meaning it doesn't return any value. It does not accept any input parameters.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue7035.verified.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void B()\n```\n\n----------------------------------------\n\nTITLE: Downloading Nightly DocFX Build from GitHub Packages (PowerShell)\nDESCRIPTION: A PowerShell script that retrieves a GitHub authentication token using `gh auth token`, fetches the latest nightly DocFX version number using the GitHub API via `gh api`, constructs the download URL for the `.nupkg` file, and downloads it using `Invoke-RestMethod` with the authentication token. Requires prior authentication with `read:packages` scope (see previous snippet), GitHub CLI, and PowerShell 7.x+.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/index.md#_snippet_8\n\nLANGUAGE: pwsh\nCODE:\n```\n# Gets Access Token\n$token = gh auth token\n\n# Gets the version of latest nightly build\n$version = gh api /orgs/dotnet/packages/nuget/docfx/versions --jq '.[0].name'\n\n# Gets nupkg download URL.\n$downloadUrl = \"https://nuget.pkg.github.com/dotnet/download/docfx/${version}/${version}.nupkg\"\n\n# Download nupkg to current directory.\nWrite-Host ('Download nupkg from: {0}' -f $downloadUrl)\nInvoke-RestMethod -Method Get -Uri $downloadUrl -OutFile \"docfx.${version}.nupkg\" -Headers @{\n  Authorization = \"Bearer $token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap Generation in Docfx with JSON\nDESCRIPTION: This JSON snippet configures Docfx's sitemap generation settings including baseUrl for the site, priority of URLs relative to others, and the expected frequency of changes to the pages. These settings help search engines crawl the site more effectively. The 'sitemap' field supports additional options such as last modification dates and per-file configurations. The configuration requires a valid HTTP or HTTPS URL for baseUrl and uses standard sitemap protocol values.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/config.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"sitemap\": {\n      \"baseUrl\": \"https://dotnet.github.io/docfx\",\n      \"priority\": 0.1,\n      \"changefreq\": \"monthly\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Engine Properties in docfx.json\nDESCRIPTION: Explains how to customize the Markdown engine used by DocFX via the `markdownEngineProperties` object within the `build` section. This example enables the `FootNotes` Markdig extension by adding it to the `markdigExtensions` array.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"markdownEngineProperties\": {\n      \"markdigExtensions\": [\n        \"FootNotes\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Inheritdoc.Issue9736 class in C#\nDESCRIPTION: This code snippet declares a public class named Inheritdoc.Issue9736 within the current namespace. It signifies the class as a part of the BuildFromProject assembly, serving as a placeholder or test class. No additional dependencies are required for this declaration.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue9736.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Inheritdoc.Issue9736\n```\n\n----------------------------------------\n\nTITLE: Adding Copyright Header - Mustache\nDESCRIPTION: This code snippet shows the required copyright notice format for Mustache templates used within the Docfx project. It ensures that all templates include the necessary licensing information.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/engineering_guidelines.md#_snippet_3\n\nLANGUAGE: mustache\nCODE:\n```\n{{!Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license.}}\n```\n\n----------------------------------------\n\nTITLE: Block Math Expression in Markdown\nDESCRIPTION: This Markdown snippet illustrates how to create a block math expression using LaTeX formatting, enclosed by double dollar signs (`$$`). The expression is displayed on a new line, separate from the surrounding text. MathJax is required for the correct rendering in the `modern` template.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_10\n\nLANGUAGE: md\nCODE:\n```\n**The Cauchy-Schwarz Inequality**\n\n$$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$\n```\n\n----------------------------------------\n\nTITLE: Get Contact Direct Reports Links (RESTAPIdocs)\nDESCRIPTION: This snippet defines the REST API operation to retrieve a contact's direct reports via the `directReports` navigation property. A successful response returns a collection of links to User and Contact objects that this contact manages. Removing the \"$links\" segment from the URL allows retrieving the full DirectoryObject entities instead of just links.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/Docfx.Build.RestApi.Tests/TestData/contacts-operations.md#_snippet_2\n\nLANGUAGE: RESTAPIdocs\nCODE:\n```\n{\n    \"api\":  \"Contacts\",\n    \"operation\":    \"get contact direct reports links\",\n     \"showComponents\": {\n        \"codeGenerator\":    \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Programmatically with DocFX API (C#)\nDESCRIPTION: Provides C# code using the DocFX library API to first generate managed reference YAML files (`DotnetApiCatalog.GenerateManagedReferenceYamlFiles`) and then build the full docset (`Docset.Build`) based on the `docfx.json` configuration file. This requires the necessary DocFX NuGet packages to be referenced in the project.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/index.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait Docfx.Dotnet.DotnetApiCatalog.GenerateManagedReferenceYamlFiles(\"docfx.json\");\nawait Docfx.Docset.Build(\"docfx.json\");\n```\n\n----------------------------------------\n\nTITLE: Update Contact Manager (RESTAPIdocs)\nDESCRIPTION: This snippet defines the REST API operation for assigning a manager to a contact. The request updates the contact's `manager` property with a link to a specified User or Contact object. This operation is only applicable to contacts not synced from an on-premises directory.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/Docfx.Build.RestApi.Tests/TestData/contacts-operations.md#_snippet_1\n\nLANGUAGE: RESTAPIdocs\nCODE:\n```\n{\n    \"api\":  \"Contacts\",\n    \"operation\":    \"update contact manager\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub CLI for Package Access (PowerShell)\nDESCRIPTION: Uses the `gh auth login` command in PowerShell to authenticate with GitHub specifically for accessing GitHub Packages. The `--scopes \"read:packages\"` argument requests the necessary permissions, which is required for downloading private or prerelease packages like DocFX nightly builds. Requires GitHub CLI installed and PowerShell 7.x+.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/index.md#_snippet_7\n\nLANGUAGE: pwsh\nCODE:\n```\ngh auth login --scopes \"read:packages\" --hostname github.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom API Filters for Docfx .NET API Generation using C#\nDESCRIPTION: This C# snippet demonstrates how to instantiate and configure the DotnetApiOptions object with custom filter callbacks that control which APIs and attributes are included during documentation generation. The IncludeApi and IncludeAttribute delegates receive an ISymbol instance representing a code element, and return a SymbolIncludeState enum to specify inclusion, exclusion, or use of default filtering behavior. The final call asynchronously generates YAML reference files using these options. The filtering respects type accessibility and affects symbol visibility including nesting and interface implementations.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-api-docs.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar options = new DotnetApiOptions\n{\n    // Filter based on types\n    IncludeApi = symbol => ...\n\n    // Filter based on attributes\n    IncludeAttribute = symbol => ...\n}\n\nawait DotnetApiCatalog.GenerateManagedReferenceYamlFiles(\"docfx.json\", options);\n```\n\n----------------------------------------\n\nTITLE: Constructor: Parameterized Constructor with int for Issue8665\nDESCRIPTION: Constructs an \"Issue8665\" object with an integer parameter \"foo\". Requires an integer input to initialize internal state.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8665.verified.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic Issue8665(int foo)\n```\n\n----------------------------------------\n\nTITLE: Setting the Modern Template in docfx.json\nDESCRIPTION: Configures the DocFX build process to use the 'modern' template alongside the 'default' template. This is done by specifying both template names in the `template` array within the `build` section of the `docfx.json` configuration file.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/template.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"template\": [\n      \"default\",\n      \"modern\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Diagram Mermaid Diagram in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to embed a Class diagram using a code block with the `mermaid` language identifier. The snippet shows a simple Class diagram defined using Mermaid syntax. Mermaid diagrams are only supported in the `modern` template.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_15\n\nLANGUAGE: md\nCODE:\n```\n```mermaid\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\n<<Interface>> Class01\nClass09 --> C2 : Where am I?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nclass Class10 {\n  <<service>>\n  int id\n  size()\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ContainersRefType Struct - C#\nDESCRIPTION: This code snippet defines the `ContainersRefType` struct within the `CatLibrary.Core` namespace. This struct encapsulates data and behaviors related to the container and is the foundation for several methods and properties detailed in the document. No dependencies are required for this definition. The output is a struct usable within the provided namespace.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ContainersRefType.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic struct ContainersRefType\n```\n\n----------------------------------------\n\nTITLE: Rendering xrefProperties with Mustache Template\nDESCRIPTION: This Mustache template snippet shows how to render the cross-referenced properties defined by 'xrefProperties' in the schema using variables for 'title' and 'description'. This template forms the basis for partial rendering of referenced documentation objects, and expects an object input with these properties from DocFX. No external dependencies are required beyond a Mustache-compliant renderer.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/docfx_document_schema.md#_snippet_2\n\nLANGUAGE: mustache\nCODE:\n```\n{{title}}: {{{description}}}\n```\n\n----------------------------------------\n\nTITLE: Defining C# Method CalculateFood with Complex Return\nDESCRIPTION: Defines the public method `CalculateFood` for the `Cat<T, K>` class. It accepts a `DateTime` parameter and returns a `Dictionary` where keys are strings and values are lists of integers.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic Dictionary<string, List<int>> CalculateFood(DateTime date)\n```\n\n----------------------------------------\n\nTITLE: Referencing List<int> Instantiation YAML\nDESCRIPTION: This YAML snippet demonstrates the referencing of template instances, specifically for C# List<int>.  It shows how to define and link template instances in the 'references' section of a metadata file. The 'inherits' property in the 'items' section also demonstrates relationship to other types. This is designed for rendering documentation for templated types.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/metadata_format_spec.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n- uid: NumberList\n  inherits:\n  - System.Collections.Generic.List<System.Int32>\nreferences:\n- uid: System.Collections.Generic.List`1<System.Int32>\n  link: @\"System.Collections.Generic.List`1\"<@\"System.Int32\">\n- uid: System.Collections.Generic.List`1\n  name: List\n  url: system.collections.generic.list`1.yml\n- uid: System.Int32\n  name: int\n  url: system.int32.yml\n```\n\n----------------------------------------\n\nTITLE: Static Issue9216 Method with Mathematical Formulas in C#\nDESCRIPTION: Static method that calculates determinants of 3D matrices and demonstrates mathematical formula notation in documentation using LaTeX-style syntax.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic static double Issue9216()\n```\n\n----------------------------------------\n\nTITLE: Enabling Compatibility File Naming in DocFX (JSON)\nDESCRIPTION: This JSON snippet shows how to set the `useCompatibilityFileName` option to `true` within the `metadata` section of `docfx.json`. This configuration, introduced in v2.1, allows users to retain the older file naming convention for generic types (e.g., `System.Func`1.yml`) to maintain URL compatibility after a breaking change.\nSOURCE: https://github.com/dotnet/docfx/blob/main/RELEASENOTE.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"useCompatibilityFileName\": true\n```\n\n----------------------------------------\n\nTITLE: Rendering Shorthand UID Cross Reference with Link Text\nDESCRIPTION: The resulting HTML rendering from the shorthand UID cross reference syntax, containing a link to the target resource with the linked text derived from the referenced file title.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\nSee <a href=\"file1.html\">This is file1</a>\n```\n\n----------------------------------------\n\nTITLE: Creating PlantUML Sequence Diagram in Markdown - PlantUML\nDESCRIPTION: This snippet shows how to embed a basic PlantUML diagram directly within a markdown code block. To render PlantUML within DocFX, ensure the PlantUML markdown processor or plugin is enabled. The snippet represents a sequence interaction between 'Bob' and 'Alice' with a greeting message. The input should be placed within triple backticks with 'plantuml' as the language. No dependencies are required except for remote/local PlantUML rendering support.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_16\n\nLANGUAGE: plantuml\nCODE:\n```\nBob -> Alice : hello\n```\n\n----------------------------------------\n\nTITLE: Defining Inheritdoc.Issue8101 Class\nDESCRIPTION: This code snippet defines the `Inheritdoc.Issue8101` class. It inherits from the `object` class. There are no dependencies or specific inputs besides the class definition itself.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue8101.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Inheritdoc.Issue8101\n```\n\n----------------------------------------\n\nTITLE: Initializing DocFX Project with Default Configuration in PowerShell\nDESCRIPTION: Executes the 'docfx init --yes' command in PowerShell to automatically generate DocFX configuration files in the current directory without prompting for user input. This requires the DocFX CLI to be available. The '--yes' option streamlines the process for unattended or automated setups. Generates a new set of DocFX files with default settings as output.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-init.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocfx init --yes\n```\n\n----------------------------------------\n\nTITLE: Defining the 'Issue8725' C# class in BuildFromProject\nDESCRIPTION: This snippet defines the 'Issue8725' class, which inherits from 'object' and resides within the 'BuildFromProject' namespace and assembly. It includes references to inherited members and related documentation. The class contains two method stubs: 'MoreOperations' and 'MyOperation', each serving as placeholders for functionality. The class acts as a simple example for class structure, inheritance, and method declaration in C#.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Issue8725.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Issue8725\n```\n\n----------------------------------------\n\nTITLE: Example Usage of UseRelativeLinks Property and Sample JSON API Payload in C# and JSON\nDESCRIPTION: Shows a simple usage example of setting the UseRelativeLinks property to true in a JsonApiOptions instance. Additionally, includes a JSON example illustrating a JSON API document fragment with resource relationships using relative links in the \"self\" and \"related\" properties, demonstrating the effect of the configuration.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue9736.JsonApiOptions.verified.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\noptions.UseRelativeLinks = true;\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"articles\",\n  \"id\": \"4309\",\n  \"relationships\": {\n     \"author\": {\n       \"links\": {\n         \"self\": \"/api/shopping/articles/4309/relationships/author\",\n         \"related\": \"/api/shopping/articles/4309/author\"\n       }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying DocFX Output to GitHub Pages via Git (Bash)\nDESCRIPTION: This Bash script, designed for an Azure DevOps pipeline task, automates the deployment of built DocFX documentation (assumed to be in `_site/`) to a GitHub Pages `gh-pages` branch. It configures Git identity, clones the target branch using credentials from the `GITHUB_PAT` environment variable, replaces the branch contents with the new site files, commits the changes, and pushes them to the remote repository specified by `GITHUB_REPO`. Requires `GITHUB_PAT` and `GITHUB_REPO` environment variables to be set.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/publish-azure-devops.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.email \"your-email@example.com\"\ngit config --global user.name \"Your Name\"\ngit clone --branch gh-pages https://$GITHUB_PAT@github.com/$GITHUB_REPO.git out\nrm -rf out/*\ncp -r _site/* out/\ncd out\ngit add --all\ngit commit -m \"Update documentation\"\ngit push origin gh-pages\n```\n\n----------------------------------------\n\nTITLE: Defining the Inheritdoc Class in C#\nDESCRIPTION: Defines the public class `Inheritdoc` within the `BuildFromProject` namespace. This class implements the `IInheritdoc` and `System.IDisposable` interfaces, inheriting implicitly from `System.Object`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Inheritdoc : IInheritdoc, IDisposable\n```\n\n----------------------------------------\n\nTITLE: Enum Declaration for ContainersRefType.ColorType in C#\nDESCRIPTION: Defines the enumeration ContainersRefType.ColorType in C#, representing different color types. It requires no dependencies beyond standard C# enum syntax and is used to categorize color options with explicit assigned values. The snippet specifies an enum with three fields: Red, Blue, and Yellow.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ContainersRefType.ColorType.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic enum ContainersRefType.ColorType\n```\n\n----------------------------------------\n\nTITLE: Defining a Delegate for Picture Name Extraction in CatLibrary (C#)\nDESCRIPTION: This C# code snippet defines a delegate, 'MRefNormalDelegate', in the CatLibrary namespace, intended to process a list of picture names ('List<string> pics') and output a string ('out string name'). The delegate standardizes methods that need to receive a list of pictures and extract or compute a result name by output parameter. Dependencies include the System.Collections.Generic namespace for usage of List<string>. Input is a list of picture names; output is produced through the 'out name' parameter. The delegate does not directly return a value and must be implemented by user-defined methods conforming to the signature.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.MRefNormalDelegate.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic delegate void MRefNormalDelegate(List<string> pics, out string name)\n```\n\n----------------------------------------\n\nTITLE: Declaring ColorCount Field - C#\nDESCRIPTION: This code snippet declares the `ColorCount` field within the `ContainersRefType` struct, specifying its data type as `long`. This field likely stores a numerical value representing a color count or related quantity, but this cannot be determined from the snippet. This field is accessible and mutable within the context of the struct. The field does not have any dependencies beyond the C# language.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ContainersRefType.verified.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic long ColorCount\n```\n\n----------------------------------------\n\nTITLE: Defining C# Complex Constructor for Cat\nDESCRIPTION: Defines a public constructor for the `Cat<T, K>` class with multiple parameters: a string `nickName`, an `out` parameter `age` (int), a string `realName`, and a boolean `isHealthy`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic Cat(string nickName, out int age, string realName, bool isHealthy)\n```\n\n----------------------------------------\n\nTITLE: Enabling Local PlantUML Rendering in DocFX - JSON\nDESCRIPTION: This JSON snippet configures docfx.json to use a local PlantUML JAR for diagram rendering. It sets the path to 'plantuml.jar' and chooses 'local' rendering mode in markdownEngineProperties.plantUml. The user must have Java and PlantUML installed locally. GraphViz Dot is required for diagrams beyond sequence diagrams. The parameters are localPlantUmlPath (filesystem path to the JAR) and renderingMode (set to local).\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"markdownEngineProperties\": {\n      \"plantUml\": {\n          \"localPlantUmlPath\": \"path/to/plantuml.jar\",\n          \"renderingMode\": \"local\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ContainersRefTypeEventHandler Event - C#\nDESCRIPTION: This code snippet declares an event named `ContainersRefTypeEventHandler`.  This is an event of the type `EventHandler`, which implies that this event is used for handling events within the context of `ContainersRefType`.  The event can be raised to notify subscribed objects of specific occurrences.  No other dependencies are apparent.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ContainersRefType.verified.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic event EventHandler ContainersRefTypeEventHandler\n```\n\n----------------------------------------\n\nTITLE: IAnimal Eat(string) Method\nDESCRIPTION: This code snippet defines the Eat(string food) method of the IAnimal interface.  It allows the animal to eat a specific type of food passed in as a string.  The method returns void.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.IAnimal.verified.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Eat(string food)\n```\n\n----------------------------------------\n\nTITLE: Overriding Git Repo URL in DocFX\nDESCRIPTION: The `DOCFX_SOURCE_REPOSITORY_URL` environment variable allows the override of the git organization and repository names used in the DocFX build process. The variable must be formatted as `https://{host_name}/{organization}/{repository_name}`, for example `https://github.com/dotnet/docfx`. The expected input is a string. This enables the use of different repositories and host names when generating the documentation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-environment-variables-reference.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Defining the ColorType Enum\nDESCRIPTION: Defines the public enumeration `ColorType` in C#. It includes members Red (value 0), Blue (value 1), and Yellow (value 2), each with a brief description provided in the surrounding text. The enum is part of the `MRef.Demo.Enumeration` namespace and resides in the `CatLibrary.dll` assembly.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/MRef.Demo.Enumeration.ColorType.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum ColorType\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Extension Method for ICat in C#\nDESCRIPTION: Extension method that allows a cat to play with a toy. Takes an ICat instance and a ContainersRefType.ColorType parameter representing a toy.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.ICatExtension.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void Play(this ICat icat, ContainersRefType.ColorType toy)\n```\n\n----------------------------------------\n\nTITLE: Customizing Node.js Path for PDF in DocFX\nDESCRIPTION: The `PLAYWRIGHT_NODEJS_PATH` environment variable allows you to specify a custom Node.js executable path that will be used by the `docfx pdf` command when generating PDFs. By default, DocFX automatically detects installed Node.js from the system's PATH. This is a string value of the path to the Node.js executable. The purpose of the variable is to specify the executable path to run the PDF command.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-environment-variables-reference.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: C# Naming Conventions for Members and Fields\nDESCRIPTION: This snippet outlines mandated naming conventions in C#: PascalCasing for all public members, types, and namespaces including two-letter acronyms fully capitalized; camelCasing for parameter names; underscore prefix for private fields; and capitalized casing for static readonly fields and constants. These conventions ensure uniformity across teams and clarity in code intent. No external dependencies are required.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/csharp_coding_standards.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n* Use PascalCasing for public member, type, and namespace names.\n  e.g., PropertyDescriptor, HtmlTag, IOStream\n* Use camelCasing for parameter names.\n  e.g., propertyDescriptor, htmlTag, ioStream\n* Prefix private fields with underscore.\n  e.g., private readonly Guid _userId = Guid.NewGuid();\n* Capitalize static readonly fields and constants.\n  e.g., private static readonly IEntityAccessor EntityAccessor = null;\n        private const string MetadataName = \"MetadataName\";\n```\n\n----------------------------------------\n\nTITLE: Using Inline Markdown Includes - Markdown\nDESCRIPTION: This markdown snippet demonstrates using an inline [!INCLUDE] directive to inject reusable content from another markdown file directly within a sentence. It requires specifying the include file's title and relative filepath. DocFX replaces the directive at build time with the file's contents. Ensure the included file is excluded from the build output and placed typically in an '/includes' directory.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nText before [!INCLUDE [<title>](<filepath>)] and after.\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Class - C#\nDESCRIPTION: This C# code defines an abstract class named `Inheritdoc.Issue6366.Class1` with a generic type parameter `T`.  The class is designed to be inherited and provides a base structure. It inherits from the `object` class in .NET. This class will likely be used as a base for other classes to inherit from and define their own specific behaviors, with the parameter `T` used to generalize the class.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue6366.Class1-1.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class Inheritdoc.Issue6366.Class1<T>\n```\n\n----------------------------------------\n\nTITLE: Tom Class Definition in C#\nDESCRIPTION: Class definition for Tom which inherits directly from System.Object without adding any members of its own.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Tom.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tom\n```\n\n----------------------------------------\n\nTITLE: Defining the IInheritdoc Interface in C#\nDESCRIPTION: Defines the public C# interface `IInheritdoc`. It belongs to the `BuildFromProject` namespace and is part of the `BuildFromProject.dll` assembly. This interface serves as a contract for classes implementing specific build project functionality.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.IInheritdoc.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IInheritdoc\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Delegate with Constraints (C#)\nDESCRIPTION: Defines the `MRefDelegate` delegate type in C#. This delegate takes three generic parameters (`K`, `T`, `L`) and has complex constraints: `K` must be a class implementing `IComparable`, `T` must be a struct, and `L` must be of type `Tom` implementing `IEnumerable<long>`. It takes three arguments of types `K`, `T`, and `L` respectively and returns void.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.MRefDelegate-3.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic delegate void MRefDelegate<K, T, L>(K k, T t, L l) where K : class, IComparable where T : struct where L : Tom, IEnumerable<long>\n```\n\n----------------------------------------\n\nTITLE: Define Class1.Issue8696Attribute Class - C#\nDESCRIPTION: Defines a custom attribute named `Class1.Issue8696Attribute` that inherits from the base `Attribute` class. This attribute can be used to decorate code elements with custom metadata. The class is declared as public, making it accessible from other parts of the application.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8696Attribute.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Class1.Issue8696Attribute : Attribute\n```\n\n----------------------------------------\n\nTITLE: IJsonApiOptions Interface Definition\nDESCRIPTION: Definition of the IJsonApiOptions interface in the Inheritdoc.Issue9736 namespace.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue9736.IJsonApiOptions.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface Inheritdoc.Issue9736.IJsonApiOptions\n```\n\n----------------------------------------\n\nTITLE: Initializing DocFX Project (Bash)\nDESCRIPTION: Initializes a new DocFX project quietly (`-q`) in the current directory. This command creates the basic DocFX project structure and the essential `docfx.json` configuration file, which is used to define documentation sources, build options, and output locations.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/publish-azure-devops.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocfx init -q\n```\n\n----------------------------------------\n\nTITLE: Referencing Code from a Source File - Markdown\nDESCRIPTION: This snippet shows how to include C# code directly from Program.cs into markdown using the [!code-csharp[]()] syntax. DocFX pulls in the entire source file, applying C# syntax highlighting. This is useful for maintaining consistency between documentation and source code. The required parameter is the relative path to the code file and the language identifier. Only works if the referenced file exists at that path.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n[!code-csharp[](Program.cs)]\n```\n\n----------------------------------------\n\nTITLE: Configuring DocFX Method Metadata Overrides in YAML\nDESCRIPTION: This YAML snippet demonstrates how to override specific metadata fields for a .NET method within DocFX. It uses the method's Unique Identifier (UID) to target it and provides custom values for 'name', 'summary', 'parameters', 'return', and 'exceptions'. This allows fine-grained control over the generated documentation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/specs/Cat.CalculateFood.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nuid: CatLibrary.Cat`2.CalculateFood(System.DateTime)\nname: \"Override CalculateFood Name\"\nsummary: \"It's an overridden summary in `markdown` format\"\nsyntax:\n    parameters:\n    - id: date\n      description: \"This is overridden description for a parameter. `id` must be specified.\"\n    return:\n      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}}\n      description: \"It's overridden description for return. `type` must be specified.\"\nexceptions:\n  - type: System.ArgumentException\n    description: \"This is an `overridden` argument exception. you can add additional exception by adding different exception `type`.\"\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Spec for Generic References\nDESCRIPTION: This YAML snippet demonstrates the 'spec' property in a reference, which is used to describe how to compose a generic type. It breaks down the generic type `Dictionary<String, List<Int32>>` into its constituent parts for documentation purposes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nreferences:\n- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}}\n  name.csharp: Dictionary<String, List<Int32>>\n  fullName.csharp: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<System.Int32>>\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.List`1\n    name: List\n    fullName: System.Collections.Generic.List\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n```\n\n----------------------------------------\n\nTITLE: Tabbed Markdown Code Snippet Output - CSharp and JavaScript\nDESCRIPTION: Displays the rendered Markdown output for language-specific tabbed code blocks in DocFX documentation. Each language tab contains a code sample, enhancing readability and accessibility for multi-language documentation. Dependencies: Requires DocFX's DFM parser and appropriate front-end rendering. Parameters are language tabs (CSharp and JavaScript) with code blocks. Input is Markdown; output is rendered HTML with language tabs. Limitations: Exact rendering may depend on theme and version.\nSOURCE: https://github.com/dotnet/docfx/blob/main/RELEASENOTE.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# [Csharp](#tab/csharp)\n```cs\nConsole.WriteLine(\"Hello world\");\n```\n# [JavaScript](#tab/js)\n```js\nconsole.log('hello world');\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining Method A() in C#\nDESCRIPTION: This code snippet defines a public method A() within the Inheritdoc.Issue7035 class.  The method returns void, meaning it doesn't return any value. It does not accept any input parameters.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue7035.verified.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void A()\n```\n\n----------------------------------------\n\nTITLE: Representation of Overwrite Model in YAML Format\nDESCRIPTION: This snippet shows how an Overwrite Section's content is transformed into an Overwrite Model in YAML format, where the YAML properties reflect the overridden data, including Markdown content converted to HTML when using '*content'.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_overwrite_files.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nuid: microsoft.com/docfx/Contacts\nfooter: <p>Footer for <code>microsoft.com/docfx/Contacts</code></p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Local Markdown File Links to HTML Anchors\nDESCRIPTION: The rendered HTML link generated for a relative markdown file link. Docfx transforms the markdown file reference to the corresponding HTML file link in the output. This enables local navigation between generated HTML pages from markdown source files.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"subfolder/file2.html\">file2</a>\n```\n\n----------------------------------------\n\nTITLE: Issue4017 Method with Message Handling Example in C#\nDESCRIPTION: Method showing a Discord.NET-like implementation for handling message deletion events, with examples of how to hook and handle message deleted events.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue4017()\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic void HookMessageDeleted(BaseSocketClient client)\n{\n    client.MessageDeleted += HandleMessageDelete;\n}\n\npublic Task HandleMessageDelete(Cacheable<IMessage, ulong> cachedMessage, ISocketMessageChannel channel)\n{\n    // check if the message exists in cache; if not, we cannot report what was removed\n    if (!cachedMessage.HasValue) return;\n    var message = cachedMessage.Value;\n    Console.WriteLine($\"A message ({message.Id}) from {message.Author} was removed from the channel {channel.Name} ({channel.Id}):\" \n        + Environment.NewLine\n        + message.Content);\n    return Task.CompletedTask;\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Update()\n{\n    myClass.Execute();\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Method Bar for ContainersRefType in C#\nDESCRIPTION: This extension method adds a 'Bar' functionality to ContainersRefType objects, allowing instances to call c.Bar() as a static method. It takes a ContainersRefType parameter and modifies or performs operations based on its state. No return value is provided; thus, it likely performs side-effects or utility tasks.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.Issue231.verified.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static void Bar(this ContainersRefType c)\n```\n\n----------------------------------------\n\nTITLE: Issue4392 Method Demonstrating String Escaping in C#\nDESCRIPTION: Method that demonstrates verbatim string literals with backslashes and quotation marks, showing how to represent special characters in code.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue4392()\n```\n\n----------------------------------------\n\nTITLE: Declaring a Generic Fake Delegate in C#\nDESCRIPTION: Defines a generic delegate named FakeDelegate<T> which takes a long integer, a string, and a params array of objects as parameters, returning an integer. It requires the System namespace for primitive types. The delegate accepts parameters: 'num' of type long, 'name' of type string, and an optional variadic array 'scores' of objects. It returns an int used as a placeholder or dummy value. It is generic over type parameter T, allowing flexibility in usage scenarios.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.FakeDelegate-1.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic delegate int FakeDelegate<T>(long num, string name, params object[] scores)\n```\n\n----------------------------------------\n\nTITLE: Defining WithDeclarationKeyword Abstract Method in C#\nDESCRIPTION: Declares the abstract method `WithDeclarationKeyword` within the `BaseClass1` class. This method must be implemented by any non-abstract class derived from `BaseClass1`. It takes an instance of `Class1` as input (`keyword` parameter) and is expected to return a `System.DateTime` object.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromVBSourceCode.BaseClass1.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract DateTime WithDeclarationKeyword(Class1 keyword)\n```\n\n----------------------------------------\n\nTITLE: Implementing 'MoreOperations' method in 'Issue8725' class\nDESCRIPTION: This snippet declares the 'MoreOperations' method, a public void method intended to perform additional actions within the 'Issue8725' class. It is a placeholder for implementing specific functionality, with no input parameters and no return value. Designed to be expanded with operational code, it emphasizes structure and method definition in C# class design.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Issue8725.verified.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void MoreOperations()\n```\n\n----------------------------------------\n\nTITLE: Defining the ContainersRefType.ContainersRefTypeChild class in C#\nDESCRIPTION: This snippet declares a public class named ContainersRefTypeChild within the ContainersRefType class, which resides in the CatLibrary.Core namespace. It forms part of the project’s object model and inherits from System.Object, offering standard methods like Equals, GetHashCode, and ToString. No dependencies are explicitly required besides the .NET framework. It establishes the class structure used for referencing containers.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ContainersRefType.ContainersRefTypeChild.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ContainersRefType.ContainersRefTypeChild\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in Markdown\nDESCRIPTION: This Markdown snippet shows how to embed a video using the `[!Video embed_link]` syntax. Replace `embed_link` with the actual URL of the video's embed link (e.g., a YouTube embed link).  This snippet defines the required syntax for video inclusion.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_7\n\nLANGUAGE: md\nCODE:\n```\n> [!Video embed_link]\n```\n\nLANGUAGE: md\nCODE:\n```\n> [!Video https://www.youtube.com/embed/Sz1lCeedcPI]\n```\n\n----------------------------------------\n\nTITLE: Defining Value Method (C#)\nDESCRIPTION: Defines the Value method within the Class1 class. This method takes a string parameter 'name' and returns an integer. It is noted as a Function.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromVBSourceCode.Class1.verified.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic int Value(string name)\n```\n\n----------------------------------------\n\nTITLE: Defining WithDeclarationKeyword Method (C#)\nDESCRIPTION: Defines an override of the WithDeclarationKeyword method within the Class1 class. It takes a Class1 parameter 'keyword' and returns a DateTime.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromVBSourceCode.Class1.verified.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic override DateTime WithDeclarationKeyword(Class1 keyword)\n```\n\n----------------------------------------\n\nTITLE: Docfx PDF Command Usage\nDESCRIPTION: Displays the basic usage of the `docfx pdf` command in PowerShell. This command generates a PDF file based on the Docfx project configuration. The command optionally accepts a configuration file path.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-pdf.md#_snippet_0\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx pdf [config] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdig Markdown Pipeline\nDESCRIPTION: This code snippet shows how to configure the Markdig markdown pipeline to enable custom extensions when using Docfx as a NuGet library. It initializes `BuildOptions` and uses the `ConfigureMarkdig` property to add extensions like `Abbreviations` and `Footnotes`. The configured options are then passed to the `Docset.Build` method.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new BuildOptions\n{\n    // Enable custom markdown extensions here\n    ConfigureMarkdig = pipeline => pipeline.UseAbbreviations().UseFootnotes(),\n}\n\nawait Docset.Build(\"docfx.json\", options);\n```\n\n----------------------------------------\n\nTITLE: Declaring the Issue7628 Method in C#\nDESCRIPTION: Declares the public method `Issue7628` within the `Inheritdoc` class. The comment indicates this method should perform some action, likely related to resolving or demonstrating issue #7628.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.verified.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue7628()\n```\n\n----------------------------------------\n\nTITLE: Defining ContainersRefTypeNonRefMethod - C#\nDESCRIPTION: This method, `ContainersRefTypeNonRefMethod`, is a static method within the `ContainersRefType` struct. It takes a variable number of objects as input using the `params` keyword, and returns an integer. This method likely performs operations on the provided objects. It is designed to work with an array of objects as input, but the specific details of the method's logic are not explicitly shown in the snippet.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ContainersRefType.verified.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static int ContainersRefTypeNonRefMethod(params object[] parmsArray)\n```\n\n----------------------------------------\n\nTITLE: User Journey Mermaid Diagram in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to embed a User Journey diagram using a code block with the `mermaid` language identifier. The snippet shows a simple User Journey chart defined using Mermaid syntax. Mermaid diagrams are only supported in the `modern` template.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_14\n\nLANGUAGE: md\nCODE:\n```\n```mermaid\njourney\n  title My working day\n  section Go to work\n    Make tea: 5: Me\n    Go upstairs: 3: Me\n    Do work: 1: Me, Cat\n  section Go home\n    Go downstairs: 5: Me\n    Sit down: 3: Me\n```\n```\n\n----------------------------------------\n\nTITLE: Defining JsonApiOptions Class Implementing IJsonApiOptions Interface in C#\nDESCRIPTION: This snippet shows the declaration of the sealed class JsonApiOptions that implements the IJsonApiOptions interface. It sets up the core API options configuration class within the Inheritdoc.Issue9736 namespace. The class inherits from object and is intended to define customizable API settings.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue9736.JsonApiOptions.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class Inheritdoc.Issue9736.JsonApiOptions : Inheritdoc.Issue9736.IJsonApiOptions\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Tab Groups for Multi-Context Content - Markdown\nDESCRIPTION: This advanced markdown snippet creates interdependent tab groups in documentation, allowing tab selections (such as Linux or Windows) to sync content across multiple related tab sets such as .NET, TypeScript, or REST API. The syntax follows DocFX tab markup and uses IDs to maintain state across the page. Useful for showing multi-platform or multi-language variants side by side.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n# [.NET](#tab/dotnet/linux)\n\n.NET content for Linux...\n\n# [.NET](#tab/dotnet/windows)\n\n.NET content for Windows...\n\n# [TypeScript](#tab/typescript/linux)\n\nTypeScript content for Linux...\n\n# [TypeScript](#tab/typescript/windows)\n\nTypeScript content for Windows...\n\n# [REST API](#tab/rest)\n\nREST API content, independent of platform...\n\n---\n```\n\n----------------------------------------\n\nTITLE: Declaring GetColorCount Property - C#\nDESCRIPTION: This snippet defines the `GetColorCount` property. It is a read-only property of type `long`, suggesting it retrieves the value of the field related to color count. This property provides a means of accessing the color count and is part of the overall design of the `ContainersRefType` struct.  No dependencies are apparent.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ContainersRefType.verified.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic long GetColorCount { get; }\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Files with Relative Paths in Markdown\nDESCRIPTION: Illustrates referencing local files within the project directory structure using relative markdown link syntax. Given a sample directory layout, it shows how to link from one markdown file to another in a subfolder. Docfx converts the referenced file markdown to corresponding HTML during rendering. Dependencies include correct directory structure and file existence to avoid build warnings.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/links-and-cross-references.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[file2](subfolder/file2.md)\n```\n\n----------------------------------------\n\nTITLE: Class Definition of Issue231 in C#\nDESCRIPTION: This snippet declares the Issue231 static class in the CatLibrary.Core namespace, inheriting from System.Object. It serves as a container for extension methods or static utilities related to ContainersRefType. The class is designed for internal library use and provides a centralized place for related functionalities.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.Issue231.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static class Issue231\n```\n\n----------------------------------------\n\nTITLE: Merging API Metadata Files Using docfx merge in PowerShell\nDESCRIPTION: This snippet demonstrates merging specified API metadata YAML files into a single output YAML file using the docfx merge command in PowerShell. Requires installed docfx CLI and available API metadata files. By default, the merge operates on the configuration in docfx.json. Outputs a combined YAML file, but may not work as expected due to known issues with this command.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-merge.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocfx merge\n```\n\n----------------------------------------\n\nTITLE: Configuring Templates in docfx.json\nDESCRIPTION: This JSON snippet demonstrates how to configure templates in the `docfx.json` file. The `template` array specifies the order in which Docfx searches for template files (`.css` or `.js`). Templates allow for customisation of the build process, overriding the default scripts and styles.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/basic-concepts.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"build\": {\n    //...\n    \"output\": \"_site\",\n    \"template\": [\n      \"default\",\n      \"modern\",\n      \"templates/mytemplate\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tabbed Markdown Code Snippets in DocFX - CSharp and JavaScript\nDESCRIPTION: Demonstrates the use of DocFX's extended Markdown syntax for creating tabbed content displaying code snippets in multiple languages. This snippet is supported in Markdown documents processed by DocFX version 2.26 and later, and requires the DFM (DocFX Flavored Markdown) parser. Each tab is defined with a heading (e.g., '# [Csharp]') that specifies the programming language, followed by a code block in the corresponding language (e.g., 'cs' for CSharp, 'js' for JavaScript). Expected input is Markdown content; output is rendered documentation showing language tabs with code examples. Limitations: Syntax must match DocFX's documentation for tabbed content and correct language identifiers must be used.\nSOURCE: https://github.com/dotnet/docfx/blob/main/RELEASENOTE.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [Csharp](#tab/csharp)\n```cs\nConsole.WriteLine(\"Hello world\");\n```\n# [JavaScript](#tab/js)\n```js\nconsole.log('hello world');\n```\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Dotnet/Docfx Configuration in C#\nDESCRIPTION: This code snippet demonstrates how to set up and initialize configuration settings for the Dotnet/Docfx documentation generator. It depends on the necessary libraries for configuration management and requires specific configuration files (e.g., docfx.json). The snippet handles loading and parsing configuration to prepare for documentation build processes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/walkthrough/walkthrough_generate_pdf.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\\nusing System.IO;\\nusing Newtonsoft.Json;\\n\\npublic class DocfxConfigLoader {\\n    public static void LoadConfig(string configPath) {\\n        if (!File.Exists(configPath)) {\\n            Console.WriteLine(\"Configuration file not found.\");\\n            return;\\n        }\\n        var jsonContent = File.ReadAllText(configPath);\\n        var config = JsonConvert.DeserializeObject<object>(jsonContent);\\n        Console.WriteLine(\"Configuration loaded successfully.\");\\n        // Proceed with using config object as needed\\n    }\\n}\\n// Usage: LoadConfig(\"path/to/docfx.json\");\n```\n\n----------------------------------------\n\nTITLE: Property UseRelativeLinks in JsonApiOptions Class in C#\nDESCRIPTION: Defines a boolean property UseRelativeLinks which determines whether all resource links in the JSON API output should be relative. The default value is false. This property includes getter and setter accessors allowing for manipulation of this configuration setting. It expects a boolean input and outputs the configured boolean value indicating relative link usage.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue9736.JsonApiOptions.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic bool UseRelativeLinks { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Alert Styles in docfx.json\nDESCRIPTION: This JSON snippet shows how to define custom alert styles within the `docfx.json` configuration file. The `build.markdownEngineProperties.alerts` property maps alert keywords (e.g., \"TODO\") to CSS class names (e.g., \"alert alert-secondary\"). These custom alerts can then be used in Markdown files.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"markdownEngineProperties\": {\n      \"alerts\": {\n        \"TODO\": \"alert alert-secondary\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating metadata with default config - PowerShell\nDESCRIPTION: This snippet provides a simple example of executing the `docfx metadata` command without any arguments or options. It relies on the presence of a `docfx.json` file in the current directory or a parent directory to determine the source code and output locations. The command processes the source code defined in the configuration to generate YAML metadata files.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-metadata.md#_snippet_1\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx metadata\n```\n\n----------------------------------------\n\nTITLE: Custom Alert Titles in token.json\nDESCRIPTION: This `token.json` file shows how to customize the display title for a custom alert. The key represents the alert keyword in lowercase (e.g., \"todo\"), and the value is the custom title to display (e.g., \"MY TODO\"). This file is used within a custom template to override the default alert title.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_6\n\nLANGUAGE: md\nCODE:\n```\n{\n  \"todo\": \"MY TODO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Issue8696Attribute Constructor Definition - C#\nDESCRIPTION: Defines the constructor for the `Issue8696Attribute` class. It takes several optional parameters, including description, boundsMin, boundsMax, validGameModes, hasMultipleSelections and enumType, allowing for customizable attribute instantiation. It is decorated with another instance of the same attribute.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8696Attribute.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Class1.Issue8696(\"Changes the name of the server in the server list\", 0, 0, null, false, null)]\npublic Issue8696Attribute(string? description = null, int boundsMin = 0, int boundsMax = 0, string[]? validGameModes = null, bool hasMultipleSelections = false, Type? enumType = null)\n```\n\n----------------------------------------\n\nTITLE: Providing Build Steps for RtfDocumentProcessor in C#\nDESCRIPTION: Implements the BuildSteps property that returns a list of IDocumentBuildStep instances to be executed on the document model during the build pipeline. The build steps typically include conversion processes like transforming RTF content to HTML. This links the processor to its corresponding build logic.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/howto_build_your_own_type_of_documentation_with_custom_plug-in.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic IEnumerable<IDocumentBuildStep> BuildSteps => new IDocumentBuildStep[]\n{\n    new RtfBuildStep()\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Relative Links Example\nDESCRIPTION: Example JSON response showing the result of using relative links in resource relationships.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue9736.IJsonApiOptions.verified.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  \"type\": \"articles\",\n  \"id\": \"4309\",\n  \"relationships\": {\n     \"author\": {\n       \"links\": {\n         \"self\": \"/api/shopping/articles/4309/relationships/author\",\n         \"related\": \"/api/shopping/articles/4309/author\"\n       }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Declaration for Class1 in C#\nDESCRIPTION: Defines the Class1 class which implements the IClass1 interface. This is the main class declaration that inherits from System.Object.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Class1 : IClass1\n```\n\n----------------------------------------\n\nTITLE: Implementing 'MyOperation' method in 'Issue8725' class\nDESCRIPTION: This snippet declares the 'MyOperation' method, a public void method intended as a specific operation within the 'Issue8725' class. Like 'MoreOperations', it takes no inputs and doesn't return a value. It serves as a placeholder for future functionality, demonstrating method declaration syntax and class structure in C#.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Issue8725.verified.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void MyOperation()\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Templates in docfx.json `build` Section\nDESCRIPTION: Demonstrates how to specify multiple templates using an array for the `template` property within the `build` section. Templates are applied sequentially (`default` then `my-custom-template`), with files from later templates overriding those from earlier ones if names collide.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-json-reference.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"template\": [\"default\", \"my-custom-template\"],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Git Branch Name in DocFX\nDESCRIPTION: The `DOCFX_SOURCE_BRANCH_NAME` environment variable is used to override the automatically detected git branch name when generating documentation. This is useful when the default branch name is not desired. There are no dependencies to set up before defining the `DOCFX_SOURCE_BRANCH_NAME` variable. The input is a string and the output will be the overridden branch name.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-environment-variables-reference.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Issue1887 Method Implementation in C#\nDESCRIPTION: Method related to IConfiguration helper and extension routines. It demonstrates functionality related to configuration management.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue1887()\n```\n\n----------------------------------------\n\nTITLE: Implementing Static HelloWorld Method in C#\nDESCRIPTION: This snippet defines a public static method named `HelloWorld` within the `Class1` class. The method returns `void` (nothing) and can be called directly on the class without an instance. The accompanying text indicates its purpose is a simple \"Hello World\" operation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromAssembly.Class1.verified.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void HelloWorld()\n```\n\n----------------------------------------\n\nTITLE: Setting Markdig Extensions in docfx.json\nDESCRIPTION: This snippet demonstrates how to configure Markdig extensions using the `docfx.json` configuration file. The `build.markdownEngineProperties.markdigExtensions` property is used to specify a list of extension names to enable. This approach allows for declarative configuration of markdown extensions.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"markdownEngineProperties\": {\n      \"markdigExtensions\": [\n          \"Abbreviations\",\n          \"Footnotes\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Preprocessor Transform Function in DocFX v1.9\nDESCRIPTION: The signature for the preprocessor's transform function changed in v1.9. The function now receives and returns a complete model object containing all properties, including system-generated metadata with underscore prefix and globally shared variables in __global.\nSOURCE: https://github.com/dotnet/docfx/blob/main/RELEASENOTE.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexports.transform = function (model){\n    // transform the model\n    return model;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Alert in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to use a custom alert defined in the `docfx.json` configuration. The `[!TODO]` syntax is used, where \"TODO\" corresponds to a key defined in the `alerts` property.  The content following the alert syntax will be styled according to the associated CSS class.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n> [!TODO]\n> This is a custom TODO section\n```\n\n----------------------------------------\n\nTITLE: Example YAML Header in Markdown\nDESCRIPTION: This snippet illustrates the use of a YAML header (YAML Front Matter) in a Markdown file. The YAML header includes metadata elements like `uid`, which provides a unique identifier for the file. The header is placed at the beginning of the document, enclosed by `---` delimiters.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/markdown.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nuid: fileA\n---\n\n# This is fileA\n...\n```\n\n----------------------------------------\n\nTITLE: Highlighting specific lines in a C# code snippet\nDESCRIPTION: This C# code snippet demonstrates how to include code with specific lines highlighted for emphasis, which is useful for tutorials or documentation that need to draw attention to particular parts of the code.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/markdown.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nThe example highlights lines 2, line 5 to 7 and lines 9 to the end of the file.\n\n[!code-csharp[](media/Program.cs?highlight=2,5-7,9-)]\n```\n\n----------------------------------------\n\nTITLE: Constructor: Parameterized Constructor with int and char for Issue8665\nDESCRIPTION: Creates an \"Issue8665\" instance with specified \"foo\" (int) and \"bar\" (char) parameters. Used for initializing key properties at creation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8665.verified.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic Issue8665(int foo, char bar)\n```\n\n----------------------------------------\n\nTITLE: Declaring BaseClass1 Abstract Class in C#\nDESCRIPTION: Defines the abstract class `BaseClass1` within the `BuildFromVBSourceCode` namespace. This class serves as a base for other classes (like `Class1`) and implicitly inherits from `System.Object`. Being abstract, it cannot be instantiated directly and is intended to be inherited.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromVBSourceCode.BaseClass1.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class BaseClass1\n```\n\n----------------------------------------\n\nTITLE: Representing an Indexer in YAML\nDESCRIPTION: This YAML snippet represents the metadata for an indexer in C#.  It includes the UID, ID, name, and full name, demonstrating how the indexer's signature (including parameter types) is captured.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- uid: \"System.Collections.IList.Item[System.Int32]\"\n  id: \"Item[System.Int32]\"\n  name.csharp: Item[Int32]\n  fullName.csharp: System.Collections.IList.Item[System.Int32]\n```\n\n----------------------------------------\n\nTITLE: Configuring DocFX Output Directory (JSON)\nDESCRIPTION: This JSON snippet demonstrates setting the `dest` property, likely within the `build` section of a `docfx.json` configuration file. It specifies that the generated documentation site files should be placed in the `_site` directory relative to the configuration file.\nSOURCE: https://github.com/dotnet/docfx/blob/main/RELEASENOTE.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n            \"dest\": \"_site\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Constructing TomFromBaseClass with an integer parameter in C#\nDESCRIPTION: Defines a constructor for TomFromBaseClass which receives a single integer parameter 'k'. This constructor permits initializing instances of TomFromBaseClass with an integer value, potentially used for internal configuration or state. It requires the System.Int32 type for the parameter.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.TomFromBaseClass.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic TomFromBaseClass(int k)\n```\n\n----------------------------------------\n\nTITLE: Declaring the 'eat' Event in ICat Interface (C#)\nDESCRIPTION: Defines the `eat` event signature within the `ICat` interface using the `System.EventHandler` delegate. Classes implementing `ICat` are required to provide an implementation for this event, allowing subscription to the cat's eating action.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.ICat.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nevent EventHandler eat\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Methods in C#\nDESCRIPTION: This C# code snippet defines generic methods (`Create`) within the `Tuple` class. It showcases how generic type parameters are used in method signatures.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/docs/dotnet-yaml-format.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System\n{\n    public static class Tuple\n    {\n        public static Tuple<T1> Create<T1>(T1 item1);\n        public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ColorType Enum Fields in C#\nDESCRIPTION: Lists individual fields of the ColorType enumeration, assigning specific integer values to each color. These values facilitate color identification and processing within the application. Each field is documented with its numeric value, corresponding color, and a short description.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ContainersRefType.ColorType.verified.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nRed = 0\n```\n\nLANGUAGE: C#\nCODE:\n```\nBlue = 1\n```\n\nLANGUAGE: C#\nCODE:\n```\nYellow = 2\n```\n\n----------------------------------------\n\nTITLE: Defining Class1 Structure in C#\nDESCRIPTION: This snippet defines the basic structure of the `Class1` public class within the `BuildFromAssembly` namespace. It indicates the start of the class definition and is derived from System.Object. No specific parameters or dependencies are shown in this snippet.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromAssembly.Class1.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Class1\n```\n\n----------------------------------------\n\nTITLE: Defining IAnimal Interface\nDESCRIPTION: This code snippet defines the IAnimal interface in C#. It represents the basic contract for any animal type, specifying that it must have a Name property and an Eat() method. This is the core interface for the CatLibrary namespace.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.IAnimal.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IAnimal\n```\n\n----------------------------------------\n\nTITLE: Overriding TestMethod1 Method in C#\nDESCRIPTION: Implementation of the TestMethod1 method that overrides the base class implementation. The method takes boolean and integer parameters and returns a boolean value. The method inherits some documentation but has custom documentation for the parm1 parameter.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue6366.Class2.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic override bool TestMethod1(bool parm1, int parm2)\n```\n\n----------------------------------------\n\nTITLE: Defining C# Static Explicit Operator to Tom\nDESCRIPTION: Defines a public `static` explicit conversion operator that converts an instance of `Cat<T, K>` to a `Tom` object. This indicates a specific evolution or transformation logic.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic static explicit operator Tom(Cat<T, K> src)\n```\n\n----------------------------------------\n\nTITLE: Name Property in Dog Class C#\nDESCRIPTION: The Name property provides access to the dog's name as a string. It is a read-only property set during object instantiation via the constructor.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Dog.verified.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic string Name { get; }\n```\n\n----------------------------------------\n\nTITLE: Constructor: Full Parameter Constructor for Issue8665\nDESCRIPTION: Initializes an \"Issue8665\" object with specific \"foo\" (int), \"bar\" (char), and \"baz\" (string) values, setting multiple properties at once.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8665.verified.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic Issue8665(int foo, char bar, string baz)\n```\n\n----------------------------------------\n\nTITLE: TomMethod Implementation with Complex Generic Types\nDESCRIPTION: Method implementation that takes complex generic parameters and returns a Complex type. The method throws exceptions including NotImplementedException, ArgumentException, and a generic CatException.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Tom.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic Complex<string, TomFromBaseClass> TomMethod(Complex<TomFromBaseClass, TomFromBaseClass> a, Tuple<string, Tom> b)\n```\n\n----------------------------------------\n\nTITLE: Building DocFX Project\nDESCRIPTION: This command builds the docfx project. Prerequisites include .NET SDK. The output is a compiled project file or files. This command is used within the build and test process outlined in the Contributing section.\nSOURCE: https://github.com/dotnet/docfx/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Defining C# Static Addition Operator\nDESCRIPTION: Defines a public `static` addition operator (`+`) for the `Cat<T, K>` class. It takes a `Cat<T, K>` instance and an integer, returning an integer result.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic static int operator +(Cat<T, K> lsr, int rsr)\n```\n\n----------------------------------------\n\nTITLE: Defining C# Field isHealthy with Attributes\nDESCRIPTION: Defines the public boolean field `isHealthy` for the `Cat<T, K>` class. It is marked with `ContextStatic`, `NonSerialized`, and `Obsolete` attributes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[ContextStatic]\n[NonSerialized]\n[Obsolete]\npublic bool isHealthy\n```\n\n----------------------------------------\n\nTITLE: Checking out LFS files\nDESCRIPTION: This command checks out files for snapshot testing if LFS is in use. Prerequisites include Git LFS. The command is used in the Build and Test section of the contributing guidelines.\nSOURCE: https://github.com/dotnet/docfx/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit lfs checkout\n```\n\n----------------------------------------\n\nTITLE: Defining Inheritdoc.Issue7035 class in C#\nDESCRIPTION: This code snippet defines a public class named Inheritdoc.Issue7035. This class inherits from the object class. It does not show any specific implementation details beyond the class declaration.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue7035.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Inheritdoc.Issue7035\n```\n\n----------------------------------------\n\nTITLE: Defining C# Event ownEat with Obsolete Attribute\nDESCRIPTION: Defines the public event `ownEat` for the `Cat<T, K>` class. It is of type `EventHandler` and is marked as `Obsolete` with a specific message, indicating it's deprecated.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[Obsolete(\"This _event handler_ is deprecated.\")]\npublic event EventHandler ownEat\n```\n\n----------------------------------------\n\nTITLE: Metadata for System.String Documentation (YAML)\nDESCRIPTION: Specifies author and manager metadata for the System.String documentation page using YAML format. This metadata is likely used by the documentation build system (like DocFX).\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/Docfx.Build.OverwriteDocuments.Tests/TestData/System.String.yml.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthor: rpetrusha\nms.author: ronpet\nmanager: wpickett\n```\n\n----------------------------------------\n\nTITLE: Method: BoolReturningMethod(bool) in C#\nDESCRIPTION: Defines a public method named BoolReturningMethod that takes a boolean parameter and returns a boolean value. The method serves as a simple example for documenting methods.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue7484.verified.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic bool BoolReturningMethod(bool source)\n```\n\n----------------------------------------\n\nTITLE: Defining C# Overridden Equals Method\nDESCRIPTION: Defines the public `override` of the `Equals` method from `System.Object`. It accepts an `object` parameter and returns a boolean indicating equality.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic override bool Equals(object obj)\n```\n\n----------------------------------------\n\nTITLE: Docfx PDF Example\nDESCRIPTION: This example shows how to execute the `docfx pdf` command with the default configuration file (docfx.json) to generate PDF documentation. It assumes the Docfx project is set up correctly.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx-pdf.md#_snippet_1\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx pdf\n```\n\n----------------------------------------\n\nTITLE: Defining C# Class Class1.Issue8948\nDESCRIPTION: This snippet defines the public class `Class1.Issue8948`, indicating that it implements the `Class1.IIssue8948` interface. It shows the basic structure and interface implementation of the class.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8948.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Class1.Issue8948 : Class1.IIssue8948\n```\n\n----------------------------------------\n\nTITLE: Declaring a Public Class in C#\nDESCRIPTION: This C# code snippet declares a public class named A within the BuildFromProject.Issue8540.A namespace. The class inherits directly from System.Object and does not define additional members or methods, relying solely on the base class functionality. This serves as a boilerplate for defining a new type in C#; no dependencies or parameters are required, and no input or output processing is performed.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Issue8540.A.A.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class A\n\n```\n\n----------------------------------------\n\nTITLE: Issue1651 Method Implementation in C#\nDESCRIPTION: Method that documents different pricing models used to calculate theoretical option values, including Black Scholes, Black76, and others.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue1651()\n```\n\n----------------------------------------\n\nTITLE: Defining C# Unsafe Method GetTailLength\nDESCRIPTION: Defines the public `unsafe` method `GetTailLength` for the `Cat<T, K>` class. It accepts an integer pointer (`int* catName`) and a `params` array of objects. It returns a long integer. Requires an `unsafe` context due to the pointer parameter.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic long GetTailLength(int* catName, params object[] parameters)\n```\n\n----------------------------------------\n\nTITLE: Constructor: Default Constructor for Issue8665\nDESCRIPTION: Initializes a new instance of the \"Issue8665\" class using the parameterless constructor. No input parameters are required.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Issue8665.verified.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic Issue8665()\n```\n\n----------------------------------------\n\nTITLE: Basic DocFX Command Usage in PowerShell\nDESCRIPTION: Shows the basic syntax for running DocFX commands with an optional configuration file argument and additional options.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/reference/docfx-cli-reference/docfx.md#_snippet_0\n\nLANGUAGE: pwsh\nCODE:\n```\ndocfx [config] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: UseRelativeLinks Property Definition\nDESCRIPTION: Property definition that determines whether to use relative links for all resources. The default value is false.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue9736.IJsonApiOptions.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbool UseRelativeLinks { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining ExplicitLayoutClass in C#\nDESCRIPTION: This snippet declares the ExplicitLayoutClass class within the CatLibrary.Core namespace, written in C#. It inherits from the base system object class by default. No additional properties, methods, or constructors are included, suggesting it functions as a foundational or marker class. The snippet requires C# language support and is part of the CatLibrary.Core.dll assembly.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ExplicitLayoutClass.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExplicitLayoutClass\n```\n\n----------------------------------------\n\nTITLE: Declaring ContainersRefTypeChildInterface in CatLibrary.Core - C#\nDESCRIPTION: This code snippet defines the public interface ContainersRefTypeChildInterface within the ContainersRefType namespace, under the CatLibrary.Core.dll assembly. This interface acts as a contract for implementing types but does not specify any members within this excerpt. Consumers need to reference CatLibrary.Core.dll and use the CatLibrary.Core namespace to implement this interface.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Core.ContainersRefType.ContainersRefTypeChildInterface.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ContainersRefType.ContainersRefTypeChildInterface\n```\n\n----------------------------------------\n\nTITLE: XmlCommentIncludeTag Method in C#\nDESCRIPTION: Method that demonstrates the use of XML comment tags in documentation, including remarks. Shows basic documentation structure.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic void XmlCommentIncludeTag()\n```\n\n----------------------------------------\n\nTITLE: Defining Keyword Property (C#)\nDESCRIPTION: Defines the read-only Keyword property within the Class1 class. This property is of type Class1 and is marked as obsolete.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromVBSourceCode.Class1.verified.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Obsolete(\"This member is obsolete.\", true)]\npublic Class1 Keyword { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining ValueClass Field (C#)\nDESCRIPTION: Defines the ValueClass field within the Class1 class. This field is of type Class1 itself and is described as a Value type.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromVBSourceCode.Class1.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic Class1 ValueClass\n```\n\n----------------------------------------\n\nTITLE: Class Declaration: Inheritdoc.Issue7484 in C#\nDESCRIPTION: Defines the Inheritdoc.Issue7484 class.  This class serves as a test case for documentation generation. It inherits from the object class.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue7484.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Inheritdoc.Issue7484\n```\n\n----------------------------------------\n\nTITLE: Defining C# Default Constructor for Cat\nDESCRIPTION: Defines the parameterless public constructor for the `Cat<T, K>` class.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic Cat()\n```\n\n----------------------------------------\n\nTITLE: Declaring Class1 (C#)\nDESCRIPTION: Declares the Class1 class, inheriting from BaseClass1. This is the primary class documented on this page.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromVBSourceCode.Class1.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Class1 : BaseClass1\n```\n\n----------------------------------------\n\nTITLE: HTML Link Example\nDESCRIPTION: Demonstrates the transformed HTML link based on the primary renderer being `html`.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"B.html\">Link To B</a>\n```\n\n----------------------------------------\n\nTITLE: Rendering Namespace Child Items with Mustache Template in DocFX\nDESCRIPTION: This Mustache template iterates over the 'children' of a namespace documentation object in DocFX and renders each using the <xref> syntax with an external class-row template. Key for projects using cross-reference rendering in complex documentation layouts. No dependencies other than DocFX and Mustache support are needed. The 'uid' and 'template' attributes are essential for correct partial application.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/spec/docfx_document_schema.md#_snippet_4\n\nLANGUAGE: mustache\nCODE:\n```\n{{#children}}\n  <xref uid=\"{{uid}}\" template=\"class.tr.tmpl\" />\n{{/children}}\n```\n\n----------------------------------------\n\nTITLE: Defining Class B in C#\nDESCRIPTION: This code snippet defines a public class named 'B' in C#. It inherits from the 'object' class. There are no explicit members defined within this class in this snippet, but it inherits members from the object class.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Issue8540.B.B.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class B\n```\n\n----------------------------------------\n\nTITLE: Adding Copyright Header - C#\nDESCRIPTION: This code snippet shows the required copyright header for all C# source code files in the Docfx project. It includes licensing information from the .NET Foundation under the MIT license.\nSOURCE: https://github.com/dotnet/docfx/blob/main/samples/seed/articles/engineering_guidelines.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n```\n\n----------------------------------------\n\nTITLE: Mustache Body Placeholder Syntax\nDESCRIPTION: Shows the syntax for defining a body placeholder in a Mustache master page.\nSOURCE: https://github.com/dotnet/docfx/blob/main/docs/tutorial/intro_template.md#_snippet_6\n\nLANGUAGE: mustache\nCODE:\n```\n{{!body}}\n```\n\n----------------------------------------\n\nTITLE: Setting UseRelativeLinks Property Example\nDESCRIPTION: Example of setting the UseRelativeLinks property to true.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue9736.IJsonApiOptions.verified.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\noptions.UseRelativeLinks = true;\n```\n\n----------------------------------------\n\nTITLE: Defining C# Struct Constructor Issue8129\nDESCRIPTION: Defines a public constructor for the `Issue8129` struct. It accepts a `string` parameter named `foo`, likely used for initializing the struct's state.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue8129.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic Issue8129(string foo)\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for System.String Overwrite in DocFX\nDESCRIPTION: A YAML front matter block that defines an overwrite for the System.String class documentation in DocFX. It specifies the uid and indicates that the content should replace the summary.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/Docfx.Build.ManagedReference.Tests/TestData/overwrite/mref.overwrite.invalid.ref.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nuid: System.String\nsummary: *content\n---\n```\n\n----------------------------------------\n\nTITLE: Defining DocFX Overwrite Content for Azure AD Graph API Contact Resource in YAML\nDESCRIPTION: This YAML frontmatter defines a DocFX overwrite file that targets a specific Azure AD Graph API Contact resource. It includes a unique identifier (UID) for the resource and demonstrates how to add undefined properties to existing documentation.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/Docfx.Build.RestApi.Tests/TestData/overwrite/rest.overwrite.not.predefined.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nuid: graph.windows.net/myorganization/Contacts/1.0\nnot_defined_property: *content\n---\n\nOverwrite content\n```\n\n----------------------------------------\n\nTITLE: Class Declaration for Generic Class 'Class1.Test<T>' in C#\nDESCRIPTION: This snippet shows the declaration of the generic class 'Class1.Test<T>', including its namespace and assembly references. It also outlines the class's inheritance from 'object' and indicates that it derives from 'Class1.Test<T>' as documented in external links.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.Test-1.verified.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Class1.Test<T>\n```\n\n----------------------------------------\n\nTITLE: Defining the CatException<T> Generic Class in C#\nDESCRIPTION: This C# code defines a public generic class named `CatException<T>` within the `CatLibrary` namespace. It inherits from the base `System.Exception` class, making it a custom exception type, and implements the `System.Runtime.Serialization.ISerializable` interface to support serialization. The generic type parameter `T` allows the exception to be associated with a specific data type.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.CatException-1.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CatException<T> : Exception, ISerializable\n```\n\n----------------------------------------\n\nTITLE: Defining Tween Method (float)\nDESCRIPTION: This code snippet defines the `Tween` method that animates a float value from a starting value to an end value over a specified duration, invoking a callback function on each change. It takes `from`, `to` and `duration` as input and `onChange` as a callback. It returns a generic object representing the tween instance.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue8101.verified.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static object Tween(float from, float to, float duration, Action<float> onChange)\n```\n\n----------------------------------------\n\nTITLE: Declaring C# Class Inheritdoc.Issue6366\nDESCRIPTION: This code snippet declares a public C# class named `Inheritdoc.Issue6366`.  The class is within the `BuildFromProject` assembly. There are no dependencies beyond the .NET framework itself. This snippet serves as the definition of the class and is a key element in constructing its functionality. The output is the definition of the class which is then used in other processes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Inheritdoc.Issue6366.verified.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Inheritdoc.Issue6366\n```\n\n----------------------------------------\n\nTITLE: Issue2623 Method with Code Example in C#\nDESCRIPTION: Method with an example that demonstrates creating and using a MyClass instance, showing how to call the Execute method from an Update function.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Class1.verified.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Issue2623()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMyClass myClass = new MyClass();\n\nvoid Update()\n{\n    myClass.Execute();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C# Constructor with T Parameter for Cat\nDESCRIPTION: Defines a public constructor for the `Cat<T, K>` class that accepts a single parameter of the generic type T, as defined by the class.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/CatLibrary.Cat-2.verified.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic Cat(T ownType)\n```\n\n----------------------------------------\n\nTITLE: Constructor for Dog Class in C#\nDESCRIPTION: This constructor initializes a new instance of the Dog class with specified name and age. It requires two parameters: a string for the dog's name and an integer for its age, enabling object creation with specific attributes.\nSOURCE: https://github.com/dotnet/docfx/blob/main/test/docfx.Snapshot.Tests/SamplesTest.SeedMarkdown/BuildFromProject.Dog.verified.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic Dog(string name, int age)\n```"
  }
]