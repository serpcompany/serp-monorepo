[
  {
    "owner": "paddlehq",
    "repo": "paddle-node-sdk",
    "content": "TITLE: Initializing Paddle Client in TypeScript\nDESCRIPTION: Examples of initializing a new Paddle client with an API key and optional configuration for environment, log level, and custom headers.\nSOURCE: https://github.com/paddlehq/paddle-node-sdk/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Environment, LogLevel, Paddle } from '@paddle/paddle-node-sdk'\n\nconst paddle = new Paddle('API_KEY')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst paddle = new Paddle('API_KEY', {\n  environment: Environment.production, // or Environment.sandbox for accessing sandbox API\n  logLevel: LogLevel.verbose, // or LogLevel.error for less verbose logging\n  customHeaders: {\n    'X-Custom-Header': 'value' // Optional custom headers\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Signature Verification with Paddle Node.js SDK and Express\nDESCRIPTION: This code demonstrates how to set up an Express server that receives Paddle webhooks, verifies their signatures, and processes different event types. It uses the raw Express middleware to ensure the webhook payload remains unmodified for signature verification, then calls the Paddle SDK's unmarshal method to validate the webhook integrity against a secret key.\nSOURCE: https://github.com/paddlehq/paddle-node-sdk/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paddle, EventName } from '@paddle/paddle-node-sdk'\nimport express, { Request, Response } from 'express'\n\nconst paddle = new Paddle('API_KEY')\nconst app = express()\n\n// Create a `POST` endpoint to accept webhooks sent by Paddle.\n// We need `raw` request body to validate the integrity. Use express raw middleware to ensure express doesn't convert the request body to JSON.\napp.post('/webhooks', express.raw({ type: 'application/json' }), async (req: Request, res: Response) => {\n  const signature = (req.headers['paddle-signature'] as string) || '';\n  // req.body should be of type `buffer`, convert to string before passing it to `unmarshal`. \n  // If express returned a JSON, remove any other middleware that might have processed raw request to object\n  const rawRequestBody = req.body.toString();\n  // Replace `WEBHOOK_SECRET_KEY` with the secret key in notifications from vendor dashboard\n  const secretKey = process.env['WEBHOOK_SECRET_KEY'] || '';\n\n  try {\n    if (signature && rawRequestBody) {\n      // The `unmarshal` function will validate the integrity of the webhook and return an entity\n      const eventData = await paddle.webhooks.unmarshal(rawRequestBody, secretKey, signature);\n      switch (eventData.eventType) {\n        case EventName.ProductUpdated:\n          console.log(`Product ${eventData.data.id} was updated`);\n          break;\n        case EventName.SubscriptionUpdated:\n          console.log(`Subscription ${eventData.data.id} was updated`);\n          break;\n        default:\n          console.log(eventData.eventType);\n      }\n    } else {\n      console.log('Signature missing in header');\n    }\n  } catch (e) {\n    // Handle signature mismatch or other runtime errors\n    console.log(e);\n  }\n  // Return a response to acknowledge\n  res.send('Processed webhook event');\n});\n\napp.listen(3000)\n\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Paddle Node.js SDK\nDESCRIPTION: Example of handling errors returned by the Paddle API, demonstrating how to check error codes and handle specific error types.\nSOURCE: https://github.com/paddlehq/paddle-node-sdk/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiError } from '@paddle/paddle-node-sdk'\n\ntry {\n  // Call functions from the SDK\n} catch (e: any) {\n  // e.code will always follow the error code defined in our documentation\n  const paddleApiError = e as ApiError;\n  if (paddleApiError.code === 'conflict') {\n    // Handle Conflict error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Paddle Node.js SDK\nDESCRIPTION: Commands to install the Paddle Node.js SDK using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/paddlehq/paddle-node-sdk/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @paddle/paddle-node-sdk\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @paddle/paddle-node-sdk\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @paddle/paddle-node-sdk\n```\n\n----------------------------------------\n\nTITLE: Listing Entities with Paddle Node.js SDK\nDESCRIPTION: Example of listing entities (products in this case) using the Paddle Node.js SDK, demonstrating pagination handling.\nSOURCE: https://github.com/paddlehq/paddle-node-sdk/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paddle } from '@paddle/paddle-node-sdk'\n\nconst paddle = new Paddle('API_KEY')\n\nfunction getProducts() {\n    // creates an iterator instance\n    const productCollection = paddle.products.list()\n    return productCollection\n}\n\ntry {\n    // Creates an iterator to loop through paginated data. \n    // At this point, It does not hold any data.\n    const productCollection = getProducts()\n    \n    // Call `next()` to retrieve first page of the dataset\n    const firstPage = await productCollection.next()\n    console.log(\"First page data\", firstPage)\n    \n    // Calling `next()` again will retrieve subsequent pages.\n    const secondPage = await productCollection.next()\n    console.log(\"Second page data\", secondPage)\n} catch (e) {\n    // Handle Network/API errors\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity with Paddle Node.js SDK\nDESCRIPTION: Example of creating an entity (product in this case) using the Paddle Node.js SDK, showing how to pass request body and handle the response.\nSOURCE: https://github.com/paddlehq/paddle-node-sdk/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paddle, CreateProductRequestBody } from '@paddle/paddle-node-sdk'\n\nconst paddle = new Paddle('API_KEY')\n\nasync function createProduct(requestBody: CreateProductRequestBody) {\n    try {\n        // Pass the request body with the attributes required to create\n        const product = await paddle.products.create(requestBody)\n        // Returns a product entity\n        return product\n    } catch (e) {\n        // Handle Network/API errors\n    }\n}\n\nconst product = await createProduct({ name: 'ChatApp Education', taxCategory: 'standard' })\nconsole.log(\"Product\", product)\n```\n\n----------------------------------------\n\nTITLE: Getting an Entity with Paddle Node.js SDK\nDESCRIPTION: Example of retrieving a specific entity (product in this case) using the Paddle Node.js SDK, showing how to pass the entity ID.\nSOURCE: https://github.com/paddlehq/paddle-node-sdk/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paddle } from '@paddle/paddle-node-sdk'\n\nconst paddle = new Paddle('API_KEY')\n\nasync function getProduct(productId: string) {\n    try {\n        // Pass the product id get\n        const product = await paddle.products.get(productId)\n        // Returns a product entity\n        return product\n    } catch (e) {\n        // Handle Network/API errors\n    }\n}\n\nconst product = await getProduct('id')\nconsole.log('Product', product)\n```\n\n----------------------------------------\n\nTITLE: Updating an Entity with Paddle Node.js SDK\nDESCRIPTION: Examples of updating entities (product and address) using the Paddle Node.js SDK, demonstrating how to pass entity ID and update attributes.\nSOURCE: https://github.com/paddlehq/paddle-node-sdk/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paddle, UpdateProductRequestBody } from '@paddle/paddle-node-sdk'\n\nconst paddle = new Paddle('API_KEY')\n\nasync function updateProduct(productId: string, requestBody: UpdateProductRequestBody) {\n    try {\n        // Pass the product id and request body with the attributes to update\n        const product = await paddle.products.update(productId, requestBody)\n        // Returns an updated product entity\n        return product\n    } catch (e) {\n        // Handle Network/API errors\n    }\n}\n\nconst product = await updateProduct('id', { name: 'ChatApp for Schools' })\nconsole.log('Updated product', product)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = await paddle.addresses.update(customerId, addressId, requestBody)\n```\n\n----------------------------------------\n\nTITLE: Archiving an Entity with Paddle Node.js SDK\nDESCRIPTION: Example of archiving an entity (product in this case) using the Paddle Node.js SDK, demonstrating how to pass the entity ID for archival.\nSOURCE: https://github.com/paddlehq/paddle-node-sdk/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paddle } from '@paddle/paddle-node-sdk'\n\nconst paddle = new Paddle('API_KEY')\n\nasync function archiveProduct(productId: string) {\n    try {\n        // Pass the product id archive\n        const product = await paddle.products.archive(productId)\n        // Returns an archived product entity\n        return product\n    } catch (e) {\n        // Handle Network/API errors\n    }\n}\n\nconst product = await archiveProduct('id')\nconsole.log('Product', product)\n```"
  }
]