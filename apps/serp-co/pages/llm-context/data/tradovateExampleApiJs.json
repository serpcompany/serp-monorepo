[
  {
    "owner": "tradovate",
    "repo": "example-api-js",
    "content": "TITLE: Implementing Chart Data Subscription with WebSocket in JavaScript\nDESCRIPTION: Code example showing how to subscribe to chart data using the WebSocket API. Defines configuration for MinuteBar chart data with specific element size and number of elements to retrieve.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-10-Chart-Data/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$getChart.addEventListener('click', async () => {\n    unsubscribe = await socket.subscribe({\n        url: 'md/getchart',\n        body: {\n            symbol: 'MNQZ1',\n            chartDescription: {\n                underlyingType: 'MinuteBar',\n                elementSize: 30,\n                elementSizeUnit: 'UnderlyingUnits',\n                withHistogram: false,\n            },\n            timeRange: {\n                asMuchAsElements: 20\n            }\n        },\n        subscription: (chart) => {\n            console.log(chart)\n        }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Connection and Subscription - JavaScript\nDESCRIPTION: Sets up WebSocket connection to Tradovate's market data API and subscribes to real-time quote updates for a specified symbol. Uses TradovateSocket class for connection management.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-08-Realtime-Market-Data/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URLs } from '../../../tutorialsURLs'\n\nconst { MD_URL } = URLs\n\nconst main = async () => {\n    const { accessToken } = await connect(credentials)\n    \n    const mySocket = new TradovateSocket({debugLabel: 'Market Data API'})\n    await mySocket.connect(MD_URL, accessToken)\n\n    const unsubscribe = await mySocket.subscribe({\n        url: 'md/subscribequote',\n        body: { symbol: 'MNQZ1' },\n        subscription: (item) => {\n            //...\n        }\n    })\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Chart Subscription and Event Handling\nDESCRIPTION: Implementation of chart subscription logic and event handling for different chart types, including real-time data updates.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-11-Tick-Charts/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$getChart.addEventListener('click', async () => {  \n        all_bars = []\n\n        if(unsubscribe) unsubscribe() //unsubscribe existing subsciptions\n        \n        if($type.value === 'Tick') {\n            _chart = getTickChart()\n        } else {\n            _chart = getRegularChart()\n        }\n\n        unsubscribe = await socket.subscribe({\n            url: 'md/getchart',\n            body: { \n                symbol: $symbol.value,\n                chartDescription: {\n                    underlyingType: $type.value,\n                    elementSize: $type.value === 'Tick' || $type.value === 'DailyBar' ? 1 : parseInt($elemSize.value),\n                    elementSizeUnit: 'UnderlyingUnits',\n                    // withHistogram: true,\n                },\n                timeRange: {\n                    ...{ asMuchAsElements: parseInt($nElements.value) },\n                    // closestTimestamp: \"2020-10-30T19:45:00.000Z\",\n                    asFarAsTimeStamp: \"2020-05-01T19:45:00.000Z\"\n                }\n            },    \n            subscription: chart => {\n                console.log(chart)\n                // console.log($type.value)\n                if($type.value === 'Tick') {\n                    handleTickChart(chart)\n                } else {\n                    handleRegularChart(chart)\n                } \n                _chart.render()\n            }\n        })        \n    })\n```\n\n----------------------------------------\n\nTITLE: WebSocket Event Handlers and UI Integration - JavaScript\nDESCRIPTION: Main application logic connecting WebSocket events to UI elements, managing connection state, and handling market data subscription updates.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-08-Realtime-Market-Data/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async () => {\n\n    const { accessToken } = await connect(credentials)\n\n    //HTML elements\n    const $outlet       = document.getElementById('outlet')\n    const $reqBtn       = document.getElementById('request-btn')\n    const $unsubBtn     = document.getElementById('unsubscribe-btn')\n    const $connBtn      = document.getElementById('connect-btn')\n    const $discBtn      = document.getElementById('disconnect-btn')\n    const $statusInd    = document.getElementById('status')\n    const $symbol       = document.getElementById('symbol')\n\n    //The websocket helper tool\n    const socket = new TradovateSocket()\n    let lastSymb\n    let unsubscribe\n\n    const onStateChange = _ => {\n        $statusInd.style.backgroundColor = \n            socket.ws.readyState == 0 ? 'gold'      //pending\n        :   socket.ws.readyState == 1 ? 'green'     //OK\n        :   socket.ws.readyState == 2 ? 'orange'    //closing\n        :   socket.ws.readyState == 3 ? 'red'       //closed\n        :   /*else*/                    'silver'    //unknown/default           \n    }\n\n    $connBtn.addEventListener('click', async () => {\n        if(socket.ws && socket.ws.readyState === 1) return\n\n        await socket.connect(URLs.MD_URL, accessToken)  \n        socket.ws.addEventListener('message', onStateChange)\n    })\n\n    $discBtn.addEventListener('click', () => {\n        if(socket.ws.readyState !== 1) return\n\n        socket.ws.close()\n        $statusInd.style.backgroundColor = 'red'\n        $outlet.innerText = ''\n        \n    })\n\n    $unsubBtn.addEventListener('click', () => {\n        unsubscribe()\n        lastSymb = ''\n    })\n\n    $reqBtn.addEventListener('click', async () => {\n\n        lastSymb = $symbol.value\n        unsubscribe = socket.subscribe({\n            url: 'md/subscribequote',\n            body: { symbol: $symbol.value },\n            subscription:  data => {\n                const newElement = document.createElement('div')\n                newElement.innerHTML = renderQuote($symbol.value, data.entries)\n                $outlet.firstElementChild\n                    ? $outlet.firstElementChild.replaceWith(newElement)\n                    : $outlet.append(newElement)\n            }\n        })        \n    })\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Subscription in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement DOM subscription functionality. It adds event listeners to the watch and unwatch DOM buttons, subscribes to the DOM data, and renders the received data in real-time.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-09-Realtime-Market-Data-Pt2/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//...in main()\n\n    $watchDom.addEventListener('click', async () => {\n\n        unsubscribeDom = await socket.subscribe({\n            url: 'md/subscribedom',\n            body: { symbol: $sym2.value },\n            subscription: data => {\n                const newElement = document.createElement('div')\n                newElement.innerHTML = renderDOM($sym2.value, data)\n                $outlet2.firstElementChild\n                    ? $outlet2.firstElementChild.replaceWith(newElement)\n                    : $outlet2.append(newElement)\n            }\n        })\n    })\n\n    $unwatchDom.addEventListener('click', () => {\n        unsubscribeDom()\n    })\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-Time P&L Calculation with WebSocket in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up real-time subscriptions for user data and market quotes. It calculates P&L based on positions and current prices, updates the UI with position information, and maintains a running total of P&L across all positions.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-12-Calculating-Open-PL/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async () => {     \n\n    const pls = []\n    \n    //combines all your open p&ls into one \n    const runPL = () => {\n        const totalPL = pls.map(({pl}) => pl).reduce((a, b) => a + b, 0)\n        $openPL.innerHTML = ` $${totalPL.toFixed(2)}`\n    }\n\n    //Connect to the tradovate API by retrieving an access token\n    const { accessToken, userId } = await connect(credentials)\n\n    const socket = new TradovateSocket({debugLabel: 'Realtime API'}) //you can label your sockets for debugging\n    await socket.connect(URLs.WS_DEMO_URL, accessToken)\n\n    const mdsocket = new TradovateSocket({debugLabel: 'Market Data API'})\n    await mdsocket.connect(URLs.MD_URL, accessToken)\n    \n    socket.subscribe({\n        url: 'user/syncrequest',\n        body: { users: [userId] },\n        subscription: (item) => {\n            if(item.users) { //this is the initial response\n                const { positions, contracts, products } = item\n\n                positions.forEach(async pos => {\n                    if(pos.netPos === 0 && pos.prevPos === 0) return\n            \n                    //we need the name variable from the contract this position is related to\n                    const { name } = contracts.find(contract => contract.id === pos.contractId)\n            \n                    //get the value per point from products\n                    let item = products.find(product => product.name.startsWith(name))\n                    \n                    let vpp = item.valuePerPoint\n\n                    //our subscription has an inner subscription\n                    let unsubscribe = await mdsocket.subscribe({\n                        url: 'md/subscribequote',\n                        body: { symbol: name },\n                        //entries is a field on the quote data object\n                        subscription: ({entries}) => {                         \n                            \n                            let buy = pos.netPrice ? pos.netPrice : pos.prevPrice\n                            const { Trade } = entries //current Trade quote\n                            const { price } = Trade   //price of the Trade quote\n                \n                            let pl = (price - buy) * vpp * pos.netPos //our p&l formula\n                            \n                            //render the HTML\n                            const element = document.createElement('div')\n                            element.innerHTML = renderPos(name, pl, pos.netPos)\n                            const $maybeItem = document.querySelector(`#position-list li[data-name=\"${name}\"`)\n                            $maybeItem ? $maybeItem.innerHTML = renderPos(name, pl, pos.netPos) : $posList.appendChild(element)\n                \n                            //update existing p&l or push a new one\n                            const maybePL = pls.find(p => p.name === name)\n                            if(maybePL) {\n                                maybePL.pl = pl\n                            } else {\n                                pls.push({ name, pl })\n                            }\n\n                            //run the p&l reducer to get total p&l\n                            runPL()                            \n                        }\n                    })                            \n                })\n            }\n        }\n    })\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Order Request Parameters Schema\nDESCRIPTION: JSON schema showing all available parameters for placing an order through the Tradovate API.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-4a-Place-An-Order/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    accountSpec: \"string\",\n    accountId: 0,\n    clOrdId: \"string\",\n    action: \"Buy\",          //required\n    symbol: \"string\",       //required\n    orderQty: 0,            //required\n    orderType: \"Limit\",     //required\n    price: 0,\n    stopPrice: 0,\n    maxShow: 0,\n    pegDifference: 0,\n    timeInForce: \"Day\",\n    expireTime: \"2019-08-24T14:15:22Z\",\n    text: \"string\",\n    activationTime: \"2019-08-24T14:15:22Z\",\n    customTag50: \"string\",\n    isAutomated: true\n}\n```\n\n----------------------------------------\n\nTITLE: Place Order Implementation\nDESCRIPTION: Main implementation of the placeOrder function that handles order submission to the Tradovate API, including parameter normalization and token validation.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-4a-Place-An-Order/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const placeOrder = async ({\n    action, \n    symbol,\n    orderQty,\n    orderType, \n    accountSpec, \n    accountId, \n    clOrdId, \n    price, \n    stopPrice, \n    maxShow, \n    pegDifference,\n    timeInForce, \n    expireTime, \n    text, \n    activationTime, \n    customTag50, \n    isAutomated\n}) => {\n\n    const { id, name } = getAvailableAccounts()[0]\n    const { token } = getAccessToken()\n\n    const normalized_body = {\n        action, symbol, orderQty, orderType,\n        isAutomated: isAutomated || false,\n        accountId: id,\n        accountSpec: name\n    }    \n\n    if(!token) {\n        console.error('No access token found. Please acquire a token and try again.')\n        return\n    }\n\n    const res = await tvPost('/order/placeOrder', normalized_body)\n\n    return res\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Heartbeat Response in JavaScript\nDESCRIPTION: Implements client-side heartbeat response functionality to maintain the WebSocket connection. This approach uses timestamp comparison to send heartbeat responses at appropriate intervals rather than relying on potentially throttled setTimeout or setInterval methods.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-06-Heartbeats/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//...\n\nconst ws = new WebSocket(WSS_URL)\n\nlet curTime = new Date()    //original time. we will replace this value with the message time\n\nws.onmessage = msg => {\n\n    const now = new Date() //time at call of onmessage\n\n    if(now.getTime() - curTime.getTime() >= 2500) {\n        ws.send('[]')\n        console.log('sent response heartbeat')\n        curTime = new Date()    //set the new timer\n    }\n\n    //...\n\n    //message discriminator\n    switch(kind) {\n        case 'o':\n            console.log('Opening Socket Connection...')\n            const { token } = getAccessToken()\n            ws.send(`authorize\\n0\\n\\n${token}`)                        \n            break\n        case 'h':\n            console.log('received server heartbeat...')             \n            break\n        case 'a':\n            const data = JSON.parse(msg.data.slice(1))\n            console.log(data)\n            break\n        case 'c':\n            console.log('closing websocket')\n            break\n        default:\n            console.error('Unexpected response token received:')\n            console.error(msg)\n            break;\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Real-Time User Data Updates with TradovateSocket in JavaScript\nDESCRIPTION: This code snippet demonstrates how to connect to the Tradovate WebSocket, subscribe to real-time user data updates, and handle the initial response and subsequent events. It uses the 'user/syncrequest' URL to open a subscription for changes in user data.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async () => {\n    const { accessToken, userId } = await connect(credentials)\n\n    const socket = new TradovateSocket()\n    await socket.connect(WS_DEMO_URL, accessToken)\n\n    socket.subscribe({\n        url: 'user/syncrequest',\n        body: { users: [userId] },\n        subscription: item => {\n            if(item.users) {\n                //initial response has the `users` field and contains all of your current user data\n                const { \n                    accountRiskStatuses,\n                    accounts,\n                    cashBalances,\n                    commandReports,\n                    commands,\n                    contractGroups,\n                    contractMaturities,\n                    contracts,\n                    currencies,\n                    exchanges,\n                    executionReports,\n                    fillPairs,\n                    fills,\n                    marginSnapshots,\n                    orderStrategies, \n                    orderStrategyLinks,\n                    orderStrategyTypes,\n                    orderVersions,\n                    orders,\n                    positions,\n                    products,\n                    properties,\n                    spreadDefinitions,\n                    userAccountAutoLiqs,\n                    userPlugins,\n                    userProperties,\n                    userReadStatuses,\n                    users        \n                } = item\n                //do setup stuff with data\n            } else {\n                //after initial response, subscription events look like this\n                const { entity, entityType, eventType } = item\n            }\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Order Placement Usage Example\nDESCRIPTION: Example implementation showing how to use the placeOrder function in a web application, including connection setup and event handling.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-4a-Place-An-Order/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { credentials } from '../../../tutorialsCredentials.js'\nimport { connect } from './connect'\nimport { ORDER_ACTION, ORDER_TYPE, placeOrder } from './placeOrder'\n\n\nconst main = async () => {\n    //Connect to the tradovate API by retrieving an access token\n    await connect(credentials)\n\n    const $symbol = document.getElementById('symbol')\n    const $input = document.getElementById('buy')\n\n    $input.addEventListener('click', async () => {\n        if(!$symbol.value) return \n        const response = await placeOrder({\n            action: ORDER_ACTION.Buy,\n            symbol: $symbol.value,\n            orderQty: 1,\n            orderType: ORDER_TYPE.Market,\n        })\n        console.log(response)\n    })\n}\n\n//app entry point\nmain()\n```\n\n----------------------------------------\n\nTITLE: Quote Rendering Component - JavaScript\nDESCRIPTION: Component for rendering market data quotes, including price and size information for various quote types like Bid, Offer, Trade, etc.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-08-Realtime-Market-Data/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderPriceSize = ({price, size}) => `\n    ${price ? '<li>price: ' +price+ '</li>' : ''}\n    ${size ? '<li>size: ' +size+ '</li>' : ''}\n`\n\nexport const renderQuote = (symbol, {\n    Bid,\n    HighPrice,\n    LowPrice,\n    Offer,\n    OpenInterest,\n    OpeningPrice,\n    SettlementPrice,\n    TotalTradeVolume,\n    Trade,\n}) => `\n    <section>\n        <h1>${symbol}</h1>\n        <span>\n            <div>\n                <h3>Bid</h3>\n                <ul>\n                    ${renderPriceSize(Bid)}\n                </ul>\n            </div>\n            <div>\n                <h3>HighPrice</h3>\n                <ul>\n                    ${renderPriceSize(HighPrice)}\n                </ul>\n            </div>\n            <div>\n                <h3>LowPrice</h3> \n                <ul>\n                    ${renderPriceSize(LowPrice)}\n                </ul>\n            </div>\n            <div>\n                <h3>Offer</h3>\n                <ul>\n                    ${renderPriceSize(Offer)}\n                </ul>\n            </div>\n            <div>\n                <h3>OpenInterest</h3>\n                <ul>\n                    ${renderPriceSize(OpenInterest)}\n                </ul>\n            </div>\n            <div>\n                <h3>OpeningPrice</h3>\n                <ul>\n                    ${renderPriceSize(OpeningPrice)}\n                </ul>\n            </div>\n            <div>\n                <h3>SettlementPrice</h3>\n                <ul>\n                    ${renderPriceSize(SettlementPrice)}\n                </ul>\n            </div>\n            <div>\n                <h3>TotalTradeVolume</h3>\n                <ul>\n                    ${renderPriceSize(TotalTradeVolume)}\n                </ul>\n            </div>\n            <div>\n                <h3>Trade</h3>\n                <ul>\n                    ${renderPriceSize(Trade)}\n                </ul>\n            </div>\n        </span>\n    </section>\n`\n```\n\n----------------------------------------\n\nTITLE: WebSocket Authorization Request\nDESCRIPTION: Shows how to construct and send an authorization request with an access token using the required newline-delimited format.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-05-WebSockets-Start/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { token } = getAccessToken()\nconst authRequest = `authorize\\n1\\n\\n${token}`\n\nws.send(authRequest)\n```\n\n----------------------------------------\n\nTITLE: Creating TradovateSocket Module in JavaScript\nDESCRIPTION: Implements a TradovateSocket constructor function with counter and send method for making WebSocket requests to Tradovate API. The module provides a structured way to handle socket connections and assign unique IDs to requests.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-06-Heartbeats/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//TradovateSocket.js\nimport { WSS_URL } from \"./env\";\nimport { getAccessToken } from './storage'\n\nexport function TradovateSocket() {\n    let counter = 0\n    \n    this.ws = null\n    this.increment = function() { return counter++ }\n}\n\nTradovateSocket.prototype.send = function({url, query, body}) {\n    this.ws.send(`${url}\\n${this.increment()}\\n${query || ''}\\n${body ? JSON.stringify(body) : ''}`)\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Event Handler Setup\nDESCRIPTION: Sets up basic event handlers for WebSocket lifecycle events including open, message, error, and close events.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-05-WebSockets-Start/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nws.onopen = msg => console.log(msg)\n\nws.onmessage = msg => console.log(msg)\n\nws.onerror = err => console.error(err)\n\nws.onclose = msg => console.log(msg)\n```\n\n----------------------------------------\n\nTITLE: Complete ETH Details Request with Rendering\nDESCRIPTION: JavaScript event handler for the ETH Details button that fetches product data and renders it to the DOM. Uses the enhanced send method to fetch data and updates the output section with the rendered HTML.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n$reqBtn.addEventListener('click', async () => {\n    let data = await socket.send({\n        url: 'product/find',\n        query: `name=ETH`\n    })\n\n    const div = document.createElement('div')\n    div.innerHTML = renderETH(data)\n    $outlet.firstElementChild \n        ? $outlet.firstElementChild.replaceWith(div)\n        : $outlet.appendChild(div)\n    \n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Connect Function with tvPost\nDESCRIPTION: Implementation of the connect function using tvPost helper to request an access token, with authentication header override.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-1-Simple-Request/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connect = async (data) => {\n\n    const json = await tvPost('/auth/accesstokenrequest', data, false)\n\n    console.log(json)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering DOM Data in JavaScript\nDESCRIPTION: This snippet defines functions to render DOM data. It includes a renderBidOffer function for individual bids/offers and a renderDOM function that structures the entire DOM display, including contract ID, timestamp, bids, and offers.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-09-Realtime-Market-Data-Pt2/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderPriceSize } from './renderPriceSize'\n\nconst renderBidOffer = bid => `\n    <div>\n        <ul>\n            ${renderPriceSize(bid)}\n        </ul>\n    </div>\n`\n\nexport const renderDOM = (symbol, {\n    contractId,\n    timestamp,\n    bids,\n    offers,\n}) => `\n    <section>\n        <span>\n            <h1>${symbol} - ${contractId}</h1>\n            <time datetime=\"${new Date(timestamp)}\"></time>\n        </span>\n        <div class=\"dom-cols\">         \n            <div class=\"dom-col-item\">\n                <h1>Bids</h1>\n                ${bids.map(renderBidOffer).join()}\n            </div>\n            <div class=\"dom-col-item\">\n                <h1>Offers</h1>\n                ${offers.map(renderBidOffer).join()}\n            </div>            \n        <div>\n    </section>\n`\n```\n\n----------------------------------------\n\nTITLE: Regular Chart Implementation\nDESCRIPTION: Helper functions for creating and handling regular (candlestick) charts, including data transformation for OHLC format.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-11-Tick-Charts/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async () => {\n    //...\n    const getRegularChart = () => {\n        return new CanvasJS.StockChart(\"outlet\", {\n            title: {\n                text: `${$symbol.value} Chart`\n            },\n            charts: [\n                {      \n                    data: [\n                    {        \n                        type: \"candlestick\", //Change it to \"spline\", \"area\", \"column\"\n                        dataPoints : all_bars\n                    }\n                ]\n            }]\n        })\n    }\n    \n    const handleRegularChart = chart => { \n        chart.bars.forEach(bar => {\n            const { high, low, open, close, timestamp } = bar\n            all_bars.push({x: new Date(timestamp), y: [open, high, low, close]})\n        })\n    }\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Using TradovateSocket in Application JavaScript\nDESCRIPTION: Demonstrates how to import and instantiate the TradovateSocket module in the main application. This snippet shows how to connect to the Tradovate WebSocket API using the previously obtained access token.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-06-Heartbeats/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TradovateSocket } from './TradovateSocket.js'\n\n//...\n\nconst { accessToken } = await connect(credentials)\n\nconst ws = new TradovateSocket()\nws.connect(WS_DEMO_URL, accessToken)\n```\n\n----------------------------------------\n\nTITLE: Order Type and Action Enums Definition\nDESCRIPTION: Definition of enum-like objects for order types and actions to ensure correct string values are used when placing orders.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-4a-Place-An-Order/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DEMO_URL } from './env'\nimport { getAccessToken } from './storage'\n\nexport const ORDER_TYPE = {\n    Limit:              'Limit',\n    MIT:                'MIT',\n    Market:             'Market',\n    QTS:                'QTS',\n    Stop:               'Stop',\n    StopLimit:          'StopLimit',\n    TrailingStop:       'TralingStop',\n    TrailingStopLimit:  'TrailingStopLimit'\n}\n\nexport const ORDER_ACTION = {\n    Buy:                'Buy',\n    Sell:               'Sell'\n}\n\nexport const placeOrder = async body => {\n    //???\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation of Interactive Stock Chart with CanvasJS\nDESCRIPTION: Full JavaScript implementation for fetching chart data and rendering it with CanvasJS. Handles user input parameters, WebSocket subscription, data transformation for OHLC display, and chart rendering.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-10-Chart-Data/README.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n$getChart.addEventListener('click', async () => { \n    all_bars = []\n\n    if(unsubscribe) unsubscribe()\n\n    unsubscribe = await socket.subscribe({\n        url: 'md/getchart',\n        body: { \n            symbol: $symbol.value,\n            chartDescription: {\n                underlyingType: $type.value,\n                elementSize: parseInt($elemSize.value),\n                elementSizeUnit: 'UnderlyingUnits',\n                withHistogram: false,\n            },\n            timeRange: {\n                asMuchAsElements: parseInt($nElements.value)\n            }\n        },\n        subscription: chart => { \n\n            if(chart.eoh) {\n                console.log('end of history')\n                return\n            }\n            \n            let stockChart = new CanvasJS.StockChart(\"outlet\", {\n                title: {\n                    text: `${$symbol.value} Chart`\n                },\n                charts: [\n                    {      \n                        data: [\n                        {        \n                            type: \"candlestick\", //Change it to \"spline\", \"area\", \"column\"\n                            dataPoints : all_bars\n                        }\n                    ]\n                }],\n                navigator: {\n                    slider: {\n                        minimum: new Date('2020 01 01'),\n                        maximum: new Date()\n                    }\n                }\n            }); \n            chart.bars.forEach(bar => {\n                const { high, low, open, close, timestamp } = bar\n                all_bars.push({x: new Date(timestamp), y: [open, high, low, close]})\n            })\n\n            stockChart.render()\n        }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing HandleRetry Function for Time Penalty in JavaScript\nDESCRIPTION: This snippet defines the handleRetry function to manage time penalty responses. It checks for captcha, logs appropriate messages, waits for the specified time, and retries the connection with the provided ticket.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-3-Time-Penalty/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleRetry = async (data, json) => {\n    const ticket    = json['p-ticket'],\n          time      = json['p-time'],\n          captcha   = json['p-captcha']\n\n    if(captcha) {\n        console.error('Captcha present, cannot retry auth request via third party application. Please try again in an hour.')\n        return\n    }\n\n    console.log(`Time Penalty present. Retrying operation in ${time}s`)\n\n    await waitForMs(time * 1000) \n    await connect({ ...data, 'p-ticket': ticket })   \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Connection and Authorization in JavaScript\nDESCRIPTION: Adds connection functionality to the TradovateSocket prototype with proper authorization handling. The connect method initializes the WebSocket and sets up event listeners to handle the authorization flow when the connection is established.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-06-Heartbeats/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTradovateSocket.prototype.connect = async function(url, token) {\n    console.log('connecting...')\n    const self = this\n\n    return new Promise((res, rej) => {\n        this.listeningURL = url\n        this.ws = new WebSocket(url)\n        //auth only\n        this.ws.addEventListener('message', function onConnect(msg) {\n            //we need 'self' to preserve outer 'this' value in event callbacks\n            const [T, _] = prepareMessage(msg.data)\n            if(T === 'o') {\n                self.send({\n                    url: 'authorize',\n                    body: token,\n                })\n            }\n        })\n    })\n}\n\nfunction prepareMessage(raw) {\n    const T = raw.slice(0, 1)\n    const data = raw.length > 1 ? JSON.parse(raw.slice(1)) : []\n\n    return [T, data]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up DOM References for Chart Controls in JavaScript\nDESCRIPTION: JavaScript code to obtain references to the HTML elements needed for chart configuration. Gets references to buttons, input fields, and dropdown selectors for chart parameter configuration.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-10-Chart-Data/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async () => {\n  //...\n    const $getChart     = document.getElementById('get-chart-btn')\n    const $symbol       = document.getElementById('symbol')\n    const $type         = document.getElementById('type')\n    const $nElements    = document.getElementById('n-elements')\n    const $elemSize     = document.getElementById('elem-size')\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced WebSocket Request with Promise Implementation\nDESCRIPTION: JavaScript implementation of an improved WebSocket send method using Promises. Handles response tracking using request IDs, provides callback options for success and failure cases, and properly cleans up event listeners.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nTradovateSocket.prototype.send = async function({url, query, body, onResponse, onReject}) {\n    const self = this\n\n    return new Promise((res, rej) => {\n        const id = this.increment()\n        this.ws.addEventListener('message', function onEvent(msg) {\n            const [_, data] = prepareMessage(msg.data)        \n            data.forEach(item => {\n                if(item.s === 200 && item.i === id) {  \n                    if(onResponse) {\n                        onResponse(item)\n                    }\n                    self.ws.removeEventListener('message', onEvent)\n                    res(item)\n                } else if(item.s && item.s !== 200 && item.i && item.i === id) {\n                    console.log(item)\n                    self.ws.removeEventListener('message', onEvent)\n                    if(onReject) onReject()\n                    rej(`\\nFAILED:\\n\\toperation '${url}'\\n\\tquery ${query ? JSON.stringify(query, null, 2) : ''}\\n\\tbody ${body ? JSON.stringify(body, null, 2) : ''}\\n\\treason '${JSON.stringify(item?.d, null, 2) || 'unknown'}'`)\n                } \n            })\n        })\n        this.ws.send(`${url}\\n${id}\\n${query || ''}\\n${body ? JSON.stringify(body) : ''}`)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DOM Elements for WebSocket Client\nDESCRIPTION: JavaScript code to initialize HTML elements for the WebSocket client interface. Retrieves references to DOM elements that will be used in the application.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//HTML elements\nconst $outlet       = document.getElementById('outlet')\nconst $reqBtn       = document.getElementById('request-btn')\nconst $connBtn      = document.getElementById('connect-btn')\nconst $statusInd    = document.getElementById('status')\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Storage and Validation for Tradovate API Authentication\nDESCRIPTION: This code demonstrates how to enhance the connect function to check for existing valid tokens before making a new request. It uses sessionStorage through helper functions to persist tokens across page refreshes while maintaining security by clearing them at the end of the session.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-2-Storing-A-Token/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//connect.js\n\nimport { tvPost } from './services'\nimport { getAccessToken, setAccessToken, tokenIsValid } from './storage'\n\nexport const connect = async (data) => {\n    const { token, expiration } = getAccessToken()\n    if(token && tokenIsValid(expiration)) {\n        console.log('Already have an access token. Using existing token.')\n        return\n    }\n    const { accessToken, expirationTime } = await tvPost('/auth/accesstokenrequest', data, false)\n\n    setAccessToken(accessToken, expirationTime)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DOM Element References in JavaScript\nDESCRIPTION: This snippet shows how to add references to the new DOM-related HTML elements in the JavaScript file. It includes selectors for the new buttons and outlet section.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-09-Realtime-Market-Data-Pt2/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//...\n    const $watchDom     = document.getElementById('subscribe-dom')\n    const $unwatchDom   = document.getElementById('unsubscribe-dom')\n    const $outlet2      = document.getElementById('outlet-2')\n    const $sym1         = document.getElementById('sym1')\n    const $sym2         = document.getElementById('sym2')\n//...\n```\n\n----------------------------------------\n\nTITLE: Setting Up UI for Order Placement in JavaScript\nDESCRIPTION: This snippet sets up the user interface for placing buy and sell orders. It creates a click event handler for buy and sell buttons, retrieves account information, and places market orders using the Tradovate API.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-12-Calculating-Open-PL/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst setupUI = () => {\n\n    const setupUI = (socket) => {\n\n    const onClick = (buyOrSell = 'Buy') => async () => {\n        //first available account\n        const { name, id } = getAvailableAccounts()[0]\n\n        if(!$symbol.value || !$qty.value) return\n\n        let { orderId } = await tvPost('/order/placeOrder', {\n            action: buyOrSell,\n            symbol: $symbol.value,\n            orderQty: parseInt($qty.value, 10),\n            orderType: 'Market',\n            accountName: name,\n            accountId: id\n        })\n        console.log(orderId)\n       \n    }\n\n    $buyBtn.addEventListener('click', onClick('Buy'))\n    $sellBtn.addEventListener('click', onClick('Sell'))\n}\n```\n\n----------------------------------------\n\nTITLE: Device ID Generation for 2FA Implementation\nDESCRIPTION: Implementation of device ID generation for 2FA authentication, using device-uuid package with different handling for mobile and browser environments.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-1-Simple-Request/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"device-uuid\"\nimport { isMobile } from './utils/isMobile'\nimport { setDeviceId } from './storage.js'\nimport { credentials } from '../../../tutorialsCredentials.js'\n\nlet DEVICE_ID\nif(!isMobile()) {\n    const device = getDeviceId()\n    DEVICE_ID = device || new DeviceUUID().get()\n    setDeviceId(DEVICE_ID)\n} else {\n    DEVICE_ID = new DeviceUUID().get()\n}\n\nconst main = async () => {\n    \n    await connect(credentials)\n    \n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Connection Setup in JavaScript\nDESCRIPTION: Initializes a new WebSocket connection using the demo URL imported from a configuration file.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-05-WebSockets-Start/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URLs } from '../../../tutorialsURLs.js'\nconst { WS_DEMO_URL } = URLs\n\n//...\n\nconst ws = new WebSocket(WS_DEMO_URL)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for WebSocket Client Interface\nDESCRIPTION: HTML structure for the WebSocket client interface with CSS styling. Includes buttons for connecting to the WebSocket and requesting ETH details, along with a status indicator and output section.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset='utf-8'>\n    <meta name='title' content='Project meta title'>\n    <meta name='description' content='Project description'>\n    <title>Tradovate API JS Example</title>\n    <base href=\"./\" />\n    <style>\n      #status {\n        height: 1em;\n        width: 1em;\n        border-radius: 50%;\n        background-color: silver;\n      }\n\n      span {\n        display: flex;\n        flex-direction: row;\n        margin: auto;\n        align-items: center;\n        flex-wrap: wrap;\n      }\n\n      div { \n        margin: 1em;\n        border-left: .1em solid black;\n      }\n\n      button {\n        margin: 1em;\n      }\n    </style>\n  </head>\n  <body>\n    <span>\n      <button id=\"request-btn\">ETH Details</button>\n      <button id=\"connect-btn\">Connect</button>\n      <div id=\"status\"></div>\n    </span>\n    <section id=\"outlet\">\n      <!-- stuff will get rendered here -->\n    </section>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing API Request Handler in JavaScript\nDESCRIPTION: Sets up an event listener for the account list button that makes an API request to fetch account data and handles the response using the handleAccountList function.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-4-Test-Request/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async () => {\n    connect({...})\n\n    const $accountListBtn = document.querySelector('#get-acct-btn')\n\n    $accountListBtn.addEventListener('click', async () => {\n        let accounts = await tvGet('/account/list')\n        handleAccountList(accounts)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Module Template\nDESCRIPTION: Initial template for the connect.js file that imports URLs and defines an empty connect function.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-0-Access-Start/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URLs } from '../../../tutorialsURLs'\n\nconst { DEMO_URL } = URLs\n\nexport const connect = () => { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Subscribing to DOM Events in JavaScript\nDESCRIPTION: This snippet shows how to connect to the Tradovate WebSocket API and subscribe to DOM events for a specific symbol. It uses the TradovateSocket class to establish a connection and subscribe to the 'md/subscribedom' endpoint.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-09-Realtime-Market-Data-Pt2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URLs } from '../../../tutorialsURLs'\n\nconst { MD_URL } = URLs\n\nconst main = async () => {\n    const { accessToken } = await connect(credentials)\n    \n    const mySocket = new TradovateSocket({debugLabel: 'Market Data API'})\n    await mySocket.connect(MD_URL, accessToken)\n\n    const unsubscribe = await mySocket.subscribe({\n        url: 'md/subscribedom',\n        body: { symbol: 'MNQZ1' },\n        subscription: (item) => {\n            //...\n        }\n    })\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Credentials Configuration Template\nDESCRIPTION: Template for the credentials configuration file where users need to input their API credentials.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-0-Access-Start/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const credentials = {\n    name:       \"Your credentials here\",\n    password:   \"Your credentials here\",\n    appId:      \"Sample App\",\n    appVersion: \"1.0\",\n    cid:        0,\n    sec:        \"Your API secret here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Chart Request Parameter Structure for Tradovate WebSocket API\nDESCRIPTION: The structure of parameters required for requesting chart data via the 'md/getChart' endpoint. Includes symbol identification, chart description settings, and time range filtering options.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-10-Chart-Data/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"symbol\":\"ESM7\" | 123456,\n  \"chartDescription\": {\n    \"underlyingType\":\"MinuteBar\", // Available values: Tick, DailyBar, MinuteBar, Custom, DOM\n    \"elementSize\":15,\n    \"elementSizeUnit\":\"UnderlyingUnits\", // Available values: Volume, Range, UnderlyingUnits, Renko, MomentumRange, PointAndFigure, OFARange\n    \"withHistogram\": true | false\n  },\n  \"timeRange\": {\n    // All fields in \"timeRange\" are optional, but at least any one is required\n    \"closestTimestamp\":\"2017-04-13T11:33Z\",\n    \"closestTickId\":123,\n    \"asFarAsTimestamp\":\"2017-04-13T11:33Z\",\n    \"asMuchAsElements\":66\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Calling Connect Function\nDESCRIPTION: Example of how to import and call the connect function from app.js.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-0-Access-Start/README.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connect } from './connect'\n\nconnect()\n```\n\n----------------------------------------\n\nTITLE: Tick Chart Implementation\nDESCRIPTION: Helper functions for creating and handling tick charts, including data transformation and sorting for proper visualization.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-11-Tick-Charts/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst getTickChart = () => {\n        $elemSize.value = 1\n        return new CanvasJS.StockChart(\"outlet\", {\n            title: {\n                text: `${$symbol.value} Chart`\n            },\n            charts: [\n                {      \n                    data: [\n                    {        \n                        type: \"line\", \n                        dataPoints : all_bars\n                    }\n                ]\n            }]\n        })\n    }\n\n    const handleTickChart = ({bt: timestamp, ts: tickSize, bp: basePrice, tks, id}) => {\n        tks.forEach(({t, p: price, s, b , a, bs, as}) => {\n            all_bars.push({x: new Date(timestamp +  t), y: (basePrice + price) * tickSize})\n        })\n\n        all_bars.sort((a, b) => new Date(a.x) - new Date(b.x))\n\n        _chart.render()\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting a Tradovate API Example Project\nDESCRIPTION: Command to start a Tradovate API example project after installation. This will run the development server that can be accessed via a web browser at localhost:8080.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> yarn start\n```\n\n----------------------------------------\n\nTITLE: Modifying Connect Function to Handle Time Penalty in JavaScript\nDESCRIPTION: This snippet shows how to modify the connect function to handle time penalty responses from the Tradovate API. It checks for an existing valid token, makes an auth request, and handles retry if a time penalty is received.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-3-Time-Penalty/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connect = async (data) => {\n    const { token, expiration } = getAccessToken()\n    if(token && tokenIsValid(expiration)) {\n        console.log('Already have an access token. Using existing token.')\n        return\n    }\n\n    const authResponse = await tvPost('/auth/accesstokenrequest', data, false)\n\n    //added branch\n    if(authResponse['p-ticket']) {\n        await handleRetry(data, authResponse)\n    }\n\n    const { accessToken, expirationTime, } = await tvPost('/auth/accesstokenrequest', data, false)\n\n    setAccessToken(accessToken, expirationTime)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn for Tradovate API Examples\nDESCRIPTION: Command to install the required dependencies for a Tradovate API example project using Yarn package manager.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> yarn install\n```\n\n----------------------------------------\n\nTITLE: Market Data Message Schema - JavaScript\nDESCRIPTION: Defines the expected response schema for market data messages including quotes with various price and size entries like Bid, Offer, Trade, etc.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-08-Realtime-Market-Data/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"e\":\"md\",\n  \"d\": {\n    \"quotes\": [\n      {\n        \"timestamp\":\"2017-04-13T04:59:06.588Z\",\n        \"contractId\":123456,\n        \"entries\": {\n          \"Bid\": { \"price\":18405, \"size\":7 },\n          \"TotalTradeVolume\": { \"price\":18405, \"size\":7 },\n          \"Offer\": { \"price\":18410, \"size\":12 },\n          \"LowPrice\": { \"price\":18405, \"size\":7 },\n          \"Trade\": { \"price\":18405, \"size\":2 },\n          \"OpenInterest\": { \"price\":18405, \"size\":7 },\n          \"OpeningPrice\": { \"price\":18405, \"size\":7 },\n          \"HighPrice\": { \"price\":18405, \"size\":7 },\n          \"SettlementPrice\": { \"price\":18405, \"size\":7 },\n          \"EmptyBook\": { \"price\":18405, \"size\":7 }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Histogram Data Schema in JavaScript\nDESCRIPTION: This snippet shows the expected data schema for histogram events received from the Tradovate WebSocket API. It includes contract ID, timestamp, trade date, base price, and histogram items.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-09-Realtime-Market-Data-Pt2/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"e\":\"md\",\n  \"d\": {\n    \"histograms\": [ //each of these individual array objects is what `subscribe` will process.\n      {\n        \"contractId\":123456, // ID of the histogram contract\n        \"timestamp\":\"2017-04-13T11:33:57.412Z\",\n        \"tradeDate\": {\n          \"year\":2017,\n          \"month\":4,\n          \"day\":13\n        },\n        \"base\":2338.75,\n        \"items\": { // Actual number of histogram items may depend on data\n          \"-14\":5906,\n          ...\n          \"2\":1234,\n        },\n        \"refresh\":false\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tick Chart Response Data Structure\nDESCRIPTION: Example response structure for a Tick Chart request showing the format of chart data packets including base price, timestamp, and tick information.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-11-Tick-Charts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"charts\": [                     // Array of packets.\n        {\n            \"id\": 16335,            // Subscription ID, the same as historical/real-time subscription IDs from request response.\n            \"s\": \"db\",              // Source of packet data.\n            \"td\": 20190718,         // Trade date YYYYMMDD.\n            \"bp\": 11917,            // Base price of the packet (integer number of contract tick sizes).\n                                    // Tick prices are calculated as relative from this one.\n            \"bt\": 1563421179735,    // Base timestamp of the packet.\n                                    // Tick timestamps are calculated as relative from this value.\n            \"ts\": 0.25,             // Tick size of the contract for which the tick chart is requested.\n            \"tks\": [                // Array of ticks of this packet.\n                {\n                    \"t\": 0,         // Tick relative timestamp.\n                                    // Actual tick timestamp is packet.bt + tick.t\n                    \"p\": 0,         // Tick relative price (in contract tick sizes).\n                                    // Actual tick price is packet.bp + tick.p\n                    \"s\": 3,         // Tick size (seems more proper name should be tick volume).\n                                    // Please don't confuse with contract tick size (packet.ts).\n                    \"b\": -1,        // Bid relative price (optional).\n                                    // Actual bid price is packet.bp + tick.b\n                    \"a\": 0,         // Ask relative price (optional).\n                                    // Actual ask price is packet.bp + tick.a\n                    \"bs\": 122,      // Bid size (optional).\n                    \"as\": 28,       // Ask size (optional).\n                    \"id\": 11768401  // Tick ID\n                },\n                ...\n            ]\n        },\n        // Multiple packets are possible...\n        {\n            \"id\": 16335,\n            eoh: true               // End of history flag.\n                                    // If the request time range assumes historical data,\n                                    // this flag indicates that historical ticks are loaded and\n                                    // further packets will contain real-time ticks.\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: ETH Product Data Rendering Template\nDESCRIPTION: JavaScript template function for rendering ETH product data. Takes a product object and creates HTML markup to display product details in a structured format.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const renderETH = ({\n    allowProviderContractInfo,\n    contractGroupId,\n    currencyId,\n    description,\n    exchangeChannelId,\n    exchangeId,\n    id,\n    isMicro,\n    marketDataSource,\n    name,\n    priceFormat,\n    priceFormatType,\n    productType,\n    status,\n    tickSize,\n    valuePerPoint,\n}) => {\n    return `\n        <section>\n            <h1>${name}</h1>\n            <p>currency ID: ${currencyId == 1 ? '$' : currencyId}</p>\n            <h3>info:</h2>\n            <span>\n                <div>allowProviderContractInfo: ${allowProviderContractInfo}</div>\n                <div>contractGroupId: ${contractGroupId}</div>\n                <div>exchangeChannelId: ${exchangeChannelId}</div>\n                <div>exchangeId: ${exchangeId}</div>\n                <div>id: ${id}</div>\n                <div>isMicro: ${isMicro}</div>\n                <div>marketDataSource: ${marketDataSource}</div>\n                <div>priceFormat: ${priceFormat}</div>\n                <div>priceFormatType: ${priceFormatType}</div>\n                <div>productType: ${productType}</div>\n                <div>status: ${status}</div>\n                <div>tickSize: ${tickSize}</div>\n                <div>valuePerPoint: ${valuePerPoint}</div>\n            </span>\n            <h3>Description</h3>\n            <p>${description}</p>\n        </section>\n    `\n}\n```\n\n----------------------------------------\n\nTITLE: Chart Bar Data Structure from Tradovate API\nDESCRIPTION: The structure of the 'bars' field in chart data responses from the Tradovate API. Contains OHLC (Open-High-Low-Close) values, volume information, and tick data for rendering charts.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-10-Chart-Data/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"bars\": [ // \"bars\" may contain multiple bar objects\n    {\n    \"timestamp\":\"2017-04-13T11:00:00.000Z\",\n    \"open\":2334.25,\n    \"high\":2334.5,\n    \"low\":2333,\n    \"close\":2333.75,\n    \"upVolume\":4712,\n    \"downVolume\":201,\n    \"upTicks\":1333,\n    \"downTicks\":82,\n    \"bidVolume\":2857,\n    \"offerVolume\":2056\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Placing Orders with tvPost Helper Function\nDESCRIPTION: Example of using tvPost helper function to place a market order, demonstrating how to structure order parameters and account specifications.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-1-Simple-Request/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAcct = getAvailableAccounts()[0]\n\nconst jsonResponseC = await tvPost('/order/placeorder', {\n    accountSpec: myAcct.name,\n    accountId: myAcct.id,\n    action: 'Buy',\n    symbol: 'MNQM1',\n    orderQty: 2,\n    orderType: 'Market',\n    isAutomated: true\n})\n```\n\n----------------------------------------\n\nTITLE: DOM Data Schema in JavaScript\nDESCRIPTION: This snippet illustrates the expected data schema for DOM events received from the Tradovate WebSocket API. It includes contract ID, timestamp, and arrays of bids and offers with their respective prices and sizes.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-09-Realtime-Market-Data-Pt2/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"e\":\"md\",\n  \"d\": {\n    \"doms\": [ // each individual dom array-item is what subscribe will process\n      {\n        \"contractId\":123456, // ID of the DOM contract\n        \"timestamp\":\"2017-04-13T11:33:57.488Z\",\n        \"bids\": [ // Actual depth of \"bids\" may varies depending on available data\n          {\"price\":2335.25,\"size\":33},\n          ...\n          {\"price\":2333,\"size\":758}\n        ],\n        \"offers\": [ // Actual depth of \"offers\" may varies depending on available data\n          {\"price\":2335.5,\"size\":255},\n          ...\n          {\"price\":2337.75,\"size\":466}\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Account List Response Handler in JavaScript\nDESCRIPTION: Processes the account data received from the API and renders it as HTML. Extracts account details and creates a template to display information like account name, type, status, and various IDs.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-4-Test-Request/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const handleAccountList = (data) => {\n    const $outlet = document.querySelector('#outlet')\n    \n    data.forEach(item => {\n        const { \n            accountType,\n            active,\n            archived,\n            autoLiqProfileId,\n            clearingHouseId,\n            id,\n            legalStatus,\n            marginAccountType,\n            name,\n            riskCategoryId,\n            userId,\n        } = item\n\n        const templateHtml = `\n            <h1>Name: ${name}</h1>\n            <h2>Account Type: ${accountType}</h2>\n            <section>\n                <div>Active: ${active ? 'Yes' : 'Inactive'}</div>\n                <div>ID: ${id}</div>\n                <div>UserID: ${userId}</div>\n                <div>legalStatus: ${legalStatus}</div>\n                <div>marginAccountType: ${marginAccountType}</div>\n                <div>riskCategory: ${riskCategoryId}</div>\n                <div>autoLiqProfileId: ${autoLiqProfileId}</div>\n                <div>clearingHouseId: ${clearingHouseId}</div>\n                <div>archived: ${archived}</div>\n            </section>\n        `\n\n        const container = document.createElement('div')\n        container.innerHTML = templateHtml\n\n        if($outlet.firstElementChild) {            \n            $outlet.firstElementChild.replaceWith(container)\n        } else {\n            $outlet.appendChild(container)\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Requests Format Examples\nDESCRIPTION: Examples of three different types of WebSocket requests: a request with no query or body, a request with a query parameter, and a request with a body. Shows the format required for WebSocket communication with the Tradovate API.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nexecutionReport/list\n4\n\n```\n\n----------------------------------------\n\nTITLE: Comprehensive WebSocket Message Handler\nDESCRIPTION: Implements a complete message handling system with type discrimination for different types of WebSocket frames (open, heartbeat, array, close).\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-05-WebSockets-Start/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nws.onmessage = msg => {\n\n    const { data } = msg\n    const type = data.slice(0,1)\n\n    switch(type) {\n        case 'o':\n            console.log('Opening Socket Connection...')\n            const { token } = getAccessToken()\n            ws.send(`authorize\\n0\\n\\n${token}`)\n            break\n        case 'h':\n            console.log('received server heartbeat...')\n            break\n        case 'a':\n            const data = JSON.parse(msg.data.slice(1))\n            console.log(data)\n            break\n        case 'c':\n            console.log('closing websocket')\n            break\n        default:\n            console.error('Unexpected response token received:')\n            console.error(msg)\n            break;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Data Array in JavaScript\nDESCRIPTION: JavaScript code that initializes an empty array to store chart data points. This array will be populated with bar data from the Tradovate API response.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-10-Chart-Data/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async () => {\n  let all_bars = []\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Request with JSON Body\nDESCRIPTION: Example of a WebSocket request that includes a JSON body. Shows how to format a request with URL, ID parameter, and a JSON object in the body.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\ncontract/rollcontract\n33\n\n{\"name\":\"YMZ6\",\"forward\":true,\"ifExpired\":true}\n```\n\n----------------------------------------\n\nTITLE: Market Data UI Layout - HTML\nDESCRIPTION: HTML structure for displaying market data with controls for connection management and quote subscription. Includes basic styling for status indicators and data display.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-08-Realtime-Market-Data/README.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset='utf-8'>\n    <meta name='title' content='Project meta title'>\n    <meta name='description' content='Project description'>\n    <title>Tradovate API JS Example</title>\n    <base href=\"./\" />\n    <style>\n      #status {\n        transition: background-color .33s ease-in;\n        height: 1em;\n        width: 1em;\n        border-radius: 50%;\n        background-color: silver;\n      }\n\n      span {\n        display: flex;\n        flex-direction: row;\n        margin: auto;\n        align-items: center;\n        flex-wrap: wrap;\n      }\n\n      div { margin: 1em; }\n\n      section span div {\n        height: 10em;\n        width: 14.5em;        \n        padding: 0 1em;\n        box-shadow: 0 .2em .5em -.33em black;        \n        border-radius: 4px;\n      }\n\n      button {\n        margin: 1em;\n      }\n    </style>\n  </head>\n  <body>\n    <span>\n      <button id=\"request-btn\">Watch</button>\n      <button id=\"unsubscribe-btn\">Unwatch</button>\n      <input id=\"symbol\" type=\"text\" placeholder=\"BTCM1\" />\n      <button id=\"connect-btn\">Connect</button>\n      <button id=\"disconnect-btn\">Disconnect</button>\n      <div id=\"status\"></div>\n    </span>\n    <section id=\"outlet\">\n      <!-- stuff will get rendered here -->\n    </section>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Request Implementation\nDESCRIPTION: JavaScript code for sending a WebSocket request to fetch ETH product details. Uses the socket's send method with URL and query parameters to request product information.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n$reqBtn.addEventListener('click', () => {\n    socket.send({\n        url: 'product/find',\n        query: 'name=ETH'\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Controls for Chart Configuration\nDESCRIPTION: HTML markup defining user interface controls for configuring chart parameters. Includes controls for chart type, number of elements, element size, and symbol selection.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-10-Chart-Data/README.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n\n    <span>\n      <button id=\"get-chart-btn\">Get Chart</button>\n\n      <label for=\"type\">TYPE\n        <select name=\"type\" id=\"type\">  \n          <option value=\"MinuteBar\">MinuteBar</option> \n          <option value=\"Tick\">Tick</option>      \n          <option value=\"DailyBar\">DailyBar</option>      \n        </select>\n      </label>\n\n      <label for=\"n-elements\">#ELEMS\n        <input name=\"n-elements\" id=\"n-elements\" type=\"number\" min=\"1\" value=\"100\" max=\"500\"  />\n      </label>\n\n      <label for=\"elem-size\">ELEM SIZE\n        <input name=\"elem-size\" id=\"elem-size\" type=\"number\" min=\"1\" value=\"30\" max=\"720\"  />\n      </label>\n\n      <div id=\"status\"></div>\n    </span>\n\n\n    <span>\n      <input id=\"symbol\" type=\"text\" placeholder=\"BTCJ1\"/>\n      <h1>Chart</h1>\n    </span>\n\n    <main id='outlet'>\n      \n    </main>\n</body>\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Status Indicator Implementation\nDESCRIPTION: JavaScript code that adds a click event listener to the connect button and updates the status indicator color based on the WebSocket connection state. Provides visual feedback about the connection status.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$connBtn.addEventListener('click', () => {\n    socket.connect()\n    socket.ws.addEventListener('message', msg => {\n        $statusInd.style.backgroundColor = \n            socket.ws.readyState == 0 ? 'gold'      //pending\n        :   socket.ws.readyState == 1 ? 'green'     //OK\n        :   socket.ws.readyState == 2 ? 'orange'    //closing\n        :   socket.ws.readyState == 3 ? 'red'       //closed\n        :   /*else*/                    'silver'    //unknown|default           \n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Chart Initialization Setup\nDESCRIPTION: Initial setup for the chart implementation, declaring main variables for tracking bars and chart instances.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-11-Tick-Charts/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async () => {\n    let all_bars = []\n    let subscription\n    let _chart\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Request with Query Parameter\nDESCRIPTION: Example of a WebSocket request that includes a query parameter. The example shows the proper formatting with URL, ID parameter, and query parameter on separate lines.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-07-Making-Requests/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\ntradingPermission/ldeps\n8\nmasterids=1\n\n```\n\n----------------------------------------\n\nTITLE: Making GET Requests with tvGet Helper Function\nDESCRIPTION: Examples of using the tvGet helper function to make GET requests to Tradovate's API endpoints, with and without query parameters.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-1-Simple-Request/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//no parameters\nconst jsonResponseA = await tvGet('/account/list')\n\n//parameter object, URL will become '/contract/item?id=2287764'\nconst jsonResponseB = await tvGet('/contract/item', { id: 2287764 })\n```\n\n----------------------------------------\n\nTITLE: Updated HTML Structure for DOM Rendering\nDESCRIPTION: This HTML snippet shows the updated structure to accommodate DOM rendering. It includes new buttons for watching and unwatching DOM, as well as a new outlet section for rendering DOM data.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-09-Realtime-Market-Data-Pt2/README.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset='utf-8'>\n    <meta name='title' content='Project meta title'>\n    <meta name='description' content='Project description'>\n    <title>Tradovate API JS Example</title>\n    <base href=\"./\" />\n    <style>\n      <!-- ... -->\n    </style>\n  </head>\n  <body>\n    <span>\n      <button id=\"request-btn\">Watch</button>\n      <button id=\"unsubscribe-btn\">Unwatch</button>\n      <button id=\"connect-btn\">Connect</button>\n      <button id=\"disconnect-btn\">Disconnect</button>\n      <div id=\"status\"></div>\n    </span>\n    <section id=\"outlet\">\n      <!-- stuff will get rendered here -->\n    </section>\n\n    <!-- new stuff here -->\n    <span>\n      <button id=\"subscribe-dom\">Watch DOM</button>\n      <button id=\"unsubscribe-dom\">Unwatch DOM</button>\n    </span>\n    <section id=\"outlet-2\">\n\n    </section>\n  </body>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding CanvasJS Chart Library to HTML\nDESCRIPTION: HTML script tag for including the CanvasJS stock chart library in the project. Required for rendering interactive financial charts based on the data retrieved from the Tradovate API.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-10-Chart-Data/README.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  ...\n  <script type=\"text/javascript\" src=\"https://canvasjs.com/assets/script/canvasjs.stock.min.js\"></script>\n  ...\n</head>\n```\n\n----------------------------------------\n\nTITLE: WebSocket Frame Sending Example\nDESCRIPTION: Demonstrates how to send a frame message through the WebSocket connection.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-05-WebSockets-Start/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nws.send(`a[\"my_json_message\"]`)\n```\n\n----------------------------------------\n\nTITLE: Basic Fetch Function for API Access\nDESCRIPTION: Initial implementation of the connect function using fetch to access the access token endpoint.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-0-Access-Start/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst connect = () => {\n    fetch(DEMO_URL + '/auth/accesstokenrequest')\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Response Handling to Fetch\nDESCRIPTION: Enhanced connect function with a then handler to process the API response.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-0-Access-Start/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst connect = () => {\n    fetch(DEMO_URL + '/auth/accesstokenrequest')\n        .then(data => console.log(data))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install the project dependencies using the Yarn package manager.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-0-Access-Start/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> yarn install\n```\n\n----------------------------------------\n\nTITLE: Event Listener Alternative Setup\nDESCRIPTION: Shows an alternative approach to handling WebSocket events using addEventListener.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-05-WebSockets-Start/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nws.addEventListener('message', myCallback)\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Overview of the project file structure showing the organization of the example project files and directories.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-0-Access-Start/README.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n|-EX-0-Access-Start\n|---src\n|-----app.js\n|-----connect.js\n|-----services.js\n|---babel.config.json\n|---index.html\n|---package.json\n|---webpack.config.js\n...\n|-\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links\nDESCRIPTION: Navigation links formatted in Markdown syntax pointing to previous and next sections of the WebSocket tutorial.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/WebSockets/EX-08-Realtime-Market-Data/README.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### [< Prev Section](https://github.com/tradovate/example-api-js/tree/main/tutorial/WebSockets/EX-07-Making-Requests) [Next Section >](https://github.com/tradovate/example-api-js/tree/main/tutorial/WebSockets/EX-09-Realtime-Market-Data-Pt2)\n```\n\n----------------------------------------\n\nTITLE: Importing URLs from External File\nDESCRIPTION: Code snippet showing how to import URL configurations from an external file.\nSOURCE: https://github.com/tradovate/example-api-js/blob/main/tutorial/Access/EX-0-Access-Start/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URLs } from '../../../tutorialsURLs'\n```"
  }
]