[
  {
    "owner": "charmbracelet",
    "repo": "lipgloss",
    "content": "TITLE: Initializing and Rendering Styles with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to initialize a style using `lipgloss.NewStyle()`, set properties such as bold, foreground, background, padding, and width, and then render text using the style. It showcases the basic usage of the Lip Gloss library for terminal styling.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/charmbracelet/lipgloss\"\n\nvar style = lipgloss.NewStyle().\n    Bold(true).\n    Foreground(lipgloss.Color(\"#FAFAFA\")).\n    Background(lipgloss.Color(\"#7D56F4\")).\n    PaddingTop(2).\n    PaddingLeft(4).\n    Width(22)\n\nfmt.Println(style.Render(\"Hello, kitty\"))\n```\n\n----------------------------------------\n\nTITLE: Block-Level Formatting (Padding) with Lip Gloss in Go\nDESCRIPTION: This snippet shows how to use Lip Gloss to apply padding to text blocks. It demonstrates setting padding on all four sides (top, right, bottom, and left).\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Padding\nvar style = lipgloss.NewStyle().\n    PaddingTop(2).\n    PaddingRight(4).\n    PaddingBottom(2).\n    PaddingLeft(4)\n```\n\n----------------------------------------\n\nTITLE: Block-Level Formatting (Margins) with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to use Lip Gloss to apply margins to text blocks. It shows setting margins on all four sides (top, right, bottom, and left).\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Margins\nvar style = lipgloss.NewStyle().\n    MarginTop(2).\n    MarginRight(4).\n    MarginBottom(2).\n    MarginLeft(4)\n```\n\n----------------------------------------\n\nTITLE: Shorthand Padding with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates the shorthand syntax for setting padding using Lip Gloss, similar to CSS.  It illustrates setting padding on all sides, top/bottom and left/right, and individual sides.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// 2 cells on all sides\nlipgloss.NewStyle().Padding(2)\n\n// 2 cells on the top and bottom, 4 cells on the left and right\nlipgloss.NewStyle().Margin(2, 4)\n\n// 1 cell on the top, 4 cells on the sides, 2 cells on the bottom\nlipgloss.NewStyle().Padding(1, 4, 2)\n\n// Clockwise, starting from the top: 2 cells on the top, 4 on the right, 3 on\n// the bottom, and 1 on the left\nlipgloss.NewStyle().Margin(2, 4, 3, 1)\n```\n\n----------------------------------------\n\nTITLE: Adding Borders with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to add borders to a styled text block using Lip Gloss. It shows how to customize the border style and foreground color.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Add a purple, rectangular border\nvar style = lipgloss.NewStyle().\n    BorderStyle(lipgloss.NormalBorder()).\n    BorderForeground(lipgloss.Color(\"63\"))\n\n// Set a rounded, yellow-on-purple border to the top and left\nvar anotherStyle = lipgloss.NewStyle().\n    BorderStyle(lipgloss.RoundedBorder()).\n    BorderForeground(lipgloss.Color(\"228\")).\n    BorderBackground(lipgloss.Color(\"63\")).\n    BorderTop(true).\n    BorderLeft(true)\n\n// Make your own border\nvar myCuteBorder = lipgloss.Border{\n    Top:         \"._.:*:\",\n    Bottom:      \"._.:*:\",\n    Left:        \"|*\",\n    Right:       \"|*\",\n    TopLeft:     \"*\",\n    TopRight:    \"*\",\n    BottomLeft:  \"*\",\n    BottomRight: \"*\",\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Text with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to align text paragraphs to the left, right, or center using Lip Gloss. It shows setting the alignment using `Align()` with `lipgloss.Left`, `lipgloss.Right`, and `lipgloss.Center`.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    Width(24).\n    Align(lipgloss.Left).  // align it left\n    Align(lipgloss.Right). // no wait, align it right\n    Align(lipgloss.Center) // just kidding, align it in the center\n```\n\n----------------------------------------\n\nTITLE: Inline Formatting with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to apply inline formatting options such as Bold, Italic, Faint, Blink, Strikethrough, Underline and Reverse to text using Lip Gloss.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    Bold(true).\n    Italic(true).\n    Faint(true).\n    Blink(true).\n    Strikethrough(true).\n    Underline(true).\n    Reverse(true)\n```\n\n----------------------------------------\n\nTITLE: Using True Color (24-bit) with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to use True Color (16,777,216 colors; 24-bit) with Lip Gloss. It shows examples of setting colors using `lipgloss.Color()` with hex color codes. The terminal will automatically detect and coerce the color to the closest available value.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.Color(\"#0000FF\") // good ol' 100% blue\nlipgloss.Color(\"#04B575\") // a green\nlipgloss.Color(\"#3C3C3C\") // a dark gray\n```\n\n----------------------------------------\n\nTITLE: Using ANSI 16 Colors with Lip Gloss in Go\nDESCRIPTION: This snippet illustrates how to use ANSI 16 colors (4-bit) in Lip Gloss.  It shows examples of setting colors using `lipgloss.Color()` with color codes. The terminal will automatically detect and coerce the color to the closest available value.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.Color(\"5\")  // magenta\nlipgloss.Color(\"9\")  // red\nlipgloss.Color(\"12\") // light blue\n```\n\n----------------------------------------\n\nTITLE: Using ANSI 256 Colors with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to use ANSI 256 colors (8-bit) in Lip Gloss. It shows examples of setting colors using `lipgloss.Color()` with color codes. The terminal will automatically detect and coerce the color to the closest available value.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.Color(\"86\")  // aqua\nlipgloss.Color(\"201\") // hot pink\nlipgloss.Color(\"202\") // orange\n```\n\n----------------------------------------\n\nTITLE: Setting Width and Height with Lip Gloss in Go\nDESCRIPTION: This snippet shows how to set the minimum width and height of a text block using Lip Gloss. It demonstrates setting the width and height using `Width()` and `Height()`, respectively.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    SetString(\"What’s for lunch?\").\n    Width(24).\n    Height(32).\n    Foreground(lipgloss.Color(\"63\"))\n```\n\n----------------------------------------\n\nTITLE: Using Adaptive Colors with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to use adaptive colors with Lip Gloss, allowing you to specify different colors for light and dark backgrounds. The terminal's background color will be automatically detected, and the appropriate color will be chosen at runtime.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.AdaptiveColor{Light: \"236\", Dark: \"248\"}\n```\n\n----------------------------------------\n\nTITLE: Rendering with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to render styled text using Lip Gloss. You can use the `Render(string...)` method on a `lipgloss.Style` or the Stringer interface.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nstyle := lipgloss.NewStyle().Bold(true).SetString(\"Hello,\")\nfmt.Println(style.Render(\"kitty.\")) // Hello, kitty.\nfmt.Println(style.Render(\"puppy.\")) // Hello, puppy.\n```\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().SetString(\"你好，猫咪。\").Bold(true)\nfmt.Println(style) // 你好，猫咪。\n```\n\n----------------------------------------\n\nTITLE: Measuring Text Dimensions with Lip Gloss in Go\nDESCRIPTION: Illustrates how to determine the width and height of text blocks rendered with `lipgloss` styles. It shows how to apply styles to text and then measure the resulting dimensions using `lipgloss.Width`, `lipgloss.Height`, and `lipgloss.Size` functions.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_23\n\nLANGUAGE: go\nCODE:\n```\n// Render a block of text.\nvar style = lipgloss.NewStyle().\n    Width(40).\n    Padding(2)\nvar block string = style.Render(someLongString)\n\n// Get the actual, physical dimensions of the text block.\nwidth := lipgloss.Width(block)\nheight := lipgloss.Height(block)\n\n// Here's a shorthand function.\nw, h := lipgloss.Size(block)\n```\n\n----------------------------------------\n\nTITLE: Placing Text in Whitespace with Lip Gloss in Go\nDESCRIPTION: Explains how to position a text block within a defined whitespace area using `lipgloss.PlaceHorizontal`, `lipgloss.PlaceVertical`, and `lipgloss.Place` functions.  It covers centering horizontally, aligning vertically, and positioning in a specific corner of a defined space. Requires the lipgloss library.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n// Center a paragraph horizontally in a space 80 cells wide. The height of\n// the block returned will be as tall as the input paragraph.\nblock := lipgloss.PlaceHorizontal(80, lipgloss.Center, fancyStyledParagraph)\n\n// Place a paragraph at the bottom of a space 30 cells tall. The width of\n// the text block returned will be as wide as the input paragraph.\nblock := lipgloss.PlaceVertical(30, lipgloss.Bottom, fancyStyledParagraph)\n\n// Place a paragraph in the bottom right corner of a 30x80 cell space.\nblock := lipgloss.Place(30, 80, lipgloss.Right, lipgloss.Bottom, fancyStyledParagraph)\n```\n\n----------------------------------------\n\nTITLE: Using Complete Colors with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to use `CompleteColor` with Lip Gloss to specify exact values for True Color, ANSI256, and ANSI color profiles. Automatic color degradation will not be performed in this case.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.CompleteColor{TrueColor: \"#0000FF\", ANSI256: \"86\", ANSI: \"5\"}\n```\n\n----------------------------------------\n\nTITLE: Using Complete Adaptive Colors with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to use `CompleteAdaptiveColor` with Lip Gloss to specify exact values for light and dark backgrounds without automatic color degradation. It combines `CompleteColor` with `AdaptiveColor`.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.CompleteAdaptiveColor{\n    Light: CompleteColor{TrueColor: \"#d7ffae\", ANSI256: \"193\", ANSI: \"11\"},\n    Dark:  CompleteColor{TrueColor: \"#d75fee\", ANSI256: \"163\", ANSI: \"5\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Border Functions with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates the shorthand functions for defining borders with Lip Gloss, following a similar pattern to the margin and padding shorthand functions. It shows examples of adding thick and double borders to specific sides.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// Add a thick border to the top and bottom\nlipgloss.NewStyle().\n    Border(lipgloss.ThickBorder(), true, false)\n\n// Add a double border to the top and left sides. Rules are set clockwise\n// from top.\nlipgloss.NewStyle().\n    Border(lipgloss.DoubleBorder(), true, false, false, true)\n```\n\n----------------------------------------\n\nTITLE: Inheritance with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how styles can inherit rules from other styles in Lip Gloss. When inheriting, only unset rules on the receiver are inherited.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nvar styleA = lipgloss.NewStyle().\n    Foreground(lipgloss.Color(\"229\")).\n    Background(lipgloss.Color(\"63\"))\n\n// Only the background color will be inherited here, because the foreground\n// color will have been already set:\nvar styleB = lipgloss.NewStyle().\n    Foreground(lipgloss.Color(\"201\")).\n    Inherit(styleA)\n```\n\n----------------------------------------\n\nTITLE: Copying Styles with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to copy styles in Lip Gloss. Since `Style` data structures contain only primitive types, assigning a style to another effectively creates a new copy of the style without mutating the original.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nstyle := lipgloss.NewStyle().Foreground(lipgloss.Color(\"219\"))\n\ncopiedStyle := style // this is a true copy\n\nwildStyle := style.Blink(true) // this is also true copy, with blink added\n```\n\n----------------------------------------\n\nTITLE: Joining Paragraphs with Lip Gloss in Go\nDESCRIPTION: Demonstrates how to horizontally and vertically join paragraphs using the `lipgloss` library. The example showcases aligning paragraphs along their bottom edges, center axes, and a specified percentage from the top.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// Horizontally join three paragraphs along their bottom edges\nlipgloss.JoinHorizontal(lipgloss.Bottom, paragraphA, paragraphB, paragraphC)\n\n// Vertically join two paragraphs along their center axes\nlipgloss.JoinVertical(lipgloss.Center, paragraphA, paragraphB)\n\n// Horizontally join three paragraphs, with the shorter ones aligning 20%\n// from the top of the tallest\nlipgloss.JoinHorizontal(0.2, paragraphA, paragraphB, paragraphC)\n```\n\n----------------------------------------\n\nTITLE: Unsetting Rules with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to unset rules in Lip Gloss. When a rule is unset, it won't be inherited or copied.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    Bold(true).                        // make it bold\n    UnsetBold().                       // jk don't make it bold\n    Background(lipgloss.Color(\"227\")). // yellow background\n    UnsetBackground()                  // never mind\n```\n\n----------------------------------------\n\nTITLE: Enforcing Rules with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to enforce rules with Lip Gloss using `Inline`, `MaxWidth`, and `MaxHeight`. This is useful when developing components and ensuring style definitions respect their intended purpose.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n// Force rendering onto a single line, ignoring margins, padding, and borders.\nsomeStyle.Inline(true).Render(\"yadda yadda\")\n\n// Also limit rendering to five cells\nsomeStyle.Inline(true).MaxWidth(5).Render(\"yadda yadda\")\n\n// Limit rendering to a 5x5 cell block\nsomeStyle.MaxWidth(5).MaxHeight(5).Render(\"yadda yadda\")\n```\n\n----------------------------------------\n\nTITLE: Custom Renderers with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how to use custom renderers in Lip Gloss. Custom renderers allow you to render to a specific output and correctly detect the color profile and dark background status.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nfunc myLittleHandler(sess ssh.Session) {\n    // Create a renderer for the client.\n    renderer := lipgloss.NewRenderer(sess)\n\n    // Create a new style on the renderer.\n    style := renderer.NewStyle().Background(lipgloss.AdaptiveColor{Light: \"63\", Dark: \"228\"})\n\n    // Render. The color profile and dark background state will be correctly detected.\n    io.WriteString(sess, style.Render(\"Heyyyyyyy\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing List Styles with Lip Gloss in Go\nDESCRIPTION: Demonstrates how to customize the appearance of a list using `lipgloss.Style` objects. It sets the enumerator and item styles with foreground colors and margins. It also showcases using the predefined Roman enumeration style.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_35\n\nLANGUAGE: go\nCODE:\n```\nenumeratorStyle := lipgloss.NewStyle().Foreground(lipgloss.Color(\"99\")).MarginRight(1)\nitemStyle := lipgloss.NewStyle().Foreground(lipgloss.Color(\"212\")).MarginRight(1)\n\nl := list.New(\n    \"Glossier\",\n    \"Claire’s Boutique\",\n    \"Nyx\",\n    \"Mac\",\n    \"Milk\",\n    ).\n    Enumerator(list.Roman).\n    EnumeratorStyle(enumeratorStyle).\n    ItemStyle(itemStyle)\n```\n\n----------------------------------------\n\nTITLE: Creating a New List with Lip Gloss in Go\nDESCRIPTION: Creates a new list with the specified items using the `list.New` function from the `lipgloss/list` package. Requires the lipgloss library.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nl := list.New(\"A\", \"B\", \"C\")\n```\n\n----------------------------------------\n\nTITLE: Printing a Lip Gloss List in Go\nDESCRIPTION: Prints a list created with the `lipgloss/list` package to the console using `fmt.Println`.  Assumes the variable `l` is a `list.List` object.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_33\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(l)\n\n// • A\n// • B\n// • C\n```\n\n----------------------------------------\n\nTITLE: Building List Incrementally with Lip Gloss in Go\nDESCRIPTION: Shows how to build a list incrementally using the `Item` method of the `list.List` type in the `lipgloss/list` package. A loop is used to repeatedly add items to the list.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_37\n\nLANGUAGE: go\nCODE:\n```\nl := list.New()\n\nfor i := 0; i < repeat; i++ {\n    l.Item(\"Lip Gloss\")\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tree Styles with Lip Gloss in Go\nDESCRIPTION: Demonstrates how to customize the appearance of a tree using `lipgloss.Style` objects from the lipgloss library. It sets styles for the enumerator, root node, and tree items, and sets a rounded enumerator style.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_42\n\nLANGUAGE: go\nCODE:\n```\nenumeratorStyle := lipgloss.NewStyle().Foreground(lipgloss.Color(\"63\")).MarginRight(1)\nrootStyle := lipgloss.NewStyle().Foreground(lipgloss.Color(\"35\"))\nitemStyle := lipgloss.NewStyle().Foreground(lipgloss.Color(\"212\"))\n\nt := tree.\n    Root(\"⁜ Makeup\").\n    Child(\n        \"Glossier\",\n        \"Fenty Beauty\",\n        tree.New().Child(\n            \"Gloss Bomb Universal Lip Luminizer\",\n            \"Hot Cheeks Velour Blushlighter\",\n        ),\n        \"Nyx\",\n        \"Mac\",\n        \"Milk\",\n    ).\n    Enumerator(tree.RoundedEnumerator).\n    EnumeratorStyle(enumeratorStyle).\n    RootStyle(rootStyle).\n    ItemStyle(itemStyle)\n```\n\n----------------------------------------\n\nTITLE: Building Tree Incrementally with Lip Gloss in Go\nDESCRIPTION: Shows how to build a tree incrementally using the `Child` method of the `tree.Tree` type in the `lipgloss/tree` package. A loop is used to repeatedly add children to the tree.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_43\n\nLANGUAGE: go\nCODE:\n```\nt := tree.New()\n\nfor i := 0; i < repeat; i++ {\n    t.Child(\"Lip Gloss\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Rows in Go\nDESCRIPTION: Defines a two-dimensional string slice representing the data rows for a table. Each inner slice contains strings for different columns in a row. This example contains language, formal and informal greeting examples.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nrows := [][]string{\n    {\"Chinese\", \"您好\", \"你好\"},\n    {\"Japanese\", \"こんにちは\", \"やあ\"},\n    {\"Arabic\", \"أهلين\", \"أهلا\"},\n    {\"Russian\", \"Здравствуйте\", \"Привет\"},\n    {\"Spanish\", \"Hola\", \"¿Qué tal?\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Styling and Rendering Table with Lip Gloss in Go\nDESCRIPTION: Demonstrates how to style and render a table using the `table` package from the `lipgloss` library.  It includes setting styles for the header, cells, and rows based on row number, and defining the table's border and headers. It showcases how to build a table with the `table.New` function and uses `lipgloss.Style` to customize its appearance.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nvar (\n    purple    = lipgloss.Color(\"99\")\n    gray      = lipgloss.Color(\"245\")\n    lightGray = lipgloss.Color(\"241\")\n\n    headerStyle  = lipgloss.NewStyle().Foreground(purple).Bold(true).Align(lipgloss.Center)\n    cellStyle    = lipgloss.NewStyle().Padding(0, 1).Width(14)\n    oddRowStyle  = cellStyle.Foreground(gray)\n    evenRowStyle = cellStyle.Foreground(lightGray)\n)\n\nt := table.New().\n    Border(lipgloss.NormalBorder()).\n    BorderStyle(lipgloss.NewStyle().Foreground(purple)).\n    StyleFunc(func(row, col int) lipgloss.Style {\n        switch {\n        case row == table.HeaderRow:\n            return headerStyle\n        case row%2 == 0:\n            return evenRowStyle\n        default:\n            return oddRowStyle\n        }\n    }).\n    Headers(\"LANGUAGE\", \"FORMAL\", \"INFORMAL\").\n    Rows(rows...)\n\n// You can also add tables row-by-row\nt.Row(\"English\", \"You look absolutely fabulous.\", \"How's it going?\")\n```\n\n----------------------------------------\n\nTITLE: Tabs with Lip Gloss in Go\nDESCRIPTION: This snippet demonstrates how Lip Gloss handles tabs. By default, tabs are converted to 4 spaces. This behavior can be changed on a per-style basis using `TabWidth()`.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nstyle := lipgloss.NewStyle() // tabs will render as 4 spaces, the default\nstyle = style.TabWidth(2)    // render tabs as 2 spaces\nstyle = style.TabWidth(0)    // remove tabs entirely\nstyle = style.TabWidth(lipgloss.NoTabConversion) // leave tabs intact\n```\n\n----------------------------------------\n\nTITLE: Custom List Enumerator with Lip Gloss in Go\nDESCRIPTION: Illustrates how to define a custom enumerator function for a list using the `lipgloss/list` package. The example defines a `DuckDuckGooseEnumerator` which checks the value of each item and returns \"Honk →\" for \"Goose\" items.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nl := list.New(\"Duck\", \"Duck\", \"Duck\", \"Duck\", \"Goose\", \"Duck\", \"Duck\")\n\nfunc DuckDuckGooseEnumerator(l list.Items, i int) string {\n    if l.At(i).Value() == \"Goose\" {\n        return \"Honk →\"\n    }\n    return \"\"\n}\n\nl = l.Enumerator(DuckDuckGooseEnumerator)\n```\n\n----------------------------------------\n\nTITLE: Importing Lip Gloss Table Package in Go\nDESCRIPTION: Imports the table sub-package from the charmbracelet/lipgloss library. This package provides functionalities for creating and styling tables within terminal applications.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/charmbracelet/lipgloss/table\"\n```\n\n----------------------------------------\n\nTITLE: Printing Lip Gloss Table in Go\nDESCRIPTION: Prints the rendered table to the console using `fmt.Println`. This assumes that the `t` variable has been assigned a `table` object from the `github.com/charmbracelet/lipgloss/table` package.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(t)\n```\n\n----------------------------------------\n\nTITLE: ASCII Table Border with Lip Gloss in Go\nDESCRIPTION: Defines a table with an ASCII border using the Lip Gloss table package.  Requires the lipgloss library and table package.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_30\n\nLANGUAGE: go\nCODE:\n```\ntable.New().Border(lipgloss.ASCIIBorder())\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Border with Lip Gloss in Go\nDESCRIPTION: Defines a table with a markdown border using the Lip Gloss table package.  The top and bottom borders are explicitly disabled using `BorderTop(false)` and `BorderBottom(false)`.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_29\n\nLANGUAGE: go\nCODE:\n```\ntable.New().Border(lipgloss.MarkdownBorder()).BorderTop(false).BorderBottom(false)\n```\n\n----------------------------------------\n\nTITLE: Importing Lip Gloss List Package in Go\nDESCRIPTION: Imports the list sub-package from the charmbracelet/lipgloss library. This enables the creation and customization of lists within terminal applications.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/charmbracelet/lipgloss/list\"\n```\n\n----------------------------------------\n\nTITLE: Nested List Creation with Lip Gloss in Go\nDESCRIPTION: Creates a nested list using the `list.New` function from the `lipgloss/list` package. The inner lists are embedded as items within the outer list, demonstrating a hierarchical structure.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nl := list.New(\n    \"A\", list.New(\"Artichoke\"),\n    \"B\", list.New(\"Baking Flour\", \"Bananas\", \"Barley\", \"Bean Sprouts\"),\n    \"C\", list.New(\"Cashew Apple\", \"Cashews\", \"Coconut Milk\", \"Curry Paste\", \"Currywurst\"),\n    \"D\", list.New(\"Dill\", \"Dragonfruit\", \"Dried Shrimp\"),\n    \"E\", list.New(\"Eggs\"),\n    \"F\", list.New(\"Fish Cake\", \"Furikake\"),\n    \"J\", list.New(\"Jicama\"),\n    \"K\", list.New(\"Kohlrabi\"),\n    \"L\", list.New(\"Leeks\", \"Lentils\", \"Licorice Root\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Lip Gloss Tree Package in Go\nDESCRIPTION: Imports the `tree` sub-package from the `github.com/charmbracelet/lipgloss` library, which allows for creating and styling tree structures in terminal applications.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/charmbracelet/lipgloss/tree\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tree with Lip Gloss in Go\nDESCRIPTION: Creates a new tree structure with a root node and child nodes using the `tree.Root` and `Child` functions from the `lipgloss/tree` package.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nt := tree.Root(\".\").\n    Child(\"A\", \"B\", \"C\")\n```\n\n----------------------------------------\n\nTITLE: Printing a Lip Gloss Tree in Go\nDESCRIPTION: Prints a tree created with the `lipgloss/tree` package to the console using `fmt.Println`. Assumes the variable `t` is a `tree.Tree` object.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_40\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(t)\n\n// .\n// ├── A\n// ├── B\n// └── C\n```\n\n----------------------------------------\n\nTITLE: Nested Tree Creation with Lip Gloss in Go\nDESCRIPTION: Creates a nested tree structure using the `tree.Root` and `Child` functions from the `lipgloss/tree` package. Inner trees are added as children to the root, demonstrating a hierarchical structure.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_41\n\nLANGUAGE: go\nCODE:\n```\nt := tree.Root(\".\").\n    Child(\"macOS\").\n    Child(\n        tree.New().\n            Root(\"Linux\").\n            Child(\"NixOS\").\n            Child(\"Arch Linux (btw)\").\n            Child(\"Void Linux\"),\n        ).\n    Child(\n        tree.New().\n            Root(\"BSD\").\n            Child(\"FreeBSD\").\n            Child(\"OpenBSD\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Color Profile with Lip Gloss in Go\nDESCRIPTION: This code snippet demonstrates how to force a specific color profile (TrueColor) in Lip Gloss, overriding the automatic color degradation. It imports the necessary Lip Gloss and Termenv packages and uses the SetColorProfile function to set the desired profile. Use with caution, as it may cause ANSI escape codes to be output in unwanted environments.\nSOURCE: https://github.com/charmbracelet/lipgloss/blob/master/README.md#_snippet_44\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/charmbracelet/lipgloss\"\n    \"github.com/muesli/termenv\"\n)\n\nlipgloss.SetColorProfile(termenv.TrueColor)\n```"
  }
]