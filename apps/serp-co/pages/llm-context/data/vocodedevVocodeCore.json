[
  {
    "owner": "vocodedev",
    "repo": "vocode-core",
    "content": "TITLE: Streaming Conversation Example\nDESCRIPTION: This Python code defines a `Settings` class for environment configuration using `pydantic_settings` and demonstrates a `StreamingConversation` setup with Deepgram transcriber, ChatGPT agent, and Azure synthesizer. It creates input/output streams, configures each component with API keys and necessary settings, then runs the conversation asynchronously. Ctrl+C will terminate the conversation.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/python-quickstart.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport signal\n\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\nfrom vocode.helpers import create_streaming_microphone_input_and_speaker_output\nfrom vocode.logging import configure_pretty_logging\nfrom vocode.streaming.agent.chat_gpt_agent import ChatGPTAgent\nfrom vocode.streaming.models.agent import ChatGPTAgentConfig\nfrom vocode.streaming.models.message import BaseMessage\nfrom vocode.streaming.models.synthesizer import AzureSynthesizerConfig\nfrom vocode.streaming.models.transcriber import (\n    DeepgramTranscriberConfig,\n    PunctuationEndpointingConfig,\n)\nfrom vocode.streaming.streaming_conversation import StreamingConversation\nfrom vocode.streaming.synthesizer.azure_synthesizer import AzureSynthesizer\nfrom vocode.streaming.transcriber.deepgram_transcriber import DeepgramTranscriber\n\nconfigure_pretty_logging()\n\n\nclass Settings(BaseSettings):\n    \"\"\"\n    Settings for the streaming conversation quickstart.\n    These parameters can be configured with environment variables.\n    \"\"\"\n\n    openai_api_key: str = \"ENTER_YOUR_OPENAI_API_KEY_HERE\"\n    azure_speech_key: str = \"ENTER_YOUR_AZURE_KEY_HERE\"\n    deepgram_api_key: str = \"ENTER_YOUR_DEEPGRAM_API_KEY_HERE\"\n\n    azure_speech_region: str = \"eastus\"\n\n    # This means a .env file can be used to overload these settings\n    # ex: \"OPENAI_API_KEY=my_key\" will set openai_api_key over the default above\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"ignore\"\n    )\n\n\nsettings = Settings()\n\n\nasync def main():\n    (\n        microphone_input,\n        speaker_output,\n    ) = create_streaming_microphone_input_and_speaker_output(\n        use_default_devices=False,\n        use_blocking_speaker_output=True,  # this moves the playback to a separate thread, set to False to use the main thread\n    )\n\n    conversation = StreamingConversation(\n        output_device=speaker_output,\n        transcriber=DeepgramTranscriber(\n            DeepgramTranscriberConfig.from_input_device(\n                microphone_input,\n                endpointing_config=PunctuationEndpointingConfig(),\n                api_key=settings.deepgram_api_key,\n            ),\n        ),\n        agent=ChatGPTAgent(\n            ChatGPTAgentConfig(\n                openai_api_key=settings.openai_api_key,\n                initial_message=BaseMessage(text=\"What up\"),\n                prompt_preamble=\"\"\"The AI is having a pleasant conversation about life\"\"\",\n            )\n        ),\n        synthesizer=AzureSynthesizer(\n            AzureSynthesizerConfig.from_output_device(speaker_output),\n            azure_speech_key=settings.azure_speech_key,\n            azure_speech_region=settings.azure_speech_region,\n        ),\n    )\n    await conversation.start()\n    print(\"Conversation started, press Ctrl+C to end\")\n    signal.signal(signal.SIGINT, lambda _0, _1: asyncio.create_task(conversation.terminate()))\n    while conversation.is_active():\n        chunk = await microphone_input.get_audio()\n        conversation.receive_audio(chunk)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\n----------------------------------------\n\nTITLE: Complete Local StreamingConversation Setup (Python)\nDESCRIPTION: This code snippet shows the complete configuration of a `StreamingConversation` using local models for transcription (Whisper.cpp), language processing (GPT4All), and text-to-speech synthesis (Coqui TTS).  It combines the configurations from the previous snippets into a single `StreamingConversation` instance.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nStreamingConversation(\n    output_device=speaker_output,\n    transcriber=WhisperCPPTranscriber(\n        WhisperCPPTranscriberConfig.from_input_device(\n            microphone_input,\n            libname=\"path/to/whisper.cpp/libwhisper.so\",\n            fname_model=\"path/to/whisper.cpp/models/ggml-tiny.bin\",\n        )\n    ),\n    agent=GPT4AllAgent(\n        GPT4AllAgentConfig(\n            model_path=\"path/to/ggml-...-.bin\",\n            initial_message=BaseMessage(text=\"Hello!\"),\n            prompt_preamble=\"The AI is having a pleasant conversation about life\"\n        )\n    ),\n    synthesizer=CoquiTTSSynthesizer(\n        CoquiTTSSynthesizerConfig.from_output_device(\n            speaker_output,\n            tts_kwargs = {\n                \"model_name\": \"tts_models/en/ljspeech/tacotron2-DDC_ph\"\n            }\n        )\n    ),\n    logger=logger,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating EndConversation Action - Python\nDESCRIPTION: Creates an action that allows the Vocode agent to end the current phone call. It uses the `vocode_client.actions.create_action` method with the action type set to `action_end_conversation`. This action can be triggered by the agent based on phrase triggers or other conditions.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nvocode_client.actions.create_action(\n  request={\n      \"type\": \"action_end_conversation\",\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating HIPAA Compliant Call with Vocode API (Python)\nDESCRIPTION: This code snippet demonstrates how to create a HIPAA compliant outbound call using the Vocode API in Python. The `hipaa_compliant` flag is set to `True` to redact prompts, prevent transcript storage, and disable call recording. It requires a `vocode_client` instance and assumes `agent` configuration is defined elsewhere.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/hipaa-compliance.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.calls.create_call(\n    from_number=\"<YOUR VOCODE NUMBER>\",\n    to_number=\"15555555555\",\n    agent=...,\n    hipaa_compliant=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating DTMF Action - Python\nDESCRIPTION: Creates an action that allows the Vocode agent to send DTMF tones during a phone call, useful for navigating phone trees. The `vocode_client.actions.create_action` method is used with the `action_dtmf` type.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nvocode_client.actions.create_action(\n  request={\n      \"type\":\"action_dtmf\",\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing call information in Agent\nDESCRIPTION: This code snippet demonstrates how to access call information (to and from phone numbers) within a custom agent using the RedisConfigManager.  It retrieves the call configuration associated with the conversation ID from Redis and extracts the Twilio phone numbers.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass SpellerAgent(BaseAgent):\n    def __init__(self, agent_config: SpellerAgentConfig):\n        super().__init__(agent_config=agent_config)\n        self.config_manager = RedisConfigManager()\n\n    async def respond(\n        self,\n        human_input: str,\n        conversation_id: str,\n        is_interrupt: bool = False,\n    ) -> Tuple[Optional[str], bool]:\n        call_config = self.config_manager.get_config(conversation_id)\n        if call_config is not None:\n            from_phone = call_config.twilio_from\n            to_phone = call_config.twilio_to\n        return \"\".join(c + \" \" for c in human_input), False\n```\n\n----------------------------------------\n\nTITLE: Create Account Connection (Twilio) - Python\nDESCRIPTION: This snippet creates an account connection to a Twilio account using the Vocode API. It requires the `twilio_account_sid` and `twilio_auth_token` environment variables to be set. It uses the `vocode_client` to call the `create_account_connection` method.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/setting-up-number.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naccount_connection = vocode_client.account_connections.create_account_connection(\n    request={\n        \"type\": \"account_connection_twilio\",\n        \"credentials\": {\n            \"twilio_account_sid\": os.getenv(\"TWILIO_ACCOUNT_SID\"),\n            \"twilio_auth_token\": os.getenv(\"TWILIO_AUTH_TOKEN\"),\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implement Custom RespondAgent Subclass\nDESCRIPTION: Creates a custom agent, `BrokenRecordAgent`, that inherits from `RespondAgent` and overrides the `respond` and `generate_response` methods. The `respond` method returns a predefined message, while `generate_response` yields the same message as an interruptible response for streaming conversations.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/create-your-own-agent.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass BrokenRecordAgent(RespondAgent[BrokenRecordAgentConfig]):\n\n    # is_interrupt is True when the human has just interrupted the bot's last response\n    def respond(\n        self, human_input, is_interrupt: bool = False\n    ) -> tuple[Optional[str], bool]:\n        return self.agent_config.message\n\n    async def generate_response(\n        self, human_input, is_interrupt: bool = False\n    ) -> AsyncGenerator[Tuple[str, bool], None]: # message and whether or not the message is interruptible\n        \"\"\"Returns a generator that yields the agent's response one sentence at a time.\"\"\"\n        yield self.agent_config.message, False\n```\n\n----------------------------------------\n\nTITLE: Create DTMF Action in Vocode (Python)\nDESCRIPTION: This snippet creates an action to send DTMF tones using the Vocode client. It uses the `action_dtmf` action type.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.actions.create_action(\n  request={\n      \"type\":\"action_dtmf\",\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Validate Vocode Signature (Python)\nDESCRIPTION: This Python function validates the signature of an incoming request from Vocode by decoding the provided signature and comparing it to a calculated digest using the request payload and the signature secret. The signature ensures that the request originates from Vocode and hasn't been tampered with.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/external-actions.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport base64\nimport hashlib\nimport hmac\n\nasync def test_requester_encodes_signature(\nrequest_signature_value: str, signature_secret: str, payload: dict\n):\n\"\"\"\nAsynchronous function to check if the request signature is encoded correctly.\n\n    Args:\n        request_signature_value (str): The request signature to be decoded.\n        signature_secret (str): The signature to be decoded and used for comparison.\n        payload (dict): The payload to be used for digest calculation.\n\n    Returns:\n        None\n    \"\"\"\n    signature_secret_as_bytes = base64.b64decode(signature_secret)\n    decoded_digest = base64.b64decode(request_signature_value)\n    calculated_digest = hmac.new(signature_secret_as_bytes, json.dumps(payload).encode(\"utf-8\"), hashlib.sha256).digest()\n    assert hmac.compare_digest(decoded_digest, calculated_digest) is True\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Call Action Trigger in Vocode\nDESCRIPTION: This code demonstrates how to configure an action trigger to use function calls in a Vocode agent.  It imports the necessary classes for defining an `EndConversation` action and a `FunctionCallActionTrigger`. The `action_trigger` field of the `EndConversationVocodeActionConfig` is set to a `FunctionCallActionTrigger` instance, enabling the action to be triggered via a function call returned by the language model. Dependencies: vocode.streaming.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/action-phrase-triggers.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.action.end_conversation import EndConversationVocodeActionConfig\nfrom vocode.streaming.models.actions import FunctionCallActionTrigger\n\nEndConversationVocodeActionConfig(\n    type=\"action_end_conversation\",\n    action_trigger=FunctionCallActionTrigger(\n        type=\"action_trigger_function_call\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Updating an Agent in Python\nDESCRIPTION: This snippet updates an existing agent using the Vocode API. It sets parameters such as initial message, prompt ID, voice ID, and action IDs. It uses the `vocode_client.agents.update_agent` method and requires the `agent_id`, `AgentUpdateParams` object, and `vocode_client` object to be initialized.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/configuring-number.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nINITIAL_MESSAGE = \"Hi, this is a Vocode scheduling agent, how can I help you?\"\n\nupdate_response = vocode_client.agents.update_agent(\n    id=agent_id,\n    request=AgentUpdateParams(\n        initial_message=INITIAL_MESSAGE,\n        prompt=prompt_id,\n        voice=voice_id,\n        actions=[end_conversation_action_id, external_action_id],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining custom SpellerAgent in Python\nDESCRIPTION: This code defines a custom agent, SpellerAgent, which responds to user input by spelling out each word. It demonstrates how to subclass BaseAgent, implement the respond method, and create a custom AgentConfig. It also uses AbstractAgentFactory for creating an agent based on configuration.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom typing import Optional, Tuple\n\nfrom vocode.streaming.agent.abstract_factory import AbstractAgentFactory\nfrom vocode.streaming.agent.base_agent import BaseAgent, RespondAgent\nfrom vocode.streaming.agent.chat_gpt_agent import ChatGPTAgent\nfrom vocode.streaming.models.agent import AgentConfig, AgentType, ChatGPTAgentConfig\n\n\nclass SpellerAgentConfig(AgentConfig, type=\"agent_speller\"):\n    pass\n\n\nclass SpellerAgent(RespondAgent[SpellerAgentConfig]):\n    async def respond(\n        self,\n        human_input: str,\n        conversation_id: str,\n        is_interrupt: bool = False,\n    ) -> Tuple[Optional[str], bool]:\n        return \"\".join(c + \" \" for c in human_input), False\n\n\nclass SpellerAgentFactory(AbstractAgentFactory):\n    def create_agent(self, agent_config: AgentConfig) -> BaseAgent:\n        # If the agent configuration type is CHAT_GPT, create a ChatGPTAgent.\n        if isinstance(agent_config, ChatGPTAgentConfig):\n            return ChatGPTAgent(agent_config=agent_config)\n        # If the agent configuration type is agent_speller, create a SpellerAgent.\n        elif isinstance(agent_config, SpellerAgentConfig):\n            return SpellerAgent(agent_config=agent_config)\n        # If the agent configuration type is not recognized, raise an exception.\n        raise Exception(\"Invalid agent config\")\n```\n\n----------------------------------------\n\nTITLE: Update Agent with SetHold and AddToConference Actions - Python\nDESCRIPTION: This code configures a Vocode agent with `SetHold` and `AddToConference` actions. The `SetHold` action is triggered by the phrase \"Removing participant from hold\", and the `AddToConference` action is triggered by \"I connect you now please hold\".  It configures the agent to perform warm transfers based on specified phrases.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/warm-transfer.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.agents.update_agent(\n    actions=[\n        {\n            \"type\": \"action_set_hold\",\n            \"config\": {},\n            \"action_trigger\": {\n                \"type\": \"action_trigger_phrase_based\",\n                \"config\": {\n                    \"phrase_triggers\": [\n                        {\n                            \"phrase\": \"Removing participant from hold\",\n                            \"conditions\": [\"phrase_condition_type_contains\"],\n                        }\n                    ]\n                },\n            },\n        },\n        {\n            \"type\": \"action_add_to_conference\",\n            \"config\": {\"phone_number\": \"{transfer_phone_number}\"},\n            \"action_trigger\": {\n                \"type\": \"action_trigger_phrase_based\",\n                \"config\": {\n                    \"phrase_triggers\": [\n                        {\n                            \"phrase\": \"I connect you now please hold\",\n                            \"conditions\": [\"phrase_condition_type_contains\"],\n                        }\n                    ]\n                },\n            },\n        },\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Phrase-Based Action Trigger in Vocode\nDESCRIPTION: This code snippet shows how to set up an action trigger to use phrase triggers in a Vocode agent. It imports the required classes for defining an `EndConversation` action and a `PhraseBasedActionTrigger`.  The `action_trigger` field is configured with a `PhraseBasedActionTrigger` instance, containing a `PhraseBasedActionTriggerConfig` that specifies a list of `PhraseTrigger` instances. Each `PhraseTrigger` defines a phrase and a condition for triggering the action. Dependencies: vocode.streaming.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/action-phrase-triggers.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.action.end_conversation import EndConversationVocodeActionConfig\nfrom vocode.streaming.models.actions import PhraseBasedActionTrigger, PhraseBasedActionTriggerConfig, PhraseTrigger\n\nEndConversationVocodeActionConfig(\n    type = \"action_end_conversation\",\n    action_trigger=PhraseBasedActionTrigger(\n        type = \"action_trigger_phrase_based\",\n        config: PhraseBasedActionTriggerConfig(\n            phrase_triggers = [\n                PhraseTrigger(\n                    phrase=\"Ending conversation now\",\n                    condition=\"phrase_condition_type_contains\"\n                ),\n                # Additional phrase triggers can be listed here\n            ]\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating DTMF Action - cURL\nDESCRIPTION: Creates a DTMF action using a cURL request to the Vocode API.  The request specifies the `action_dtmf` type. Requires a valid API key for authorization.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_5\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/actions/create \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"type\": \"action_dtmf\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Verifying Request Signature (Python)\nDESCRIPTION: This Python function verifies the signature of an incoming request to ensure its authenticity. It decodes the signature from the request header, calculates a digest using the signature secret and request payload, and compares it with the decoded signature using `hmac.compare_digest` for security.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/external-action.mdx#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport base64\nimport hashlib\nimport hmac\n\nasync def test_requester_encodes_signature(\n  request_signature_value: str, signature_secret: str, payload: dict\n):\n    \"\"\"\n    Asynchronous function to check if the request signature is encoded correctly.\n\n    Args:\n        request_signature_value (str): The request signature to be decoded.\n        signature_secret (str): The secret for the action (make sure this is stored securely).\n        payload (dict): The payload to be used for digest calculation.\n\n    Returns:\n        None\n    \"\"\"\n    signature_secret_as_bytes = base64.b64decode(signature_secret)\n    decoded_digest = base64.b64decode(request_signature_value)\n    calculated_digest = hmac.new(signature_secret_as_bytes, json.dumps(payload).encode(), hashlib.sha256).digest()\n    assert hmac.compare_digest(decoded_digest, calculated_digest) is True\n```\n\n----------------------------------------\n\nTITLE: Buy Number - Python\nDESCRIPTION: This snippet purchases a phone number using the Vocode API. It specifies the area code and telephony provider (twilio). The `BuyPhoneNumberRequest` object is used to configure the purchase. The bought number is then stored in the `phone_number` variable.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/setting-up-number.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nphone_number = vocode_client.numbers.buy_number(BuyPhoneNumberRequest(area_code=\"415\", telephony_provider=\"twilio\"))\n```\n\n----------------------------------------\n\nTITLE: Buy Number - TypeScript\nDESCRIPTION: This snippet purchases a phone number using the Vocode API in TypeScript. It awaits the result of the `vocode.numbers.buyNumber()` call and stores the purchased number in the `phoneNumber` constant.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/setting-up-number.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst phoneNumber = await vocode.numbers.buyNumber();\n```\n\n----------------------------------------\n\nTITLE: Configuring an Action with Phrase Trigger in Vocode\nDESCRIPTION: This snippet shows how to configure an action using the phrase trigger created in the previous example. It updates the agent with an action that transfers a call based on the `phrase_trigger`. The example uses `TransferCallActionParams` and `TransferCallConfig` and specifies a phone number to transfer the call to.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/action-triggers.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import (\n    TransferCallActionParams,\n    TransferCallConfig,\n)\n\nvocode_client.agents.update_agent(\n    actions=[\n        TransferCallActionParams(\n            type=\"action_transfer_call\",\n            config=TransferCallConfig(\n                transfer_phone_number=\"<YOUR TRANSFER PHONE NUMBER>\",\n            ),\n            action_trigger=phrase_trigger # from the previous code block\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Deepgram Transcriber for InboundCallServer (Python)\nDESCRIPTION: This code snippet demonstrates how to configure the Deepgram transcriber for use with an `InboundCallServer`.  It utilizes `DeepgramTranscriberConfig.from_telephone_input_device()` to create a configuration object tailored for telephone input, which hardcodes audio parameters for compatibility. The configuration is then passed as an argument while initializing InboundCallServer.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/using-transcribers.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode.streaming.telephony.hosted.inbound_call_server import InboundCallServer\nfrom vocode.streaming.models.transcriber import DeepgramTranscriberConfig, PunctuationEndpointingConfig\n\nserver = InboundCallServer(\n    ...\n    transcriber_config=DeepgramTranscriberConfig.from_telephone_input_device(\n      endpointing_config=PunctuationEndpointingConfig()\n    ),\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Example API Request using External Action\nDESCRIPTION: This bash snippet shows an example of an API request triggered by an external action. The request is a POST request to a specified URL, including the 'Accept' and 'Content-Type' headers, the Vocode signature header, and a JSON payload in the request body.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/external-action.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nPOST url HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nx-vocode-signature: <encoded_signature>\n\n{\n  \"payload\": {\n    \"length\": \"30m\",\n    \"time\": \"10:30am\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Meeting Assistant Action - TypeScript\nDESCRIPTION: This TypeScript snippet creates an external action for a Meeting Booking Assistant using the Vocode client. The action configuration specifies details like name, description, URL, and input schema. The input schema requires a 'length' (30m or 1hr) and a 'time' (in the format HH:M0am/pm).\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/external-actions.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst action = await vocode.actions.createAction({\n  type: \"action_external\",\n  config: {\n    name: \"Meeting_Booking_Assistant\",\n    description: \"Book a meeting for a 30 minute or 1 hour call.\",\n    url: \"http://example.com/booking\",\n    speak_on_send: true,\n    speak_on_receive: true,\n    input_schema: {\n      type: \"object\",\n      properties: {\n        length: {\n          type: \"string\",\n          enum: [\"30m\", \"1hr\"],\n        },\n        time: {\n          type: \"string\",\n          pattern: \"^\\\\d{2}:\\\\d0[ap]m$\",\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Add to Steering Pool by Linking Existing Phone Number - Python\nDESCRIPTION: This code snippet shows how to link an existing phone number on your Twilio account to the steering pool using the Vocode client. This allows the specified phone number to be used for warm transfers. It requires both a valid Twilio account connection ID and a phone number.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/warm-transfer.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.account_connections.add_to_steering_pool(\n    id=\"<YOUR TWILIO ACCOUNT CONNECTION ID>\",\n    phone_number=\"<YOUR TWILIO PHONE NUMBER>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Create TransferCall Action in Vocode (TypeScript)\nDESCRIPTION: This snippet creates an action to transfer a call to another phone number using the Vocode client in TypeScript. It uses the `action_transfer_call` action type and specifies the `phoneNumber` in the `config`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst number = await vocode.actions.createAction({\n  type: \"action_transfer_call\",\n  config: {\n    phoneNumber: \"11234567890\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Transfer Call Action - Python\nDESCRIPTION: This snippet shows how to configure a transfer call action.  It creates an outbound call and includes a `TransferCallActionParams` within the `actions` list. The `type` parameter is set to `action_transfer_call` and the `config` parameter specifies the phone number to which the call should be transferred using `TransferCallConfig`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/ivr-navigation.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.calls.create_call(\n    from_number=\"<YOUR VOCODE NUMBER>\",\n    to_number=\"15555555555\",\n    agent=CreateCallAgentParams(\n        actions=[TransferCallActionParams(type=\"action_transfer_call\", config=TransferCallConfig(\n            phone_number=\"11234567890\"\n        ))],\n        ...\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Create DTMF Action in Vocode (TypeScript)\nDESCRIPTION: This snippet creates an action to send DTMF tones using the Vocode client in TypeScript. It uses the `action_dtmf` action type.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst number = await vocode.actions.createAction({\n  type: \"action_dtmf\",\n});\n```\n\n----------------------------------------\n\nTITLE: Eleven Labs Configuration for Telephony in Vocode (Python)\nDESCRIPTION: This snippet demonstrates how to configure the Eleven Labs synthesizer for use with telephone output devices in Vocode. It uses the `ElevenLabsSynthesizerConfig.from_telephone_output_device()` method, which sets the sampling rate and audio encoding for telephony compatibility. The API key and voice ID are retrieved from environment variables.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/using-synthesizers.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.telephony.hosted.inbound_call_server import InboundCallServer\nfrom vocode.streaming.models.synthesizer import ElevenLabsSynthesizerConfig\n\nserver = InboundCallServer(\n    ...\n    synthesizer_config=ElevenLabsSynthesizerConfig.from_telephone_output_device(\n        api_key=os.getenv(\"ELEVENLABS_API_KEY\"),\n        voice_id=os.getenv(\"YOUR VOICE ID\")\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Creating TransferCall Action - TypeScript\nDESCRIPTION: Creates an action that allows the Vocode agent to transfer the call to another phone number. The `vocode.actions.createAction` method is used with the `action_transfer_call` type, and a `config` object containing the `phoneNumber` to transfer to.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst number = await vocode.actions.createAction({\n  type: \"action_transfer_call\",\n  config: {\n    phoneNumber: \"11234567890\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Chain Creation from LangchainAgentConfig\nDESCRIPTION: This code demonstrates creating a custom LangchainAgent subclass that overwrites the create_chain() method to build a chain based on the agent config. It configures a Gemini LLM to generate a poem on a topic passed in via the config.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent.mdx#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode.streaming.agent.abstract_factory import AbstractAgentFactory\nfrom vocode.streaming.models.agent import LangchainAgentConfig\nfrom vocode.streaming.agent.langchain_agent import LangchainAgent\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain_core.prompts import ChatPromptTemplate\n\nclass PoemLangchainAgentConfig(LangchainAgentConfig):\n    poem_topic: str\n\nclass PoemLangchainAgent(LangchainAgent):\n    def create_chain(self):\n        if self.agent_config.provider != \"google_genai\":\n            raise Exception(\"PoemLangchainAgent only supports Google Generative AI models\")\n\n        prompt_template = ChatPromptTemplate.from_template(f\"Make a random poem about {self.agent_config.poem_topic}\")\n        model = ChatGoogleGenerativeAI(\n            model=self.agent_config.model_name,\n            temperature=self.agent_config.temperature,\n            max_output_tokens=self.agent_config.max_tokens\n        )\n        chain = prompt_template | model\n        return chain\n\n\nclass MyAgentFactory(AbstractAgentFactory):\n    def create_agent(\n        self, agent_config: AgentConfig, logger: Optional[logging.Logger] = None\n    ) -> BaseAgent:\n        if isinstance(agent_config, PoemLangchainAgentConfig):\n            return PoemLangchainAgent(\n                agent_config=agent_config\n            )\n        elif isinstance(agent_config, LangchainAgentConfig):\n            return LangchainAgent(\n                agent_config=agent_config,\n            )\n        else:\n            raise Exception(\"Invalid agent config\")\n```\n\n----------------------------------------\n\nTITLE: Creating TransferCall Action - Python\nDESCRIPTION: Creates an action that allows the Vocode agent to transfer the call to another phone number. The `vocode_client.actions.create_action` method is used with the `action_transfer_call` type, and a `config` object containing the `phone_number` to transfer to.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nvocode_client.actions.create_action(\n  request={\n      \"type\":\"action_transfer_call\",\n      \"config\":{\n          \"phone_number\":\"11234567890\"\n      }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: NylasSendEmail Action Implementation Python\nDESCRIPTION: Implements a custom action to send an email using the Nylas API. It defines parameter and response models, inherits from BaseAction, and overrides the run method to interact with the Nylas API. Requires nylas package and environment variables: NYLAS_CLIENT_ID, NYLAS_CLIENT_SECRET, NYLAS_ACCESS_TOKEN.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/agents-with-actions.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom typing import Optional, Type\n\nfrom pydantic import Field\nfrom pydantic.v1 import BaseModel\n\nfrom vocode.streaming.action.base_action import BaseAction\nfrom vocode.streaming.models.actions import ActionConfig as VocodeActionConfig\nfrom vocode.streaming.models.actions import ActionInput, ActionOutput\n\n    \n_NYLAS_ACTION_DESCRIPTION = \"\"\"Sends an email using Nylas API.\nThe input to this action is the recipient emails, email body, optional subject.\nThe subject should only be included if it is a new email thread.\nIf there is no message id, the email will be sent as a new email. Otherwise, it will be sent as a reply to the given message. Make sure to include the previous message_id\nif you are replying to an email.\n\"\"\"\n\n\nclass NylasSendEmailParameters(BaseModel):\n    email: str = Field(..., description=\"The email address to send the email to.\")\n    subject: Optional[str] = Field(None, description=\"The subject of the email.\")\n    body: str = Field(..., description=\"The body of the email.\")\n\n\nclass NylasSendEmailResponse(BaseModel):\n    success: bool\n\n\nclass NylasSendEmailVocodeActionConfig(\n    VocodeActionConfig, type=\"action_nylas_send_email\"  # type: ignore\n):\n    pass\n\nclass NylasSendEmail(\n        BaseAction[\n            NylasSendEmailVocodeActionConfig,\n            NylasSendEmailParameters,\n            NylasSendEmailResponse,\n        ]\n    ):\n    description: str = _NYLAS_ACTION_DESCRIPTION\n    parameters_type: Type[NylasSendEmailParameters] = NylasSendEmailParameters\n    response_type: Type[NylasSendEmailResponse] = NylasSendEmailResponse\n\n    def __init__(\n        self,\n        action_config: NylasSendEmailVocodeActionConfig,\n    ):\n        super().__init__(\n            action_config,\n            quiet=True,\n            is_interruptible=True,\n        )\n\n    async def _end_of_run_hook(self) -> None:\n        \"\"\"This method is called at the end of the run method. It is optional but intended to be\n        overridden if needed.\"\"\"\n        print(\"Successfully sent email!\")\n    \n    async def run(\n        self, action_input: ActionInput[NylasSendEmailParameters]\n    ) -> ActionOutput[NylasSendEmailResponse]:\n        from nylas import APIClient\n\n        # Initialize the Nylas client\n        nylas = APIClient(\n            client_id=os.getenv(\"NYLAS_CLIENT_ID\"),\n            client_secret=os.getenv(\"NYLAS_CLIENT_SECRET\"),\n            access_token=os.getenv(\"NYLAS_ACCESS_TOKEN\"),\n        )\n\n        # Create the email draft\n        draft = nylas.drafts.create()\n        draft.body = action_input.params.body\n\n        draft.subject = (\n            action_input.params.subject.strip() if action_input.params.subject else \"Email from Vocode\"\n        )\n        draft.to = [{\"email\": action_input.params.email.strip()}]\n\n        # Send the email\n        draft.send()\n\n        await self._end_of_run_hook()\n        return ActionOutput(\n            action_type=action_input.action_config.type,\n            response=NylasSendEmailResponse(success=True),\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Actions in Python\nDESCRIPTION: This snippet creates two actions: one to end the conversation and another to make an API call to a calendar booking service. It utilizes the `vocode_client.actions.create_action` method. It requires the `ActionParamsRequest` object from Vocode and the `vocode_client` object to be initialized.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/configuring-number.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# This action ends the conversation\nend_conversation_action = vocode_client.actions.create_action(\n    request=ActionParamsRequest(type=\"action_end_conversation\", config={})\n)\n\n# This action makes an API call to our calendar endpoint\ncalendar_action = vocode_client.actions.create_action(\n    request={\n        \"type\": \"action_external\",\n        \"config\": {\n            \"name\": \"Meeting_Booking_Assistant\",\n            \"description\": (\"Book a meeting for a 30 minute or 1 hour call.\"),\n            \"url\": \"http://example.com/booking\",\n            \"speak_on_send\": True,\n            \"speak_on_receive\": True,\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"length\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"30m\", \"1hr\"],\n                    },\n                    \"time\": {\n                        \"type\": \"string\",\n                        \"pattern\": \"^\\d{2}:\\d0[ap]m$\",\n                    },\n                },\n            },\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Agent with Webhook in Python\nDESCRIPTION: This Python code snippet updates an existing agent with the newly created webhook. It uses the `agent/update` endpoint of the Vocode client to associate the webhook with the agent identified by `agent_id`. The `AgentUpdateParams` object is used to specify the webhook ID for the agent update.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/setting-up-webhook.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nupdate_response = vocode_client.agents.update_agent(\n    id=agent_id,\n    request=AgentUpdateParams(\n        webhook=new_webhook.id\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating EndConversation Action - TypeScript\nDESCRIPTION: Creates an action that allows the Vocode agent to end the current phone call. It uses the `vocode.actions.createAction` method with the action type set to `action_end_conversation`. This action can be triggered by the agent based on phrase triggers or other conditions.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst number = await vocode.actions.createAction({\n  type: \"action_end_conversation\",\n});\n```\n\n----------------------------------------\n\nTITLE: Validate Vocode Signature (TypeScript)\nDESCRIPTION: This TypeScript function validates the signature of an incoming request from Vocode. It decodes the signature and compares it to a calculated digest, using the request payload and signature secret.  The function uses crypto.timingSafeEqual to mitigate timing attacks. If the signatures don't match, it throws an error.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/external-actions.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as crypto from 'crypto';\n\nasync function testRequesterEncodesSignature(\n  requestSignatureValue: string,\n  signatureSecret: string,\n  payload: Record<string, unknown>\n): Promise<void> {\n  /**\n   * Asynchronous function to check if the request signature is encoded correctly.\n   *\n   * @param requestSignatureValue - The request signature to be decoded.\n   * @param signatureSecret - The signature to be decoded and used for comparison.\n   * @param payload - The payload to be used for digest calculation.\n   */\n  const signatureAsBytes = Buffer.from(signatureSecret, 'base64');\n  const decodedDigest = Buffer.from(requestSignatureValue, 'base64');\n  const payloadString = JSON.stringify(payload);\n  const calculatedDigest = crypto\n    .createHmac('sha256', signatureAsBytes)\n    .update(payloadString)\n    .digest();\n\n  if (!crypto.timingSafeEqual(decodedDigest, calculatedDigest)) {\n    throw new Error('Signature mismatch');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Number with Action ID - TypeScript\nDESCRIPTION: Updates a phone number's inbound agent with a specific action ID. The `vocode.numbers.updateNumber` method is used, providing the phone number and an `inboundAgent` object containing the action ID within the `actions` list. This attaches a pre-created action to the agent associated with the phone number.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nvocode.numbers.updateNumber({\n  phoneNumber: \"11234567890\",\n  inboundAgent: {\n    actions: [\"<ACTION UUID>\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Microphone and Speaker\nDESCRIPTION: This snippet initializes the microphone input and speaker output using Vocode's helper function. It creates audio streams connected to the system's default audio devices, or allows manual device selection if `use_default_devices` is set to False. The returned objects can be used for real-time audio processing.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/python-quickstart.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmicrophone_input, speaker_output = create_microphone_input_and_speaker_output(\n    use_default_devices=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Meeting Booking Action Config in Python\nDESCRIPTION: This code snippet creates an action configuration for a meeting booking assistant using `ExecuteExternalActionVocodeActionConfig`. It defines the input schema for the action, specifying that the meeting length must be either '30m' or '1hr' and the meeting time must end in zero (e.g., 10:30am). It sets parameters like `url`, `speak_on_send`, `speak_on_receive`, `input_schema`, and `signature_secret`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/external-action.mdx#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport json\nimport base64\nimport os\n\nfrom vocode.streaming.action.execute_external_action import (\n    ExecuteExternalAction,\n    ExecuteExternalActionVocodeActionConfig,\n)\n\nACTION_INPUT_SCHEMA = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"length\": {\n            \"type\": \"string\",\n            \"enum\": [\"30m\", \"1hr\"],\n        },\n        \"time\": {\n            \"type\": \"string\",\n            \"pattern\": \"^\\d{2}:\\d0[ap]m$\",\n        },\n    },\n}\n\naction_config = ExecuteExternalActionVocodeActionConfig(\n    name = \"Meeting_Booking_Assistant\",\n    description = \"Book a meeting for a 30 minute or 1 hour call.\",\n    url = \"http://example.com/booking\",\n    speak_on_send = True,\n    speak_on_receive = True,\n    input_schema = json.dumps(ACTION_INPUT_SCHEMA),\n    signature_secret = base64.b64encode(os.urandom(32)).decode(),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Number with Action ID - Python\nDESCRIPTION: Updates a phone number's inbound agent with a specific action ID. The `vocode_client.numbers.update_number` method is used, providing the phone number and an `AgentUpdateParams` object containing the action ID within the `actions` list. This attaches a pre-created action to the agent associated with the phone number.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode import AgentUpdateParams\n\nvocode_client.numbers.update_number(\n  phone_number=\"11234567890\",\n  inbound_agent=AgentUpdateParams(\n      actions=[\"<ACTION UUID>\"]\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: BaseAction Class Definition Python\nDESCRIPTION: Defines the base class for all actions.  It includes an init method for setting configurations and a run method that needs to be implemented by subclasses.  The action_config parameter customizes the action's behaviour, should_respond determines if the agent will respond after the action, and is_interruptible determines if the action can be interrupted.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/agents-with-actions.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BaseAction(Generic[ActionConfigType, ParametersType, ResponseType]):\n    def __init__(\n        self,\n        action_config: ActionConfigType,\n        should_respond: Literal[\"always\", \"sometimes\", \"never\"] = \"never\",\n        quiet: bool = False,\n        is_interruptible: bool = True,\n        **kwargs,\n    ):\n        self.action_config = action_config\n        self.should_respond = should_respond\n        self.quiet = quiet\n        self.is_interruptible = is_interruptible\n    \n    async def run(self, action_input: ActionInput[ParametersType]) -> ActionOutput[ResponseType]:\n        raise NotImplementedError\n```\n\n----------------------------------------\n\nTITLE: Creating ElevenLabs Voice in Vocode (Python)\nDESCRIPTION: This snippet shows how to create an ElevenLabs voice in Vocode. The request object requires `voice_id`, `stability`, `similarity_boost`, `model_id`, and `optimize_streaming_latency` to be configured. The `type` must be set to `voice_eleven_labs`. These parameters control the characteristics of the generated voice.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/voices.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nvoice = vocode_client.voices.create_voice(\n    request={\n        \"type\": \"voice_eleven_labs\",\n        \"voice_id\": \"06oPEcZqPWhZ2IeTcOJc\",\n        \"stability\": \".2\",\n        \"similarity_boost\": \".75\",\n        \"model_id\": \"eleven_turbo_v2\",\n        \"optimize_streaming_latency\": \"4\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Link Number to Vocode - Python\nDESCRIPTION: This snippet links an existing phone number from a telephony provider (like Twilio) to Vocode using the `link_number` method. It requires a `phone_number` and the `account_connection_id` of the Twilio account connection. It then prints the result of the operation.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/setting-up-number.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnumber_to_link = \"1123456789\"\nprint(\n    vocode_client.numbers.link_number(\n        phone_number=number_to_link,\n        telephony_account_connection=account_connection_id,\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Agent with Prompt ID in Python\nDESCRIPTION: This snippet shows how to update an agent with the ID of a previously created prompt. It uses the `vocode_client.agents.update_agent` method to update the agent's prompt by providing the agent ID and the prompt ID in the `AgentUpdateParams` object.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/prompts.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nupdate_response = vocode_client.agents.update_agent(\n    id=agent_id,\n    request=AgentUpdateParams(\n        prompt=prompt.id,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Executing outbound call script\nDESCRIPTION: This command runs the outbound_call.py script using Poetry. This script is responsible for making outbound phone calls using the TelephonyServer. Requires configuring the 'to_phone' and 'from_phone' variables within the script.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python outbound_call.py\n```\n\n----------------------------------------\n\nTITLE: Link Existing Twilio Number to Vocode (Python)\nDESCRIPTION: This snippet shows how to link an existing Twilio phone number to Vocode using the `/v1/numbers/link` endpoint. It requires the Vocode client and your account connection ID.  The `outbound_only` parameter specifies whether the number is used for outbound calls only.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/bring-your-own-telephony.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.numbers.link_number(\n    phone_number=\"1234567890\",\n    telephony_account_connection=\"YOUR_ACCOUNT_CONNECTION_ID\",\n    outbound_only=True\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Number with Webhook (TypeScript)\nDESCRIPTION: This snippet updates a phone number with an inbound agent and a webhook configured to listen for the `EventPhoneCallConnected` event and send a POST request to the specified URL. Requires `@vocode/vocode-api/api`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/webhooks.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { EventType, HttpMethod } from \"@vocode/vocode-api/api\";\n\nconst number = await vocode.numbers.updateNumber({\n  phoneNumber: \"YOUR_NUMBER\",\n  inboundAgent: {\n    webhook: {\n      subscriptions: [EventType.EventPhoneCallConnected],\n      url: \"https://example.com\",\n      method: HttpMethod.Post,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Play.ht Voice in Vocode (Python)\nDESCRIPTION: This code snippet demonstrates how to create a Play.ht voice within the Vocode platform using the `vocode_client.voices.create_voice` method. It requires the `voice_id` and `version` to be specified in the request object. The 'type' field must be set to 'voice_play_ht'.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/voices.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nvoice = vocode_client.voices.create_voice(\n    request={\n        \"type\": \"voice_play_ht\",\n        \"voice_id\": \"voice_id\",\n        \"version\": \"2\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Deepgram Transcription for Spanish\nDESCRIPTION: This code snippet shows how to configure the DeepgramTranscriber to use a Spanish language model for speech-to-text. It creates a DeepgramTranscriberConfig object and sets the `language` parameter to \"es\" (Spanish) and specifies the `nova-2` model. The `nova-2` model is required because the default model may not support all languages.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/language-support.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.models.transcriber import DeepgramTranscriberConfig\n\ntranscriber_config = DeepgramTranscriberConfig(\n    language=\"es\" # Spanish\n    model=\"nova-2\" # Most languages are supported on the Nova 2 model\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up WhisperCPPTranscriber in StreamingConversation (Python)\nDESCRIPTION: This code snippet shows how to configure the `WhisperCPPTranscriber` within a `StreamingConversation` to use a locally downloaded Whisper.cpp model for speech transcription.  It requires specifying the paths to the Whisper.cpp shared library and the model file. The `from_input_device` method is used to configure the transcriber with microphone input.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.models.transcriber import WhisperCPPTranscriberConfig\nfrom vocode.streaming.transcriber.whisper_cpp_transcriber import WhisperCPPTranscriber\n\nStreamingConversation(\n    ...\n    transcriber=WhisperCPPTranscriber(\n        WhisperCPPTranscriberConfig.from_input_device(\n            microphone_input,\n            libname=\"/whisper.cpp/libwhisper.so\",\n            fname_model=\"/whisper.cpp/models/ggml-tiny.bin\",\n        )\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Example of API Response format for Vocode\nDESCRIPTION: This Python snippet demonstrates the expected structure of the API response for Vocode external actions. The response is expected to have a result field containing the action result, and an optional agent_message string, which will be synthesized and played to the user. This prevents the LLM from having to be queried to send a message.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/external-action.mdx#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nResponse {\n  result: Any\n  agent_message: Optional[str] = None\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rime Voice in Vocode (Python)\nDESCRIPTION: This code demonstrates creating a Rime voice in Vocode. The request object requires `speaker` and `model_id`. The 'type' field should be set to 'voice_rime'. The `speaker` parameter specifies the desired voice actor and `model_id` specifies the model to use.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/voices.mdx#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nvoice = vocode_client.voices.create_voice(\n    request={\n        \"type\": \"voice_rime\",\n        \"speaker\": \"amber\",\n        \"model_id\": \"mist\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Define Agent Configuration (Pydantic Model)\nDESCRIPTION: Defines a custom agent configuration class, `BrokenRecordAgentConfig`, which inherits from `AgentConfig` and includes a `message` field to store the agent's static response.  Serialization is automatically handled by Pydantic. The `type` attribute is set to \"agent_broken_record\" to link it to a specific agent type.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/create-your-own-agent.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode.streaming.models.agent import AgentConfig\n\nclass BrokenRecordAgentConfig(AgentConfig, type=\"agent_broken_record\"):\n    message: str # The message we will always return\n```\n\n----------------------------------------\n\nTITLE: Set Agent Language with Python\nDESCRIPTION: This Python snippet demonstrates how to update a phone number's inbound agent to use a specific language. It utilizes the `vocode_client.numbers.update_number` method with the `AgentUpdateParams` object to set the language.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/multilingual.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode import AgentUpdateParams\n\nlanguage = \"es\" # [\"en\", \"es\", \"de\"]\nnumber = vocode_client.numbers.update_number(\n    phone_number=\"YOUR_NUMBER\", inbound_agent=AgentUpdateParams(language=language)\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Events Manager Implementation in Python\nDESCRIPTION: This code demonstrates how to create a custom EventsManager by subclassing vocode.streaming.utils.EventsManager and overriding the handle_event method.  It subscribes to the TRANSCRIPT_COMPLETE event and prints the transcript when the event is received. It requires vocode.streaming.models.events, vocode.streaming.models.transcript, and vocode.streaming.utils.events_manager dependencies.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/events-manager.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.models.events import Event, EventType\nfrom vocode.streaming.models.transcript import TranscriptCompleteEvent\nfrom vocode.streaming.utils.events_manager import EventsManager\n\n\nclass CustomEventsManager(EventsManager):\n    def __init__(self):\n        super().__init__([EventType.TRANSCRIPT_COMPLETE])\n\n    async def handle_event(self, event: Event):\n        if isinstance(event, TranscriptCompleteEvent):\n            print(\"The call has finished, the transcript was\", event.transcript.to_string())\n```\n\n----------------------------------------\n\nTITLE: Updating Number with Webhook (Python)\nDESCRIPTION: This snippet updates a phone number with an inbound agent that includes a webhook. The webhook is configured to send a POST request to the specified URL when a phone call ends.  Requires the `vocode` library.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/webhooks.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode import AgentUpdateParams, EventType, HttpMethod, WebhookUpdateParams\n\nnew_webhook = WebhookUpdateParams(\n    subscriptions=[EventType.EVENT_PHONE_CALL_ENDED],\n    url=\"https://example.com\",\n    method=HttpMethod.POST,\n)\n\nnumber = vocode_client.numbers.update_number(\n    phone_number=\"YOUR_NUMBER\",\n    inbound_agent=AgentUpdateParams(\n        webhook=new_webhook,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Create OpenAI Account Connection in Vocode (Python)\nDESCRIPTION: This snippet demonstrates how to create an account connection in Vocode using the Vocode API, providing your OpenAI API key. The `type` is set to `account_connection_openai` and `credentials` contain the API key. The function returns parameters including the `id` for the account connection.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/bring-your-own-openai.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.client import Vocode\n\nvocode_client.account_connections.create_account_connection(\n    request={\n        \"type\": \"account_connection_openai\",\n        \"credentials\": {\n            \"openai_api_key\": \"YOUR_OPENAI_API_KEY\",\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Run chat agent script\nDESCRIPTION: Runs the agent script to interact with the agent in text format. This command executes the `chat.py` script located in the `playground/streaming/agent/` directory, using the agent configuration specified in that file.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/playground.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake chat\n```\n\n----------------------------------------\n\nTITLE: Implementing DTMF Action - Python\nDESCRIPTION: This snippet demonstrates how to configure a DTMF action for navigating phone trees. It creates an outbound call using `vocode_client.calls.create_call` and includes a `DtmfActionParams` within the `actions` list of the `CreateCallAgentParams` object. The `type` parameter is set to `action_dtmf`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/ivr-navigation.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.calls.create_call(\n    from_number=\"<YOUR VOCODE NUMBER>\",\n    to_number=\"15555555555\",\n    agent=CreateCallAgentParams(\n        actions=[DtmfActionParams(type=\"action_dtmf\")],\n        ...\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Azure Configuration in StreamingConversation (Python)\nDESCRIPTION: This example illustrates how to configure and use the Azure synthesizer within a `StreamingConversation` in Vocode. It uses the `AzureSynthesizerConfig.from_output_device()` method to create the configuration, extracting the sampling rate and audio encoding from the `speaker_output` object. Microphone and speaker setup is necessary.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/using-synthesizers.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.models.synthesizer import AzureSynthesizerConfig\nfrom vocode.helpers import create_microphone_input_and_speaker_output\n\nmicrophone_input, speaker_output = create_microphone_input_and_speaker_output(\n        streaming=True, use_default_devices=False\n)\n\nconversation = StreamingConversation(\n    ...\n    synthesizer=AzureSynthesizer(\n        AzureSynthesizerConfig.from_output_device(speaker_output)\n    ),\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Cartesia Configuration for Telephony (Python)\nDESCRIPTION: This snippet configures the Cartesia synthesizer for telephone output within Vocode. It uses `CartesiaSynthesizerConfig.from_telephone_output_device()`, requiring an API key and voice ID from environment variables. This config enables Cartesia's low-latency streaming API via WebSockets.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/using-synthesizers.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsynthesizer_config=CartesiaSynthesizerConfig.from_telephone_output_device(\n    api_key=os.getenv(\"CARTESIA_API_KEY\"),\n    voice_id=os.getenv(\"CARTESIA_VOICE_ID\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Events Manager with StreamingConversation in Python\nDESCRIPTION: This code snippet shows how to integrate the CustomEventsManager into a StreamingConversation.  The events_manager parameter of the StreamingConversation constructor is used to pass in an instance of the CustomEventsManager.  Dependencies include the CustomEventsManager class and StreamingConversation.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/events-manager.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconversation = StreamingConversation(\n    ...,\n    events_manager=CustomEventsManager()\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Number with Raw Action - Python\nDESCRIPTION: Updates a phone number's inbound agent with a raw action payload, allowing for direct configuration of actions.  The `vocode_client.numbers.update_number` method is used with the `AgentUpdateParams`, encapsulating the action's `type` and `config`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode import AgentUpdateParams, TransferCallActionUpdateParams\n\nvocode_client.numbers.update_number(\n  phone_number=\"11234567890\",\n  inbound_agent=AgentUpdateParams(\n      actions=[TransferCallActionUpdateParams(\n          type=\"action_transfer_call\",\n          config={\n              \"phone_number\":\"11234567890\"\n          }\n      )]\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Vocode Client in Python\nDESCRIPTION: Initializes the Vocode client in Python using the `vocode-api` package. Requires an API key. The code then lists available numbers and prints the response.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/hosted-quickstart.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.client import Vocode\n\nvocode_client = Vocode(\n  token=\"YOUR_API_KEY\"\n)\n\nlist_numbers_response = vocode_client.numbers.list_numbers()\n\nprint(list_numbers_response)\n```\n\n----------------------------------------\n\nTITLE: Turn-Based Conversation Implementation\nDESCRIPTION: This code initializes and runs a turn-based conversation using Vocode. It creates instances of `WhisperTranscriber`, `ChatGPTAgent`, and `AzureSynthesizer`, configured with settings loaded from the `Settings` class. The conversation loop captures user input via the microphone, initiates speech recognition, and responds using the synthesized voice, handling keyboard interrupts to exit the loop.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/turn-based-conversation.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    (\n        microphone_input,\n        speaker_output,\n    ) = create_turn_based_microphone_input_and_speaker_output(\n        use_default_devices=False,\n    )\n\n    conversation = TurnBasedConversation(\n        input_device=microphone_input,\n        output_device=speaker_output,\n        transcriber=WhisperTranscriber(api_key=settings.openai_api_key),\n        agent=ChatGPTAgent(\n            system_prompt=\"The AI is having a pleasant conversation about life\",\n            initial_message=\"Hello!\",\n            api_key=settings.openai_api_key,\n        ),\n        synthesizer=AzureSynthesizer(\n            api_key=settings.azure_speech_key,\n            region=settings.azure_speech_region,\n            voice_name=\"en-US-SteffanNeural\",\n        ),\n    )\n    print(\"Starting conversation. Press Ctrl+C to exit.\")\n    while True:\n        try:\n            input(\"Press enter to start recording...\")\n            conversation.start_speech()\n            input(\"Press enter to end recording...\")\n            conversation.end_speech_and_respond()\n        except KeyboardInterrupt:\n            break\n```\n\n----------------------------------------\n\nTITLE: Create Outbound Call with Do Not Call Detection - Python\nDESCRIPTION: This snippet shows how to create an outbound call with Do Not Call detection enabled using the Vocode API. It sets the `run_do_not_call_detection` parameter to `True` when creating the call. Requires the `vocode` library.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/do-not-call-detection.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import CreateCallAgentParams, PromptParams\n\nvocode_client.calls.create_call(\n    from_number=\"<YOUR VOCODE NUMBER>\",\n    to_number=\"15555555555\",\n    agent=CreateCallAgentParams(\n        prompt=PromptParams(\n            content=\"Ask Eliot if the sun is on today\"\n        ),\n    ),\n    run_do_not_call_detection=True\n)\n```\n\n----------------------------------------\n\nTITLE: Create Twilio Account Connection via Vocode API (Python)\nDESCRIPTION: This code snippet demonstrates how to create a new Twilio account connection using the Vocode API. It requires the `vocode` Python package and your Twilio account SID and auth token. The `create_account_connection` function returns parameters including the account connection ID.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/bring-your-own-telephony.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.client import Vocode\n\nvocode_client.account_connections.create_account_connection(\n    request={\n        \"type\": \"account_connection_twilio\",\n        \"credentials\": {\n            \"twilio_account_sid\": \"YOUR_ACCOUNT_SID\",\n            \"twilio_auth_token\": \"YOUR_AUTH_TOKEN\",\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Create TransferCall Action in Vocode (Python)\nDESCRIPTION: This snippet creates an action to transfer a call to another phone number using the Vocode client.  It uses the `action_transfer_call` action type and specifies the `phone_number` in the `config`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.actions.create_action(\n  request={\n      \"type\":\"action_transfer_call\",\n      \"config\":{\n          \"phone_number\":\"11234567890\"\n      }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Update Number with Action UUID (Python)\nDESCRIPTION: This snippet updates a phone number with an inbound agent that includes a list of action UUIDs using the Vocode client in Python.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import AgentUpdateParams\n\nvocode_client.numbers.update_number(\n  phone_number=\"11234567890\",\n  inbound_agent=AgentUpdateParams(\n      actions=[\"<ACTION UUID>\"]\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Generating a Secure Signature Secret (Python)\nDESCRIPTION: This Python snippet demonstrates how to generate a secure signature secret using the `os` and `base64` modules.  A cryptographically secure random string of 32 bytes is generated, then base64 encoded, and finally decoded to a string. This secret should be stored securely and used to validate incoming requests.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/external-action.mdx#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nimport base64\n\nsignature_secret = base64.b64encode(os.urandom(32)).decode()\n```\n\n----------------------------------------\n\nTITLE: Installing Vocode Core using pip\nDESCRIPTION: This command demonstrates how to install the Vocode Core package using pip, the Python package installer. It allows users to quickly set up Vocode and its dependencies.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vocode\n```\n\n----------------------------------------\n\nTITLE: Copying environment template file\nDESCRIPTION: Copies the .env.template file to .env, allowing the user to populate it with their API keys for Deepgram, OpenAI, Azure, and Twilio. These keys are essential for the correct operation of the telephony application.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.template .env\n```\n\n----------------------------------------\n\nTITLE: Streaming Conversation with OpenAI and Azure\nDESCRIPTION: This Python snippet demonstrates how to create a streaming conversation using Vocode with Deepgram for transcription, ChatGPT for the agent, and Azure for speech synthesis. It configures the necessary settings, initializes the input and output devices, and sets up the conversation loop to process audio chunks from the microphone.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport signal\n\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\nfrom vocode.helpers import create_streaming_microphone_input_and_speaker_output\nfrom vocode.logging import configure_pretty_logging\nfrom vocode.streaming.agent.chat_gpt_agent import ChatGPTAgent\nfrom vocode.streaming.models.agent import ChatGPTAgentConfig\nfrom vocode.streaming.models.message import BaseMessage\nfrom vocode.streaming.models.synthesizer import AzureSynthesizerConfig\nfrom vocode.streaming.models.transcriber import (\n    DeepgramTranscriberConfig,\n    PunctuationEndpointingConfig,\n)\nfrom vocode.streaming.streaming_conversation import StreamingConversation\nfrom vocode.streaming.synthesizer.azure_synthesizer import AzureSynthesizer\nfrom vocode.streaming.transcriber.deepgram_transcriber import DeepgramTranscriber\n\nconfigure_pretty_logging()\n\n\nclass Settings(BaseSettings):\n    \"\"\"\n    Settings for the streaming conversation quickstart.\n    These parameters can be configured with environment variables.\n    \"\"\"\n\n    openai_api_key: str = \"ENTER_YOUR_OPENAI_API_KEY_HERE\"\n    azure_speech_key: str = \"ENTER_YOUR_AZURE_KEY_HERE\"\n    deepgram_api_key: str = \"ENTER_YOUR_DEEPGRAM_API_KEY_HERE\"\n\n    azure_speech_region: str = \"eastus\"\n\n    # This means a .env file can be used to overload these settings\n    # ex: \"OPENAI_API_KEY=my_key\" will set openai_api_key over the default above\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"ignore\",\n    )\n\n\nsettings = Settings()\n\n\nasync def main():\n    (\n        microphone_input,\n        speaker_output,\n    ) = create_streaming_microphone_input_and_speaker_output(\n        use_default_devices=False,\n    )\n\n    conversation = StreamingConversation(\n        output_device=speaker_output,\n        transcriber=DeepgramTranscriber(\n            DeepgramTranscriberConfig.from_input_device(\n                microphone_input,\n                endpointing_config=PunctuationEndpointingConfig(),\n                api_key=settings.deepgram_api_key,\n            ),\n        ),\n        agent=ChatGPTAgent(\n            ChatGPTAgentConfig(\n                openai_api_key=settings.openai_api_key,\n                initial_message=BaseMessage(text=\"What up\"),\n                prompt_preamble=\"\"\"The AI is having a pleasant conversation about life\"\"\",\n            )\n        ),\n        synthesizer=AzureSynthesizer(\n            AzureSynthesizerConfig.from_output_device(speaker_output),\n            azure_speech_key=settings.azure_speech_key,\n            azure_speech_region=settings.azure_speech_region,\n        ),\n    )\n    await conversation.start()\n    print(\"Conversation started, press Ctrl+C to end\")\n    signal.signal(signal.SIGINT, lambda _0, _1: asyncio.create_task(conversation.terminate()))\n    while conversation.is_active():\n        chunk = await microphone_input.get_audio()\n        conversation.receive_audio(chunk)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload for Human Detection Event\nDESCRIPTION: This JSON payload represents the structure of the POST request sent to the configured webhook URL when the answering machine detection status is determined. The `result` field indicates whether a human or no human was detected on the call.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/machine-detection.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"event_human_detection\",\n  \"call_id\": \"<some UUID>\",\n  \"payload\": {\n    \"result\": \"no_human\" # or \"human\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LangChain Agent Configuration with OpenAI\nDESCRIPTION: This code snippet demonstrates how to configure a LangChain agent with Vocode using the OpenAI model. It shows how to specify the model name and provider in the LangchainAgentConfig.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode.streaming.models.agent import LangchainAgentConfig\n\nagent_config = LangchainAgentConfig(\n    ...\n    model_name = \"gpt-4o\"\n    provider = \"openai\"\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Creating DTMF Action - TypeScript\nDESCRIPTION: Creates an action that allows the Vocode agent to send DTMF tones during a phone call, useful for navigating phone trees. The `vocode.actions.createAction` method is used with the `action_dtmf` type.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst number = await vocode.actions.createAction({\n  type: \"action_dtmf\",\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Telephony Server with Uvicorn\nDESCRIPTION: This command starts the TelephonyServer using Uvicorn, an ASGI server. It specifies the main.py file as the entry point and the app object as the application to run. The server is configured to listen on port 3000.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npoetry run uvicorn main:app --port 3000\n```\n\n----------------------------------------\n\nTITLE: Create EndConversation Action in Vocode (TypeScript)\nDESCRIPTION: This snippet creates an action to end the conversation using the Vocode client in TypeScript. It uses the `action_end_conversation` action type.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst number = await vocode.actions.createAction({\n  type: \"action_end_conversation\",\n});\n```\n\n----------------------------------------\n\nTITLE: View Call Objects with Telephony Details (JSON)\nDESCRIPTION: This JSON snippet displays the structure of a call object after integrating Twilio with Vocode. It includes fields such as `telephonyId` (Twilio call SID) and `telephonyAccountConnection`, which contains details about the associated Twilio account connection, including the account SID and auth token.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/bring-your-own-telephony.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    id: 'call_id',\n    userId: 'user_id',\n    toNumber: '123456789',\n    fromNumber: '123456789',\n    ...\n    telephonyId: 'telephony_id',\n    telephonyAccountConnection: {\n        'id': 'account_connection_id', \n        'user_id': 'user_id', \n        'credentials': {\n            'twilio_account_sid': 'YOUR_TWILIO_ACCOUNT_SID',\n            'twilio_auth_token': 'YOUR_TWILIO_AUTH_TOKEN'\n        }, \n        'type': 'account_connection_twilio'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create TransferCall Action in Vocode (cURL)\nDESCRIPTION: This snippet demonstrates how to create an action to transfer a call to another phone number using a cURL request to the Vocode API. It sets the `type` to `action_transfer_call` and includes the `phone_number` in the `config` within the request body.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/actions/create \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"type\": \"action_transfer_call\",\n  \"config\": {\n    \"phone_number\": \"11234567890\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Running Telephony App with Docker Compose\nDESCRIPTION: This command uses Docker Compose to start the telephony application and its dependencies (like Redis) defined in the docker-compose.yml file. It simplifies the deployment process by managing the containers and their interconnections.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Configure JSON Logging with Loguru (Python)\nDESCRIPTION: This snippet shows how to configure Loguru for JSON logging in production environments. It imports the `configure_json_logging` function from the `vocode.logging` module and invokes it to set up logging to output structured JSON logs, suitable for parsing and analysis by logging systems.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/logging-with-loguru.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.logging import configure_json_logging\n\nconfigure_json_logging()\n```\n\n----------------------------------------\n\nTITLE: Hang Up on Voicemail with Vocode\nDESCRIPTION: This code snippet demonstrates how to configure a Vocode outbound call to hang up if an answering machine is detected. The `on_no_human_answer` parameter is set to 'hangup'. It requires the Vocode Python client library to be installed.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/machine-detection.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import CreateCallAgentParams, PromptParams\n\nvocode_client.calls.create_call(\n    from_number=\"<YOUR VOCODE NUMBER>\",\n    to_number=\"15555555555\",\n    agent=CreateCallAgentParams(\n        prompt=PromptParams(\n            content=\"Ask Ajay if his refrigerator is running\"\n        ),\n    ),\n    on_no_human_answer=\"hangup\",\n)\n```\n\n----------------------------------------\n\nTITLE: Create context endpoint with FastAPI - Python\nDESCRIPTION: This snippet sets up a simple context endpoint using FastAPI. The endpoint accepts a phone_number as a URL parameter and returns a JSON object containing the user's name if the phone number matches a predefined value. If the phone number is not recognized, it returns an empty JSON object.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/injecting-context.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/my-context-endpoint\")\ndef endpoint(phone_number: str):\n    if phone_number == \"123\":\n        return {\"name\": \"Kian\"}\n    elif phone_number == \"456\":\n        return {\"name\": \"Ajay\"}\n    else:\n        return {}\n```\n\n----------------------------------------\n\nTITLE: Install Vocode API with Poetry\nDESCRIPTION: Installs the `vocode-api` package using Poetry.  This is a prerequisite for using the Vocode Python SDK.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/hosted-quickstart.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry add vocode-api\n```\n\n----------------------------------------\n\nTITLE: Creating a Voice using ElevenLabs in Python\nDESCRIPTION: This snippet creates a new voice using the ElevenLabs API through the Vocode client. It sets parameters such as voice ID, stability, similarity boost, model ID, and optimize streaming latency. It requires the `vocode_client` object to be initialized.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/configuring-number.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvoice = vocode_client.voices.create_voice(\n    request={\n        \"type\": \"voice_eleven_labs\",\n        \"voice_id\": \"06oPEcZqPWhZ2IeTcOJc\",\n        \"stability\": \".2\",\n        \"similarity_boost\": \".75\",\n        \"model_id\": \"eleven_turbo_v2\",\n        \"optimize_streaming_latency\": \"4\",\n    }\n)\n\nvoice_id = voice.id\n```\n\n----------------------------------------\n\nTITLE: Updating Agent with Pinecone Configuration (Python)\nDESCRIPTION: This Python snippet demonstrates how to update an agent's configuration in Vocode to connect to a Pinecone vector database. It uses the `AgentUpdateParams` and `PineconeVectorDatabaseUpdateParams` classes to specify the database type, index, API key, and API environment. Requires the `vocode` library.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/vectordb.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import AgentUpdateParams, PineconeVectorDatabaseUpdateParams\n\nagent = vocode_client.agents.update_agent(\n    id=\"AGENT_ID\",\n    request=AgentUpdateParams(\n        vector_database=PineconeVectorDatabaseUpdateParams(\n            type=\"vector_database_pinecone\",\n            index=\"PINECONE_INDEX\",\n            api_key=\"PINECONE_API_KEY\",\n            api_environment=\"PINECONE_API_ENVIRONMENT\",\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Text-to-Speech for German\nDESCRIPTION: This code snippet demonstrates how to configure the AzureSynthesizer to use a German voice. It involves creating an AzureSynthesizerConfig object and setting the `voice_name` and `language_code` parameters to German-specific values.  This configuration ensures that the text is synthesized using a German neural voice.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/language-support.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.models.synthesizer import AzureSynthesizerConfig\n\nsynthesizer_config = AzureSynthesizerConfig(\n    voice_name=\"de-DE-KatjaNeural\" # German voice\n    language_code=\"de-DE\" # Language of text to be synthesized\n)\n```\n\n----------------------------------------\n\nTITLE: Install Vocode API with Pip\nDESCRIPTION: Installs the `vocode-api` package using pip. This is a prerequisite for using the Vocode Python SDK.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/hosted-quickstart.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install vocode-api\n```\n\n----------------------------------------\n\nTITLE: Instrument Streaming Conversation with Sentry\nDESCRIPTION: This snippet illustrates how to instrument a streaming conversation in Vocode using Sentry. It initializes Sentry, starts a transaction, and sets the transaction to capture spans during the conversation.  AsyncioIntegration and LoguruIntegration are used. The sentry_transaction is set to enable capture of spans.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/sentry.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sentry_sdk\nfrom sentry_sdk.integrations.asyncio import AsyncioIntegration\nfrom sentry_sdk.integrations.loguru import LoguruIntegration\nfrom vocode import sentry_transaction\n\nsentry_sdk.init(\n    ...,\n    integrations=[\n        AsyncioIntegration(),\n        LoguruIntegration(),\n    ],\n)\n\nasync def main():\n    ...\n    await conversation.start()\n    ...\n\n\nif __name__ == \"__main__\":\n    with sentry_sdk.start_transaction(\n        op=\"streaming_conversation\", description=\"streaming_conversation\"\n    ) as sentry_txn:\n        sentry_transaction.set(sentry_txn)\n        asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating a Prompt in Python\nDESCRIPTION: This snippet creates a new prompt using the Vocode API. It defines the prompt content as a string and then creates a prompt object using the `vocode_client.prompts.create_prompt` method. It requires the `vocode_client` object to be initialized.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/configuring-number.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPROMPT = \"\"\"\nsample prompt\n\"\"\"\n\nprompt = vocode_client.prompts.create_prompt(request={\"content\": PROMPT})\nprompt_id = prompt.id\n```\n\n----------------------------------------\n\nTITLE: Get Specific Call by ID (TypeScript)\nDESCRIPTION: This snippet retrieves a specific call object using its ID with the Vocode API TypeScript client. The 'id' parameter specifies the call ID to retrieve. Requires an initialized 'vocode' client.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/retrieve-call-data.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst calls = await vocode.calls.getCall({ id: \"CALL_ID\" });\n```\n\n----------------------------------------\n\nTITLE: Dynamic Language Configuration with Environment Variables\nDESCRIPTION: This code snippet demonstrates how to load speech synthesizer voice and transcription model configurations from environment variables. This approach allows you to dynamically configure the speech language without modifying the code. It uses `os.getenv` to retrieve the voice and model names from environment variables, providing a default value if the variable is not set.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/language-support.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom vocode.streaming.models.synthesizer import AzureSynthesizerConfig\nfrom vocode.streaming.models.transcriber import DeepgramTranscriberConfig\n\nSYNTHESIZER_VOICE = os.getenv(\"SYNTHESIZER_VOICE\", default=\"en-US-AriaNeural\")\nASR_MODEL = os.getenv(\"DEEPGRAM_MODEL\", default=\"en-US\")\n\nsynthesizer_config = AzureSynthesizerConfig(voice=SYNTHESIZER_VOICE)\ntranscriber_config = DeepgramTranscriberConfig(model=DEEPGRAM_MODEL)\n```\n\n----------------------------------------\n\nTITLE: Install Vocode API with Yarn\nDESCRIPTION: Installs the `@vocode/vocode-api` package using Yarn.  This is a prerequisite for using the Vocode Node SDK.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/hosted-quickstart.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @vocode/vocode-api\n```\n\n----------------------------------------\n\nTITLE: Loading, Splitting, and Indexing Documents\nDESCRIPTION: This code block loads, splits, and indexes documents from the 'libraries_documentation' directory. It uses `DirectoryLoader` with `UnstructuredFileLoader` to load markdown files, `SpacyTextSplitter` to split the documents into chunks of 1000 characters, `OpenAIEmbeddings` to generate embeddings, and `Pinecone` to create and populate a vector index. The Pinecone index name is retrieved from environment variables.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/voice_rag/manual_pinecone_ingestor.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nloader = DirectoryLoader('./libraries_documentation', glob=\"**/*.md*\", show_progress=True, loader_cls=UnstructuredFileLoader)\n\n'''\nLoad the documents from the directory.\n'''\nprint(\"Loading documents...\")\ndocuments = loader.load()\n\n'''\nCreate a SpacyTextSplitter object to split the documents into chunks of 1000 characters.\n'''\ntext_splitter = SpacyTextSplitter(chunk_size=1000)\n\n'''\nSplit the documents into chunks.\n'''\nprint(\"Splitting documents...\")\ndocs = text_splitter.split_documents(documents)\n\n'''\nCreate an OpenAIEmbeddings object to generate embeddings for the documents.\n'''\nembeddings = OpenAIEmbeddings()\n\n'''\nInitialize the Pinecone client with the API key and environment variables.\n'''\npinecone.init(\n    api_key=PINECONE_API_KEY,\n    environment=PINECONE_ENVIRONMENT,\n)\n\n'''\nSet the name of the Pinecone index.\n'''\nindex_name = PINECONE_INDEX\n\n'''\nCreate a Pinecone index from the documents and their embeddings.\n'''\nprint(\"Creating index...\")\ndocsearch = Pinecone.from_documents(docs, embeddings, index_name=index_name)\n```\n\n----------------------------------------\n\nTITLE: Configure Pretty Logging with Loguru (Python)\nDESCRIPTION: This snippet demonstrates how to configure Loguru for pretty printing in local development environments. It imports the `configure_pretty_logging` function from the `vocode.logging` module and calls it to set up the logging system for colored, human-readable output during development.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/logging-with-loguru.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.logging import configure_pretty_logging\n\nconfigure_pretty_logging()\n```\n\n----------------------------------------\n\nTITLE: Play.ht v2 Configuration for Telephony (Python)\nDESCRIPTION: This code snippet illustrates how to configure the Play.ht synthesizer using their new gRPC streaming API for real-time communication within Vocode. It uses `PlayHtSynthesizerConfig.from_telephone_output_device()`. The API key and user ID are sourced from environment variables.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/using-synthesizers.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n...\nsynthesizer_config=PlayHtSynthesizerConfig.from_telephone_output_device(\n    api_key=os.getenv(\"PLAY_HT_API_KEY\"),\n    user_id=os.getenv(\"PLAY_HT_USER_ID\"),\n)\n...\n```\n\n----------------------------------------\n\nTITLE: Cartesia Configuration with Voice Controls (Python)\nDESCRIPTION: This code demonstrates how to control the speed and emotion of the Cartesia synthesizer within Vocode by setting the `speed` and `emotion` parameters within the `experimental_voice_controls` dictionary in the `CartesiaSynthesizerConfig`. API key and voice ID from environment variables are required.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/using-synthesizers.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCartesiaSynthesizerConfig(\n    api_key=os.getenv(\"CARTESIA_API_KEY\"),\n    voice_id=os.getenv(\"CARTESIA_VOICE_ID\"),\n    experimental_voice_controls={\n        \"speed\": \"slow\",\n        \"emotion\": \"positivity: high\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Prompt in Python\nDESCRIPTION: This snippet demonstrates how to create a standard prompt with raw text using the Vocode API. It defines a prompt as a string and then uses the `vocode_client.prompts.create_prompt` method to create a prompt object.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/prompts.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPROMPT = \"\"\"\nsample prompt\n\"\"\"\n\nprompt = vocode_client.prompts.create_prompt(request=PromptParams(content=PROMPT))\n```\n\n----------------------------------------\n\nTITLE: Updating Agent with Pinecone Configuration (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to update an agent's configuration in Vocode to connect to a Pinecone vector database. It uses the `vocode.agents.updateAgent` method and passes in the database type, index, API key, and API environment. Requires the `vocode` library.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/vectordb.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst agent = await vocode.agents.updateAgent({\n  id: \"AGENT_ID\",\n  body: {\n    vector_database: {\n      type: \"vector_database_pinecone\",\n      index: \"PINECONE_INDEX\",\n      api_key: \"PINECONE_API_KEY\",\n      api_environment: \"PINECONE_API_ENVIRONMENTr\",\n    },\n  },\n});\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: FastAPI Local Response Server (Python)\nDESCRIPTION: This Python code shows an example using FastAPI for a local response server.  It handles POST requests to the /external_action endpoint, validates the Vocode signature, and returns a JSON response with a success message. It uses the `pydantic` and `fastapi` libraries, and simulates processing time using `time.sleep(3)`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/external-action.mdx#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\nimport base64\nimport hashlib\nimport hmac\nimport json\nimport time\n\nfrom fastapi import FastAPI, HTTPException, Request, status\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\naction_secret = \"\"\n\n\ndef is_signature_valid(request: Request, json_payload: dict):\n    signature_secret_as_bytes = base64.b64decode(action_secret)\n    decoded_digest = base64.b64decode(request.headers.get(\"x-vocode-signature\"))\n    calculated_digest = hmac.new(\n        signature_secret_as_bytes, json.dumps(json_payload).encode(), hashlib.sha256\n    ).digest()\n    return hmac.compare_digest(decoded_digest, calculated_digest)\n\n\n@app.post(\"/external_action\")\ndef update_item(request: Request):\n    json_payload = asyncio.run(request.json())\n    print(json_payload)\n    if not is_signature_valid(request, json_payload):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Signature verification failed for payload\",\n        )\n    time.sleep(3)\n    return {\n        \"result\": {\"success\": True},\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Conversation Speed in StreamingConversation (Python)\nDESCRIPTION: This code snippet demonstrates how to adjust the `conversation_speed` in a `StreamingConversation` object. The `speed_coefficient` parameter scales the endpointing pauses, affecting how quickly the bot responds to human input. A higher value results in faster response times, while a lower value causes the bot to respond more slowly.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/conversation-mechanics.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconversation = StreamingConversation(\n    speed_coefficient=2\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Running Redis with Docker\nDESCRIPTION: This command runs a Redis instance using Docker. It exposes port 6379, the default Redis port, and uses the redis/redis-stack:latest image, which includes Redis Stack modules. This provides a convenient way to run Redis without installing it directly on the host machine.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dp 6379:6379 -it redis/redis-stack:latest\n```\n\n----------------------------------------\n\nTITLE: Update Number with Action UUID (cURL)\nDESCRIPTION: This snippet demonstrates how to update a phone number with an inbound agent and a list of action UUIDs using a cURL request to the Vocode API.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/numbers/update?phone_number=11234567890 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"inbound_agent\": {\n    \"actions\": [\"<ACTION UUID>\"]\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamingConversation with Cloud Services (Python)\nDESCRIPTION: This code snippet demonstrates how to initialize a `StreamingConversation` object using default cloud-based services like Deepgram for transcription, ChatGPT for language modeling, and Azure for text-to-speech synthesis.  It sets up the basic conversation flow with an initial message and a prompt preamble. Dependencies include vocode.streaming and its associated modules for each service.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconversation = StreamingConversation(\n    output_device=speaker_output,\n    transcriber=DeepgramTranscriber(\n        DeepgramTranscriberConfig.from_input_device(microphone_input)\n    ),\n    agent=ChatGPTAgent(\n        ChatGPTAgentConfig(\n            initial_message=BaseMessage(text=\"Hello!\"),\n            prompt_preamble=\"The AI is having a pleasant conversation about life\"\n        )\n    ),\n    synthesizer=AzureSynthesizer(\n        AzureSynthesizerConfig.from_output_device(speaker_output)\n    ),\n    logger=logger,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up CoquiTTSSynthesizer in StreamingConversation (Python)\nDESCRIPTION: This code snippet demonstrates how to configure a `CoquiTTSSynthesizer` within a `StreamingConversation`.  It configures the synthesizer with the speaker output device and TTS-specific keyword arguments, including the model name. The `from_output_device` method initializes the synthesizer with the specified output.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.models.synthesizer import CoquiTTSSynthesizerConfig,\nfrom vocode.streaming.synthesizer.coqui_tts_synthesizer import CoquiTTSSynthesizer\n\nStreamingConversation(\n    ...\n    synthesizer=CoquiTTSSynthesizer(\n        CoquiTTSSynthesizerConfig.from_output_device(\n            speaker_output,\n            tts_kwargs = {\n                \"model_name\": \"tts_models/en/ljspeech/tacotron2-DDC_ph\"\n            }\n        )\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Action Update (POST)\nDESCRIPTION: Defines an OpenAPI specification snippet for a POST endpoint (/v1/actions/update) for updating actions. It specifies the HTTP method (POST), API version (v1), and the path for the endpoint.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/actions/update-action.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/actions/update\n```\n\n----------------------------------------\n\nTITLE: List Calls with Vocode API (cURL)\nDESCRIPTION: This cURL command retrieves a list of calls from the Vocode API.  It requires an API key in the Authorization header. The response will be a JSON array of call objects.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/retrieve-call-data.mdx#_snippet_2\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request GET \\\n  --url https://api.vocode.dev/v1/calls/list \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response to External Action API Request\nDESCRIPTION: This JSON snippet illustrates the expected format for a response to an external action API request. It includes a `result` field, which contains the outcome of the action, and an optional `agent_message` field to provide feedback to the agent.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/external-actions.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"success\": true\n  },\n  \"agent_message\": \"I've set up a calendar appointment at 10:30am tomorrow for 30 minutes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Agent with OpenAI Model Override (Python)\nDESCRIPTION: This snippet shows how to update an existing agent to use a custom OpenAI model via `openai_model_name_override`. Ensure `openai_account_connection` is specified if not already.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/bring-your-own-openai.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import AgentUpdateParams\n\nvocode_client.agents.update_agent(\n    id=\"YOUR_AGENT_ID\",\n    request=AgentUpdateParams(\n        openai_account_connection=\"YOUR_ACCOUNT_CONNECTION_ID\", # if not already updated\n        openai_model_name_override=\"gpt-4-1106-preview\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Update number with templated prompt - Python\nDESCRIPTION: This snippet demonstrates how to update a phone number in Vocode with a prompt that includes a template variable (${name}). It sets the content of the prompt and the context endpoint URL, which will be queried when an inbound call comes in to populate the template variable.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/injecting-context.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import AgentUpdateParams, PromptUpdateParams\n\nname_prompt = \"You are talking to ${name}\"\nnumber = vocode_client.numbers.update_number(\n    phone_number=\"YOUR_NUMBER\",\n    inbound_agent=AgentUpdateParams(\n        prompt=PromptUpdateParams(\n            content=name_prompt,\n            context_endpoint=\"YOUR_CONTEXT_URL\",\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Update Number with Action UUID (TypeScript)\nDESCRIPTION: This snippet updates a phone number with an inbound agent that includes a list of action UUIDs using the Vocode client in TypeScript.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvocode.numbers.updateNumber({\n  phoneNumber: \"11234567890\",\n  inboundAgent: {\n    actions: [\"<ACTION UUID>\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing IVR Navigation Mode - Python\nDESCRIPTION: This snippet shows how to initiate an outbound call with `ivr_navigation_mode` set to `default`.  This configuration allows the bot to stay silent while on hold and increases the idle conversation timeout to 10 minutes. It uses the `vocode_client.calls.create_call` method with the `CreateCallAgentParams` object.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/ivr-navigation.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.calls.create_call(\n    from_number=\"<YOUR VOCODE NUMBER>\",\n    to_number=\"15555555555\",\n    agent=CreateCallAgentParams(\n        ...,\n        ivr_navigation_mode=\"default\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Vocode with npm\nDESCRIPTION: Installs the Vocode package using npm. This is a prerequisite for using Vocode in a React project.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/react-quickstart.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vocode\n```\n\n----------------------------------------\n\nTITLE: Configuring Deepgram Transcriber for StreamingConversation (Python)\nDESCRIPTION: This code snippet shows how to configure the Deepgram transcriber for a local `StreamingConversation`. It uses `DeepgramTranscriberConfig.from_input_device()` to create a configuration object based on a given `microphone_input` object. The method extracts the audio parameters like sampling rate, audio encoding, and chunk size from the input device to set up transcription.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/using-transcribers.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode.streaming.models.transcriber import DeepgramTranscriberConfig, PunctuationEndpointingConfig\nfrom vocode.streaming import StreamingConversation\n\nasync def main():\n    microphone_input, speaker_output = create_microphone_input_and_speaker_output(\n        streaming=True, use_default_devices=False\n    )\n\n    conversation = StreamingConversation(\n        output_device=speaker_output,\n        transcriber=DeepgramTranscriber(\n            DeepgramTranscriberConfig.from_input_device(\n                microphone_input, endpointing_config=PunctuationEndpointingConfig()\n            )\n        ),\n        ...\n    )\n```\n\n----------------------------------------\n\nTITLE: Get Specific Call by ID (cURL)\nDESCRIPTION: This cURL command retrieves a specific call from the Vocode API using the call's ID. It requires an API key in the Authorization header and the CALL_ID to be specified in the URL.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/retrieve-call-data.mdx#_snippet_5\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request GET \\\n  --url https://api.vocode.dev/v1/calls/recording/<CALL_ID> \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Installing Vocode with pip\nDESCRIPTION: This command installs the vocode package using pip, the Python package installer. It downloads and installs the latest version of the vocode library and its dependencies from the Python Package Index (PyPI).\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/python-quickstart.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vocode\n```\n\n----------------------------------------\n\nTITLE: Create EndConversation Action in Vocode (Python)\nDESCRIPTION: This snippet creates an action to end the conversation using the Vocode client. It uses the `action_end_conversation` action type.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.actions.create_action(\n  request={\n      \"type\": \"action_end_conversation\",\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating TransferCall Action - cURL\nDESCRIPTION: Creates a transfer call action using a cURL request to the Vocode API. The request specifies the `action_transfer_call` type and includes the phone number to transfer to in the `config`. Requires a valid API key for authorization.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_8\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/actions/create \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"type\": \"action_transfer_call\",\n  \"config\": {\n    \"phone_number\": \"11234567890\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Deepgram Endpointing Configuration in Vocode\nDESCRIPTION: This code snippet defines the `DeepgramEndpointingConfig` class, which extends `EndpointingConfig`. It allows customization of Deepgram's endpointing features within Vocode, controlling how the system determines when a speaker has finished speaking. Parameters include `vad_threshold_ms`, `utterance_cutoff_ms`, `time_silent_config`, and `use_single_utterance_endpointing_for_first_utterance`.  It leverages features of Deepgram's transcription API.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/conversation-mechanics.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DeepgramEndpointingConfig(EndpointingConfig, type=\"deepgram\"):  # type: ignore\n    vad_threshold_ms: int = 500\n    utterance_cutoff_ms: int = 1000\n    time_silent_config: Optional[TimeSilentConfig] = Field(default_factory=TimeSilentConfig)\n    use_single_utterance_endpointing_for_first_utterance: bool = False\n```\n\n----------------------------------------\n\nTITLE: Download Call Recording (cURL)\nDESCRIPTION: This cURL command downloads a call recording from the Vocode API using the call's ID. It requires an API key in the Authorization header and the CALL_ID to be specified in the URL.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/retrieve-call-data.mdx#_snippet_8\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request GET \\\n  --url https://api.vocode.dev/v1/calls/recording/<CALL_ID> \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Creating a Phrase Trigger in Vocode\nDESCRIPTION: This snippet demonstrates how to create a PhraseBasedActionTrigger in Vocode. It imports necessary classes and configures a trigger that activates when the bot speaks a predefined phrase. The action is triggered when the bot's utterance contains the specified phrase.  The `conditions` parameter is currently limited to `phrase_condition_type_contains` and the matching is case-insensitive.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/action-triggers.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import (\n    PhraseBasedActionTrigger,\n    PhraseBasedActionTriggerConfig,\n    PhraseTrigger,\n)\n\nphrase_trigger = PhraseBasedActionTrigger(\n    config=PhraseBasedActionTriggerConfig(\n        phrase_triggers=[\n            PhraseTrigger(\n                phrase=\"I will transfer now\",\n                conditions=[\"phrase_condition_type_contains\"],\n            ),\n            PhraseTrigger(\n                phrase=\"You can speak to a human now\",\n                conditions=[\"phrase_condition_type_contains\"],\n            )\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Run Docker Container\nDESCRIPTION: Runs the built Docker image, mapping port 3000 on the host to port 3000 in the container. It also loads environment variables from the .env file into the container.  This provides a running instance of the client backend accessible on localhost:3000.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/client_backend/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --env-file=.env -p 3000:3000 -t vocode-client-backend\n```\n\n----------------------------------------\n\nTITLE: Initialize Vocode Client in TypeScript\nDESCRIPTION: Initializes the Vocode client in TypeScript using the `@vocode/vocode-api` package. Requires an API key. The code then lists available numbers and logs the response to the console.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/hosted-quickstart.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VocodeClient } from \"@vocode/vocode-api\";\n\nconst vocode = new VocodeClient({\n  token: \"YOUR_API_KEY\",\n});\n\nvocode.numbers.listNumbers().then((numbers) => {\n  console.log(\"My numbers:\", numbers);\n});\n```\n\n----------------------------------------\n\nTITLE: Continue on Voicemail and Subscribe to Events with Vocode\nDESCRIPTION: This snippet shows how to configure a Vocode call to continue if an answering machine is detected and set up a webhook to receive human detection events. The `on_no_human_answer` parameter is set to 'continue', and a webhook URL is configured with a subscription to the 'event_human_detection' event. Requires Vocode Python client library.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/machine-detection.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import CreateCallAgentParams, PromptParams\n\nvocode_client.calls.create_call(\n    from_number=\"<YOUR VOCODE NUMBER>\",\n    to_number=\"15555555555\",\n    agent=CreateCallAgentParams(\n        prompt=PromptParams(\n            content=\"Ask Ajay if his refrigerator is running\"\n        ),\n        webhook=WebhookParams(\n            url=\"<YOUR WEBHOOK URL>\",\n            subscriptions=[\"event_human_detection\"]\n        )\n    ),\n    on_no_human_answer=\"continue\"\n)\n```\n\n----------------------------------------\n\nTITLE: Eleven Labs Input Streaming Configuration (Python)\nDESCRIPTION: This example demonstrates how to enable and use Eleven Labs' input streaming API with the `ElevenLabsWSSynthesizer` in Vocode. It involves setting `experimental_websocket=True` in the configuration and using `ElevenLabsWSSynthesizer`. Requires the `speaker_output` object.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/using-synthesizers.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.synthesizer.eleven_labs_websocket_synthesizer import ElevenLabsWSSynthesizer\nfrom vocode.streaming.models.synthesizer import ElevenLabsSynthesizerConfig\n\n...\nsynthesizer_config=ElevenLabsSynthesizerConfig.from_telephone_output_device(\n    api_key=os.getenv(\"ELEVENLABS_API_KEY\"),\n    voice_id=os.getenv(\"YOUR VOICE ID\"),\n    experimental_websocket=True\n)\n...\nsynthesizer=ElevenLabsWSSynthesizer(ElevenLabsSynthesizerConfig.from_output_device(\n    speaker_output,\n    api_key=os.getenv(\"ELEVENLABS_API_KEY\"),\n    voice_id=os.getenv(\"YOUR VOICE ID\"),\n    experimental_websocket=True\n))\n...\n```\n\n----------------------------------------\n\nTITLE: Custom Agent Factory with Anthropic Claude Opus\nDESCRIPTION: This code snippet defines a custom AgentFactory that creates a LangchainAgent with a chain querying Anthropic Claude Opus to generate a poem. It manually passes the chain to the LangchainAgent constructor.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode.streaming.agent.abstract_factory import AbstractAgentFactory\nfrom vocode.streaming.models.agent import LangchainAgentConfig\nfrom vocode.streaming.agent.langchain_agent import LangchainAgent\nfrom langchain_anthropic import ChatAnthropic\nfrom langchain_core.prompts import ChatPromptTemplate\n\nclass PoemAgentFactory(AbstractAgentFactory):\n    def create_agent(\n        self, agent_config: AgentConfig, logger: Optional[logging.Logger] = None\n    ) -> BaseAgent:\n        if isinstance(agent_config, LangchainAgentConfig):\n            prompt_template = ChatPromptTemplate.from_template(\"Make a random poem\")\n            model = ChatAnthropic(model='claude-3-opus-20240229')\n            chain = prompt_template | model\n            return LangchainAgent(\n                agent_config = agent_config,\n                chain = chain,\n            )\n        else:\n            raise Exception(\"Invalid agent config\")\n```\n\n----------------------------------------\n\nTITLE: Initialize Sentry SDK\nDESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK in a Python application. It configures the DSN, environment, sample rates, and integrations, including AsyncioIntegration and LoguruIntegration.  The dsn and environment variables are read from the environment.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/sentry.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sentry_sdk\nfrom sentry_sdk.integrations.asyncio import AsyncioIntegration\nfrom sentry_sdk.integrations.loguru import LoguruIntegration\n\nsentry_sdk.init(\n    dsn=os.getenv(\"SENTRY_DSN\"),\n    environment=os.getenv(\"ENVIRONMENT\"),\n    # Sample rate for transactions (performance).\n    traces_sample_rate=1.0,\n    # Sample rate for exceptions / crashes.\n    sample_rate=1.0,\n    max_request_body_size=\"always\",\n    integrations=[\n        AsyncioIntegration(),\n        LoguruIntegration(),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from External API\nDESCRIPTION: This JSON snippet shows an example response from an external API. It contains a 'result' field indicating the success status of the action and an 'agent_message' field with a message to be synthesized and sent back to the phone call.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/external-action.mdx#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"result\": {\n    \"success\": true\n  },\n  \"agent_message\": \"I've set up a calendar appointment at 10:30am tomorrow for 30 minutes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys using Google Colab Secrets\nDESCRIPTION: This code retrieves API keys from Google Colab's secret manager and sets them as environment variables. This ensures that the keys are not visible in the notebook and are not stored in the notebook's history. It retrieves the Pinecone API key, environment, index, and OpenAI API key.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/voice_rag/manual_pinecone_ingestor.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom google.colab import userdata\nimport os\n\nPINECONE_API_KEY = userdata.get('PINECONE_API_KEY')\nos.environ['PINECONE_API_KEY'] = PINECONE_API_KEY\n\nPINECONE_ENVIRONMENT = userdata.get('PINECONE_ENVIRONMENT')\nos.environ['PINECONE_ENVIRONMENT'] = PINECONE_ENVIRONMENT\n\nPINECONE_INDEX = userdata.get('PINECONE_INDEX')\nos.environ['PINECONE_INDEX'] = PINECONE_INDEX\n\nOPENAI_API_KEY = userdata.get('OPENAI_API_KEY')\nos.environ['OPENAI_API_KEY'] = OPENAI_API_KEY\n```\n\n----------------------------------------\n\nTITLE: List Calls with Vocode API (TypeScript)\nDESCRIPTION: This snippet demonstrates how to retrieve a list of call objects using the Vocode API with the TypeScript client. It assumes 'vocode' is an initialized client. The 'calls' variable will contain a list of call objects upon successful execution.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/retrieve-call-data.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst calls = await vocode.calls.listCalls();\n```\n\n----------------------------------------\n\nTITLE: Download Call Recording (Python)\nDESCRIPTION: This snippet downloads a call recording using the Vocode API Python client. The 'id' parameter specifies the call ID to retrieve the recording for. Requires an initialized 'vocode_client'.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/retrieve-call-data.mdx#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nvocode_client.calls.get_recording(id=\"CALL_ID\")\n```\n\n----------------------------------------\n\nTITLE: Run FastAPI Server with Uvicorn (Bash)\nDESCRIPTION: Starts the FastAPI server using Uvicorn. Assumes that main.py contains a FastAPI app instance named 'app'. Requires uvicorn to be installed.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/voice_rag/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Tunneling localhost with ngrok\nDESCRIPTION: This command uses ngrok to create a secure tunnel from localhost port 3000 to a public URL. This URL is necessary for Twilio to send webhooks to the locally running TelephonyServer, allowing it to receive and process phone calls.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Initializing Webhook Parameters in Python\nDESCRIPTION: This Python code snippet creates a `WebhookUpdateParams` object to define a new webhook. It subscribes to the `EVENT_PHONE_CALL_ENDED` event and sets the webhook URL to `https://example.com` using the `POST` method. This webhook will be triggered when a phone call ends.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/setting-up-webhook.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode import AgentUpdateParams, EventType, HttpMethod, WebhookUpdateParams\n\nnew_webhook = WebhookUpdateParams(\n    subscriptions=[EventType.EVENT_PHONE_CALL_ENDED],\n    url=\"https://example.com\",\n    method=HttpMethod.POST,\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Number with Raw Action - TypeScript\nDESCRIPTION: Updates a phone number's inbound agent with a raw action payload, allowing for direct configuration of actions. The action's `type` and `config` are provided directly within the `actions` array.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nvocode.numbers.updateNumber({\n  phoneNumber: \"11234567890\",\n  inboundAgent: {\n    actions: [\n      {\n        type: \"action_transfer_call\",\n        config: {\n          phoneNumber: \"11234567890\",\n        },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: List Calls with Vocode API (Python)\nDESCRIPTION: This snippet demonstrates how to retrieve a list of call objects using the Vocode API with the Python client. It requires the vocode_client object to be initialized. The returned 'calls' variable will contain a list of call objects.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/retrieve-call-data.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncalls = vocode_client.calls.list_calls()\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Agent Creation\nDESCRIPTION: This snippet represents the OpenAPI specification for creating an agent via a POST request to the /v1/agents/create endpoint.  It defines the structure and expected behavior of the API call.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/agents/create-agent.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/agents/create\n```\n\n----------------------------------------\n\nTITLE: Set Agent Language with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to update a phone number's inbound agent to use a specific language. It uses the `vocode.numbers.updateNumber` method with an `inboundAgent` object containing the `language` property.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/multilingual.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst language = \"es\"; // [\"en\", \"es\", \"de\"]\nconst number = await vocode.numbers.updateNumber({\n  phoneNumber: \"YOUR_NUMBER\",\n  inboundAgent: { language: language },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up GPT4AllAgent in StreamingConversation (Python)\nDESCRIPTION: This code snippet demonstrates how to set up a `GPT4AllAgent` within a `StreamingConversation`.  It configures the agent with the path to the downloaded GPT4All model, an initial message, and a prompt preamble. It utilizes `GPT4AllAgentConfig` to set the initial parameters.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.models.agent import GPT4AllAgentConfig\nfrom vocode.streaming.agent.gpt4all_agent import GPT4AllAgent\n\nStreamingConversation(\n    ...\n    agent=GPT4AllAgent(\n        GPT4AllAgentConfig(\n            model_path=\"path/to/ggml-gpt4all-j-...-.bin\",\n            initial_message=BaseMessage(text=\"Hello!\"),\n            prompt_preamble=\"The AI is having a pleasant conversation about life\"\n        )\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Factory in Python\nDESCRIPTION: This code defines a custom Agent Factory, `MyAgentFactory`, by subclassing `AbstractAgentFactory`. It creates a new agent based on the `agent_config.type`. It depends on `AbstractAgentFactory`, `MyActionFactory`, `AgentConfig`, and `BaseAgent`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/agent-factory.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.agent.abstract_factory import AbstractAgentFactory\nfrom vocode.streaming.action.my_action_factory import MyActionFactory\n\nclass MyAgentFactory(AbstractAgentFactory):\n    def __init__(self, action_factory: MyActionFactory):\n        self.action_factory = action_factory\n\n    def create_agent(\n        self, agent_config: AgentConfig, logger: Optional[logging.Logger] = None\n    ) -> BaseAgent:\n        if agent_config.type == \"MY_ACTION\":\n            return MyActionAgent(\n                agent_config=agent_config,\n                action_factory=self.action_factory\n            )\n        elif agent_config.type == \"other_agent_type\":\n            ...\n        else:\n            raise Exception(\"Invalid agent config\")\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Listing Actions in YAML\nDESCRIPTION: This snippet defines a GET endpoint `/v1/actions/list` within an OpenAPI specification. It outlines how clients can retrieve a list of available actions from the vocode-core API. The endpoint uses the GET method and should return a list of actions.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/actions/list-actions.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: get /v1/actions/list\n```\n\n----------------------------------------\n\nTITLE: Updating Number with Action ID - cURL\nDESCRIPTION: Updates a phone number's inbound agent using a cURL request to the Vocode API, including the action UUID. Requires a valid API key for authorization.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_11\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/numbers/update?phone_number=11234567890 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"inbound_agent\": {\n    \"actions\": [\"<ACTION UUID>\"]\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Voice Creation POST Endpoint\nDESCRIPTION: This snippet represents the OpenAPI specification for a POST endpoint at /v1/voices/create. It defines the expected request and response structures for creating or registering voice profiles. The specific details of the request and response schemas would be defined elsewhere in the OpenAPI specification, which is not fully available in the provided content.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/voices/create-voice.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/voices/create\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Call Trigger in Vocode\nDESCRIPTION: This snippet demonstrates how to create a FunctionCallActionTrigger in Vocode. This trigger type allows the agent to decide when to use the action based on its prompting. The behavior is primarily achieved via the Prompt, and dependent on the description field for External Actions.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/action-triggers.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import FunctionCallActionTrigger\n\nfunction_trigger = FunctionCallActionTrigger(config={})\nvocode_client.agents.update_agent(\n    actions=[\n        TransferCallActionParams(\n            type=\"action_transfer_call\",\n            config=TransferCallConfig(\n                transfer_phone_number=\"<YOUR TRANSFER PHONE NUMBER>\",\n            ),\n            action_trigger=function_trigger\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up LlamacppAgent in StreamingConversation (Python)\nDESCRIPTION: This code snippet shows how to configure a `LlamacppAgent` within a `StreamingConversation`. It sets up the agent with a prompt preamble, llama.cpp-specific arguments (including the model path and verbosity), a prompt template, and an initial message. It also shows how to potentially offload layers to a GPU.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.models.agent import LlamacppAgentConfig\nfrom vocode.streaming.agent.llamacpp_agent import LlamacppAgent\n\nStreamingConversation(\n    ...\n    agent=LlamacppAgent(\n        LlamacppAgentConfig(\n            prompt_preamble=\"The AI is having a pleasant conversation about life\",\n            llamacpp_kwargs={\"model_path\": \"path/to/nous-hermes-13b.ggmlv3.q4_0.bin\", \"verbose\": True},\n            prompt_template=\"alpaca\",\n            initial_message=BaseMessage(text=\"Hello!\"),\n        )\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Update Prompts Endpoint Definition (YAML)\nDESCRIPTION: This snippet defines the OpenAPI specification for the POST /v1/prompts/update endpoint. It describes how to update an existing prompt using the API. It is assumed that this snippet is part of a larger OpenAPI definition file.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/prompts/update-prompt.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/prompts/update\n```\n\n----------------------------------------\n\nTITLE: Update Number with Raw Action Payload (cURL)\nDESCRIPTION: This snippet demonstrates how to update a phone number with an inbound agent and raw action payloads (TransferCall) using a cURL request to the Vocode API.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/numbers/update?phone_number=11234567890 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"inbound_agent\": {\n    \"actions\": [{\n      \"type\": \"action_transfer_call\",\n      \"config\": {\n          \"phone_number\": \"11234567890\"\n      }\n    }]\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Update Number with Raw Action Payload (Python)\nDESCRIPTION: This snippet updates a phone number with an inbound agent containing raw action payloads (TransferCall) using the Vocode client in Python.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import AgentUpdateParams, TransferCallActionUpdateParams\n\nvocode_client.numbers.update_number(\n  phone_number=\"11234567890\",\n  inbound_agent=AgentUpdateParams(\n      actions=[TransferCallActionUpdateParams(\n          type=\"action_transfer_call\",\n          config={\n              \"phone_number\":\"11234567890\"\n          }\n      )]\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Documents into Pinecone (Python)\nDESCRIPTION: This Python script demonstrates how to load documents from a directory into a Pinecone vector database. It utilizes `Unstructured` to parse various file types, extracts the text, splits the text into chunks, generates embeddings using OpenAI, and then inserts the embeddings and corresponding text into Pinecone. Requires `langchain`, `spacy`, `unstructured`, `layoutparser`, `pinecone-client`, `openai`, `torch`, and `tiktoken`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/vectordb.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pinecone\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import SpacyTextSplitter\nfrom langchain.vectorstores import Pinecone\nfrom langchain.document_loaders import DirectoryLoader, UnstructuredFileLoader\n\nPINECONE_API_KEY = os.environ[\"PINECONE_API_KEY\"]\nPINECONE_ENVIRONMENT = os.environ[\"PINECONE_ENVIRONMENT\"]\nOPENAI_API_KEY = os.environ[\"OPENAI_API_KEY\"]\n\n\nloader = DirectoryLoader('./docs', glob=\"**/*.*\", show_progress=True, loader_cls=UnstructuredFileLoader)\nprint(\"Loading documents...\")\ndocuments = loader.load()\ntext_splitter = SpacyTextSplitter(chunk_size=1000)\nprint(\"Splitting documents...\")\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\npinecone.init(\n    api_key=PINECONE_API_KEY,\n    environment=PINECONE_ENVIRONMENT,\n)\n\nindex_name = \"your_index_name\"\n\nprint(\"Creating index...\")\ndocsearch = Pinecone.from_documents(docs, embeddings, index_name=index_name)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition: Cancel Number\nDESCRIPTION: Defines a POST endpoint '/v1/numbers/cancel' for cancelling a number. The specification adheres to the OpenAPI standard and details the method, endpoint and version.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/numbers/cancel-number.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/numbers/cancel\n```\n\n----------------------------------------\n\nTITLE: Connecting Agent to Telephony Server in Python\nDESCRIPTION: This code demonstrates how to connect a custom agent factory, `MyAgentFactory`, to a `TelephonyServer`. It requires `TelephonyServer`, `MyAgentFactory`, and `MyActionFactory` to be defined. It initializes the telephony server with the created agent factory.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/agent-factory.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode.streaming.telephony.server.base import TelephonyServer\nfrom vocode.streaming.agent.my_agent_factory import MyAgentFactory\nfrom vocode.streaming.action.my_action_factory import MyActionFactory\n\ntelephony_server = TelephonyServer(\n    agent_factory=MyAgentFactory(action_factory=MyActionFactory())\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Update Number with Raw Action Payload (TypeScript)\nDESCRIPTION: This snippet updates a phone number with an inbound agent containing raw action payloads (TransferCall) using the Vocode client in TypeScript.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nvocode.numbers.updateNumber({\n  phoneNumber: \"11234567890\",\n  inboundAgent: {\n    actions: [\n      {\n        type: \"action_transfer_call\",\n        config: {\n          phoneNumber: \"11234567890\",\n        },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Events Manager with TelephonyServer in Python\nDESCRIPTION: This code snippet demonstrates how to integrate the CustomEventsManager into a TelephonyServer. The events_manager parameter of the TelephonyServer constructor is used to pass in an instance of the CustomEventsManager. The primary dependency is the CustomEventsManager class and TelephonyServer.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/events-manager.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nserver = TelephonyServer(\n    ...,\n    events_manager=CustomEventsManager()\n)\n```\n\n----------------------------------------\n\nTITLE: Run Docker Image (Bash)\nDESCRIPTION: Runs the Docker image for the Voice RAG application, forwarding port 3000.  It loads environment variables from the .env file.  Requires a properly built Docker image and a correctly configured .env file.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/voice_rag/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --env-file=.env -p 3000:3000 -t vocode/vocode-voice-rag\n```\n\n----------------------------------------\n\nTITLE: Running Python Script with Poetry\nDESCRIPTION: This command runs the `main.py` Python script using Poetry.  Poetry ensures that the project's dependencies are available in the runtime environment.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/telegram_bot/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python main.py\n```\n\n----------------------------------------\n\nTITLE: Listing Coqui TTS Models (Bash)\nDESCRIPTION: This command lists the available models for Coqui TTS. It uses the `tts` command-line tool provided by the Coqui TTS package.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntts --list_models\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition\nDESCRIPTION: This snippet defines a GET endpoint for retrieving a list of agents at the path '/v1/agents/list' using the OpenAPI specification format. It indicates the existence of an API endpoint for listing agents within the vocode-core project. No specific dependencies are explicitly stated, but it relies on the OpenAPI specification standard.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/agents/list-agents.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: get /v1/agents/list\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Dependencies\nDESCRIPTION: This command installs the project's dependencies using Poetry, based on the `poetry.lock` and `pyproject.toml` files. This is a prerequisite for running the Python script directly without Docker.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/telegram_bot/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Create Agent with OpenAI Account Connection (Python)\nDESCRIPTION: This snippet demonstrates how to create a new agent in Vocode and associate it with your created OpenAI account connection. The `openai_account_connection` parameter is set to the ID of the connection. The snippet assumes that `vocode_client` is already initialized and connected.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/bring-your-own-openai.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.agents.create_agent(\n    voice=\"...\",\n    prompt={\n        \"content\": \"...\",\n    },\n    openai_account_connection=\"YOUR_ACCOUNT_CONNECTION_ID\",\n)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification - GET /v1/agents\nDESCRIPTION: This snippet defines the OpenAPI specification for retrieving agent configurations using the GET method on the /v1/agents endpoint. It specifies the HTTP method and the endpoint path.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/agents/get-agent.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: get /v1/agents\n```\n\n----------------------------------------\n\nTITLE: Download Call Recording (TypeScript)\nDESCRIPTION: This snippet downloads a call recording using the Vocode API TypeScript client.  It first lists the calls and then downloads the recording of the first call in the list. Requires an initialized 'vocode' client.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/retrieve-call-data.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst calls = await vocode.calls.listCalls();\nconst recording = await vocode.calls.get_recording({ id: calls[0].id });\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET /v1/voices Endpoint\nDESCRIPTION: This snippet defines an OpenAPI endpoint for retrieving voices. It specifies that a GET request to `/v1/voices` will retrieve the list of available voices. No dependencies or prerequisites are explicitly listed but assumes a properly configured OpenAPI environment.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/voices/get-voice.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: get /v1/voices\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry dependencies\nDESCRIPTION: This command uses Poetry to install the dependencies specified in the pyproject.toml file. Poetry manages the project's dependencies and ensures that the correct versions are installed, creating a consistent environment for development and deployment.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint Definition\nDESCRIPTION: Defines the OpenAPI specification for a POST endpoint that creates an action at the `/v1/actions/create` route. This snippet outlines the HTTP method, path, and likely expected request/response schemas (though not explicitly included in the given text).\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/actions/create-action.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/actions/create\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint for Linking Numbers\nDESCRIPTION: This snippet defines an OpenAPI endpoint using YAML for a POST request to the `/v1/numbers/link` route. This endpoint is presumably used to associate or link a specific number with a resource or user.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/numbers/link-number.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/numbers/link\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: This command builds a Docker image for the Telegram bot, tagging it as `vocode-telegram-bot`. The Dockerfile in the current directory is used to define the image.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/telegram_bot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t vocode-telegram-bot .\n```\n\n----------------------------------------\n\nTITLE: Install synthesizer packages with Poetry\nDESCRIPTION: Installs the synthesizer packages required for running the synthesizer script using Poetry. The `--extras=synthesizers` flag ensures that only the synthesizer-related dependencies are installed.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/playground.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npoetry install --extras=synthesizers\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint for Number Update\nDESCRIPTION: Defines a POST endpoint in OpenAPI for updating a number. It specifies the path as /v1/numbers/update, indicating where the request should be sent. No specific request or response schemas are provided in this snippet.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/numbers/update-number.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/numbers/update\n```\n\n----------------------------------------\n\nTITLE: Building Docker image for Telephony App\nDESCRIPTION: This command builds a Docker image for the telephony application. It uses the Dockerfile located in the telephony_app directory to create an image named vocode-telephony-app, which encapsulates all the dependencies and code needed to run the application.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t vocode-telephony-app .\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Webhook Update Endpoint\nDESCRIPTION: Defines the OpenAPI specification for the POST endpoint `/v1/webhooks/update`. This endpoint likely handles requests to update webhook configurations. The actual schema for the request and response is not included but the documentation indicates the existence of this endpoint.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/webhooks/update-webhook.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/webhooks/update\n```\n\n----------------------------------------\n\nTITLE: Importing Required Python Modules\nDESCRIPTION: This code imports the required Python modules for the RAG pipeline. It imports modules from the os, pinecone, langchain.embeddings.openai, langchain.text_splitter, langchain.vectorstores, and langchain.document_loaders libraries. These modules are used for interacting with the OS, performing vector database operations, generating embeddings, splitting text, storing and retrieving vectors, and loading documents.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/voice_rag/manual_pinecone_ingestor.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pinecone\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import SpacyTextSplitter\nfrom langchain.vectorstores import Pinecone\nfrom langchain.document_loaders import DirectoryLoader, UnstructuredFileLoader\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This command executes the project's tests using `pytest` via the `make` interface.  It runs all tests located under the `tests` directory, verifying that the code functions as expected and maintains its integrity. Running tests is essential to ensuring the stability and reliability of the project.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition\nDESCRIPTION: This snippet defines an OpenAPI GET endpoint for retrieving a list of voices. The endpoint is located at /v1/voices/list.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/voices/list-voices.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: get /v1/voices/list\n```\n\n----------------------------------------\n\nTITLE: Settings Configuration\nDESCRIPTION: This code defines a `Settings` class using `BaseSettings` from Pydantic to manage configuration parameters for the turn-based conversation. It includes settings for OpenAI and Azure API keys, Azure region, and specifies that environment variables can override default values defined within the class using a `.env` file. The `SettingsConfigDict` allows loading configurations from a .env file.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/turn-based-conversation.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Settings(BaseSettings):\n    \"\"\"\n    Settings for the turn-based conversation quickstart.\n    These parameters can be configured with environment variables.\n    \"\"\"\n\n    openai_api_key: str = \"ENTER_YOUR_OPENAI_API_KEY_HERE\"\n    azure_speech_key: str = \"ENTER_YOUR_AZURE_KEY_HERE\"\n\n    azure_speech_region: str = \"eastus\"\n\n    # This means a .env file can be used to overload these settings\n    # ex: \"OPENAI_API_KEY=my_key\" will set openai_api_key over the default above\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n    )\n\n\nsettings = Settings()\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition - GET /v1/webhooks\nDESCRIPTION: This snippet defines the OpenAPI specification for a GET request to the /v1/webhooks endpoint. It likely outlines the expected request parameters, headers, and the structure of the response.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/webhooks/get-webhook.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: get /v1/webhooks\n```\n\n----------------------------------------\n\nTITLE: Build Docker Image (Bash)\nDESCRIPTION: Builds a Docker image for the Voice RAG application. It uses build arguments for build date, VCS reference, and version. Requires Docker to be installed and running.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/voice_rag/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \\\n             --build-arg VCS_REF=$(git rev-parse --short HEAD) \\\n             --build-arg VERSION=0.1.0 \\\n             -t vocode/vocode-voice-rag:0.1.0 .\n```\n\n----------------------------------------\n\nTITLE: Setting LiveKit credentials in .env\nDESCRIPTION: This snippet shows how to set the LiveKit server URL, API key, and API secret in a .env file.  These credentials are used to connect the Vocode agent to the LiveKit server.  The values should be replaced with your actual LiveKit credentials.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/livekit-webrtc.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLIVEKIT_SERVER_URL=wss://your-livekit-ws-url.livekit.cloud\nLIVEKIT_API_KEY=\"KEY\"\nLIVEKIT_API_SECRET=\"SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Loguru Configuration (Python)\nDESCRIPTION: This code configures Loguru logging based on the environment. It checks the `ENVIRONMENT` environment variable against a list of deployed environments (`DEPLOYED_ENVIRONMENTS`). If the environment is in the deployed list, it configures JSON logging; otherwise, it configures pretty logging. This allows for different logging configurations in development and production.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/logging-with-loguru.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom vocode.logging import configure_pretty_logging, configure_json_logging\n\nDEPLOYED_ENVIRONMENTS = [\"production\", \"staging\"]\nENVIRONMENT = os.environ.get(\"ENVIRONMENT\", \"development\")\n\ndef configure_logging() -> None:  # pragma: no cover\n    \"\"\"Configures logging.\"\"\"\n    if ENVIRONMENT in DEPLOYED_ENVIRONMENTS:\n        configure_json_logging()\n    else:\n        configure_pretty_logging()\n\n# Configure logging based on the environment\nconfigure_logging()\n\n# Your application code here\n```\n\n----------------------------------------\n\nTITLE: Install Vocode API with NPM\nDESCRIPTION: Installs the `@vocode/vocode-api` package using npm.  This is a prerequisite for using the Vocode Node SDK.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/hosted-quickstart.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @vocode/vocode-api\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET /v1/webhooks/list\nDESCRIPTION: This snippet defines the OpenAPI specification for the GET endpoint `/v1/webhooks/list`. It outlines the request and response structure for retrieving a list of webhooks. It's intended for API documentation and client generation.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/webhooks/list-webhooks.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: get /v1/webhooks/list\n```\n\n----------------------------------------\n\nTITLE: Copying .env template file\nDESCRIPTION: This command copies the `.env.template` file to a new file named `.env`. This allows you to easily configure your environment variables without modifying the template file.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/telegram_bot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.template .env\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit Hooks\nDESCRIPTION: These commands install `pre-commit` to run linting checks before pushing code. The first command uses Homebrew to install `pre-commit`, and the second command configures `pre-commit` to use the project's defined hooks, ensuring code quality and style consistency. `pre-commit` helps catch issues early in the development process.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pre-commit\npoetry run pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Installing Coqui TTS (Bash)\nDESCRIPTION: This command demonstrates how to install the Coqui TTS package using `pip`.  This package is used for local text-to-speech synthesis.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install TTS\n```\n\n----------------------------------------\n\nTITLE: Create Meeting Assistant Action - Python\nDESCRIPTION: This Python snippet creates an external action for a Meeting Booking Assistant using the Vocode client. It defines the action's configuration, including its name, description, URL, and input schema. The input schema specifies that the action requires a 'length' (30m or 1hr) and a 'time' (in the format HH:M0am/pm).\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/external-actions.mdx#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nvocode_client.actions.create_action(\n    request={\n        \"type\": \"action_external\",\n        \"config\": {\n            \"name\": \"Meeting_Booking_Assistant\",\n            \"description\": (\"Book a meeting for a 30 minute or 1 hour call.\"),\n            \"url\": \"http://example.com/booking\",\n            \"speak_on_send\": True,\n            \"speak_on_receive\": True,\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"length\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"30m\", \"1hr\"],\n                    },\n                    \"time\": {\n                        \"type\": \"string\",\n                        \"pattern\": \"^\\d{2}:\\d0[ap]m$\",\n                    },\n                },\n            },\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Call Recording Retrieval\nDESCRIPTION: This snippet defines an OpenAPI specification for retrieving call recordings using a GET request. The endpoint is `/v1/calls/recording`.  No specific request parameters or response schemas are defined in the provided snippet, implying that these aspects need to be defined elsewhere in the OpenAPI specification.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/calls/get-recording.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: get /v1/calls/recording\n```\n\n----------------------------------------\n\nTITLE: Downloading Whisper.cpp Model (Bash)\nDESCRIPTION: This bash script demonstrates how to download a model for whisper.cpp, specifically the `tiny.en` model.  It requires the whisper.cpp repository to be cloned and the script executed from the whisper.cpp directory.  The script uses `make` command to compile the project after the model is downloaded.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash ./models/download-ggml-model.sh tiny.en\nmake\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies (requirements.txt)\nDESCRIPTION: This text file lists the required Python packages and their versions for the local response server. It specifies `pydantic` and `fastapi` with version constraints.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/external-action.mdx#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\npydantic==2.*\nfastapi==0.111.*\n```\n\n----------------------------------------\n\nTITLE: Installing llama-cpp-python (Bash)\nDESCRIPTION: This command shows how to install the `llama-cpp-python` package using `pip`. It includes options to install with CUDA support for GPU acceleration.  `CMAKE_ARGS` and `FORCE_CMAKE` environment variables are used to configure the installation.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCMAKE_ARGS=\"-DLLAMA_CUBLAS=on\" FORCE_CMAKE=1 pip install llama-cpp-python\n```\n\n----------------------------------------\n\nTITLE: Define POST endpoint for Webhook creation in OpenAPI\nDESCRIPTION: This snippet defines a POST endpoint `/v1/webhooks/create` in an OpenAPI specification. It indicates that this endpoint is used to create webhooks. The OpenAPI specification would contain details about the request body, response codes, and other relevant information for interacting with this endpoint.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/webhooks/create-webhook.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/webhooks/create\n```\n\n----------------------------------------\n\nTITLE: Copy Environment Template\nDESCRIPTION: Copies the .env.template file to .env, allowing the user to configure their API keys and other environment-specific settings. This ensures a consistent environment setup for development and deployment.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/client_backend/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.template .env\n```\n\n----------------------------------------\n\nTITLE: Running Vocode Backend with Python\nDESCRIPTION: Installs the Vocode package using pip and then runs the backend server using uvicorn.  This exposes a websocket route at localhost:3000.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/react-quickstart.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npip3 install vocode\nuvicorn main:app --port 3000\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification: Update Account Connections (YAML)\nDESCRIPTION: This snippet describes the OpenAPI specification for the `POST /v1/account_connections/update` endpoint. It defines the HTTP method (POST) and the endpoint path, which are essential for understanding how to interact with this API endpoint. No request or response schemas are explicitly included in the snippet, which would typically be defined in a complete OpenAPI specification.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/account_connections/update-account-connection.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/account_connections/update\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container\nDESCRIPTION: This command runs the Docker image `vocode-telegram-bot` as a container. It uses the environment variables defined in the `.env` file and forwards port 3000 from the container to port 3000 on the host. The `-t` flag allocates a pseudo-TTY.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/telegram_bot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --env-file=.env -p 3000:3000 -t vocode-telegram-bot\n```\n\n----------------------------------------\n\nTITLE: Initialize Sentry in Telephony Server\nDESCRIPTION: This code shows how to initialize the Sentry SDK in a Vocode telephony server. It initializes Sentry at the top of the main file (e.g., `app/telephony_app/main.py`) to capture errors from the start of the application. The Sentry SDK init block should be placed before the FastAPI app definition.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/sentry.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsentry_sdk.init(\n    ...\n)\n\napp = FastAPI(docs_url=None)\n```\n\n----------------------------------------\n\nTITLE: Installing pygpt4all (Bash)\nDESCRIPTION: This command demonstrates how to install the `pygpt4all` Python package using `pip`.  This package is required to use the GPT4All language model with Vocode.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install pygpt4all\n```\n\n----------------------------------------\n\nTITLE: Building and Running Vocode Backend with Docker\nDESCRIPTION: Builds a Docker image for the Vocode client backend and runs it, exposing port 3000.  The `--env-file` argument is used to supply the environment variables defined in the `.env` file to the container.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/react-quickstart.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t vocode-client-backend .\ndocker run --env-file=.env -p 3000:3000 -t vocode-client-backend\n```\n\n----------------------------------------\n\nTITLE: Langchain Agent Configuration Example\nDESCRIPTION: This code snippet shows an example of a LangchainAgentConfig where model_name is set to \"Vocode\" and the provider is set to \"poem\".  \nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent.mdx#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom vocode.streaming.models.agent import LangchainAgentConfig\n\nagent_config = LangchainAgentConfig(\n    ...\n    model_name = \"Vocode\"\n    provider = \"poem\"\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Number with Raw Action - cURL\nDESCRIPTION: Updates a phone number's inbound agent using a cURL request to the Vocode API, including a raw action payload (transfer call). Requires a valid API key for authorization.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_14\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/numbers/update?phone_number=11234567890 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"inbound_agent\": {\n    \"actions\": [{\n      \"type\": \"action_transfer_call\",\n      \"config\": {\n          \"phone_number\": \"11234567890\"\n      }\n    }]\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Running Python App in Development with Poetry\nDESCRIPTION: This command executes the 'app.py' file using the Python interpreter managed by Poetry. The 'dev' argument likely specifies a development environment, potentially loading specific configurations or enabling debugging features. Poetry is used to manage dependencies and ensure a consistent environment.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/livekit/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npoetry run python app.py dev\n```\n\n----------------------------------------\n\nTITLE: Running Type Checking\nDESCRIPTION: This command executes type checking using `mypy` through the `make` interface. It verifies that the code adheres to the specified type annotations, helping to catch type-related errors early in the development cycle. Passing the type check is a requirement for merging pull requests.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake typecheck # or make typecheck_diff\n```\n\n----------------------------------------\n\nTITLE: Create EndConversation Action in Vocode (cURL)\nDESCRIPTION: This snippet demonstrates how to create an action to end the conversation using a cURL request to the Vocode API. It sets the `type` to `action_end_conversation` in the request body.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/actions/create \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"type\": \"action_end_conversation\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Copying the .env.template\nDESCRIPTION: Copies the `.env.template` file to `.env`. This is necessary to configure the environment variables for the backend, including API keys.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/react-quickstart.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.template .env\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip\nDESCRIPTION: This code installs the necessary Python packages using pip. It includes libraries like langchain, spacy, unstructured, layoutparser, pinecone-client, openai, torch, tiktoken, and git. The unstructured and layoutparser packages are installed with extra dependencies for local inference and layout models respectively.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/voice_rag/manual_pinecone_ingestor.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain spacy unstructured[local-inference] layoutparser[layoutmodels,tesseract] pinecone-client openai torch tiktoken git\n```\n\n----------------------------------------\n\nTITLE: Do Not Call Result Example - JSON\nDESCRIPTION: This JSON snippet shows an example of the call object returned by the Vocode API after retrieving call details. It includes the `do_not_call_result` field, which indicates whether the receiving party indicated they would like to be placed on a Do Not Call list during the call. The value of the field is boolean.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/do-not-call-detection.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"call_id\",\n  \"to_number\": \"123456789\",\n  \"from_number\": \"123456789\",\n  ...\n  \"do_not_call_result\": true,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for External Action Details\nDESCRIPTION: This cURL command retrieves the details of an external action by its ID. It includes the API key for authentication and specifies the content type as JSON. The response contains the action's configuration, including the signature secret used for validating incoming requests.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/external-actions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://api.vocode.dev/v1/actions?id=<EXAMPLE_ACTION_ID>\\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI with npm\nDESCRIPTION: This command installs the Mintlify CLI globally using npm. Mintlify is used to preview documentation changes locally.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i mintlify -g\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Example for External API Request\nDESCRIPTION: This JSON schema defines the expected structure of the payload to send to an external API. It specifies the data types and constraints for the 'length' and 'time' fields, which represent meeting duration and time respectively. The 'length' must be either '30m' or '1hr', and 'time' must match a regex pattern.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/external-action.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"length\": {\n      \"type\": \"string\",\n      \"enum\": [\"30m\", \"1hr\"]\n    },\n    \"time\": {\n      \"type\": \"string\",\n      \"pattern\": \"^d{2}:d0[ap]m$\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AgentConfig Class Definition Python\nDESCRIPTION: Defines the configuration for an agent, including a list of ActionConfig objects that specify the actions the agent can perform. The actions attribute allows for including a set of configurable actions to be available for use by the agent.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/agents-with-actions.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AgentConfig(AgentConfig, type=AgentType.Base.value):\n    actions: Optional[List[ActionConfig]]\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server\nDESCRIPTION: This command starts the Mintlify development server in the root directory of the documentation (where mint.json is located). This allows local previewing of documentation changes.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Updating Contacts in contacts.py\nDESCRIPTION: This code snippet shows how to define contacts in the `contacts.py` file. Each contact is a dictionary with a 'name' and 'phone' number.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nCONTACTS = [{\"name\": \"Kian\", \"phone\": \"+123456789\"}]\n```\n\n----------------------------------------\n\nTITLE: Running the Streaming Conversation (Bash)\nDESCRIPTION: This command shows how to run the `streaming_conversation.py` script using Python. This assumes that the necessary dependencies and configurations have been set up.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/local-conversation.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython quickstarts/streaming_conversation.py\n```\n\n----------------------------------------\n\nTITLE: Custom ActionFactory Implementation Python\nDESCRIPTION: Implements a custom ActionFactory to create instances of the NylasSendEmail action based on the action config type.  This factory allows for selecting the correct class to instantiate based on the config supplied. If the action type isn't supported, the factory will raise an exception.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/agents-with-actions.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict, Sequence, Type\n\nfrom vocode.streaming.action.abstract_factory import AbstractActionFactory\nfrom vocode.streaming.action.base_action import BaseAction\nfrom vocode.streaming.action.nylas_send_email import NylasSendEmail\nfrom vocode.streaming.models.actions import ActionConfig\n\nclass MyCustomActionFactory(AbstractActionFactory):\n    def create_action(self, action_config: ActionConfig):\n        if action_config.type == \"action_nylas_send_email\":\n            return NylasSendEmail(action_config)\n        else:\n            raise Exception(\"Action type not supported by Agent config.\")\n```\n\n----------------------------------------\n\nTITLE: Cloning the Vocode Python Repository\nDESCRIPTION: This command clones the vocode-python repository from GitHub, allowing you to access the Langchain agent app directory.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/vocodedev/vocode-python.git\n```\n\n----------------------------------------\n\nTITLE: Defining the call_phone_number Tool\nDESCRIPTION: This code defines a Langchain tool `call_phone_number` which initiates a phone call using the Vocode OutboundCall class. It takes a pipe-separated string of phone number, prompt, and initial message, configures the call, and retrieves the transcript.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@tool(\"call phone number\")\ndef call_phone_number(input: str) -> str:\n    \"\"\"calls a phone number as a bot and returns a transcript of the conversation.\n    the input to this tool is a pipe separated list of a phone number, a prompt, and the first thing the bot should say.\n    The prompt should instruct the bot with what to do on the call and be in the 3rd person,\n    like 'the assistant is performing this task' instead of 'perform this task'.\n\n    should only use this tool once it has found an adequate phone number to call.\n\n    for example, `+15555555555|the assistant is explaining the meaning of life|i'm going to tell you the meaning of life` will call +15555555555, say 'i'm going to tell you the meaning of life', and instruct the assistant to tell the human what the meaning of life is.\n    \"\"\"\n    phone_number, prompt, initial_message = input.split(\"|\", 2)\n    call = OutboundCall(\n        base_url=os.environ[\"TELEPHONY_SERVER_BASE_URL\"],\n        to_phone=phone_number,\n        from_phone=os.environ[\"OUTBOUND_CALLER_NUMBER\"],\n        config_manager=RedisConfigManager(),\n        agent_config=ChatGPTAgentConfig(\n            prompt_preamble=prompt,\n            initial_message=BaseMessage(text=initial_message),\n        ),\n        logger=logging.Logger(\"call_phone_number\"),\n    )\n    LOOP.run_until_complete(call.start())\n    while True:\n        maybe_transcript = get_transcript(call.conversation_id)\n        if maybe_transcript:\n            delete_transcript(call.conversation_id)\n            return maybe_transcript\n        else:\n            time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Defining Libraries for Code Fetching\nDESCRIPTION: This code defines a list of libraries from which to fetch code documentation. Each library is represented as a dictionary containing its name, GitHub repository URL, and the path to its documentation within the repository.  The defined libraries are 'langchain', 'supabase', 'next.js', 'fastapi', and 'vocode-python'.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/voice_rag/manual_pinecone_ingestor.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlibraries = [\n    {\n        'name': 'langchain',\n        'code': 'https://github.com/langchain-ai/langchain',\n        'documentation_path': 'docs'\n    },\n    {\n        'name': 'supabase',\n        'code': 'https://github.com/supabase/supabase',\n        'documentation_path': 'apps/docs'\n    },\n    {\n        'name': 'next.js',\n        'code': 'https://github.com/vercel/next.js',\n        'documentation_path': 'docs'\n    },\n    {\n        'name': 'fastapi',\n        'code': 'https://github.com/tiangolo/fastapi',\n        'documentation_path': 'docs/en/docs'\n    },\n    {\n        'name': 'vocode-python',\n        'code': 'https://github.com/vocodedev/vocode-python',\n        'documentation_path': 'docs'\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Ngrok to Tunnel Port 3000\nDESCRIPTION: This command uses Ngrok to create a secure tunnel to your local port 3000, making your local server accessible over the internet. This is necessary for the Twilio telephony server to communicate with your application.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Running the Telephony Server with Docker Compose\nDESCRIPTION: This command uses Docker Compose to start the telephony server. It reads the `docker-compose.yml` file in the current directory and brings up the services defined within it.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint for Buying Phone Number\nDESCRIPTION: This snippet defines the OpenAPI specification for the POST /v1/numbers/buy endpoint. It specifies the request and response structure for purchasing a phone number.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/numbers/buy-number.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/numbers/buy\n```\n\n----------------------------------------\n\nTITLE: Add to Steering Pool by Buying a Phone Number - Python\nDESCRIPTION: This code snippet demonstrates how to add a new phone number to the steering pool using the Vocode client. This operation buys a phone number on your Twilio account and configures it for warm transfers.  It requires a valid Twilio account connection ID.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/warm-transfer.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.account_connections.add_to_steering_pool(\n    id=\"<YOUR TWILIO ACCOUNT CONNECTION ID>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Define POST endpoint for updating voices\nDESCRIPTION: This snippet defines an OpenAPI operation for the POST method on the /v1/voices/update endpoint. This is likely part of a larger OpenAPI document that specifies the API for managing voice resources.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/voices/update-voice.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/voices/update\n```\n\n----------------------------------------\n\nTITLE: Copy Environment Template (Bash)\nDESCRIPTION: Copies the .env.template file to .env, allowing for environment variable configuration.  This step is necessary to configure API keys for the application.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/voice_rag/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.template .env\n```\n\n----------------------------------------\n\nTITLE: Running Linting\nDESCRIPTION: This command runs the linting process using `make`. It utilizes `black` to automatically format the code and enforce code style, ensuring consistency and readability across the project. This process is recommended before pushing code to maintain a clean and standardized codebase.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake lint_diff\n```\n\n----------------------------------------\n\nTITLE: Run FastAPI with Uvicorn\nDESCRIPTION: Starts the FastAPI application defined in `main.py` using uvicorn. This allows running the client backend without Docker.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/client_backend/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nuvicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Using the useConversation Hook in React\nDESCRIPTION: Imports the `useConversation` hook from the Vocode library and uses it to manage the conversation state. It connects to the self-hosted backend at the specified URL. `backendUrl` needs to point to the websocket endpoint of the backend server.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/react-quickstart.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConversation } from \"vocode\";\n\nconst { status, start, stop, error, analyserNode } = useConversation({\n  backendUrl: \"<YOUR_BACKEND_URL>\", // looks like ws://localhost:3000/conversation or wss://asdf1234.ngrok.app/conversation if using ngrok\n  audioDeviceConfig: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Create Agent with OpenAI Model Override (Python)\nDESCRIPTION: This snippet demonstrates how to create a new agent with a specific OpenAI model override. `openai_account_connection` must be specified for the override to work. The `openai_model_name_override` parameter sets the desired model to use.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/bring-your-own-openai.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.agents.create_agent(\n    voice=\"...\",\n    prompt={\n        \"content\": \"...\",\n    },\n    openai_account_connection=\"YOUR_ACCOUNT_CONNECTION_ID\",\n    openai_model_name_override=\"ft:your_ft_model_name\"\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Agent ID from Phone Number in Python\nDESCRIPTION: This snippet retrieves the agent ID associated with a given phone number using the Vocode API. It uses the `vocode_client.numbers.get` method to fetch the number details, then extracts the `agent_id`.  It requires the `vocode_client` object to be initialized.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/configuring-number.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnumber = vocode_client.numbers.get(phone_number=\"1123456789\")\nagent_id = number.agent_id\nprint(agent_id)\n```\n\n----------------------------------------\n\nTITLE: React Component for Conversation Control\nDESCRIPTION: A React component that displays the conversation status and provides buttons to start and stop the conversation.  The button's functionality is controlled by the `status` property returned by the `useConversation` hook.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/react-quickstart.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  {status === \"idle\" && <p>Press me to talk!</p>}\n  {status == \"error\" && error && <p>{error.message}</p>}\n\n  <button\n    disabled={[\"connecting\"].includes(status)}\n    onClick={status === \"connected\" ? stop : start}\n  ></button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Get Call Details - Python\nDESCRIPTION: This snippet demonstrates how to retrieve call details using the Vocode API. It uses the `get_call` method with the call ID to fetch the call object which includes the `do_not_call_result` if Do Not Call detection was enabled during call creation. Requires the `vocode` library.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/do-not-call-detection.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvocode_client.calls.get_call(id=\"CALL_ID\")\n```\n\n----------------------------------------\n\nTITLE: Install core packages with Poetry\nDESCRIPTION: Installs the core packages required for running the Vocode playground scripts using Poetry. This command is necessary to set up the environment with the required dependencies.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/playground.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Update Agent with OpenAI Account Connection (Python)\nDESCRIPTION: This snippet shows how to update an existing agent in Vocode to use your own OpenAI account connection. It uses `AgentUpdateParams` to pass the `openai_account_connection` ID to the `update_agent` method.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/bring-your-own-openai.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vocode import AgentUpdateParams\n\nvocode_client.agents.update_agent(\n    id=\"YOUR_AGENT_ID\",\n    request=AgentUpdateParams(\n        openai_account_connection=\"YOUR_ACCOUNT_CONNECTION_ID\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Running the Telephony Server with Uvicorn\nDESCRIPTION: This command starts the TelephonyServer using Uvicorn, an ASGI server. It specifies the `telephony_app:app` module, enables hot reloading, and sets the port to 3000.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn telephony_app:app --reload --port 3000\n```\n\n----------------------------------------\n\nTITLE: Creating EndConversation Action - cURL\nDESCRIPTION: Creates an action using a cURL request to the Vocode API, allowing the agent to end the conversation. The request specifies the `action_end_conversation` type. Requires a valid API key for authorization.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/using-actions.mdx#_snippet_2\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/actions/create \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"type\": \"action_end_conversation\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing the Langchain Agent\nDESCRIPTION: This code initializes a Langchain agent with specified tools, language model (llm), agent type, verbosity, and memory. It configures the agent for conversational interactions.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nagent = initialize_agent(\n    tools=[get_all_contacts, call_phone_number, word_of_the_day],\n    llm=llm,\n    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,\n    verbose=verbose,\n    memory=memory,\n)\n```\n\n----------------------------------------\n\nTITLE: Example External Action Response\nDESCRIPTION: This JSON response shows the structure of an external action object, including its ID, user ID, type, configuration (name, description, URL, input schema, speak_on_send, speak_on_receive, signature_secret), and action trigger.  The `signature_secret` is crucial for validating incoming requests from Vocode.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/external-actions.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"<EXAMPLE_ACTION_ID>\",\n  \"user_id\": \"ecd792cf-18a2-420b-91f5-cdaf22f5f562\",\n  \"type\": \"action_external\",\n  \"config\": {\n    \"processing_mode\": \"muted\",\n    \"name\": \"Meeting_Booking_Assistant\",\n    \"description\": \"Book a meeting for a 30 minute or 1 hour call.\",\n    \"url\": \"http://example.com/booking\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"length\": {\n          \"type\": \"string\",\n          \"enum\": [\"30m\", \"1hr\"]\n        },\n        \"time\": {\n          \"type\": \"string\",\n          \"pattern\": \"^\\\\d{2}:\\\\d0[ap]m$\"\n        }\n      }\n    },\n    \"speak_on_send\": true,\n    \"speak_on_receive\": true,\n    \"signature_secret\": \"MX/9/+iblnUoAAM2Jft8sgeY1bevJvuih2nr7XKPHIY=\"\n  },\n  \"action_trigger\": {\n    \"type\": \"action_trigger_function_call\",\n    \"config\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create DTMF Action in Vocode (cURL)\nDESCRIPTION: This snippet demonstrates how to create an action to send DTMF tones using a cURL request to the Vocode API. It sets the `type` to `action_dtmf` in the request body.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/actions.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/actions/create \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"type\": \"action_dtmf\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Building the Telephony Server Docker Image\nDESCRIPTION: This command builds a Docker image for the Vocode Langchain agent telephony application. It uses the Dockerfile in the current directory to create an image named `vocode-langchain-agent-telephony-app`.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t vocode-langchain-agent-telephony-app .\n```\n\n----------------------------------------\n\nTITLE: Run transcriber script\nDESCRIPTION: Runs the transcriber script to transcribe microphone input. This command executes the `transcribe.py` script located in the `playground/streaming/transcriber/` directory, using the configuration specified in that file.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/playground.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake transcribe\n```\n\n----------------------------------------\n\nTITLE: Get Specific Call by ID (Python)\nDESCRIPTION: This snippet retrieves a specific call object using its ID with the Vocode API Python client. The 'id' parameter specifies the call ID to retrieve.  Requires an initialized 'vocode_client'.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/retrieve-call-data.mdx#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nvocode_client.calls.get_call(id=\"CALL_ID\")\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with Poetry\nDESCRIPTION: This command uses Poetry to install the project's dependencies as specified in the `pyproject.toml` file. Poetry manages dependencies and creates a reproducible environment.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Starting Redis service\nDESCRIPTION: This command starts the Redis service using Homebrew. Redis is used as a data store for the TelephonyServer, typically for managing configurations and call state.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/telephony.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start redis\n```\n\n----------------------------------------\n\nTITLE: Create Meeting Assistant Action - cURL\nDESCRIPTION: This cURL command creates a Meeting Booking Assistant action by sending a POST request to the Vocode API. The request body includes the action's configuration, specifying its type, name, description, URL, and input schema. The input schema defines the expected 'length' (30m or 1hr) and 'time' (in the format HH:M0am/pm). API_KEY must be replaced with a valid API key.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/external-actions.mdx#_snippet_7\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request POST \\\n  --url https://api.vocode.dev/v1/actions/create \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --data '{\n  \"type\": \"action_external\",\n  \"config\": {\n    \"name\": \"Meeting_Booking_Assistant\",\n    \"description\": \"Book a meeting for a 30 minute or 1 hour call.\",\n    \"url\": \"http://example.com/booking\",\n    \"speak_on_send\": true,\n    \"speak_on_receive\": true,\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"length\": {\n          \"type\": \"string\",\n          \"enum\": [\"30m\", \"1hr\"]\n        },\n        \"time\": {\n          \"type\": \"string\",\n          \"pattern\": \"^\\\\d{2}:\\\\d0[ap]m$\"\n        }\n      }\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Defines the required environment variables for the Vocode backend. These include API keys for Deepgram, OpenAI, and Azure services.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/react-quickstart.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDEEPGRAM_API_KEY=\nOPENAI_API_KEY=\nAZURE_SPEECH_KEY=\nAZURE_SPEECH_REGION=\n```\n\n----------------------------------------\n\nTITLE: Build Docker Image\nDESCRIPTION: Builds a Docker image for the vocode-client-backend using the Dockerfile in the current directory. This creates a self-contained environment for running the client backend application.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/client_backend/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t vocode-client-backend .\n```\n\n----------------------------------------\n\nTITLE: Fetching Code from GitHub Repositories\nDESCRIPTION: This Python function `get_code_from_github()` fetches code documentation from specified GitHub repositories. It iterates through a list of libraries, clones each repository to a temporary directory using `git clone`, and then moves the documentation to a local directory named 'libraries_documentation/{name}'. It uses `subprocess.run` to execute the git command and `shutil.move` to move the documentation files.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/apps/voice_rag/manual_pinecone_ingestor.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport shutil\nimport tempfile\nimport subprocess\n\ndef get_code_from_github():\n    # Create a temporary directory\n    with tempfile.TemporaryDirectory() as temp_dir:\n        for library in libraries:\n            # Define the clone directory path\n            clone_dir = os.path.join(temp_dir, library['name'])\n\n            # Clone the repository using the git command\n            subprocess.run(['git', 'clone', library['code'], clone_dir], check=True)\n            \n            # Define the source and destination for moving documentation\n            doc_source = os.path.join(clone_dir, library['documentation_path'])\n            doc_dest = os.path.join('libraries_documentation', library['name'])\n\n            # Create the destination directory if it doesn't exist\n            os.makedirs(doc_dest, exist_ok=True)\n\n            # Move the documentation to the destination directory\n            shutil.move(doc_source, doc_dest)\n\nget_code_from_github()\n```\n\n----------------------------------------\n\nTITLE: Run synthesizer script\nDESCRIPTION: Runs the synthesizer script to synthesize text to speech and play it to the speaker. This command executes the `synthesize.py` script located in the `playground/streaming/synthesizer/` directory, using the synthesizer configuration specified in that file.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/playground.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake synthesize\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint Definition\nDESCRIPTION: This snippet defines an OpenAPI endpoint specification for a POST request to the `/v1/vector_databases/create` endpoint. It outlines the expected structure for creating a vector database, including request and response schemas, and is written in OpenAPI specification format.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/vector_databases/create-vector-database.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: post /v1/vector_databases/create\n```\n\n----------------------------------------\n\nTITLE: ChatGPTAgentConfig with Action Python\nDESCRIPTION: Demonstrates how to add a custom action to the configuration of a ChatGPTAgent. This configuration includes an action config that specifies the type of action to use, enabling the agent to perform the defined action within a conversation.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/agents-with-actions.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\naction_config = ChatGPTAgentConfig(\n    ...\n    actions = [\n        NylasSendEmailVocodeActionConfig(\n            type = \"action_nylas_send_email\"\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Dependencies\nDESCRIPTION: This command installs the project dependencies using Poetry, a dependency management tool for Python.  It reads the `poetry.lock` file (if it exists) or the `pyproject.toml` file to resolve and install the required packages. This step is crucial to setting up the development environment before making changes.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Defining the get_all_contacts Tool\nDESCRIPTION: This defines a Langchain tool named `get_all_contacts` that retrieves a list of contacts. It's decorated with `@tool` to make it accessible to the agent.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@tool(\"get_all_contacts\")\ndef get_all_contacts(placeholder: str) -> List[dict]:\n    \"\"\"Get contacts.\"\"\"\n    return CONTACTS\n```\n\n----------------------------------------\n\nTITLE: Instantiating the TelephonyServer\nDESCRIPTION: This code instantiates a `TelephonyServer` object, which manages the phone calls. It configures the server with a base URL, config manager, inbound call configurations, and an events manager.  The server is then added to the FastAPI app.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntelephony_server = TelephonyServer(\n    base_url=BASE_URL,\n    config_manager=config_manager,\n    inbound_call_configs=[],\n    events_manager=EventsManager(),\n    logger=logger,\n)\n\napp.include_router(telephony_server.get_router())\n```\n\n----------------------------------------\n\nTITLE: Running a Redis Instance with Docker\nDESCRIPTION: This command runs a Redis instance using Docker. It maps port 6379 on the host machine to port 6379 in the container, and uses the `redis/redis-stack:latest` image.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dp 6379:6379 -it redis/redis-stack:latest\n```\n\n----------------------------------------\n\nTITLE: Define GET endpoint for Vector Database retrieval\nDESCRIPTION: This YAML snippet defines a GET endpoint for retrieving vector databases at the `/v1/vector_databases` path, according to OpenAPI specification. The specification outlines the structure of the API endpoint and its expected behavior.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/vector_databases/get-vector-database.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nopenapi: get /v1/vector_databases\n```\n\n----------------------------------------\n\nTITLE: Setting up a Python Virtual Environment (optional)\nDESCRIPTION: These commands create and activate a Python virtual environment using `virtualenv`. This isolates the project's dependencies from the system-wide Python installation.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running main.py\nDESCRIPTION: This command installs dependencies using Poetry and executes `main.py` to run the Langchain agent.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/open-source/langchain-agent-dep.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\npoetry run python main.py\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Numbers\nDESCRIPTION: Defines a GET endpoint for retrieving number resources at the /v1/numbers path according to the OpenAPI specification. This endpoint can be used to fetch a list of available numbers.\nSOURCE: https://github.com/vocodedev/vocode-core/blob/main/docs/api-reference/numbers/get-number.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/numbers\n```"
  }
]