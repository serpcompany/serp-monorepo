[
  {
    "owner": "grantjenks",
    "repo": "python-sortedcontainers",
    "content": "TITLE: Defining SortedList Class in Python\nDESCRIPTION: This snippet defines the SortedList class from the sortedcontainers module. It includes a comprehensive list of methods, including initialization, modification, searching, and special methods for Python integration.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/sortedlist.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: sortedcontainers.SortedList\n   :show-inheritance:\n\n   .. automethod:: __new__\n   .. automethod:: __init__\n   .. automethod:: add\n   .. automethod:: update\n   .. automethod:: clear\n   .. automethod:: discard\n   .. automethod:: remove\n   .. automethod:: pop\n   .. automethod:: bisect_left\n   .. automethod:: bisect_right\n   .. automethod:: count\n   .. automethod:: index\n   .. automethod:: irange\n   .. automethod:: islice\n   .. automethod:: __iter__\n   .. automethod:: __reversed__\n   .. automethod:: __contains__\n   .. automethod:: __getitem__\n   .. automethod:: __delitem__\n   .. automethod:: __add__\n   .. automethod:: __iadd__\n   .. automethod:: __mul__\n   .. automethod:: __imul__\n   .. automethod:: __eq__\n   .. automethod:: __ne__\n   .. automethod:: __lt__\n   .. automethod:: __le__\n   .. automethod:: __gt__\n   .. automethod:: __ge__\n   .. automethod:: copy\n   .. automethod:: __len__\n   .. automethod:: __repr__\n   .. automethod:: _check\n   .. automethod:: _reset\n   .. automethod:: append\n   .. automethod:: extend\n   .. automethod:: insert\n   .. automethod:: reverse\n   .. automethod:: __setitem__\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of SortedList, SortedDict and SortedSet in Python\nDESCRIPTION: Demonstrates the basic initialization and operations of the three main sorted container types. Shows creation, access, multiplication, counting, and bisection operations on sorted collections.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from sortedcontainers import SortedList\n>>> sl = SortedList(['e', 'a', 'c', 'd', 'b'])\n>>> sl\nSortedList(['a', 'b', 'c', 'd', 'e'])\n>>> sl *= 10_000_000\n>>> sl.count('c')\n10000000\n>>> sl[-3:]\n['e', 'e', 'e']\n>>> from sortedcontainers import SortedDict\n>>> sd = SortedDict({'c': -3, 'a': 1, 'b': 2})\n>>> sd\nSortedDict({'a': 1, 'b': 2, 'c': -3})\n>>> sd.popitem(index=-1)\n('c', -3)\n>>> from sortedcontainers import SortedSet\n>>> ss = SortedSet('abracadabra')\n>>> ss\nSortedSet(['a', 'b', 'c', 'd', 'r'])\n>>> ss.bisect_left('c')\n2\n```\n\n----------------------------------------\n\nTITLE: Basic SortedList Operations\nDESCRIPTION: Demonstrates initializing a SortedList, adding elements with update() and add() methods, and showing how the list maintains sorted order.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from sortedcontainers import SortedList\n>>> sl = SortedList()\n>>> sl.update([5, 1, 3, 4, 2])\n>>> sl\nSortedList([1, 2, 3, 4, 5])\n>>> sl.add(0)\n>>> sl\nSortedList([0, 1, 2, 3, 4, 5])\n```\n\n----------------------------------------\n\nTITLE: SortedList Lookup Operations\nDESCRIPTION: Demonstrates efficient lookup operations in SortedList including containment checking, counting, indexing, and bisection methods.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> sl = SortedList('abbcccddddeeeee')\n>>> 'f' in sl\nFalse\n>>> sl.count('e')\n5\n>>> sl.index('c')\n3\n>>> sl[3]\n'c'\n>>> sl.bisect_left('d')\n6\n>>> sl.bisect_right('d')\n10\n>>> sl[6:10]\n['d', 'd', 'd', 'd']\n```\n\n----------------------------------------\n\nTITLE: Using SortedKeyList with a Key Function\nDESCRIPTION: Demonstrates initializing and using SortedKeyList with a key function to control sorting order, in this case using the negation operator for descending order.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from operator import neg\n>>> from sortedcontainers import SortedKeyList\n>>> skl = SortedKeyList(key=neg)\n```\n\n----------------------------------------\n\nTITLE: Installing SortedContainers with pip\nDESCRIPTION: Command to install the SortedContainers library using pip. This is the recommended installation method for most users.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m pip install sortedcontainers\n```\n\n----------------------------------------\n\nTITLE: Iterating Through SortedList\nDESCRIPTION: Shows different methods for iterating through elements in a SortedList, including standard iteration, reversed iteration, and range-based iteration.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> sl = SortedList('acegi')\n>>> list(iter(sl))\n['a', 'c', 'e', 'g', 'i']\n>>> list(reversed(sl))\n['i', 'g', 'e', 'c', 'a']\n>>> list(sl.irange('b', 'h'))\n['c', 'e', 'g']\n>>> list(sl.islice(1, 4))\n['c', 'e', 'g']\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from SortedList\nDESCRIPTION: Shows various methods for removing elements from a SortedList, including remove(), discard(), pop(), and clear() methods.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> sl.remove(0)\n>>> sl.discard(1)\n>>> sl\nSortedList([2, 3, 4, 5])\n>>> sl.pop()\n5\n>>> del sl[1]\n>>> sl\nSortedList([2, 4])\n>>> sl.clear()\n```\n\n----------------------------------------\n\nTITLE: SortedList Operators and Mutations\nDESCRIPTION: Demonstrates sequence operators (addition and multiplication) on SortedList objects and their in-place counterparts.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> sl = SortedList('abc')\n>>> sl + sl\nSortedList(['a', 'a', 'b', 'b', 'c', 'c'])\n>>> sl * 3\nSortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\n>>> sl += 'de'\n>>> sl\nSortedList(['a', 'b', 'c', 'd', 'e'])\n>>> sl *= 2\n>>> sl\nSortedList(['a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e'])\n```\n\n----------------------------------------\n\nTITLE: SortedList Unsupported Operations\nDESCRIPTION: Shows operations that are not supported by SortedList because they would break the sorted property, along with the appropriate alternatives.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> sl = SortedList('abcde')\n>>> sl[2] = 'c'\nTraceback (most recent call last):\n  ...\nNotImplementedError: use ``del sl[index]`` and ``sl.add(value)`` instead\n>>> sl.reverse()\nTraceback (most recent call last):\n  ...\nNotImplementedError: use ``reversed(sl)`` instead\n>>> sl.append('f')\nTraceback (most recent call last):\n  ...\nNotImplementedError: use ``sl.add(value)`` instead\n>>> sl.extend(['f', 'g', 'h'])\nTraceback (most recent call last):\n  ...\nNotImplementedError: use ``sl.update(values)`` instead\n>>> sl.insert(5, 'f')\nTraceback (most recent call last):\n  ...\nNotImplementedError: use ``sl.add(value)`` instead\n```\n\n----------------------------------------\n\nTITLE: Importing SortedContainers Module in Python\nDESCRIPTION: This snippet shows how to import the sortedcontainers.sortedlist module. It's the starting point for using SortedList and SortedKeyList classes.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/sortedlist.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: sortedcontainers.sortedlist\n```\n\n----------------------------------------\n\nTITLE: Importing SortedDict from sortedcontainers\nDESCRIPTION: This snippet shows how to import the SortedDict class from the sortedcontainers module. SortedDict is the main class documented in this file, providing a sorted dictionary implementation.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/sorteddict.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sortedcontainers import SortedDict\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Custom Class for SortedList in Python\nDESCRIPTION: This example shows the correct way to implement a Record class for use with SortedList, ensuring total ordering and consistent comparison between objects.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass Record(object):\n    def __init__(self, name, rank):\n        self.name = name\n        self.rank = rank\n    def _cmp_key(self):\n        return (self.rank, self.name)\n    def __eq__(self, other):\n        return self._cmp_key() == other._cmp_key()\n    def __lt__(self, other):\n        return self._cmp_key() < other._cmp_key()\n```\n\n----------------------------------------\n\nTITLE: SortedKeyList Special Methods\nDESCRIPTION: Demonstrates the additional methods provided by SortedKeyList that operate on keys rather than values, including bisection and range operations.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> skl = SortedKeyList([1, 2, 3, 4, 5], key=neg)\n>>> skl\nSortedKeyList([5, 4, 3, 2, 1], key=<built-in function neg>)\n>>> skl.bisect_key_left(-4.5)\n1\n>>> skl.bisect_key_right(-1.5)\n4\n>>> list(skl.irange_key(-4.5, -1.5))\n[4, 3, 2]\n```\n\n----------------------------------------\n\nTITLE: Initializing SortedDict in Python\nDESCRIPTION: Creates a basic empty SortedDict object. SortedDict is a dictionary that maintains its keys in sorted order.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from sortedcontainers import SortedDict\n>>> sd = SortedDict()\n```\n\n----------------------------------------\n\nTITLE: Working with views in SortedDict\nDESCRIPTION: Demonstrates using keys, items, and values views in SortedDict which support both set semantics and sequence semantics with optimized methods for lookups by index.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> keys = sd.keys()\n>>> keys[0]\n'a'\n>>> items = sd.items()\n>>> items[-1]\n('b', 2)\n>>> values = sd.values()\n>>> values[:]\n[1, 2]\n```\n\n----------------------------------------\n\nTITLE: Creating SortedDict with a custom key function\nDESCRIPTION: Shows how to create a SortedDict with a key function to change sorting behavior, creating a dictionary with integer keys in descending order.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> sd = SortedDict(neg, enumerate('abc', start=1))\n>>> sd\nSortedDict(<built-in function neg>, {3: 'c', 2: 'b', 1: 'a'})\n>>> keys = sd.keys()\n>>> list(keys)\n[3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Set operations with SortedSet\nDESCRIPTION: Demonstrates set operations on SortedSet including difference, intersection, symmetric_difference, union, and their in-place counterparts and operators.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> abcd = SortedSet('abcd')\n>>> cdef = SortedSet('cdef')\n>>> abcd.difference(cdef)\nSortedSet(['a', 'b'])\n>>> abcd.intersection(cdef)\nSortedSet(['c', 'd'])\n>>> abcd.symmetric_difference(cdef)\nSortedSet(['a', 'b', 'e', 'f'])\n>>> abcd.union(cdef)\nSortedSet(['a', 'b', 'c', 'd', 'e', 'f'])\n>>> abcd | cdef\nSortedSet(['a', 'b', 'c', 'd', 'e', 'f'])\n>>> abcd |= cdef\n>>> abcd\nSortedSet(['a', 'b', 'c', 'd', 'e', 'f'])\n```\n\n----------------------------------------\n\nTITLE: Importing SortedKeysView from sortedcontainers\nDESCRIPTION: This snippet demonstrates the import of SortedKeysView, which is a view class for the keys of a SortedDict. It inherits from a base class and provides custom __getitem__ and __delitem__ methods.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/sorteddict.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom sortedcontainers import SortedKeysView\n```\n\n----------------------------------------\n\nTITLE: Importing SortedItemsView from sortedcontainers\nDESCRIPTION: This code imports the SortedItemsView class, which provides a view of the items (key-value pairs) in a SortedDict. It inherits from a base class and implements a custom __getitem__ method.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/sorteddict.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom sortedcontainers import SortedItemsView\n```\n\n----------------------------------------\n\nTITLE: Time Complexity of SortedList.add() with Square Root Load\nDESCRIPTION: Time complexity formula for SortedList.add() when the load (m) is proportional to the square root of n, resulting in improved complexity.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-scale.rst#2025-04-23_snippet_2\n\nLANGUAGE: math\nCODE:\n```\nT_{add}(n|m \\propto n^\\frac{1}{2}) = O(n * n^\\frac{1}{2})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the List Length Example for SortedList Implementation in Python\nDESCRIPTION: Example showing how the _lists attribute contains sublists with specific lengths in a SortedList implementation. This demonstrates the structure used with a load factor of 4.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/implementation.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlist(map(len, _lists)) -> [3, 5, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Using core mutable set methods with SortedSet\nDESCRIPTION: Demonstrates core mutable set methods in SortedSet including add, update, discard, and remove while maintaining values in sorted order.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> ss.add('c')\n>>> ss.add('a')\n>>> ss.add('b')\n>>> ss\nSortedSet(['a', 'b', 'c'])\n>>> 'c' in ss\nTrue\n>>> ss.discard('a')\n>>> ss.remove('b')\n>>> _ = ss.update('def')\n>>> ss\nSortedSet(['c', 'd', 'e', 'f'])\n```\n\n----------------------------------------\n\nTITLE: Sample Index Tree Structure for Indexing Explanation in Python\nDESCRIPTION: Demonstration of a sample index tree structure used to explain the indexing algorithm in SortedList. Shows the tree representation of the _index list with an offset value of 3, which is used in the position calculation algorithm.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/implementation.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n_index = 14 5 9 3 2 4 5\n_offset = 3\n\nTree:\n\n         14\n      5      9\n    3   2  4   5\n```\n\n----------------------------------------\n\nTITLE: Simplified Record Class Using Instance Identity in Python\nDESCRIPTION: This snippet demonstrates a simplified Record class that relies on instance identity for equality and only implements __lt__ for comparison, suitable for use with SortedList.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass Record(object):\n    def __init__(self, name, rank):\n        self.name = name\n        self.rank = rank\n    def __lt__(self, other):\n        return self.rank < other.rank\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Record Class for SortedList in Python\nDESCRIPTION: This snippet demonstrates how to create a custom Record class with name and rank attributes. It shows an incorrect implementation that violates SortedList requirements and explains why it fails.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Record(object):\n    def __init__(self, name, rank):\n        self.name = name\n        self.rank = rank\n    def __eq__(self, other):\n        return self.name == other.name\n```\n\n----------------------------------------\n\nTITLE: Corrected Random Key Function for SortedList in Python\nDESCRIPTION: This snippet shows a corrected version of the random key function that provides arbitrary but reliable ordering for SortedList.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom random import seed\ndef key_func(value):\n    \"Key-function for arbitrary but reliable order.\"\n    seed(value)\n    return random()\n```\n\n----------------------------------------\n\nTITLE: Adding items to SortedDict with various methods\nDESCRIPTION: Demonstrates adding items to a SortedDict using __setitem__, update, and setdefault methods. The keys remain sorted regardless of insertion order.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> sd['e'] = 5\n>>> sd['b'] = 2\n>>> sd\nSortedDict({'b': 2, 'e': 5})\n>>> sd.update({'d': 4, 'c': 3})\n>>> sd\nSortedDict({'b': 2, 'c': 3, 'd': 4, 'e': 5})\n>>> sd.setdefault('a', 1)\n1\n>>> sd\nSortedDict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})\n```\n\n----------------------------------------\n\nTITLE: Invalid Key Function Example for SortedList in Python\nDESCRIPTION: This example demonstrates an invalid key function that returns random values, violating the requirement for consistent keys in SortedList.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom random import random\nkey_func = lambda value: random()\nsl = SortedList([1, 2, 3, 4, 5], key=key_func)\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Complexity for SortedList.add() Operation\nDESCRIPTION: Mathematical formula representing the time complexity of adding n elements to a SortedList with n existing elements. The complexity is expressed in terms of n (list size) and m (sublist length).\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-scale.rst#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nT_{add}(n, m) = O(n * \\log_2{\\frac{n}{m}} + n * \\log_2{m} + n * m + \\frac{n}{m} * (m + \\frac{n}{m}))\n```\n\n----------------------------------------\n\nTITLE: Time Complexity for SortedList.__delitem__() Operation\nDESCRIPTION: Mathematical formula representing the time complexity of deleting n elements from a SortedList with n existing elements. The complexity is expressed in terms of n (list size) and m (sublist length).\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-scale.rst#2025-04-23_snippet_4\n\nLANGUAGE: math\nCODE:\n```\nT_{del}(n, m) = O(\\frac{n}{m} * \\frac{n}{m} + n * \\log_2{\\frac{n}{m}} + n * m + n * \\log_2{\\frac{n}{m}} + \\frac{n}{m} * (m + \\frac{n}{m}))\n```\n\n----------------------------------------\n\nTITLE: Looking up keys in SortedDict using mapping interface\nDESCRIPTION: Demonstrates looking up keys in a SortedDict using __getitem__, __contains__, get, and peekitem methods.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> sd['b']\n2\n>>> 'c' in sd\nFalse\n>>> sd.get('z') is None\nTrue\n>>> sd.peekitem(index=-1)\n('b', 2)\n```\n\n----------------------------------------\n\nTITLE: Defining Multiset Workload for SortedList in Python\nDESCRIPTION: Specifies the mix of operations and their frequencies for simulating a multiset workload using SortedList.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-workload.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n* 75% SortedList.__contains__\n* 10% SortedList.add\n* 10% SortedList.remove\n* 5% SortedList.__getitem__\n```\n\n----------------------------------------\n\nTITLE: Defining Intervals Workload for SortedList in Python\nDESCRIPTION: Specifies the mix of operations and their frequencies for simulating an intervals workload using SortedList.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-workload.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n* 30% SortedList.bisect\n* 20% SortedList.__getitem__\n* 20% SortedList.__delitem__\n* 10% SortedList.__getitem__ (range query)\n* 10% SortedList.add\n* 10% SortedList.discard\n```\n\n----------------------------------------\n\nTITLE: Using sequence interface methods with SortedDict\nDESCRIPTION: Shows sequence interface methods like bisect_right, index, and irange that are provided by SortedList and available in SortedDict.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> sd.bisect_right('b')\n2\n>>> sd.index('a')\n0\n>>> list(sd.irange('a', 'z'))\n['a', 'b']\n```\n\n----------------------------------------\n\nTITLE: SortedSet Benchmark Data\nDESCRIPTION: Raw performance measurement data for SortedSet operations including symmetric_difference_update, pop, init, contains, iter, add, update, union, remove, and difference operations. Each operation is tested with different input sizes ranging from 100 to 1000000 elements.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_runtime_sortedset.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsymmetric_difference_update_tiny SortedSet_Py27 100 1.19999999981e-05 1.39999999931e-05 1.29999999956e-05 1.27999999961e-05\nsymmetric_difference_update_tiny SortedSet_Py27 1000 3.00000000095e-05 3.1000000007e-05 3.1000000007e-05 3.08000000075e-05\n```\n\n----------------------------------------\n\nTITLE: SortedSet Performance Data\nDESCRIPTION: Raw performance benchmark data showing execution times for different SortedSet operations with varying input sizes. Includes measurements for tiny, small, medium and large operations across different set sizes from 100 to 10000000 elements.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_load_sortedset.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndifference_update_small SortedSet_10000 1000 0.0002110000000357104 0.00021599999990939978 0.00021300000003066089 0.00021299999998518614\ndifference_update_small SortedSet_10000 10000 0.002772999999933745 0.0028839999999945576 0.0028250000000298314 0.002825799999936862\ndifference_update_small SortedSet_10000 100000 0.029793999999810694 0.030148999999937587 0.02984399999991183 0.029917599999907906\n```\n\n----------------------------------------\n\nTITLE: Using sequence operations with SortedSet\nDESCRIPTION: Shows how SortedSet behaves like a sequence with __getitem__, __reversed__, __delitem__, and pop methods.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> ss[0]\n'c'\n>>> list(reversed(ss))\n['f', 'e', 'd', 'c']\n>>> del ss[0]\n>>> ss.pop(index=-1)\n'f'\n>>> ss\nSortedSet(['d', 'e'])\n```\n\n----------------------------------------\n\nTITLE: SortedList Performance Metrics\nDESCRIPTION: Raw performance metrics showing execution times in seconds for various operations on SortedList with different dataset sizes. Each operation is tested multiple times and includes minimum, maximum, and average execution times.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_load_sortedlist.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nadd SortedList_100 100 3.999999998782755e-06 5.999999999062311e-06 4.000000000559112e-06 4.79999999960512e-06\nadd SortedList_100 1000 1.799999999896329e-05 3.5999999999702936e-05 1.8000000000739647e-05 2.179999999967208e-05\nadd SortedList_100 10000 0.00015400000000020952 0.00017099999999992122 0.00015500000000123748 0.00015900000000073077\nadd SortedList_100 100000 0.0018330000000013058 0.002079000000000164 0.0018529999999987723 0.0018940000000000623\nadd SortedList_100 1000000 0.024003999999999692 0.02635400000000132 0.02524900000000052 0.025283400000000355\nadd SortedList_100 10000000 0.3730059999999966 0.395583000000002 0.37910200000000316 0.3816378\n```\n\n----------------------------------------\n\nTITLE: Running SortedList Stress Tests in Python\nDESCRIPTION: Command to run stress tests for the SortedList data type with specified iteration count and random seed. The example shows running 1000 iterations with seed 0.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/development.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m tests.test_stress_sortedlist 1000 0\n```\n\n----------------------------------------\n\nTITLE: SortedList methods exposed on SortedSet\nDESCRIPTION: Shows SortedList methods that are also available on SortedSet objects including bisect, index, irange, and islice.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> ss = SortedSet('abcdef')\n>>> ss.bisect('d')\n4\n>>> ss.index('f')\n5\n>>> list(ss.irange('b', 'e'))\n['b', 'c', 'd', 'e']\n>>> list(ss.islice(-3))\n['d', 'e', 'f']\n```\n\n----------------------------------------\n\nTITLE: Installing SortedContainers with pipenv\nDESCRIPTION: Alternative installation method using pipenv, which manages dependencies and virtual environments.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pipenv install sortedcontainers\n```\n\n----------------------------------------\n\nTITLE: Creating SortedSet with a custom key function\nDESCRIPTION: Demonstrates initializing a SortedSet with a callable key function that is used to extract a comparison key, creating a set with elements sorted in descending order.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> ss = SortedSet([1, 2, 3], key=neg)\n>>> ss\nSortedSet([3, 2, 1], key=<built-in function neg>)\n```\n\n----------------------------------------\n\nTITLE: Cloning SortedContainers from GitHub\nDESCRIPTION: Command to clone the source repository from GitHub for developers who want to work with the latest code.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git://github.com/grantjenks/python-sortedcontainers.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sorted Containers Repository with Git\nDESCRIPTION: Command to clone the Sorted Containers source code repository from GitHub using Git.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/development.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git://github.com/grantjenks/python-sortedcontainers.git\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with pip\nDESCRIPTION: Command to install the development dependencies for Sorted Containers using pip and the requirements.txt file.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/development.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a defaultdict-like SortedDict with __missing__\nDESCRIPTION: Demonstrates creating a DefaultSortedDict class by customizing the __missing__ method to give missing keys a default value, similar to collections.defaultdict.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> class DefaultSortedDict(SortedDict):\n...     def __missing__(self, key):\n...         value = 0\n...         self[key] = value\n...         return value\n>>> dsd = DefaultSortedDict()\n>>> dsd['z']\n0\n```\n\n----------------------------------------\n\nTITLE: Defining SortedKeyList Class in Python\nDESCRIPTION: This snippet defines the SortedKeyList class from the sortedcontainers module. It includes methods specific to key-based sorting, such as bisect_key_left, bisect_key_right, and irange_key.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/sortedlist.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: sortedcontainers.SortedKeyList\n   :show-inheritance:\n\n   .. automethod:: __init__\n   .. autoattribute:: key\n   .. automethod:: bisect_key_left\n   .. automethod:: bisect_key_right\n   .. automethod:: irange_key\n```\n\n----------------------------------------\n\nTITLE: Including History File in RST Documentation\nDESCRIPTION: reStructuredText directive that includes the HISTORY.rst file from one directory level up. Used to maintain changelog/history documentation in a single source file while including it in the main documentation.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/history.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../HISTORY.rst\n```\n\n----------------------------------------\n\nTITLE: Creating SortedKeyList from SortedList\nDESCRIPTION: Shows how to create a SortedKeyList by passing a key function to the SortedList constructor, and demonstrates the relationship between these classes.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from sortedcontainers import SortedList\n>>> values = SortedList([1, 2, 3, 4, 5], key=neg)\n>>> values\nSortedKeyList([5, 4, 3, 2, 1], key=<built-in function neg>)\n>>> isinstance(values, SortedList)\nTrue\n>>> issubclass(SortedKeyList, SortedList)\nTrue\n>>> values.key\n<built-in function neg>\n```\n\n----------------------------------------\n\nTITLE: Initializing SortedSet in Python\nDESCRIPTION: Creates a basic empty SortedSet object. SortedSet maintains values in sorted order and provides both set and sequence operations.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> from sortedcontainers import SortedSet\n>>> ss = SortedSet()\n```\n\n----------------------------------------\n\nTITLE: Removing items from SortedDict by key and index\nDESCRIPTION: Shows methods to remove items from a SortedDict using __delitem__, pop (by key), and popitem (by index).\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> del sd['d']\n>>> sd.pop('c')\n3\n>>> sd.popitem(index=-1)\n('e', 5)\n>>> sd\nSortedDict({'a': 1, 'b': 2})\n```\n\n----------------------------------------\n\nTITLE: Defining SortedListWithKey Class in Python\nDESCRIPTION: This snippet defines the SortedListWithKey class from the sortedcontainers module. It appears to be an alias or alternative implementation of SortedKeyList.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/sortedlist.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: sortedcontainers.SortedListWithKey\n```\n\n----------------------------------------\n\nTITLE: Building the Positional Index Tree in SortedList Implementation\nDESCRIPTION: Example illustrating how the positional index (_index) is constructed as a tree of pair-wise sums of the sublist lengths. This tree structure enables efficient indexing operations in the SortedList data structure.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/implementation.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n[8, 9, 6, 0]\n[17, 6]\n[23]\n[23, 17, 6, 8, 9, 6, 0, 3, 5, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Optimal Time Complexity of SortedList.add() with Cube Root Load\nDESCRIPTION: Optimized time complexity formula for SortedList.add() when the load (m) is proportional to the cube root of n, providing the best theoretical bounds.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-scale.rst#2025-04-23_snippet_3\n\nLANGUAGE: math\nCODE:\n```\nT_{add}(n|m \\propto n^\\frac{1}{3}) = O(n * n^\\frac{1}{3})\n```\n\n----------------------------------------\n\nTITLE: Optimal Time Complexity of SortedList.__delitem__() with Cube Root Load\nDESCRIPTION: Optimized time complexity formula for SortedList.__delitem__() when the load (m) is proportional to the cube root of n, providing the best theoretical bounds for deletion operations.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-scale.rst#2025-04-23_snippet_5\n\nLANGUAGE: math\nCODE:\n```\nT_{del}(n|m \\propto n^\\frac{1}{3}) = O(n * n^\\frac{1}{3})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Comparison Methods in Python\nDESCRIPTION: This snippet shows an incorrect implementation of __eq__ and __lt__ methods for a Record class, violating the total ordering requirement for SortedList.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass Record(object):\n    def __init__(self, name, rank):\n        self.name = name\n        self.rank = rank\n    def __eq__(self, other):\n        return self.name == other.name\n    def __lt__(self, other):\n        return self.rank < other.rank\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Key Function with SortedList in Python\nDESCRIPTION: This example shows an invalid use of a key function with SortedList. It demonstrates how using rank as a key can lead to problems when objects with equal names have different ranks.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nget_rank = lambda record: record.rank\nsl = SortedList([alice1, bob2, carol3], key=get_rank)\n```\n\n----------------------------------------\n\nTITLE: Performance Metrics for Add Operation on Sorted Containers\nDESCRIPTION: This table shows the performance metrics for the 'add' operation on Sorted Containers with varying data sizes. It demonstrates how the operation scales with increasing data size, showing time taken, operations per second, and the performance ratio between sizes.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-scale.rst#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n====== ======= ======= ============== ============= =========\nMethod    Size     Ops           Time       Ops/Sec     Ratio\n====== ======= ======= ============== ============= =========\n   add   1e+06   1e+04        0.02133    468884.826       nan\n   add   1e+07   1e+05        0.38629    258872.924     1.811\n   add   1e+08   1e+06        6.20695    161109.825     1.607\n   add   1e+09   1e+07      120.24735     83161.919     1.937\n   add   1e+10   1e+08     2416.60713     41380.330     2.010\n====== ======= ======= ============== ============= =========\n```\n\n----------------------------------------\n\nTITLE: Performance Metrics for Delete Operation on Sorted Containers\nDESCRIPTION: This table presents the performance metrics for the 'delete' operation on Sorted Containers with varying data sizes. It shows how the operation scales with increasing data size, displaying time taken, operations per second, and the performance ratio between sizes.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-scale.rst#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n====== ======= ======= ============== ============= =========\nMethod    Size     Ops           Time       Ops/Sec     Ratio\n====== ======= ======= ============== ============= =========\n   del   1e+06   1e+04        0.01791    558289.343       nan\n   del   1e+07   1e+05        0.26171    382097.449     1.461\n   del   1e+08   1e+06        6.11150    163626.036     2.335\n   del   1e+09   1e+07      171.58899     58278.798     2.808\n   del   1e+10   1e+08     5493.95076     18201.838     3.202\n====== ======= ======= ============== ============= =========\n```\n\n----------------------------------------\n\nTITLE: Defining Priority Queue Workload for SortedList in Python\nDESCRIPTION: Specifies the mix of operations and their frequencies for simulating a priority queue workload using SortedList.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-workload.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n* 40% SortedList.add\n* 40% SortedList.pop\n* 10% SortedList.discard\n* 9% SortedList.__contains__\n* 1% SortedList.__iter__ (limited to first 100 elements)\n```\n\n----------------------------------------\n\nTITLE: Defining Ranking Workload for SortedList in Python\nDESCRIPTION: Specifies the mix of operations and their frequencies for simulating a ranking workload using SortedList.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-workload.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n* 40% SortedList.__getitem__\n* 40% SortedList.index\n* 10% SortedList.add\n* 10% SortedList.remove\n```\n\n----------------------------------------\n\nTITLE: Defining Neighbor Workload for SortedList in Python\nDESCRIPTION: Specifies the mix of operations and their frequencies for simulating a neighbor workload using SortedList.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-workload.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n* 75% SortedList.bisect\n* 10% SortedList.add\n* 10% SortedList.remove\n* 5% SortedList.__iter__ (limited to first 100 elements)\n```\n\n----------------------------------------\n\nTITLE: Python SortedDict Method Update Example\nDESCRIPTION: Example showing updated method names for SortedDict in Python 3. Illustrates transition from older methods like iterkeys(), iteritems(), itervalues() to modern keys(), items(), values() methods that return views.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/HISTORY.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Old style (removed)\ndict.iterkeys()\ndict.iteritems()\ndict.itervalues()\n\n# New style \ndict.keys()      # Returns SortedKeysView\ndict.items()     # Returns SortedItemsView \ndict.values()    # Returns SortedValuesView\n```\n\n----------------------------------------\n\nTITLE: Python SortedList API Changes Example\nDESCRIPTION: Example showing deprecated methods in SortedList that now raise NotImplementedError. Shows the transition from append/extend/insert to add/update methods.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/HISTORY.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Deprecated methods that raise NotImplementedError\nlist.__setitem__()\nlist.append()      # Use add() instead\nlist.extend()      # Use update() instead\nlist.insert()      # Use add() instead\n```\n\n----------------------------------------\n\nTITLE: Running Tests with setup.py\nDESCRIPTION: Command to run the test suite for Sorted Containers using Python's setup.py script.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/development.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python setup.py test\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pytest and Coverage\nDESCRIPTION: Command to run the test suite with pytest, including coverage reporting for branch coverage and missing lines.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/development.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pytest --cov sortedcontainers --cov-report term-missing --cov-branch\n```\n\n----------------------------------------\n\nTITLE: Running SortedList Benchmarks and Plotting\nDESCRIPTION: Two-step process to run benchmarks for SortedList, generate results, and create plots. First command runs benchmarks in bare mode and saves to file, second command plots the results.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/development.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m tests.benchmark_sortedlist --bare > tests/results_sortedlist.txt\n$ python -m tests.benchmark_plot tests/results_sortedlist.txt SortedList --save\n```\n\n----------------------------------------\n\nTITLE: Local Benchmark Setup and Execution\nDESCRIPTION: Series of commands to download the repository, set up the environment, and run benchmarks for SortedList, SortedDict, and SortedSet locally.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/development.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -OL https://github.com/grantjenks/python-sortedcontainers/zipball/master\n$ unzip master\n$ cd grantjenks-python-sortedcontainers-[GITHASH]/\n$ export PYTHONPATH=`pwd`\n$ python -m tests.benchmark_sortedlist\n$ python -m tests.benchmark_sorteddict\n$ python -m tests.benchmark_sortedset\n```\n\n----------------------------------------\n\nTITLE: Installing SortedContainers from Source\nDESCRIPTION: Command to install SortedContainers from a local source directory into your Python environment.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m pip install .\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText References for Related Python Packages\nDESCRIPTION: Defines hyperlink references in reStructuredText format that can be used throughout the documentation. These references point to the PyPI pages for 'bintrees' and 'Banyan' packages, which are alternative implementations for sorted containers in Python.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/introduction.rst#2025-04-23_snippet_34\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _`bintrees`: https://pypi.org/project/bintrees/\n.. _`banyan`: https://pypi.org/project/Banyan/\n```\n\n----------------------------------------\n\nTITLE: SortedDict Benchmark Results\nDESCRIPTION: Raw performance timing data showing minimum, maximum and average execution times in seconds for different SortedDict operations across varying container and input sizes.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_load_sorteddict.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontains SortedDict_100 100 2.000000000279556e-06 2.9999999995311555e-06 2.9999999995311555e-06 2.5999999998305156e-06\ncontains SortedDict_100 1000 2.9999999995311555e-06 4.999999999810711e-06 3.999999998782755e-06 3.7999999999982492e-06\ncontains SortedDict_100 10000 1.3999999998404178e-05 2.800000000036107e-05 2.19999999995224e-05 2.099999999991553e-05\n```\n\n----------------------------------------\n\nTITLE: Benchmarking SortedList Operations in Python\nDESCRIPTION: Performance measurements for various SortedList operations with different input sizes. Each operation is tested multiple times, and the results show the minimum, maximum, and average execution times in seconds.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_load_sortedlist.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncount SortedList_1000 100 2.999999992425728e-06 4.9999999873762135e-06 3.999999989900971e-06 3.799999990405922e-06\ncount SortedList_1000 1000 1.6999999957079126e-05 2.0999999946980097e-05 1.7000000070765964e-05 1.8000000000029105e-05\ncount SortedList_1000 10000 0.0001650000000381624 0.00016900000002806337 0.0001650000000381624 0.00016600000001290027\ncount SortedList_1000 100000 0.0021299999999655483 0.0021550000000161162 0.0021510000000262153 0.002145999999993364\ncount SortedList_1000 1000000 0.024385999999935848 0.024713000000019747 0.024442000000021835 0.02453619999998864\ncount SortedList_1000 10000000 0.3590470000000323 0.3630470000000514 0.36005199999999604 0.3607788000000028\n\n# ... (similar entries for other operations) ...\n\ngetitem SortedList_10000 100 2.999999992425728e-06 3.999999989900971e-06 2.999999992425728e-06 3.199999991920777e-06\ngetitem SortedList_10000 1000 8.999999977277184e-06 9.000000090964022e-06 8.999999977277184e-06 9.000000000014552e-06\n```\n\n----------------------------------------\n\nTITLE: SortedList Benchmark Results - Raw Data\nDESCRIPTION: Raw benchmark data showing execution times in seconds for various operations on SortedList with different input sizes. Each line contains the operation name, structure size, and multiple timing measurements including average execution time.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_load_sortedlist.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngetitem SortedList_10000 10000 6.499999994957761e-05 6.700000005821494e-05 6.60000000607397e-05 6.620000001476001e-05\ngetitem SortedList_10000 100000 0.002114999999889733 0.002128999999968073 0.002116000000000895 0.0021203999999670486\ngetitem SortedList_10000 1000000 0.027294000000097185 0.028187000000002627 0.027589000000034503 0.027626800000030018\ngetitem SortedList_10000 10000000 0.36838399999999183 0.37339300000007825 0.3706359999999904 0.370595000000003\n```\n\n----------------------------------------\n\nTITLE: SortedSet Performance Benchmark Data for Various Operations\nDESCRIPTION: Comprehensive benchmark results for SortedSet operations including add, update (tiny/small/medium/large), union (tiny/small/medium/large), remove, and difference (tiny/small/medium/large). Each line shows the operation, collection type and size, followed by performance measurements in seconds across multiple runs.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_load_sortedset.txt#2025-04-23_snippet_0\n\nLANGUAGE: raw\nCODE:\n```\nadd SortedSet_1000 100 4.9999999873762135e-06 7.000000010748408e-06 5.999999984851456e-06 5.800000002409433e-06\nadd SortedSet_1000 1000 2.2999999998774e-05 2.6999999988674972e-05 2.600000001962144e-05 2.540000000408327e-05\nadd SortedSet_1000 10000 0.00021199999997634222 0.0002869999999859374 0.00023100000001363696 0.0002381999999954587\nadd SortedSet_1000 100000 0.0022840000000030614 0.0023519999999734864 0.0022930000000087603 0.0023091999999905965\nadd SortedSet_1000 1000000 0.023889999999994416 0.024528000000003658 0.024401000000011663 0.024333000000001447\nadd SortedSet_1000 10000000 0.27778699999998935 0.28406499999999824 0.2799360000000206 0.2807907999999998\nupdate_tiny SortedSet_1000 100 1.6999999985500835e-05 2.0000000006348273e-05 1.8000000011397788e-05 1.8200000005208496e-05\nupdate_tiny SortedSet_1000 1000 1.8000000011397788e-05 2.0000000006348273e-05 1.899999998045132e-05 1.8999999997504347e-05\nupdate_tiny SortedSet_1000 10000 2.1000000003823516e-05 2.2999999998774e-05 2.199999997287705e-05 2.1799999996119367e-05\nupdate_tiny SortedSet_1000 100000 3.1999999976051186e-05 3.399999999942338e-05 3.300000000194814e-05 3.2999999996263794e-05\nupdate_tiny SortedSet_1000 1000000 4.200000000764703e-05 5.7999999995672624e-05 4.799999999249849e-05 4.8999999995658074e-05\nupdate_tiny SortedSet_1000 10000000 5.300000000829641e-05 8.000000002539309e-05 5.499999997482519e-05 5.9599999991633014e-05\nupdate_small SortedSet_1000 100 1.900000000887303e-05 2.0000000006348273e-05 1.900000000887303e-05 1.9400000007863126e-05\nupdate_small SortedSet_1000 1000 0.0001519999999572974 0.00015500000000656655 0.0001540000000090913 0.00015339999999923747\nupdate_small SortedSet_1000 10000 0.0015720000000101209 0.0017619999999851643 0.0015780000000518157 0.0016252000000122279\nupdate_small SortedSet_1000 100000 0.015384999999980664 0.015521999999975833 0.015417000000013559 0.015436399999998685\nupdate_small SortedSet_1000 1000000 0.19213799999999992 0.19368800000000874 0.1933580000000461 0.1930736000000138\nupdate_small SortedSet_1000 10000000 2.02494999999999 2.047880999999961 2.0330940000000055 2.0342885999999796\nupdate_medium SortedSet_1000 100 1.2000000026546331e-05 1.3000000024021574e-05 1.2000000026546331e-05 1.2400000025536429e-05\nupdate_medium SortedSet_1000 1000 6.300000001147055e-05 8.700000000771979e-05 6.400000000894579e-05 6.839999999783686e-05\nupdate_medium SortedSet_1000 10000 0.00048800000001847366 0.0006369999999833453 0.0004910000000108994 0.0005193999999960397\nupdate_medium SortedSet_1000 100000 0.0055770000000165965 0.005871000000013282 0.005591000000038093 0.005676000000016756\nupdate_medium SortedSet_1000 1000000 0.10683899999997948 0.10999200000003384 0.10794299999997747 0.10846119999999929\nupdate_medium SortedSet_1000 10000000 1.2854199999999878 2.008961999999997 1.3008099999999558 1.4505275999999867\nupdate_large SortedSet_1000 100 1.499999996212864e-05 1.7000000013922545e-05 1.6000000016447302e-05 1.600000000507862e-05\nupdate_large SortedSet_1000 1000 8.199999996350016e-05 8.700000000771979e-05 8.29999999609754e-05 8.339999999407155e-05\nupdate_large SortedSet_1000 10000 0.0007180000000062137 0.0007200000000011642 0.0007190000000036889 0.0007189999999923202\nupdate_large SortedSet_1000 100000 0.010217000000011467 0.010234999999966021 0.010223999999993794 0.010225000000002638\nupdate_large SortedSet_1000 1000000 0.15492799999998397 0.17364700000001676 0.1596689999999512 0.1625581999999895\nupdate_large SortedSet_1000 10000000 1.9442090000000007 2.7283970000000295 1.9829620000000432 2.1889336000000186\nunion_tiny SortedSet_1000 100 2.3999999939405825e-05 2.599999993435631e-05 2.3999999939405825e-05 2.4599999960628338e-05\nunion_tiny SortedSet_1000 1000 6.899999993947858e-05 6.900000005316542e-05 6.900000005316542e-05 6.900000000769069e-05\nunion_tiny SortedSet_1000 10000 0.0005589999999529027 0.0006010000000742366 0.0005630000000564905 0.000573000000031243\nunion_tiny SortedSet_1000 100000 0.00573399999996127 0.005986000000007152 0.00587499999994634 0.005867199999966033\nunion_tiny SortedSet_1000 1000000 0.10222399999997833 0.12998000000004595 0.10352699999998549 0.10891820000001644\nunion_tiny SortedSet_1000 10000000 1.7997080000000096 1.8620970000000625 1.8340269999999919 1.8312876000000415\nunion_small SortedSet_1000 100 2.199999994445534e-05 2.3999999939405825e-05 2.300000005561742e-05 2.2999999987405318e-05\nunion_small SortedSet_1000 1000 7.400000004054164e-05 8.300000001781882e-05 8.000000002539309e-05 7.900000002791785e-05\nunion_small SortedSet_1000 10000 0.0005909999999857973 0.0006660000000238142 0.0005919999999832726 0.0006075999999893611\nunion_small SortedSet_1000 100000 0.00622000000009848 0.00675300000000334 0.006358000000091124 0.006421200000045246\nunion_small SortedSet_1000 1000000 0.1251830000001064 0.1402020000000448 0.12584800000001906 0.12863460000003216\nunion_small SortedSet_1000 10000000 1.7379700000000184 1.9950919999999996 1.9615210000000616 1.9283436000000165\nunion_medium SortedSet_1000 100 2.4999999936881068e-05 2.700000004551839e-05 2.5000000050567905e-05 2.5600000003578317e-05\nunion_medium SortedSet_1000 1000 0.00010800000006838673 0.00011000000006333721 0.00010900000006586197 0.0001090000000431246\nunion_medium SortedSet_1000 10000 0.000803000000018983 0.000979000000029373 0.000803000000018983 0.0008388000000195461\nunion_medium SortedSet_1000 100000 0.010244000000056985 0.010971000000040476 0.010358999999994012 0.010536999999999352\nunion_medium SortedSet_1000 1000000 0.19420800000000327 0.2058710000000019 0.19925999999998112 0.19973580000000765\nunion_medium SortedSet_1000 10000000 2.940327000000025 3.9090640000000576 2.9604910000000473 3.153504399999997\nunion_large SortedSet_1000 100 2.6999999931831553e-05 3.100000003541936e-05 2.700000004551839e-05 2.7999999997518898e-05\nunion_large SortedSet_1000 1000 0.0001330000000052678 0.00014799999996739643 0.00014199999998254498 0.00014099999998506973\nunion_large SortedSet_1000 10000 0.0010439999999789507 0.0011030000000573636 0.0010510000000749642 0.0010618000000249595\nunion_large SortedSet_1000 100000 0.01556099999993421 0.01637500000003911 0.0156769999999824 0.015782999999964888\nunion_large SortedSet_1000 1000000 0.2345550000000003 0.6225590000000238 0.23537099999998645 0.31263940000001184\nunion_large SortedSet_1000 10000000 3.4839050000000498 4.156960000000026 3.935247000000004 3.8969798000000084\nremove SortedSet_1000 100 3.999999989900971e-06 6.999999982326699e-06 5.000000101063051e-06 5.400000009103678e-06\nremove SortedSet_1000 1000 2.199999994445534e-05 2.4000000053092663e-05 2.3999999939405825e-05 2.3400000009132783e-05\nremove SortedSet_1000 10000 0.00020600000004833419 0.00020799999992959783 0.00020700000004580943 0.00020700000000033468\nremove SortedSet_1000 100000 0.002334000000018932 0.002372000000036678 0.0023479999999835854 0.002348800000004303\nremove SortedSet_1000 1000000 0.029794000000038068 0.031619999999975335 0.030287999999927706 0.030495799999994234\nremove SortedSet_1000 10000000 0.45148599999993166 0.4673819999999296 0.45769899999993413 0.4578339999999571\ndifference_tiny SortedSet_1000 100 1.5999999959603883e-05 1.6999999957079126e-05 1.600000007329072e-05 1.6200000004573667e-05\ndifference_tiny SortedSet_1000 1000 4.0000000012696546e-05 4.100000001017179e-05 4.0000000012696546e-05 4.040000001168664e-05\ndifference_tiny SortedSet_1000 10000 0.0003189999999904103 0.00032699999997021223 0.0003230000000939981 0.00032280000000355357\ndifference_tiny SortedSet_1000 100000 0.003163000000085958 0.0032800000000179352 0.0032549999999673673 0.0032248000000208777\ndifference_tiny SortedSet_1000 1000000 0.05849800000009964 0.07035599999994702 0.06031900000004953 0.06280860000001667\ndifference_tiny SortedSet_1000 10000000 1.0940560000000232 2.0656940000000077 1.2277520000000095 1.3492960000000038\ndifference_small SortedSet_1000 100 1.499999996212864e-05 1.600000007329072e-05 1.5999999959603883e-05 1.580000000558357e-05\ndifference_small SortedSet_1000 1000 4.200000000764703e-05 4.400000000259752e-05 4.200000000764703e-05 4.240000000663713e-05\ndifference_small SortedSet_1000 10000 0.00032799999996768747 0.00037599999996018596 0.00032999999996263796 0.0003391999999621476\ndifference_small SortedSet_1000 100000 0.003317000000038206 0.0034110000000282525 0.0033889999999701104 0.003374400000006972\ndifference_small SortedSet_1000 1000000 0.058176000000003114 0.4444730000000163 0.058797000000026856 0.1368454000000156\ndifference_small SortedSet_1000 10000000 1.0339340000000448 1.2108369999998558 1.1935739999998987 1.1674003999999514\ndifference_medium SortedSet_1000 100 1.3999999964653398e-05 1.5999999959603883e-05 1.5000000075815478e-05 1.4800000008108327e-05\ndifference_medium SortedSet_1000 1000 4.799999987881165e-05 5.2000000096086296e-05 5.199999986871262e-05 5.0999999939449483e-05\ndifference_medium SortedSet_1000 10000 0.00038700000004610047 0.0004069999999956053 0.00039199999991978984 0.0003933999999844673\ndifference_medium SortedSet_1000 100000 0.003930999999965934 0.004243000000087704 0.003965000000107466 0.004024000000026717\ndifference_medium SortedSet_1000 1000000 0.04684399999996458 0.04927399999996851 0.04705799999987903 0.047586799999953654\ndifference_medium SortedSet_1000 10000000 0.9231919999999718 1.7944119999999657 0.9676739999999882 1.1449195999999575\ndifference_large SortedSet_1000 100 1.3999999964653398e-05 1.5999999959603883e-05 1.5000000075815478e-05 1.4800000008108327e-05\ndifference_large SortedSet_1000 1000 5.699999996977567e-05 5.900000019209983e-05 5.899999996472616e-05 5.839999998897838e-05\ndifference_large SortedSet_1000 10000 0.00048300000003109744 0.00048500000002604793 0.00048300000003109744 0.00048360000005231996\ndifference_large SortedSet_1000 100000 0.00497599999994236 0.005036000000018248 0.005005000000210202 0.005007000000068729\ndifference_large SortedSet_1000 1000000 0.05674900000008165 0.06059400000003734 0.057467000000087864 0.05785240000004706\n```\n\n----------------------------------------\n\nTITLE: SortedSet Performance Test Results\nDESCRIPTION: Benchmark data showing execution times for various SortedSet operations. Tests are run with different data sizes (100 to 10M elements) and operation types (update, union, remove, difference).\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_load_sortedset.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nupdate_tiny SortedSet_10000 100000 3.300000000194814e-05 3.700000002027082e-05 3.399999999942338e-05 3.440000000409782e-05\nupdate_tiny SortedSet_10000 1000000 3.9999999984274837e-05 4.200000000764703e-05 4.100000001017179e-05 4.09999999988031e-05\nupdate_tiny SortedSet_10000 10000000 5.1000000041767635e-05 0.00010199999999827014 5.5000000031668606e-05 6.32000000109656e-05\n```\n\n----------------------------------------\n\nTITLE: SortedDict Initialization Performance Test Results in PyPy\nDESCRIPTION: Output from a performance test measuring the time taken to initialize a SortedDict with 1,000,000 elements in a PyPy environment. The test shows multiple timing runs with values around 0.41-0.43 seconds.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_runtime_sorteddict.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ninit SortedDict_PyPy 1000000 0.384995 0.428829 0.41671 0.4132286\n```\n\n----------------------------------------\n\nTITLE: Benchmarking SortedList Operations in Python\nDESCRIPTION: This code snippet represents benchmark results for various SortedList operations. Each line contains the operation name, Python implementation, input size, and execution times (in seconds) for multiple runs. The data is presented in a space-separated format, likely for easy parsing and analysis.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_runtime_sortedlist.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ninit SortedList_Py36 100 1.4000000007285962e-05 1.6000000002236447e-05 1.5000000004761205e-05 1.5000000001919033e-05\ninit SortedList_Py36 1000 0.000160999999991418 0.00016499999999552983 0.00016300000000057935 0.00016279999999824213\ninit SortedList_Py36 10000 0.0022149999999925285 0.002466999999995778 0.002220999999991591 0.0022759999999948377\ninit SortedList_Py36 100000 0.030724000000006413 0.031018999999986363 0.03082899999999711 0.030850399999999924\ninit SortedList_Py36 1000000 0.5280719999999945 0.541955999999999 0.5355090000000047 0.5349019999999995\nadd SortedList_Py27 100 4.99999999981e-06 6.00000000084e-06 5.99999999906e-06 5.60000000007e-06\nadd SortedList_Py27 1000 2.89999999996e-05 3.00000000006e-05 2.89999999996e-05 2.91999999998e-05\nadd SortedList_Py27 10000 0.000229000000001 0.000234000000001 0.000231999999999 0.0002316\nadd SortedList_Py27 100000 0.002509 0.002706 0.002556 0.0025776\nadd SortedList_Py27 1000000 0.032215 0.034093 0.032678 0.0329566\n# ... (truncated for brevity)\nadd SortedList_PyPy 100 2e-05 2.4e-05 2.1e-05 2.18e-05\nadd SortedList_PyPy 1000 0.000133 0.000135 0.000134 0.000134\nadd SortedList_PyPy 10000 0.001022 0.002126 0.001826 0.001624\nadd SortedList_PyPy 100000 0.000706 0.009444 0.002507 0.0043316\nadd SortedList_PyPy 1000000 0.009677 0.013601 0.010685 0.0114206\n# ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: SortedSet Benchmark Results Text Data\nDESCRIPTION: Raw benchmark data showing execution times for various set operations. Each line contains the operation name, implementation type (SortedSet_Py36), dataset size, and four timing measurements in seconds.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_runtime_sortedset.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndifference_update_tiny SortedSet_Py36 100000 3.900000000101045e-05 4.0999999995960934e-05 3.900000000101045e-05 3.9599999999495596e-05\ndifference_update_tiny SortedSet_Py36 1000000 4.9000000004184585e-05 5.400000000577165e-05 5.099999999913507e-05 5.120000000431446e-05\ndifference_update_small SortedSet_Py36 100 2.2999999998774e-05 2.500000000793534e-05 2.3999999996249244e-05 2.3799999999596368e-05\n```\n\n----------------------------------------\n\nTITLE: Performance Data for Data Structure Operations\nDESCRIPTION: Raw benchmark data showing execution times in seconds for operations (symmetric_difference_update_large, pop, init) across different data structures (B-Tree, RB-Tree, SortedSet, Skip-List) with varying input sizes (100 to 1000000 elements). Each row contains operation name, data structure, size, and multiple timing measurements.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/tests/results_sortedset.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsymmetric_difference_update_large B-Tree 10000 0.3071159999999509 0.30859500000042317 0.30721400000038557 0.3075404000001072\nsymmetric_difference_update_large RB-Tree 100 5.000000055588316e-05 5.2999999752501026e-05 5.0999999984924216e-05 5.1400000120338515e-05\nsymmetric_difference_update_large RB-Tree 1000 0.0003999999998995918 0.00040300000000570435 0.0004019999996671686 0.0004016000000774511\nsymmetric_difference_update_large RB-Tree 10000 0.003926999999748659 0.003993999999693187 0.003942999999708263 0.003954399999747693\nsymmetric_difference_update_large RB-Tree 100000 0.04590900000039255 0.04628599999978178 0.045952999999826716 0.04605939999983093\nsymmetric_difference_update_large RB-Tree 1000000 0.4779109999999491 0.4985740000001897 0.48237799999969866 0.48514339999983347\n```\n\n----------------------------------------\n\nTITLE: Displaying SortedSet Symmetric Difference Update Performance Images in reStructuredText\nDESCRIPTION: This snippet shows how to include and display performance visualization images for the SortedSet.symmetric_difference_update() operation in reStructuredText format. It covers three different data sizes: medium, small, and tiny.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-load.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: _static/SortedSet_load-symmetric_difference_update_medium.png\n\nsymm_diff_update_small\n......................\n\nSet symmetric-difference using :func:`SortedSet.symmetric_difference_update`.\n\n.. image:: _static/SortedSet_load-symmetric_difference_update_small.png\n\nsymm_diff_update_tiny\n.....................\n\nSet symmetric-difference using :func:`SortedSet.symmetric_difference_update`.\n\n.. image:: _static/SortedSet_load-symmetric_difference_update_tiny.png\n```\n\n----------------------------------------\n\nTITLE: Time Complexity of SortedList.add() with Constant Load\nDESCRIPTION: Simplified time complexity formula for SortedList.add() when the load (m) is treated as a constant, resulting in quadratic complexity.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/performance-scale.rst#2025-04-23_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nT_{add}(n|m \\propto 1) = O(n^2)\n```\n\n----------------------------------------\n\nTITLE: Importing SortedValuesView from sortedcontainers\nDESCRIPTION: This snippet shows how to import the SortedValuesView class, which provides a view of the values in a SortedDict. It inherits from a base class and implements a custom __getitem__ method.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/sorteddict.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom sortedcontainers import SortedValuesView\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for SortedSet in Python\nDESCRIPTION: ReStructuredText markup for configuring Sphinx autodoc to generate documentation for the SortedSet class from the sortedcontainers module. The directives specify which methods and attributes should be included in the documentation.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/sortedset.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: sortedcontainers.sortedset\n\n\nSortedSet\n.........\n\n.. autoclass:: sortedcontainers.SortedSet\n   :show-inheritance:\n\n   .. automethod:: __init__\n   .. autoattribute:: key\n   .. automethod:: __contains__\n   .. automethod:: __iter__\n   .. automethod:: __len__\n   .. automethod:: add\n   .. automethod:: discard\n   .. automethod:: __getitem__\n   .. automethod:: __delitem__\n   .. automethod:: __reversed__\n   .. automethod:: clear\n   .. automethod:: pop\n   .. automethod:: remove\n   .. automethod:: difference\n   .. automethod:: difference_update\n   .. automethod:: intersection\n   .. automethod:: intersection_update\n   .. automethod:: symmetric_difference\n   .. automethod:: symmetric_difference_update\n   .. automethod:: union\n   .. automethod:: update\n   .. automethod:: copy\n   .. automethod:: count\n   .. automethod:: __repr__\n   .. automethod:: _check\n```\n\n----------------------------------------\n\nTITLE: Accessing Documentation with Python Help Function\nDESCRIPTION: Shows how to access the library's documentation using Python's built-in help function for modules, classes, and methods.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import sortedcontainers\n>>> help(sortedcontainers)\n>>> from sortedcontainers import SortedDict\n>>> help(SortedDict)\n>>> help(SortedDict.popitem)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure with Toctree in RST\nDESCRIPTION: This snippet configures the Sphinx documentation structure using a hidden toctree directive. It includes links to various documentation sections including introduction pages, performance analysis, container type documentation, and presentation references.\nSOURCE: https://github.com/grantjenks/python-sortedcontainers/blob/master/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../README.rst\n\n.. toctree::\n   :hidden:\n\n   introduction\n   performance\n   performance-load\n   performance-runtime\n   performance-workload\n   performance-scale\n   development\n   implementation\n   history\n   sortedlist\n   sorteddict\n   sortedset\n   pycon-2016-talk\n   sf-python-2015-lightning-talk\n   djangocon-2015-lightning-talk\n```"
  }
]