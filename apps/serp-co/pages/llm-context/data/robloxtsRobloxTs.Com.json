[
  {
    "owner": "roblox-ts",
    "repo": "roblox-ts.com",
    "content": "TITLE: Installing and Running roblox-ts Project\nDESCRIPTION: Essential commands for initializing a new roblox-ts project, starting the TypeScript compiler in watch mode, and running the Rojo server for Roblox Studio integration.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/quick-start.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init roblox-ts\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx rbxtsc -w\n```\n\nLANGUAGE: bash\nCODE:\n```\nrojo serve\n```\n\n----------------------------------------\n\nTITLE: Initializing a roblox-ts Project with npm\nDESCRIPTION: Command to create a new roblox-ts project using the npm initialization tool. This starts the interactive setup process that will guide you through project configuration.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/setup-guide.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init roblox-ts\n```\n\n----------------------------------------\n\nTITLE: Using Utility Interfaces with Generics for Type-Safe Instance Filtering\nDESCRIPTION: Shows an advanced pattern using generics with the Instances interface to create a type-safe function that filters descendants by class name, returning the correct type.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Workspace } from \"@rbxts/services\";\n\nfunction getDescendantsWhichIsA<T extends keyof Instances>(parent: Instance, className: T): Instances[T][] {\n\treturn parent.GetDescendants().filter((descendant): descendant is Instances[T] => descendant.IsA(className));\n}\n\nconst humanoidsInWorkspace: Array<Humanoid> = getDescendantsWhichIsA(Workspace, \"Humanoid\");\n```\n\n----------------------------------------\n\nTITLE: Starting roblox-ts Watch Mode for Continuous Building\nDESCRIPTION: Command to run roblox-ts in watch mode, which continuously builds your TypeScript code into Luau as you make changes. This enables real-time development feedback.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/setup-guide.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Implementing ExtractKeys Utility Type in TypeScript\nDESCRIPTION: Returns a union of all the keys of T whose values extend from type U. Uses indexed access types to extract matching keys.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExtractKeys<T, U> = { [K in keyof T]: T[K] extends U ? K : never }[keyof T];\n```\n\n----------------------------------------\n\nTITLE: RemoteEvent Type Safety in roblox-ts\nDESCRIPTION: Shows the type safety considerations with RemoteEvents in roblox-ts. Client events can have specific types, but server events use unknown for arguments to prevent exploits and crashes.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst remoteEvent = new Instance(\"RemoteEvent\");\n\n// this works fine\nremoteEvent.OnClientEvent.Connect((points: number) => {});\n\n// changing unknown to number causes an error!\nremoteEvent.OnServerEvent.Connect((player: Player, points: unknown) => {});\n```\n\n----------------------------------------\n\nTITLE: Using assert() for Type Assertion in roblox-ts\nDESCRIPTION: Demonstrates how assert() in roblox-ts uses JavaScript truthiness and enables TypeScript's asserts value predicate feature. This allows for type narrowing based on assertions.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/functions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction foo(instance: Instance) {\n\tassert(instance.IsA(\"Part\"));\n\tprint(instance.Size); // instance _must_ be a Part to reach this line\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inheritance with Roblox Classes\nDESCRIPTION: Demonstrates TypeScript's understanding of Roblox's class inheritance system. The function accepts BasePart and any of its subclasses but will reject types that don't inherit from BasePart.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction takesBasePart(basePart: BasePart) {\n    return basePart.Size.X + basePart.Size.Y + basePart.Size.Z;\n}\n\n// we can use any type which inherits from BasePart!\ntakesBasePart(new Instance(\"Seat\"));\ntakesBasePart(new Instance(\"Part\"));\ntakesBasePart(new Instance(\"WedgePart\"));\n\n// Humanoid does not inherit from BasePart, so this will error!\n// takesBasePart(new Instance(\"Humanoid\"));\n```\n\n----------------------------------------\n\nTITLE: Type Validation for RemoteEvent Arguments\nDESCRIPTION: Demonstrates how to safely validate RemoteEvent arguments on the server using the typeIs macro. This approach helps prevent exploits by handling unexpected data types gracefully.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst remoteEvent = new Instance(\"RemoteEvent\");\n\nremoteEvent.OnServerEvent.Connect((player: Player, points: unknown) => {\n\tif (!typeIs(points, \"number\")) {\n\t\treturn;\n\t}\n\t// do something with points\n});\n```\n\n----------------------------------------\n\nTITLE: Using typeIs() for Type Inference in roblox-ts\nDESCRIPTION: Demonstrates the use of typeIs() for type checking and inference in roblox-ts. It compiles to typeof(value) == \"type\" in Luau and helps TypeScript infer the type correctly.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/functions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction foo(value: unknown) {\n    if (typeIs(value, \"Vector3\")) {\n        print(value.X); // success!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Type Unions from Instances Interface\nDESCRIPTION: Demonstrates creating comprehensive type unions for all instance names and types using the Instances interface, which combines services, creatable instances, and abstract instances.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype AllInstanceNames = keyof Instances;\ntype AllInstances = Instances[keyof Instances];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Luau Class\nDESCRIPTION: An example of how to create TypeScript definitions for a Luau class with both instance and static members. This pattern uses separate interfaces for the class instance and constructor.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/using-existing-luau.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyClass {\n\tinstanceProperty: string;\n\tinstanceMethod(): number;\n}\n\ninterface MyClassConstructor {\n\tnew (): MyClass;\n\tstaticProperty: string;\n\tstaticMethod(): number;\n}\n\ndeclare const MyClass: MyClassConstructor;\nexport = MyClass;\n```\n\n----------------------------------------\n\nTITLE: Implementing InstanceEventNames Utility Type in TypeScript for Roblox\nDESCRIPTION: Given a Roblox Instance type T, returns a union of all event names (properties that extend RBXScriptSignal).\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ntype InstanceEventNames<T extends Instance> = ExtractKeys<T, RBXScriptSignal>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Record Utility Type in TypeScript\nDESCRIPTION: Constructs a type with a set of properties K, each with type T. Useful for mapping keys to a common type.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Record<K extends keyof any, T> = { [P in K]: T };\n```\n\n----------------------------------------\n\nTITLE: Using Macro Methods for DataType Math Operations in roblox-ts\nDESCRIPTION: Shows how to use the macro methods provided by roblox-ts to perform mathematical operations on Roblox DataType classes. These methods compile to their corresponding operators in Roblox Lua.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/datatype-math.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\na.add(b) // compiles to a + b\na.sub(b) // compiles to a - b\na.mul(b) // compiles to a * b\na.div(b) // compiles to a / b\n```\n\n----------------------------------------\n\nTITLE: Implementing WritableInstanceProperties Utility Type in TypeScript for Roblox\nDESCRIPTION: Given a Roblox Instance type T, returns an object type with only writable properties, excluding readonly fields, methods, and events.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntype WritableInstanceProperties<T extends Instance> = WritableProperties<InstanceProperties<T>>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Omit Utility Type in TypeScript\nDESCRIPTION: Creates a new type by omitting a set of properties K from type T. Uses Pick and Exclude internally to filter keys.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n```\n\n----------------------------------------\n\nTITLE: Creating Promises in TypeScript for Roblox-TS\nDESCRIPTION: Creates a new Promise object for asynchronous operations. Uses the roblox-lua-promise library under the hood.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/constructors.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew Promise<T>()\n```\n\n----------------------------------------\n\nTITLE: Creating Functions with Multiple Returns Using $tuple\nDESCRIPTION: Using the $tuple macro in roblox-ts to create functions that return multiple values, which compiles directly to Lua's multiple return syntax without needing manual type assertions.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/lua-tuple.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasMultipleReturns() {\n\t// this will compile into `return \"abc\", 123`\n\treturn $tuple(\"abc\", 123);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Type Unions from CreatableInstances Interface\nDESCRIPTION: Demonstrates creating type unions for instance names and instance types that can be created with Instance.new using the CreatableInstances interface.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype AllCreatableInstanceNames = keyof CreatableInstances;\ntype AllCreatableInstances = CreatableInstances[keyof CreatableInstances];\n```\n\n----------------------------------------\n\nTITLE: Using GetPropertyChangedSignal Instead of Changed\nDESCRIPTION: Shows the recommended approach for listening to property changes in roblox-ts using GetPropertyChangedSignal instead of the conflicting Changed event.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Workspace } from \"@rbxts/services\";\nWorkspace.GetPropertyChangedSignal(\"DistributedGameTime\").Connect(() => {\n\tprint(Workspace.DistributedGameTime);\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Callback Behavior with Typed this\nDESCRIPTION: Shows how to force a function to be treated as a method by explicitly typing the 'this' parameter as anything other than void, causing it to be transpiled with colon notation.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/callbacks-vs-methods.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const obj: {\n    foo: (this: typeof obj, bar: number) => void;\n}\nobj.foo(123); // obj:foo(123)\n```\n\n----------------------------------------\n\nTITLE: Creating Maps in TypeScript for Roblox-TS\nDESCRIPTION: Creates a new Map data structure that can be pre-filled with key-value pairs. Compiles to a table literal in Luau.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/constructors.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew Map<K, V>(entries?: Array<[K, V]>)\n```\n\n----------------------------------------\n\nTITLE: Using classIs() for Instance Type Checking in roblox-ts\nDESCRIPTION: Shows how classIs() is used for precise instance type checking in roblox-ts. It compiles to value.ClassName == \"ClassName\" in Luau, providing an alternative to instance.IsA().\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/functions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction foo(value: Instance) {\n    // value.IsA(\"Script\") would return true for LocalScripts!\n    if (classIs(value, \"Script\")) {\n        print(value.Name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UnionToIntersection Utility Type in TypeScript\nDESCRIPTION: Converts a union of object types to an intersection. Uses function parameter contravariance to achieve this transformation.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntype UnionToIntersection<T> = (T extends object ? (k: T) => void : never) extends (k: infer U) => void ? U : never;\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays in TypeScript for Roblox-TS\nDESCRIPTION: Creates a new Array with optional predefined length and default value. Compiles to a table literal or a table.create() call in Luau.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/constructors.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Array<T>(length?: number, value?: T)\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration Fields for roblox-ts Packages\nDESCRIPTION: Key fields that need to be configured in package.json for a roblox-ts package. These fields include basic metadata, entry points, and publishing configurations.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/typescript-packages.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@rbxts/your-package-name\",\n  \"description\": \"Your package description\",\n  \"main\": \"out/init.lua\",\n  \"typings\": \"out/index.d.ts\",\n  \"files\": [\"out\"],\n  \"repository\": \"https://github.com/username/repo\",\n  \"homepage\": \"https://your-docs-site.com\",\n  \"author\": \"Your Name\",\n  \"license\": \"MIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InstanceType Utility Type in TypeScript\nDESCRIPTION: Extracts the instance type of a constructor function type. Uses infer to capture the instance type R from the constructor signature.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype InstanceType<T extends new (...args: Array<any>) => any> = T extends new (...args: Array<any>) => infer R\n\t? R\n\t: any;\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Utility Type in TypeScript\nDESCRIPTION: Makes all properties in type T required by removing the optional modifier (-?) from each property.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Required<T> = { [P in keyof T]-?: T[P] };\n```\n\n----------------------------------------\n\nTITLE: Creating Type Definitions for a Luau Module in TypeScript\nDESCRIPTION: Demonstrates how to define TypeScript types for a Luau module using an export assignment pattern. This approach creates a TypeScript interface for the module and exports it as the default export.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/using-existing-luau.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Module {\n\t// define Module member types\n}\n\n// create a value from our type\ndeclare const Module: Module;\n\nexport = Module;\n```\n\n----------------------------------------\n\nTITLE: Using identity() for Type Constraint in roblox-ts\nDESCRIPTION: Demonstrates the use of the identity macro in roblox-ts for zero-cost type constraint abstraction. It compiles to just the inner value passed into it, allowing for type verification without runtime overhead.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/functions.mdx#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MyInterface {\n\ta: number;\n\tb: string;\n\tc: boolean;\n}\n\nconst objects = {\n\tabc: identity<MyInterface>({\n\t\ta: 123,\n\t\tb: \"abc\",\n\t\tc: true,\n\t}),\n};\n```\n\n----------------------------------------\n\nTITLE: Workaround for Using Instance.Changed Event\nDESCRIPTION: Demonstrates a workaround to use the Instance.Changed event when necessary by using a type assertion with the ChangedSignal interface.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(part: Part) {\n    (part as Part & ChangedSignal).Changed.Connect(name => {})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Roblox Instances with TypeScript\nDESCRIPTION: Demonstrates how to create a Roblox Instance (Part) using the new operator, which translates to Instance.new() in Lua. The example shows accessing a property of the created part.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst part = new Instance(\"Part\");\nprint(part.Color);\n```\n\n----------------------------------------\n\nTITLE: Implementing ConstructorParameters Utility Type in TypeScript\nDESCRIPTION: Extracts the parameter types of a constructor function as a tuple. Uses infer to capture parameter types from constructor signature.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype ConstructorParameters<T extends new (...args: any) => any> = T extends new (...args: infer P) => any ? P : never;\n```\n\n----------------------------------------\n\nTITLE: Implementing Exclude Utility Type in TypeScript\nDESCRIPTION: Creates a type by excluding from T all types that are assignable to U using conditional types.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Exclude<T, U> = T extends U ? never : T;\n```\n\n----------------------------------------\n\nTITLE: Creating Fragments in Roact JSX\nDESCRIPTION: Demonstrates two ways to create Fragments in Roact JSX: using the Roact.Fragment tag and the shorthand syntax.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/roact-jsx.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Roact from \"@rbxts/roact\";\n\nconst fragment1 = <Roact.Fragment></Roact.Fragment>;\nconst fragment2 = <></>;\n```\n\n----------------------------------------\n\nTITLE: Creating Ambient Type Declarations for Workspace in TypeScript\nDESCRIPTION: This snippet demonstrates how to create ambient type declarations in a 'services.d.ts' file to extend the Workspace interface with custom children.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/indexing-children.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Workspace extends Instance {\n\tZombie: Model;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extract Utility Type in TypeScript\nDESCRIPTION: Creates a type by extracting from T all types that are assignable to U using conditional types.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype Extract<T, U> = T extends U ? T : never;\n```\n\n----------------------------------------\n\nTITLE: Overriding Method Behavior with this:void\nDESCRIPTION: Demonstrates how to force a method to be treated as a callback by explicitly typing the 'this' parameter as void, causing it to be transpiled with dot notation.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/callbacks-vs-methods.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = {\n\tfoo(this: void, bar: number) {}\n}\nobj.foo(123); // obj.foo(123)\n```\n\n----------------------------------------\n\nTITLE: Implementing ExtractMembers Utility Type in TypeScript\nDESCRIPTION: Returns a new object type containing all keys of T whose values extend from type U. Combines ExtractKeys with Pick.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExtractMembers<T, U> = Pick<T, ExtractKeys<T, U>>;\n```\n\n----------------------------------------\n\nTITLE: Creating ReadonlyMaps in TypeScript for Roblox-TS\nDESCRIPTION: Creates a new ReadonlyMap data structure with optional pre-filled entries. Functions the same as Map but with readonly constraints.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/constructors.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew ReadonlyMap<K, V>(entries?: Array<[K, V]>)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Named Exports\nDESCRIPTION: Shows how to type a Luau module with named exports. This approach uses named export declarations rather than an export assignment, making individual constants available for import.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/using-existing-luau.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare const Foo: string;\nexport declare const Secret: string;\n```\n\n----------------------------------------\n\nTITLE: Using a Typed Luau Class in TypeScript\nDESCRIPTION: Shows how to use a Luau class that has been typed with the class/constructor interface pattern. This example demonstrates accessing both static and instance members.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/using-existing-luau.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nprint(MyClass.staticProperty);\nprint(MyClass.staticMethod());\n\nconst myClass = new MyClass();\nprint(myClass.instanceProperty);\nprint(myClass.instanceMethod());\n```\n\n----------------------------------------\n\nTITLE: Using Global Functions in roblox-ts\nDESCRIPTION: Demonstrates using the Roblox global print function in TypeScript. This shows the direct correspondence between TypeScript code and Roblox Lua code.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprint(\"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Implementing InstanceProperties Utility Type in TypeScript for Roblox\nDESCRIPTION: Given a Roblox Instance type T, returns an object type with only the properties (excluding methods and events).\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ntype InstanceProperties<T extends Instance> = Pick<T, InstancePropertyNames<T>>;\n```\n\n----------------------------------------\n\nTITLE: Creating Type Unions from AbstractInstances Interface\nDESCRIPTION: Shows how to create type unions for abstract instance names and types using the AbstractInstances interface, useful for working with inheritance checks.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype AllAbstractInstanceNames = keyof AbstractInstances;\ntype AllAbstractInstances = AbstractInstances[keyof AbstractInstances];\n```\n\n----------------------------------------\n\nTITLE: Implementing InstanceMethodNames Utility Type in TypeScript for Roblox\nDESCRIPTION: Given a Roblox Instance type T, returns a union of all method names (properties that extend Callback).\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntype InstanceMethodNames<T extends Instance> = ExtractKeys<T, Callback>;\n```\n\n----------------------------------------\n\nTITLE: Implementing InstanceEvents Utility Type in TypeScript for Roblox\nDESCRIPTION: Given a Roblox Instance type T, returns an object type with only the events (properties that are RBXScriptSignals).\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ntype InstanceEvents<T extends Instance> = Pick<T, InstanceEventNames<T>>;\n```\n\n----------------------------------------\n\nTITLE: Destructuring LuaTuple Return Values\nDESCRIPTION: Example of destructuring a LuaTuple return value, which the compiler optimizes into a simple variable declaration from multiple returns in Lua.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/lua-tuple.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [actualTimeYielded, totalTime] = wait(1);\n```\n\n----------------------------------------\n\nTITLE: Implementing InstanceMethods Utility Type in TypeScript for Roblox\nDESCRIPTION: Given a Roblox Instance type T, returns an object type with only the methods (properties that are callbacks).\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ntype InstanceMethods<T extends Instance> = Pick<T, InstanceMethodNames<T>>;\n```\n\n----------------------------------------\n\nTITLE: Creating Sets in TypeScript for Roblox-TS\nDESCRIPTION: Creates a new Set data structure that can be pre-filled with values. Compiles to a table literal in Luau.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/constructors.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew Set<V>(values?: Array<T>)\n```\n\n----------------------------------------\n\nTITLE: Implementing Writable Utility Type in TypeScript\nDESCRIPTION: Makes all properties in type T non-readonly by removing the readonly modifier from each property.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Writable<T> = { -readonly [P in keyof T]: T[P] };\n```\n\n----------------------------------------\n\nTITLE: LuaTuple Type Definition\nDESCRIPTION: The definition of the LuaTuple type in roblox-ts, which enables proper typing of Luau functions with multiple returns, using a never-typed property to prevent accidental type casting.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/lua-tuple.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype LuaTuple<T extends Array<any>> = T & { readonly LUA_TUPLE: never };\n```\n\n----------------------------------------\n\nTITLE: Creating Roact Elements with JSX in TypeScript\nDESCRIPTION: Demonstrates how to create a Roact element using JSX syntax, showcasing the creation of a frame with a child element.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/roact-jsx.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Roact from \"@rbxts/roact\";\n\nconst element = (\n\t<frame Size={new UDim2(1, 0, 1, 0)}>\n\t\t<frame Key=\"Child\" Size={new UDim2(1, 0, 1, 0)} />\n\t</frame>\n);\n```\n\n----------------------------------------\n\nTITLE: Using LuaTuple Return Values Without Destructuring\nDESCRIPTION: When a LuaTuple return value is not destructured, the compiler wraps the returns in an array object, allowing array-style access to the returned values.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/lua-tuple.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = wait(1);\nconst actualTimeYielded = result[0];\nconst totalTime = result[1];\n```\n\n----------------------------------------\n\nTITLE: Creating WeakMaps in TypeScript for Roblox-TS\nDESCRIPTION: Creates a new WeakMap that holds weak references to its keys. Compiles using setmetatable with __mode=\"k\" in Luau.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/constructors.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew WeakMap<K, V>(entries?: Array<[K, V]>)\n```\n\n----------------------------------------\n\nTITLE: Creating ReadonlySets in TypeScript for Roblox-TS\nDESCRIPTION: Creates a new ReadonlySet data structure with optional pre-filled values. Functions the same as Set but with readonly constraints.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/constructors.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew ReadonlySet<V>(values?: Array<T>)\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Children in Extended Workspace Type in TypeScript\nDESCRIPTION: This snippet shows how to access nested children (Humanoid) within the Zombie model using the extended Workspace type.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/indexing-children.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// some other file\nimport { Workspace } from \"@rbxts/services\";\n// highlight-start\nprint(Workspace.Zombie.Humanoid);\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Using Extended Workspace Type in TypeScript\nDESCRIPTION: This snippet shows how to use the extended Workspace type to access the Zombie child without type errors.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/indexing-children.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// some other file\nimport { Workspace } from \"@rbxts/services\";\n// highlight-start\nprint(Workspace.Zombie);\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Implementing ExcludeMembers Utility Type in TypeScript\nDESCRIPTION: Returns a new object type containing all keys of T whose values do not extend from type U. Combines ExcludeKeys with Pick.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExcludeMembers<T, U> = Pick<T, ExcludeKeys<T, U>>;\n```\n\n----------------------------------------\n\nTITLE: Creating Vector3 Using TypeScript's new Operator\nDESCRIPTION: Shows how to create a Vector3 object using TypeScript's new operator, which compiles to Vector3.new() in Lua. The example also demonstrates accessing Vector3 properties.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst v3 = new Vector3(1, 2, 3); // compiles to Vector3.new(1, 2, 3)\nprint(v3.X, v3.Y, v3.Z); // 1 2 3\n```\n\n----------------------------------------\n\nTITLE: Using typeOf() for Type Checking in roblox-ts\nDESCRIPTION: Shows how typeOf() is used in roblox-ts as an alternative to Luau's typeof() function. It compiles to typeof(value) in Luau.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/functions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction foo(value: unknown) {\n    if (typeOf(value) === \"Vector3\") {\n        print(value.X); // error: value is still unknown!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reconstruct Utility Type in TypeScript\nDESCRIPTION: Combines a series of intersections into one object. For example, {x: number} & {y: number} becomes {x: number, y: number}.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype Reconstruct<T> = _<{ [K in keyof T]: T[K] }>;\n```\n\n----------------------------------------\n\nTITLE: Using Roblox Math Library in TypeScript\nDESCRIPTION: Shows how to use Roblox's math library functions in TypeScript. The example calculates the sine of pi, which should equal zero.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst zero = math.sin(math.pi);\n```\n\n----------------------------------------\n\nTITLE: Indexing LuaTuple Return Value Directly\nDESCRIPTION: Example of directly indexing a LuaTuple return value, which produces optimized code output by accessing a specific return value from a function that returns multiple values.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/lua-tuple.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Players } from \"@rbxts/services\";\n\n// .Wait() here returns LuaTuple<[character: Model]>,\n// so we need to use `[0]` to grab the first (and only) element.\nconst character = Players.LocalPlayer.Character || Players.LocalPlayer.CharacterAdded.Wait()[0];\n```\n\n----------------------------------------\n\nTITLE: Implementing WritablePropertyNames Utility Type in TypeScript\nDESCRIPTION: Returns a union of all non-readonly property names in type T. Uses complex conditional type checking to determine if a property is writable.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntype WritablePropertyNames<T> = {\n\t[K in keyof T]-?: T[K] extends Callback\n\t\t? never\n\t\t: (<F>() => F extends { [Q in K]: T[K] } ? 1 : 2) extends <F>() => F extends {\n\t\t\t\t-readonly [Q in K]: T[K];\n\t\t  }\n\t\t\t\t? 1\n\t\t\t\t: 2\n\t\t? K\n\t\t: never;\n}[keyof T];\n```\n\n----------------------------------------\n\nTITLE: Working with Coroutines in roblox-ts\nDESCRIPTION: Demonstrates how to use Roblox's coroutine library in TypeScript to create an asynchronous function that prints messages with a delay.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncoroutine.wrap(() => {\n    print(\"A\");\n    wait(1);\n    print(\"B\");\n})();\n```\n\n----------------------------------------\n\nTITLE: Method Declarations in TypeScript\nDESCRIPTION: Illustrates how method declarations within object literals are considered methods in roblox-ts and transpiled using colon notation, which implicitly passes the object as 'self'.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/callbacks-vs-methods.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = {\n\tfoo(bar: number) {}\n}\nobj.foo(123); // obj:foo(123)\n```\n\n----------------------------------------\n\nTITLE: Creating WeakSets in TypeScript for Roblox-TS\nDESCRIPTION: Creates a new WeakSet that holds weak references to its values. Compiles using setmetatable with __mode=\"k\" in Luau.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/constructors.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew WeakSet<V>(values?: Array<T>)\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Utility Type in TypeScript\nDESCRIPTION: Makes all properties in type T optional by adding the optional modifier (?) to each property.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Partial<T> = { [P in keyof T]?: T[P] };\n```\n\n----------------------------------------\n\nTITLE: Type Annotations for Roblox Instances\nDESCRIPTION: Shows how to use Roblox class types for type annotations in TypeScript. The example explicitly types a variable as Part, though the type could be inferred automatically.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// note: The type Part could be inferred here if not provided\nconst part: Part = new Instance(\"Part\");\nprint(part.Size);\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly Utility Type in TypeScript\nDESCRIPTION: Makes all properties in type T readonly by adding the readonly modifier to each property.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Readonly<T> = { readonly [P in keyof T]: T[P] };\n```\n\n----------------------------------------\n\nTITLE: Using Special Attributes in Roact JSX\nDESCRIPTION: Demonstrates the usage of special attributes in Roact JSX, including Key, Ref, Change, and Event attributes.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/roact-jsx.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Roact from \"@rbxts/roact\";\n\nconst ref = Roact.createRef<Frame>();\nconst element = (\n\t<frame\n\t\tRef={ref}\n\t\tChange={{\n\t\t\tPosition: (rbx) => print(`${rbx.GetFullName()} changed Position!`),\n\t\t}}\n\t\tEvent={{\n\t\t\tMouseButton1Down: (rbx, x, y) =>\n\t\t\t\tprint(`${rbx.GetFullName()} was clicked at (${x}, ${y})`),\n\t\t}}\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing ThisParameterType Utility Type in TypeScript\nDESCRIPTION: Extracts the type of the 'this' parameter from a function type, or returns 'unknown' if the function has no 'this' parameter.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype ThisParameterType<T> = T extends (this: infer U, ...args: Array<any>) => any ? U : unknown;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pick Utility Type in TypeScript\nDESCRIPTION: Creates a new type by picking a set of properties K from type T. K must be a valid key of T.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Pick<T, K extends keyof T> = { [P in K]: T[P] };\n```\n\n----------------------------------------\n\nTITLE: Function Expressions as Methods in TypeScript\nDESCRIPTION: Shows how traditional function expressions within object literals are considered methods in roblox-ts and transpiled using colon notation.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/callbacks-vs-methods.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = {\n\tfoo: function (bar: number) {}\n}\nobj.foo(123); // obj:foo(123)\n```\n\n----------------------------------------\n\nTITLE: Implementing NonNullable Utility Type in TypeScript\nDESCRIPTION: Creates a type by excluding null and undefined from type T. Uses conditional types and includes special handling for unknown types.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype NonNullable<T> = unknown extends T ? defined : T extends null | undefined ? never : T;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Components with JSX in TypeScript\nDESCRIPTION: Illustrates how to create and use custom components with JSX, including prop typing and component rendering.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/roact-jsx.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Roact from \"@rbxts/roact\";\n\ninterface MyComponentProps {\n\tvalue: string;\n}\n\nfunction MyComponent(props: MyComponentProps) {\n\treturn <textlabel Text={props.value} />;\n}\n\nconst element = <MyComponent value=\"foobar\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameters Utility Type in TypeScript\nDESCRIPTION: Extracts the parameter types of a function type as a tuple. Uses infer to capture parameter types from function signature.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n```\n\n----------------------------------------\n\nTITLE: Function Declarations as Callbacks in TypeScript\nDESCRIPTION: Demonstrates how standard function declarations are considered callbacks in roblox-ts and transpiled using dot notation. When assigned to object properties, they maintain their callback nature.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/callbacks-vs-methods.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(bar: number) {}\nconst obj = { foo: foo };\nobj.foo(123); // obj.foo(123)\n```\n\n----------------------------------------\n\nTITLE: Implementing ReturnType Utility Type in TypeScript\nDESCRIPTION: Extracts the return type of a function type. Uses infer to capture the return type R from the function signature.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype ReturnType<T extends (...args: Array<any>) => any> = T extends (...args: Array<any>) => infer R ? R : any;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Returns in Lua\nDESCRIPTION: Example of a Lua function returning multiple values, which is a common pattern in Luau but doesn't have a direct equivalent in TypeScript.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/lua-tuple.mdx#2025-04-19_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function foo()\n\treturn \"abc\", 123\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing OmitThisParameter Utility Type in TypeScript\nDESCRIPTION: Removes the 'this' parameter from a function type. Creates a new function type without the 'this' parameter if it exists.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ntype OmitThisParameter<T> = unknown extends ThisParameterType<T>\n\t? T\n\t: T extends (...args: infer A) => infer R\n\t? (...args: A) => R\n\t: T;\n```\n\n----------------------------------------\n\nTITLE: Spreading Attributes and Children in Roact JSX\nDESCRIPTION: Shows how to use spreading for both attributes and children in Roact JSX, useful for creating reusable property sets and dynamic child elements.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/roact-jsx.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Roact from \"@rbxts/roact\";\n\nconst MyStyle: Partial<WritableInstanceProperties<Frame>> = {\n\tBackgroundColor3: new Color3(0, 0, 0),\n\tBackgroundTransparency: 0.5,\n};\n\nconst listItems = new Array<Roact.Element>();\nfor (let i = 0; i < 10; i++) {\n\tlistItems.push(<textbutton Text={`Button ${i}`} />);\n}\n\nconst element = (\n\t<frame {...MyStyle}>\n\t\t{...listItems}\n\t</frame>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing WritableProperties Utility Type in TypeScript\nDESCRIPTION: Creates a new type from T with only writable fields included. Uses Pick with WritablePropertyNames to select only writable properties.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ntype WritableProperties<T> = Pick<T, WritablePropertyNames<T>>;\n```\n\n----------------------------------------\n\nTITLE: Arrow Functions as Callbacks in TypeScript\nDESCRIPTION: Shows how arrow function expressions are always treated as callbacks in roblox-ts and transpiled using dot notation, even when defined within object literals.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/callbacks-vs-methods.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = {\n\tfoo: (bar: number) => {}\n}\nobj.foo(123); // obj.foo(123)\n```\n\n----------------------------------------\n\nTITLE: Implementing InstancePropertyNames Utility Type in TypeScript for Roblox\nDESCRIPTION: Given a Roblox Instance type T, returns a union of all property names that are not signals, callbacks, or symbols.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ntype InstancePropertyNames<T extends Instance> = ExcludeKeys<T, RBXScriptSignal | Callback | symbol>;\n```\n\n----------------------------------------\n\nTITLE: Extending Default JSX Elements in TypeScript\nDESCRIPTION: Shows how to extend the default JSX elements to support additional Roblox instances, allowing for broader use of JSX syntax.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/roact-jsx.mdx#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare global {\n\tnamespace JSX {\n\t\tinterface IntrinsicElements {\n\t\t\t// Your instances into here\n\t\t\tproximityprompt: JSX.IntrinsicElement<ProximityPrompt>;\n\t\t\tfolder: JSX.IntrinsicElement<Folder>;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExcludeNominalMembers Utility Type in TypeScript\nDESCRIPTION: Creates a new type by excluding properties whose names start with '_nominal_'. Used for filtering out nominal typing implementation details.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExcludeNominalMembers<T> = Pick<T, ExcludeNominalKeys<T>>;\n```\n\n----------------------------------------\n\nTITLE: Extending Workspace Type with Nested Children in TypeScript\nDESCRIPTION: This snippet demonstrates how to define nested children within the Zombie model using an intersection object type.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/indexing-children.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Workspace extends Instance {\n\tZombie: Model & {\n\t\tHumanoid: Humanoid;\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Luau Module with Static Constants\nDESCRIPTION: An example of a Luau module that returns a table of constants. This pattern is used when a module exports multiple named values rather than a class or object with methods.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/using-existing-luau.mdx#2025-04-19_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MyConstants = {}\n\nMyConstants.Foo = \"Bar\"\nMyConstants.Secret = \"hunter2\"\n\nreturn MyConstants\n```\n\n----------------------------------------\n\nTITLE: Returning a Module in Luau\nDESCRIPTION: A basic pattern for creating and returning a Luau module. This example shows how to define a module as a table and return it as the module's export value.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/using-existing-luau.mdx#2025-04-19_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Module = {}\n\n-- define Module members\n\nreturn Module\n```\n\n----------------------------------------\n\nTITLE: Importing Named Exports in TypeScript\nDESCRIPTION: Demonstrates how to import named exports from a Luau module that has been typed with named export declarations. This shows the destructuring import syntax.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/using-existing-luau.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Foo, Secret } from \"./MyConstants\";\nprint(Foo, Secret);\n```\n\n----------------------------------------\n\nTITLE: Importing a Luau Module in TypeScript\nDESCRIPTION: Shows how to import a Luau module that has been typed with an export assignment. This example demonstrates the default import syntax.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/using-existing-luau.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Module from \"./Module\";\nprint(Module);\n```\n\n----------------------------------------\n\nTITLE: Running roblox-ts with Custom Rojo Project File\nDESCRIPTION: Command to run roblox-ts compiler with a specific Rojo project file instead of the default one.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/syncing-with-rojo.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrbxtsc --rojo other.project.json\n```\n\n----------------------------------------\n\nTITLE: roblox-ts CLI Help Output\nDESCRIPTION: Complete command line interface reference showing all available options and commands for the roblox-ts compiler. Includes build commands, watch mode settings, project configuration, and various optimization flags.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/usage.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nroblox-ts - A TypeScript-to-Luau Compiler for Roblox\n\nCommands:\n  rbxtsc build  Build a project  [default]\n\nOptions:\n  -p, --project                project path  [string] [default: \".\"]\n  -w, --watch                  enable watch mode  [boolean] [default: false]\n      --usePolling             use polling for watch mode  [boolean] [default: false]\n      --verbose                enable verbose logs  [boolean] [default: false]\n      --noInclude              do not copy include files  [boolean] [default: false]\n      --logTruthyChanges       logs changes to truthiness evaluation from Lua truthiness rules  [boolean] [default: false]\n      --writeOnlyChanged       [boolean] [default: false]\n\t  --writeTransformedFiles  writes resulting TypeScript ASTs after transformers to out directory [boolean] [default: false]\n\t  --optimizedLoops         [boolean] [default: false]\n      --type                   override project type  [choices: \"game\", \"model\", \"package\"]\n  -i, --includePath            folder to copy runtime files to  [string]\n      --rojo                   manually select Rojo project file  [string]\n\t  --allowCommentDirectives [boolean] [default: false]\n  -h, --help                   show help information  [boolean]\n  -v, --version                show version information  [boolean]\n```\n\n----------------------------------------\n\nTITLE: Extended Rojo Configuration with Character Scripts\nDESCRIPTION: Modified Rojo configuration that adds support for character scripts by mapping an additional output folder to StarterCharacterScripts in Roblox Studio.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/syncing-with-rojo.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"StarterPlayer\": {\n\t\"$className\": \"StarterPlayer\",\n\t\"StarterPlayerScripts\": {\n\t\t\"$className\": \"StarterPlayerScripts\",\n\t\t\"TS\": {\n\t\t\t\"$path\": \"out/client\"\n\t\t}\n\t},\n\t// highlight-start\n\t\"StarterCharacterScripts\": {\n\t\t\"$className\": \"StarterCharacterScripts\",\n\t\t\"TS\": {\n\t\t\t\"$path\": \"out/character\"\n\t\t}\n\t}\n\t// highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Tuple Declaration\nDESCRIPTION: An incorrect attempt to type a Luau function with multiple returns using TypeScript tuples, which are actually arrays rather than multiple return values.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/lua-tuple.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function foo(): [string, number];\n```\n\n----------------------------------------\n\nTITLE: Testing a roblox-ts Package Using npm pack\nDESCRIPTION: Command for testing a package locally by creating a tarball that can be installed in other projects. This approach allows testing before publishing to npm.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/typescript-packages.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm pack\n```\n\n----------------------------------------\n\nTITLE: Automatically Generated Type Definitions for ReplicatedStorage in TypeScript\nDESCRIPTION: This snippet shows an example of automatically generated type definitions for ReplicatedStorage using the 'rbxts-object-to-tree' plugin.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/indexing-children.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReplicatedStorage extends Instance {\n\tZombie: Model & {\n\t\t[\"Left Leg\"]: Part;\n\t\tHumanoid: Humanoid;\n\t\t[\"Right Leg\"]: Part;\n\t\tHead: Part & {\n\t\t\tMesh: SpecialMesh;\n\t\t\tFace: Decal;\n\t\t};\n\t\tTorso: Part;\n\t\tHumanoidRootPart: Part;\n\t\t[\"Right Arm\"]: Part;\n\t\t[\"Left Arm\"]: Part;\n\t\t[\"Body Colors\"]: BodyColors;\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Local roblox-ts Package for Testing\nDESCRIPTION: Command for installing a locally packed package into another project for testing purposes. This uses the .tgz file created by npm pack.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/typescript-packages.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ../../path/to/package.tgz\n```\n\n----------------------------------------\n\nTITLE: Default Rojo Project Configuration for roblox-ts\nDESCRIPTION: Basic example of a default.project.json file for a roblox-ts project. This configuration defines how the compiled Lua files are organized in Roblox Studio, with server, shared, and client code separated appropriately.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/syncing-with-rojo.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"roblox-ts-game\",\n\t\"tree\": {\n\t\t\"$className\": \"DataModel\",\n\t\t\"ServerScriptService\": {\n\t\t\t\"$className\": \"ServerScriptService\",\n\t\t\t\"TS\": {\n\t\t\t\t\"$path\": \"out/server\" // server folder goes in ServerScriptService.TS\n\t\t\t}\n\t\t},\n\t\t\"ReplicatedStorage\": {\n\t\t\t\"$className\": \"ReplicatedStorage\",\n\t\t\t// this _must_ stay the same (except for the name)\n\t\t\t\"rbxts_include\": {\n\t\t\t\t\"$path\": \"include\",\n\t\t\t\t\"node_modules\": {\n\t\t\t\t\t\"$path\": \"node_modules/@rbxts\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"TS\": {\n\t\t\t\t\"$path\": \"out/shared\" // shared folder goes in ReplicatedStorage.TS\n\t\t\t}\n\t\t},\n\t\t\"StarterPlayer\": {\n\t\t\t\"$className\": \"StarterPlayer\",\n\t\t\t\"StarterPlayerScripts\": {\n\t\t\t\t\"$className\": \"StarterPlayerScripts\",\n\t\t\t\t\"TS\": {\n\t\t\t\t\t\"$path\": \"out/client\" // client folder goes in StarterPlayer.StarterPlayerScripts.TS\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Roact Elements without JSX in TypeScript\nDESCRIPTION: Shows how to create the same Roact element structure using the standard Roact.createElement method without JSX.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/roact-jsx.mdx#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport Roact from \"@rbxts/roact\";\n\nconst element = Roact.createElement(\n\t\"Frame\",\n\t{\n\t\tSize: new UDim2(1, 0, 1, 0),\n\t},\n\t{\n\t\tChild: Roact.createElement(\"Frame\", {\n\t\t\tSize: new UDim2(1, 0, 1, 0),\n\t\t}),\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a roblox-ts Package Using npm\nDESCRIPTION: Command for creating a new roblox-ts package project scaffolding. This initializes a new package with the necessary structure and configuration files.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/typescript-packages.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init roblox-ts package\n```\n\n----------------------------------------\n\nTITLE: Creating Type Unions from Service Interfaces\nDESCRIPTION: Shows how to create type unions for service names and service types using TypeScript's keyof operator with the Services interface.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype AllServiceNames = keyof Services;\ntype AllServices = Services[keyof Services];\n```\n\n----------------------------------------\n\nTITLE: Running Rojo to Sync Code with Roblox Studio\nDESCRIPTION: Command to start Rojo server that syncs your compiled code to Roblox Studio. This establishes a connection between your local project and the Roblox development environment.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/setup-guide.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrojo serve\n```\n\n----------------------------------------\n\nTITLE: Implementing Placeholder Utility Type in TypeScript\nDESCRIPTION: A placeholder utility type that helps force TypeScript to display the desired type information. It simply returns the input type without modification.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype _<T> = T;\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy for roblox-ts Development\nDESCRIPTION: Command to enable script execution in PowerShell for users encountering restrictions when running roblox-ts scripts. This sets the execution policy to RemoteSigned for the current user.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/setup-guide.mdx#2025-04-19_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Implementing ExcludeKeys Utility Type in TypeScript\nDESCRIPTION: Returns a union of all the keys of T whose values do not extend from type U. Uses indexed access types to extract non-matching keys.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/utility-types.mdx#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExcludeKeys<T, U> = { [K in keyof T]: T[K] extends U ? never : K }[keyof T];\n```\n\n----------------------------------------\n\nTITLE: Opening a roblox-ts Project in VSCode\nDESCRIPTION: Command to open your newly created roblox-ts project in Visual Studio Code. Replace 'project-name' with the name of your project directory.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/setup-guide.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncode project-name\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy for roblox-ts\nDESCRIPTION: This command sets the PowerShell execution policy to RemoteSigned for the current user, allowing the execution of scripts like roblox-ts. It should be run in an administrator PowerShell session.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/faq/powershell.mdx#2025-04-19_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Displaying npm Publish Error for @rbxts Scoped Package\nDESCRIPTION: This code snippet shows the error message encountered when trying to publish a package to the @rbxts scope on npm for the first time. The error indicates that the package is not found in the registry, which is caused by a bug in the npm join-org page.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/faq/publish-not-found.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm error code E404\nnpm error 404 Not Found - PUT https://registry.npmjs.org/@rbxts%2package - Not found\nnpm error 404\nnpm error 404  '@rbxts/package@1.0.0' is not in this registry.\nnpm error 404\nnpm error 404 Note that you can also install from a\nnpm error 404 tarball, folder, http url, or git url.\n```\n\n----------------------------------------\n\nTITLE: Publishing Public Package via npm CLI\nDESCRIPTION: Command line instruction to publish a package with public access using npm CLI flag.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/faq/publish-as-public.mdx#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm publish --access public\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Package Access in package.json\nDESCRIPTION: JSON configuration to set package visibility as public in package.json using publishConfig setting.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/faq/publish-as-public.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"name\": \"@rbxts/package\", // your package name goes here\n\t\"version\": \"1.0.0\",\n\t\"publishConfig\": {\n\t\t\"access\": \"public\"\n\t}\n\t// other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Logo in React/JSX\nDESCRIPTION: This snippet demonstrates how to import and use an SVG logo in a React component using JSX syntax.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/introduction.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LogoSvg from \"../static/img/roblox-ts.svg\";\n\n<center><LogoSvg /></center>\n```\n\n----------------------------------------\n\nTITLE: Displaying npm Payment Required Error\nDESCRIPTION: Example of the error message when attempting to publish a private package without proper permissions.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/faq/publish-as-public.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm error code E402\nnpm error 402 Payment Required - PUT https://registry.npmjs.org/@rbxts%2fpackage - You must sign up for private packages\n```\n\n----------------------------------------\n\nTITLE: Setting Up Interactive Playground\nDESCRIPTION: Sequence of commands to install dependencies and start the interactive playground component of the documentation website.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ./rbxts-worker\nnpm install\ncd ..\nnpm run start:playground\n```\n\n----------------------------------------\n\nTITLE: Rendering NPM Organization Join Form in React JSX\nDESCRIPTION: Creates a form for submitting an npm username to join the '@rbxts' organization. The form includes styling, reCAPTCHA integration, and submits to an external API endpoint.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/src/pages/join-org/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<form\n\tid=\"org-form\"\n\taction=\"https://roblox-ts-org-invite-production.up.railway.app/invite-to-org\"\n\tmethod=\"post\"\n\tstyle={{\n\t\tdisplay: \"flex\",\n\t}}\n>\n\t<input\n\t\ttype=\"text\"\n\t\tname=\"username\"\n\t\tplaceholder=\"npm username\"\n\t\tstyle={{\n\t\t\tborderRadius: \"0.4rem\",\n\t\t\tborderWidth: 0,\n\t\t\theight: \"2rem\",\n\t\t\tpadding: \"1rem\",\n\t\t\tmarginRight: \"0.4rem\",\n\t\t\tverticalAlign: \"middle\",\n\t\t\tfontFamily: \"var(--ifm-font-family-base)\",\n\t\t\twidth: \"calc(100% - 5.4rem)\",\n\t\t\tmaxWidth: \"15rem\",\n\t\t\tbackground: \"#ebedf0\",\n\t\t}}\n\t\trequired\n\t/>\n\t<button\n\t\tclassName=\"g-recaptcha\"\n\t\tdata-sitekey=\"6LeJpLIUAAAAANNNvHEWfIBZR08Tamp06xD4yIBy\"\n\t\tdata-callback=\"onSubmit\"\n\t\tstyle={{\n\t\t\tborderRadius: \"0.4rem\",\n\t\t\tborder: \"1px solid white\",\n\t\t\tboxSizing: \"border-box\",\n\t\t\theight: \"2rem\",\n\t\t\tpadding: \"1rem\",\n\t\t\tverticalAlign: \"middle\",\n\t\t\tlineHeight: 0,\n\t\t\tfontFamily: \"var(--ifm-font-family-base)\",\n\t\t\tbackground: \"transparent\",\n\t\t\tcolor: \"white\",\n\t\t\twidth: \"5rem\",\n\t\t}}\n\t>\n\t\tSubmit\n\t</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Documentation Server\nDESCRIPTION: Basic commands to install dependencies and start the local development server for the documentation website.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Initializing reCAPTCHA Callback in React\nDESCRIPTION: Sets up a global callback function for reCAPTCHA submission. This function triggers the form submission when the reCAPTCHA is completed.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/src/pages/join-org/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<>{(() => globalThis.onSubmit = token => document.getElementById(\"org-form\").submit())()}</>\n```\n\n----------------------------------------\n\nTITLE: Organization Form with reCAPTCHA Integration in JSX\nDESCRIPTION: Creates a form that submits user data to a reCAPTCHA-protected endpoint. The form includes a hidden input field for the username extracted from URL parameters and a styled button that triggers reCAPTCHA verification.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/src/pages/join-org/invite-sent.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<form\n\tid=\"org-form\"\n\taction=\"https://roblox-ts-org-invite-production.up.railway.app/add-to-team\"\n\tmethod=\"post\"\n\tstyle={{\n\t\tdisplay: \"flex\",\n\t}}\n>\n\t<input type=\"hidden\" name=\"username\" value={new URLSearchParams(globalThis.location?.search).get(\"username\")} />\n\t<button\n\t\tclassName=\"g-recaptcha\"\n\t\tdata-sitekey=\"6LeJpLIUAAAAANNNvHEWfIBZR08Tamp06xD4yIBy\"\n\t\tdata-callback=\"onSubmit\"\n\t\tstyle={{\n\t\t\tborderRadius: \"0.4rem\",\n\t\t\tborder: \"1px solid white\",\n\t\t\tboxSizing: \"border-box\",\n\t\t\theight: \"2rem\",\n\t\t\tpadding: \"1rem\",\n\t\t\tverticalAlign: \"middle\",\n\t\t\tlineHeight: 0,\n\t\t\tfontFamily: \"var(--ifm-font-family-base)\",\n\t\t\tbackground: \"transparent\",\n\t\t\tcolor: \"white\",\n\t\t\twidth: \"5rem\",\n\t\t}}\n\t>\n\t\tDone\n\t</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting up reCAPTCHA Submit Callback in JSX\nDESCRIPTION: Creates a global onSubmit function that will be triggered by reCAPTCHA and submits the organization form when the user completes verification.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/src/pages/join-org/invite-sent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>{(() => globalThis.onSubmit = token => document.getElementById(\"org-form\").submit())()}</>\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Reason from URL Parameters in JSX\nDESCRIPTION: This code snippet retrieves the 'reason' parameter from the current URL's search string and displays it within a CodeBlock component. It uses the URLSearchParams API to parse the search string.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/src/pages/join-org/fail.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeBlock>\n\t{new URLSearchParams(globalThis.location?.search).get(\"reason\")}\n</CodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Defining URI.js Library License\nDESCRIPTION: This code snippet defines the license information for the URI.js library. It specifies the version, author, and license location.\nSOURCE: https://github.com/roblox-ts/roblox-ts.com/blob/master/static/rbxts-worker.js.LICENSE.txt#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */\n```"
  }
]