[
  {
    "owner": "c4spar",
    "repo": "deno-cliffy",
    "content": "TITLE: Registering Help and Completions Commands in Cliffy\nDESCRIPTION: Example showing how to register optional Help and Completions commands in the cliffy Command framework. These commands were previously auto-registered but are now optional as part of a breaking change.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Command,\n  CompletionsCommand,\n  HelpCommand,\n} from \"https://deno.land/x/cliffy/command.ts\";\n\nawait new Command()\n  .command(\"help\", new HelpCommand())\n  .command(\"completions\", new CompletionsCommand())\n  .parse();\n```\n\n----------------------------------------\n\nTITLE: Upgrade Command Implementation\nDESCRIPTION: Shows how to implement upgrade commands with single and multiple registry providers.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// single registry with default options\ncmd.command(\n  \"upgrade\",\n  new UpgradeCommand({\n    provider: new DenoLandProvider(),\n  }),\n);\n\n// multi registry with custom options\ncmd.command(\n  \"upgrade\",\n  new UpgradeCommand({\n    main: \"cli.ts\",\n    args: [\"--allow-net\", \"--unstable\"],\n    provider: [\n      new DenoLandProvider({ name: \"cliffy\" }),\n      new NestLandProvider({ name: \"cliffy\" }),\n      new GithubProvider({ repository: \"c4spar/deno-cliffy\" }),\n    ],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Registering File Type Option with Path Completion (TypeScript)\nDESCRIPTION: Shows how to register an option with the new file type that supports path completion when the CompletionCommand is registered.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew Command()\n  .option(\"--input-file <path:file>\", \"The input file.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Options for Dynamic Option Names (TypeScript)\nDESCRIPTION: Demonstrates how to register wildcard options that allow dynamic option names, including nested dynamic names using dot notation.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew Command()\n  .option(\"--foo.*\", \"This options allows any name on the foo option.\")\n  .option(\n    \"--bar.*.*\",\n    \"This options allows any nested name on the bar option.\",\n  );\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with Command Options in TypeScript\nDESCRIPTION: Demonstrates how to use environment variables with command options in deno-cliffy. It shows setting a prefix for environment variables and how they interact with command-line options.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait new Command<void>()\n  .env<{ outputFile?: string }>(\n    \"CC_OUTPUT_FILE=<value:string>\",\n    \"The output file.\",\n    { prefix: \"CC_\" },\n  )\n  .option<{ outputFile?: string }>(\n    \"--output-file <value:string>\",\n    \"The output file.\",\n  )\n  .action((options) => console.log(options.outputFile))\n  .parse();\n```\n\nLANGUAGE: console\nCODE:\n```\n$ CC_OUTPUT_FILE=foo.txt deno run example.ts\nfoo.txt\n$ CC_OUTPUT_FILE=foo.txt deno run example.ts --output-file bar.txt\nbar.txt\n```\n\n----------------------------------------\n\nTITLE: Keypress Event Handling\nDESCRIPTION: Shows different ways to handle keypress events including promises, event listeners and async iterators.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// promise\nconst event: KeyPressEvent = await keypress();\n\n// events\nkeypress().addEventListener((event: KeyPressEvent) => {\n  console.log(\"event:\", event);\n  if (event.ctrlKey && event.key === \"c\") {\n    keypress().dispose();\n  }\n});\n\n// async iterator\nfor await (const event: KeyPressEvent of keypress()) {\n  console.log(\"event:\", event);\n  if (event.ctrlKey && event.key === \"c\") {\n    break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Inferred Types Pattern for Commands (TypeScript)\nDESCRIPTION: Demonstrates the new pattern where option and argument types are automatically inferred from their definitions, removing the need for explicit type annotations.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew Command()\n  .option(\"--foo <value:string>\")\n  .arguments(\"<input> [output]\");\n```\n\n----------------------------------------\n\nTITLE: External Command Registration in TypeScript\nDESCRIPTION: Example demonstrating the change in how external commands are registered using the Command class. Shows the new required usage of the .external() method.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nnew Command()\n  .command(\"sub-command\", \"description...\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew Command()\n  .command(\"sub-command\", \"description...\")\n  .external();\n```\n\n----------------------------------------\n\nTITLE: Migrating from requiredValue to optionalValue in Cliffy Flags Module\nDESCRIPTION: Shows the changes required to migrate from the deprecated 'requiredValue' option to the new 'optionalValue' property in flag definitions. The 'optionalValue' property replaces 'requiredValue' with inverse logic, and 'optionalValue' in args array is renamed to 'optional'.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparseFlags(Deno.args, {\n  flags: [{\n    name: \"foo\",\n    type: \"boolean\",\n    requiredValue: true,\n  }, {\n    name: \"bar\",\n    args: [{\n      type: \"string\",\n      optionalValue: true,\n    }],\n  }],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nparseFlags(Deno.args, {\n  flags: [{\n    name: \"foo\",\n    type: \"boolean\",\n    optionalValue: false,\n  }, {\n    name: \"bar\",\n    args: [{\n      type: \"string\",\n      optional: true,\n    }],\n  }],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Enum Type for Command Options\nDESCRIPTION: Shows how to define and use an enum type for command line options with predefined values.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncmd.type(\"log-level\", new EnumType([\"debug\", \"info\", 0, 1]))\n  .option(\"-L, --log-level <level:log-level>\");\n```\n\n----------------------------------------\n\nTITLE: Generic Custom Types for Commands\nDESCRIPTION: Example of creating and using generic custom types with type inference for command options.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst color = new EnumType([\"red\", \"blue\", \"yellow\"]);\ncmd.type(\"color\", color)\n  // you can pass the type\n  .option<{ color: typeof color }>(\"-c, --color <name:color>\");\n```\n\n----------------------------------------\n\nTITLE: Input Prompt with Local Storage\nDESCRIPTION: Example of using the Input prompt with local storage integration for saving suggestions.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait Input.prompt({\n  message: \"Enter your name\",\n  id: \"<local-storage-key>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Type Handler Implementation in TypeScript\nDESCRIPTION: Example showing how type handlers were refactored to be compatible with environment variables and arguments. Shows the change from option-specific handler to a more generic handler using ITypeInfo interface.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst myType: ITypeHandler<number> = (\n  option: IFlagOptions,\n  arg: IFlagArgument,\n  value: string,\n): number => {};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst myType: ITypeHandler<number> = (\n  { label, name, value, type }: ITypeInfo,\n): number => {};\n```\n\n----------------------------------------\n\nTITLE: Integer Type Option\nDESCRIPTION: Example of using the integer type for command options.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncmd.option(\"-a, --amount <amount:integer>\");\n```\n\n----------------------------------------\n\nTITLE: Adding Indentation to Cliffy Prompt Inputs\nDESCRIPTION: Demonstrates how to restore the previously default indentation in prompts after the removal of default indentation. Uses the 'indent' option to add space before the prompt message.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait Input.prompt({\n  message: \"What's your name?\",\n  indent: \" \",\n});\n```\n\n----------------------------------------\n\nTITLE: Refactoring KeyCode Parsing in TypeScript\nDESCRIPTION: Shows the before and after code for parsing key codes in the keycode module. The refactoring simplifies the API by removing the KeyCode class and using a parse function directly.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Before:\nconst key: KeyEvent = KeyCode.parse(\n  \"\\x1b[A\\x1b[B\\x1b[C\\x1b[D\\x1b[E\\x1b[F\\x1b[H\",\n);\n\n// After:\nconst key: KeyCode = parse(\"\\x1b[A\\x1b[B\\x1b[C\\x1b[D\\x1b[E\\x1b[F\\x1b[H\");\n```\n\n----------------------------------------\n\nTITLE: Throwing Validation Error with Exit Code\nDESCRIPTION: Demonstrates throwing a ValidationError with a custom exit code parameter.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new ValidationError(\"Some validation error\", 2);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Previous Command Type Declaration Pattern (TypeScript)\nDESCRIPTION: Shows the old pattern for defining command options and arguments with explicit type annotations, which required passing void as a generic argument to enable strict typing.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew Command<void>()\n  .option<{ foo?: string }>(\"--foo <value:string>\")\n  .arguments<[string, string?]>(\"<input> [output]\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges in Markdown\nDESCRIPTION: This snippet shows how to create a centered container of badges using HTML within a Markdown file. It includes various shields.io and custom badges for project information.\nSOURCE: https://github.com/c4spar/deno-cliffy/blob/main/ansi/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<p align=\"center\" class=\"badges-container\">\n  <a href=\"https://github.com/c4spar/deno-cliffy/releases\">\n    <img alt=\"Version\" src=\"https://img.shields.io/github/v/release/c4spar/deno-cliffy?logo=github&color=blue\" />\n  </a>\n  <a href=\"https://github.com/c4spar/deno-cliffy/actions/workflows/test.yml\">\n    <img alt=\"Build status\" src=\"https://github.com/c4spar/deno-cliffy/workflows/Test/badge.svg?branch=main\" />\n  </a>\n  <a href=\"https://codecov.io/gh/c4spar/deno-cliffy\">\n    <img src=\"https://codecov.io/gh/c4spar/deno-cliffy/branch/main/graph/badge.svg\"/>\n  </a>\n  <a href=\"https://github.com/c4spar/deno-cliffy/labels/module%3Aansi-escape\">\n    <img alt=\"issues\" src=\"https://img.shields.io/github/issues/c4spar/deno-cliffy/module:ansi-escape?label=issues&logo=github&color=yellow\">\n  </a>\n  <a href=\"https://deno.land/\">\n    <img alt=\"Deno version\" src=\"https://img.shields.io/badge/deno-^1.4.0-blue?logo=deno\" />\n  </a>\n  <a href=\"https://doc.deno.land/https/deno.land/x/cliffy/ansi/mod.ts\">\n    <img alt=\"doc\" src=\"https://img.shields.io/badge/deno-doc-yellow?logo=deno\" />\n  </a>\n  <a href=\"https://discord.gg/ghFYyP53jb\">\n    <img alt=\"Discord\" src=\"https://img.shields.io/badge/join-chat-blue?logo=discord&logoColor=white\" />\n  </a>\n  <a href=\"../LICENSE\">\n    <img alt=\"License\" src=\"https://img.shields.io/github/license/c4spar/deno-cliffy?logo=github\" />\n  </a>\n  <br>\n  <a href=\"https://deno.land/x/cliffy\">\n    <img alt=\"Discord\" src=\"https://img.shields.io/badge/Published on deno.land-blue?logo=deno&logoColor=959DA6&color=272727\" />\n  </a>\n</p>\n```"
  }
]