[
  {
    "owner": "betcode-org",
    "repo": "betfair",
    "content": "TITLE: Importing and Initializing Betfair API Client in Python\nDESCRIPTION: This snippet shows how to import the betfairlightweight library and create an API client instance. It demonstrates both certificate-based and interactive login methods.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/quickstart.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import betfairlightweight\n\n>>> trading = betfairlightweight.APIClient(\n        \"username\", \"password\", app_key=\"app_key\", certs=\"/certs\"\n    )\n>>> trading.login()\n<LoginResource>\n\n>>> trading = betfairlightweight.APIClient(\n        \"username\", \"password\", app_key=\"app_key\"\n    )\n>>> trading.login_interactive()\n<LoginResource>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Market Catalogue from Betfair API in Python\nDESCRIPTION: This snippet shows how to use listMarketCatalogue to get static market data from the Betfair API, applying filters and market projections.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/quickstart.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> racing_filter = filters.market_filter(\n        event_type_ids=[7],  # filter on just horse racing\n        market_countries=[\"GB\"],  # filter on just GB countries\n        market_type_codes=[\"WIN\"],  # filter on just WIN market types\n    )\n>>> results = trading.betting.list_market_catalogue(\n        market_projection=[\n            \"RUNNER_DESCRIPTION\", \n            \"RUNNER_METADATA\", \n            \"COMPETITION\", \n            \"EVENT\", \n            \"EVENT_TYPE\", \n            \"MARKET_DESCRIPTION\", \n            \"MARKET_START_TIME\",\n        ],\n        filter=racing_filter,\n        max_results=100,\n    )\n[<MarketCatalogue>, <MarketCatalogue>, ...\n\n>>> for i in results:\n        print(\n            \"{0} {1:d}:{2:02d} {3} ({4})\".format(\n                i.market_id,\n                i.market_start_time.hour, \n                i.market_start_time.minute, \n                i.event.venue,  \n                i.description.market_type,\n            )\n        )\n\n1.167697086 18:00 Kempton (PLACE)\n1.167697085 18:00 Kempton (WIN)\n1.167697089 18:00 Kempton (OTHER_PLACE)\n1.167724518 18:20 Sam Houston Race Park (WIN)\n1.167724731 18:29 Tampa Bay Downs (OTHER_PLACE)\n1.167724730 18:29 Tampa Bay Downs (WIN)\n1.167758596 18:30 Kempton (REV_FORECAST)\n1.167756729 18:30 Kempton (MATCH_BET)\n...\n```\n\n----------------------------------------\n\nTITLE: Fetching Market Book Data from Betfair API in Python\nDESCRIPTION: This snippet demonstrates how to use listMarketBook to retrieve dynamic market price data from the Betfair API and process the results.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/quickstart.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> market_books = trading.betting.list_market_book(\n        market_ids=[\"1.167697085\"],\n        price_projection=filters.price_projection(\n            price_data=filters.price_data(ex_all_offers=True)\n        ),\n    )\n\n>>> for market_book in market_books:\n        print(  # prints market id, inplay?, status and total matched\n            market_book.market_id,\n            market_book.inplay,\n            market_book.status,\n            market_book.total_matched,\n        )\n        for runner in market_book.runners:  \n            print (  # prints selection id, status, LPT and total matched\n                runner.selection_id, \n                runner.status, \n                runner.last_price_traded, \n                runner.total_matched,\n            )\n            \n1.167697085 False OPEN 230638.0\n27024606 ACTIVE 2.38 147131.93\n27596981 ACTIVE 3.25 52257.48\n26105369 ACTIVE 9.4 15378.91\n27596982 ACTIVE 21.0 8247.93\n27596980 ACTIVE 24.0 2763.9\n27596984 ACTIVE 40.0 1175.25\n27596985 ACTIVE 38.0 1260.61\n27596983 ACTIVE 70.0 1074.73\n27062522 ACTIVE 85.0 1096.03\n27596986 ACTIVE 320.0 251.17\n```\n\n----------------------------------------\n\nTITLE: Placing Orders with Betfair API in Python\nDESCRIPTION: This snippet shows how to place a limit order using the Betfair API, including setting up the order parameters and processing the response.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/quickstart.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> market_id = \"1.131347484\"\n>>> selection_id = 12029579\n>>> limit_order = filters.limit_order(\n        size=2.00, price=1.01, persistence_type=\"LAPSE\"\n    )\n>>> instruction = filters.place_instruction(\n        order_type=\"LIMIT\",\n        selection_id=selection_id,\n        side=\"LAY\",\n        limit_order=limit_order,\n    )\n>>> place_orders = trading.betting.place_orders(\n        market_id=market_id, instructions=[instruction]  # list\n    )\n\n>>> print(place_orders.status)\n>>> for order in place_orders.place_instruction_reports:\n        print(\n            \"Status: {0}, BetId: {1}, Average Price Matched: {2}\".format(\n                order.status, \n                order.bet_id, \n                order.average_price_matched\n            )\n        )\n           \nSUCCESS\nStatus: SUCCESS, BetId: 192329047378, Average Price Matched: 0.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Market Stream with Betfair API in Python\nDESCRIPTION: Creates and manages a market stream connection to Betfair's API using betfairlightweight library. Configures filters for GB WIN racing markets and processes streaming updates through a queue system.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/streaming.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport queue\nimport threading\n\nimport betfairlightweight\nfrom betfairlightweight.filters import (\n    streaming_market_filter,\n    streaming_market_data_filter,\n)\n\ntrading = betfairlightweight.APIClient(\"username\", \"password\", app_key=\"appKey\")\ntrading.login()\n\n# create queue\noutput_queue = queue.Queue()\n\n# create stream listener\nlistener = betfairlightweight.StreamListener(output_queue=output_queue)\n\n# create stream\nstream = trading.streaming.create_stream(listener=listener)\n\n# create filters (GB WIN racing)\nmarket_filter = streaming_market_filter(\n    event_type_ids=[\"7\"], country_codes=[\"GB\"], market_types=[\"WIN\"]\n)\nmarket_data_filter = streaming_market_data_filter(\n    fields=[\"EX_BEST_OFFERS\", \"EX_MARKET_DEF\"], ladder_levels=3\n)\n\n# subscribe\nstreaming_unique_id = stream.subscribe_to_markets(\n    market_filter=market_filter,\n    market_data_filter=market_data_filter,\n    conflate_ms=1000,  # send update every 1000ms\n)\n\n# start stream in a new thread (in production would need err handling)\nt = threading.Thread(target=stream.start, daemon=True)\nt.start()\n\n# check for updates in output queue\nwhile True:\n    market_books = output_queue.get()\n    print(market_books)\n\n    for market_book in market_books:\n        print(\n            market_book,\n            market_book.streaming_unique_id,  # unique id of stream (returned from subscribe request)\n            market_book.streaming_update,  # json update received\n            market_book.market_definition,  # streaming definition, similar to catalogue request\n            market_book.publish_time,  # betfair publish time of update\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Stream with Betfair API in Python\nDESCRIPTION: Sets up an order stream connection to track betting orders in real-time using betfairlightweight library. Implements queue-based processing of order updates.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/streaming.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport queue\nimport threading\n\nimport betfairlightweight\nfrom betfairlightweight.filters import streaming_order_filter\n\ntrading = betfairlightweight.APIClient(\"username\", \"password\", app_key=\"appKey\")\ntrading.login()\n\n# create queue\noutput_queue = queue.Queue()\n\n# create stream listener\nlistener = betfairlightweight.StreamListener(output_queue=output_queue)\n\n# create stream\nstream = trading.streaming.create_stream(listener=listener)\n\n# create filters (GB WIN racing)\norder_filter = streaming_order_filter()\n\n# subscribe\nstreaming_unique_id = stream.subscribe_to_orders(\n    order_filter=order_filter,\n    conflate_ms=1000,  # send update every 1000ms\n)\n\n# start stream in a new thread (in production would need err handling)\nt = threading.Thread(target=stream.start, daemon=True)\nt.start()\n\n# check for updates in output queue\nwhile True:\n    current_orders = output_queue.get()\n    print(current_orders)\n```\n\n----------------------------------------\n\nTITLE: Filtering Events in Betfair API with Python\nDESCRIPTION: This snippet demonstrates how to use market filters to list specific events, such as Horse Racing, from the Betfair API.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/quickstart.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from betfairlightweight import filters\n\n>>> racing_filter = filters.market_filter(text_query=\"Horse Racing\")\n>>> results = trading.betting.list_events(\n        filter=racing_filter\n    )\n[<EventResult>, <EventResult>, ...\n\n>>> for i in results:\n        print(i.event.id, i.event.name, i.market_count)\n\n29324768 Aintree 4th Apr 1\n29660708 Arar (AUS) 21st Jan 14\n29661349 Aque (US) 20th Jan 9\n29636646 Newmarket 3rd May 1\n29660974 Wolv 20th Jan 32\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Orders with Betfair API in Python\nDESCRIPTION: This snippet demonstrates how to update an existing order using the Betfair API, changing its persistence type.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/quickstart.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> bet_id = 192329047378\n>>> instruction = filters.update_instruction(\n        bet_id=bet_id, new_persistence_type=\"PERSIST\"\n    )\n>>> update_order = trading.betting.update_orders(\n        market_id=market_id, instructions=[instruction]\n    )\n\n>>> print(update_order.status)\n>>> for order in update_order.update_instruction_reports:\n        print(\"Status: {0}\".format(order.status))\n\nSUCCESS\nStatus: SUCCESS\n```\n\n----------------------------------------\n\nTITLE: Replacing Orders with Betfair API in Python\nDESCRIPTION: This snippet shows how to replace an existing order with a new one using the Betfair API, changing the price of the order.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/quickstart.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> instruction = filters.replace_instruction(bet_id=bet_id, new_price=1.10)\n>>> replace_order = trading.betting.replace_orders(\n        market_id=market_id, instructions=[instruction]\n    )\n\n>>> print(replace_order.status)\n>>> for order in replace_order.replace_instruction_reports:\n        place_report = order.place_instruction_reports\n        cancel_report = order.cancel_instruction_reports\n        print(\n            \"Status: {0}, New BetId: {1}, Average Price Matched: {2}\".format(\n                order.status, \n                place_report.bet_id, \n                place_report.average_price_matched,\n            )\n        )\n        \nSUCCESS\nStatus: SUCCESS, New BetId: 192329894811, Average Price Matched: 0.0 \n```\n\n----------------------------------------\n\nTITLE: Cancelling Orders with Betfair API in Python\nDESCRIPTION: This snippet demonstrates how to cancel an existing order using the Betfair API, including specifying the size reduction and processing the cancellation report.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/quickstart.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> instruction = filters.cancel_instruction(bet_id=bet_id, size_reduction=2.00)\n>>> cancel_order = trading.betting.cancel_orders(\n        market_id=market_id, instructions=[instruction]\n    )\n\n>>> print(cancel_order.status)\n>>> for cancel in cancel_order.cancel_instruction_reports:\n        print(\n            \"Status: {0}, Size Cancelled: {1}, Cancelled Date: {2}\".format(\n                cancel.status, \n                cancel.size_cancelled, \n                cancel.cancelled_date,\n            )\n        )\n\nSUCCESS\nStatus: SUCCESS, Size Cancelled: 2.0, Cancelled Date: 2020-01-22 18:08:57\n```\n\n----------------------------------------\n\nTITLE: Betting Operations Endpoints in Betfair API (Python)\nDESCRIPTION: Core betting operations endpoints for the Betfair API allowing listing of various betting markets, placing and managing orders, and retrieving profit/loss information. These methods provide the essential functionality for betting operations.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/endpoints.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_event_types()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_competitions()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_time_ranges()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_events()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_market_types()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_countries()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_venues()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_market_catalogue()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_market_book()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_runner_book()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_current_orders()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_cleared_orders()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_market_profit_and_loss()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.place_orders()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.cancel_orders()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.update_orders()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.replace_orders()\n```\n\n----------------------------------------\n\nTITLE: Authentication Endpoints in Betfair API (Python)\nDESCRIPTION: Essential authentication methods for the Betfair API including login, interactive login, session maintenance, and logout. These endpoints handle user authentication and session management.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/endpoints.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntrading.login()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.login_interactive()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.keep_alive()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.logout()\n```\n\n----------------------------------------\n\nTITLE: Account Management Endpoints in Betfair API (Python)\nDESCRIPTION: Account management endpoints for retrieving financial information, account details, statements, and performing fund transfers. These methods allow users to monitor and manage their Betfair account.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/endpoints.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrading.account.get_account_funds()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.account.get_account_details()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.account.get_account_statement()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.account.list_currency_rates()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.account.transfer_funds()\n```\n\n----------------------------------------\n\nTITLE: Streaming Endpoints in Betfair API (Python)\nDESCRIPTION: Streaming endpoints for creating real-time and historical data streams. These methods enable subscription to market and order data streams for continuous updates.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/endpoints.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntrading.streaming.create_stream()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.streaming.create_historical_stream()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.streaming.create_historical_generator_stream()\n```\n\n----------------------------------------\n\nTITLE: In-Play Service Endpoints in Betfair API (Python)\nDESCRIPTION: In-play service endpoints for retrieving real-time information about ongoing events including timelines and scores. These methods provide detailed in-play data for live betting markets.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/endpoints.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntrading.in_play_service.get_event_timeline()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.in_play_service.get_event_timelines()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.in_play_service.get_scores()\n```\n\n----------------------------------------\n\nTITLE: Scores Endpoints in Betfair API (Python)\nDESCRIPTION: Score-related endpoints for retrieving race details, available events, scores, and incidents. These methods provide real-time information about sporting events and races.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/endpoints.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrading.scores.list_race_details()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.scores.list_available_events()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.scores.list_scores()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.scores.list_incidents()\n```\n\n----------------------------------------\n\nTITLE: Navigation Endpoint in Betfair API (Python)\nDESCRIPTION: Navigation endpoint for the Betfair API that retrieves the full navigation menu for browsing markets. This provides a hierarchical view of available betting markets.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/endpoints.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrading.navigation.list_navigation()\n```\n\n----------------------------------------\n\nTITLE: Historical Data Endpoints in Betfair API (Python)\nDESCRIPTION: Historical data endpoints for retrieving past betting data, available data collections, sizing information, and downloading historical files. These methods provide access to archived betting market data.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/endpoints.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntrading.historic.get_my_data()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.historic.get_collection_options()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.historic.get_data_size()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.historic.get_file_list()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.historic.download_file()\n```\n\n----------------------------------------\n\nTITLE: Race Card Endpoints in Betfair API (Python)\nDESCRIPTION: Race card endpoints for accessing detailed horse racing information including race cards and results. These methods require separate authentication and provide specialized racing data.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/endpoints.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntrading.race_card.login()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.race_card.get_race_card()\n```\n\nLANGUAGE: python\nCODE:\n```\ntrading.race_card.get_race_result()\n```\n\n----------------------------------------\n\nTITLE: Fetching Event Types from Betfair API\nDESCRIPTION: Example of making a basic API call to retrieve event types from the Betfair API after successful authentication.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nevent_types = trading.betting.list_event_types()\n\n[<EventTypeResult>, <EventTypeResult>, ..]\n```\n\n----------------------------------------\n\nTITLE: Setting up Market Streaming with Betfair API\nDESCRIPTION: Creates a streaming connection to receive real-time market data from Betfair. Defines filters to specify which markets and data fields to include in the stream.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom betfairlightweight.filters import (\n    streaming_market_filter,\n    streaming_market_data_filter,\n)\n\nbetfair_socket = trading.streaming.create_stream()\n\nmarket_filter = streaming_market_filter(\n    event_type_ids=['7'],\n    country_codes=['IE'],\n    market_types=['WIN'],\n)\nmarket_data_filter = streaming_market_data_filter(\n    fields=['EX_ALL_OFFERS', 'EX_MARKET_DEF'],\n    ladder_levels=3\n)\n\nbetfair_socket.subscribe_to_markets(\n    market_filter=market_filter,\n    market_data_filter=market_data_filter,\n)\n\nbetfair_socket.start()  # blocking\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Data from Betfair API\nDESCRIPTION: Makes a call to the Betfair Historical Data API to retrieve information about purchased historical data packages.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntrading.historic.get_my_data()\n\n[{'plan': 'Basic Plan', 'purchaseItemId': 1343, 'sport': 'Cricket', 'forDate': '2017-06-01T00:00:00'}]\n```\n\n----------------------------------------\n\nTITLE: Processing Historical Data with Streaming Interface\nDESCRIPTION: Creates a historical stream to process previously downloaded historical data using the same interface as live streaming.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstream = trading.streaming.create_historical_stream(\n    file_path='horse-racing-pro-sample',\n)\n\nstream.start()\n```\n\n----------------------------------------\n\nTITLE: Using Generator-based Historical Data Stream\nDESCRIPTION: Creates a generator that yields market books from historical data, allowing for more controlled iteration through the data.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nstream = trading.streaming.create_historical_generator_stream(\n    file_path='horse-racing-pro-sample',\n)\n\ng = stream.get_generator()\n\nfor market_books in g():\n    print(market_books)\n```\n\n----------------------------------------\n\nTITLE: Processing Historical Betfair Data in Python\nDESCRIPTION: Demonstrates how to process historical Betfair data using betfairlightweight library. Shows both standard streaming and generator-based approaches for processing historical market data.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/streaming.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> trading = betfairlightweight.APIClient(\"username\", \"password\")\n\n    # create listener\n>>> listener = StreamListener(max_latency=None)\n\n    # create historical stream, update file_path to file location\n>>> stream = trading.streaming.create_historical_stream(\n        file_path=\"/tmp/BASIC-1.132153978\",\n        listener=listener,\n    )\n\n    # start stream\n>>> stream.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Listener for Betfair Streaming in Python\nDESCRIPTION: Shows how to create a custom listener by extending the StreamListener class from betfairlightweight library to handle raw streaming data.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/streaming.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport betfairlightweight\n\n\nclass MyListener(betfairlightweight.StreamListener):\n    def on_data(self, raw_data: str) -> Optional[bool]:\n        print(raw_data)\n\n\ncustom_listener = MyListener()\n```\n\n----------------------------------------\n\nTITLE: Initializing Betfair API Client with Custom Locale in Python\nDESCRIPTION: This snippet demonstrates how to initialize the betfairlightweight APIClient with a custom locale setting. It allows users to specify different endpoints based on their country of residence.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/advanced.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntrading = betfairlightweight.APIClient(\n    \"username\", \n    \"password\", \n    app_key=\"app_key\", \n    locale=\"italy\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Session Object with betfairlightweight APIClient\nDESCRIPTION: This example shows how to pass a custom session object to the betfairlightweight APIClient, allowing for more control over the HTTP requests made to the Betfair API.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/advanced.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsession = requests.session()\ntrading = betfairlightweight.APIClient(\n    \"username\", \n    \"password\", \n    app_key=\"app_key\", \n    session=session,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Session for Individual Betfair API Requests\nDESCRIPTION: This snippet demonstrates how to use a custom session object for individual API requests, providing flexibility in managing HTTP sessions on a per-request basis.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/advanced.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_event_types(\n    filter=filters.market_filter(\n        text_query='Horse Racing'\n    ),\n    session=session,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Data and JSON Response from Betfair API\nDESCRIPTION: This code shows how to access the raw data and JSON response from a Betfair API request using the betfairlightweight library. It demonstrates accessing the _data attribute and using the json() method.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/advanced.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse[0]._data\n{'eventType': {'id': '7', 'name': 'Horse Racing'}, 'marketCount': 328}\n\nresponse[0].json()\n{\"eventType\":{\"id\":\"7\",\"name\":\"Horse Racing\"},\"marketCount\":328}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timing Information from Betfair API Response\nDESCRIPTION: This example demonstrates how to access timing-related information from a Betfair API response, including elapsed time, creation time, and update time.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/advanced.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse[0].elapsed_time\n0.14815688133239746\n\nresponse[0]._datetime_created\n2020-01-27 09:56:32.984387\n\nresponse[0]._datetime_updated\n2020-01-27 09:56:32.984387\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Requests Response Object in betfairlightweight\nDESCRIPTION: This snippet shows how to access the raw requests response object from a Betfair API call using betfairlightweight, which can be useful for debugging or accessing additional HTTP response information.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/advanced.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse[0]._response\n<Response [200]>\n```\n\n----------------------------------------\n\nTITLE: Initializing betfairlightweight APIClient in Lightweight Mode\nDESCRIPTION: This code demonstrates how to initialize the betfairlightweight APIClient in lightweight mode, which returns raw JSON responses instead of creating Python objects, potentially improving performance.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/advanced.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntrading = betfairlightweight.APIClient(\n    \"username\", \n    \"password\", \n    app_key=\"app_key\", \n    certs=\"/certs\", \n    lightweight=True,\n)\ntrading.login()\n{'sessionToken': 'dfgrtegreg===rgrgr', 'loginStatus': 'SUCCESS'}\n```\n\n----------------------------------------\n\nTITLE: Using Lightweight Mode for Individual Betfair API Requests\nDESCRIPTION: This example shows how to use lightweight mode for individual API requests in betfairlightweight, allowing for selective use of raw JSON responses on a per-request basis.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/advanced.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntrading.betting.list_event_types(\n    filter=filters.market_filter(\n        text_query='Horse Racing'\n    ),\n    lightweight=True,\n)\n[{'eventType': {'id': '7', 'name': 'Horse Racing'}, 'marketCount': 328}]\n```\n\n----------------------------------------\n\nTITLE: Configuring StreamListener for Improved Performance in betfairlightweight\nDESCRIPTION: This snippet demonstrates how to configure the StreamListener in betfairlightweight for improved performance, particularly useful in backtesting scenarios. It includes settings to ignore latency errors, use a generator instead of a queue, and disable clock updates.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/advanced.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlistener = betfairlightweight.StreamListener(\n    max_latency=None,  # ignore latency errors\n    output_queue=None,  # use generator rather than a queue (faster)\n    lightweight=True,  # lightweight mode is faster\n    update_clk=False,  # do not update clk on updates (not required when backtesting)\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Betfair API Session in Python\nDESCRIPTION: This snippet demonstrates how to check the session token, session expiry status, keep the session alive, and logout from the Betfair API.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/quickstart.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> trading.session_token\n'ergregergreger==regregreg'\n\n>>> trading.session_expired\nFalse\n\n>>> trading.keep_alive()\n<KeepAliveResource>\n\n>>> trading.logout()\n<LogoutResource>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event Types from Betfair API in Python\nDESCRIPTION: This snippet shows how to list all event types using the Betfair API client and process the results.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/quickstart.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> results = trading.betting.list_event_types()\n[<EventTypeResult>, <EventTypeResult>, ...\n\n>>> for i in results:\n        print(i.event_type.id, i.event_type.name, i.market_count)\n\n1 Soccer 2381\n2 Tennis 3402\n3 Golf 9\n4 Cricket 380\n5 Rugby Union 29\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Betfair API Client with Certificate Authentication\nDESCRIPTION: Creates an instance of the Betfair API client using certificate-based authentication, which is more secure for automated applications.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport betfairlightweight\n\ntrading = betfairlightweight.APIClient('username', 'password', app_key='app_key', certs='/certs')\n\ntrading.login()\n```\n\n----------------------------------------\n\nTITLE: Initializing Betfair API Client with Interactive Login\nDESCRIPTION: Creates an instance of the Betfair API client using interactive login without certificates, which is less secure but simpler to set up.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport betfairlightweight\n\ntrading = betfairlightweight.APIClient('username', 'password', app_key='app_key')\n\ntrading.login_interactive()\n```\n\n----------------------------------------\n\nTITLE: Installing Betfairlightweight via pip\nDESCRIPTION: Commands for installing the betfairlightweight package using pip, with an option to include C/Rust speed optimizations.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install betfairlightweight\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install betfairlightweight[speed]\n```\n\n----------------------------------------\n\nTITLE: Implementing NEMID Login for Danish Residents using betfairlightweight\nDESCRIPTION: This code snippet shows how to handle the login process for Danish residents who are restricted by NemID requirements. It replicates the login flow and sets the session token manually.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/docs/advanced.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport re\nimport betfairlightweight\n\ntrading = betfairlightweight.APIClient(\"username\", \"password\", app_key=\"app_key\")\n\nresp = trading.session.post(\n    url=trading.login_interactive.url,\n    data={\n        \"username\": trading.username,\n        \"password\": trading.password,\n        \"redirectMethod\": \"POST\",\n        \"product\": trading.app_key,\n        \"url\": \"https://www.betfair.com\",\n        \"submitForm\": True,\n    }\n)\nsession_token = re.findall(\n    \"ssoid=(.*?);\", resp.headers[\"Set-Cookie\"]\n)\ntrading.set_session_token(session_token[0])\n\nprint(trading.betting.list_event_types())\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Betfair Python Project\nDESCRIPTION: This code snippet lists the required Python packages and their versions for the Betfair project. It includes dependencies for HTTP requests, testing and linting, documentation generation, and project packaging.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests<2.33.0\n\n# Tests & Linting\nblack==24.8.0\ncoverage\n\n# Documentation\nmkdocs\nmkdocs-material\n\n# Packaging\nbuild\ntwine\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements\nDESCRIPTION: Lists required Python packages with pinned versions. Includes ciso8601 v2.3.1 for ISO8601 date parsing and orjson v3.10.7 for JSON handling.\nSOURCE: https://github.com/betcode-org/betfair/blob/master/requirements-speed.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nciso8601==2.3.1\norjson==3.10.7\n```"
  }
]