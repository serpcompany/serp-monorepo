[
  {
    "owner": "advplyr",
    "repo": "audiobookshelf",
    "content": "TITLE: Configuring NGINX Reverse Proxy for Audiobookshelf\nDESCRIPTION: NGINX server configuration block for setting up a reverse proxy for Audiobookshelf. Includes SSL configuration, websocket support, and increased client body size limit for large file uploads.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserver {\n   listen 443 ssl;\n   server_name <sub>.<domain>.<tld>;\n\n   access_log /var/log/nginx/audiobookshelf.access.log;\n   error_log /var/log/nginx/audiobookshelf.error.log;\n\n   ssl_certificate      /path/to/certificate;\n   ssl_certificate_key  /path/to/key;\n\n   location / {\n      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto  $scheme;\n      proxy_set_header Host               $http_host;\n      proxy_set_header Upgrade            $http_upgrade;\n      proxy_set_header Connection         \"upgrade\";\n\n      proxy_http_version                  1.1;\n\n      proxy_pass                          http://<URL_to_forward_to>;\n      proxy_redirect                      http:// https://;\n\n      # Prevent 413 Request Entity Too Large error\n      # by increasing the maximum allowed size of the client request body\n      # For example, set it to 10 GiB\n      client_max_body_size                10240M;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Reverse Proxy for Audiobookshelf\nDESCRIPTION: Apache VirtualHost configuration for setting up a reverse proxy for Audiobookshelf with SSL. Includes required module information and websocket support using mod_rewrite.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/readme.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<IfModule mod_ssl.c>\n<VirtualHost *:443>\n    ServerName <sub>.<domain>.<tld>\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    ProxyPreserveHost On\n    ProxyPass / http://localhost:<audiobookshelf_port>/\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://localhost:<audiobookshelf_port>/$1\" [P,L]\n\n    # unless you're doing something special this should be generated by a\n    # tool like certbot by let's encrypt\n    SSLCertificateFile /path/to/cert/file\n    SSLCertificateKeyFile /path/to/key/file\n</VirtualHost>\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Caddy Reverse Proxy Configuration for Audiobookshelf\nDESCRIPTION: Minimal Caddyfile configuration for setting up a reverse proxy to Audiobookshelf with gzip and zstd compression enabled. Simple subdomain configuration that forwards to local Audiobookshelf instance.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/readme.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsubdomain.domain.com {\n        encode gzip zstd\n        reverse_proxy <LOCAL_IP>:<PORT>\n}\n```\n\n----------------------------------------\n\nTITLE: HAProxy Configuration for Audiobookshelf\nDESCRIPTION: Generic HAProxy configuration for Audiobookshelf that sets up SSL with HTTP/2 support. Includes ACL rules to route traffic based on the 'audiobookshelf' subdomain to the appropriate backend.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/readme.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nglobal\n    # ... (your global settings go here)\n\ndefaults\n    mode http\n    # ... (your default settings go here)\n\nfrontend my_frontend\n    # Bind to port 443, enable SSL, and specify the certificate list file\n    bind :443 name :443 ssl crt-list /path/to/cert.crt_list alpn h2,http/1.1\n    mode http\n\n    # Define an ACL for subdomains starting with \"audiobookshelf\"\n    acl is_audiobookshelf hdr_beg(host) -i audiobookshelf\n\n    # Use the ACL to route traffic to audiobookshelf_backend if the condition is met,\n    # otherwise, use the default_backend\n    use_backend audiobookshelf_backend if is_audiobookshelf\n    default_backend default_backend\n\nbackend audiobookshelf_backend\n    mode http\n    # ... (backend settings for audiobookshelf go here)\n\n    # Define the server for the audiobookshelf backend\n    server audiobookshelf_server 127.0.0.99:13378\n\nbackend default_backend\n    mode http\n    # ... (default backend settings go here)\n\n    # Define the server for the default backend\n    server default_server 127.0.0.123:8081\n\n```\n\n----------------------------------------\n\nTITLE: Apache ProxyPass Configuration for Audiobookshelf (Apache >= 2.4.47)\nDESCRIPTION: Simplified Apache configuration using ProxyPass with websocket upgrade support for Apache versions 2.4.47 and newer, without requiring RewriteEngine directives.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/readme.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <Location /audiobookshelf>\n        ProxyPreserveHost on\n        ProxyPass http://localhost:<audiobookshelf_port>/audiobookshelf upgrade=websocket\n        ProxyPassReverse http://localhost:<audiobookshelf_port>/audiobookshelf\n    </Location>\n```\n\n----------------------------------------\n\nTITLE: Apache ACME Challenge Configuration for Let's Encrypt\nDESCRIPTION: Apache VirtualHost configuration that prevents proxying traffic for ACME challenge verification, allowing Let's Encrypt certificate issuance to work properly with Audiobookshelf.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/readme.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n<VirtualHost *:443>\n    # ...\n\n    # create the directory structure  /.well-known/acme-challenges\n    # within DocumentRoot and give the HTTP user recursive write\n    # access to it.\n    DocumentRoot /path/to/local/directory\n\n    ProxyPreserveHost On\n    ProxyPass /.well-known !\n    ProxyPass / http://localhost:<audiobookshelf_port>/\n\n    # ...\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Implementing Up and Down Migration Functions with Sequelize in JavaScript\nDESCRIPTION: A template example showing how to structure a migration script with both up (apply changes) and down (revert changes) functions. It demonstrates the expected parameter structure with queryInterface and logger objects, and shows proper logging implementation.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/server/migrations/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function up({ context: { queryInterface, logger } }) {\n  // Upwards migration script\n  logger.info('migrating ...');\n  ...\n}\n\nasync function down({ context: { queryInterface, logger } }) {\n  // Downward migration script\n  logger.info('reverting ...');\n  ...\n}\n\nmodule.exports = {up, down}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Audiobookshelf Development Environment\nDESCRIPTION: Shell commands for setting up the Audiobookshelf development environment by installing dependencies and building the client application after manual environment setup.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/readme.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm ci\ncd client\nnpm ci\nnpm run generate\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Bundling OpenAPI Specifications and Generating Documentation for Audiobookshelf\nDESCRIPTION: This command performs three operations in sequence: bundling the OpenAPI YAML files into a single file, converting the bundled YAML to JSON format, and generating HTML documentation from the JSON specification.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nredocly bundle root.yaml > bundled.yaml && \\\nyq -p yaml -o json bundled.yaml > openapi.json && \\\nredocly build-docs openapi.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Restrictions in robots.txt\nDESCRIPTION: This robots.txt configuration instructs all web crawlers and search engine bots to not index or crawl any part of the website. It uses the wildcard User-Agent to target all bots and the root path disallow directive to block the entire site.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/client/static/robots.txt#2025-04-18_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-Agent: * \nDisallow: / \n```\n\n----------------------------------------\n\nTITLE: Installing Development Software on MacOS using Homebrew\nDESCRIPTION: Shell command to install Docker and Visual Studio Code on MacOS using the Homebrew package manager.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/readme.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbrew install --cask docker visual-studio-code\n```\n\n----------------------------------------\n\nTITLE: Installing Development Software on Linux using Snap\nDESCRIPTION: Shell commands to install Docker and Visual Studio Code on Linux using the Snap package manager, with VS Code installed with classic confinement.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/readme.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo snap install docker; \\\nsudo snap install code --classic\n```\n\n----------------------------------------\n\nTITLE: Installing Development Software on Windows using Winget\nDESCRIPTION: PowerShell commands to install Docker Desktop and Visual Studio Code on Windows using the winget package manager.\nSOURCE: https://github.com/advplyr/audiobookshelf/blob/master/readme.md#2025-04-18_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install -e --id Docker.DockerDesktop; `\nwinget install -e --id Microsoft.VisualStudioCode\n```"
  }
]