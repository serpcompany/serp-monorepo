[
  {
    "owner": "ciscodevnet",
    "repo": "terraform-provider-iosxe",
    "content": "TITLE: Configuring BGP Neighbor in Cisco IOS-XE with Terraform\nDESCRIPTION: Example configuration for setting up a BGP neighbor with various parameters including ASN, remote AS, timers, BFD settings, and security options. This example demonstrates comprehensive BGP neighbor configuration with common attributes.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_neighbor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp_neighbor\" \"example\" {\n  asn                                       = \"65000\"\n  ip                                        = \"3.3.3.3\"\n  remote_as                                 = \"65000\"\n  description                               = \"BGP Neighbor Description\"\n  shutdown                                  = false\n  cluster_id                                = \"1234\"\n  version                                   = 4\n  disable_connected_check                   = false\n  fall_over_default_enable                  = false\n  fall_over_default_route_map               = \"RMAP\"\n  fall_over_bfd                             = true\n  fall_over_bfd_single_hop                  = true\n  fall_over_bfd_check_control_plane_failure = true\n  fall_over_bfd_strict_mode                 = true\n  fall_over_maximum_metric_route_map        = \"RMAP\"\n  log_neighbor_changes                      = true\n  password_type                             = 1\n  password                                  = \"test1234\"\n  timers_keepalive_interval                 = 655\n  timers_holdtime                           = 866\n  timers_minimum_neighbor_hold              = 222\n  update_source_loopback                    = \"100\"\n}\n```\n\n----------------------------------------\n\nTITLE: IOS-XE Provider Version 0.4.0 Release Notes\nDESCRIPTION: Major release adding several new resources and data sources including BFD templates, RADIUS, TACACS, policy maps, and IPv6 support. Contains breaking changes related to attribute renaming.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.0\n\n- Fix issue when using `tunnel_destination_ipv4` or `tunnel_mode_ipsec_ipv4` attributes of `iosxe_interface_tunnel` resource\n- Add `iosxe_static_route_vrf` resource and data source\n[...]\n```\n\n----------------------------------------\n\nTITLE: Initializing IOS-XE Provider in Terraform\nDESCRIPTION: Example configuration for setting up the IOS-XE provider in Terraform with basic authentication details.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"iosxe\" {\n  username = \"admin\"\n  password = \"password\"\n  url      = \"https://10.1.1.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple IOS-XE Devices with Single Provider and Device Attribute in Terraform\nDESCRIPTION: This snippet demonstrates an alternative approach for managing multiple IOS-XE devices using a single provider configuration with a 'devices' attribute. It utilizes a local variable to define router details and creates resources dynamically using 'for_each'. This method allows for more scalable and flexible device management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/guides/manage_multiple_devices.md#2025-04-21_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nlocals {\n  routers = [\n    {\n      name = \"ROUTER-1\"\n      url  = \"https://10.1.1.1\"\n    },\n    {\n      name = \"ROUTER-2\"\n      url  = \"https://10.1.1.2\"\n    },\n  ]\n}\n\nprovider \"iosxe\" {\n  username = \"admin\"\n  password = \"Cisco123\"\n  devices  = local.routers\n}\n\nresource \"iosxe_restconf\" \"hostname\" {\n  for_each   = toset([for router in local.routers : router.name])\n  device     = each.key\n  path       = \"openconfig-system:system/config\"\n  attributes = {\n    hostname = each.key\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ethernet Interface with Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the 'iosxe_interface_ethernet' resource to configure various aspects of an Ethernet interface, including IP addressing, IPv6 settings, ARP timeout, spanning tree, and service policies. It showcases the wide range of configurable options available for Ethernet interfaces on IOS XE devices.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_ethernet.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_ethernet\" \"example\" {\n  type                           = \"GigabitEthernet\"\n  name                           = \"3\"\n  bandwidth                      = 1000000\n  description                    = \"My Interface Description\"\n  shutdown                       = false\n  ip_proxy_arp                   = false\n  ip_redirects                   = false\n  ip_unreachables                = false\n  ipv4_address                   = \"15.1.1.1\"\n  ipv4_address_mask              = \"255.255.255.252\"\n  ip_dhcp_relay_source_interface = \"Loopback100\"\n  ip_access_group_in             = \"1\"\n  ip_access_group_in_enable      = true\n  ip_access_group_out            = \"1\"\n  ip_access_group_out_enable     = true\n  helper_addresses = [\n    {\n      address = \"10.10.10.10\"\n      global  = false\n      vrf     = \"VRF1\"\n    }\n  ]\n  ipv6_enable             = true\n  ipv6_mtu                = 1300\n  ipv6_nd_ra_suppress_all = true\n  ipv6_address_dhcp       = true\n  ipv6_link_local_addresses = [\n    {\n      address    = \"fe80::9656:d028:8652:66b6\"\n      link_local = true\n    }\n  ]\n  ipv6_addresses = [\n    {\n      prefix = \"2001:DB8::/32\"\n      eui_64 = true\n    }\n  ]\n  arp_timeout             = 300\n  spanning_tree_link_type = \"point-to-point\"\n  negotiation_auto        = false\n  service_policy_input    = \"POLICY1\"\n  service_policy_output   = \"POLICY1\"\n  ip_flow_monitors = [\n    {\n      name      = \"MON1\"\n      direction = \"input\"\n    }\n  ]\n  load_interval                    = 30\n  snmp_trap_link_status            = true\n  logging_event_link_status_enable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IOSXE Crypto IPSec Profile with Terraform\nDESCRIPTION: Example resource configuration for creating an IPSec profile with transform sets and IKEv2 profile settings. Demonstrates setting up a VPN profile named 'vpn200' with transform set 'TS1' and IKEv2 profile 'vpn300'.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ipsec_profile.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_crypto_ipsec_profile\" \"example\" {\n  name                                                              = \"vpn200\"\n  set_transform_set                                                 = [\"TS1\"]\n  set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile = \"vpn300\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VLAN Interface with Terraform in IOS-XE\nDESCRIPTION: Example demonstrating how to configure a VLAN interface with various networking parameters including IPv4/IPv6 settings, BFD configuration, and helper addresses using Terraform.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_vlan.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_vlan\" \"example\" {\n  name                           = 10\n  autostate                      = false\n  description                    = \"My Interface Description\"\n  shutdown                       = false\n  ip_proxy_arp                   = false\n  ip_redirects                   = false\n  ip_unreachables                = false\n  vrf_forwarding                 = \"VRF1\"\n  ipv4_address                   = \"10.1.1.1\"\n  ipv4_address_mask              = \"255.255.255.0\"\n  ip_dhcp_relay_source_interface = \"Loopback100\"\n  ip_access_group_in             = \"1\"\n  ip_access_group_in_enable      = true\n  ip_access_group_out            = \"1\"\n  ip_access_group_out_enable     = true\n  helper_addresses = [\n    {\n      address = \"10.10.10.10\"\n      global  = false\n      vrf     = \"VRF1\"\n    }\n  ]\n  bfd_template            = \"bfd_template1\"\n  bfd_enable              = true\n  bfd_local_address       = \"1.2.3.4\"\n  ipv6_enable             = true\n  ipv6_mtu                = 1300\n  ipv6_nd_ra_suppress_all = true\n  ipv6_address_dhcp       = true\n  ipv6_link_local_addresses = [\n    {\n      address    = \"fe80::9656:d028:8652:66bb\"\n      link_local = true\n    }\n  ]\n  ipv6_addresses = [\n    {\n      prefix = \"2006:DB8::/32\"\n      eui_64 = true\n    }\n  ]\n  load_interval = 30\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OSPF Settings with Terraform\nDESCRIPTION: Example of configuring OSPF settings including process ID, BFD, default information origination, neighbors, networks, and areas. Shows comprehensive OSPF configuration with various optional parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/ospf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_ospf\" \"example\" {\n  process_id                           = 1\n  bfd_all_interfaces                   = true\n  default_information_originate        = true\n  default_information_originate_always = true\n  default_metric                       = 21\n  distance                             = 120\n  domain_tag                           = 10\n  neighbors = [\n    {\n      ip       = \"2.2.2.2\"\n      priority = 10\n      cost     = 100\n    }\n  ]\n  networks = [\n    {\n      ip       = \"3.3.3.0\"\n      wildcard = \"0.0.0.255\"\n      area     = \"0\"\n    }\n  ]\n  priority  = 100\n  router_id = \"1.2.3.4\"\n  shutdown  = false\n  summary_addresses = [\n    {\n      ip   = \"3.3.3.0\"\n      mask = \"255.255.255.0\"\n    }\n  ]\n  areas = [\n    {\n      area_id                                        = \"5\"\n      authentication_message_digest                  = true\n      nssa                                           = true\n      nssa_default_information_originate             = true\n      nssa_default_information_originate_metric      = 100\n      nssa_default_information_originate_metric_type = 1\n      nssa_no_summary                                = true\n      nssa_no_redistribution                         = true\n    }\n  ]\n  passive_interface_default = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOS-XE Device for RESTCONF Access\nDESCRIPTION: Basic IOS-XE device configuration required to enable RESTCONF API access.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: cisco\nCODE:\n```\nip http secure-server\nrestconf\n```\n\n----------------------------------------\n\nTITLE: Creating IKEv2 Keyring Resource in Terraform\nDESCRIPTION: Demonstrates how to configure an IKEv2 keyring with peer settings including encryption, pre-shared keys, and identity parameters. The example creates a keyring named 'keyring1' with a single peer configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ikev2_keyring.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_crypto_ikev2_keyring\" \"example\" {\n  name = \"keyring1\"\n  peers = [\n    {\n      name                             = \"peer1\"\n      description                      = \"My description\"\n      ipv4_address                     = \"1.2.3.4\"\n      ipv4_mask                        = \"255.255.255.248\"\n      identity_key_id                  = \"key1\"\n      pre_shared_key_local_encryption  = \"6\"\n      pre_shared_key_local             = \"cisco123\"\n      pre_shared_key_remote_encryption = \"6\"\n      pre_shared_key_remote            = \"cisco123\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BGP IPv4 Unicast VRF Neighbor in IOS-XE using Terraform\nDESCRIPTION: Example configuration for setting up a BGP IPv4 Unicast VRF Neighbor with various parameters including ASN, VRF, timers, BFD settings, and route maps. This example demonstrates the complete configuration options available for the resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_ipv4_unicast_vrf_neighbor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp_ipv4_unicast_vrf_neighbor\" \"example\" {\n  asn                                       = \"65000\"\n  vrf                                       = \"VRF1\"\n  ip                                        = \"3.3.3.3\"\n  remote_as                                 = \"65000\"\n  description                               = \"BGP Neighbor Description\"\n  shutdown                                  = false\n  log_neighbor_changes_disable              = true\n  password_type                             = 1\n  password                                  = \"LINE\"\n  timers_keepalive_interval                 = 30\n  timers_holdtime                           = 40\n  timers_minimum_neighbor_hold              = 30\n  version                                   = 4\n  fall_over_default_route_map               = \"RMAP\"\n  fall_over_bfd                             = true\n  fall_over_bfd_single_hop                  = true\n  fall_over_bfd_check_control_plane_failure = true\n  fall_over_bfd_strict_mode                 = true\n  fall_over_maximum_metric_route_map        = \"ROUTEMAP\"\n  update_source_loopback                    = \"100\"\n  activate                                  = true\n  send_community                            = \"both\"\n  route_reflector_client                    = false\n  soft_reconfiguration                      = \"inbound\"\n  default_originate                         = true\n  default_originate_route_map               = \"RM1\"\n  route_maps = [\n    {\n      in_out         = \"in\"\n      route_map_name = \"RM1\"\n    }\n  ]\n  ha_mode_graceful_restart = true\n  next_hop_self            = true\n  next_hop_self_all        = true\n  advertisement_interval   = 300\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple IOS-XE Devices Using Provider Aliases in Terraform\nDESCRIPTION: This snippet shows how to create multiple provider configurations for different IOS-XE devices using aliases. It defines two providers and creates corresponding resources for each router. This method allows for device-specific configurations but lacks dynamic scalability.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/guides/manage_multiple_devices.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"iosxe\" {\n  alias    = \"ROUTER-1\"\n  username = \"admin\"\n  password = \"Cisco123\"\n  url      = \"https://10.1.1.1\"\n}\n\nprovider \"iosxe\" {\n  alias    = \"ROUTER-2\"\n  username = \"admin\"\n  password = \"Cisco123\"\n  url      = \"https://10.1.1.2\"\n}\n\nresource \"iosxe_restconf\" \"ROUTER-1\" {\n  provider   = iosxe.ROUTER-1\n  path       = \"openconfig-system:system/config\"\n  attributes = {\n    hostname = \"ROUTER-1\"\n  }\n}\n\nresource \"iosxe_restconf\" \"ROUTER-2\" {\n  provider   = iosxe.ROUTER-2\n  path       = \"openconfig-system:system/config\"\n  attributes = {\n    hostname = \"ROUTER-2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOS-XE Template Resource with Terraform\nDESCRIPTION: Complete example of configuring a template resource on IOS-XE devices. Demonstrates configuration of interface settings including dot1x, switchport, access session, spanning tree, storm control, and other security features. The template provides a reusable way to apply consistent configuration across multiple interfaces.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/template.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_template\" \"example\" {\n  template_name                                  = \"TEMP1\"\n  dot1x_pae                                      = \"both\"\n  dot1x_max_reauth_req                           = 3\n  dot1x_max_req                                  = 3\n  dot1x_timeout_tx_period                        = 2\n  service_policy_type_control_subscriber         = \"dot1x_policy\"\n  service_policy_input                           = \"SP1\"\n  service_policy_output                          = \"SP2\"\n  switchport_mode_trunk                          = true\n  switchport_mode_access                         = false\n  switchport_nonegotiate                         = false\n  switchport_block_unicast                       = false\n  switchport_port_security                       = true\n  switchport_port_security_aging_static          = false\n  switchport_port_security_aging_time            = 100\n  switchport_port_security_aging_type            = true\n  switchport_port_security_aging_type_inactivity = true\n  switchport_port_security_maximum_range = [\n    {\n      range       = 100\n      vlan        = true\n      vlan_access = true\n    }\n  ]\n  switchport_port_security_violation_protect               = false\n  switchport_port_security_violation_restrict              = false\n  switchport_port_security_violation_shutdown              = false\n  switchport_access_vlan                                   = 200\n  switchport_voice_vlan                                    = 201\n  switchport_private_vlan_host_association_primary_range   = 301\n  switchport_private_vlan_host_association_secondary_range = 302\n  switchport_trunk_allowed_vlans                           = \"500-599\"\n  switchport_trunk_native_vlan_vlan_id                     = 10\n  mab                                                      = true\n  mab_eap                                                  = true\n  access_session_closed                                    = true\n  access_session_monitor                                   = true\n  access_session_port_control                              = \"auto\"\n  access_session_control_direction                         = \"both\"\n  access_session_host_mode                                 = \"single-host\"\n  access_session_interface_template_sticky                 = true\n  access_session_interface_template_sticky_timer           = 100\n  authentication_periodic                                  = true\n  authentication_timer_reauthenticate_server               = true\n  spanning_tree_bpduguard_enable                           = true\n  spanning_tree_portfast                                   = true\n  spanning_tree_portfast_disable                           = false\n  spanning_tree_portfast_edge                              = false\n  spanning_tree_portfast_network                           = false\n  storm_control_broadcast_level_pps_threshold              = \"10\"\n  storm_control_broadcast_level_bps_threshold              = 10\n  storm_control_broadcast_level_threshold                  = 10\n  storm_control_multicast_level_pps_threshold              = \"10\"\n  storm_control_multicast_level_bps_threshold              = 10000\n  storm_control_multicast_level_threshold                  = 10\n  storm_control_action_shutdown                            = true\n  storm_control_action_trap                                = true\n  load_interval                                            = 30\n  ip_dhcp_snooping_limit_rate                              = 10\n  ip_dhcp_snooping_trust                                   = true\n  ip_access_group = [\n    {\n      direction   = \"in\"\n      access_list = \"ACL1\"\n    }\n  ]\n  subscriber_aging_probe           = true\n  device_tracking                  = true\n  device_tracking_vlan_range       = \"100-199\"\n  cts_manual                       = true\n  cts_manual_policy_static_sgt     = 100\n  cts_manual_policy_static_trusted = false\n  cts_manual_propagate_sgt         = false\n  cts_role_based_enforcement       = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AAA Accounting in Terraform for IOS-XE\nDESCRIPTION: Example configuration for setting up AAA accounting on a Cisco IOS-XE device. Includes settings for periodic updates, identity groups, exec sessions, and network accounting with multiple server groups.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/aaa_accounting.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_aaa_accounting\" \"example\" {\n  update_newinfo_periodic = 2880\n  identities = [\n    {\n      name                       = \"test\"\n      start_stop_broadcast       = false\n      start_stop_group_broadcast = false\n      start_stop_group_logger    = false\n      start_stop_group1          = \"GROUP1\"\n      start_stop_group2          = \"GROUP2\"\n      start_stop_group3          = \"GROUP3\"\n      start_stop_group4          = \"GROUP4\"\n    }\n  ]\n  identity_default_start_stop_group1 = \"RADIUS-GROUP\"\n  identity_default_start_stop_group2 = \"RADIUS-GROUP2\"\n  identity_default_start_stop_group3 = \"RADIUS-GROUP3\"\n  identity_default_start_stop_group4 = \"RADIUS-GROUP4\"\n  execs = [\n    {\n      name              = \"default\"\n      start_stop_group1 = \"T-Group\"\n    }\n  ]\n  networks = [\n    {\n      id                = \"network1\"\n      start_stop_group1 = \"radius\"\n      start_stop_group2 = \"tacacs+\"\n    }\n  ]\n  system_guarantee_first = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SNMP Server Settings with Terraform for IOS-XE\nDESCRIPTION: Complete Terraform configuration for managing SNMP server settings on Cisco IOS-XE devices. Includes configuration for chassis ID, contact information, trap settings, community strings, contexts, and views. Demonstrates comprehensive SNMP configuration including security settings, notifications, and access control.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/snmp_server.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_snmp_server\" \"example\" {\n  chassis_id                       = \"R1\"\n  contact                          = \"Contact1\"\n  ifindex_persist                  = true\n  location                         = \"Location1\"\n  packetsize                       = 2000\n  queue_length                     = 100\n  enable_logging_getop             = true\n  enable_logging_setop             = true\n  enable_traps                     = true\n  enable_traps_snmp_authentication = true\n  enable_traps_snmp_coldstart      = true\n  enable_traps_snmp_linkdown       = true\n  enable_traps_snmp_linkup         = true\n  enable_traps_snmp_warmstart      = true\n  hosts = [\n    {\n      ip_address        = \"11.1.1.1\"\n      community_or_user = \"08116C5D1A0E550518\"\n      version           = \"2c\"\n      encryption        = \"7\"\n    }\n  ]\n  system_shutdown                           = true\n  enable_traps_flowmon                      = true\n  enable_traps_entity_perf_throughput_notif = true\n  enable_traps_call_home_message_send_fail  = true\n  enable_traps_call_home_server_fail        = true\n  enable_traps_tty                          = true\n  enable_traps_ospfv3_config_state_change   = true\n  enable_traps_ospfv3_config_errors         = true\n  enable_traps_ospf_config_retransmit       = true\n  enable_traps_ospf_config_lsa              = true\n  enable_traps_ospf_nssa_trans_change       = true\n  enable_traps_ospf_shamlink_interface      = true\n  enable_traps_ospf_shamlink_neighbor       = true\n  enable_traps_ospf_errors_enable           = true\n  enable_traps_ospf_retransmit_enable       = true\n  enable_traps_ospf_lsa_enable              = true\n  enable_traps_eigrp                        = true\n  enable_traps_auth_framework_sec_violation = true\n  enable_traps_vtp                          = true\n  enable_traps_vlancreate                   = true\n  enable_traps_vlandelete                   = true\n  enable_traps_port_security                = true\n  enable_traps_smart_license                = true\n  enable_traps_cpu_threshold                = true\n  enable_traps_memory_bufferpeak            = true\n  enable_traps_fru_ctrl                     = true\n  enable_traps_flash_insertion              = true\n  enable_traps_flash_removal                = true\n  enable_traps_flash_lowspace               = true\n  enable_traps_entity                       = true\n  enable_traps_pw_vc                        = true\n  enable_traps_ipsla                        = true\n  enable_traps_bfd                          = true\n  enable_traps_ike_policy_add               = true\n  enable_traps_ike_policy_delete            = true\n  enable_traps_ike_tunnel_start             = true\n  enable_traps_ike_tunnel_stop              = true\n  enable_traps_ipsec_cryptomap_add          = true\n  enable_traps_ipsec_cryptomap_attach       = true\n  enable_traps_ipsec_cryptomap_delete       = true\n  enable_traps_ipsec_cryptomap_detach       = true\n  enable_traps_ipsec_tunnel_start           = true\n  enable_traps_ipsec_tunnel_stop            = true\n  enable_traps_ipsec_too_many_sas           = true\n  enable_traps_config_copy                  = true\n  enable_traps_config                       = true\n  enable_traps_config_ctid                  = true\n  enable_traps_dhcp                         = true\n  enable_traps_event_manager                = true\n  enable_traps_ipmulticast                  = true\n  enable_traps_msdp                         = true\n  enable_traps_ospf_config_state_change     = true\n  enable_traps_ospf_config_errors           = true\n  enable_traps_pim_invalid_pim_message      = true\n  enable_traps_pim_neighbor_change          = true\n  enable_traps_pim_rp_mapping_change        = true\n  enable_traps_syslog                       = true\n  enable_traps_rf                           = true\n  enable_traps_transceiver_all              = true\n  enable_traps_bulkstat_collection          = true\n  enable_traps_bulkstat_transfer            = true\n  enable_traps_vrfmib_vrf_up                = true\n  enable_traps_vrfmib_vrf_down              = true\n  enable_traps_vrfmib_vnet_trunk_up         = true\n  enable_traps_vrfmib_vnet_trunk_down       = true\n  source_interface_informs_loopback         = 1\n  source_interface_traps_loopback           = 1\n  trap_source_loopback                      = 1\n  snmp_communities = [\n    {\n      name             = \"COM1\"\n      view             = \"VIEW1\"\n      permission       = \"ro\"\n      ipv6             = \"ACL1\"\n      access_list_name = \"1\"\n    }\n  ]\n  contexts = [\n    {\n      name = \"CON1\"\n    }\n  ]\n  views = [\n    {\n      name    = \"VIEW1\"\n      mib     = \"interfaces\"\n      inc_exl = \"included\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VRF Configuration with Terraform\nDESCRIPTION: Example of creating a VRF configuration using the iosxe_vrf resource. This configuration sets up a VRF named VRF22 with IPv4/IPv6 address families, route distinguisher, VPN ID, and various route target import/export settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_vrf\" \"example\" {\n  name                = \"VRF22\"\n  description         = \"VRF22 description\"\n  rd                  = \"22:22\"\n  address_family_ipv4 = true\n  address_family_ipv6 = true\n  vpn_id              = \"22:22\"\n  route_target_import = [\n    {\n      value     = \"22:22\"\n      stitching = false\n    }\n  ]\n  route_target_export = [\n    {\n      value     = \"22:22\"\n      stitching = false\n    }\n  ]\n  ipv4_route_target_import = [\n    {\n      value = \"22:22\"\n    }\n  ]\n  ipv4_route_target_import_stitching = [\n    {\n      value = \"22:22\"\n    }\n  ]\n  ipv4_route_target_export = [\n    {\n      value = \"22:22\"\n    }\n  ]\n  ipv4_route_target_export_stitching = [\n    {\n      value = \"22:22\"\n    }\n  ]\n  ipv6_route_target_import = [\n    {\n      value = \"22:22\"\n    }\n  ]\n  ipv6_route_target_import_stitching = [\n    {\n      value = \"22:22\"\n    }\n  ]\n  ipv6_route_target_export = [\n    {\n      value = \"22:22\"\n    }\n  ]\n  ipv6_route_target_export_stitching = [\n    {\n      value = \"22:22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Crypto IKEv2 Policy Resource in Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to create a Crypto IKEv2 Policy resource in Terraform. It sets the policy name, local IP address for matching, enables matching for any FVRF, and specifies a proposal.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ikev2_policy.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_crypto_ikev2_policy\" \"example\" {\n  name                   = \"policy1\"\n  match_address_local_ip = [\"1.2.3.4\"]\n  match_fvrf_any         = true\n  proposals = [\n    {\n      proposals = \"proposal123\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NTP Settings with Terraform\nDESCRIPTION: Example configuration showing complete NTP setup including authentication, server/peer configurations, VRF settings, and trusted keys. Demonstrates setting up NTP authentication, configuring multiple servers and peers across VRFs, and defining trusted keys.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/ntp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_ntp\" \"example\" {\n  authenticate                = true\n  logging                     = false\n  access_group_peer_acl       = \"SACL1\"\n  access_group_query_only_acl = \"SACL1\"\n  access_group_serve_acl      = \"SACL1\"\n  access_group_serve_only_acl = \"SACL1\"\n  authentication_keys = [\n    {\n      number          = 1\n      md5             = \"060506324F41584B564347\"\n      encryption_type = 7\n    }\n  ]\n  master               = true\n  master_stratum       = 5\n  passive              = false\n  update_calendar      = false\n  trap_source_loopback = 1\n  servers = [\n    {\n      ip_address = \"1.2.3.4\"\n      source     = \"Loopback1\"\n      key        = 1\n      prefer     = true\n      version    = 2\n    }\n  ]\n  server_vrfs = [\n    {\n      name = \"VRF1\"\n      servers = [\n        {\n          ip_address = \"3.4.5.6\"\n          key        = 1\n          prefer     = true\n          version    = 2\n        }\n      ]\n    }\n  ]\n  peers = [\n    {\n      ip_address = \"5.2.3.4\"\n      source     = \"Loopback1\"\n      key        = 1\n      prefer     = true\n      version    = 2\n    }\n  ]\n  peer_vrfs = [\n    {\n      name = \"VRF1\"\n      peers = [\n        {\n          ip_address = \"5.4.5.6\"\n          key        = 1\n          prefer     = true\n          version    = 2\n        }\n      ]\n    }\n  ]\n  trusted_keys = [\n    {\n      number = 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BGP IPv4 Unicast Neighbor in Terraform\nDESCRIPTION: Example Terraform configuration for setting up a BGP IPv4 Unicast Neighbor. Demonstrates configuration of ASN, IP address, community settings, route reflection, soft reconfiguration, default origination, and route maps.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_ipv4_unicast_neighbor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp_ipv4_unicast_neighbor\" \"example\" {\n  asn                         = \"65000\"\n  ip                          = \"3.3.3.3\"\n  activate                    = true\n  send_community              = \"both\"\n  route_reflector_client      = false\n  soft_reconfiguration        = \"inbound\"\n  default_originate           = true\n  default_originate_route_map = \"RM1\"\n  route_maps = [\n    {\n      in_out         = \"in\"\n      route_map_name = \"RM1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOSXE System Settings with Terraform\nDESCRIPTION: Example showing how to configure basic system settings including hostname, IP routing features, domain settings, and login parameters using the iosxe_system resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/system.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_system\" \"example\" {\n  hostname                    = \"ROUTER-1\"\n  ip_bgp_community_new_format = true\n  ipv6_unicast_routing        = true\n  ip_source_route             = false\n  ip_domain_lookup            = false\n  ip_domain_name              = \"test.com\"\n  login_delay                 = 10\n  login_on_failure            = true\n  login_on_failure_log        = true\n  login_on_success            = true\n  login_on_success_log        = true\n  multicast_routing_vrfs = [\n    {\n      vrf = \"VRF1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BGP L2VPN EVPN Neighbor using Terraform in Cisco IOS-XE\nDESCRIPTION: This Terraform resource configures a BGP L2VPN EVPN Neighbor. It sets the ASN, IP address, activates the address family, configures send community, route reflector client, and soft reconfiguration options.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_l2vpn_evpn_neighbor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp_l2vpn_evpn_neighbor\" \"example\" {\n  asn                    = \"65000\"\n  ip                     = \"3.3.3.3\"\n  activate               = true\n  send_community         = \"both\"\n  route_reflector_client = false\n  soft_reconfiguration   = \"inbound\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Route VRF in IOS-XE\nDESCRIPTION: Terraform configuration for creating a static route in a VRF. Demonstrates setting up a route with specific prefix, mask, and next hop parameters including metric, name, tag, and permanence options.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/static_route_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_static_route_vrf\" \"example\" {\n  vrf = \"VRF1\"\n  routes = [\n    {\n      prefix = \"6.6.6.6\"\n      mask   = \"255.255.255.255\"\n      next_hops = [\n        {\n          next_hop  = \"7.7.7.7\"\n          metric    = 10\n          global    = false\n          name      = \"Route1\"\n          permanent = true\n          tag       = 100\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BGP IPv6 Unicast Neighbor in Terraform\nDESCRIPTION: Example configuration for setting up a BGP IPv6 Unicast Neighbor with various parameters including ASN, IP address, community settings, and route maps. Shows how to configure route reflection, soft reconfiguration, and default route origination.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_ipv6_unicast_neighbor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp_ipv6_unicast_neighbor\" \"example\" {\n  asn                         = \"65000\"\n  ip                          = \"3.3.3.3\"\n  activate                    = true\n  send_community              = \"both\"\n  route_reflector_client      = false\n  soft_reconfiguration        = \"inbound\"\n  default_originate           = true\n  default_originate_route_map = \"RM1\"\n  route_maps = [\n    {\n      in_out         = \"in\"\n      route_map_name = \"RM1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended ACL in IOS-XE using Terraform\nDESCRIPTION: Example configuration of an extended access list with detailed ACE rule parameters including protocol, ports, TCP flags, and logging options. The resource creates an access list named 'EACL1' with specific permit rules for TCP traffic.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/access_list_extended.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_access_list_extended\" \"example\" {\n  name = \"EACL1\"\n  entries = [\n    {\n      sequence                    = 10\n      remark                      = \"Description\"\n      ace_rule_action             = \"permit\"\n      ace_rule_protocol           = \"tcp\"\n      source_prefix               = \"10.0.0.0\"\n      source_prefix_mask          = \"0.0.0.255\"\n      source_port_equal           = \"1000\"\n      destination_host            = \"10.1.1.1\"\n      destination_port_range_from = \"1000\"\n      destination_port_range_to   = \"2000\"\n      ack                         = true\n      fin                         = true\n      psh                         = true\n      rst                         = true\n      syn                         = true\n      urg                         = true\n      dscp                        = \"46\"\n      log                         = true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Crypto IKEv2 Settings with Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_crypto_ikev2 resource to configure NAT keepalive, Dead Peer Detection (DPD), and DPD query settings for IKEv2 in Cisco IOS XE.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ikev2.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_crypto_ikev2\" \"example\" {\n  nat_keepalive      = 20\n  dpd                = 10\n  dpd_retry_interval = 5\n  dpd_query          = \"periodic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BFD Template Single Hop in Terraform for Cisco IOS-XE\nDESCRIPTION: This Terraform resource configures a BFD Template Single Hop on a Cisco IOS-XE device. It sets various parameters including authentication, intervals, echo, and dampening settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bfd_template_single_hop.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bfd_template_single_hop\" \"example\" {\n  name                             = \"SH-TEMPLATE-1\"\n  authentication_md5_keychain      = \"KEYC1\"\n  interval_milliseconds_min_tx     = 200\n  interval_milliseconds_min_rx     = 200\n  interval_milliseconds_multiplier = 4\n  echo                             = true\n  dampening_half_time              = 30\n  dampening_unsuppress_time        = 30\n  dampening_suppress_time          = 100\n  dampening_max_suppressing_time   = 60\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EVPN Instance using Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to configure an EVPN instance using the iosxe_evpn_instance resource. It sets various parameters such as instance number, replication types, encapsulation, route targets, and IP local learning options.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/evpn_instance.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_evpn_instance\" \"example\" {\n  evpn_instance_num                    = 10\n  vlan_based_replication_type_ingress  = false\n  vlan_based_replication_type_static   = true\n  vlan_based_replication_type_p2mp     = false\n  vlan_based_replication_type_mp2mp    = false\n  vlan_based_encapsulation             = \"vxlan\"\n  vlan_based_auto_route_target         = false\n  vlan_based_rd                        = \"10:10\"\n  vlan_based_route_target_import       = \"10:10\"\n  vlan_based_route_target_export       = \"10:10\"\n  vlan_based_ip_local_learning_disable = false\n  vlan_based_ip_local_learning_enable  = true\n  vlan_based_default_gateway_advertise = \"enable\"\n  vlan_based_re_originate_route_type5  = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface OSPF Settings in Terraform for Cisco IOS-XE\nDESCRIPTION: This Terraform code snippet demonstrates how to configure OSPF settings for a Loopback interface. It sets various OSPF parameters including cost, intervals, network type, priority, and authentication.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_ospf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_ospf\" \"example\" {\n  type                             = \"Loopback\"\n  name                             = \"1\"\n  cost                             = 10\n  dead_interval                    = 30\n  hello_interval                   = 5\n  mtu_ignore                       = false\n  network_type_broadcast           = false\n  network_type_non_broadcast       = false\n  network_type_point_to_multipoint = false\n  network_type_point_to_point      = true\n  priority                         = 10\n  ttl_security_hops                = 2\n  process_ids = [\n    {\n      id = 1\n      areas = [\n        {\n          area_id = \"0\"\n        }\n      ]\n    }\n  ]\n  message_digest_keys = [\n    {\n      id            = 1\n      md5_auth_key  = \"mykey\"\n      md5_auth_type = 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IOSXE Community List Expanded Resource in Terraform\nDESCRIPTION: Demonstrates how to configure a Community List Expanded resource with a permit entry for a specific community pattern. The example shows setting up a list named 'CLE1' with a permit action for community '65000:500'.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/community_list_expanded.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_community_list_expanded\" \"example\" {\n  name = \"CLE1\"\n  entries = [\n    {\n      action = \"permit\"\n      regex  = \"65000:500\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Service Template Configuration in IOS-XE\nDESCRIPTION: Terraform configuration for creating a service template with various settings including access groups, timers, VLAN, security policies, and interface templates. The example demonstrates setting up a complete service template with all available parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/service_template.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_service_template\" \"example\" {\n  name = \"MY_TEMPLATE\"\n  access_groups = [\n    {\n      name = \"ag1\"\n    }\n  ]\n  inactivity_timer       = 25\n  inactivity_timer_probe = false\n  vlan                   = 27\n  voice_vlan             = false\n  linksec_policy         = \"must-secure\"\n  sgt                    = 57\n  absolute_timer         = 45\n  description            = \"service_template_desc\"\n  interface_templates = [\n    {\n      name = \"template1\"\n    }\n  ]\n  tunnel_capwap_name         = \"TUN1\"\n  vnid                       = \"12345\"\n  redirect_append_client_mac = \"00:01:00:01:00:01\"\n  redirect_append_switch_mac = \"00:01:00:01:00:02\"\n  redirect_url               = \"valid_url\"\n  redirect_url_match_acl     = \"acl_name\"\n  redirect_url_match_action  = \"redirect-on-no-match\"\n  dns_acl_preauth            = \"dns_acl_name\"\n  service_policy_qos_input   = \"input_qos\"\n  service_policy_qos_output  = \"output_qos\"\n  tags = [\n    {\n      name = \"tag_name\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Route Map Configuration in IOS-XE using Terraform\nDESCRIPTION: Example of creating a route map configuration with comprehensive matching and setting parameters. Demonstrates setting up route maps with multiple attributes including access lists, route types, protocols, and BGP-related settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/route_map.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_route_map\" \"example\" {\n  name = \"RM1\"\n  entries = [\n    {\n      seq                                      = 10\n      operation                                = \"permit\"\n      description                              = \"Entry 10\"\n      continue                                 = false\n      match_interfaces                         = [\"Loopback1\"]\n      match_ip_address_access_lists            = [\"ACL1\"]\n      match_ip_next_hop_access_lists           = [\"ACL1\"]\n      match_ipv6_address_access_lists          = \"ACL1\"\n      match_ipv6_next_hop_access_lists         = \"ACL1\"\n      match_route_type_external                = true\n      match_route_type_external_type_1         = true\n      match_route_type_external_type_2         = true\n      match_route_type_internal                = true\n      match_route_type_level_1                 = true\n      match_route_type_level_2                 = true\n      match_route_type_local                   = true\n      match_source_protocol_bgp                = [\"65000\"]\n      match_source_protocol_connected          = true\n      match_source_protocol_eigrp              = [\"10\"]\n      match_source_protocol_isis               = true\n      match_source_protocol_lisp               = true\n      match_source_protocol_ospf               = [\"10\"]\n      match_source_protocol_ospfv3             = [\"10\"]\n      match_source_protocol_rip                = true\n      match_source_protocol_static             = true\n      match_tags                               = [100]\n      match_track                              = 1\n      match_as_paths_legacy                    = [10]\n      match_community_lists_legacy             = [\"COMM1\"]\n      match_extcommunity_lists_legacy          = [\"EXTCOMM1\"]\n      match_local_preferences_legacy           = [100]\n      match_as_paths                           = [10]\n      match_community_lists                    = [\"COMM1\"]\n      match_extcommunity_lists                 = [\"EXTCOMM1\"]\n      match_local_preferences                  = [100]\n      set_default_interfaces                   = [\"Loopback1\"]\n      set_global                               = false\n      set_interfaces                           = [\"Loopback1\"]\n      set_ip_address                           = \"PFL1\"\n      set_ip_default_global_next_hop_address   = [\"1.2.3.4\"]\n      set_ip_default_next_hop_address          = [\"1.2.3.4\"]\n      set_ip_global_next_hop_address           = [\"1.2.3.4\"]\n      set_ip_next_hop_address                  = [\"1.2.3.4\"]\n      set_ip_qos_group                         = 1\n      set_ipv6_address                         = [\"PFL2\"]\n      set_ipv6_default_global_next_hop         = \"2001::1\"\n      set_ipv6_default_next_hop                = [\"2001::1\"]\n      set_ipv6_next_hop                        = [\"2001::1\"]\n      set_level_1                              = true\n      set_metric_value                         = 110\n      set_metric_delay                         = \"10\"\n      set_metric_reliability                   = 90\n      set_metric_loading                       = 10\n      set_metric_mtu                           = 1500\n      set_metric_type                          = \"external\"\n      set_tag                                  = 100\n      set_as_path_prepend_as_legacy            = \"65001 65001\"\n      set_as_path_prepend_last_as_legacy       = 5\n      set_as_path_tag_legacy                   = true\n      set_communities_legacy                   = [\"1:2\"]\n      set_communities_additive_legacy          = true\n      set_community_list_delete_legacy         = true\n      set_community_list_name_legacy           = \"COMML1\"\n      set_extcomunity_rt_legacy                = [\"10:10\"]\n      set_extcomunity_soo_legacy               = \"10:10\"\n      set_extcomunity_vpn_distinguisher_legacy = \"10:10\"\n      set_local_preference_legacy              = 110\n      set_weight_legacy                        = 10000\n      set_as_path_prepend_as                   = \"65001 65001\"\n      set_as_path_prepend_last_as              = 5\n      set_communities                          = [\"1:2\"]\n      set_community_list_name                  = \"COMML1\"\n      set_extcomunity_rt                       = [\"10:10\"]\n      set_extcomunity_soo                      = \"10:10\"\n      set_extcomunity_vpn_distinguisher        = \"10:10\"\n      set_local_preference                     = 110\n      set_weight                               = 10000\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface Loopback with Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_interface_loopback resource to configure a loopback interface on a Cisco IOS-XE device. It sets various parameters including IP addressing, VRF, access groups, and IPv6 settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_loopback.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_loopback\" \"example\" {\n  name                       = 100\n  description                = \"My Interface Description\"\n  shutdown                   = false\n  ip_proxy_arp               = false\n  ip_redirects               = false\n  ip_unreachables            = false\n  vrf_forwarding             = \"VRF1\"\n  ipv4_address               = \"200.1.1.1\"\n  ipv4_address_mask          = \"255.255.255.255\"\n  ip_access_group_in         = \"1\"\n  ip_access_group_in_enable  = true\n  ip_access_group_out        = \"1\"\n  ip_access_group_out_enable = true\n  ipv6_enable                = true\n  ipv6_mtu                   = 1300\n  ipv6_address_dhcp          = true\n  ipv6_link_local_addresses = [\n    {\n      address    = \"fe80::9656:d028:8652:66b7\"\n      link_local = true\n    }\n  ]\n  ipv6_addresses = [\n    {\n      prefix = \"2002:DB8::/32\"\n      eui_64 = true\n    }\n  ]\n  arp_timeout = 2147\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Route Configuration in IOS-XE using Terraform\nDESCRIPTION: This snippet demonstrates how to configure a static route with next-hop settings in IOS-XE. It includes configuration for prefix, mask, and next-hop parameters like metric, tag, and route attributes.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/static_route.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_static_route\" \"example\" {\n  prefix = \"5.5.5.5\"\n  mask   = \"255.255.255.255\"\n  next_hops = [\n    {\n      next_hop  = \"6.6.6.6\"\n      metric    = 10\n      global    = false\n      name      = \"Route1\"\n      permanent = true\n      tag       = 100\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BGP with IOS-XE Terraform Provider\nDESCRIPTION: Example configuration for setting up BGP using the iosxe_bgp resource. Demonstrates setting ASN, IPv4 unicast behavior, neighbor change logging, and router ID configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp\" \"example\" {\n  asn                  = \"65000\"\n  default_ipv4_unicast = false\n  log_neighbor_changes = true\n  router_id_loopback   = 100\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing BGP Configuration into Terraform\nDESCRIPTION: Command for importing an existing BGP configuration into Terraform state using the specific path format for IOS-XE BGP resources.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000\"\n```\n\n----------------------------------------\n\nTITLE: IOS-XE Provider Version 0.3.3 Release Notes\nDESCRIPTION: Release adding AAA, MPLS, OSPFv3, and IPSec-related resources and data sources.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.3\n\n- Add `iosxe_aaa` resource and data source\n- Add `iosxe_aaa_accounting` resource and data source\n[...]\n```\n\n----------------------------------------\n\nTITLE: Configuring MSDP Resource in IOS-XE\nDESCRIPTION: Terraform configuration example for setting up MSDP with originator ID, peer password, and peer configurations. Demonstrates setting up peer connections with remote AS and loopback interface settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/msdp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_msdp\" \"example\" {\n  originator_id = \"Loopback100\"\n  passwords = [\n    {\n      addr       = \"10.1.1.1\"\n      encryption = 0\n      password   = \"Cisco123\"\n    }\n  ]\n  peers = [\n    {\n      addr                    = \"10.1.1.1\"\n      remote_as               = 65000\n      connect_source_loopback = 100\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOS-XE Logging Resource with Terraform\nDESCRIPTION: Example configuration of the iosxe_logging resource showing various logging parameters including severity levels, buffer sizes, facilities, and host configurations for both IPv4 and IPv6 across different VRFs.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/logging.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_logging\" \"example\" {\n  monitor_severity  = \"informational\"\n  buffered_size     = 16000\n  buffered_severity = \"informational\"\n  console_severity  = \"informational\"\n  facility          = \"local0\"\n  history_size      = 100\n  history_severity  = \"informational\"\n  trap              = true\n  trap_severity     = \"informational\"\n  origin_id_type    = \"hostname\"\n  source_interface  = \"Loopback0\"\n  source_interfaces_vrf = [\n    {\n      vrf            = \"VRF1\"\n      interface_name = \"Loopback100\"\n    }\n  ]\n  ipv4_hosts = [\n    {\n      ipv4_host = \"1.1.1.1\"\n    }\n  ]\n  ipv4_vrf_hosts = [\n    {\n      ipv4_host = \"1.1.1.1\"\n      vrf       = \"VRF1\"\n    }\n  ]\n  ipv6_hosts = [\n    {\n      ipv6_host = \"2001::1\"\n    }\n  ]\n  ipv6_vrf_hosts = [\n    {\n      ipv6_host = \"2001::1\"\n      vrf       = \"VRF1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Banners in IOS-XE using Terraform\nDESCRIPTION: This snippet demonstrates how to use the 'iosxe_banner' resource to configure multiple types of banners (exec, login, prompt-timeout, and MOTD) on an IOS-XE device. It sets custom messages for each banner type.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/banner.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_banner\" \"example\" {\n  exec_banner           = \"My Exec Banner\"\n  login_banner          = \"My Login Banner\"\n  prompt_timeout_banner = \"My Prompt-Timeout Banner\"\n  motd_banner           = \"My MOTD Banner\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BGP Address Family IPv4 in Terraform for IOS-XE\nDESCRIPTION: This Terraform resource configures BGP Address Family IPv4 settings including ASN, address family name, redistribution options, aggregate addresses, and network advertisements. It demonstrates various configuration options available for the iosxe_bgp_address_family_ipv4 resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_address_family_ipv4.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp_address_family_ipv4\" \"example\" {\n  asn                                 = \"65000\"\n  af_name                             = \"unicast\"\n  ipv4_unicast_redistribute_connected = true\n  ipv4_unicast_redistribute_static    = true\n  ipv4_unicast_aggregate_addresses = [\n    {\n      ipv4_address = \"10.0.0.0\"\n      ipv4_mask    = \"255.255.0.0\"\n    }\n  ]\n  ipv4_unicast_networks_mask = [\n    {\n      network   = \"12.0.0.0\"\n      mask      = \"255.255.0.0\"\n      route_map = \"RM1\"\n      backdoor  = true\n    }\n  ]\n  ipv4_unicast_networks = [\n    {\n      network   = \"13.0.0.0\"\n      route_map = \"RM1\"\n      backdoor  = true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOS-XE Interface Tunnel with Terraform\nDESCRIPTION: Example configuration for creating and managing a tunnel interface on a Cisco IOS-XE device. Demonstrates setting up tunnel parameters, IPv4/IPv6 addressing, BFD configuration, and various interface features.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_tunnel.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_tunnel\" \"example\" {\n  name                    = 90\n  description             = \"My Interface Description\"\n  shutdown                = false\n  ip_proxy_arp            = false\n  ip_redirects            = false\n  ip_unreachables         = false\n  vrf_forwarding          = \"VRF1\"\n  ipv6_enable             = true\n  ipv6_mtu                = 1300\n  ipv6_nd_ra_suppress_all = true\n  ipv6_address_dhcp       = true\n  ipv6_link_local_addresses = [\n    {\n      address    = \"fe80::9656:d028:8652:66ba\"\n      link_local = true\n    }\n  ]\n  ipv6_addresses = [\n    {\n      prefix = \"2005:DB8::/32\"\n      eui_64 = true\n    }\n  ]\n  tunnel_destination_ipv4        = \"2.2.2.2\"\n  arp_timeout                    = 300\n  ipv4_address                   = \"10.1.1.1\"\n  ipv4_address_mask              = \"255.255.255.0\"\n  ip_mtu                         = 1200\n  ip_dhcp_relay_source_interface = \"Loopback100\"\n  ip_access_group_in             = \"1\"\n  ip_access_group_in_enable      = true\n  ip_access_group_out            = \"1\"\n  ip_access_group_out_enable     = true\n  helper_addresses = [\n    {\n      address = \"10.10.10.10\"\n      global  = false\n      vrf     = \"VRF1\"\n    }\n  ]\n  bfd_template                     = \"bfd_template1\"\n  bfd_enable                       = true\n  bfd_local_address                = \"1.2.3.4\"\n  load_interval                    = 30\n  snmp_trap_link_status            = false\n  logging_event_link_status_enable = true\n  tunnel_vrf                       = \"VRF1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading VLAN Group Configuration in IOSXE with Terraform\nDESCRIPTION: Example of using the iosxe_vlan_group data source to read VLAN group configuration. The data source requires a group name that starts with an alphabet character and can optionally specify a device name from the provider configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/vlan_group.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_vlan_group\" \"example\" {\n  name = \"GROUP1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging IPv4 Host VRF Transport with Multiple Transport Protocols\nDESCRIPTION: Example Terraform configuration for setting up logging IPv4 host VRF transport with UDP, TCP, and TLS ports. Demonstrates configuration of multiple transport protocols with specific port numbers and VRF settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/logging_ipv4_host_vrf_transport.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_logging_ipv4_host_vrf_transport\" \"example\" {\n  ipv4_host = \"2.2.2.2\"\n  vrf       = \"VRF1\"\n  transport_udp_ports = [\n    {\n      port_number = 10000\n    }\n  ]\n  transport_tcp_ports = [\n    {\n      port_number = 10001\n    }\n  ]\n  transport_tls_ports = [\n    {\n      port_number = 10002\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PIM using Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_pim resource to configure various PIM settings, including AutoRP, BSR candidate, SSM range, and RP addresses. It showcases the flexibility in configuring PIM parameters for multicast routing.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/pim.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_pim\" \"example\" {\n  autorp                 = false\n  autorp_listener        = false\n  bsr_candidate_loopback = 100\n  bsr_candidate_mask     = 30\n  bsr_candidate_priority = 10\n  ssm_range              = \"10\"\n  ssm_default            = false\n  rp_address             = \"9.9.9.9\"\n  rp_address_override    = false\n  rp_address_bidir       = false\n  rp_addresses = [\n    {\n      access_list = \"10\"\n      rp_address  = \"10.10.10.10\"\n      override    = false\n      bidir       = false\n    }\n  ]\n  rp_candidates = [\n    {\n      interface = \"Loopback100\"\n      interval  = 100\n      priority  = 10\n      bidir     = false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface Switchport Settings in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the 'iosxe_interface_switchport' resource to configure switchport settings on a Cisco IOS-XE interface. It sets up a trunk port on GigabitEthernet1/0/3 with specific VLAN configurations.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_switchport.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_switchport\" \"example\" {\n  type                          = \"GigabitEthernet\"\n  name                          = \"1/0/3\"\n  mode_access                   = false\n  mode_dot1q_tunnel             = false\n  mode_private_vlan_trunk       = false\n  mode_private_vlan_host        = false\n  mode_private_vlan_promiscuous = false\n  mode_trunk                    = true\n  nonegotiate                   = false\n  access_vlan                   = \"100\"\n  trunk_allowed_vlans           = \"100,101\"\n  trunk_native_vlan             = 100\n  host                          = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Crypto IKEv2 Profile using Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_crypto_ikev2_profile resource to configure a Crypto IKEv2 profile on a Cisco IOS-XE device. It sets various parameters such as authentication methods, identity settings, match criteria, and DPD (Dead Peer Detection) settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ikev2_profile.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_crypto_ikev2_profile\" \"example\" {\n  name                            = \"profile1\"\n  description                     = \"My description\"\n  authentication_remote_pre_share = true\n  authentication_local_pre_share  = true\n  identity_local_key_id           = \"key1\"\n  match_address_local_ip          = \"1.2.3.4\"\n  match_fvrf_any                  = true\n  match_identity_remote_ipv4_addresses = [\n    {\n      address = \"1.2.3.4\"\n      mask    = \"255.255.255.0\"\n    }\n  ]\n  match_identity_remote_keys = [\"key1\"]\n  keyring_local              = \"test\"\n  ivrf                       = \"VRF1\"\n  dpd_interval               = 10\n  dpd_retry                  = 2\n  dpd_query                  = \"periodic\"\n  config_exchange_request    = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AAA settings with Terraform for Cisco IOS XE\nDESCRIPTION: This Terraform configuration example demonstrates how to set up various AAA settings including new model, RADIUS dynamic author, session ID, RADIUS clients, and server groups for both RADIUS and TACACS+.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/aaa.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_aaa\" \"example\" {\n  new_model                    = true\n  server_radius_dynamic_author = true\n  session_id                   = \"common\"\n  server_radius_dynamic_author_clients = [\n    {\n      ip              = \"11.1.1.1\"\n      server_key_type = \"0\"\n      server_key      = \"abcd123\"\n    }\n  ]\n  group_server_radius = [\n    {\n      name = \"T-Group\"\n      server_names = [\n        {\n          name = \"TESTRADIUS\"\n        }\n      ]\n      ip_radius_source_interface_loopback = 0\n    }\n  ]\n  group_server_tacacsplus = [\n    {\n      name = \"tacacs-group\"\n      server_names = [\n        {\n          name = \"tacacs_10.10.15.12\"\n        }\n      ]\n      ip_tacacs_source_interface_loopback = 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Banner Configuration in Cisco IOS XE using Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_banner data source to retrieve banner configuration from a Cisco IOS XE device. It doesn't require any specific parameters and will fetch all available banner types.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/banner.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_banner\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Host Logging with VRF Transport in Terraform\nDESCRIPTION: Example Terraform configuration for setting up IPv6 host logging with VRF and multiple transport protocols (UDP, TCP, TLS). Demonstrates configuration of different port numbers for each transport type.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/logging_ipv6_host_vrf_transport.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_logging_ipv6_host_vrf_transport\" \"example\" {\n  ipv6_host = \"2001::1\"\n  vrf       = \"VRF1\"\n  transport_udp_ports = [\n    {\n      port_number = 10000\n    }\n  ]\n  transport_tcp_ports = [\n    {\n      port_number = 10001\n    }\n  ]\n  transport_tls_ports = [\n    {\n      port_number = 10002\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OSPF VRF Settings with Terraform\nDESCRIPTION: Example Terraform configuration for setting up OSPF VRF including process ID, BFD, default information origination, metrics, neighbors, networks, areas and other OSPF parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/ospf_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_ospf_vrf\" \"example\" {\n  process_id                           = 2\n  vrf                                  = \"VRF1\"\n  bfd_all_interfaces                   = true\n  default_information_originate        = true\n  default_information_originate_always = true\n  default_metric                       = 21\n  distance                             = 120\n  domain_tag                           = 10\n  neighbor = [\n    {\n      ip       = \"2.2.2.2\"\n      priority = 10\n      cost     = 100\n    }\n  ]\n  network = [\n    {\n      ip       = \"3.3.3.0\"\n      wildcard = \"0.0.0.255\"\n      area     = \"0\"\n    }\n  ]\n  priority  = 100\n  router_id = \"1.2.3.4\"\n  shutdown  = false\n  summary_address = [\n    {\n      ip   = \"3.3.3.0\"\n      mask = \"255.255.255.0\"\n    }\n  ]\n  areas = [\n    {\n      area_id                                        = \"5\"\n      authentication_message_digest                  = true\n      nssa                                           = true\n      nssa_default_information_originate             = true\n      nssa_default_information_originate_metric      = 100\n      nssa_default_information_originate_metric_type = 1\n      nssa_no_summary                                = true\n      nssa_no_redistribution                         = true\n    }\n  ]\n  passive_interface_default = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Radius Server Settings with Terraform\nDESCRIPTION: Example of creating a Radius server configuration with authentication, accounting, and automated testing settings. Demonstrates setting up a basic Radius server with security features and network parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/radius.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_radius\" \"example\" {\n  name                             = \"radius_10.10.15.12\"\n  ipv4_address                     = \"10.10.15.12\"\n  authentication_port              = 1813\n  accounting_port                  = 1812\n  timeout                          = 4\n  retransmit                       = 3\n  key                              = \"123\"\n  automate_tester_username         = \"dummy\"\n  automate_tester_ignore_acct_port = true\n  automate_tester_probe_on_config  = true\n  pac_key                          = \"123\"\n  pac_key_encryption               = \"0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AAA Authorization for Exec and Network Services in Terraform\nDESCRIPTION: This snippet demonstrates how to configure AAA Authorization for exec and network services using the iosxe_aaa_authorization resource. It sets up authorization for an exec named 'EXEC1' with multiple group authentications and local fallback, as well as a network authorization 'NET1' with similar settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/aaa_authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_aaa_authorization\" \"example\" {\n  execs = [\n    {\n      name     = \"EXEC1\"\n      a1_group = \"GROUP1\"\n      a2_group = \"GROUP2\"\n      a3_group = \"GROUP3\"\n      a4_local = true\n    }\n  ]\n  networks = [\n    {\n      id       = \"NET1\"\n      a1_group = \"RGROUP1\"\n      a2_group = \"RGROUP2\"\n      a3_group = \"RGROUP3\"\n      a4_local = true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DHCP Settings with Terraform for Cisco IOS-XE\nDESCRIPTION: This Terraform code snippet demonstrates how to configure various DHCP settings on a Cisco IOS-XE device. It sets relay information options, enables DHCP snooping, and configures snooping for specific VLANs.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/dhcp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_dhcp\" \"example\" {\n  relay_information_trust_all      = false\n  relay_information_option_default = false\n  relay_information_option_vpn     = true\n  snooping                         = true\n  snooping_vlans = [\n    {\n      vlan_id = \"3-4\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Channel Interface with Terraform\nDESCRIPTION: Example configuration of a Port Channel interface with various settings including IPv4/IPv6 addressing, BFD configuration, helper addresses, and interface parameters. Shows comprehensive interface configuration options supported by the resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_port_channel.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_port_channel\" \"example\" {\n  name                           = 10\n  description                    = \"My Interface Description\"\n  shutdown                       = false\n  vrf_forwarding                 = \"VRF1\"\n  ipv4_address                   = \"192.0.2.1\"\n  ipv4_address_mask              = \"255.255.255.0\"\n  ip_access_group_in             = \"1\"\n  ip_access_group_in_enable      = true\n  ip_access_group_out            = \"1\"\n  ip_access_group_out_enable     = true\n  ip_dhcp_relay_source_interface = \"Loopback100\"\n  helper_addresses = [\n    {\n      address = \"10.10.10.10\"\n      global  = false\n    }\n  ]\n  bfd_template            = \"bfd_template1\"\n  bfd_enable              = true\n  bfd_local_address       = \"1.2.3.4\"\n  ipv6_enable             = true\n  ipv6_mtu                = 1300\n  ipv6_nd_ra_suppress_all = true\n  ipv6_address_dhcp       = true\n  ipv6_link_local_addresses = [\n    {\n      address    = \"fe80::64\"\n      link_local = true\n    }\n  ]\n  ipv6_addresses = [\n    {\n      prefix = \"2224:DB8::/32\"\n      eui_64 = true\n    }\n  ]\n  arp_timeout                      = 2147\n  load_interval                    = 30\n  snmp_trap_link_status            = true\n  logging_event_link_status_enable = false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying AS Path Access List Configuration in Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_as_path_access_list data source to retrieve AS Path Access List configuration. It specifies the name of the access list to query.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/as_path_access_list.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_as_path_access_list\" \"example\" {\n  name = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MDT Subscription in IOS-XE using Terraform\nDESCRIPTION: Example configuration for setting up an MDT subscription with YANG notification stream, KVGPB encoding, and GRPC receiver. Includes source VRF configuration and XPath filtering for OSPF neighbor state changes.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/mdt_subscription.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_mdt_subscription\" \"example\" {\n  subscription_id         = 101\n  stream                  = \"yang-notif-native\"\n  encoding                = \"encode-kvgpb\"\n  source_vrf              = \"Mgmt-vrf\"\n  source_address          = \"1.2.3.4\"\n  update_policy_on_change = true\n  filter_xpath            = \"/ios-events-ios-xe-oper:ospf-neighbor-state-change\"\n  receivers = [\n    {\n      address  = \"5.6.7.8\"\n      port     = 57600\n      protocol = \"grpc-tcp\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOSXE Port Channel Subinterface with Terraform\nDESCRIPTION: Example configuration for creating and managing a port channel subinterface with various network settings including IP addressing, VRF, encapsulation, access lists, helper addresses, BFD configuration, and IPv6 settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_port_channel_subinterface.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_port_channel_subinterface\" \"example\" {\n  name                        = \"10.666\"\n  description                 = \"My Interface Description\"\n  shutdown                    = false\n  ip_proxy_arp                = false\n  ip_redirects                = false\n  ip_unreachables             = false\n  vrf_forwarding              = \"VRF1\"\n  ipv4_address                = \"192.0.2.2\"\n  ipv4_address_mask           = \"255.255.255.0\"\n  encapsulation_dot1q_vlan_id = 666\n  ip_access_group_in          = \"1\"\n  ip_access_group_in_enable   = true\n  ip_access_group_out         = \"1\"\n  ip_access_group_out_enable  = true\n  helper_addresses = [\n    {\n      address = \"10.10.10.10\"\n      global  = false\n    }\n  ]\n  bfd_template            = \"bfd_template1\"\n  bfd_enable              = true\n  bfd_local_address       = \"1.2.3.4\"\n  ipv6_enable             = true\n  ipv6_mtu                = 1300\n  ipv6_nd_ra_suppress_all = true\n  ipv6_address_dhcp       = true\n  ipv6_link_local_addresses = [\n    {\n      address    = \"fe80::9656:d028:8652:66b8\"\n      link_local = true\n    }\n  ]\n  ipv6_addresses = [\n    {\n      prefix = \"2003:DB8::/32\"\n      eui_64 = true\n    }\n  ]\n  arp_timeout = 2147\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging IPv4 Host Transport with Multiple Transport Protocols\nDESCRIPTION: Example configuration of IPv4 host logging with UDP, TCP and TLS transport ports. Demonstrates setting up logging to host 2.2.2.2 with different port numbers for each transport protocol.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/logging_ipv4_host_transport.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_logging_ipv4_host_transport\" \"example\" {\n  ipv4_host = \"2.2.2.2\"\n  transport_udp_ports = [\n    {\n      port_number = 10000\n    }\n  ]\n  transport_tcp_ports = [\n    {\n      port_number = 10001\n    }\n  ]\n  transport_tls_ports = [\n    {\n      port_number = 10002\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SNMP Server User with Authentication and Privacy in Terraform\nDESCRIPTION: Example showing how to configure an SNMP v3 user with SHA authentication and AES encryption. Includes group membership, authentication passwords, and access control lists.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/snmp_server_user.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_snmp_server_user\" \"example\" {\n  username                         = \"USER1\"\n  grpname                          = \"GROUP1\"\n  v3_auth_algorithm                = \"sha\"\n  v3_auth_password                 = \"Cisco123\"\n  v3_auth_priv_aes_algorithm       = \"128\"\n  v3_auth_priv_aes_password        = \"Cisco123\"\n  v3_auth_priv_aes_access_ipv6_acl = \"V6ACL1\"\n  v3_auth_priv_aes_access_acl_name = \"ACL123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BFD Template Multi Hop in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bfd_template_multi_hop resource to configure a BFD Template Multi Hop on a Cisco IOS-XE device. It sets various parameters including echo, intervals, authentication, and dampening options.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bfd_template_multi_hop.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bfd_template_multi_hop\" \"example\" {\n  name                             = \"T11\"\n  echo                             = true\n  interval_milliseconds_min_tx     = 4500\n  interval_milliseconds_min_rx     = 5500\n  interval_milliseconds_multiplier = 40\n  authentication_md5_keychain      = \"KEYNAME\"\n  dampening_half_time              = 21\n  dampening_unsuppress_time        = 1800\n  dampening_suppress_time          = 1900\n  dampening_max_suppressing_time   = 70\n}\n```\n\n----------------------------------------\n\nTITLE: Reading AAA Authentication Configuration with Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_aaa_authentication data source to read the AAA Authentication configuration from a Cisco IOS-XE device. This allows you to retrieve the current authentication settings for dot1x and login services.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/aaa_authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_aaa_authentication\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MSDP VRF Configuration in Terraform\nDESCRIPTION: Example of configuring MSDP VRF with peer settings and passwords using Terraform. Demonstrates setting up originator ID, peer configurations with remote AS and connect source, and password encryption settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/msdp_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_msdp_vrf\" \"example\" {\n  vrf           = \"VRF1\"\n  originator_id = \"Loopback100\"\n  passwords = [\n    {\n      addr       = \"10.1.1.1\"\n      encryption = 0\n      password   = \"Cisco123\"\n    }\n  ]\n  peers = [\n    {\n      addr                    = \"10.1.1.1\"\n      remote_as               = 65000\n      connect_source_loopback = 100\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BGP Address Family IPv6 in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bgp_address_family_ipv6 resource to configure BGP Address Family IPv6 settings. It sets the ASN, address family name, enables redistribution of connected and static routes, and defines an IPv6 network with specific attributes.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_address_family_ipv6.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp_address_family_ipv6\" \"example\" {\n  asn                                 = \"65000\"\n  af_name                             = \"unicast\"\n  ipv6_unicast_redistribute_connected = true\n  ipv6_unicast_redistribute_static    = true\n  ipv6_unicast_networks = [\n    {\n      network   = \"2001:1234::/64\"\n      route_map = \"RM1\"\n      backdoor  = true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Exporter in IOS-XE using Terraform\nDESCRIPTION: Example of creating a Flow Exporter configuration using the iosxe_flow_exporter resource. Demonstrates setting essential parameters like name, description, destination IP, source loopback, UDP transport, and template timeout.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/flow_exporter.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_flow_exporter\" \"example\" {\n  name                  = \"EXPORTER1\"\n  description           = \"My exporter\"\n  destination_ip        = \"1.1.1.1\"\n  source_loopback       = 123\n  transport_udp         = 655\n  template_data_timeout = 60\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BGP Address Family IPv4 VRF in Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bgp_address_family_ipv4_vrf resource to configure BGP Address Family IPv4 VRF settings. It includes various configuration options such as ASN, VRF name, advertise settings, redistribution, and network configurations.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_address_family_ipv4_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp_address_family_ipv4_vrf\" \"example\" {\n  asn     = \"65000\"\n  af_name = \"unicast\"\n  vrfs = [\n    {\n      name                                = \"VRF1\"\n      ipv4_unicast_advertise_l2vpn_evpn   = true\n      ipv4_unicast_redistribute_connected = true\n      ipv4_unicast_router_id_loopback     = 101\n      ipv4_unicast_aggregate_addresses = [\n        {\n          ipv4_address = \"50.0.0.0\"\n          ipv4_mask    = \"255.255.0.0\"\n        }\n      ]\n      ipv4_unicast_redistribute_static = true\n      ipv4_unicast_networks_mask = [\n        {\n          network   = \"12.0.0.0\"\n          mask      = \"255.255.0.0\"\n          route_map = \"RM1\"\n          backdoor  = true\n        }\n      ]\n      ipv4_unicast_networks = [\n        {\n          network   = \"13.0.0.0\"\n          route_map = \"RM1\"\n          backdoor  = true\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BFD Settings in IOS-XE using Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bfd resource to configure various BFD settings including IPv4 and IPv6 configurations with and without VRFs. It also sets the slow_timers value.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bfd.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bfd\" \"example\" {\n  ipv4_both_vrfs = [\n    {\n      dst_vrf       = \"dest_vrf1\"\n      dest_ip       = \"1.2.3.4/4\"\n      src_vrf       = \"src_vrf1\"\n      src_ip        = \"11.22.33.44/12\"\n      template_name = \"template1\"\n    }\n  ]\n  ipv4_without_vrfs = [\n    {\n      dest_ip       = \"1.2.3.4/4\"\n      src_ip        = \"11.22.33.44/12\"\n      template_name = \"template1\"\n    }\n  ]\n  ipv4_with_src_vrfs = [\n    {\n      dest_ip       = \"1.2.3.4/4\"\n      src_vrf       = \"src_vrf1\"\n      src_ip        = \"11.22.33.44/12\"\n      template_name = \"template1\"\n    }\n  ]\n  ipv4_with_dst_vrfs = [\n    {\n      dst_vrf       = \"dest_vrf1\"\n      dest_ip       = \"1.2.3.4/4\"\n      src_ip        = \"11.22.33.44/12\"\n      template_name = \"template1\"\n    }\n  ]\n  ipv6_with_both_vrfs = [\n    {\n      dst_vrf       = \"dst_vrf1\"\n      dest_ipv6     = \"2001:DB8:0:1::/64\"\n      src_vrf       = \"src_vrf1\"\n      src_ipv6      = \"2001:DB8:0:2::/64\"\n      template_name = \"template1\"\n    }\n  ]\n  ipv6_without_vrfs = [\n    {\n      dest_ipv6     = \"2001:DB8:0:1::/64\"\n      src_ipv6      = \"2001:DB8:0:2::/64\"\n      template_name = \"template1\"\n    }\n  ]\n  ipv6_with_src_vrfs = [\n    {\n      dest_ipv6     = \"2001:DB8:0:1::/64\"\n      src_vrf       = \"src_vrf1\"\n      src_ipv6      = \"2001:DB8:0:2::/64\"\n      template_name = \"template1\"\n    }\n  ]\n  ipv6_with_dst_vrfs = [\n    {\n      dst_vrf       = \"dst_vrf1\"\n      dest_ipv6     = \"2001:DB8:0:1::/64\"\n      src_ipv6      = \"2001:DB8:0:2::/64\"\n      template_name = \"template1\"\n    }\n  ]\n  slow_timers = 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Dot1x Configuration in Terraform with IOSXE Provider\nDESCRIPTION: This example demonstrates how to use the iosxe_dot1x data source to retrieve Dot1x configuration information from a Cisco IOSXE device. The configuration can be accessed through various read-only attributes after retrieval.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/dot1x.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_dot1x\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOS-XE Service Settings with Terraform\nDESCRIPTION: Example configuration showing how to manage various service settings including timestamps, password encryption, DHCP, and TCP keepalives on a Cisco IOS-XE device. Demonstrates the full range of boolean configuration options available in the service resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/service.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_service\" \"example\" {\n  pad                                     = true\n  password_encryption                     = true\n  password_recovery                       = true\n  timestamps                              = true\n  timestamps_debug                        = true\n  timestamps_debug_datetime               = true\n  timestamps_debug_datetime_msec          = true\n  timestamps_debug_datetime_localtime     = true\n  timestamps_debug_datetime_show_timezone = true\n  timestamps_debug_datetime_year          = true\n  timestamps_debug_uptime                 = true\n  timestamps_log                          = true\n  timestamps_log_datetime                 = true\n  timestamps_log_datetime_msec            = true\n  timestamps_log_datetime_localtime       = true\n  timestamps_log_datetime_show_timezone   = true\n  timestamps_log_datetime_year            = true\n  timestamps_log_uptime                   = true\n  dhcp                                    = true\n  tcp_keepalives_in                       = true\n  tcp_keepalives_out                      = true\n  compress_config                         = true\n  sequence_numbers                        = true\n  call_home                               = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTP Settings with Terraform on IOS-XE\nDESCRIPTION: Example configuration for setting up VTP with various parameters including file location, version, interface, password, domain and different mode settings. This example demonstrates comprehensive VTP configuration options available through the provider.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vtp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_vtp\" \"example\" {\n  file                     = \"TEST\"\n  version                  = 3\n  interface                = \"Gi1/0/1\"\n  password                 = \"test123\"\n  password_hidden          = false\n  domain                   = \"TESTDOMAIN\"\n  mode_client_mst          = true\n  mode_client_unknown      = true\n  mode_client_vlan         = true\n  mode_off_mst             = true\n  mode_off_vlan            = true\n  mode_server_mst          = true\n  mode_server_unknown      = true\n  mode_server_vlan         = true\n  mode_transparent_mst     = true\n  mode_transparent_unknown = true\n  mode_transparent_vlan    = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PIM VRF Settings with Terraform\nDESCRIPTION: Example Terraform configuration for setting up PIM VRF with various parameters including AutoRP, BSR candidate settings, and RP addresses. This configuration demonstrates the complete setup of a PIM VRF instance with specific multicast routing parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/pim_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_pim_vrf\" \"example\" {\n  vrf                    = \"VRF1\"\n  autorp                 = false\n  autorp_listener        = false\n  bsr_candidate_loopback = 100\n  bsr_candidate_mask     = 30\n  bsr_candidate_priority = 10\n  ssm_range              = \"10\"\n  ssm_default            = false\n  rp_address             = \"19.19.19.19\"\n  rp_address_override    = false\n  rp_address_bidir       = false\n  rp_addresses = [\n    {\n      access_list = \"10\"\n      rp_address  = \"10.10.10.10\"\n      override    = false\n      bidir       = false\n    }\n  ]\n  rp_candidates = [\n    {\n      interface = \"Loopback100\"\n      interval  = 100\n      priority  = 10\n      bidir     = false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Policy Map Event in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_policy_map_event resource to configure a policy map event for authentication success. It includes settings for class numbers, action numbers, and various authentication and authorization parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/policy_map_event.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_policy_map_event\" \"example\" {\n  name       = \"dot1x_policy\"\n  event_type = \"authentication-success\"\n  match_type = \"match-all\"\n  class_numbers = [\n    {\n      number         = 10\n      class          = \"MY_CLASS\"\n      execution_type = \"do-until-failure\"\n      action_numbers = [\n        {\n          number                                            = 10\n          activate_service_template_config_service_template = \"DEFAULT_LINK_POLICY\"\n          activate_service_template_config_aaa_list         = \"methodlist1\"\n          activate_service_template_config_precedence       = 1\n          activate_interface_template                       = \"templ1\"\n          activate_policy_type_control_subscriber           = \"subscriber1\"\n          authenticate_using_method                         = \"dot1x\"\n          authenticate_using_retries                        = 2\n          authenticate_using_retry_time                     = 0\n          authenticate_using_priority                       = 10\n          authenticate_using_aaa_authc_list                 = \"listname1\"\n          authenticate_using_aaa_authz_list                 = \"listname2\"\n          authenticate_using_both                           = true\n          replace                                           = true\n          restrict                                          = true\n          clear_session                                     = true\n          clear_authenticated_data_hosts_on_port            = true\n          protect                                           = true\n          err_disable                                       = true\n          resume_reauthentication                           = true\n          authentication_restart                            = 2\n          set_domain                                        = \"data\"\n          unauthorize                                       = true\n          notify                                            = true\n          set_timer_name                                    = \"timer1\"\n          set_timer_value                                   = 3600\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BGP Address Family IPv6 VRF with Terraform\nDESCRIPTION: This Terraform code snippet demonstrates how to configure BGP Address Family IPv6 VRF settings. It sets up ASN, address family name, and VRF-specific configurations including network advertisements and redistribution options.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_address_family_ipv6_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp_address_family_ipv6_vrf\" \"example\" {\n  asn     = \"65000\"\n  af_name = \"unicast\"\n  vrfs = [\n    {\n      name                                = \"VRF1\"\n      ipv6_unicast_advertise_l2vpn_evpn   = true\n      ipv6_unicast_redistribute_connected = true\n      ipv6_unicast_redistribute_static    = true\n      ipv6_unicast_networks = [\n        {\n          network   = \"2001:1234::/64\"\n          route_map = \"RM1\"\n          backdoor  = true\n          evpn      = false\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SNMP Server Group with V3 Security in Terraform\nDESCRIPTION: Example configuration for creating an SNMP server group named GROUP1 with V3 security settings including privacy level, context settings, and view configurations.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/snmp_server_group.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_snmp_server_group\" \"example\" {\n  name = \"GROUP1\"\n  v3_security = [\n    {\n      security_level  = \"priv\"\n      context_node    = \"CON1\"\n      match_node      = \"exact\"\n      read_node       = \"VIEW1\"\n      write_node      = \"VIEW2\"\n      notify_node     = \"VIEW3\"\n      access_ipv6_acl = \"V6ACL1\"\n      access_acl_name = \"ACL1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flow Record Configuration in IOSXE using Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_flow_record data source to retrieve a Flow Record configuration named 'FNF1' from a Cisco IOSXE device. It shows the basic structure and required parameters for using this data source.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/flow_record.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_flow_record\" \"example\" {\n  name = \"FNF1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VLAN Access Map Configuration in Terraform\nDESCRIPTION: Example Terraform configuration for creating a VLAN access map with sequence number, IPv4/IPv6 ACL matching, and forward action. The resource configures a VLAN access map named VAM1 with sequence 10 and specific ACL matches.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vlan_access_map.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_vlan_access_map\" \"example\" {\n  name               = \"VAM1\"\n  sequence           = 10\n  match_ipv6_address = [\"ACL2\"]\n  match_ip_address   = [\"ACL1\"]\n  action             = \"forward\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Radius Server Settings in IOS-XE using Terraform\nDESCRIPTION: Example configuration of a Radius Server resource with custom attributes, dead criteria settings, and deadtime configuration. Demonstrates setting up attribute 31 parameters with MAC address formatting options.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/radius_server.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_radius_server\" \"example\" {\n  attributes = [\n    {\n      number = \"31\"\n      attribute_31_parameters = [\n        {\n          calling_station_id = \"mac\"\n          id_mac_format      = \"ietf\"\n          id_mac_lu_case     = \"lower-case\"\n        }\n      ]\n    }\n  ]\n  dead_criteria_time  = 5\n  dead_criteria_tries = 3\n  deadtime            = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Crypto IKEv2 Proposal Resource in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to create a Crypto IKEv2 Proposal resource using Terraform. It sets the proposal name, encryption method, Diffie-Hellman group, and integrity algorithm.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ikev2_proposal.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_crypto_ikev2_proposal\" \"example\" {\n  name                   = \"PROPOSAL1\"\n  encryption_aes_cbc_256 = true\n  group_sixteen          = true\n  integrity_sha256       = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CDP with Terraform on Cisco IOS-XE\nDESCRIPTION: This Terraform code snippet demonstrates how to configure CDP settings including holdtime, timer, run status, and TLV list filtering. It also shows how to define a custom TLV list with specific attributes.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/cdp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_cdp\" \"example\" {\n  holdtime        = 15\n  timer           = 5\n  run             = true\n  filter_tlv_list = \"TLIST\"\n  tlv_lists = [\n    {\n      name            = \"TLIST\"\n      vtp_mgmt_domain = true\n      cos             = true\n      duplex          = true\n      trust           = true\n      version         = true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flow Record Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the 'iosxe_flow_record' resource to create a Flow Record configuration. It sets various match and collect parameters for network traffic analysis.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/flow_record.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_flow_record\" \"example\" {\n  name                             = \"FNF1\"\n  description                      = \"My flow record\"\n  match_ipv4_source_address        = true\n  match_ipv4_destination_address   = true\n  match_ipv4_protocol              = true\n  match_ipv4_tos                   = true\n  match_transport_source_port      = true\n  match_transport_destination_port = true\n  match_interface_input            = true\n  match_flow_direction             = true\n  collect_interface_output         = true\n  collect_counter_bytes_long       = true\n  collect_counter_packets_long     = true\n  collect_transport_tcp_flags      = true\n  collect_timestamp_absolute_first = true\n  collect_timestamp_absolute_last  = true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Crypto IKEv2 Policy Configuration in Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_crypto_ikev2_policy data source to retrieve information about a specific IKEv2 policy. It requires specifying the policy name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/crypto_ikev2_policy.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_crypto_ikev2_policy\" \"example\" {\n  name = \"policy1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading EVPN Configuration with Terraform IOSXE Provider\nDESCRIPTION: Example shows how to use the iosxe_evpn data source to read EVPN configuration. The data source allows querying various EVPN settings including default gateway advertisement, IP/MAC duplication parameters, replication types, and router ID configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/evpn.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_evpn\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOSXE NVE Interface with Terraform\nDESCRIPTION: Example configuration for creating an NVE interface with basic settings including description, shutdown state, BGP host reachability, source interface, and VNI configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_nve.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_nve\" \"example\" {\n  name                           = 1\n  description                    = \"My Interface Description\"\n  shutdown                       = false\n  host_reachability_protocol_bgp = true\n  source_interface_loopback      = 100\n  vnis = [\n    {\n      vni_range            = \"10000\"\n      ipv4_multicast_group = \"225.1.1.1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VLAN Filter Resource in Terraform\nDESCRIPTION: Example of creating a VLAN filter configuration using Terraform. The configuration applies filter 'VAM1' to VLAN 1.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vlan_filter.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_vlan_filter\" \"example\" {\n  word       = \"VAM1\"\n  vlan_lists = [1]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Crypto IPSec Transform Set Resource in Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to create a Crypto IPSec Transform Set resource using Terraform. It sets the name, ESP encryption, ESP HMAC, and tunnel mode for the transform set.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ipsec_transform_set.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_crypto_ipsec_transform_set\" \"example\" {\n  name        = \"TEST\"\n  esp         = \"esp-aes\"\n  esp_hmac    = \"esp-sha-hmac\"\n  mode_tunnel = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AAA Authentication with Terraform\nDESCRIPTION: Example of configuring AAA authentication including login and 802.1x settings. Demonstrates setting up authentication methods with different groups, local authentication, and RADIUS servers.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/aaa_authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_aaa_authentication\" \"example\" {\n  logins = [\n    {\n      name     = \"test\"\n      a1_group = \"Radius-GROUP\"\n      a2_none  = true\n    }\n  ]\n  dot1x = [\n    {\n      name      = \"test\"\n      a1_group  = \"GROUP1\"\n      a2_cache  = \"GROUP2\"\n      a3_radius = true\n      a4_local  = true\n    }\n  ]\n  dot1x_default_a1_group = \"Radius-GROUP\"\n  dot1x_default_a2_group = \"Radius-GROUP2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving MPLS configuration for a specific interface in Terraform\nDESCRIPTION: This example demonstrates how to use the iosxe_interface_mpls data source to read MPLS configuration for a Loopback interface. It specifies the interface type and name to target a specific interface on the device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_mpls.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_mpls\" \"example\" {\n  type = \"Loopback\"\n  name = \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Flow Exporter Configuration in Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_flow_exporter data source to retrieve Flow Exporter configuration. It specifies the name of the exporter to query.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/flow_exporter.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_flow_exporter\" \"example\" {\n  name = \"EXPORTER1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UDLD Settings with Terraform\nDESCRIPTION: Example configuration for enabling UDLD with aggressive mode, custom message time, and recovery interval settings. This resource enables UDLD protocol with aggressive mode enabled, sets message time to 77 seconds, and configures recovery interval to 8640 seconds.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/udld.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_udld\" \"example\" {\n  aggressive        = true\n  enable            = true\n  message_time      = 77\n  recovery_interval = 8640\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MPLS on a Loopback Interface using Terraform for Cisco IOS-XE\nDESCRIPTION: This Terraform code snippet demonstrates how to configure MPLS on a Loopback interface. It sets the interface type, name, enables IP forwarding, and specifies the MTU.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_mpls.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_mpls\" \"example\" {\n  type = \"Loopback\"\n  name = \"1\"\n  ip   = true\n  mtu  = \"1200\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Map with Various Match Criteria in Terraform\nDESCRIPTION: This snippet demonstrates how to create a Class Map resource with multiple match criteria, including authorization status, service templates, and method-specific settings. It showcases the flexibility of the resource in defining complex QoS policies.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/class_map.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_class_map\" \"example\" {\n  name                                  = \"CM1\"\n  type                                  = \"control\"\n  subscriber                            = true\n  prematch                              = \"match-all\"\n  match_authorization_status_authorized = true\n  match_result_type_aaa_timeout         = true\n  match_activated_service_templates = [\n    {\n      service_name = \"CRITICAL_AUTH_ACCESS\"\n    }\n  ]\n  match_authorizing_method_priority_greater_than = [20]\n  match_method_dot1x                             = true\n  match_result_type_method_dot1x_authoritative   = true\n  match_result_type_method_dot1x_agent_not_found = true\n  match_result_type_method_dot1x_method_timeout  = true\n  match_method_mab                               = true\n  match_result_type_method_mab_authoritative     = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Console and VTY Lines in Cisco IOS-XE using Terraform\nDESCRIPTION: This Terraform code snippet demonstrates how to configure console and VTY line settings on a Cisco IOS-XE device. It sets up a console line with specific timeout, privilege level, and password settings, as well as VTY lines with access classes, timeout, and transport settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/line.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_line\" \"example\" {\n  console = [\n    {\n      first                = \"0\"\n      exec_timeout_minutes = 45\n      exec_timeout_seconds = 25\n      privilege_level      = 15\n      stopbits             = \"1\"\n      password_type        = \"0\"\n      password             = \"testpasswd\"\n    }\n  ]\n  vty = [\n    {\n      first = 10\n      last  = 27\n      access_classes = [\n        {\n          direction   = \"in\"\n          access_list = \"2\"\n          vrf_also    = true\n        }\n      ]\n      exec_timeout_minutes         = 45\n      exec_timeout_seconds         = 25\n      password_type                = \"0\"\n      password                     = \"testpasswd\"\n      transport_preferred_protocol = \"none\"\n      escape_character             = \"27\"\n      authorization_exec_default   = true\n      transport_input              = \"ssh\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving BGP L2VPN EVPN Neighbor Configuration in Terraform\nDESCRIPTION: This example shows how to retrieve BGP L2VPN EVPN Neighbor configuration using the iosxe_bgp_l2vpn_evpn_neighbor data source. It requires specifying the ASN (Autonomous System Number) and IP address of the neighbor.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp_l2vpn_evpn_neighbor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp_l2vpn_evpn_neighbor\" \"example\" {\n  asn = \"65000\"\n  ip  = \"3.3.3.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Username Configuration in Cisco IOS XE using Terraform\nDESCRIPTION: This snippet demonstrates how to use the 'iosxe_username' data source to retrieve the configuration for a specific username in Cisco IOS XE. It requires specifying the username in the 'name' attribute.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/username.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_username\" \"example\" {\n  name = \"user1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading BGP Configuration with Terraform IOS-XE Provider\nDESCRIPTION: Example showing how to read BGP configuration using the iosxe_bgp data source. The configuration requires an ASN (Autonomous System Number) to be specified.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp\" \"example\" {\n  asn = \"65000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Standard ACL Configuration in IOSXE using Terraform\nDESCRIPTION: Example configuration for creating a standard access list named SACL1 with a deny rule. The rule includes sequence number, remark, network prefix, and logging configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/access_list_standard.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_access_list_standard\" \"example\" {\n  name = \"SACL1\"\n  entries = [\n    {\n      sequence         = 10\n      remark           = \"Description\"\n      deny_prefix      = \"10.0.0.0\"\n      deny_prefix_mask = \"0.0.0.255\"\n      deny_log         = true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple RESTCONF Resource in Terraform for IOS-XE\nDESCRIPTION: Demonstrates how to use the iosxe_restconf resource to set a login banner. It specifies the RESTCONF path and sets the banner attribute.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/restconf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_restconf\" \"simple\" {\n  path = \"Cisco-IOS-XE-native:native/banner/login\"\n  attributes = {\n    banner = \"My Banner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOS-XE Interface Using CLI in Terraform\nDESCRIPTION: Example of using the iosxe_cli resource to configure a Loopback interface on a Cisco IOS-XE device. This demonstrates the use of heredoc syntax for multi-line CLI commands.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/cli.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_cli\" \"example\" {\n  cli = <<-EOT\n  interface Loopback123\n  description configured-via-restconf-cli\n  EOT\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOSXE Username Resource with Terraform\nDESCRIPTION: Creates a user account with specified privilege level, description, and password settings. Demonstrates basic user configuration including encryption settings and privilege levels.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/username.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_username\" \"example\" {\n  name                = \"user1\"\n  privilege           = 15\n  description         = \"User1 description\"\n  password_encryption = \"0\"\n  password            = \"MyPassword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading IOSXE Interface Port Channel Configuration in Terraform\nDESCRIPTION: This code snippet demonstrates how to use the iosxe_interface_port_channel data source to read the configuration of a port channel interface.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_port_channel.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_port_channel\" \"example\" {\n  name = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Reading IOSXE Community List Standard Configuration with Terraform\nDESCRIPTION: Example of using the iosxe_community_list_standard data source to read a Community List Standard configuration. The example demonstrates how to reference a specific community list by name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/community_list_standard.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_community_list_standard\" \"example\" {\n  name = \"CLS1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading BGP IPv4 Unicast Neighbor Configuration with Terraform IOSXE Provider\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bgp_ipv4_unicast_neighbor data source to read BGP IPv4 Unicast Neighbor configuration. It requires specifying the ASN and IP address of the neighbor.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp_ipv4_unicast_neighbor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp_ipv4_unicast_neighbor\" \"example\" {\n  asn = \"65000\"\n  ip  = \"3.3.3.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading BGP Neighbor Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bgp_neighbor data source to read BGP Neighbor configuration. It specifies the ASN and IP address of the neighbor to retrieve information about.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp_neighbor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp_neighbor\" \"example\" {\n  asn = \"65000\"\n  ip  = \"3.3.3.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VLAN Configuration with Terraform IOSXE Provider\nDESCRIPTION: Example showing how to create a VLAN with ID 123, name 'Vlan123', and enabled state using the IOSXE provider. Demonstrates basic VLAN configuration with essential parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vlan.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_vlan\" \"example\" {\n  vlan_id  = 123\n  name     = \"Vlan123\"\n  shutdown = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PIM on Loopback Interface with Terraform\nDESCRIPTION: Example of configuring Protocol Independent Multicast (PIM) settings on a Loopback interface using the iosxe_interface_pim resource. Demonstrates setting up sparse mode PIM with DR priority and various PIM-related parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_pim.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_pim\" \"example\" {\n  type              = \"Loopback\"\n  name              = \"100\"\n  passive           = false\n  dense_mode        = false\n  sparse_mode       = true\n  sparse_dense_mode = false\n  bfd               = false\n  border            = false\n  bsr_border        = false\n  dr_priority       = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Crypto IKEv2 Keyring Configuration in Cisco IOS XE with Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_crypto_ikev2_keyring data source to read the configuration of a Crypto IKEv2 Keyring named 'keyring1' in a Cisco IOS XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/crypto_ikev2_keyring.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_crypto_ikev2_keyring\" \"example\" {\n  name = \"keyring1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading PIM Configuration in Terraform\nDESCRIPTION: Example showing how to declare a data source to read PIM configuration from an IOS-XE device. This basic example demonstrates the minimal required configuration to fetch PIM settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/pim.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_pim\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Reading PIM VRF Configuration in Terraform\nDESCRIPTION: This example demonstrates how to use the iosxe_pim_vrf data source to read the PIM configuration for a specific VRF named 'VRF1'. The data source requires specifying the VRF name as a parameter.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/pim_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_pim_vrf\" \"example\" {\n  vrf = \"VRF1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flow Monitor Configuration in Cisco IOS XE using Terraform\nDESCRIPTION: This snippet demonstrates how to use the 'iosxe_flow_monitor' data source to read a Flow Monitor configuration named 'MON1' in Cisco IOS XE devices. It shows the basic structure for querying existing flow monitor settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/flow_monitor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_flow_monitor\" \"example\" {\n  name = \"MON1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TACACS Server with Terraform\nDESCRIPTION: Creates a TACACS server configuration with IPv4 address, timeout, encryption type, and server key. This example demonstrates setting up basic TACACS server authentication parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/tacacs_server.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_tacacs_server\" \"example\" {\n  name         = \"tacacs_10.10.15.13\"\n  address_ipv4 = \"10.10.15.13\"\n  timeout      = 4\n  encryption   = \"0\"\n  key          = \"123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOS-XE Policy Map with Bandwidth Class\nDESCRIPTION: Example of creating a policy map named POLICY1 with a class that sets bandwidth percentage. The configuration includes a description and a single class with bandwidth allocation of 10%.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/policy_map.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_policy_map\" \"example\" {\n  name        = \"POLICY1\"\n  description = \"My first policy-map\"\n  classes = [\n    {\n      name = \"CLASS1\"\n      actions = [\n        {\n          type              = \"bandwidth\"\n          bandwidth_percent = 10\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extended Access List Configuration with Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_access_list_extended data source to read an existing extended access list configuration named 'EACL1' from a Cisco IOS-XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/access_list_extended.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_access_list_extended\" \"example\" {\n  name = \"EACL1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading VLAN Filter Configuration in IOS-XE using Terraform\nDESCRIPTION: Example showing how to retrieve VLAN Filter configuration using the iosxe_vlan_filter data source. The word parameter specifies the filter name to read.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/vlan_filter.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_vlan_filter\" \"example\" {\n  word = \"VAM1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CDP Configuration Data in Terraform for IOS-XE\nDESCRIPTION: This code snippet demonstrates how to use the 'iosxe_cdp' data source to retrieve CDP configuration information from an IOS-XE device. It doesn't require any specific parameters and will fetch all available CDP data.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/cdp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_cdp\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Querying AAA Configuration using IOSXE Provider\nDESCRIPTION: Example showing how to use the iosxe_aaa data source to read AAA configuration from a Cisco device. This data source allows retrieving server group definitions, dynamic author settings, and interface configurations.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/aaa.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_aaa\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Reading AAA Accounting Configuration in IOS-XE\nDESCRIPTION: Example of using the iosxe_aaa_accounting data source to read AAA Accounting configuration from a Cisco IOS-XE device. This data source allows retrieving various accounting settings including exec, identity, and network configurations.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/aaa_accounting.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_aaa_accounting\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EVPN Settings with Terraform\nDESCRIPTION: Example Terraform configuration for setting up EVPN parameters including replication types, MAC/IP duplication settings, and router configurations. Demonstrates the basic structure for configuring EVPN features on an IOS-XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/evpn.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_evpn\" \"example\" {\n  replication_type_ingress  = false\n  replication_type_static   = true\n  replication_type_p2mp     = false\n  replication_type_mp2mp    = false\n  mac_duplication_limit     = 10\n  mac_duplication_time      = 100\n  ip_duplication_limit      = 10\n  ip_duplication_time       = 100\n  router_id_loopback        = 100\n  default_gateway_advertise = true\n  logging_peer_state        = true\n  route_target_auto_vni     = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefix List in IOS-XE with Terraform\nDESCRIPTION: Example of creating a prefix list configuration with permit rules, sequence numbers, and prefix length constraints. The configuration includes a prefix list named PREFIX_LIST_1 with a description and specific IP prefix matching criteria.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/prefix_list.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_prefix_list\" \"example\" {\n  prefixes = [\n    {\n      name   = \"PREFIX_LIST_1\"\n      seq    = 10\n      action = \"permit\"\n      ip     = \"10.0.0.0/8\"\n      ge     = 24\n      le     = 32\n    }\n  ]\n  prefix_list_description = [\n    {\n      name        = \"PREFIX_LIST_1\"\n      description = \"My prefix list\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading DHCP Configuration with Terraform in Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_dhcp data source to read DHCP configuration from a Cisco IOS XE device. It doesn't require any specific parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/dhcp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_dhcp\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Community List Expanded Configuration with Terraform IOS-XE Provider\nDESCRIPTION: This example demonstrates how to use the iosxe_community_list_expanded data source to retrieve information about a Community List Expanded configuration named 'CLE1' from a Cisco IOS-XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/community_list_expanded.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_community_list_expanded\" \"example\" {\n  name = \"CLE1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying BGP Address Family IPv4 Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bgp_address_family_ipv4 data source to retrieve BGP Address Family IPv4 configuration. It specifies the ASN and address family name as required parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp_address_family_ipv4.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp_address_family_ipv4\" \"example\" {\n  asn     = \"65000\"\n  af_name = \"unicast\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading AAA Authorization Configuration in IOS-XE with Terraform\nDESCRIPTION: Example showing how to read AAA Authorization configuration using the iosxe_aaa_authorization data source. This allows retrieving both exec and network authorization settings from an IOS-XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/aaa_authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_aaa_authorization\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOS-XE Errdisable Settings with Terraform\nDESCRIPTION: Example Terraform configuration for managing errdisable settings on a Cisco IOS-XE device. Includes detection causes, flap settings, recovery intervals, and recovery causes.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/errdisable.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_errdisable\" \"example\" {\n  detect_cause_all                       = true\n  detect_cause_dhcp_rate_limit           = true\n  detect_cause_dtp_flap                  = true\n  detect_cause_l2ptguard                 = true\n  detect_cause_link_flap                 = true\n  detect_cause_pppoe_ia_rate_limit       = true\n  detect_cause_loopdetect                = true\n  flap_setting_cause_dtp_flap_max_flaps  = 80\n  flap_setting_cause_dtp_flap_time       = 90\n  flap_setting_cause_link_flap_max_flaps = 80\n  flap_setting_cause_link_flap_time      = 90\n  flap_setting_cause_pagp_flap_max_flaps = 80\n  flap_setting_cause_pagp_flap_time      = 90\n  recovery_interval                      = 855\n  recovery_cause_all                     = true\n  recovery_cause_arp_inspection          = true\n  recovery_cause_bpduguard               = true\n  recovery_cause_dhcp_rate_limit         = true\n  recovery_cause_dtp_flap                = true\n  recovery_cause_l2ptguard               = true\n  recovery_cause_link_flap               = true\n  recovery_cause_port_mode_failure       = true\n  recovery_cause_pppoe_ia_rate_limit     = true\n  recovery_cause_psp                     = true\n  recovery_cause_psecure_violation       = true\n  recovery_cause_security_violation      = true\n  recovery_cause_udld                    = true\n  recovery_cause_loopdetect              = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AS Path Access List in Cisco IOS-XE using Terraform\nDESCRIPTION: This snippet demonstrates how to create an AS Path Access List using the iosxe_as_path_access_list resource. It sets up a list with a single entry that permits traffic matching the regex '^100$'.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/as_path_access_list.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_as_path_access_list\" \"example\" {\n  name = 10\n  entries = [\n    {\n      action = \"permit\"\n      regex  = \"^100$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving MSDP Configuration with Terraform\nDESCRIPTION: This example demonstrates how to use the iosxe_msdp data source to read the MSDP configuration from a Cisco IOSXE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/msdp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_msdp\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Querying BGP Address Family IPv4 VRF Configuration in Terraform for IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bgp_address_family_ipv4_vrf data source to retrieve BGP Address Family IPv4 VRF configuration. It requires specifying the ASN and address family name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp_address_family_ipv4_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp_address_family_ipv4_vrf\" \"example\" {\n  asn     = \"65000\"\n  af_name = \"unicast\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OSPF Configuration for an Interface in Terraform\nDESCRIPTION: Example showing how to use the iosxe_interface_ospf data source to read OSPF configuration for a Loopback interface. This snippet demonstrates the minimal required parameters (type and name) to query the OSPF settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_ospf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_ospf\" \"example\" {\n  type = \"Loopback\"\n  name = \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading IOSXE Policy Map Event Configuration with Terraform\nDESCRIPTION: This example demonstrates how to use the iosxe_policy_map_event data source to retrieve information about a policy map event. It specifies both the policy map name and the event type to query.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/policy_map_event.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_policy_map_event\" \"example\" {\n  name       = \"dot1x_policy\"\n  event_type = \"authentication-success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IOS-XE Clock Settings with Terraform\nDESCRIPTION: Example of configuring clock settings including summer time parameters using the iosxe_clock resource. Demonstrates setting up recurring summer time rules with specific start/end times and offset.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/clock.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_clock\" \"example\" {\n  calendar_valid                      = true\n  summer_time_zone                    = \"CET\"\n  summer_time_recurring               = true\n  summer_time_recurring_start_week    = \"1\"\n  summer_time_recurring_start_weekday = \"Mon\"\n  summer_time_recurring_start_month   = \"Jan\"\n  summer_time_recurring_start_time    = \"00:00\"\n  summer_time_recurring_end_week      = \"1\"\n  summer_time_recurring_end_weekday   = \"Mon\"\n  summer_time_recurring_end_month     = \"Dec\"\n  summer_time_recurring_end_time      = \"00:00\"\n  summer_time_recurring_offset        = 60\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flow Monitor Configuration in IOS-XE using Terraform\nDESCRIPTION: Example of creating a flow monitor named MON1 with description, exporter configuration, cache timeout, and record settings. Demonstrates basic flow monitor resource configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/flow_monitor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_flow_monitor\" \"example\" {\n  name        = \"MON1\"\n  description = \"My monitor\"\n  exporters = [\n    {\n      name = \"EXPORTER1\"\n    }\n  ]\n  cache_timeout_active = 60\n  record               = \"FNF1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading IOS-XE Class Map Configuration with Terraform\nDESCRIPTION: Example showing how to read a Class Map configuration named 'CM1' using the iosxe_class_map data source. This allows retrieving Class Map details including description, matching criteria, and authorization settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/class_map.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_class_map\" \"example\" {\n  name = \"CM1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Saving IOS-XE Device Configuration with Terraform\nDESCRIPTION: Example showing basic usage of the iosxe_save_config resource to save running configuration to startup configuration. This is equivalent to executing 'copy running-config startup-config' on the device CLI.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/save_config.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_save_config\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Reading IOS-XE Policy Map Configuration with Terraform\nDESCRIPTION: Example showing how to read a Policy Map configuration named 'POLICY1' using the iosxe_policy_map data source.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/policy_map.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_policy_map\" \"example\" {\n  name = \"POLICY1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Static Route Configuration in IOS-XE\nDESCRIPTION: Example of using the iosxe_static_route data source to read static route configuration. The example shows how to query a specific route using prefix and mask parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/static_route.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_static_route\" \"example\" {\n  prefix = \"5.5.5.5\"\n  mask   = \"255.255.255.255\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Radius Server Configuration in IOSXE using Terraform\nDESCRIPTION: This example demonstrates how to use the iosxe_radius_server data source to read the Radius Server configuration from a Cisco IOSXE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/radius_server.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_radius_server\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dot1x Settings with Terraform\nDESCRIPTION: Example of configuring Dot1x authentication settings including credentials profiles, EAPOL behavior, and system authentication control. Demonstrates setting up a credentials profile with username/password authentication and PKI trustpoint.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/dot1x.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_dot1x\" \"example\" {\n  auth_fail_eapol = true\n  credentials = [\n    {\n      profile_name   = \"profile1\"\n      description    = \"credential_profile_name\"\n      username       = \"username1\"\n      password_type  = \"0\"\n      password       = \"password123\"\n      pki_trustpoint = \"trustpoint1\"\n      anonymous_id   = \"1\"\n    }\n  ]\n  critical_eapol_config_block     = true\n  test_timeout                    = 1000\n  logging_verbose                 = true\n  supplicant_controlled_transient = true\n  supplicant_force_multicast      = true\n  system_auth_control             = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OSPFv3 on Loopback Interface with Terraform\nDESCRIPTION: Example of configuring OSPFv3 settings on a Loopback interface using the iosxe_interface_ospfv3 resource. Sets network type to point-to-point and defines a static cost value of 1000.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_ospfv3.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_interface_ospfv3\" \"example\" {\n  type                             = \"Loopback\"\n  name                             = \"1\"\n  network_type_broadcast           = false\n  network_type_non_broadcast       = false\n  network_type_point_to_multipoint = false\n  network_type_point_to_point      = true\n  cost                             = 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Interface VLAN Configuration with Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_interface_vlan data source to read the configuration of a VLAN interface. It specifies the VLAN number using the 'name' attribute.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_vlan.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_vlan\" \"example\" {\n  name = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Template Configuration in Terraform IOSXE Provider\nDESCRIPTION: This example demonstrates how to read a Service Template configuration from a Cisco IOSXE device using the iosxe_service_template data source. It specifies the required 'name' parameter to identify the template to retrieve.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/service_template.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_service_template\" \"example\" {\n  name = \"MY_TEMPLATE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading UDLD Configuration in Terraform IOSXE Provider\nDESCRIPTION: Example showing how to read UDLD configuration using the IOSXE Terraform provider data source. The data source allows retrieving UDLD settings like aggressive mode, enable status, message time, and recovery interval.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/udld.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_udld\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving NTP Configuration from Cisco IOS-XE Devices\nDESCRIPTION: This example demonstrates how to use the iosxe_ntp data source to read NTP configuration from a Cisco IOS-XE device. The data source requires no arguments beyond the optional device parameter.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/ntp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_ntp\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ARP Settings with Terraform\nDESCRIPTION: Example showing how to configure basic ARP settings including incomplete entries limit and proxy ARP disable flag.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/arp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_arp\" \"example\" {\n  incomplete_entries = 10\n  proxy_disable      = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BGP Address Family L2VPN in Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to create a BGP Address Family L2VPN configuration using Terraform. It specifies the ASN and address family name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_address_family_l2vpn.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_bgp_address_family_l2vpn\" \"example\" {\n  asn     = \"65000\"\n  af_name = \"evpn\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Crypto IKEv2 Proposal Data in Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_crypto_ikev2_proposal data source to retrieve information about a specific IKEv2 proposal named 'PROPOSAL1' in a Cisco IOS XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/crypto_ikev2_proposal.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_crypto_ikev2_proposal\" \"example\" {\n  name = \"PROPOSAL1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Interface Loopback Configuration in Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_interface_loopback data source to query the configuration of a loopback interface. It specifies the interface name as a required parameter.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_loopback.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_loopback\" \"example\" {\n  name = 100\n}\n```\n\n----------------------------------------\n\nTITLE: Reading BFD Configuration Example\nDESCRIPTION: Basic example showing how to read BFD configuration using the iosxe_bfd data source. This allows retrieval of BFD settings including IPv4/IPv6 configurations, VRF settings, and timer values.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bfd.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bfd\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Reading SNMP Server Configuration in Terraform with IOS-XE Provider\nDESCRIPTION: Example showing how to use the iosxe_snmp_server data source to read SNMP server configuration from a Cisco IOS-XE device. This data source doesn't require any configuration parameters aside from an optional device name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/snmp_server.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_snmp_server\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Community List in IOS-XE\nDESCRIPTION: Example Terraform configuration for creating a standard community list with permit and deny entries. Demonstrates setting up community list 'CLS1' with specific permit and deny community values.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/community_list_standard.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_community_list_standard\" \"example\" {\n  name           = \"CLS1\"\n  deny_entries   = [\"65000:500\"]\n  permit_entries = [\"65000:501\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested List RESTCONF Resource in Terraform for IOS-XE\nDESCRIPTION: Shows how to configure a more complex RESTCONF resource with nested lists. It sets IP source routing and defines a VRF.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/restconf.md#2025-04-21_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_restconf\" \"nested_list\" {\n  path = \"Cisco-IOS-XE-native:native/ip\"\n  attributes = {\n    source-route = \"true\"\n  }\n  lists = [{\n    name = \"vrf\"\n    key  = \"name\"\n    items = [\n      {\n        name = \"VRF1\"\n      }\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading BGP Address Family IPv6 VRF Configuration in Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bgp_address_family_ipv6_vrf data source to read BGP Address Family IPv6 VRF configuration. It specifies the ASN and address family name as required parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp_address_family_ipv6_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp_address_family_ipv6_vrf\" \"example\" {\n  asn     = \"65000\"\n  af_name = \"unicast\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Radius Server Configuration with Terraform in IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_radius data source to retrieve information about a specific Radius server configuration in Cisco IOS-XE. It requires specifying the name of the Radius server configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/radius.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_radius\" \"example\" {\n  name = \"radius_10.10.15.12\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading SNMP Server User Configuration in Terraform IOS-XE Provider\nDESCRIPTION: Example of using the iosxe_snmp_server_user data source to read SNMP server user configuration. The configuration requires a username and group name to identify the SNMP user.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/snmp_server_user.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_snmp_server_user\" \"example\" {\n  username = \"USER1\"\n  grpname  = \"GROUP1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading BGP Address Family L2VPN Configuration in Terraform\nDESCRIPTION: Example of using the iosxe_bgp_address_family_l2vpn data source to read BGP Address Family L2VPN configuration. Required parameters include ASN (Autonomous System Number) and address family name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp_address_family_l2vpn.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp_address_family_l2vpn\" \"example\" {\n  asn     = \"65000\"\n  af_name = \"evpn\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Banner Login Information via RESTCONF in IOS-XE using Terraform\nDESCRIPTION: This snippet demonstrates how to use the 'iosxe_restconf' data source to retrieve the login banner configuration from a Cisco IOS-XE device. It specifies the RESTCONF path to the banner login information.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/restconf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_restconf\" \"example\" {\n  path = \"Cisco-IOS-XE-native:native/banner/login\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VLAN with EVPN in IOS-XE\nDESCRIPTION: Example Terraform configuration demonstrating how to create a VLAN with EVPN instance and VNI settings. This snippet shows the basic resource configuration including VLAN ID and EVPN parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vlan_configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_vlan_configuration\" \"example\" {\n  vlan_id           = 123\n  evpn_instance     = 123\n  evpn_instance_vni = 10123\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing VRF Configuration\nDESCRIPTION: Command for importing an existing VRF configuration into Terraform state management. This allows managing pre-existing VRF configurations through Terraform.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vrf.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_vrf.example \"Cisco-IOS-XE-native:native/vrf/definition=VRF22\"\n```\n\n----------------------------------------\n\nTITLE: Reading ARP Configuration with IOS-XE Provider\nDESCRIPTION: Example of using the iosxe_arp data source to read ARP configuration from a Cisco IOS-XE device. This basic example shows the minimal configuration needed to query ARP settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/arp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_arp\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Reading VRF Configuration with Terraform IOSXE Provider\nDESCRIPTION: This snippet demonstrates how to use the iosxe_vrf data source to read VRF configuration. It specifies the VRF name as 'VRF22'.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_vrf\" \"example\" {\n  name = \"VRF22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Crypto IPSec Profile Data in Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_crypto_ipsec_profile data source to read a Crypto IPSec Profile configuration. It specifies the name of the profile to retrieve.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/crypto_ipsec_profile.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_crypto_ipsec_profile\" \"example\" {\n  name = \"vpn200\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Errdisable Configuration in Cisco IOS XE using Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_errdisable data source to retrieve Errdisable configuration from a Cisco IOS XE device. It doesn't require any parameters and will return all available Errdisable settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/errdisable.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_errdisable\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CTS Authorization List in IOS-XE\nDESCRIPTION: Example of configuring CTS authorization using a Tacacs group in IOS-XE. This resource allows setting the local authorization list for CTS authentication.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/cts.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_cts\" \"example\" {\n  authorization_list = \"Tacacs-GROUP\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Static Route Configuration in IOS-XE\nDESCRIPTION: Shows the command for importing an existing static route configuration into Terraform state management. The import path follows the IOS-XE native format for route identification.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/static_route.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_static_route.example \"Cisco-IOS-XE-native:native/ip/route/ip-route-interface-forwarding-list=5.5.5.5,255.255.255.255\"\n```\n\n----------------------------------------\n\nTITLE: Reading NVE Interface Configuration in IOSXE\nDESCRIPTION: Example shows how to read the configuration of an NVE interface using the iosxe_interface_nve data source. The name parameter specifies the interface number to query.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_nve.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_nve\" \"example\" {\n  name = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Reading BFD Template Single Hop Configuration in Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bfd_template_single_hop data source to read a BFD Template Single Hop configuration. It specifies the name of the template to be read.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bfd_template_single_hop.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bfd_template_single_hop\" \"example\" {\n  name = \"SH-TEMPLATE-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Port Channel Subinterface Configuration with Terraform in IOS-XE\nDESCRIPTION: This example demonstrates how to use the iosxe_interface_port_channel_subinterface data source to retrieve the configuration of a specific port channel subinterface by specifying its name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_port_channel_subinterface.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_port_channel_subinterface\" \"example\" {\n  name = \"10.666\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Interface OSPFv3 Configuration with Terraform in Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_interface_ospfv3 data source to read the OSPFv3 configuration for a specific interface. It requires specifying the interface type and name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_ospfv3.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_ospfv3\" \"example\" {\n  type = \"Loopback\"\n  name = \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VLAN Group Configuration in IOS-XE\nDESCRIPTION: Example of creating a VLAN group named 'GROUP1' with a single VLAN ID using Terraform. The configuration demonstrates basic VLAN group creation with minimal required parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vlan_group.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_vlan_group\" \"example\" {\n  name       = \"GROUP1\"\n  vlan_lists = [1]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AAA Authorization Configuration in Terraform\nDESCRIPTION: This command shows how to import an existing AAA Authorization configuration into Terraform state. It specifies the resource type, local resource name, and the path to the configuration in the Cisco IOS XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/aaa_authorization.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_aaa_authorization.example \"Cisco-IOS-XE-native:native/aaa/Cisco-IOS-XE-aaa:authorization\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving VLAN Configuration Data in Cisco IOS XE with Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_vlan_configuration data source to retrieve VLAN configuration information. It specifies a VLAN ID to query.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/vlan_configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_vlan_configuration\" \"example\" {\n  vlan_id = 123\n}\n```\n\n----------------------------------------\n\nTITLE: Reading VLAN Configuration Example in Terraform\nDESCRIPTION: Example shows how to read a VLAN configuration using the iosxe_vlan data source. The vlan_id parameter specifies which VLAN to read.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/vlan.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_vlan\" \"example\" {\n  vlan_id = 123\n}\n```\n\n----------------------------------------\n\nTITLE: Reading SNMP Server Group Configuration in Terraform for IOSXE Devices\nDESCRIPTION: Example of using the iosxe_snmp_server_group data source to read SNMP server group configuration from a Cisco IOSXE device. This snippet shows how to retrieve information for a specific group named 'GROUP1'.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/snmp_server_group.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_snmp_server_group\" \"example\" {\n  name = \"GROUP1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IOSXE Line Configuration in Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_line data source to retrieve Line configuration information. It doesn't require any specific parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/line.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_line\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Interface Tunnel Configuration with Terraform IOSXE Provider\nDESCRIPTION: This code demonstrates how to use the iosxe_interface_tunnel data source to read a tunnel interface with ID 90 from a Cisco IOSXE device. The example simply specifies the tunnel interface name (number) as a required parameter.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_tunnel.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_tunnel\" \"example\" {\n  name = 90\n}\n```\n\n----------------------------------------\n\nTITLE: Querying IOSXE Interface Ethernet Configuration in Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_interface_ethernet data source to retrieve configuration details for a GigabitEthernet interface on a Cisco IOSXE device. It specifies the interface type and name as required parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_ethernet.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_ethernet\" \"example\" {\n  type = \"GigabitEthernet\"\n  name = \"3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Interface Loopback Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet shows the command to import an existing Interface Loopback configuration into Terraform state. It uses the Cisco IOS-XE YANG model path to identify the specific loopback interface.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_loopback.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_loopback.example \"Cisco-IOS-XE-native:native/interface/Loopback=100\"\n```\n\n----------------------------------------\n\nTITLE: Reading OSPF Configuration with Terraform IOS-XE Provider\nDESCRIPTION: Example showing how to read OSPF configuration using the iosxe_ospf data source with a specific process ID.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/ospf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_ospf\" \"example\" {\n  process_id = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Reading OSPF VRF Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_ospf_vrf data source to read OSPF VRF configuration. It specifies the process ID and VRF name to retrieve the corresponding OSPF configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/ospf_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_ospf_vrf\" \"example\" {\n  process_id = 2\n  vrf        = \"VRF1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Logging Configuration using IOSXE Terraform Provider\nDESCRIPTION: This snippet demonstrates how to use the iosxe_logging data source to retrieve logging configuration from a Cisco IOS XE device. It shows the basic structure of the data source block without any specific attributes.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/logging.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_logging\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OSPF Configuration\nDESCRIPTION: Command for importing existing OSPF configuration into Terraform state using the IOS-XE YANG path.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/ospf.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_ospf.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-ospf:router-ospf/ospf/process-id=1\"\n```\n\n----------------------------------------\n\nTITLE: Querying Route Map Configuration in IOS-XE using Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_route_map data source to retrieve information about a specific route map named 'RM1' in an IOS-XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/route_map.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_route_map\" \"example\" {\n  name = \"RM1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing IOS-XE Interface Tunnel Configuration\nDESCRIPTION: Command for importing an existing tunnel interface configuration into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_tunnel.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_tunnel.example \"Cisco-IOS-XE-native:native/interface/Tunnel=90\"\n```\n\n----------------------------------------\n\nTITLE: Importing BGP Neighbor Configuration in Cisco IOS-XE\nDESCRIPTION: Command for importing existing BGP neighbor configuration into Terraform state. The import path follows the YANG model structure.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_neighbor.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp_neighbor.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/neighbor=3.3.3.3\"\n```\n\n----------------------------------------\n\nTITLE: Querying BGP IPv4 Unicast VRF Neighbor Configuration in Terraform\nDESCRIPTION: This snippet demonstrates how to use the 'iosxe_bgp_ipv4_unicast_vrf_neighbor' data source to read BGP IPv4 Unicast VRF Neighbor configuration. It requires specifying the ASN, VRF name, and IP address of the neighbor.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp_ipv4_unicast_vrf_neighbor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp_ipv4_unicast_vrf_neighbor\" \"example\" {\n  asn = \"65000\"\n  vrf = \"VRF1\"\n  ip  = \"3.3.3.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading IPv4 Host Transport Configuration with Terraform\nDESCRIPTION: Example usage of the iosxe_logging_ipv4_host_transport data source to read logging configuration for a specific IPv4 host. The data source requires an IPv4 host address and can retrieve transport configurations including TCP, TLS, and UDP port settings.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/logging_ipv4_host_transport.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_logging_ipv4_host_transport\" \"example\" {\n  ipv4_host = \"2.2.2.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Policy Map Event Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet shows the command to import an existing policy map event configuration into Terraform state. It specifies the resource type, resource name, and the unique identifier for the policy map event.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/policy_map_event.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_policy_map_event.example \"Cisco-IOS-XE-native:native/policy/Cisco-IOS-XE-policy:policy-map=dot1x_policy/event=authentication-success\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Crypto IPSec Transform Set Configuration in Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the 'iosxe_crypto_ipsec_transform_set' data source to read a specific IPSec transform set configuration. It requires the name of the transform set as input and can retrieve various attributes of the configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/crypto_ipsec_transform_set.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_crypto_ipsec_transform_set\" \"example\" {\n  name = \"TEST\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IOSXE SNMP Server Configuration with Terraform\nDESCRIPTION: Command for importing an existing IOSXE SNMP server configuration into Terraform state management. This allows managing existing SNMP configurations as code by referencing the Cisco IOS-XE native path.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/snmp_server.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_snmp_server.example \"Cisco-IOS-XE-native:native/snmp-server\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Crypto IKEv2 Policy in Terraform for Cisco IOS XE\nDESCRIPTION: This shell command shows how to import an existing Crypto IKEv2 Policy into Terraform state. It specifies the resource type, name, and the full path of the object in the Cisco IOS XE configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ikev2_policy.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_crypto_ikev2_policy.example \"Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/policy=policy1\"\n```\n\n----------------------------------------\n\nTITLE: Reading IOS-XE Service Configuration with Terraform\nDESCRIPTION: Example of using the iosxe_service data source to read service configuration from an IOS-XE device. This data source allows querying various service settings like call-home, DHCP, password encryption, and timestamp configurations.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/service.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_service\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Reading TACACS Server Configuration in IOSXE using Terraform\nDESCRIPTION: Example of using the iosxe_tacacs_server data source to read TACACS server configuration. The data source requires a name parameter to identify the specific TACACS server configuration to retrieve.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/tacacs_server.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_tacacs_server\" \"example\" {\n  name = \"tacacs_10.10.15.13\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading IOS-XE IPv6 Host Logging Configuration with Terraform\nDESCRIPTION: Example showing how to read logging configuration for an IPv6 host using the iosxe_logging_ipv6_host_transport data source. The configuration specifies the IPv6 host address to query.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/logging_ipv6_host_transport.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_logging_ipv6_host_transport\" \"example\" {\n  ipv6_host = \"2001::1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IOS-XE Service Configuration\nDESCRIPTION: Command showing how to import existing service configuration from a Cisco IOS-XE device into Terraform state management using the terraform import command.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/service.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_service.example \"Cisco-IOS-XE-native:native/service\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving MDT Subscription Data in Terraform for Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_mdt_subscription data source to retrieve MDT subscription configuration. It specifies a subscription_id of 101 to fetch the corresponding subscription details.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/mdt_subscription.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_mdt_subscription\" \"example\" {\n  subscription_id = 101\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BFD Configuration in IOS-XE using Terraform\nDESCRIPTION: This snippet shows how to import existing BFD configuration into Terraform state. It uses the Cisco-IOS-XE-native:native/bfd path to identify the resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bfd.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bfd.example \"Cisco-IOS-XE-native:native/bfd\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Crypto IKEv2 Proposal Configuration into Terraform\nDESCRIPTION: This shell command shows how to import an existing Crypto IKEv2 Proposal configuration into Terraform state. It specifies the resource type, resource name, and the unique identifier for the proposal.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ikev2_proposal.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_crypto_ikev2_proposal.example \"Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/proposal=PROPOSAL1\"\n```\n\n----------------------------------------\n\nTITLE: Reading Clock Configuration with iosxe_clock Data Source in Terraform\nDESCRIPTION: This example demonstrates how to use the iosxe_clock data source to read clock configuration from a Cisco IOS-XE device. The data source retrieves various clock settings including calendar time validity and summer time configurations.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/clock.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_clock\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Logging IPv6 Host VRF Transport Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_logging_ipv6_host_vrf_transport data source to read the Logging IPv6 Host VRF Transport configuration. It requires specifying the IPv6 host address and VRF name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/logging_ipv6_host_vrf_transport.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_logging_ipv6_host_vrf_transport\" \"example\" {\n  ipv6_host = \"2001::1\"\n  vrf       = \"VRF1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NTP Configuration\nDESCRIPTION: Command for importing existing NTP configuration into Terraform state using the Cisco IOS-XE YANG path.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/ntp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_ntp.example \"Cisco-IOS-XE-native:native/ntp\"\n```\n\n----------------------------------------\n\nTITLE: Reading EVPN Instance Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_evpn_instance data source to read EVPN Instance configuration. It requires specifying the EVPN instance number.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/evpn_instance.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_evpn_instance\" \"example\" {\n  evpn_instance_num = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BGP IPv4 Unicast Neighbor Configuration\nDESCRIPTION: Command for importing existing BGP IPv4 Unicast Neighbor configuration into Terraform state using the YANG path.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_ipv4_unicast_neighbor.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp_ipv4_unicast_neighbor.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/address-family/no-vrf/ipv4=unicast/ipv4-unicast/neighbor=3.3.3.3\"\n```\n\n----------------------------------------\n\nTITLE: Importing BGP L2VPN EVPN Neighbor Configuration in Cisco IOS-XE\nDESCRIPTION: This shell command demonstrates how to import an existing BGP L2VPN EVPN Neighbor configuration into Terraform. It specifies the resource type, resource name, and the full path of the object in the device's configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_l2vpn_evpn_neighbor.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp_l2vpn_evpn_neighbor.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/address-family/no-vrf/l2vpn=evpn/l2vpn-evpn/neighbor=3.3.3.3\"\n```\n\n----------------------------------------\n\nTITLE: Importing IOS-XE Route Map Configuration in Terraform\nDESCRIPTION: Command syntax for importing an existing route map configuration into Terraform state. Uses the route map name as the identifier.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/route_map.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_route_map.example \"Cisco-IOS-XE-native:native/route-map=RM1\"\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Schema for SNMP Communities in Markdown\nDESCRIPTION: This snippet describes the nested schema for SNMP communities, specifying read-only attributes such as access list name, IPv6 named access list, community name, permission, and MIB view restriction.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/snmp_server.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Nested Schema for `snmp_communities`\n\nRead-Only:\n\n- `access_list_name` (String) Access-list name\n- `ipv6` (String) Specify IPv6 Named Access-List\n- `name` (String)\n- `permission` (String)\n- `view` (String) Restrict this community to a named MIB view\n```\n\n----------------------------------------\n\nTITLE: Importing IOS-XE Logging Configuration\nDESCRIPTION: Command for importing existing IOS-XE logging configuration into Terraform state.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/logging.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_logging.example \"Cisco-IOS-XE-native:native/logging\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving MSDP VRF Configuration using Terraform in Cisco IOS XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_msdp_vrf data source to read MSDP VRF configuration. It specifies the VRF name as 'VRF1' to retrieve its configuration details.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/msdp_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_msdp_vrf\" \"example\" {\n  vrf = \"VRF1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IOSXE System Configuration\nDESCRIPTION: Command for importing existing IOSXE system configuration into Terraform state.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/system.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_system.example \"Cisco-IOS-XE-native:native\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Crypto IPSec Transform Set into Terraform for Cisco IOS XE\nDESCRIPTION: This command shows how to import an existing Crypto IPSec Transform Set configuration into Terraform state. It specifies the resource type, resource name, and the full path of the object in the Cisco IOS XE configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ipsec_transform_set.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_crypto_ipsec_transform_set.example \"Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ipsec/transform-set=TEST\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing VLAN Configuration in Terraform IOSXE Provider\nDESCRIPTION: Command for importing an existing VLAN configuration into Terraform state. Uses the VLAN's full path identifier in the IOS-XE configuration hierarchy.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vlan.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_vlan.example \"Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:vlan-list=123\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing VLAN Access Map Configuration\nDESCRIPTION: Shell command for importing an existing VLAN access map configuration into Terraform state. Shows the import syntax using the full path identifier for the VLAN access map resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vlan_access_map.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_vlan_access_map.example \"Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:access-map=VAM1,10\"\n```\n\n----------------------------------------\n\nTITLE: Reading IOSXE Static Route VRF Configuration with Terraform\nDESCRIPTION: Example of using the iosxe_static_route_vrf data source to read VRF routing configuration. This snippet shows how to specify the VRF name to query its configuration details.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/static_route_vrf.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_static_route_vrf\" \"example\" {\n  vrf = \"VRF1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Class Map Configuration in Terraform\nDESCRIPTION: This snippet shows the command to import an existing Class Map configuration into Terraform state. It uses the full path of the object in the Cisco IOS-XE native model as the import identifier.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/class_map.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_class_map.example \"Cisco-IOS-XE-native:native/policy/Cisco-IOS-XE-policy:class-map=CM1\"\n```\n\n----------------------------------------\n\nTITLE: Reading IOSXE Interface PIM Configuration with Terraform\nDESCRIPTION: Example showing how to use the iosxe_interface_pim data source to read PIM configuration for a Loopback interface. Demonstrates basic usage with required type and name parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_pim.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_pim\" \"example\" {\n  type = \"Loopback\"\n  name = \"100\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Line Configuration in Cisco IOS-XE using Terraform\nDESCRIPTION: This shell command demonstrates how to import an existing line configuration from a Cisco IOS-XE device into Terraform. It uses the 'terraform import' command with the specified resource path.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/line.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_line.example \"Cisco-IOS-XE-native:native/line\"\n```\n\n----------------------------------------\n\nTITLE: Importing BGP Address Family IPv6 Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet shows the command to import an existing BGP Address Family IPv6 configuration into Terraform state. It specifies the resource type, resource name, and the path of the object in the device's configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_address_family_ipv6.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp_address_family_ipv6.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/address-family/no-vrf/ipv6=unicast\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing IOSXE Username Configuration\nDESCRIPTION: Command for importing an existing username configuration into Terraform state management. Uses the Cisco IOS-XE native path format for resource identification.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/username.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_username.example \"Cisco-IOS-XE-native:native/username=user1\"\n```\n\n----------------------------------------\n\nTITLE: Importing Interface PIM Configuration with Terraform\nDESCRIPTION: Command for importing existing PIM interface configuration into Terraform state. Specifies the import path format for the iosxe_interface_pim resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_pim.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_pim.example \"Cisco-IOS-XE-native:native/interface/Loopback=100/ip/pim\"\n```\n\n----------------------------------------\n\nTITLE: Importing VLAN Configuration in IOS-XE\nDESCRIPTION: Shell command for importing existing VLAN configuration into Terraform state. The import path follows the Cisco IOS-XE native configuration format.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vlan_configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_vlan_configuration.example \"Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:configuration=123\"\n```\n\n----------------------------------------\n\nTITLE: Reading Access List Standard Configuration in Cisco IOS XE with Terraform\nDESCRIPTION: This Terraform code snippet demonstrates how to use the iosxe_access_list_standard data source to read an Access List Standard configuration named 'SACL1' from a Cisco IOS XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/access_list_standard.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_access_list_standard\" \"example\" {\n  name = \"SACL1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Flow Monitor Configuration into Terraform\nDESCRIPTION: Command for importing an existing flow monitor configuration from an IOS-XE device into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/flow_monitor.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_flow_monitor.example \"Cisco-IOS-XE-native:native/flow/Cisco-IOS-XE-flow:monitor=MON1\"\n```\n\n----------------------------------------\n\nTITLE: Importing existing AAA configuration in Terraform for Cisco IOS XE\nDESCRIPTION: This shell command demonstrates how to import an existing AAA configuration into Terraform state. It uses the iosxe_aaa resource and specifies the Cisco IOS XE native path for the AAA configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/aaa.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_aaa.example \"Cisco-IOS-XE-native:native/aaa\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Radius Server Configuration\nDESCRIPTION: Command for importing an existing Radius Server configuration into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/radius_server.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_radius_server.example \"Cisco-IOS-XE-native:native/radius-server\"\n```\n\n----------------------------------------\n\nTITLE: Importing Interface OSPF Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This shell command demonstrates how to import an existing Interface OSPF configuration into Terraform state. It specifies the resource type, resource name, and the IOS-XE path for the OSPF configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_ospf.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_ospf.example \"Cisco-IOS-XE-native:native/interface/Loopback=1/ip/Cisco-IOS-XE-ospf:router-ospf/ospf\"\n```\n\n----------------------------------------\n\nTITLE: Importing IOSXE Template Configuration - Shell\nDESCRIPTION: Command syntax for importing an existing IOSXE template configuration into Terraform state management. The import path must specify the full YANG path to the template resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/template.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_template.example \"Cisco-IOS-XE-native:native/template/Cisco-IOS-XE-template:template_details=TEMP1\"\n```\n\n----------------------------------------\n\nTITLE: Querying BGP IPv6 Unicast Neighbor Configuration in Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bgp_ipv6_unicast_neighbor data source to retrieve BGP IPv6 Unicast Neighbor configuration. It specifies the ASN and IP address of the neighbor.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp_ipv6_unicast_neighbor.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp_ipv6_unicast_neighbor\" \"example\" {\n  asn = \"65000\"\n  ip  = \"3.3.3.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Logging IPv4 Host Transport Configuration\nDESCRIPTION: Command for importing an existing logging IPv4 host transport configuration into Terraform state management. Uses the YANG model path to identify the resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/logging_ipv4_host_transport.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_logging_ipv4_host_transport.example \"Cisco-IOS-XE-native:native/logging/host/ipv4-host-transport-list=2.2.2.2\"\n```\n\n----------------------------------------\n\nTITLE: Importing AS Path Access List Configuration in Cisco IOS-XE using Terraform\nDESCRIPTION: This snippet shows the syntax for importing an existing AS Path Access List configuration into Terraform state. It uses the terraform import command with the specified resource address and import ID.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/as_path_access_list.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_as_path_access_list.example \"Cisco-IOS-XE-native:native/ip/as-path/Cisco-IOS-XE-bgp:access-list=10\"\n```\n\n----------------------------------------\n\nTITLE: Importing Extended ACL Configuration in IOS-XE\nDESCRIPTION: Shell command for importing an existing extended access list configuration into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/access_list_extended.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_access_list_extended.example \"Cisco-IOS-XE-native:native/ip/access-list/Cisco-IOS-XE-acl:extended=EACL1\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Flow Exporter Configuration in IOS-XE\nDESCRIPTION: Shell command for importing an existing Flow Exporter configuration into Terraform state. Uses the YANG path format for resource identification.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/flow_exporter.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_flow_exporter.example \"Cisco-IOS-XE-native:native/flow/Cisco-IOS-XE-flow:exporter=EXPORTER1\"\n```\n\n----------------------------------------\n\nTITLE: Importing an Ethernet Interface Configuration in Terraform\nDESCRIPTION: Example command for importing an existing Ethernet interface configuration into Terraform state. This allows managing the interface with Terraform after initial manual configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_ethernet.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_ethernet.example \"Cisco-IOS-XE-native:native/interface/GigabitEthernet=3\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Radius Configuration\nDESCRIPTION: Command for importing an existing Radius server configuration into Terraform state management. Uses the full path identifier for the Radius server resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/radius.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_radius.example \"Cisco-IOS-XE-native:native/radius/Cisco-IOS-XE-aaa:server=radius_10.10.15.12\"\n```\n\n----------------------------------------\n\nTITLE: SNMP Configuration Parameters\nDESCRIPTION: Comprehensive list of read-only SNMP configuration parameters including trap enablement flags, interface configurations, and system properties. These parameters define the complete SNMP configuration state for an IOS-XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/snmp_server.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Read-Only\n\n- `chassis_id` (String) String to uniquely identify this chassis\n- `contact` (String) Text for mib object sysContact\n- `contexts` (Attributes List) Create/Delete a context apart from default\n[...remaining attributes omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Importing Port Channel Interface Configuration\nDESCRIPTION: Command for importing existing Port Channel interface configuration into Terraform state. Uses the interface path in Cisco IOS-XE native format.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_port_channel.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_port_channel.example \"Cisco-IOS-XE-native:native/interface/Port-channel=10\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Dot1x Configuration\nDESCRIPTION: Command for importing an existing Dot1x configuration into Terraform state using the YANG path.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/dot1x.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_dot1x.example \"Cisco-IOS-XE-native:native/dot1x\"\n```\n\n----------------------------------------\n\nTITLE: Importing BGP Address Family IPv4 Configuration in Terraform for IOS-XE\nDESCRIPTION: This shell command demonstrates how to import an existing BGP Address Family IPv4 configuration into Terraform state. It specifies the resource name and the path to the configuration in the IOS-XE device's data model.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_address_family_ipv4.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp_address_family_ipv4.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/address-family/no-vrf/ipv4=unicast\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Interface Switchport Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This command shows how to import an existing interface switchport configuration into Terraform state. It specifies the resource type, resource name, and the path of the object in the Cisco IOS-XE configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_switchport.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_switchport.example \"Cisco-IOS-XE-native:native/interface/GigabitEthernet=1%2F0%2F3/switchport-config/switchport\"\n```\n\n----------------------------------------\n\nTITLE: Importing Service Template Configuration\nDESCRIPTION: Shell command for importing an existing service template configuration into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/service_template.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_service_template.example \"Cisco-IOS-XE-native:native/Cisco-IOS-XE-switch:service-template=MY_TEMPLATE\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing MDT Subscription Configuration\nDESCRIPTION: Command for importing an existing MDT subscription configuration into Terraform state management using the subscription ID.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/mdt_subscription.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_mdt_subscription.example \"Cisco-IOS-XE-mdt-cfg:mdt-config-data/mdt-subscription=101\"\n```\n\n----------------------------------------\n\nTITLE: Importing IOSXE ARP Configuration\nDESCRIPTION: Command for importing existing ARP configuration into Terraform state.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/arp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_arp.example \"Cisco-IOS-XE-native:native/ip/arp\"\n```\n\n----------------------------------------\n\nTITLE: Importing BGP IPv4 Unicast VRF Neighbor Configuration in IOS-XE\nDESCRIPTION: Command for importing an existing BGP IPv4 Unicast VRF Neighbor configuration into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_ipv4_unicast_vrf_neighbor.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp_ipv4_unicast_vrf_neighbor.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/address-family/with-vrf/ipv4=unicast/vrf=VRF1/ipv4-unicast/neighbor=3.3.3.3\"\n```\n\n----------------------------------------\n\nTITLE: Importing IOS-XE VLAN Interface Configuration\nDESCRIPTION: Command for importing existing VLAN interface configuration into Terraform state.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_vlan.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_vlan.example \"Cisco-IOS-XE-native:native/interface/Vlan=10\"\n```\n\n----------------------------------------\n\nTITLE: Importing BGP Address Family L2VPN Configuration in Terraform for Cisco IOS XE\nDESCRIPTION: This command shows how to import an existing BGP Address Family L2VPN configuration into Terraform state. It specifies the resource name and the full path of the object in the Cisco IOS XE native model.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_address_family_l2vpn.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp_address_family_l2vpn.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/address-family/no-vrf/l2vpn=evpn\"\n```\n\n----------------------------------------\n\nTITLE: Importing OSPF VRF Configuration\nDESCRIPTION: Command for importing existing OSPF VRF configuration into Terraform state using the Cisco IOS-XE YANG path.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/ospf_vrf.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_ospf_vrf.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-ospf:router-ospf/ospf/process-id-vrf=2,VRF1\"\n```\n\n----------------------------------------\n\nTITLE: Importing IKEv2 Keyring Configuration\nDESCRIPTION: Shows the command syntax for importing an existing IKEv2 keyring configuration into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ikev2_keyring.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_crypto_ikev2_keyring.example \"Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/keyring=keyring1\"\n```\n\n----------------------------------------\n\nTITLE: Importing PIM Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet shows the command to import an existing PIM configuration into Terraform state. It specifies the resource name and the YANG path for the PIM configuration in Cisco IOS-XE.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/pim.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_pim.example \"Cisco-IOS-XE-native:native/ip/pim\"\n```\n\n----------------------------------------\n\nTITLE: Importing AAA Authentication Configuration\nDESCRIPTION: Command for importing existing AAA authentication configuration into Terraform state.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/aaa_authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_aaa_authentication.example \"Cisco-IOS-XE-native:native/aaa/Cisco-IOS-XE-aaa:authentication\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing IPv6 Host VRF Transport Configuration\nDESCRIPTION: Shell command for importing an existing IPv6 host VRF transport configuration into Terraform state. Uses the resource path format required by Cisco IOS-XE.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/logging_ipv6_host_vrf_transport.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_logging_ipv6_host_vrf_transport.example \"Cisco-IOS-XE-native:native/logging/host/ipv6/ipv6-host-vrf-transport-list=2001%3A%3A1,VRF1\"\n```\n\n----------------------------------------\n\nTITLE: Importing AAA Accounting Configuration in IOS-XE\nDESCRIPTION: Command for importing existing AAA accounting configuration into Terraform state for IOS-XE devices.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/aaa_accounting.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_aaa_accounting.example \"Cisco-IOS-XE-native:native/aaa/Cisco-IOS-XE-aaa:accounting\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing DHCP Configuration into Terraform for Cisco IOS-XE\nDESCRIPTION: This shell command demonstrates how to import an existing DHCP configuration from a Cisco IOS-XE device into Terraform. It specifies the resource type, resource name, and the path of the object to be imported.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/dhcp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_dhcp.example \"Cisco-IOS-XE-native:native/ip/dhcp\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing MPLS Interface Configuration into Terraform for Cisco IOS-XE\nDESCRIPTION: This shell command shows how to import an existing MPLS interface configuration into Terraform state. It specifies the resource type, resource name, and the path of the object in the Cisco IOS-XE native model.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_mpls.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_mpls.example \"Cisco-IOS-XE-native:native/interface/Loopback=1/mpls\"\n```\n\n----------------------------------------\n\nTITLE: Importing IOSXE Community List Expanded Resource\nDESCRIPTION: Shows the command syntax for importing an existing Community List Expanded configuration into Terraform state. The import path includes the full Cisco IOS-XE native path specification.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/community_list_expanded.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_community_list_expanded.example \"Cisco-IOS-XE-native:native/ip/Cisco-IOS-XE-bgp:community-list/expanded=CLE1\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing VTP Configuration into Terraform\nDESCRIPTION: Command for importing an existing VTP configuration from an IOS-XE device into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vtp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_vtp.example \"Cisco-IOS-XE-native:native/vtp\"\n```\n\n----------------------------------------\n\nTITLE: Importing PIM VRF Configuration\nDESCRIPTION: Command for importing existing PIM VRF configuration into Terraform state. This import statement uses the YANG model path to identify the specific VRF configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/pim_vrf.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_pim_vrf.example \"Cisco-IOS-XE-native:native/ip/pim/Cisco-IOS-XE-multicast:vrf=VRF1\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing UDLD Configuration\nDESCRIPTION: Shell command for importing existing UDLD configuration into Terraform state. This command imports the UDLD configuration from the Cisco-IOS-XE-native path into the specified Terraform resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/udld.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_udld.example \"Cisco-IOS-XE-native:native/udld\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Crypto IKEv2 Profile Configuration into Terraform State\nDESCRIPTION: This command demonstrates how to import an existing Crypto IKEv2 profile configuration from a Cisco IOS-XE device into Terraform state. It uses the full path of the object in the device's configuration hierarchy.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ikev2_profile.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_crypto_ikev2_profile.example \"Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/profile=profile1\"\n```\n\n----------------------------------------\n\nTITLE: Importing EVPN Instance Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet shows the command to import an existing EVPN instance configuration into Terraform state. It uses the full path of the object in the Cisco IOS-XE native model.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/evpn_instance.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_evpn_instance.example \"Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn-instance/evpn/instance/instance=10\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to the IOS-XE Terraform Provider\nDESCRIPTION: These commands demonstrate how to add a new dependency to the provider using Go modules. Replace 'github.com/author/dependency' with the actual dependency.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/author/dependency\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Importing Existing SNMP Server User Configuration\nDESCRIPTION: Command syntax for importing an existing SNMP server user configuration into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/snmp_server_user.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_snmp_server_user.example \"Cisco-IOS-XE-native:native/snmp-server/Cisco-IOS-XE-snmp:user/names=USER1,GROUP1\"\n```\n\n----------------------------------------\n\nTITLE: Importing IOS-XE Policy Map Configuration\nDESCRIPTION: Command for importing an existing policy map configuration into Terraform state. The import path follows the Cisco IOS-XE native model format.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/policy_map.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_policy_map.example \"Cisco-IOS-XE-native:native/policy/Cisco-IOS-XE-policy:policy-map=POLICY1\"\n```\n\n----------------------------------------\n\nTITLE: Importing IOSXE NVE Interface Configuration\nDESCRIPTION: Command for importing an existing NVE interface configuration into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_nve.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_nve.example \"Cisco-IOS-XE-native:native/interface/nve=1\"\n```\n\n----------------------------------------\n\nTITLE: Importing BGP Address Family IPv6 VRF Configuration in Terraform\nDESCRIPTION: This shell command demonstrates how to import an existing BGP Address Family IPv6 VRF configuration into Terraform state. It specifies the resource address and the import path for the configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_address_family_ipv6_vrf.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp_address_family_ipv6_vrf.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/address-family/with-vrf/ipv6=unicast\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing VLAN Filter Configuration\nDESCRIPTION: Shell command for importing an existing VLAN filter configuration into Terraform state. Demonstrates the import path format for IOS-XE VLAN filters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vlan_filter.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_vlan_filter.example \"Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:filter=VAM1\"\n```\n\n----------------------------------------\n\nTITLE: Generating Files for IOS-XE Terraform Provider\nDESCRIPTION: This command runs all the generators if any file in the 'gen' directory has been modified. It's part of the development process for updating generated code.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo generate -x\n```\n\n----------------------------------------\n\nTITLE: Importing Existing CTS Configuration\nDESCRIPTION: Command for importing an existing CTS configuration from an IOS-XE device into Terraform state. Uses the YANG container path for the CTS configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/cts.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_cts.example \"Cisco-IOS-XE-native:native/cts\"\n```\n\n----------------------------------------\n\nTITLE: Reading IOS-XE Logging IPv4 Host VRF Transport Configuration with Terraform\nDESCRIPTION: Example showing how to use the iosxe_logging_ipv4_host_vrf_transport data source to read logging configuration. Requires IPv4 host address and VRF name as input parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/logging_ipv4_host_vrf_transport.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_logging_ipv4_host_vrf_transport\" \"example\" {\n  ipv4_host = \"2.2.2.2\"\n  vrf       = \"VRF1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IOS-XE Prefix List Configuration\nDESCRIPTION: Shell command demonstrating how to import an existing prefix list configuration into Terraform state.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/prefix_list.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_prefix_list.example \"Cisco-IOS-XE-native:native/ip/prefix-lists\"\n```\n\n----------------------------------------\n\nTITLE: Importing BFD Template Multi Hop Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This shell command shows how to import an existing BFD Template Multi Hop configuration into Terraform state. It specifies the resource type, resource name, and the path of the object in the Cisco IOS-XE native model.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bfd_template_multi_hop.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bfd_template_multi_hop.example \"Cisco-IOS-XE-native:native/bfd-template/Cisco-IOS-XE-bfd:multi-hop=T11\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing CDP Configuration into Terraform State\nDESCRIPTION: This shell command shows how to import an existing CDP configuration into Terraform state. It specifies the resource address and the import path for the CDP configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/cdp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_cdp.example \"Cisco-IOS-XE-native:native/cdp\"\n```\n\n----------------------------------------\n\nTITLE: Reading BGP Address Family IPv6 Configuration with Terraform\nDESCRIPTION: Example showing how to read BGP Address Family IPv6 configuration using Terraform. The data source requires ASN and address family name parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bgp_address_family_ipv6.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bgp_address_family_ipv6\" \"example\" {\n  asn     = \"65000\"\n  af_name = \"unicast\"\n}\n```\n\n----------------------------------------\n\nTITLE: IOS-XE Provider Version 0.3.2 Release Notes\nDESCRIPTION: Release adding auto QoS, spanning tree, and BGP-related attributes to existing resources.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.2\n\n- Add `auto_qos` attributes to `iosxe_interface_ethernet`, `iosxe_interface_port_channel` and `iosxe_interface_port_channel_subinterface` resources and data sources\n[...]\n```\n\n----------------------------------------\n\nTITLE: Importing BFD Template Single Hop Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This shell command demonstrates how to import an existing BFD Template Single Hop configuration into Terraform state. It specifies the resource type, resource name, and the path of the object in the Cisco IOS-XE native model.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bfd_template_single_hop.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bfd_template_single_hop.example \"Cisco-IOS-XE-native:native/bfd-template/Cisco-IOS-XE-bfd:single-hop=SH-TEMPLATE-1\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing TACACS Server Configuration\nDESCRIPTION: Command for importing an existing TACACS server configuration into Terraform state management. Uses the full YANG model path for the resource identification.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/tacacs_server.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_tacacs_server.example \"Cisco-IOS-XE-native:native/tacacs/Cisco-IOS-XE-aaa:server=tacacs_10.10.15.13\"\n```\n\n----------------------------------------\n\nTITLE: Importing IOSXE Port Channel Subinterface Configuration\nDESCRIPTION: Command for importing an existing port channel subinterface configuration into Terraform state.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_port_channel_subinterface.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_port_channel_subinterface.example \"Cisco-IOS-XE-native:native/interface/Port-channel-subinterface/Port-channel=10.666\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing IOSXE Crypto IPSec Profile\nDESCRIPTION: Command for importing an existing IPSec profile configuration into Terraform state. Uses the full path identifier including the Cisco-IOS-XE-native namespace.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ipsec_profile.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_crypto_ipsec_profile.example \"Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ipsec/profile=vpn200\"\n```\n\n----------------------------------------\n\nTITLE: Reading VLAN Access Map Configuration Example\nDESCRIPTION: Example of using the iosxe_vlan_access_map data source to read a VLAN Access Map configuration with a specific name and sequence number.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/vlan_access_map.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_vlan_access_map\" \"example\" {\n  name     = \"VAM1\"\n  sequence = 10\n}\n```\n\n----------------------------------------\n\nTITLE: IOS-XE Provider Version 0.3.1 Release Notes\nDESCRIPTION: Bug fix release addressing NTP resource deletion issue.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.1\n\n- Fix issue with deletion of servers and peers of `iosxe_ntp` resource\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OSPFv3 Interface Configuration\nDESCRIPTION: Command for importing an existing OSPFv3 interface configuration into Terraform state management. Specifies the full YANG path for the interface configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/interface_ospfv3.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_interface_ospfv3.example \"Cisco-IOS-XE-native:native/interface/Loopback=1/Cisco-IOS-XE-ospfv3:ospfv3\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Banner Configuration in IOS-XE using Terraform\nDESCRIPTION: This command shows how to import an existing banner configuration from an IOS-XE device into Terraform state. It uses the 'terraform import' command with the specific path for the banner configuration in the IOS-XE YANG model.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/banner.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_banner.example \"Cisco-IOS-XE-native:native/banner\"\n```\n\n----------------------------------------\n\nTITLE: Importing RESTCONF Resource in Terraform for IOS-XE\nDESCRIPTION: Demonstrates the syntax for importing an existing RESTCONF resource into Terraform state. It uses the 'terraform import' command with the resource address and RESTCONF path.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/restconf.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_restconf.example \"Cisco-IOS-XE-native:native/banner/login\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Flow Record Configuration in Terraform for Cisco IOS-XE\nDESCRIPTION: This snippet shows the command to import an existing Flow Record configuration into Terraform state. It uses the YANG path to identify the specific resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/flow_record.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_flow_record.example \"Cisco-IOS-XE-native:native/flow/Cisco-IOS-XE-flow:record=FNF1\"\n```\n\n----------------------------------------\n\nTITLE: Reading IOSXE Crypto IKEv2 Profile Configuration with Terraform\nDESCRIPTION: Example showing how to read an IKEv2 profile configuration named 'profile1' using the iosxe_crypto_ikev2_profile data source.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/crypto_ikev2_profile.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_crypto_ikev2_profile\" \"example\" {\n  name = \"profile1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Schema for SNMP MIB Views in Markdown\nDESCRIPTION: This snippet defines the nested schema for SNMP MIB views, including read-only attributes for inclusion/exclusion flag, MIB name, and view name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/snmp_server.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Nested Schema for `views`\n\nRead-Only:\n\n- `inc_exl` (String)\n- `mib` (String)\n- `name` (String)\n```\n\n----------------------------------------\n\nTITLE: Importing Existing IPv6 Host Transport Configuration\nDESCRIPTION: Command for importing an existing IPv6 host transport configuration into Terraform state. Uses the full YANG path to identify the resource.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/logging_ipv6_host_transport.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_logging_ipv6_host_transport.example \"Cisco-IOS-XE-native:native/logging/host/ipv6/ipv6-host-transport-list=2001%3A%3A1\"\n```\n\n----------------------------------------\n\nTITLE: Importing BGP Address Family IPv4 VRF Configuration in Terraform\nDESCRIPTION: This snippet shows the command to import an existing BGP Address Family IPv4 VRF configuration into Terraform state. It specifies the resource type, resource name, and the import path for the configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_address_family_ipv4_vrf.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp_address_family_ipv4_vrf.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/address-family/with-vrf/ipv4=unicast\"\n```\n\n----------------------------------------\n\nTITLE: Importing Static Route VRF Configuration\nDESCRIPTION: Shell command for importing existing static route VRF configuration into Terraform state.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/static_route_vrf.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_static_route_vrf.example \"Cisco-IOS-XE-native:native/ip/route/vrf=VRF1\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing IOSXE Standard ACL into Terraform\nDESCRIPTION: Command for importing an existing standard access list configuration into Terraform state management. Uses the IOSXE-specific path format for resource identification.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/access_list_standard.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_access_list_standard.example \"Cisco-IOS-XE-native:native/ip/access-list/Cisco-IOS-XE-acl:standard=SACL1\"\n```\n\n----------------------------------------\n\nTITLE: Reading VTP Configuration with Terraform IOSXE Provider\nDESCRIPTION: Example showing how to use the iosxe_vtp data source to read VTP configuration from a Cisco IOSXE device. The data source requires no mandatory parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/vtp.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_vtp\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Community List Standard\nDESCRIPTION: Command for importing an existing community list standard configuration into Terraform state. Uses the full path identifier in Cisco IOS-XE native format.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/community_list_standard.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_community_list_standard.example \"Cisco-IOS-XE-native:native/ip/Cisco-IOS-XE-bgp:community-list/standard=CLS1\"\n```\n\n----------------------------------------\n\nTITLE: Importing MSDP Configuration in IOS-XE\nDESCRIPTION: Shell command for importing existing MSDP configuration into Terraform state using the native YANG path.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/msdp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_msdp.example \"Cisco-IOS-XE-native:native/ip/Cisco-IOS-XE-multicast:msdp\"\n```\n\n----------------------------------------\n\nTITLE: Running Acceptance Tests for IOS-XE Provider\nDESCRIPTION: Command to run the full suite of acceptance tests. Requires environment variables IOSXE_USERNAME, IOSXE_PASSWORD, and IOSXE_URL to be set properly.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake testacc\n```\n\n----------------------------------------\n\nTITLE: Importing Existing IOS-XE Logging Configuration\nDESCRIPTION: Shell command for importing existing logging IPv4 host VRF transport configuration into Terraform state. The import path includes the host IP address and VRF name.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/logging_ipv4_host_vrf_transport.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_logging_ipv4_host_vrf_transport.example \"Cisco-IOS-XE-native:native/logging/host/ipv4-host-vrf-transport-list=2.2.2.2,VRF1\"\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Crypto IKEv2 Configuration into Terraform\nDESCRIPTION: This shell command shows how to import an existing Crypto IKEv2 configuration from a Cisco IOS XE device into Terraform state, allowing for management of the configuration through Terraform.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/crypto_ikev2.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_crypto_ikev2.example \"Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2\"\n```\n\n----------------------------------------\n\nTITLE: Reading CTS Configuration with Terraform IOSXE Provider\nDESCRIPTION: Example showing how to declare a data source block to read the CTS configuration from an IOSXE device. This basic example demonstrates the minimal required configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/cts.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_cts\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Schema for SNMP Contexts in Markdown\nDESCRIPTION: This snippet defines the nested schema for SNMP contexts, specifying a read-only 'name' attribute of type String.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/snmp_server.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Nested Schema for `contexts`\n\nRead-Only:\n\n- `name` (String)\n```\n\n----------------------------------------\n\nTITLE: Building the IOS-XE Terraform Provider using Go\nDESCRIPTION: This command builds the provider using Go's install command. It should be run from the repository directory after cloning.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install\n```\n\n----------------------------------------\n\nTITLE: Installing IOS-XE Terraform Provider\nDESCRIPTION: Commands for building the provider locally using Go install command after cloning the repository.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install\n```\n\n----------------------------------------\n\nTITLE: Importing SNMP Server Group Configuration in Terraform\nDESCRIPTION: Command for importing existing SNMP server group configuration into Terraform state using the resource import syntax.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/snmp_server_group.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_snmp_server_group.example \"Cisco-IOS-XE-native:native/snmp-server/Cisco-IOS-XE-snmp:group=GROUP1\"\n```\n\n----------------------------------------\n\nTITLE: Querying IOSXE System Configuration with Terraform\nDESCRIPTION: This snippet demonstrates how to use the iosxe_system data source to retrieve system configuration information from an IOSXE device. It creates a data source block without any additional parameters, allowing it to fetch the default system configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/system.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_system\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Schema for SNMP Hosts in Markdown\nDESCRIPTION: This snippet outlines the nested schema for SNMP hosts, including read-only attributes for community string or user name, encryption type, IP address, and SNMP version.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/snmp_server.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Nested Schema for `hosts`\n\nRead-Only:\n\n- `community_or_user` (String) SNMPv1/v2c community string or SNMPv3 user name\n- `encryption` (String) Specifies an encryption type for community string\n- `ip_address` (String)\n- `version` (String) SNMP version to use for notification messages\n```\n\n----------------------------------------\n\nTITLE: Email Reference in Markdown\nDESCRIPTION: Email contact for reporting security vulnerabilities to the Cisco security team.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`oss-security@cisco.com`\n```\n\n----------------------------------------\n\nTITLE: IOS-XE Provider Initial Releases\nDESCRIPTION: Initial provider releases v0.1.0 and v0.1.1.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.1\n\n## 0.1.0\n\n- Initial release\n```\n\n----------------------------------------\n\nTITLE: Importing BGP IPv6 Unicast Neighbor Configuration\nDESCRIPTION: Command for importing existing BGP IPv6 Unicast Neighbor configuration into Terraform state. Uses the full YANG model path for the resource identification.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/bgp_ipv6_unicast_neighbor.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_bgp_ipv6_unicast_neighbor.example \"Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/address-family/no-vrf/ipv6=unicast/ipv6-unicast/neighbor=3.3.3.3\"\n```\n\n----------------------------------------\n\nTITLE: Reading Interface Switchport Configuration in Terraform for Cisco IOSXE\nDESCRIPTION: This example demonstrates how to use the iosxe_interface_switchport data source to read the configuration of a specific Cisco switch port. It requires specifying the interface type and name to identify the port you want to query.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/interface_switchport.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_interface_switchport\" \"example\" {\n  type = \"GigabitEthernet\"\n  name = \"1/0/3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MSDP VRF Configuration in Terraform\nDESCRIPTION: Command syntax for importing existing MSDP VRF configurations into Terraform state using the Cisco IOS-XE YANG model path.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/msdp_vrf.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_msdp_vrf.example \"Cisco-IOS-XE-native:native/ip/Cisco-IOS-XE-multicast:msdp/vrf=VRF1\"\n```\n\n----------------------------------------\n\nTITLE: Reading BFD Template Multi Hop Configuration in Terraform for IOS-XE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_bfd_template_multi_hop data source to read a BFD Template Multi Hop configuration. It requires specifying the name of the template to be read.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/bfd_template_multi_hop.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_bfd_template_multi_hop\" \"example\" {\n  name = \"T11\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IOS-XE Clock Configuration\nDESCRIPTION: Command for importing existing clock configuration from an IOS-XE device into Terraform state management.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/clock.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_clock.example \"Cisco-IOS-XE-native:native/clock\"\n```\n\n----------------------------------------\n\nTITLE: Reading Template Configuration in Cisco IOS XE using Terraform\nDESCRIPTION: This snippet demonstrates how to use the 'iosxe_template' data source to read a Template configuration named 'TEMP1' from a Cisco IOS XE device.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/template.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_template\" \"example\" {\n  template_name = \"TEMP1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing EVPN Configuration\nDESCRIPTION: Shell command for importing an existing EVPN configuration into Terraform state. Shows the proper import syntax using the YANG path for the EVPN configuration.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/evpn.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_evpn.example \"Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn\"\n```\n\n----------------------------------------\n\nTITLE: Querying Crypto IKEv2 Configuration with Terraform in IOSXE\nDESCRIPTION: This snippet demonstrates how to use the iosxe_crypto_ikev2 data source to retrieve Crypto IKEv2 configuration from a Cisco IOSXE device. It shows the basic structure of the data source block without any specific arguments.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/crypto_ikev2.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_crypto_ikev2\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IOS-XE Errdisable Configuration\nDESCRIPTION: Shell command for importing existing errdisable configuration into Terraform state.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/errdisable.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_errdisable.example \"Cisco-IOS-XE-native:native/errdisable\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Prefix List Configuration with Terraform IOS-XE Provider\nDESCRIPTION: Example showing how to use the iosxe_prefix_list data source to retrieve existing prefix list configurations from an IOS-XE device. This data source doesn't require any configuration parameters.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/data-sources/prefix_list.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"iosxe_prefix_list\" \"example\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing VLAN Group Configuration\nDESCRIPTION: Command for importing an existing VLAN group configuration into Terraform state. This allows managing existing VLAN groups that were created outside of Terraform.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/vlan_group.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import iosxe_vlan_group.example \"Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:group=GROUP1\"\n```\n\n----------------------------------------\n\nTITLE: IOS-XE Provider Version 0.3.0 Release Notes\nDESCRIPTION: Major breaking change release revamping the entire provider codebase.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.0\n\n- BREAKING CHANGE: Completely revamped the provider based on `github.com/netascode/terraform-provider-iosxe` codebase, replacing all existing resources and data sources\n- BREAKING CHANGE: Remove `attributes` map of list items in `iosxe_restconf` resource\n```\n\n----------------------------------------\n\nTITLE: IOS-XE Provider Changelog Frontmatter\nDESCRIPTION: YAML frontmatter defining the documentation category and title for the changelog page.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/guides/changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsubcategory: \"Guides\"\npage_title: \"Changelog\"\ndescription: |-\n    Changelog\n---\n```\n\n----------------------------------------\n\nTITLE: Running Acceptance Tests for IOS-XE Terraform Provider\nDESCRIPTION: This command runs the full suite of acceptance tests. Ensure that environment variables like IOSXE_USERNAME, IOSXE_PASSWORD, and IOSXE_URL are set before running.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake testacc\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Host Transport with Multiple Port Types\nDESCRIPTION: Example of configuring logging IPv6 host transport with UDP, TCP, and TLS ports. Sets up logging to IPv6 host 2001::1 with specific port numbers for each transport type.\nSOURCE: https://github.com/ciscodevnet/terraform-provider-iosxe/blob/main/docs/resources/logging_ipv6_host_transport.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"iosxe_logging_ipv6_host_transport\" \"example\" {\n  ipv6_host = \"2001::1\"\n  transport_udp_ports = [\n    {\n      port_number = 10000\n    }\n  ]\n  transport_tcp_ports = [\n    {\n      port_number = 10001\n    }\n  ]\n  transport_tls_ports = [\n    {\n      port_number = 10002\n    }\n  ]\n}\n```"
  }
]