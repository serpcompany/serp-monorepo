[
  {
    "owner": "quarkusio",
    "repo": "quarkus",
    "content": "TITLE: Running Native Tests with Docker Container\nDESCRIPTION: Command to generate and test a native image with MariaDB in a Docker container. Combines native compilation with test-containers functionality.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-orm-tenancy/connection-resolver/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Basic Quarkus Build Commands in Bash\nDESCRIPTION: Basic commands to clone and build Quarkus locally. Sets Maven heap size to 4GB and uses quick build mode.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/quarkusio/quarkus.git\ncd quarkus\nexport MAVEN_OPTS=\"-Xmx4g\"\n./mvnw -Dquickly\n# Wait... success!\n```\n\n----------------------------------------\n\nTITLE: Signing Client Certificate with CA\nDESCRIPTION: This command signs the client CSR with the CA certificate and key, creating a client certificate valid for 3650 days (10 years).\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-mutual-auth/src/main/resources/tls/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -req -CA ca.pem -CAkey ca.key -CAcreateserial -in client.csr \\\n  -out client.pem -days 3650\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Windows\nDESCRIPTION: Git configuration commands for Windows to enable long paths and avoid CRLF line endings when contributing to Quarkus.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global core.longpaths true\ngit config --global core.autocrlf false\n```\n\n----------------------------------------\n\nTITLE: Running Picocli Applications in Quarkus Dev Mode with Command-Line Arguments\nDESCRIPTION: This snippet shows how to start a Quarkus application in dev mode while passing command-line arguments to a Picocli application. The syntax differs slightly depending on whether you're using Maven or Gradle as your build tool.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/picocli-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{buildtool.cli} {buildtool.cmd.dev} {#if input.base-codestart.buildtool == 'gradle' || input.base-codestart.buildtool == 'gradle-kotlin-dsl'}--quarkus-args{#else}-Dquarkus.args{/if}='Quarky'\n```\n\n----------------------------------------\n\nTITLE: Signing Server Certificate with CA\nDESCRIPTION: This command signs the server certificate signing request with the CA certificate and key, creating a server certificate valid for 10 years and including the subject alternative names from the configuration file.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-test-random-port/src/main/resources/tls/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -req -CA ca.pem -CAkey ca.key -CAcreateserial -in server.csr \\\n  -out server.pem -extfile server-openssl.cnf -days 3650\n```\n\n----------------------------------------\n\nTITLE: Maven Build Aliases Configuration\nDESCRIPTION: Shell aliases for common build commands using standard Maven with parallel execution settings.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nalias build-fast=\"mvn -T0.8C -e -DskipDocs -DskipTests -DskipITs -Dinvoker.skip -DskipExtensionValidation -Dskip.gradle.tests -Dtruststore.skip clean install\"\nalias build-docs=\"mvn -T0.8C -e -DskipTests -DskipITs -Dinvoker.skip -DskipExtensionValidation -Dskip.gradle.tests -Dtruststore.skip -Dno-test-modules -Dasciidoctor.fail-if=DEBUG clean install\"\nalias format=\"mvn -T0.8C process-sources -Denforcer.skip -Dprotoc.skip\"\nalias qss=\"java -jar ${HOME}/git/quarkus/devtools/cli/target/quarkus-cli-999-SNAPSHOT-runner.jar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Settings for Quarkus Snapshots\nDESCRIPTION: XML configuration for Maven settings.xml to enable Quarkus snapshot repositories. This allows testing of daily snapshots from the main branch.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n    <profiles>\n        <profile>\n            <id>quarkus-snapshots</id>\n            <repositories>\n                <repository>\n                    <id>quarkus-snapshots-repository</id>\n                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>\n                    <releases>\n                        <enabled>false</enabled>\n                    </releases>\n                    <snapshots>\n                        <enabled>true</enabled>\n                    </snapshots>\n                </repository>\n            </repositories>\n            <pluginRepositories>\n                <pluginRepository>\n                    <id>quarkus-snapshots-plugin-repository</id>\n                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>\n                    <releases>\n                        <enabled>false</enabled>\n                    </releases>\n                    <snapshots>\n                        <enabled>true</enabled>\n                    </snapshots>\n                </pluginRepository>\n            </pluginRepositories>\n        </profile>\n    </profiles>\n    <activeProfiles>\n        <activeProfile>quarkus-snapshots</activeProfile>\n    </activeProfiles>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Generating Complete mTLS Certificate Chain using OpenSSL and Keytool\nDESCRIPTION: Comprehensive shell script that generates server and client certificates for mTLS authentication. Creates OpenSSL configurations, generates key pairs, creates certificate chains, and builds PKCS12 keystores and truststores. Uses custom distinguished names and subject alternative names for both client and server certificates.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/mtls-certificates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat <<EOF > ./openssl.cnf\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\nreq_extensions = req_ext\n\n[ dn ]\nCN=client\nOU=cert\nO=quarkus\nL=city\nST=state\nC=AU\n\n[ req_ext ]\nsubjectAltName = @altNames\n\n[ altNames ]\notherName = 2.5.4.45;UTF8:redhat\nemail = certs@quarkus.io\ndirName = test_dir\nURI = https://www.quarkus.io/\n\n[test_dir]\nCN=client\nOU=cert\nO=quarkus\nL=city\nST=state\nC=AU\nEOF\n\ncat <<EOF > ./openssl-2.cnf\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\nreq_extensions = req_ext\n\n[ dn ]\nCN=localhost\nOU=quarkus\nO=quarkus\nL=city\nST=state\nC=IE\n\n[ req_ext ]\nsubjectAltName = @altNames\n\n[ altNames ]\notherName = 2.5.4.45;UTF8:quarkus\nemail = certs-1@quarkus.io\ndirName = test_dir\nURI = https://www.vertx.io/\n\n[test_dir]\nCN=localhost\nOU=quarkus\nO=quarkus\nL=city\nST=state\nC=IE\nEOF\n\nopenssl genrsa -out serverCA.key 2048\nopenssl req -x509 -new -nodes -key serverCA.key \\\n            -sha256 -days 9000 -out serverCA.pem \\\n            -extensions req_ext -config openssl.cnf\nopenssl pkcs12 -export -name server-cert \\\n               -in serverCA.pem -inkey serverCA.key \\\n               -out server-keystore.p12\nkeytool -import -alias localhost -storetype PKCS12 \\\n        -file serverCA.pem -keystore server-truststore.p12 -trustcacerts\n\nopenssl genrsa -out clientCA.key 2048\nopenssl req -x509 -new -nodes -key clientCA.key \\\n            -sha256 -days 9000 -out clientCA.pem \\\n            -extensions req_ext -config openssl.cnf\nopenssl pkcs12 -export -name client1-cert \\\n               -in clientCA.pem -inkey clientCA.key \\\n               -out client-keystore-1.p12\nkeytool -import -alias client1-cert -storetype PKCS12 \\\n        -file clientCA.pem -keystore client-truststore.p12 -trustcacerts\nkeytool -import -alias client1-cert -file clientCA.pem \\\n        -keystore server-truststore.p12 -trustcacerts\n\nopenssl genrsa -out client2CA.key 2048\nopenssl req -x509 -new -nodes -key client2CA.key \\\n            -sha256 -days 9000 -out client2CA.pem \\\n            -extensions req_ext -config openssl-2.cnf\nopenssl pkcs12 -export -name client2-cert \\\n               -in client2CA.pem -inkey client2CA.key \\\n               -out client-keystore-2.p12\nkeytool -import -alias client2-cert -file client2CA.pem \\\n        -keystore server-truststore.p12 -trustcacerts\nkeytool -import -alias client2-cert -file client2CA.pem \\\n        -keystore client-truststore.p12 -trustcacerts\n\nkeytool -import -alias server-cert -file serverCA.pem \\\n        -keystore client-truststore.p12 -trustcacerts\n```\n\n----------------------------------------\n\nTITLE: Build Extension Module Command\nDESCRIPTION: Command to build a specific extension module in the Jackson extension directory.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw install -f extensions/jackson/\n```\n\n----------------------------------------\n\nTITLE: Custom Quarkus Main for Automatic Profiling Termination\nDESCRIPTION: Java code for creating a custom Quarkus main class that automatically terminates after application startup, useful for capturing only startup metrics.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport io.quarkus.runtime.Quarkus;\nimport io.quarkus.runtime.QuarkusApplication;\nimport io.quarkus.runtime.annotations.QuarkusMain;\n\n@QuarkusMain\npublic class Main {\n\n    public static void main(String... args) {\n        Quarkus.run(MyApp.class, args);\n    }\n \n    public static class MyApp implements QuarkusApplication {\n \n        @Override\n        public int run(String... args) throws Exception {\n            return 0;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Native Image Tests with Elasticsearch Container\nDESCRIPTION: Command to generate and test a native image with Elasticsearch running in a container. Includes native flag along with test-containers and start-containers flags.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-search-orm-elasticsearch-outbox-polling/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Generating Client Key and Certificate Signing Request\nDESCRIPTION: These commands generate a client key and certificate signing request. The common name for the client certificate is set to 'testclient'.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-test-random-port/src/main/resources/tls/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out client.key.rsa 4096\nopenssl pkcs8 -topk8 -in client.key.rsa -out client.key -nocrypt\nopenssl req -new -key client.key -out client.csr\n```\n\n----------------------------------------\n\nTITLE: Maven Invoker Test Command\nDESCRIPTION: Command to run a specific Maven Invoker test for container image testing with MySQL.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw verify -f integration-tests/container-image/maven-invoker-way -Dinvoker.test=container-build-jib-with-mysql\n```\n\n----------------------------------------\n\nTITLE: Creating Quarkus Native Executable\nDESCRIPTION: Command to build a native executable from the Quarkus application using GraalVM.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus/project/quarkus/base/README.tpl.qute.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n{buildtool.cli} {buildtool.cmd.package-native}\n```\n\n----------------------------------------\n\nTITLE: Profiling Application Startup with CPU and Allocation Analysis\nDESCRIPTION: Commands to profile application startup using Async Profiler's Java agent for both CPU and allocation profiling, capturing the entire startup process.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nPATH_TO_ASYNC_PROFILER=...\n\n# profile CPU startup\njava -agentpath:${PATH_TO_ASYNC_PROFILER}/lib/libasyncProfiler.so=start,event=cpu,file=startup-cpu-profile.html,interval=1000000,simple\\\n    -jar target/quarkus-app/quarkus-run.jar\n\n# profile allocation startup\njava -agentpath:${PATH_TO_ASYNC_PROFILER}/lib/libasyncProfiler.so=start,alloc=1,total,event=alloc,file=startup-alloc-profile.jfr -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:-UseTLAB -Xmx1G -Xms1G -XX:+AlwaysPreTouch -jar target/quarkus-app/quarkus-run.jar\n```\n\n----------------------------------------\n\nTITLE: Generating Server Key and Certificate Signing Request (CSR)\nDESCRIPTION: These commands generate a server key and Certificate Signing Request (CSR). It creates a 4096-bit RSA key, converts it to PKCS8 format, and generates a CSR using a special configuration file for subject alternative names. The common name is set to 'localhost'.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-mutual-auth/src/main/resources/tls/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out server1.key.rsa 4096\nopenssl pkcs8 -topk8 -in server1.key.rsa -out server.key -nocrypt\nopenssl req -new -key server.key -out server.csr -config server-openssl.cnf\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Quarkus Release\nDESCRIPTION: Maven command for deploying a custom version of Quarkus to an internal repository\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw --settings your-maven-settings.xml \\\n    clean deploy \\\n    -DskipTests -DskipITs \\\n    -DperformRelease=true \\\n    -Prelease \\\n    -Ddokka \\\n    -Dgpg.skip\n```\n\n----------------------------------------\n\nTITLE: Rendering Quarkus Configuration Documentation Template\nDESCRIPTION: Template code that generates documentation for Quarkus configuration properties. It creates a table structure with sections for configuration properties and nested subsections, using the Qute templating engine syntax.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/config-doc-maven-plugin/src/main/resources/templates/markdown/default/tags/configSection.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<thead>\n<tr>\n<th align=\"left\" colspan=\"3\">\n{configSection.formatTitle}\n</th>\n</tr>\n</thead>\n```\n\nLANGUAGE: qute\nCODE:\n```\n{#for property in configSection.nonDeprecatedProperties}\n{#configProperty context=context configProperty=property extension=extension additionalAnchorPrefix=additionalAnchorPrefix /}\n{/for}\n{#for subsection in configSection.nonDeprecatedSections}\n{#configSection context=context configSection=subsection extension=extension additionalAnchorPrefix=additionalAnchorPrefix /}\n{/for}\n```\n\n----------------------------------------\n\nTITLE: Configuring Quarkus in application.properties\nDESCRIPTION: Basic example of setting configuration values in Quarkus application.properties file, showing how to set a greeting message and HTTP port.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/rest-qute-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ngreeting.message=hello\nquarkus.http.port=9090\n```\n\n----------------------------------------\n\nTITLE: Stopping CPU Profiling and Generating Flame Graph\nDESCRIPTION: Command to stop CPU profiling and generate an HTML flame graph from the collected data for visualization and analysis.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/async-profiler/profiler.sh stop -f /tmp/cpu-profile.html <pid>\n```\n\n----------------------------------------\n\nTITLE: Running Native Tests with Containerized Keycloak\nDESCRIPTION: Command to generate and test a native image with Keycloak running in a Docker container. Includes native compilation flag along with container configuration.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/oidc-code-flow/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Building Native Executable in Container\nDESCRIPTION: Command to build a native executable using a container when GraalVM is not installed locally.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus/project/quarkus/base/README.tpl.qute.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n{buildtool.cli} {buildtool.cmd.package-native-container}\n```\n\n----------------------------------------\n\nTITLE: Setting Quarkus Configuration with Environment Variables\nDESCRIPTION: Example of setting Quarkus configuration using environment variables, demonstrating the naming convention for converting property names to environment variable format.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/rest-qute-codestart/base/README.tpl.qute.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport GREETING_MESSAGE=hi\n./target/quarkus-app/quarkus-run.jar\n```\n\n----------------------------------------\n\nTITLE: Converting JFR Allocation Profile to Flame Graph\nDESCRIPTION: Command to convert a Java Flight Recorder (JFR) allocation profile to an HTML flame graph for better visualization and analysis.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njava -cp ${PATH_TO_ASYNC_PROFILER}/lib/converter.jar jfr2flame startup-alloc-profile.jfr --alloc --total startup-alloc-profile.html\n```\n\n----------------------------------------\n\nTITLE: Generating Java KeyStore (JKS) from CA Certificate\nDESCRIPTION: These commands convert the CA certificate to DER format and import it into a Java KeyStore (JKS) file. The alias is set to 'localhost' and the password should be set to '123456' when prompted.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-mutual-auth/src/main/resources/tls/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -outform der -in ca.pem -out certificate.der\nkeytool -import -alias localhost -keystore ca.jks -file certificate.der\n```\n\n----------------------------------------\n\nTITLE: Using Quarkus Configuration with JSON Format\nDESCRIPTION: Example of Quarkus configuration using JSON format, showing how to set the same configuration values as in the previous examples.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/rest-qute-codestart/base/README.tpl.qute.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"greeting\": {\n    \"message\": \"hello\"\n  },\n  \"quarkus\": {\n    \"http\": {\n      \"port\": 9090\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed CA Certificate and Key using OpenSSL\nDESCRIPTION: This command creates a self-signed CA certificate and key using OpenSSL. It generates a 4096-bit RSA key and a certificate valid for 10 years.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-test-random-port/src/main/resources/tls/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -new -newkey rsa:4096 -nodes -keyout ca.key -out ca.pem \\\n-config ca-openssl.cnf -days 3650 -extensions v3_req\n```\n\n----------------------------------------\n\nTITLE: Enabling Java Flight Recorder for Performance Profiling in Windows\nDESCRIPTION: Java options to enable Java Flight Recorder (JFR) for recording profiling data in a file named 'myrecording.jfr'. These settings configure JFR with a deeper stack depth for more detailed analysis using Java Mission Control (JMC).\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n-XX:StartFlightRecording=filename=myrecording.jfr,settings=profile -XX:FlightRecorderOptions=stackdepth=64\n```\n\n----------------------------------------\n\nTITLE: Creating Quarkus Native Executable\nDESCRIPTION: This command creates a native executable of the Quarkus application using GraalVM. It requires GraalVM to be installed on the system.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/devtools-testing/src/test/resources/__snapshots__/QuarkusCodestartGenerationTest/generateDefault/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn package -Dnative\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Podman Container\nDESCRIPTION: Podman command to start a MySQL instance configured for Quarkus testing with specific user credentials and database settings.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mysql/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman run -it --rm=true --name quarkus_test_mysql -e MYSQL_USER=hibernate_orm_test -e MYSQL_PASSWORD=hibernate_orm_test -e MYSQL_DATABASE=hibernate_orm_test -e MYSQL_RANDOM_ROOT_PASSWORD=true -p 3308:3306 mysql:8.0.22\n```\n\n----------------------------------------\n\nTITLE: Executing Incremental Build with Maven\nDESCRIPTION: Command to perform an incremental build using gitflow-incremental-builder (GIB) to build only changed modules and their dependencies\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw install -Dincremental\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Contributions\nDESCRIPTION: Bash commands to set up Git authorship information and enable pull.rebase option for easier contribution to the Quarkus project.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngit config --global user.name \"Your Full Name\"\ngit config --global user.email your.email@example.com\ngit config --global pull.rebase true\n```\n\n----------------------------------------\n\nTITLE: Starting Quarkus Development Mode\nDESCRIPTION: Command to run the Quarkus project in development mode with continuous testing enabled.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/test-extension/tests/src/test/resources-filtered/projects/project-using-test-parameter-injection/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn quarkus:dev\n```\n\n----------------------------------------\n\nTITLE: Running Quarkus Application in Dev Mode\nDESCRIPTION: Command to run the Quarkus application in development mode with live coding support and Dev UI access.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus/project/quarkus/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{buildtool.cli} {buildtool.cmd.dev}\n```\n\n----------------------------------------\n\nTITLE: Building Quarkus from Main Branch\nDESCRIPTION: Bash commands to clone the Quarkus repository, navigate to the project directory, and build Quarkus using Maven with increased memory allocation.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone git@github.com:quarkusio/quarkus.git\ncd quarkus\nMAVEN_OPTS=\"-Xmx4g\" ./mvnw -Dquickly\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Docker Container\nDESCRIPTION: Docker command to start a MySQL instance configured for Quarkus testing with specific user credentials and database settings.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mysql/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test_mysql -e MYSQL_USER=hibernate_orm_test -e MYSQL_PASSWORD=hibernate_orm_test -e MYSQL_DATABASE=hibernate_orm_test -e MYSQL_RANDOM_ROOT_PASSWORD=true -p 3308:3306 mysql:8.0.22\n```\n\n----------------------------------------\n\nTITLE: Running JVM Tests with Elasticsearch\nDESCRIPTION: Command to execute tests in a standard JVM environment with Elasticsearch running in containers. Uses test-containers and start-containers flags to enable test execution.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-search-orm-elasticsearch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running Quarkus Development Mode\nDESCRIPTION: Command to run the Quarkus application in development mode with live coding support\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/elasticsearch-rest-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw quarkus:dev\n```\n\n----------------------------------------\n\nTITLE: Profiling Quarkus Dev Mode with Async Profiler\nDESCRIPTION: Commands to profile Quarkus in development mode using Async Profiler for both CPU and allocation profiling, with the Java agent configured through the jvm.args system property.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nPATH_TO_ASYNC_PROFILER=...\n\n# profile CPU startup\nmvn quarkus:dev -Djvm.args=\"-agentpath:${PATH_TO_ASYNC_PROFILER}/lib/libasyncProfiler.so=start,event=cpu,file=startup-cpu-profile.html,interval=1000000,simple\"\n\n# profile allocation startup\nmvn quarkus:dev -Djvm.args=\"-agentpath:${PATH_TO_ASYNC_PROFILER}/lib/libasyncProfiler.so=start,alloc=1,total,event=alloc,file=startup-alloc-profile.jfr -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:-UseTLAB -Xmx1G -Xms1G -XX:+AlwaysPreTouch\"\n```\n\n----------------------------------------\n\nTITLE: Generating ECDSA Key Pair using OpenSSL\nDESCRIPTION: Two-step process to generate ECDSA private and public keys using the secp521r1 elliptic curve. First generates the private key with explicit parameters, then extracts the corresponding public key in PEM format.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-messaging-pulsar/src/main/resources/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl ecparam -name secp521r1 -genkey -param_enc explicit -out test_ecdsa_privkey.pem\nopenssl ec -in test_ecdsa_privkey.pem -pubout -outform pem -out test_ecdsa_pubkey.pem\n```\n\n----------------------------------------\n\nTITLE: Running JVM Tests with Docker MariaDB\nDESCRIPTION: Command to run tests in a standard JVM environment with MariaDB started as a Docker container. Note that this doesn't work on macOS due to port availability checking limitations.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-orm-tenancy/datasource/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running Native Tests with Docker Container\nDESCRIPTION: Executes tests in native mode using MariaDB in a Docker container. This command generates a native image and runs the tests with test-containers and container startup enabled.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-mysql-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Running JPA Tests with Oracle Database in Quarkus (Native Image)\nDESCRIPTION: This command runs JPA tests as a native image using an Oracle database started as a Docker container. It includes the native flag along with test-containers and container start options.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-oracle/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Running Native Image Tests with Docker MariaDB\nDESCRIPTION: Command to generate and test a native image with MariaDB running in Docker. Combines container startup with native image testing.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-orm-tenancy/datasource/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Running JPA Tests with PostgreSQL Docker Container\nDESCRIPTION: Command to run JPA tests using PostgreSQL in a Docker container. Uses test-containers and start-containers flags to manage the PostgreSQL instance.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-postgresql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Packaging Quarkus Application\nDESCRIPTION: Command to package the Quarkus application as a JAR file with dependencies in the lib directory.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus/project/quarkus/base/README.tpl.qute.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n{buildtool.cli} {buildtool.cmd.package}\n```\n\n----------------------------------------\n\nTITLE: Running JPA Tests with Oracle Database in Quarkus (Standard JVM)\nDESCRIPTION: This command runs JPA tests in a standard JVM environment using an Oracle database started as a Docker container. It utilizes test-containers and starts the necessary containers for the test execution.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-oracle/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running Tests with External MariaDB\nDESCRIPTION: Command to run tests against an externally managed MariaDB instance. Requires a pre-configured database named 'hibernate_orm_test'.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-orm-tenancy/datasource/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Running JVM Tests with Docker SQL Server Container\nDESCRIPTION: Maven command to run JPA tests using a Docker-based SQL Server instance. Enables container testing with the test-containers profile.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mssql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dstart-containers -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle Database Container for Quarkus JPA Testing\nDESCRIPTION: This Docker command starts an Oracle database container suitable for running the JPA tests in the Quarkus project. It sets up the database with specific configuration parameters matching those used in the integration tests.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-oracle/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm=true --name=HibernateTestingOracle -p 1521:1521 -e ORACLE_PASSWORD=hibernate_orm_test docker.io/gvenzl/oracle-free:23-slim-faststart\n```\n\n----------------------------------------\n\nTITLE: Running Quarkus Application in Dev Mode\nDESCRIPTION: This command runs the Quarkus application in development mode, enabling live coding. It uses Maven to execute the Quarkus dev goal.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/devtools-testing/src/test/resources/__snapshots__/QuarkusCodestartGenerationTest/generateDefault/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn quarkus:dev\n```\n\n----------------------------------------\n\nTITLE: Running JPA Tests with DB2 Test Containers\nDESCRIPTION: Commands to execute JPA tests using DB2 test containers in both standard JVM and native image modes. The -Dtest-containers and -Dstart-containers flags enable container-based testing.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-db2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: MVND Build Aliases Configuration\nDESCRIPTION: Shell aliases for common build commands using Maven Daemon (mvnd) for faster builds with parallelization.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nalias build-fast=\"mvnd -e -DskipDocs -DskipTests -DskipITs -Dinvoker.skip -DskipExtensionValidation -Dskip.gradle.tests -Dtruststore.skip clean install\"\nalias build-docs=\"mvnd -e -DskipTests -DskipITs -Dinvoker.skip -DskipExtensionValidation -Dskip.gradle.tests -Dtruststore.skip -Dno-test-modules -Dasciidoctor.fail-if=DEBUG clean install\"\nalias format=\"mvnd process-sources -Denforcer.skip -Dprotoc.skip\"\nalias qss=\"java -jar ${HOME}/git/quarkus/devtools/cli/target/quarkus-cli-999-SNAPSHOT-runner.jar\"\n```\n\n----------------------------------------\n\nTITLE: Running Native Image Tests with Docker Container\nDESCRIPTION: Command to generate and test a native image with PostgreSQL running in a Docker container. Includes native flag along with test-containers and start-containers configuration.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-pg-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Packaging Quarkus Application\nDESCRIPTION: This command packages the Quarkus application using Maven. It produces a quarkus-run.jar file in the target/quarkus-app/ directory, with dependencies in the lib/ subdirectory.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/devtools-testing/src/test/resources/__snapshots__/QuarkusCodestartGenerationTest/generateDefault/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Standalone PostgreSQL\nDESCRIPTION: Command to run tests against a standalone PostgreSQL server without Docker container. Requires PostgreSQL to be running on port 5431 with specific database and user credentials.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-pg-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry JDBC Tests with Docker Containers\nDESCRIPTION: This command runs tests in a standard JVM with Oracle, PostgreSQL, and MariaDB databases started as Docker containers. It uses the test-containers and start-containers flags.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/opentelemetry-jdbc-instrumentation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running Native Tests with Elasticsearch\nDESCRIPTION: Command to generate a native image and run tests in native mode with Elasticsearch containers. Combines test-containers, start-containers, and native flags.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-search-orm-elasticsearch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Building Quarkus Native Executable in Container\nDESCRIPTION: This command builds a native executable of the Quarkus application using a container. It's useful when GraalVM is not installed on the local system.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/devtools-testing/src/test/resources/__snapshots__/QuarkusCodestartGenerationTest/generateDefault/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn package -Dnative -Dquarkus.native.container-build=true\n```\n\n----------------------------------------\n\nTITLE: Running JVM Tests with Containerized Keycloak\nDESCRIPTION: Command to execute tests in a standard JVM environment with Keycloak running in a Docker container. Uses test-containers and start-containers flags.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/oidc-code-flow/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running JVM Tests with MySQL Container\nDESCRIPTION: Command to run JPA tests in standard JVM mode with MySQL running in a Docker container.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mysql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Installing Build and Container Utilities with Homebrew\nDESCRIPTION: This script installs Maven, Gradle, and Podman using Homebrew. These tools are essential for building and running containerized applications.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/ACTIONS.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install mvn\nbrew install gradle\nbrew install podman\n```\n\n----------------------------------------\n\nTITLE: Running Native Image Tests with Docker-Containerized Keycloak Server\nDESCRIPTION: This command generates a native image and runs the tests for this native image. It also starts Keycloak Server as a Docker container. The -Dnative flag enables native image generation and testing.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/oidc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Tests in JVM Mode\nDESCRIPTION: Command to execute Oracle database tests in standard JVM mode using test containers with Docker support.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-oracle-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running Reactive DB2 Tests with Docker in Quarkus\nDESCRIPTION: This command runs verification tests for Reactive DB2 in Quarkus using a Docker container. It enables test containers and starts the necessary containers for testing.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-db2-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Custom Keycloak Server\nDESCRIPTION: This command runs the tests using a custom Keycloak server instead of a Docker container. It can be used with or without the -Dnative flag for native image testing. The custom Keycloak server should listen on the default https port 8543.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/oidc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Executing Java Application with JBang\nDESCRIPTION: Command to run a Java application using JBang from source file. JBang simplifies Java application execution by handling dependencies and compilation automatically.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus-jbang/code/jbang-resteasy-code/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./jbang src/main.java\n```\n\n----------------------------------------\n\nTITLE: Generating Native Image and Running Reactive DB2 Tests in Quarkus\nDESCRIPTION: This command generates a native image and runs verification tests for Reactive DB2 in Quarkus. It uses Docker containers and enables native image generation.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-db2-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Docker-Containerized Keycloak Server in JVM\nDESCRIPTION: This command runs the tests in a standard JVM environment with Keycloak Server started as a Docker container. It enables test containers and starts the necessary containers for the test environment.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/oidc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux for Async Profiler (Session)\nDESCRIPTION: Shell commands to configure kernel parameters for a terminal session to allow capturing kernel call stacks using perf_events from a non-root process.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho 1 | sudo tee /proc/sys/kernel/perf_event_paranoid\necho 0 | sudo tee /proc/sys/kernel/kptr_restrict\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Docker Container\nDESCRIPTION: Executes tests using MariaDB in a Docker container. This command runs the tests in a standard JVM environment with test-containers and container startup enabled.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-mysql-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running Reactive DB2 Tests with Custom Server in Quarkus\nDESCRIPTION: This command runs verification tests for Reactive DB2 in Quarkus using a custom DB2 server setup. It requires a pre-configured DB2 server and can be run with or without native image generation.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-db2-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Running JPA Tests with MariaDB Docker Container in Quarkus\nDESCRIPTION: This command runs JPA tests using a MariaDB Docker container. It enables test containers and starts the necessary containers for the test environment.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mariadb/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud CLI\nDESCRIPTION: Command to log into Google Cloud using the gcloud CLI tool\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/google-cloud-functions-http/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry JDBC Tests as Native Image\nDESCRIPTION: This command runs tests as a native image in addition to the standard JVM tests. It includes the native flag along with test-containers and start-containers.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/opentelemetry-jdbc-instrumentation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Running JVM Tests with Docker MS SQL\nDESCRIPTION: Command to run MS SQL tests using a Docker container in standard JVM mode. Uses test-containers and enables container startup.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-mssql-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running Native Image Tests with Docker Containers in Shell\nDESCRIPTION: This command generates a native image and runs tests for it. It uses Maven to clean the project, install dependencies, and execute tests with flags for test containers, container startup, and native image generation.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/oidc-tenancy/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Docker Container\nDESCRIPTION: Command to run tests using MariaDB in a Docker container. This executes the test suite with test-containers and container startup enabled.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-orm-tenancy/connection-resolver/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Creating LaunchDaemon for GitHub Actions Runner\nDESCRIPTION: This XML configuration creates a LaunchDaemon that starts the GitHub Actions runner service on system boot, ensuring it runs continuously.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/ACTIONS.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>actions.runner.quarkusio-quarkus.macstadium-m1</string>\n\n    <key>RunAtLoad</key>\n    <true/>\n\n    <key>KeepAlive</key>\n    <true/>\n  \n    <key>UserName</key>\n    <string>githubactions</string>\n\n    <key>ProgramArguments</key>\n    <array>\n     <string>/Users/githubactions/actions-runner/runsvc.sh</string>\n    </array>\n\n    <key>WorkingDirectory</key>\n    <string>/Users/githubactions/actions-runner</string>\n\n    <key>StandardOutPath</key>\n    <string>/tmp/github.runner.plist.stdout</string>\n    <key>StandardErrorPath</key>\n    <string>/tmp/github.runner.plist.stderr</string>\n\n    <key>EnvironmentVariables</key>\n    <dict>\n      <key>ACTIONS_RUNNER_SVC</key>\n      <string>1</string>\n    </dict>\n    <key>ProcessType</key>\n    <string>Interactive</string>\n    <key>SessionCreate</key>\n    <true/>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Running Native Tests with MySQL Container\nDESCRIPTION: Command to generate and test a native image with MySQL running in a Docker container.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mysql/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Running Native Tests with Docker MS SQL\nDESCRIPTION: Command to generate a native image and run MS SQL tests using a Docker container in native mode. Combines test-containers, container startup, and native build flags.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-mssql-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Running Native Executable\nDESCRIPTION: Command to execute the compiled native executable from the target directory\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/elasticsearch-rest-client/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./target/quarkus-integration-test-elasticsearch-rest-client-1.0-SNAPSHOT-runner\n```\n\n----------------------------------------\n\nTITLE: Running Native Tests with Docker SQL Server Container\nDESCRIPTION: Maven command to run JPA tests in native mode using a Docker-based SQL Server instance. Combines container testing with native image compilation.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mssql/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dstart-containers -Dtest-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Running JVM Tests with Elasticsearch Container\nDESCRIPTION: Command to execute tests in a standard JVM environment with Elasticsearch running in a container. Uses test-containers and start-containers flags.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-search-orm-elasticsearch-outbox-polling/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Tests in Native Mode\nDESCRIPTION: Command to execute Oracle database tests in native image mode with test containers and Docker support.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-oracle-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Installing QEMU for AMD64 Support on ARM\nDESCRIPTION: This script installs QEMU user static on the Podman machine to enable support for AMD64 images on ARM architecture.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/ACTIONS.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npodman machine ssh\nsudo -i\nrpm-ostree install qemu-user-static\nsystemctl reboot\n```\n\n----------------------------------------\n\nTITLE: Running Redis Tests in JVM Mode with Docker Container\nDESCRIPTION: Command to run Redis tests in JVM mode with automatic Redis Server container startup\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/redis-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Docker-based Keycloak Server in JVM\nDESCRIPTION: This command runs the tests in a standard JVM environment with Keycloak Server started as a Docker container. It uses Maven to clean the project, install dependencies, and execute tests.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/keycloak-authorization/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running JVM Tests with OpenSearch Container\nDESCRIPTION: Command to execute Hibernate Search tests in a standard JVM environment with OpenSearch running in containers.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-search-orm-opensearch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Running All JPA Integration Tests with Native Image in Quarkus\nDESCRIPTION: This command runs all JPA integration tests, including native image tests, using the test containers setup. It assumes MariaDB is already running and configured.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mariadb/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed CA Certificate and Key using OpenSSL\nDESCRIPTION: This command generates a self-signed CA certificate and key using OpenSSL. It creates a 4096-bit RSA key and a certificate valid for 3650 days (10 years) using the configuration in ca-openssl.cnf.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-mutual-auth/src/main/resources/tls/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -new -newkey rsa:4096 -nodes -keyout ca.key -out ca.pem \\\n  -config ca-openssl.cnf -days 3650 -extensions v3_req\n```\n\n----------------------------------------\n\nTITLE: Configuring Quarkus Apache Avro Extension Dependencies\nDESCRIPTION: This snippet defines the Maven coordinates for the Quarkus Apache Avro extension's runtime and deployment artifacts. It specifies the artifact IDs and their corresponding Maven scopes.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/maven/src/test/resources-filtered/projects/classic-with-log/src/main/resources/assets/test.txt#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nartifact=io.quarkus:quarkus-avro\nname=Apache Avro\n#description=Provides support for the Avro data serialization system\nmetadata.keywords=avro\nmetadata.categories=serialization\nmetadata.status=stable\nmetadata.guide=https://quarkus.io/guides/kafka-schema-registry-avro\n#metadata.doc-sections=\n\nartifact-id=quarkus-avro\nruntime-artifact=io.quarkus:quarkus-avro:jar\ndeployment-artifact=io.quarkus:quarkus-avro-deployment:jar\n```\n\n----------------------------------------\n\nTITLE: Running Redis Tests in Native Mode with Docker Container\nDESCRIPTION: Command to run native image tests with automatic Redis Server container startup\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/redis-client/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dnative -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Signing Client Certificate with CA\nDESCRIPTION: This command signs the client certificate signing request with the CA certificate and key, creating a client certificate valid for 10 years.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-test-random-port/src/main/resources/tls/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -req -CA ca.pem -CAkey ca.key -CAcreateserial -in client.csr \\\n  -out client.pem -days 3650\n```\n\n----------------------------------------\n\nTITLE: Invoking Storage Function\nDESCRIPTION: Command to test the deployed Storage function by simulating a file creation event.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/funqy-google-cloud-functions/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngcloud functions call quarkus-funqy-storage --data '{\"name\":\"hello.txt\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Native Image Tests with PostgreSQL Docker Container\nDESCRIPTION: Command to generate and test a native image while using PostgreSQL in a Docker container. Combines native image generation with container management flags.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-postgresql/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Creating Cleanup and Setup Scripts for GitHub Actions Runner\nDESCRIPTION: This script creates cleanup and setup hooks for the GitHub Actions runner, ensuring a clean workspace and a running Podman machine before each job.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/ACTIONS.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\necho \"rm -rf /Users/githubactions/actions-runner/_work\" > /Users/githubactions/runner-cleanup.sh\necho \"podman machine info | grep Running || podman machine start\" >> /Users/githubactions/podman-start.sh\nchmod a+x /Users/githubactions/runner-cleanup.sh\necho ACTIONS_RUNNER_HOOK_JOB_COMPLETED=/Users/githubactions/runner-cleanup.sh >> .env\necho ACTIONS_RUNNER_HOOK_JOB_STARTED=/Users/githubactions/podman-start.sh >> .env\n```\n\n----------------------------------------\n\nTITLE: Manual DB2 Container Setup\nDESCRIPTION: Docker command to manually start a DB2 container with specific configuration parameters including database name, instance settings, and port mapping. This provides an alternative to using test containers for development and testing.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-db2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n  -e DBNAME=hreact \\\n  -e DB2INSTANCE=hreact \\\n  -e DB2INST1_PASSWORD=hreact \\\n  -e AUTOCONFIG=false \\\n  -e ARCHIVE_LOGS=false \\\n  -e LICENSE=accept \\\n  -p 50005:50000 \\\n  --privileged \\\n  ibmcom/db2:11.5.5.0\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Temporary Files\nDESCRIPTION: These commands remove temporary files created during the certificate generation process, including RSA keys, certificate signing requests, and the CA serial file.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-test-random-port/src/main/resources/tls/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrm *.rsa\nrm *.csr\nrm ca.srl\n```\n\n----------------------------------------\n\nTITLE: Starting MariaDB Docker Container for Quarkus Testing\nDESCRIPTION: This Docker command starts a MariaDB container for testing purposes. It sets up the necessary environment variables and port mapping for the Quarkus JPA tests.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mariadb/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test_mariadb -e MYSQL_USER=hibernate_orm_test -e MYSQL_PASSWORD=hibernate_orm_test -e MYSQL_DATABASE=hibernate_orm_test -e MYSQL_RANDOM_ROOT_PASSWORD=true -p 3308:3306 mariadb:10.4\n```\n\n----------------------------------------\n\nTITLE: Setting up Podman Machine\nDESCRIPTION: These commands configure the Podman machine to run in rootful mode and start it.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/ACTIONS.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman machine set --rootful\npodman machine start\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev UI Authentication User Credentials\nDESCRIPTION: Properties configuration to set up user authentication credentials for Dev UI. This defines authentication properties including username, password, and roles.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/grpc-codestart/base/README.tpl.qute.md#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nquarkus.dev-ui.auth.username=username\nquarkus.dev-ui.auth.password=password\nquarkus.dev-ui.auth.roles=admin,user,...\n```\n\n----------------------------------------\n\nTITLE: Logstash Pipeline Configuration\nDESCRIPTION: Logstash configuration file defining GELF input and Elasticsearch output\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/logging-gelf/README.md#2025-04-22_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\ninput {\n  gelf {\n    port => 12201\n  }\n}\noutput {\n  stdout {}\n  elasticsearch {\n    hosts => [\"http://elasticsearch:9200\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle Database Docker Container\nDESCRIPTION: Docker command to start an Oracle Free database instance configured for Hibernate testing. Sets up container with specific port mapping and password configuration.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-oracle-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm=true --name=HibernateTestingOracle -p 1521:1521 -e ORACLE_PASSWORD=hibernate_orm_test docker.io/gvenzl/oracle-free:23-slim-faststart\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Property Table Row in Quarkus\nDESCRIPTION: A Handlebars/Mustache template that renders a single row in a configuration property table. The template displays whether a property is fixed at build time, the property path, additional paths, description, environment variables, type description, and default value across three table columns.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/config-doc-maven-plugin/src/main/resources/templates/markdown/default/tags/configProperty.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<tr>\n<td>\n\n{#if configProperty.phase.fixedAtBuildTime}🔒 {/if}`{configProperty.path.property}`\n{#for additionalPath in configProperty.additionalPaths}\n`{additionalPath.property}`\n{/for}\n\n{configProperty.formatDescription.escapeCellContent.or(\"\")}\n\n{#envVar configProperty /}\n</td>\n<td>\n\n{configProperty.formatTypeDescription(context).escapeCellContent.or(\"\")}\n</td>\n<td>\n\n{#if configProperty.defaultValue}{configProperty.formatDefaultValue.escapeCellContent}{/if}\n</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta for Intel Binary Compatibility\nDESCRIPTION: This command installs Rosetta, which allows Intel binaries to run on Apple Silicon Macs.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/ACTIONS.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta --agree-to-license\n```\n\n----------------------------------------\n\nTITLE: Podman Command for MariaDB Test Instance\nDESCRIPTION: Podman command to start a MariaDB instance for testing without requiring root permissions. Includes necessary environment variables and tmpfs mounts.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-orm-tenancy/datasource/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npodman run --rm=true --net=host --memory-swappiness=0 --tmpfs /var/lib/mysql:rw --tmpfs /var/log:rw --name mariadb_demo -e MYSQL_USER=hibernate_orm_test -e MYSQL_PASSWORD=hibernate_orm_test -e MYSQL_DATABASE=hibernate_orm_test -e MYSQL_ROOT_PASSWORD=secret -p 3308:3306 mariadb:10.4\n```\n\n----------------------------------------\n\nTITLE: Launching EFK Stack\nDESCRIPTION: Shell command to start the EFK stack using Docker Compose\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/logging-gelf/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Launch EFK (Elasticsearch, Fluentd, Kibana)\ndocker-compose -f src/test/resources/docker-compose-efk.yml up\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL CLI\nDESCRIPTION: Command to connect to the MySQL database using the command-line client for database inspection.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mysql/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmysql -h localhost -u hibernate_orm_test -phibernate_orm_test hibernate_orm_test --protocol tcp\n```\n\n----------------------------------------\n\nTITLE: Launching ELK Stack\nDESCRIPTION: Shell command to start the ELK stack using Docker Compose\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/logging-gelf/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Launch ELK (Elasticsearch, Logstash, Kibana)\ndocker-compose -f src/test/resources/docker-compose-elk.yml up\n```\n\n----------------------------------------\n\nTITLE: Setting Quarkus Configuration with System Properties\nDESCRIPTION: Example of setting Quarkus configuration using Java system properties on the command line with the -D flag.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/rest-qute-codestart/base/README.tpl.qute.md#2025-04-22_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\njava -Dgreeting.message=hi -jar target/quarkus-app/quarkus-run.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Quarkus Profile in YAML Format\nDESCRIPTION: Example of setting profile-specific configurations in Quarkus using YAML format with the %profile_name% syntax for different environments.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/rest-qute-codestart/base/README.tpl.qute.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngreeting:\n  message: hello\n---\n%dev:\n  greeting:\n    message: hello development\n---\n%test:\n  greeting:\n    message: hello test\n---\n%prod:\n  greeting:\n    message: hello production\n```\n\n----------------------------------------\n\nTITLE: Running Tests with External MS SQL\nDESCRIPTION: Command to run tests against an external MS SQL instance without Docker container management. Requires MS SQL to be running on port 1435 with specific credentials.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-mssql-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Tests with Docker Container\nDESCRIPTION: Command to run tests in a standard JVM with PostgreSQL started as a Docker container. Uses test-containers and start-containers flags to configure the test environment.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-pg-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Formatting Primitive Data Types in Quarkus Template String\nDESCRIPTION: This code snippet demonstrates how to format various primitive data types within a template string in Quarkus. It includes placeholders for byte, short, int, long, char, boolean, float, and double types.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-classic/resteasy-qute/deployment/src/test/resources/templates/HelloResource/typedTemplatePrimitives.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nByte: {b} Short: {s} Int: {i} Long: {l} Char: {c} Boolean: {bool} Float: {f} Double: {d}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dev UI Authentication Provider in Java\nDESCRIPTION: Code for implementing a custom authentication provider by extending the AbstractDevUIAuthenticationProvider class. This example shows how to create a provider that validates credentials against a file.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/grpc-codestart/base/README.tpl.qute.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.quarkus.dev.console.DevConsoleManager;\nimport io.quarkus.devui.spi.authentication.AbstractDevUIAuthenticationProvider;\n\n@DevUIAuthenticationProvider\npublic class CustomDevUIAuthProvider extends AbstractDevUIAuthenticationProvider {\n\n    @Override\n    public boolean validateCredentials(String username, String password) {\n        // Custom validation logic here\n        // For example, you could validate against a file\n        return validateCredentialsAgainstFile(username, password);\n    }\n\n    @Override\n    public String getUserName() {\n        // Custom logic to retrieve the username\n        return retrieveUsername();\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n\n    private boolean validateCredentialsAgainstFile(String username, String password) {\n        // Implementation to validate credentials against a file\n        return true; // Placeholder\n    }\n\n    private String retrieveUsername() {\n        // Implementation to retrieve username\n        return \"defaultUser\"; // Placeholder\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with External PostgreSQL Server\nDESCRIPTION: Command to run tests against an external PostgreSQL server without Docker containers. Requires a pre-configured PostgreSQL instance with specific database and user credentials.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-postgresql/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Java Primitive Types String Template\nDESCRIPTION: Template string showing placeholder syntax for Java primitive data types. Uses curly brace notation for variable interpolation.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-reactive/rest-qute/deployment/src/test/resources/templates/HelloResource/typedTemplatePrimitives.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nByte: {b} Short: {s} Int: {i} Long: {l} Char: {c} Boolean: {bool} Float: {f} Double: {d}\n```\n\n----------------------------------------\n\nTITLE: Running Native Integration Tests\nDESCRIPTION: Command to execute all integration tests in native mode with MySQL container.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mysql/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Conditional Link Inclusion for Hibernate ORM with Panache in Java\nDESCRIPTION: This conditional block includes a link to the Hibernate with Panache documentation if the corresponding extension is selected.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/hibernate-orm-codestart/base/README.tpl.qute.md#2025-04-22_snippet_1\n\nLANGUAGE: qute\nCODE:\n```\n{#if input.selected-extensions-ga.contains('io.quarkus:quarkus-hibernate-orm-panache')}\n[Related Hibernate with Panache section...](https://quarkus.io/guides/hibernate-orm-panache)\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Running JPA Tests with Custom MariaDB Setup in Quarkus\nDESCRIPTION: This command runs JPA tests using a custom MariaDB setup. It assumes MariaDB is already running and configured according to the specified requirements.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mariadb/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Generating Native Image and Running Tests\nDESCRIPTION: This command generates a native image and runs the tests for the native image. It includes the same functionality as the previous command but adds the -Dnative flag to enable native image generation.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/keycloak-authorization/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Greeting Template in Quarkus\nDESCRIPTION: This snippet shows a Quarkus template that greets a user. It takes a 'name' parameter of type String and uses expression language to output a greeting. The template also demonstrates calling a method 'foo()' on the name parameter.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-classic/resteasy-qute/deployment/src/test/resources/templates/HelloResource/typeError.txt#2025-04-22_snippet_0\n\nLANGUAGE: Quarkus Template\nCODE:\n```\n{@java.lang.String name}Salut {name.foo()}!\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud\nDESCRIPTION: Command to log in to Google Cloud services using gcloud CLI.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/funqy-google-cloud-functions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Including README Header in Quarkus Project Documentation\nDESCRIPTION: This snippet demonstrates the use of a custom include directive to insert a header into the Quarkus project README file. The directive references a file named 'readme-header' to be included at this location.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/resteasy-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Starting MariaDB Podman Container for Quarkus Testing\nDESCRIPTION: This Podman command starts a MariaDB container for testing without requiring root permissions. It sets up the necessary environment variables and port mapping for the Quarkus JPA tests.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mariadb/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman run --rm=true --net=host --memory-swappiness=0 --tmpfs /var/lib/mysql:rw --tmpfs /var/log:rw --name mariadb_demo -e MYSQL_USER=hibernate_orm_test -e MYSQL_PASSWORD=hibernate_orm_test -e MYSQL_DATABASE=hibernate_orm_test -e MYSQL_ROOT_PASSWORD=secret -p 3308:3306 mariadb:10.4\n```\n\n----------------------------------------\n\nTITLE: Starting Allocation Profiling with Async Profiler\nDESCRIPTION: Command to start memory allocation profiling for a running Java application using Async Profiler with increased buffer size.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/async-profiler/profiler.sh start -b 4000000 -e alloc <pid>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with External Database\nDESCRIPTION: Executes tests using an external MySQL/MariaDB instance. This command runs the tests without starting a Docker container, requiring a pre-configured database server.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/reactive-mysql-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Including README Header in Quarkus Documentation\nDESCRIPTION: This snippet demonstrates the use of a custom include directive to insert a standardized header into Quarkus README files. The directive references a file named 'readme-header' which likely contains common introductory content for Quarkus project documentation.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/spring-web-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Creating Native Executable in Container\nDESCRIPTION: Command to build native executable using container when GraalVM is not installed locally\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/elasticsearch-rest-client/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw package -Dnative -Dquarkus.native.container-build=true\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on Mac M1\nDESCRIPTION: This command installs the Homebrew package manager on a Mac M1 system. It's a prerequisite for installing other necessary tools.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/ACTIONS.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Allocation Profiling and Generating Flame Graph\nDESCRIPTION: Command to stop allocation profiling and generate an HTML flame graph from the collected data for visualization and analysis.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/async-profiler/profiler.sh stop -f /tmp/alloc-profile.html <pid>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with External Keycloak Server\nDESCRIPTION: Command to run tests against an externally managed Keycloak server instance. Can be used with or without the native flag.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/oidc-code-flow/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Running Redis Tests in JVM Mode\nDESCRIPTION: Command to run Redis tests in JVM mode using test-containers flag for local Redis connection\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/redis-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Adding Dev UI Authentication Extension Dependency with Maven\nDESCRIPTION: Maven dependency configuration for adding the Quarkus Dev UI Authentication extension to a project.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/grpc-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-dev-ui-authentication</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Manual DB2 Container\nDESCRIPTION: Command to run tests against a manually started DB2 container using the test-containers profile.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-db2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for JBang Picocli Application\nDESCRIPTION: This command runs the main Java application using JBang with the '-h' flag to display the help information for the command-line interface.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus-jbang/code/jbang-picocli-code/base/README.tpl.qute.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./jbang src/main.java -h\n```\n\n----------------------------------------\n\nTITLE: Setting Up Develocity Access\nDESCRIPTION: Command to provision access key for Develocity build cache services\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw develocity:provision-access-key\n```\n\n----------------------------------------\n\nTITLE: Creating Native Executable\nDESCRIPTION: Commands for creating a native executable using GraalVM, with an alternative container-based build option\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/elasticsearch-rest-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw package -Dnative\n```\n\n----------------------------------------\n\nTITLE: Including README Header in Quarkus Project\nDESCRIPTION: This snippet demonstrates the use of a custom include directive to insert the content of a 'readme-header' file into the current document. This is likely part of a templating system used to generate the final README for the Quarkus project.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/hibernate-orm-rest-data-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry JDBC Tests with Specific PostgreSQL Image\nDESCRIPTION: This command demonstrates how to run tests with a specific database image, in this case, the latest PostgreSQL image. It uses the postgres.image parameter to specify the image.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/opentelemetry-jdbc-instrumentation/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers -Dpostgres.image=docker.io/postgres:latest\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for JBang Quarkus Project\nDESCRIPTION: Markdown header defining the project title using H1 heading syntax\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus-jbang/project/quarkus-jbang/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# JBang Quarkus Project\n```\n\n----------------------------------------\n\nTITLE: Running Quarkus Project Verification\nDESCRIPTION: Command to verify and test the Quarkus project from the filtered output directory (target/test-classes/projects/happy-knitter-processed).\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/test-extension/tests/src/test/resources-filtered/projects/project-using-test-parameter-injection/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify\n```\n\n----------------------------------------\n\nTITLE: Including README Header using Template Directive\nDESCRIPTION: This snippet uses a template directive to include the readme-header component in what appears to be a template file. The directive follows a templating syntax common in some static site generators or template engines.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/reactive-routes-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Running Redis Tests in Native Mode\nDESCRIPTION: Command to generate and test native image with Redis integration\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/redis-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Including Readme Header Template\nDESCRIPTION: Template include directive for adding a standard readme header to the documentation.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/examples/funqy-knative-events-example/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Maven Project Configuration\nDESCRIPTION: Maven properties configuration for using locally built Quarkus artifacts\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <quarkus-plugin.version>999-SNAPSHOT</quarkus-plugin.version>\n    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n    <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n    <quarkus.platform.version>999-SNAPSHOT</quarkus.platform.version>\n    .\n    .\n    .\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Endpoints\nDESCRIPTION: curl commands to test various endpoints of the deployed function including hello, servlet/hello, vertx/hello, and funqy paths\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/google-cloud-functions-http/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v {httpsTrigger.url}/hello\ncurl -v {httpsTrigger.url}/servlet/hello\ncurl -v {httpsTrigger.url}/vertx/hello\ncurl -v {httpsTrigger.url}/funqy\n```\n\n----------------------------------------\n\nTITLE: Including Quarkus README Header Template with Qute\nDESCRIPTION: A Qute template include directive that imports a common readme-header template file into the current document.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/rest-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: qute\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Setting GRAALVM_HOME Environment Variable\nDESCRIPTION: Example of setting the GRAALVM_HOME environment variable on Linux and macOS for Quarkus development.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport GRAALVM_HOME=/opt/graalvm  # Linux\nexport GRAALVM_HOME=$location/JDK/GraalVM/Contents/Home  # macOS\n```\n\n----------------------------------------\n\nTITLE: Including README Header in Markdown\nDESCRIPTION: This snippet demonstrates the inclusion of a separate README header file using a custom Markdown syntax.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/examples/funqy-google-cloud-functions-example/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Building Quarkus Über-jar\nDESCRIPTION: This command packages the Quarkus application as an über-jar using Maven. It includes all dependencies in a single jar file for easier distribution.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/devtools-testing/src/test/resources/__snapshots__/QuarkusCodestartGenerationTest/generateDefault/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn package -Dquarkus.package.jar.type=uber-jar\n```\n\n----------------------------------------\n\nTITLE: Including Documentation Header\nDESCRIPTION: AsciiDoc include directive to insert a readme header from template. Uses AsciiDoc's include directive syntax to include a header file named 'readme-header'.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/smallrye-health-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: asciidoc\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Single Test Execution Command\nDESCRIPTION: Command to run a single test case from the resteasy-jackson integration test module.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw test -f integration-tests/resteasy-jackson/ -Dtest=GreetingResourceTest\n```\n\n----------------------------------------\n\nTITLE: Defining Test Class for Quarkus Build Issue in Java\nDESCRIPTION: This code snippet defines a Java test class named 'IncludedQuarkusBuildTest' in the 'io.quarkus.gradle' package. It is intended to reproduce an IllegalStateException that occurs when resolving project dependencies in Quarkus.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/gradle/src/main/resources/included-build/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nio.quarkus.gradle.IncludedQuarkusBuildTest\n```\n\n----------------------------------------\n\nTITLE: Defining Quarkus Apache Avro Extension Capabilities\nDESCRIPTION: This configuration snippet declares the capabilities provided by the Quarkus Apache Avro extension. It specifies that the extension provides Apache Avro support.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/maven/src/test/resources-filtered/projects/classic-with-log/src/main/resources/assets/test.txt#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncapabilities=io.quarkus.avro.deployment.spi.AvroDataTypeProvider\n```\n\n----------------------------------------\n\nTITLE: Running Native JPA Tests with MariaDB Docker Container in Quarkus\nDESCRIPTION: This command generates a native image and runs JPA tests for it using a MariaDB Docker container. It enables test containers, starts the necessary containers, and builds a native image.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mariadb/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Building Quarkus Uber-JAR\nDESCRIPTION: Command to package the Quarkus application as an uber-JAR containing all dependencies.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus/project/quarkus/base/README.tpl.qute.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n{buildtool.cli} {buildtool.cmd.package-uber-jar}\n```\n\n----------------------------------------\n\nTITLE: Updating Quarkus Version\nDESCRIPTION: Command to update Quarkus version across all project files\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n./update-version.sh \"x.y.z-yourcompany\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Mutiny JCTools Integration Tests\nDESCRIPTION: Documentation explaining the purpose of integration tests that verify Mutiny's support for JCTools native compilation in Quarkus. Tests focus on queue creation through io.smallrye.mutiny.helpers.queues.Queues factory and Mutiny pipelines using queues for overflow and custom emitters.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/mutiny-native-jctools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Quarkus - Integration Tests - Mutiny native JCTools support\n\nThis integration test checks that the Mutiny extension provides support for the native compilation of JCTools, which is now used internally in Mutiny instead of old custom data structures.\n\nThis is important as JCTools makes use of `sun.misc.Unsafe` in some places.\n\nThe tests do the following:\n\n- create all kinds of queues behind the factory `io.smallrye.mutiny.helpers.queues.Queues` interface, and\n- expose a few Mutiny pipelines where queues may be needed: overflow, custom emitters, etc.\n```\n\n----------------------------------------\n\nTITLE: Defining Property Sources for Quarkus Project in Properties\nDESCRIPTION: This snippet defines property sources for a Quarkus project, including codestart, quarkus-platform, and acme-platform. These properties are likely used to configure the build or runtime behavior of the Quarkus application.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/devtools-testing/src/test/resources/codestarts/quarkus/property-dump-codestart/base/property-dump.tpl.qute.txt#2025-04-22_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nproperty.source.codestart={property.source.codestart}\nproperty.source.quarkus-platform={property.source.quarkus-platform}\nproperty.source.acme-platform={property.source.acme-platform}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Google Cloud Functions HTTP Examples\nDESCRIPTION: File structure showing the different implementation examples available in the src/main/java/org/acme/googlecloudfunctionshttp directory. Each file represents a different approach to implementing HTTP endpoints.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/examples/google-cloud-functions-http-example/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsrc/main/java/org/acme/googlecloudfunctionshttp/\n    GreetingResource.java    // JAX-RS implementation\n    GreetingRoutes.java      // Vert.x reactive routes\n    GreetingFunqy            // Funqy HTTP\n    GreetingServlet.java     // Servlet implementation\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Docker Containers in Shell\nDESCRIPTION: This command runs tests in a standard JVM with Keycloak Server started as a Docker container. It uses Maven to clean the project, install dependencies, and execute tests with specific flags for test containers and container startup.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/oidc-tenancy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers\n```\n\n----------------------------------------\n\nTITLE: Quarkus ASCII Art Logo in Plain Text\nDESCRIPTION: A stylized text representation of the Quarkus logo using ASCII characters. This is commonly used as a banner in terminal outputs when running Quarkus applications or in console logs.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/core/deployment/src/main/resources/default_banner.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n__  ____  __  _____   ___  __ ____  ______ \n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n```\n\n----------------------------------------\n\nTITLE: Certificate Role Mapping Properties\nDESCRIPTION: Property file mapping certificates to user roles. Defines 'cert' user with both user and admin roles, and 'quarkus' user with basic user role.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/mtls-certificates/src/main/resources/ou-role-mappings.txt#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncert=user,admin\nquarkus=user\n```\n\n----------------------------------------\n\nTITLE: Building Quarkus Documentation\nDESCRIPTION: Commands to build Quarkus documentation with configuration properties\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -DquicklyDocs\n./mvnw -f docs clean install\n```\n\n----------------------------------------\n\nTITLE: Directory Reference for Google Cloud Functions Examples\nDESCRIPTION: Path reference showing the location of generated example functions that need to be removed or configured for multi-function support before deployment.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/examples/google-cloud-functions-example/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsrc/main/java/org/acme/googlecloudfunctions\n```\n\n----------------------------------------\n\nTITLE: Simple Variable Interpolation in Template String\nDESCRIPTION: A basic template string that includes a 'name' variable placeholder for personalized greetings.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/qute/src/test/resources/templates/hi.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHi {name}!\n```\n\n----------------------------------------\n\nTITLE: Setting Hibernate ORM Compatibility Version in Quarkus Properties\nDESCRIPTION: This property configures Quarkus to work with databases created by Hibernate ORM 5.6. It's essential for the compatibility tests in this module.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-orm-compatibility-5.6/README.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nquarkus.hibernate-orm.database.orm-compatibility.version = 5.6\n```\n\n----------------------------------------\n\nTITLE: Image Format Test Data\nDESCRIPTION: Comprehensive test data matrix showing RGB color values for different combinations of image types (USHORT_565_RGB, USHORT_555_RGB, BYTE_GRAY), formats (TIFF, PNG, GIF, BMP, JPEG), color spaces (sRGB, LINEAR_RGB, CIEXYZ, PYCC, GRAY) and compression methods. Each line contains the configuration and corresponding test RGB values.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/awt/src/test/resources/encoders_test_config.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTYPE_USHORT_565_RGB/TIFF/CS_LINEAR_RGB/PackBits█255,0,0,0█0,0,255,0\n```\n\n----------------------------------------\n\nTITLE: Template String Interpolation with Name and Time\nDESCRIPTION: Template string that interpolates a fullName property and formatted time instant. Uses curly brace syntax to inject the name.fullName value and formats a time value using toInstant() with a zone offset.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/qute/src/main/resources/templates/DefaultMethodResource/hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: template\nCODE:\n```\nHello {name.fullName} at {time.toInstant(zoneOffset)}!\n```\n\n----------------------------------------\n\nTITLE: Quarkus Configuration Properties Table Template in Qute\nDESCRIPTION: A Qute template that iterates through configuration properties of Quarkus extensions to generate documentation tables. The template handles configuration roots, properties, and sections while excluding deprecated items. It includes support for duration and memory size notes.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/config-doc-maven-plugin/src/main/resources/templates/markdown/default/allConfig.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: qute\nCODE:\n```\n{#for extensionConfigRootsEntry in configRootsByExtensions}\n\n# {extensionConfigRootsEntry.key.formatName}\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">Configuration property</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n{#for configRoot in extensionConfigRootsEntry.value.values}\n{#for item in configRoot.items}\n{#if !item.deprecated}\n{#if !item.isSection}\n{#configProperty context=context configProperty=item extension=extensionConfigRootsEntry.key additionalAnchorPrefix=additionalAnchorPrefix /}\n{#else}\n{#configSection context=context configSection=item extension=extensionConfigRootsEntry.key additionalAnchorPrefix=additionalAnchorPrefix /}\n{/if}\n{/if}\n{/for}\n{/for}\n</tbody>\n</table>\n{/for}\n\n{#if includeDurationNote}\n{#durationNote context.summaryTableId /}\n{/if}\n{#if includeMemorySizeNote}\n{#memorySizeNote context.summaryTableId /}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Interpolating String with Method Call in Quarkus Template\nDESCRIPTION: This snippet demonstrates how to use string interpolation in a Quarkus template, combining a static greeting with a dynamic name and method call. It takes a 'name' parameter and invokes the 'foo()' method on it.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-reactive/rest-qute/deployment/src/test/resources/templates/HelloResource/typeError.txt#2025-04-22_snippet_0\n\nLANGUAGE: Quarkus Template\nCODE:\n```\n{@java.lang.String name}Salut {name.foo()}!\n```\n\n----------------------------------------\n\nTITLE: Running Tests with External MySQL\nDESCRIPTION: Command to run tests against an external MySQL instance without container deployment.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mysql/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Gradle Build Configuration\nDESCRIPTION: Gradle build configuration to include local Maven repository\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_21\n\nLANGUAGE: gradle\nCODE:\n```\nrepositories {\n    mavenLocal() // add mavenLocal() to first position\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Launching Quarkus Application in Java\nDESCRIPTION: This snippet defines the main method for a Quarkus application. It sets up the Quarkus launch configuration, including options for development mode and configuration overrides, then launches the application.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/gradle/src/main/resources/test-resources-in-build-steps/application/src/main/resources/resources.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage io.quarkus.runtime;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * The main entry point of a Quarkus application\n */\npublic class main {\n\n    public static void main(String... args) {\n        Map<String, String> additionalProperties = new HashMap<>();\n        String profile = System.getProperty(\"quarkus.profile\");\n        if (profile != null) {\n            additionalProperties.put(\"quarkus.profile\", profile);\n        }\n        String logger = System.getProperty(\"io.quarkus.logging.file.enable\");\n        if (logger != null) {\n            additionalProperties.put(\"quarkus.log.file.enable\", logger);\n        }\n\n        Quarkus.run(args, additionalProperties);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Property Notes Template\nDESCRIPTION: Qute template conditional blocks for including duration and memory size notes when relevant properties are present in the configuration.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/config-doc-maven-plugin/src/main/resources/templates/markdown/default/configReference.qute.md#2025-04-22_snippet_1\n\nLANGUAGE: qute\nCODE:\n```\n{#if includeDurationNote}\n{#durationNote context.summaryTableId /}\n{/if}\n{#if includeMemorySizeNote}\n{#memorySizeNote context.summaryTableId /}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Running Jacoco Test Coverage Command\nDESCRIPTION: Command to generate test coverage report using Jacoco for the entire project.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nmvn install -Ptest-coverage\n```\n\n----------------------------------------\n\nTITLE: Conditional Documentation Routing with Qute Templates for Quarkus Extensions\nDESCRIPTION: A template using Qute templating engine to conditionally include documentation links based on the selected Quarkus extensions. It includes a header section and routes to appropriate documentation guides for messaging extensions like Kafka and AMQP.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/messaging-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: qute\nCODE:\n```\n{#include readme-header /}\n\n{#each input.selected-extensions-ga}\n{#switch it}\n{#case 'io.quarkus:quarkus-messaging-kafka'}\n[Related Apache Kafka guide section...](https://quarkus.io/guides/kafka-reactive-getting-started)\n\n{#case 'io.quarkus:quarkus-messaging-amqp'}\n[Related Apache AMQP 1.0 guide section...](https://quarkus.io/guides/amqp)\n\n{/switch}\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Language Registry Entry Format\nDESCRIPTION: Standard format for language registry entries containing type, subtag, description, date added, and optional fields like script suppression and scope.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-reactive/rest-client/deployment/src/test/resources/larger-than-chunk-size.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nType: language\nSubtag: aa\nDescription: Afar\nAdded: 2005-10-16\n%%\n```\n\n----------------------------------------\n\nTITLE: Launching Graylog Stack and Creating UDP Input\nDESCRIPTION: Shell commands to start Graylog infrastructure using Docker Compose and create a GELF UDP input using curl\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/logging-gelf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Launch Graylog and it's components (MongoDB and Elasticsearch)\ndocker-compose -f src/test/resources/docker-compose-graylog.yml up\n\n# Create a GELF UDP input\ncurl -H \"Content-Type: application/json\" -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"X-Requested-By: curl\" -X POST -v -d \\\n'{\"title\":\"udp input\",\"configuration\":{\"recv_buffer_size\":262144,\"bind_address\":\"0.0.0.0\",\"port\":12201,\"decompress_size_limit\":8388608},\"type\":\"org.graylog2.inputs.gelf.udp.GELFUDPInput\",\"global\":true}' \\\nhttp://localhost:9000/api/system/inputs\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Custom Keycloak Server in Shell\nDESCRIPTION: This command runs tests using a custom Keycloak server instead of a Docker container. It can be used with or without the -Dnative flag for native image testing. The Keycloak server should be listening on the default port 8180.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/oidc-tenancy/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Single Module Test Coverage Command\nDESCRIPTION: Command to generate Jacoco test coverage report for a specific module.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nmvn install jacoco:report -Ptest-coverage\n```\n\n----------------------------------------\n\nTITLE: Restricted Class Name Reference Patterns in Java\nDESCRIPTION: Examples of deprecated patterns for class name references that should be avoided in favor of using createConstant() method from ClassNames utility class. This ensures class names are validated against the classpath during testing.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/extensions/hibernate-orm/deployment/banned-signatures.txt#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMyClass.class.getName()\n```\n\nLANGUAGE: java\nCODE:\n```\nDotName.createSimple(\"org.mycompany.MyClass\")\n```\n\nLANGUAGE: java\nCODE:\n```\ncreateConstant(\"org.mycompany.MyClass\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TestClient Username in Properties File\nDESCRIPTION: Sets the testclient property to the value 'user' for test authentication configuration\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-mutual-auth/src/main/resources/role-mappings.txt#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ntestclient=user\n```\n\n----------------------------------------\n\nTITLE: Fluentd Configuration\nDESCRIPTION: Fluentd configuration file for GELF UDP input and Elasticsearch output\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/logging-gelf/README.md#2025-04-22_snippet_4\n\nLANGUAGE: conf\nCODE:\n```\n<source>\n  type gelf\n  tag example.gelf\n  bind 0.0.0.0\n  port 12201\n</source>\n\n<match example.gelf>\n  @type elasticsearch\n  host elasticsearch\n  port 9200\n  logstash_format true\n</match>\n```\n\n----------------------------------------\n\nTITLE: Invoking PubSub Function\nDESCRIPTION: Command to test the deployed PubSub function by sending a test payload.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/funqy-google-cloud-functions/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngcloud functions call quarkus-funqy-pubsub --data '{\"data\":\"HelloWorld\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Quarkus Apache Avro Extension Properties\nDESCRIPTION: This snippet defines configuration properties for the Quarkus Apache Avro extension. It includes options for controlling Avro serialization and deserialization behavior, such as fail-on-unknown-properties and specific-reader flags.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/maven/src/test/resources-filtered/projects/classic-with-log/src/main/resources/assets/test.txt#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nconfig-root=quarkus.avro\n\nconfig.quarkus.avro.serialize.fail-on-unknown-properties.type=boolean\nconfig.quarkus.avro.serialize.fail-on-unknown-properties.default-value=false\nconfig.quarkus.avro.serialize.fail-on-unknown-properties.doc=Controls whether serialization should fail if a schema contains a field that is not present in the data being serialized.\n\nconfig.quarkus.avro.deserialize.fail-on-unknown-properties.type=boolean\nconfig.quarkus.avro.deserialize.fail-on-unknown-properties.default-value=false\nconfig.quarkus.avro.deserialize.fail-on-unknown-properties.doc=Controls whether deserialization should fail if a field is present in the data being deserialized that is not present in the schema.\n\nconfig.quarkus.avro.deserialize.specific-reader.type=boolean\nconfig.quarkus.avro.deserialize.specific-reader.default-value=true\nconfig.quarkus.avro.deserialize.specific-reader.doc=Controls whether the Avro reader is configured to use the specific record type or the generic record type when deserializing data.\n```\n\n----------------------------------------\n\nTITLE: Defining Client Roles for Quarkus Application\nDESCRIPTION: This configuration snippet defines client roles for different environments in a Quarkus application. It maps the 'client' to 'user' and 'admin' roles, and assigns the 'user' role to 'localhost'.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/mtls-certificates/src/main/resources/cn-role-mappings.txt#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nclient=user,admin\nlocalhost=user\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Temporary Files\nDESCRIPTION: This command removes temporary files created during the certificate generation process, including RSA keys, CSRs, serial number files, and DER format certificates.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-mutual-auth/src/main/resources/tls/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm *.rsa\nrm *.csr\nrm ca.srl\nrm *.der\n```\n\n----------------------------------------\n\nTITLE: Deploying Storage Function\nDESCRIPTION: Command to deploy a Funqy function that listens to Storage events on Google Cloud Functions. Triggers on object finalization in a GCS bucket.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/funqy-google-cloud-functions/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngcloud functions deploy quarkus-funqy-storage --entry-point=io.quarkus.funqy.gcp.functions.FunqyBackgroundFunction \\\n  --trigger-resource my_gcs_bucket --trigger-event google.storage.object.finalize \\\n  --runtime=java21 --source=target/deployment --set-env-vars=QUARKUS_FUNQY_EXPORT=helloGCSWorld\n```\n\n----------------------------------------\n\nTITLE: Deploying PubSub Function\nDESCRIPTION: Command to deploy a Funqy function that listens to PubSub events on Google Cloud Functions. Uses Java 21 runtime and sets the function name via environment variable.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/funqy-google-cloud-functions/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngcloud functions deploy quarkus-funqy-pubsub --entry-point=io.quarkus.funqy.gcp.functions.FunqyBackgroundFunction \\\n  --trigger-resource hello_topic --trigger-event google.pubsub.topic.publish \\\n  --runtime=java21 --source=target/deployment --set-env-vars=QUARKUS_FUNQY_EXPORT=helloPubSubWorld\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft SQL Server Image Property in Quarkus\nDESCRIPTION: This property defines the default Microsoft SQL Server container image to be used with Quarkus applications. It specifies the Docker image and version for MSSQL integration.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/extensions/jdbc/jdbc-mssql/deployment/src/test/resources/container-license-acceptance.txt#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n${mssql.image}\n```\n\n----------------------------------------\n\nTITLE: Signing Server Certificate with CA\nDESCRIPTION: This command signs the server CSR with the CA certificate and key, creating a server certificate valid for 3650 days (10 years). It uses the server-openssl.cnf file for additional configuration.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-mutual-auth/src/main/resources/tls/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -req -CA ca.pem -CAkey ca.key -CAcreateserial -in server.csr \\\n  -out server.pem -extfile server-openssl.cnf -days 3650\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Quarkus Versions Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that lists the supported Quarkus versions for security fixes. It indicates which versions are currently supported and which are not.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version      | Supported          |\n| ------------ | ------------------ |\n| Latest 3.x   | :white_check_mark: |\n| 3.15 LTS     | :white_check_mark: |\n| 3.8 LTS      | :white_check_mark: |\n| Older 3.x    | :x:                |\n| < 3          | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Configuration Properties Table Template\nDESCRIPTION: HTML table template with Qute templating syntax for iterating through and displaying configuration properties and sections. Includes handling for non-deprecated properties and sections with additional context parameters.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/config-doc-maven-plugin/src/main/resources/templates/markdown/default/configReference.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n<thead>\n<tr>\n<th align=\"left\">Configuration property</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n{#for property in configItemCollection.nonDeprecatedProperties}\n{#configProperty context=context configProperty=property extension=extension additionalAnchorPrefix=additionalAnchorPrefix /}\n{/for}\n{#for section in configItemCollection.nonDeprecatedSections}\n{#configSection context=context configSection=section extension=extension additionalAnchorPrefix=additionalAnchorPrefix displayConfigRootDescription=false /}\n{/for}\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring External Components in Quarkus\nDESCRIPTION: This snippet contains configuration properties for external components in a Quarkus project. It includes settings for various services and modules, likely defining connection parameters, paths, or other configuration options required for the application to interact with these external components.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/bootstrap/app-model/src/test/resources/paths/directory-path-tree/external.txt#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nexternal\n```\n\n----------------------------------------\n\nTITLE: Running Native Tests with External MariaDB\nDESCRIPTION: Command to run native image tests with an externally configured MariaDB instance. Database must be initialized with provided SQL script.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-orm-tenancy/datasource/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Building Maven Artifact\nDESCRIPTION: Maven command to build and package the application, copying artifacts to target/deployment directory.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/funqy-google-cloud-functions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Defining MemorySize Format in Quarkus Using Regular Expression\nDESCRIPTION: This snippet shows the regular expression pattern used to recognize valid memory size strings in Quarkus configuration. It accepts numbers followed by optional suffixes representing different memory units.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/config-doc-maven-plugin/src/main/resources/templates/markdown/default/tags/memorySizeNote.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n[0-9]+[KkMmGgTtPpEeZzYy]?\n```\n\n----------------------------------------\n\nTITLE: Including README Header in Quarkus Template\nDESCRIPTION: This snippet includes a header file for the README using Qute templating syntax.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/hibernate-orm-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: qute\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Configuring IDEA Maven Importer Memory\nDESCRIPTION: Configuration to increase memory for IDEA's Maven importer to handle large Quarkus projects.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nidea.maven.embedder.xmx=8g\n```\n\n----------------------------------------\n\nTITLE: Conditional Link Inclusion for Hibernate ORM with Panache in Kotlin\nDESCRIPTION: This conditional block includes a link to the Hibernate with Panache in Kotlin documentation if the corresponding extension is selected.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/hibernate-orm-codestart/base/README.tpl.qute.md#2025-04-22_snippet_2\n\nLANGUAGE: qute\nCODE:\n```\n{#if input.selected-extensions-ga.contains('io.quarkus:quarkus-hibernate-orm-panache-kotlin')}\n[Related Hibernate with Panache in Kotlin section...](https://quarkus.io/guides/hibernate-orm-panache-kotlin)\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Graylog\nDESCRIPTION: Maven commands for running tests against Graylog in both JVM and native modes\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/logging-gelf/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean test -Dtest-gelf\n```\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean integration-test -Dtest-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Configuring Develocity Access Key\nDESCRIPTION: Environment variable setup for Develocity API key access\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nexport DEVELOCITY_ACCESS_KEY=ge.quarkus.io=a_secret_key\n```\n\n----------------------------------------\n\nTITLE: Gradle Properties Configuration\nDESCRIPTION: Gradle properties setup for using locally built Quarkus artifacts\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nquarkusPlatformArtifactId=quarkus-bom\nquarkusPluginVersion=999-SNAPSHOT\nquarkusPlatformVersion=999-SNAPSHOT\nquarkusPlatformGroupId=io.quarkus\n```\n\n----------------------------------------\n\nTITLE: Docker Command for MariaDB Test Instance\nDESCRIPTION: Docker command to start a MariaDB instance configured for testing. Sets up necessary environment variables and port mappings.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-orm-tenancy/datasource/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test_mariadb -e MYSQL_DATABASE=hibernate_orm_test -e MYSQL_ROOT_PASSWORD=secret -p 3308:3306 mariadb:10.4\n```\n\n----------------------------------------\n\nTITLE: Gradle Settings Configuration\nDESCRIPTION: Gradle settings configuration to include local Maven repository\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_20\n\nLANGUAGE: gradle\nCODE:\n```\npluginManagement {\n    repositories {\n        mavenLocal() // add mavenLocal() to first position\n        mavenCentral()\n        gradlePluginPortal()\n    }\n    .\n    .\n    .\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Memory Configuration\nDESCRIPTION: Environment variable setting to increase Maven memory allocation to prevent OutOfMemoryException.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/CONTRIBUTING.md#2025-04-22_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nexport MAVEN_OPTS=\"-Xmx4g\"\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Mac Helper\nDESCRIPTION: This command installs the Podman Mac helper, which is necessary for Podman to work correctly with test containers and dev services on Mac.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/ACTIONS.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPODMAN_VERSION=`podman -v | sed 's/[a-zA-Z ]*//'\"\nsudo /opt/homebrew/Cellar/podman/$PODMAN_VERSION/bin/podman-mac-helper install\n```\n\n----------------------------------------\n\nTITLE: Configuring Testcontainers for Podman\nDESCRIPTION: This command adds a configuration line to the Testcontainers properties file to enable privileged mode for the Ryuk container.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/ACTIONS.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho \"ryuk.container.privileged=true\" >> ~/.testcontainers.properties\n```\n\n----------------------------------------\n\nTITLE: Maven Properties Configuration for Resteasy Reactive Testsuite\nDESCRIPTION: Configuration properties used to control the testsuite execution, including options to skip cloning, checkout, and test execution, as well as repository organization and reference selection.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/tcks/resteasy-reactive/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `resteasy-reactive-testsuite.clone.skip` skips cloning the repository\n- `resteasy-reactive-testsuite.checkout.skip` skips (re-)checking out the respective ref\n- `resteasy-reactive-testsuite.test.skip` skips the execution of the suite\n- `resteasy-reactive-testsuite.repo.org` can be used to target a fork\n- `resteasy-reactive-testsuite.repo.ref` defines the ref to check out\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry JDBC Tests with DB2 Enabled\nDESCRIPTION: This command shows how to enable and run tests with DB2, which is disabled by default due to slow boot times. It uses the enable-db2 system property to activate DB2 testing.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/opentelemetry-jdbc-instrumentation/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify -Dtest-containers -Dstart-containers -Denable-db2\n```\n\n----------------------------------------\n\nTITLE: Including Readme Header in Quarkus Template\nDESCRIPTION: Template directive to include a readme-header file in a Quarkus project document using curly brace include syntax\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/resteasy-qute-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: template\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Including Readme Header in Quarkus Documentation\nDESCRIPTION: Directive to include a readme header file using a documentation processing syntax.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/websockets-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Loading GitHub Actions Runner LaunchDaemon\nDESCRIPTION: This command loads the LaunchDaemon configuration, which starts the GitHub Actions runner service and ensures it runs on system boot.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/ACTIONS.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo launchctl load -w /Library/LaunchDaemons/actions.runner.quarkusio-quarkus.macstadium-m1.plist\n```\n\n----------------------------------------\n\nTITLE: Adding Dev UI Authentication Extension Dependency with Gradle\nDESCRIPTION: Gradle dependency configuration for adding the Quarkus Dev UI Authentication extension to a project.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/grpc-codestart/base/README.tpl.qute.md#2025-04-22_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(\"io.quarkus:quarkus-dev-ui-authentication\")\n```\n\n----------------------------------------\n\nTITLE: Describing XML Support Module for PostgreSQL JDBC Driver in Quarkus\nDESCRIPTION: This Markdown snippet explains the purpose of the module, which is to enable XML support for the PostgreSQL JDBC driver in Quarkus native images. It allows for integration testing of advanced substitutions, specifically 'SQLXLMFeature', in the 'quarkus-jdbc-postgresql' module.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-postgresql-withxml/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Purpose\n\nThis module is very similar to `jpa-postgresql`, except it triggers native-image reachability\nof the XML support of the postgresql jdbc driver.\n\nThis allows us to run integrationt tests for advanced substitutions in the `quarkus-jdbc-postgresql` module,\nspecifically `SQLXLMFeature`.\n```\n\n----------------------------------------\n\nTITLE: Using Quarkus Configuration with YAML Format\nDESCRIPTION: Example of Quarkus configuration using YAML format, showing the same configuration as the properties example but in YAML syntax.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/rest-qute-codestart/base/README.tpl.qute.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngreeting:\n  message: hello\nquarkus:\n  http:\n    port: 9090\n```\n\n----------------------------------------\n\nTITLE: Configuring User Roles for Quarkus Project\nDESCRIPTION: This snippet defines user roles for specific email addresses in the Quarkus project. It uses a properties-like format where each line represents an email address and its associated roles. The roles are comma-separated if multiple roles are assigned to a single email.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/mtls-certificates/src/main/resources/san-rfc822-role-mappings.txt#2025-04-22_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\ncerts@quarkus\\.io=admin,user\ncerts-1@quarkus\\.io=user\n```\n\n----------------------------------------\n\nTITLE: Listing Optional Telemetry Test Classes\nDESCRIPTION: Lists three test classes used for validating different tracing propagation methods: Jaeger propagation and both single and multi B3 propagation formats. These tests are part of the Eclipse MicroProfile telemetry tracing TCK suite.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/tcks/microprofile-opentelemetry/src/test/resources/exclusions.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\norg.eclipse.microprofile.telemetry.tracing.tck.rest.JaegerPropagationTest\norg.eclipse.microprofile.telemetry.tracing.tck.rest.B3MultiPropagationTest\norg.eclipse.microprofile.telemetry.tracing.tck.rest.B3PropagationTest\n```\n\n----------------------------------------\n\nTITLE: Using Quarkus Profile-specific Configuration\nDESCRIPTION: Example showing how to set profile-specific configurations in Quarkus using the %profile_name% syntax in application.properties.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/rest-qute-codestart/base/README.tpl.qute.md#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngreeting.message=hello\n%dev.greeting.message=hello development\n%test.greeting.message=hello test\n%prod.greeting.message=hello production\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Quarkus Configuration\nDESCRIPTION: This snippet demonstrates the syntax for referencing environment variables within Quarkus configuration files. The placeholder format allows configuration properties to be populated from environment variables.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/config-doc-maven-plugin/src/main/resources/templates/markdown/default/tags/envVar.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nEnvironment variable: `{configProperty.path.environmentVariable}`\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Encoder Test in Java\nDESCRIPTION: This snippet demonstrates the format for configuring image encoder tests. It specifies the image type, file format, color space, compression algorithm, and pixel values to test.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/awt/doc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTYPE_4BYTE_ABGR/TIFF/CS_PYCC/ZLib|255,0,0,255|0,0,255,255\n│              │    │       │    │           └── Second pixel values to test at x:2 y:2\n│              │    │       │    └── First pixel values to test at x:25 y:25.\n│              │    │       └── Compression algorithm.\n│              │    └── Color space used to construct color model.\n│              └── Image file format, container.\n└── Image type, how does it actually store pixels.\n```\n\n----------------------------------------\n\nTITLE: Parsing Duration in Java\nDESCRIPTION: This snippet demonstrates the use of Duration.parse() method in Java for parsing duration strings. It's referenced to explain the standard format for duration values in Quarkus.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/config-doc-maven-plugin/src/main/resources/templates/markdown/default/tags/durationNote.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nDuration.parse()\n```\n\n----------------------------------------\n\nTITLE: Generating Server Key and Certificate Signing Request\nDESCRIPTION: These commands generate a server key and certificate signing request with a special configuration for subject alternative names. The common name is set to 'localhost'.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-test-random-port/src/main/resources/tls/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out server1.key.rsa 4096\nopenssl pkcs8 -topk8 -in server1.key.rsa -out server.key -nocrypt\nopenssl req -new -key server.key -out server.csr -config server-openssl.cnf\n```\n\n----------------------------------------\n\nTITLE: Generating Client Key and Certificate Signing Request (CSR)\nDESCRIPTION: These commands generate a client key and Certificate Signing Request (CSR). It creates a 4096-bit RSA key, converts it to PKCS8 format, and generates a CSR. The common name for the certificate is set to 'testclient'.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/grpc-mutual-auth/src/main/resources/tls/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out client.key.rsa 4096\nopenssl pkcs8 -topk8 -in client.key.rsa -out client.key -nocrypt\nopenssl req -new -key client.key -out client.csr\n```\n\n----------------------------------------\n\nTITLE: Setting Documentation Access Permissions in Properties Format\nDESCRIPTION: Defines URL to user role mappings for documentation access control. Maps Quarkus documentation to admin and user roles, and Vert.x documentation to user role only.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/mtls-certificates/src/main/resources/san-uri-role-mappings.txt#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhttps\\://www\\.quarkus\\.io/=admin,user\nhttps\\://www\\.vertx\\.io/=user\n```\n\n----------------------------------------\n\nTITLE: Displaying Maven Central Version Badge in Markdown\nDESCRIPTION: This code snippet shows how to create a badge that displays the current version of the extension on Maven Central using shields.io. It includes placeholders for group ID, namespace ID, and extension ID.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus-extension/code/quarkiverse/java/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Version](https://img.shields.io/maven-central/v/{group-id}/{namespace.id}{extension.id}?logo=apache-maven&style=flat-square)](https://central.sonatype.com/artifact/{group-id}/{namespace.id}{extension.id}-parent)\n```\n\n----------------------------------------\n\nTITLE: Displaying Maven Central Version Badge in Markdown\nDESCRIPTION: This code snippet shows how to create a badge in Markdown that displays the current version of the Quarkus extension on Maven Central. It uses shields.io to generate the badge image.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/maven/src/test/resources/__snapshots__/CreateExtensionMojoIT/testCreateQuarkiverseExtension/quarkus-my-quarkiverse-ext_README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Version](https://img.shields.io/maven-central/v/io.quarkiverse.my-quarkiverse-ext/quarkus-my-quarkiverse-ext?logo=apache-maven&style=flat-square)](https://central.sonatype.com/artifact/io.quarkiverse.my-quarkiverse-ext/quarkus-my-quarkiverse-ext-parent)\n```\n\n----------------------------------------\n\nTITLE: Defining User Roles for Quarkus Application\nDESCRIPTION: This configuration assigns roles to users in a Quarkus application. The 'redhat' user is given both 'admin' and 'user' roles, while the 'quarkus' user is assigned only the 'user' role.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/mtls-certificates/src/main/resources/san-any-role-mappings.txt#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nredhat=admin,user\nquarkus=user\n```\n\n----------------------------------------\n\nTITLE: Using Direct Command Line Arguments in Quarkus Command Mode\nDESCRIPTION: This snippet demonstrates an alternative approach to command mode where arguments are provided directly to a bean that runs at startup. The bean uses @CommandLineArguments to inject the command line arguments array.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus-extension/code/extension-codestart/java/runtime/src/main/codestarts/quarkus/{extension.id}-codestart/base/README.tpl.qute.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ApplicationScoped\npublic class GreetingService {\n\n    void onStart(@Observes StartupEvent ev, @CommandLineArguments String[] args) {\n        System.out.println(\"Hello \" + String.join(\" \", args));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running SQL Server Container with Podman\nDESCRIPTION: Podman command to start a SQL Server container for testing. Configures container with network host mode, memory settings, and required environment variables.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/jpa-mssql/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npodman run --rm=true --net=host --memory-swappiness=0 --name mssql_testing -e MSSQL_SA_PASSWORD=yourStrong(!)Password -e ACCEPT_EULA=Y -p 1435:1433 mcr.microsoft.com/mssql/2022-latest\n```\n\n----------------------------------------\n\nTITLE: Running Tests with External MariaDB\nDESCRIPTION: Command to run tests against an externally managed MariaDB instance. Requires a pre-configured database with specific settings.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-orm-tenancy/connection-resolver/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers\n```\n\n----------------------------------------\n\nTITLE: Including README Header in Quarkus Project Documentation\nDESCRIPTION: This snippet demonstrates the use of a custom include directive to insert the content of a 'readme-header' file into the current document. This is likely part of a templating system used in the Quarkus project documentation.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/funqy-http-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Installing HotSpot Debug Symbols for Allocation Profiling\nDESCRIPTION: Commands for installing HotSpot debug symbols on different Linux distributions, which are required for allocation profiling with Async Profiler.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Ubuntu/Debian - Java 17\napt install openjdk-17-dbg\n\n# Ubuntu/Debian - Java 21\n apt install openjdk-21-dbg\n\n# On CentOS, RHEL and some other RPM-based distributions - Java 17\ndebuginfo-install java-17-openjdk\n```\n\n----------------------------------------\n\nTITLE: Language Code Registry Entry Format\nDESCRIPTION: Standardized format for language code registry entries containing metadata like subtag codes, descriptions, dates and additional properties. Uses %% as record separator.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-reactive/rest/deployment/src/test/resources/larger-than-default-form-attribute.txt#2025-04-22_snippet_0\n\nLANGUAGE: data\nCODE:\n```\nType: language\nSubtag: aa\nDescription: Afar\nAdded: 2005-10-16\n%%\nType: language\nSubtag: ab\nDescription: Abkhazian\nAdded: 2005-10-16\nSuppress-Script: Cyrl\n```\n\n----------------------------------------\n\nTITLE: Executing Greeting Command in JBang Picocli Application\nDESCRIPTION: This command runs the main Java application using JBang, passing 'hello' as an argument to greet the world.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus-jbang/code/jbang-picocli-code/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./jbang src/main.java hello\n```\n\n----------------------------------------\n\nTITLE: Jakarta JSON Usage Warning Annotation\nDESCRIPTION: Annotation-based warning to prevent usage of jakarta.json.Json due to performance issues documented in Quarkus issue #42748. The implementation is noted to be significantly slow.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/extensions/oidc-client-registration/runtime/banned-signatures.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@defaultMessage Don't jakarta.json.Json as it is ridiculously slow (see https://github.com/quarkusio/quarkus/issues/42748)\njakarta.json.Json\n```\n\n----------------------------------------\n\nTITLE: Starting CPU Profiling with Async Profiler\nDESCRIPTION: Command to start CPU profiling for a running Java application using Async Profiler with increased buffer size for more accurate results.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/async-profiler/profiler.sh start -b 4000000 <pid>\n```\n\n----------------------------------------\n\nTITLE: Deploying Function to Google Cloud\nDESCRIPTION: gcloud command to deploy the Quarkus function to Google Cloud Functions with HTTP trigger and Java 21 runtime\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/google-cloud-functions-http/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngcloud functions deploy quarkus-example-http --entry-point=io.quarkus.gcp.functions.http.QuarkusHttpFunction \\\n  --runtime=java21 --trigger-http --source=target/deployment\n```\n\n----------------------------------------\n\nTITLE: Including README Header in Quarkus Documentation\nDESCRIPTION: This snippet uses an AsciiDoc include directive to insert the contents of a 'readme-header' file into the current document. This is likely used to maintain a consistent header across multiple README files or documentation pages in the Quarkus project.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/rest-client-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: asciidoc\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Funqy Service Configuration Path Reference\nDESCRIPTION: Reference to the Kubernetes service definition file that needs to be configured with Docker credentials.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/examples/funqy-knative-events-example/base/README.tpl.qute.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nsrc/main/k8s/funqy-service.yaml\n```\n\n----------------------------------------\n\nTITLE: Building Quarkus Application Package\nDESCRIPTION: Maven command to build the application artifact and copy it to the deployment directory\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/google-cloud-functions-http/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Running Native Tests with OpenSearch Container\nDESCRIPTION: Command to generate a native image and run Hibernate Search tests in native mode with OpenSearch running in containers.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/hibernate-search-orm-opensearch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Dtest-containers -Dstart-containers -Dnative\n```\n\n----------------------------------------\n\nTITLE: Including README Header in Quarkus Project Documentation (AsciiDoc)\nDESCRIPTION: This snippet demonstrates how to include a pre-defined README header in a Quarkus project documentation file using AsciiDoc syntax. It uses the include directive to insert content from an external file named 'readme-header'.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/codestarts/examples/quarkus/my-extension-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: asciidoc\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Image Format Test Specification\nDESCRIPTION: Test data specification defining combinations of image types (ARGB_PRE, BGR, 3BYTE_BGR), formats (TIFF, PNG, GIF, BMP, JPEG), color spaces (sRGB, LINEAR_RGB, CIEXYZ, PYCC, GRAY, DEFAULT) and compression methods with expected RGB color values for testing image processing functionality.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/awt/src/test/resources/encoders_test_config.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTYPE_INT_ARGB_PRE/TIFF/CS_GRAY/Deflate█255,0,0,255█0,0,255,255\nTYPE_INT_ARGB_PRE/TIFF/CS_DEFAULT/Default█255,0,0,255█0,0,255,255\nTYPE_INT_ARGB_PRE/TIFF/CS_DEFAULT/LZW█255,0,0,255█0,0,255,255\n```\n\n----------------------------------------\n\nTITLE: Basic Greeting Template with Variable Interpolation\nDESCRIPTION: A basic template string that interpolates a 'name' variable into a greeting message. The {name} placeholder will be replaced with the actual value at runtime.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/virtual-threads/mailer-virtual-threads/src/main/resources/templates/MailerResource/hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: template\nCODE:\n```\nHello {name}!\n```\n\n----------------------------------------\n\nTITLE: Including Quarkus Documentation Header\nDESCRIPTION: A template include directive that loads a readme header component, likely used across Quarkus documentation pages\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/devtools/project-core-extension-codestarts/src/main/resources/codestarts/quarkus/extension-codestarts/resteasy-reactive-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{#include readme-header /}\n```\n\n----------------------------------------\n\nTITLE: Executing Packaged Quarkus Application\nDESCRIPTION: Command to run the packaged Quarkus application JAR file from the target directory\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/elasticsearch-rest-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar target/quarkus-integration-test-elasticsearch-rest-client-1.0-SNAPSHOT-runner.jar\n```\n\n----------------------------------------\n\nTITLE: Implementing CommandLineInterface in Quarkus Command Mode\nDESCRIPTION: This code snippet shows how to implement the CommandLineInterface interface in a Quarkus application to create a command-line tool. The class is registered as a CDI bean and overrides the run method which will be called by Quarkus at startup.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/independent-projects/tools/base-codestarts/src/main/resources/codestarts/quarkus-extension/code/extension-codestart/java/runtime/src/main/codestarts/quarkus/{extension.id}-codestart/base/README.tpl.qute.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@ApplicationScoped\npublic class GreetingService implements CommandLineInterface {\n\n    @Override\n    public int run(String... args) {\n        System.out.println(\"Hello \" + String.join(\" \", args));\n        return 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux for Async Profiler (Permanent)\nDESCRIPTION: Shell commands to permanently configure kernel parameters using sysctl to allow capturing kernel call stacks using perf_events from a non-root process.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo sysctl -w kernel.perf_event_paranoid=1\nsudo sysctl -w kernel.kptr_restrict=0\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Custom Keycloak Server\nDESCRIPTION: This command runs the tests using a custom Keycloak server instead of a Docker container. It can be used with or without the -Dnative flag for native image testing.\nSOURCE: https://github.com/quarkusio/quarkus/blob/main/integration-tests/keycloak-authorization/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dtest-containers\n```"
  }
]