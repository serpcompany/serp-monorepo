[
  {
    "owner": "taxbandits",
    "repo": "tbs-nodejs-sdk",
    "content": "TITLE: Generating JWS Signature for JWT using Node.js 'jws' Library\nDESCRIPTION: This snippet demonstrates the creation of a JSON Web Signature by signing the header and payload using a secret key (client secret) with the HS256 algorithm. The 'jws.sign' function accepts the header object, the payload object, and the secret key. The output string is the JWT used for authenticating with the TaxBandits OAuth API. The secret key must be protected and retrieved securely from the TaxBandits Console.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/oauth-sdk/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst signature = jws.sign({\n    header: header,\n    payload: payload,\n    secret: secretKey, /*Client Secret retrieved from the console site*/\n})\n```\n\n----------------------------------------\n\nTITLE: Defining JWS Payload with Claims for JWT Generation in JavaScript\nDESCRIPTION: This code snippet constructs the JWT payload containing standard claims necessary for token validation. The 'iss' (issuer) and 'sub' (subject) claims are set to the client ID obtained from the TaxBandits Console. The 'aud' (audience) claim is the user token from the console, and 'iat' (issued at) is the UNIX epoch timestamp (in seconds) representing the token creation time. These fields form the token's identity context for authentication.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/oauth-sdk/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst payload = {\n    \"iss\": clientId, /*Issuer: Client ID retrieved from the console site*/\n    \"sub\": clientId, /*Subject: Client ID retrieved from the console site*/\n    \"aud\": userToken, /*Audience: User Token retrieved from the console site*/\n    \"iat\": parseInt(unixEpochStringConversion) /*Issued at: Number of seconds from Jan 1 1970 00:00:00 (Unix epoch format)*/\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JWT Access Token String\nDESCRIPTION: A sample JWT token string returned by the TaxBandits Authentication Server after validating the JWS. This token is base64url encoded and contains claims that authorize access to API endpoints. The token expires one hour after issuance, requiring renewal upon expiration.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/oauth-sdk/README.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3  \nMiOiJ0ZXN0YXBpLnRheGJhbmRpdHMuY29tIiwiYXVkI  \njoiYTU3NGI3NWYxOGIyNGZjMDlmOTAzOWZmYjVjYjA4ZjMiLCJp  \nYXQiOjE1OTU5MjAxMjQsImV4cCI6MTU5NTkyNzMyNH0.BIg8764SOhOai9As  \n3uRSidrF1-B9CxL6D5z4OggcVbs\n```\n\n----------------------------------------\n\nTITLE: Defining JWS Header for JWT Generation Using JavaScript\nDESCRIPTION: This snippet defines the JWS header object used to indicate the signing algorithm and token type for JWT creation. It specifies the HS256 algorithm (HMAC SHA-256) and sets the type as JWT. This header is part of the signed payload to create a JSON Web Signature representing the JWT. It is a required parameter for the jws.sign function to generate the JWT.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/oauth-sdk/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst header = {  \n    \"alg\":  \"HS256\",  /*Algorithm = HS256*/  \n    \"typ\":  \"JWT\"  /*Type = JSON Web Token (JWT)*/  \n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Styling and Applying Custom Styles in React with Popper.js in JavaScript\nDESCRIPTION: This example illustrates how to disable Popper.js's built-in applyStyle modifier and substitute a custom function, such as for framework-based integration (e.g., React). 'applyStyle' is set to disabled, and a custom 'applyReactStyle' modifier is introduced, allowing positional data export to any UI library. Key parameters are modifiers configuration and the user-defined style application function. The input consists of two DOM nodes, while the output is that positional data is applied manually by the developer, rather than by Popper.jsâ€™s default logic. Popper.js and a relevant frontend framework/library are required for integration.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/boir-sdk/TBS_BOIR_FRONTEND/src/styles/js/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction applyReactStyle(data) {\n    // export data in your framework and use its content to apply the style to your popper\n};\n\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    modifiers: {\n        applyStyle: { enabled: false },\n        applyReactStyle: {\n            enabled: true,\n            fn: applyReactStyle,\n            order: 800,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Modifier Behavior for Popper.js Framework Integration (e.g. React) in JavaScript\nDESCRIPTION: This snippet demonstrates how to disable the default applyStyle modifier in Popper.js and add a custom function (applyReactStyle) for integration with frameworks like React. The applyReactStyle modifier receives the computed positioning data and enables users to manually update styles using framework methods. Dependencies are Popper.js, DOM access, and a user-defined applyReactStyle function. Key parameters include modifiers.enable and modifiers.fn for configuring custom behavior. The input consists of reference and popper elements; the output does not alter the DOM directly but exposes data for framework-based updates.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/business-sdk/TBS_BUSINESS_FRONTEND/src/styles/js/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction applyReactStyle(data) {\n    // export data in your framework and use its content to apply the style to your popper\n};\n\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    modifiers: {\n        applyStyle: { enabled: false },\n        applyReactStyle: {\n            enabled: true,\n            fn: applyReactStyle,\n            order: 800,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles with React\nDESCRIPTION: This snippet illustrates how to customize the styling of a popper within a React application.  It disables the default `applyStyle` modifier and creates a custom `applyReactStyle` modifier to apply the styling using your preferred framework. The custom modifier function `applyReactStyle` receives data computed by Popper.js, allowing for direct integration with React's state management and rendering mechanisms. The custom modifier is then enabled with the desired order.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/tin-matching-recipients-sdk/TBS_TIN_MATCHING_RECIPIENTS_FRONTEND/src/styles/js/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction applyReactStyle(data) {\n    // export data in your framework and use its content to apply the style to your popper\n};\n\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    modifiers: {\n        applyStyle: { enabled: false },\n        applyReactStyle: {\n            enabled: true,\n            fn: applyReactStyle,\n            order: 800,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Modifiers for Popper.js Integration with React (JavaScript)\nDESCRIPTION: This code snippet illustrates how to create a custom modifier for Popper.js to integrate with React or similar frameworks, disabling the built-in applyStyle modifier and instead exporting positioning data to be manually applied via the framework. Required dependencies include Popper.js and suitable DOM nodes. The configuration object defines custom modifiers in the modifiers property, allowing the specification of a custom handler (applyReactStyle) that processes the computed popper data. This approach avoids direct DOM mutations by Popper.js, allowing React or another view library to apply styles as needed. It is particularly relevant when direct DOM manipulation could interfere with the framework's rendering system.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099MISC-sdk/TBS_FORM1099MISC_FRONTEND/src/styles/js/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction applyReactStyle(data) {\n    // export data in your framework and use its content to apply the style to your popper\n};\n\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    modifiers: {\n        applyStyle: { enabled: false },\n        applyReactStyle: {\n            enabled: true,\n            fn: applyReactStyle,\n            order: 800,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Modifier Integration in Popper.js for React (JavaScript)\nDESCRIPTION: This snippet illustrates creating a custom modifier for Popper.js, specifically disabling the default applyStyle modifier and enabling a user-defined applyReactStyle modifier. It assumes Popper.js is loaded and executed in a browser with React integration needs. The custom modifier function, applyReactStyle, facilitates integration with React by exporting popper position data for React-based style updates. The configuration disables Popper's built-in DOM styles, allowing manual style application by the external framework. Main parameters include the modifiers object, with enabled flags and order for execution. Input consists of DOM elements and a custom function; output is delegated style application control.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099NEC-sdk/TBS_FORM1099NEC_FRONTEND/src/styles/js/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction applyReactStyle(data) {\n    // export data in your framework and use its content to apply the style to your popper\n};\n\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    modifiers: {\n        applyStyle: { enabled: false },\n        applyReactStyle: {\n            enabled: true,\n            fn: applyReactStyle,\n            order: 800,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling applyStyle Modifier and Using a Custom Modifier\nDESCRIPTION: This snippet illustrates how to customize the styling integration with frameworks like React. It disables the default `applyStyle` modifier and creates a custom modifier to handle the styling logic. This is crucial for integrating Popper.js with frameworks that manage their own DOM manipulations. The `applyReactStyle` modifier is created which calls `applyReactStyle` function to apply style to the popper.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099K-sdk/TBS_FORM1099K_FRONTEND/src/styles/js/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction applyReactStyle(data) {\n    // export data in your framework and use its content to apply the style to your popper\n};\n\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    modifiers: {\n        applyStyle: { enabled: false },\n        applyReactStyle: {\n            enabled: true,\n            fn: applyReactStyle,\n            order: 800,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks in Popper.js: onCreate and onUpdate\nDESCRIPTION: This code demonstrates the use of `onCreate` and `onUpdate` callbacks within Popper.js.  The `onCreate` callback is executed after Popper.js initializes, while `onUpdate` runs upon subsequent updates.  These callbacks provide access to the computed data, allowing for custom styling and behaviors.  The `data` object contains all computed positioning information.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099K-sdk/TBS_FORM1099K_FRONTEND/src/styles/js/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    onCreate: (data) => {\n        // data is an object containing all the informations computed\n        // by Popper.js and used to style the popper and its arrow\n        // The complete description is available in Popper.js documentation\n    },\n    onUpdate: (data) => {\n        // same as `onCreate` but called on subsequent updates\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using onCreate and onUpdate Callbacks in Popper.js (JavaScript)\nDESCRIPTION: This snippet demonstrates the use of the onCreate and onUpdate callbacks when initializing a Popper.js instance. It requires Popper.js to be imported, and compatible browser environment. The reference and popper elements are selected from the DOM, while the callbacks are provided in the options object. The onCreate callback is triggered after initialization, and onUpdate is called for each update, each receiving a data object describing computed positioning details. These functions enhance control over runtime handling of popper updates. The input is reference and popper DOM nodes, and the output is custom logic execution on initialization and position updates.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099NEC-sdk/TBS_FORM1099NEC_FRONTEND/src/styles/js/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    onCreate: (data) => {\n        // data is an object containing all the informations computed\n        // by Popper.js and used to style the popper and its arrow\n        // The complete description is available in Popper.js documentation\n    },\n    onUpdate: (data) => {\n        // same as `onCreate` but called on subsequent updates\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Popper.js Callbacks for Creation and Updates in JavaScript\nDESCRIPTION: This snippet shows how to use the 'onCreate' and 'onUpdate' callbacks in Popper.js to execute custom logic when a popper is initialized or updated. The configuration object passed to the Popper constructor includes functions for both callbacks, each receiving a 'data' parameter with positional and styling information. Inputs are two DOM elements and optional callbacks; outputs are callback executions on popper creation and updates. Popper.js must be loaded in the environment, and the snippet is suitable for both vanilla JavaScript and integration with frameworks.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/boir-sdk/TBS_BOIR_FRONTEND/src/styles/js/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    onCreate: (data) => {\n        // data is an object containing all the informations computed\n        // by Popper.js and used to style the popper and its arrow\n        // The complete description is available in Popper.js documentation\n    },\n    onUpdate: (data) => {\n        // same as `onCreate` but called on subsequent updates\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using onCreate and onUpdate Callbacks in Popper.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to utilize the onCreate and onUpdate callbacks in Popper.js to handle events after initialization and upon subsequent updates of the popper's position. Dependencies include the Popper.js library and two DOM elements: the popper and the reference. The options object accepts callback properties onCreate and onUpdate, each receiving a data object containing computed information for styling and logic. Expected usage involves responding to popper initialization events and changes, such as repositioning or updating popper content. Callbacks enable custom behaviors or integrations. Ensure callbacks are performant to avoid UI delays.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099MISC-sdk/TBS_FORM1099MISC_FRONTEND/src/styles/js/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    onCreate: (data) => {\n        // data is an object containing all the informations computed\n        // by Popper.js and used to style the popper and its arrow\n        // The complete description is available in Popper.js documentation\n    },\n    onUpdate: (data) => {\n        // same as `onCreate` but called on subsequent updates\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using onCreate and onUpdate Callbacks in Popper.js JavaScript Initialization\nDESCRIPTION: This example illustrates the usage of Popper.js callbacks, showing how onCreate and onUpdate can be specified when initializing a popper instance. These callbacks receive a data object with computed positioning and style information, enabling custom logic after popper initialization and upon subsequent updates. The snippet requires Popper.js and access to DOM nodes, with functions for each callback. Expected input parameters include reference and popper DOM nodes, with the output being a configured Popper instance. No external dependencies are needed beyond Popper.js.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/business-sdk/TBS_BUSINESS_FRONTEND/src/styles/js/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    onCreate: (data) => {\n        // data is an object containing all the informations computed\n        // by Popper.js and used to style the popper and its arrow\n        // The complete description is available in Popper.js documentation\n    },\n    onUpdate: (data) => {\n        // same as `onCreate` but called on subsequent updates\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Popper.js Callbacks\nDESCRIPTION: This snippet demonstrates how to use the `onCreate` and `onUpdate` callbacks in Popper.js.  These callbacks provide hooks for executing code after the popper is initialized and on subsequent updates. The `onCreate` callback is triggered after the Popper instance is created, and the `onUpdate` callback is triggered whenever the popper's position needs to be recalculated. Both callbacks receive a `data` object containing the computed information used to style the popper and its arrow.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/tin-matching-recipients-sdk/TBS_TIN_MATCHING_RECIPIENTS_FRONTEND/src/styles/js/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    onCreate: (data) => {\n        // data is an object containing all the informations computed\n        // by Popper.js and used to style the popper and its arrow\n        // The complete description is available in Popper.js documentation\n    },\n    onUpdate: (data) => {\n        // same as `onCreate` but called on subsequent updates\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Running the application\nDESCRIPTION: This command starts the application using the script defined as `start` in the package.json file.  It needs to be executed in both the frontend and backend directories to start each part of the application. The Node JS application runs on localhost:3000 and the React JS application runs on localhost:3001.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/tin-matching-recipients-sdk/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Passing JWS Signature in HTTP Request Headers for JWT Authentication\nDESCRIPTION: This snippet illustrates how to send a HTTP request header with the JWS signature to the TaxBandits Authentication Server in order to generate a JWT (access token). The header key is 'Authentication' and the value is the JWS token string. This step is necessary to authenticate and obtain a JWT token for subsequent API requests.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/oauth-sdk/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nheaders: {\n    Authentication:signature  // Pass JWS as Authentication in headers\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Popper.js and Positioning an Element (JavaScript)\nDESCRIPTION: This snippet demonstrates how to instantiate a Popper.js object to position a popper element relative to a reference element in the DOM using vanilla JavaScript. It requires Popper.js to be loaded in the environment (either via CDN, npm, or another method). The reference and popper DOM nodes are selected via querySelector, and a new Popper instance is created with optional configuration. The key parameters are the reference element (anchor point), the popper element (floating UI), and an options object for customization. The output is a managed popper positioned near the button. Popper.js has no external dependencies.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099NEC-sdk/TBS_FORM1099NEC_FRONTEND/src/styles/js/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reference = document.querySelector('.my-button');\nvar popper = document.querySelector('.my-popper');\nvar anotherPopper = new Popper(\n    reference,\n    popper,\n    {\n        // popper options here\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Popper with Popper.js (JavaScript)\nDESCRIPTION: This snippet shows how to initialize a new Popper instance to position a popper element near a reference element in the DOM using JavaScript. Prerequisites include loading the Popper.js library in your environment (using one of the provided package managers or CDNs). The key parameters are the reference element, the popper element, and an optional configuration object for popper options. The expected input is two valid DOM nodesâ€”the element to align against and the element to be positioned. The output is a Popper instance that manages popper positioning. Ensure required nodes are present in the DOM before execution.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099MISC-sdk/TBS_FORM1099MISC_FRONTEND/src/styles/js/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reference = document.querySelector('.my-button');\nvar popper = document.querySelector('.my-popper');\nvar anotherPopper = new Popper(\n    reference,\n    popper,\n    {\n        // popper options here\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Popper.js with a Button and Popper\nDESCRIPTION: This snippet demonstrates the basic initialization of Popper.js. It takes a reference element (e.g., a button) and a popper element and positions the popper relative to the reference element.  It showcases how to select the elements from the DOM and pass them as parameters to create a new Popper instance.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099K-sdk/TBS_FORM1099K_FRONTEND/src/styles/js/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar reference = document.querySelector('.my-button');\nvar popper = document.querySelector('.my-popper');\nvar anotherPopper = new Popper(\n    reference,\n    popper,\n    {\n        // popper options here\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Positioned Popper with Popper.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new popper instance using Popper.js by selecting reference and popper DOM nodes and invoking the Popper constructor. No dependencies outside Popper.js and standard DOM APIs are necessary. The function positions the popper element near the reference element, and popper options can be provided to customize behavior. Inputs are existing DOM elements for the reference and popper; output is a Popper instance controlling placement. The snippet assumes Popper.js is loaded and the DOM contains the relevant elements.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/business-sdk/TBS_BUSINESS_FRONTEND/src/styles/js/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reference = document.querySelector('.my-button');\nvar popper = document.querySelector('.my-popper');\nvar anotherPopper = new Popper(\n    reference,\n    popper,\n    {\n        // popper options here\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Popper.js\nDESCRIPTION: This snippet demonstrates how to initialize Popper.js to position a popper element near a reference element. It retrieves the reference and popper elements from the DOM, then instantiates Popper with these elements and an optional configuration object. The configuration object allows for custom settings, including callbacks for initialization and updates.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/tin-matching-recipients-sdk/TBS_TIN_MATCHING_RECIPIENTS_FRONTEND/src/styles/js/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar reference = document.querySelector('.my-button');\nvar popper = document.querySelector('.my-popper');\nvar anotherPopper = new Popper(\n    reference,\n    popper,\n    {\n        // popper options here\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm (Create React App)\nDESCRIPTION: Runs the React application in development mode using the `react-scripts start` command. It automatically opens the app in the default browser (usually at http://localhost:3000), enables hot reloading for instant feedback on changes, and displays lint errors in the console.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/boir-sdk/TBS_BOIR_FRONTEND/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating and Positioning a Popper with Popper.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a new Popper object to position a popper element adjacent to a reference button using Popper.js. The example uses native DOM APIs to select elements and passes configuration options as a third argument. No dependencies are required beyond including Popper.js, and the inputs are DOM nodes for reference and popper. The output is an instance of Popper handling positioning and style calculation. The snippet assumes Popper.js is already available in the environment.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/boir-sdk/TBS_BOIR_FRONTEND/src/styles/js/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reference = document.querySelector('.my-button');\nvar popper = document.querySelector('.my-popper');\nvar anotherPopper = new Popper(\n    reference,\n    popper,\n    {\n        // popper options here\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Building Production App with npm (Create React App)\nDESCRIPTION: Builds the React application for production using `react-scripts build`. This process bundles React in production mode, optimizes the build for performance, minifies the code, and includes hashes in filenames for caching. The output is placed in the `build` folder, ready for deployment.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/boir-sdk/TBS_BOIR_FRONTEND/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm (Create React App)\nDESCRIPTION: Launches the test runner (`react-scripts test`) in interactive watch mode. This command executes tests associated with the React application and re-runs them when files change.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/boir-sdk/TBS_BOIR_FRONTEND/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from JWT Verification Ping API\nDESCRIPTION: This JSON response represents the output from the TaxBandits Ping API used to verify the validity of a JWT token. It confirms successful API communication with status codes, API version, JWT expiry timestamp, and indicates no errors. The Authorization header must include the valid JWT token for this request.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/oauth-sdk/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"StatusCode\": 200,\n    \"StatusName\": \"Ok\",\n    \"StatusMessage\": \"Successful API call\",\n    \"APIVersion\": \"V1.7.3\",\n    \"JWTExpiry\": \"1696917733\",\n    \"TimeZone\": \"UTC\",\n    \"Errors\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from Server Time Endpoint\nDESCRIPTION: This JSON snippet shows an example response from the TaxBandits GetServerTime API endpoint. It contains the server's status, current date and time, time zone, and Unix timestamp. This information helps developers align their system time with the API server time. The response also reports any errors if present.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/oauth-sdk/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"StatusCode\": 200,\n    \"StatusName\": \"Ok\",\n    \"StatusMessage\": \"Successful API call\",\n    \"ServerDate\": \"10/10/2023\",\n    \"ServerTime\": \"06:05:48\",\n    \"TimeZone\": \"UTC\",\n    \"UnixTs\": \"1696917948\",\n    \"Errors\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JWS Token String\nDESCRIPTION: This snippet shows a sample JWS (JWT) string generated by signing a payload with the specified header and secret key. This token is base64url encoded and contains three sections separated by periods: header, payload, and signature. It is an example illustrating the expected output format after JWS signing.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/oauth-sdk/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOi  \nI5NjhhOWM3OGRhZTI5YTI5Iiwic3ViIjoiOTY4YTljNzhkYWUyOWEyOSIsImF1  \nZCI6ImE1NzRiNzVmMThiMjRmYzA5ZjkwMzlmZmI1Y2IwOGYzIiwiaWF0IjoxN  \nTE2MjM5MDIyfQ.HNQznxlPyVt62kyUeVwtk1-uzm1uDWH4NBDLShA6Ac0\n```\n\n----------------------------------------\n\nTITLE: Installing Material Design Icons Webfont - Node.js\nDESCRIPTION: This snippet installs the @mdi/font package, which contains the Material Design Icons webfont, using npm.  It is a prerequisite for using the Material Design Icons in a web project. The command downloads and installs the necessary files and dependencies.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/tin-matching-recipients-sdk/TBS_TIN_MATCHING_RECIPIENTS_FRONTEND/src/styles/css/icons-mdi/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm install @mdi/font\n```\n\n----------------------------------------\n\nTITLE: Installing Material Design Icons Webfont Package using NPM - Shell\nDESCRIPTION: This snippet demonstrates how to install the @mdi/font package, which provides the Material Design Icons webfont, using the Node package manager npm. The command requires that you have npm and Node.js installed on your system. Running this command in your project directory downloads and saves the webfont files and related resources in node_modules, making them available for import in JavaScript-based web projects. No additional configuration parameters are required for installation, but you should refer to the package documentation for integration steps.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/business-sdk/TBS_BUSINESS_FRONTEND/src/styles/css/icons-mdi/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mdi/font\n```\n\n----------------------------------------\n\nTITLE: Installing Material Design Icons Webfont via npm - Shell\nDESCRIPTION: Demonstrates how to install the '@mdi/font' package using npm in a command-line shell environment. This command fetches the webfont assets for Material Design Icons to be used in web projects. Prerequisites include having Node.js and npm installed; the expected input is the command itself, and the output is the addition of '@mdi/font' to the project's dependencies. No additional arguments are required, and it is platform-agnostic as long as npm is present.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/boir-sdk/TBS_BOIR_FRONTEND/src/styles/css/icons-mdi/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mdi/font\n```\n\n----------------------------------------\n\nTITLE: Installing Material Design Icons Webfont via NPM - Shell\nDESCRIPTION: Installs the Material Design Icons webfont package using the npm package manager. This command downloads the package from the npm registry and adds it to the project's dependencies. Requires Node.js and npm installed on the system. The package contains the necessary font files and CSS for using MDI as a webfont.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099MISC-sdk/TBS_FORM1099MISC_FRONTEND/src/styles/css/icons-mdi/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mdi/font\n```\n\n----------------------------------------\n\nTITLE: Installing Material Design Icons Font via NPM\nDESCRIPTION: This code snippet demonstrates how to install the Material Design Icons font package using npm. It uses the npm install command followed by the package name @mdi/font.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099K-sdk/TBS_FORM1099K_FRONTEND/src/styles/css/icons-mdi/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @mdi/font\n```\n\n----------------------------------------\n\nTITLE: Installing Material Design Icons Webfont via NPM\nDESCRIPTION: This snippet demonstrates the installation of the @mdi/font package using npm. The command `npm install @mdi/font` downloads and installs the webfont files for the Material Design Icons project into your project's node_modules directory. This allows developers to use the icons in their web applications.  There are no specific input or output parameters for the installation command itself; the output is the installation of the package and its dependencies.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099NEC-sdk/TBS_FORM1099NEC_FRONTEND/src/styles/css/icons-mdi/README.md#_snippet_0\n\nLANGUAGE: npm\nCODE:\n```\nnpm install @mdi/font\n```\n\n----------------------------------------\n\nTITLE: Starting the Application\nDESCRIPTION: Command to start the Node.js backend server and React.js frontend application.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099MISC-sdk/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js and React Applications - Shell Script\nDESCRIPTION: This shell command starts the development server for either the Node.js backend or the React frontend, depending on the current directory. The command should be run separately in both frontend and backend directories, launching the Node.js backend on localhost:3000 and the React frontend on localhost:3001. Requires all dependencies to be installed beforehand.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099K-sdk/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Node.js and React.js Applications Using NPM in Bash\nDESCRIPTION: This snippet demonstrates how to start both the backend Node.js API server and the frontend React.js application using the npm run start command. Each service should be started in its respective directory and terminal session. By default, the Node.js backend will serve on localhost:3000 and the React.js frontend on localhost:3001.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099NEC-sdk/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots Exclusion Protocol (robots.txt)\nDESCRIPTION: This snippet defines rules for web robots. The 'User-agent: *' directive applies the subsequent rules to all known web crawlers. The 'Disallow:' directive with no specified path means that no pages or directories on the site are disallowed from crawling, effectively allowing robots to access all content.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099MISC-sdk/TBS_FORM1099MISC_FRONTEND/public/robots.txt#_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows unrestricted access to all web crawlers. It specifies that all user agents can access all directories and files within the website.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099NEC-sdk/TBS_FORM1099NEC_FRONTEND/public/robots.txt#_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Node.js SDK\nDESCRIPTION: This snippet configures the `robots.txt` file. It specifies that all user agents (`User-agent: *`) are disallowed from crawling any part of the SDK (`Disallow:`). This is often used to prevent search engines from indexing specific parts of a website, such as development environments or internal APIs. There are no dependencies for this configuration.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/tin-matching-recipients-sdk/TBS_TIN_MATCHING_RECIPIENTS_FRONTEND/public/robots.txt#_snippet_0\n\nLANGUAGE: other\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration with npm\nDESCRIPTION: Executes the `react-scripts eject` command, which removes the single build dependency (`react-scripts`) and copies all configuration files (Webpack, Babel, ESLint, etc.) and transitive dependencies directly into the project. This is an irreversible operation that grants full control over the build configuration but requires manual maintenance thereafter.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/boir-sdk/TBS_BOIR_FRONTEND/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Packages for Node.js and React.js Applications in Bash\nDESCRIPTION: This snippet shows the command used to install project dependencies defined in package.json for both the backend (Node.js) and frontend (React.js) directories. It uses npm, the Node package manager, which must be pre-installed with Node.js. Run this command in each relevant directory after cloning to ensure all required packages are available.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099NEC-sdk/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Packages\nDESCRIPTION: This command installs the npm packages listed in the package.json file. It is executed in both the frontend and backend directories to install the necessary dependencies for each part of the application.  These packages are required for the application to run correctly.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/tin-matching-recipients-sdk/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install the required npm packages listed in the package.json file for both frontend and backend applications.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099MISC-sdk/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies - Shell Script\nDESCRIPTION: This shell command installs all npm packages listed in the package.json file for either the frontend or backend directories. It should be executed in both the frontend and backend folders separately. Node.js and npm must be installed prior to running this command, and it resolves all runtime and development dependencies required for the application.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099K-sdk/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning Project Repository Using Git in Bash\nDESCRIPTION: This snippet demonstrates how to clone the TaxBandits Form1099-NEC API SDK repository from GitHub using the git command-line tool. It is a prerequisite for setting up the project on a local development environment. Ensure that git is installed before executing the command. The provided repository URL clones the full SDK source code to a target machine.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099NEC-sdk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TaxBandits/tbs-nodejs-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the TaxBandits SDK Repository\nDESCRIPTION: Command to clone the TaxBandits SDK repository from GitHub to your local machine.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099MISC-sdk/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/SPAN-Enterprises/TaxBandits-SDK.git\n```\n\n----------------------------------------\n\nTITLE: Cloning TaxBandits Node.js SDK Project - Shell Script\nDESCRIPTION: This shell command clones the TaxBandits tbs-nodejs-sdk repository to your local machine. It is the first step in obtaining the project source code for local development. No dependencies are required apart from Git, and the input is the repository URL.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/form1099K-sdk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TaxBandits/tbs-nodejs-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Cloning TaxBandits Node.js SDK Repository\nDESCRIPTION: This command clones the TaxBandits Node.js SDK repository from GitHub to your local machine. It's the initial step to getting started with the SDK and its functionalities.  The command utilizes Git, a distributed version control system.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TaxBandits/tbs-nodejs-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Cloning Project Repository Using Git CLI Bash\nDESCRIPTION: This snippet shows how to clone the TaxBandits OAuth API SDK repository from GitHub to a local machine using the git command line interface. It assumes git is already installed and configured on the local system and that the user has internet access to retrieve the repository. The cloned project contains both frontend and backend folders for running the React and Node.js applications, respectively.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/oauth-sdk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TaxBandits/tbs-nodejs-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the project repository\nDESCRIPTION: This command clones the TaxBandits-SDK repository from GitHub to your local machine. It uses the `git clone` command to download the entire project, including all branches and history.\nSOURCE: https://github.com/taxbandits/tbs-nodejs-sdk/blob/main/tin-matching-recipients-sdk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/SPAN-Enterprises/TaxBandits-SDK.git\n```"
  }
]