[
  {
    "owner": "upstash",
    "repo": "ratelimit-py",
    "content": "TITLE: Basic Rate Limiting Implementation\nDESCRIPTION: Example showing how to implement basic rate limiting using the FixedWindow algorithm. Creates a rate limiter that allows 10 requests per 10 seconds.\nSOURCE: https://github.com/upstash/ratelimit-py/blob/main/README.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom upstash_ratelimit import Ratelimit, FixedWindow\nfrom upstash_redis import Redis\n\n# Create a new ratelimiter, that allows 10 requests per 10 seconds\nratelimit = Ratelimit(\n    redis=Redis.from_env(),\n    limiter=FixedWindow(max_requests=10, window=10),\n    # Optional prefix for the keys used in Redis. This is useful\n    # if you want to share a Redis instance with other applications\n    # and want to avoid key collisions. The default prefix is\n    # \"@upstash/ratelimit\"\n    prefix=\"@upstash/ratelimit\",\n)\n\n# Use a constant string to limit all requests with a single ratelimit\n# Or use a user ID, API key or IP address for individual limits.\nidentifier = \"api\"\nresponse = ratelimit.limit(identifier)\n\nif not response.allowed:\n    print(\"Unable to process at this time\")\nelse:\n    do_expensive_calculation()\n    print(\"Here you go!\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Rate Limits Implementation\nDESCRIPTION: Example showing how to implement different rate limits for different user types (free vs paid users).\nSOURCE: https://github.com/upstash/ratelimit-py/blob/main/README.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom upstash_ratelimit import Ratelimit, SlidingWindow\nfrom upstash_redis import Redis\n\nclass MultiRL:\n    def __init__(self) -> None:\n        redis = Redis.from_env()\n        self.free = Ratelimit(\n            redis=redis,\n            limiter=SlidingWindow(max_requests=10, window=10),\n            prefix=\"ratelimit:free\",\n        )\n\n        self.paid = Ratelimit(\n            redis=redis,\n            limiter=SlidingWindow(max_requests=60, window=10),\n            prefix=\"ratelimit:paid\",\n        )\n\n# Create a new ratelimiter, that allows 10 requests per 10 seconds\nratelimit = MultiRL()\n\nratelimit.free.limit(\"userIP\")\nratelimit.paid.limit(\"userIP\")\n```\n\n----------------------------------------\n\nTITLE: Custom Rates Implementation\nDESCRIPTION: Example showing how to implement rate limiting with custom token consumption rates per request.\nSOURCE: https://github.com/upstash/ratelimit-py/blob/main/README.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom upstash_ratelimit import Ratelimit, FixedWindow\nfrom upstash_redis import Redis\n\nratelimit = Ratelimit(\n    redis=Redis.from_env(),\n    limiter=FixedWindow(max_requests=10, window=10),\n)\n\n# pass rate as 5 to subtract 5 from the number of\n# allowed requests in the window:\nidentifier = \"api\"\nresponse = ratelimit.limit(identifier, rate=5)\n```\n\n----------------------------------------\n\nTITLE: Block Until Ready Implementation\nDESCRIPTION: Example demonstrating how to implement rate limiting with blocking behavior until the request can be processed or timeout occurs.\nSOURCE: https://github.com/upstash/ratelimit-py/blob/main/README.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom upstash_ratelimit import Ratelimit, SlidingWindow\nfrom upstash_redis import Redis\n\n# Create a new ratelimiter, that allows 10 requests per 10 seconds\nratelimit = Ratelimit(\n    redis=Redis.from_env(),\n    limiter=SlidingWindow(max_requests=10, window=10),\n)\n\nresponse = ratelimit.block_until_ready(\"id\", timeout=30)\n\nif not response.allowed:\n    print(\"Unable to process, even after 30 seconds\")\nelse:\n    do_expensive_calculation()\n    print(\"Here you go!\")\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Flask Server with Rate Limiting\nDESCRIPTION: Commands to install Flask and run a simple server application. The server has a rate limiting feature that can be tested by sending requests to the '/request' endpoint.\nSOURCE: https://github.com/upstash/ratelimit-py/blob/main/examples/flask-server/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install flask\nflask --app hello run\n```\n\n----------------------------------------\n\nTITLE: Installing Upstash Ratelimit SDK with pip\nDESCRIPTION: Command to install the upstash-ratelimit package using pip package manager.\nSOURCE: https://github.com/upstash/ratelimit-py/blob/main/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install upstash-ratelimit\n```\n\n----------------------------------------\n\nTITLE: Running Deployment Script for Flask Server on AWS Lambda\nDESCRIPTION: Command to execute the deployment script that installs dependencies and generates a deployment package for AWS Lambda.\nSOURCE: https://github.com/upstash/ratelimit-py/blob/main/examples/aws-lambda/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./script\n```\n\n----------------------------------------\n\nTITLE: Running Tests Command\nDESCRIPTION: Command to run the test suite using pytest within the Poetry environment.\nSOURCE: https://github.com/upstash/ratelimit-py/blob/main/README.md#2025-04-07_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest\n```"
  }
]