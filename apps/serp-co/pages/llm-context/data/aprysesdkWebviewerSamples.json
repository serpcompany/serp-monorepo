[
  {
    "owner": "aprysesdk",
    "repo": "webviewer-samples",
    "content": "TITLE: Install Project Dependencies (npm)\nDESCRIPTION: Installs the necessary npm packages defined in the project's package.json file. These dependencies are required for the application to run correctly.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-jquery/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies\nDESCRIPTION: This command installs the necessary Node.js dependencies for the WebViewer Electron project. It reads the package.json file and installs all listed dependencies from the npm registry.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-electron/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using npm\nDESCRIPTION: Installs the necessary dependencies for the project using Node Package Manager (npm).  These dependencies are defined in the `package.json` file and are required for the application to run correctly.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-annotations-sqlite3/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies (Shell)\nDESCRIPTION: This snippet clones the webviewer-samples repository from GitHub, navigates to the webviewer-offline directory, and installs the necessary npm dependencies.  It requires Git and Node.js to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-offline/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-offline\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies\nDESCRIPTION: This command clones the webviewer-samples repository from GitHub with a depth of 1 (to only get the latest commit) then navigates to the specific directory for the webviewer-user-bookmarks-nodejs sample. It then cleans the npm cache and installs the necessary dependencies using npm.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-user-bookmarks-nodejs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-user-bookmarks-nodejs\nnpm cache clean --force\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the WebViewer Custom UI Sample\nDESCRIPTION: This command starts the application using npm. It assumes that the package.json file contains a script named 'start' that defines how to run the application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-custom-ui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running the React WebViewer Sample\nDESCRIPTION: This snippet demonstrates how to start the React application after the dependencies are installed. The `npm start` command initiates the development server, allowing you to view the WebViewer application in your web browser.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-react/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Compile Java Sources and Copy Resources (Ant)\nDESCRIPTION: This target compiles Java source files located in the `${src.home}` directory and places the compiled classes in the `${build.home}/WEB-INF/classes` directory.  It also copies any non-Java resources from the source directory to the classes directory. The `compile.classpath` is used to resolve dependencies during compilation.  The debug and deprecation compiler flags are controlled by properties.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n  <target name=\"compile\" depends=\"prepare\"\n   description=\"Compile Java sources\">\n\n    <!-- Compile Java classes as necessary -->\n    <mkdir    dir=\"${build.home}/WEB-INF/classes\"/>\n    <javac srcdir=\"${src.home}\"\n          destdir=\"${build.home}/WEB-INF/classes\"\n            debug=\"${compile.debug}\"\n      deprecation=\"${compile.deprecation}\">\n        <classpath refid=\"compile.classpath\"/>\n    </javac>\n\n    <!-- Copy application resources -->\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n      <fileset dir=\"${src.home}\" excludes=\"**/*.java\"/>\n    </copy>\n\n  </target>\n```\n\n----------------------------------------\n\nTITLE: NPM Start Script\nDESCRIPTION: This JSON snippet defines the `start` script in `package.json`. It uses Parcel to serve the `index.html` file and automatically opens it in a browser at `http://localhost:1234`. This simplifies the process of starting the development server.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-js/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"start\": \"parcel index.html --open http://localhost:1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading a 3D Asset\nDESCRIPTION: This snippet shows how to preload a 3D asset using the `preload3dAsset` function. This allows for pre-conversion of the model data before loading. The snippet also explains the structure of the returned asset object, including modelData and propertiesData.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { preload3dAsset } from '@pdftron/webviewer-bim-client';\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst assetObject = await preload3dAsset(<serverURL>, <pathToAsset>, <conversionOptions>);\n\n/*\nSample Asset Object\n{\n   modelData: {\n\tid: '7bdb6aeab27191a882b9d3ed1e48afd4b490d755',\n\tauth: 'be36e17d84d9eac35f41aef4cd9dc6e894f9f452b96175b2075308725338c3fe'\n   },\n   propertiesData: {\n\tid: 'b204f18fb2168dc547d5056721c50ceb5bb3c62b',\n\tauth: 'fa34e17d84g3awe35f41aef4cd9dc6e894f9f452b96175b2075308725338c3fe'\n   }\n};\n*/\n```\n\n----------------------------------------\n\nTITLE: Run WebViewer Video Sample\nDESCRIPTION: Starts the WebViewer video sample application using npm. This command executes the start script defined in the package.json file, typically launching a development server.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-video/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running the Application (Shell)\nDESCRIPTION: This command starts the application using npm. It assumes that the `package.json` file in the current directory (webviewer-offline) has a `start` script defined that initiates the application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-offline/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Loading a Cached 3D Asset\nDESCRIPTION: This snippet demonstrates how to load a cached 3D asset using the `loadCached3dAsset` function, utilizing an asset object containing IDs for the asset data and properties data.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsampleAssetObject = {\n   modelData: {\n\tid: '7bdb6aeab27191a882b9d3ed1e48afd4b490d755',\n\tauth: 'be36e17d84d9eac35f41aef4cd9dc6e894f9f452b96175b2075308725338c3fe'\n   },\n   propertiesData: {\n\tid: 'b204f18fb2168dc547d5056721c50ceb5bb3c62b',\n\tauth: 'fa34e17d84g3awe35f41aef4cd9dc6e894f9f452b96175b2075308725338c3fe'\n   }\n};\n\t\nconst webviewerBIM = await initializeBimViewer(instance, serverURL, options);\nconst assetObject = await webviewerBIM.File.loadCached3dAsset(sampleAssetObject);\n```\n\n----------------------------------------\n\nTITLE: Running WebViewer BIM Application\nDESCRIPTION: This snippet shows the command to start the WebViewer BIM application after it has been set up.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running the WebViewer Mendix Widget in development mode\nDESCRIPTION: This command starts the WebViewer Mendix widget in development mode, which automatically rebuilds the widget as code changes are made and copies it into the app widget folder. This allows for rapid development and testing of the widget.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-mendix/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Java (Linux)\nDESCRIPTION: These commands install the OpenJDK 8 JRE and JDK on a Linux system using the apt-get package manager. They are necessary to recompile and run Java-based components of the WebViewer Tomcat sample.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install openjdk-8-jre\nsudo apt-get install openjdk-8-jdk\n```\n\n----------------------------------------\n\nTITLE: Set Camera Sensitivity in WebViewer\nDESCRIPTION: This code snippet shows how to set the camera sensitivity for the Orbit/Pan tool in WebViewer.  It retrieves the pan tool from the document viewer and sets its camera sensitivity to a specified number. It requires the instance and Core to be initialized beforehand.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { documentViewer } = instance.Core;\nconst cameraTools = {\n  orbit: 'Orbit3D',\n  pan: 'Pan3D',\n  walk: 'Walk',\n};\nconst panTool = documentViewer.getTool(cameraTools.pan);\npanTool.setCameraSensitivity(10);\n```\n\n----------------------------------------\n\nTITLE: Checking Asset Conversion Progress\nDESCRIPTION: This snippet shows how to check the conversion progress of a preloaded asset using `checkAssetConversionProgress`. It uses a rudimentary polling mechanism to determine when the asset is ready to be loaded.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsampleAssetObject = {\n   modelData: {\n\tid: '7bdb6aeab27191a882b9d3ed1e48afd4b490d755',\n\tauth: 'be36e17d84d9eac35f41aef4cd9dc6e894f9f452b96175b2075308725338c3fe'\n   },\n   propertiesData: {\n\tid: 'b204f18fb2168dc547d5056721c50ceb5bb3c62b',\n\tauth: 'fa34e17d84g3awe35f41aef4cd9dc6e894f9f452b96175b2075308725338c3fe'\n   }\n};\n\t\nconst webviewerBIM = await initializeBimViewer(instance, serverURL, options);\n\t\n// rudimentary polling against the BIM server to know when the Asset is ready\nwhile (true) {\n  const status = await webviewerBim.File.checkAssetConversionProgress(assetObject);\n  if (status === true) {\n    break;\n  }\n  await new Promise((r) => setTimeout(r, 200));\n}\n\t\nconst assetObject = await webviewerBIM.File.loadCached3dAsset(sampleAssetObject);\n```\n\n----------------------------------------\n\nTITLE: Initialize WebViewer BIM Client\nDESCRIPTION: This code snippet shows how to initialize the WebViewer BIM client and load a 3D asset.  It imports the WebViewer and initializeBimViewer modules, initializes WebViewer, then initializes the WebViewerBIM with license and server URL, and finally loads a 3D asset. Replace the placeholder values for `license`, `serverURL`, and the asset URI.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport  Webviewer  from  '@pdftron/webviewer';\nimport { initializeBimViewer } from '@pdftron/webivewer/bim-client'\n\nWebviewer({\n  path: '/webviewer/lib',\n}, document.getElementById('viewer')).then(instance  => {\n\n  const license = `---- Insert commercial license key here after purchase ----`;\n  const serverURL = `---- Insert server URL after setup ----`;\n  const options = { license: license };\n  const WebViewerBIM = await initializeBimViewer(instance, serverURL, options);\n\n  WebViewerBIM.File.load3dAsset('<uri for 3d asset>');\n\n\n});\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: This command compiles and minifies the Next.js application for production deployment.  It uses the 'build' script defined in package.json.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-nextjs-14/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Java Environment Variables (Windows)\nDESCRIPTION: This batch script snippet sets the JAVA_HOME and JRE_HOME environment variables on Windows. These variables are crucial for the Tomcat server to locate the Java Development Kit (JDK) and Java Runtime Environment (JRE). The user must replace <JDK location> and <JRE location> with the actual paths to their JDK and JRE installations.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/README.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@echo off\nset JAVA_HOME=C:\\Program Files\\<JDK location>\nset JRE_HOME=C:\\Program Files\\<JRE location>\n```\n\n----------------------------------------\n\nTITLE: Creating a Salesforce scratch org\nDESCRIPTION: Creates a new scratch org using the configuration defined in `config/project-scratch-def.json`. The `--set-default` flag sets the new scratch org as the default org for future commands. The `--alias` flag assigns an alias (my-scratch-org) to the org. Requires prior authentication with a Dev Hub org.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsf org create scratch --definition-file config/project-scratch-def.json --set-default --alias my-scratch-org\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js (Mac)\nDESCRIPTION: This command installs Node.js on macOS using Homebrew.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install node\n```\n\n----------------------------------------\n\nTITLE: Initializing WebViewer in index.html JavaScript\nDESCRIPTION: This JavaScript snippet initializes WebViewer within the index.html file. It configures the path to the WebViewer library, sets the initial document to be displayed (WebviewerDemoDoc.pdf), and provides a placeholder for the license key. The path parameter specifies the relative path to the WebViewer library files.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-winforms/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebViewer.Iframe({\n    path: 'lib',\n    initialDoc: 'WebviewerDemoDoc.pdf',\n    //licenseKey: 'LICENSE_KEY'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Servlet Context Parameter in XML\nDESCRIPTION: This snippet demonstrates how to define a context initialization parameter within the `<web-app>` element in a `web.xml` file. The `webmaster` parameter stores the email address of the administrator.  It allows for setting application-wide configurations accessible in servlets and JSPs.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/web.xml.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n <context-param>\n  <param-name>webmaster</param-name>\n  <param-value>myaddress@mycompany.com</param-value>\n  <description>\n        The EMAIL address of the administrator to whom questions\n        and comments about this application should be addressed.\n      </description>\n    </context-param>\n```\n\n----------------------------------------\n\nTITLE: Deploying Static Resources\nDESCRIPTION: This command deploys only the StaticResource metadata type to the Salesforce org. It is useful when the `/staticresources/` folder exceeds the deployment size limit.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce-attachments/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsf project deploy start -m StaticResource\n```\n\n----------------------------------------\n\nTITLE: Shutting down Tomcat on Windows using shutdown.bat\nDESCRIPTION: This snippet shows how to shut down Tomcat on Windows using the shutdown.bat script. The script is in the bin directory under CATALINA_HOME.  This is the standard way to stop the Tomcat server.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\n%CATALINA_HOME%\\bin\\shutdown.bat\n```\n\n----------------------------------------\n\nTITLE: Running the PowerApps Component Sample\nDESCRIPTION: This snippet demonstrates how to start the PowerApps component sample using npm. This command will start the necessary servers, allowing you to view WebViewer running as a control within the PowerApps component framework test environment. It requires localhost:3000 to be listening in the background.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-powerapps-component/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Static Resources Configuration\nDESCRIPTION: This JSON snippet configures the `multipleStaticFileCopier` to copy static resources. Specifically, it copies the contents of `node_modules/@pdftron/webviewer/public` to `dist/public/webviewer`. This is essential for WebViewer to function correctly as it relies on these static assets.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-js/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"multipleStaticFileCopier\": [\n    {\n      \"origin\": \"node_modules/@pdftron/webviewer/public\",\n      \"destination\": \"dist/public/webviewer\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages in config.js using postMessage (JavaScript)\nDESCRIPTION: This JavaScript code snippet sets up a listener for 'message' events on the window object.  It filters messages to ensure they are trusted and of the expected object type. It then uses a switch statement to handle different message types, specifically looking for 'OPEN_DOCUMENT' messages and calling instance.loadDocument with the provided file.  Dependencies include WebViewer's `instance` object.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('message', receiveMessage, false);\n\nfunction receiveMessage(event) {\n  if (event.isTrusted && typeof event.data === 'object') {\n    switch (event.data.type) {\n      case 'OPEN_DOCUMENT':\n        instance.loadDocument(event.data.file)\n        break;\n      default:\n        break;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pull WebViewer BIM Server Docker Image\nDESCRIPTION: Pulls the latest WebViewer BIM Server Docker image from the pdftron repository. This command downloads the Docker image to your local machine, allowing you to run the server in a containerized environment. Requires Docker CLI to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull pdftron/webviewer-bim-server:latest\n```\n\n----------------------------------------\n\nTITLE: Optimizing static resources for Salesforce\nDESCRIPTION: Executes the `optimize` script defined in `package.json`. This script optimizes the WebViewer SDK for deployment to Salesforce by removing unnecessary files and creating static resources (.zip and .xml files) under `./force-app/main/default/staticresources`.  The script requires answering a series of prompts to configure the optimization process.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run optimize\n```\n\n----------------------------------------\n\nTITLE: Building Tomcat - Ant\nDESCRIPTION: This snippet shows the Ant command used to build the Tomcat release.  It requires the current directory to be the Tomcat source directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_10\n\nLANGUAGE: Ant\nCODE:\n```\ncd ${tomcat.source}\nant release\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Timeout in web.xml\nDESCRIPTION: This snippet configures the default session timeout for the web application. Sessions will expire after 30 minutes of inactivity. This configuration ensures that inactive user sessions are terminated to prevent resource exhaustion.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/web.xml.txt#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n    <session-config>\n      <session-timeout>30</session-timeout>    <!-- 30 minutes -->\n    </session-config>\n```\n\n----------------------------------------\n\nTITLE: Building Extras using Ant - Shell\nDESCRIPTION: Navigates to the Tomcat source directory and executes the Ant build script, specifically targeting the extras target. This builds additional components like commons-logging and webservices.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncd ${tomcat.source}\nant extras\n```\n\n----------------------------------------\n\nTITLE: Sample WebViewer BIM Server Configuration\nDESCRIPTION: Example JSON configuration file for the WebViewer BIM Server. It demonstrates how to set the license key, allowed origins, and request timeout. The configuration file can be used to customize server settings.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"license\": \"my_license_key\",\n    \"allowed_origins\": [\"test.com\", \"pdftron.com\"],\n    \"request_timeout\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the webviewer-salesforce repository\nDESCRIPTION: Clones the webviewer-salesforce repository from GitHub using `git clone` and then changes the current directory to the cloned repository.  The `--depth=1` flag is used to perform a shallow clone, downloading only the most recent commit. This reduces the download size and time.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-salesforce\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies for React WebViewer Sample\nDESCRIPTION: This snippet provides instructions on cloning the WebViewer samples repository, navigating to the React sample directory, and installing the necessary dependencies using npm. This step is crucial for setting up the project before running it.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-react/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-react\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Next.js 14 Sample Directory\nDESCRIPTION: This command changes the current directory to the webviewer-nextjs-14 folder within the cloned repository. This step ensures subsequent commands are executed in the correct project context.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-nextjs-14/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd webviewer-samples/webviewer-nextjs-14\n```\n\n----------------------------------------\n\nTITLE: Configure JUnit Reports Directory - Properties\nDESCRIPTION: Configures the directory where JUnit reports are written using the \"test.reports\" property.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_21\n\nLANGUAGE: Properties\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Cloning, navigating and installing dependencies with npm\nDESCRIPTION: These commands clone the repository, navigate to the correct directory, and install the necessary dependencies using npm to setup the Vue project.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-vue/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-vue\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies\nDESCRIPTION: This snippet clones the webviewer-samples repository from GitHub, navigates to the specific annotations sample directory, and installs the necessary npm dependencies. It requires Git and Node.js/npm to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-annotations-aspnet/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-annotations-aspnet\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Unmounting WebViewer BIM Viewer\nDESCRIPTION: This snippet shows how to unmount the WebViewer BIM viewer, reverting WebViewer to its original state and clearing memory. Includes necessary imports.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport  Webviewer  from  '@pdftron/webviewer';\nimport { initializeBimViewer, unmountBimViewer } from '@pdftron/webviewer-bim-client'\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n  const webviewerBIM = await initializeBimViewer(instance, serverURL, options);\n  webviewerBIM.File.load3dAsset(\"Add URL to your 3D asset here\");\n \n // Call unmountBimViewer when you're ready to unmount.\n // unmountBimViewer(instance);\n```\n\n----------------------------------------\n\nTITLE: WebSocket Server Initialization\nDESCRIPTION: This JavaScript snippet shows how to initialize a WebSocket server on a specified port.  It's used in the annotationHandler.js file.  The port number (8181 in this case) needs to be accessible. If there are restrictions, you may need to change to another available port.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-realtime-collaboration-sqlite3/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//\\server\\annotationHandler.js\n\n`const wss = new WebSocket.Server({ port: 8181});`\n```\n\n----------------------------------------\n\nTITLE: Setting base.path property in build.properties - Properties\nDESCRIPTION: Configures the base.path property in the build.properties file. This property specifies the location where Tomcat dependencies are downloaded during the build process. It is recommended to place this directory outside the source tree.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\n# ----- Default Base Path for Dependent Packages -----\n# Replace this path with the directory path where dependencies binaries\n# should be downloaded\nbase.path=/home/me/some-place-to-download-to\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: This command installs the necessary Node.js packages specified in the project's package.json file.  It requires Node.js and npm (or yarn) to be installed and configured.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-nextjs-14/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Sending Messages from Lightning Web Component (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to send messages from a Lightning Web Component to an iframe using `postMessage`. The `handleFileSelected` function is triggered when a file is selected and sends an 'OPEN_DOCUMENT' message to the iframe's contentWindow. The `initUI` function initializes the WebViewer and sets up the iframeWindow reference. The code depends on the lwc framework and Salesforce resource imports. The `file` parameter is expected to be the path or content of the document.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LightningElement, track, wire } from 'lwc';\nimport myfilesUrl from '@salesforce/resourceUrl/myfiles';\nimport libUrl from '@salesforce/resourceUrl/lib';\n\nexport default class WebViewer extends LightningElement {\n\n  handleFileSelected(file) {\n    this.iframeWindow.postMessage({type: 'OPEN_DOCUMENT', file: file})\n  }\n\n  initUI() {\n    const myObj = {\n      libUrl: libUrl,\n      fullAPI: false,\n      namespacePrefix: '',\n    };\n\n    const viewerElement = this.template.querySelector('div');\n    const viewer = new WebViewer({\n      path: myObj.libUrl,\n      fullAPI: myObj.fullAPI,\n      custom: JSON.stringify(myObj),\n      initialDoc: 'file.pdf',\n      config: myfilesUrl + '/config.js',\n    }, viewerElement);\n\n    viewerElement.addEventListener('ready', () => {\n      this.iframeWindow = viewerElement.querySelector('iframe').contentWindow\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json start script (Windows)\nDESCRIPTION: This JSON snippet shows the change needed in package.json to run the startup script on Windows. It replaces the original .sh startup script call to call the .bat startup script instead.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n`\"start\": \\\"./bin/startup.sh\\\"`\n\nto become:\n\n`\"start\": \"cd bin && startup.bat\"`\n```\n\n----------------------------------------\n\nTITLE: Cloning the repository\nDESCRIPTION: Clones the webviewer-samples repository from GitHub with a depth of 1 to reduce download size, then navigates to the webviewer-blazor directory. This is the initial step for setting up the Blazor WebViewer project.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-blazor\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning the WebViewer Samples Repository\nDESCRIPTION: This command clones the webviewer-samples repository from GitHub with a depth of 1, minimizing the download size by only retrieving the latest version.  It is the first step to acquiring the necessary files for the blazor webviewer sample.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-blazor-wasm\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Disable Anti-Aliasing in WebViewer\nDESCRIPTION: This code snippet demonstrates how to disable anti-aliasing in the WebViewer BIM viewer. It assumes that the `initializeBimViewer` function has already been called to initialize the viewer instance.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst webviewerBIM = await initializeBimViewer(instance, serverURL, options);\nwebviewerBIM.Viewer.disableAntiAliasing();\n```\n\n----------------------------------------\n\nTITLE: Linting and Fixing Files\nDESCRIPTION: This command runs the linter on the project's files and attempts to automatically fix any linting errors. It uses the 'lint' script defined in package.json and requires a linter (e.g., ESLint) to be configured.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-nextjs-14/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Starting the Application\nDESCRIPTION: Starts the Node.js application, which serves the WebViewer sample. This command assumes that the user is already in the project directory and has installed the necessary dependencies using `npm install`.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-annotations-document/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Directory Structure - Mendix < 9 theme resources\nDESCRIPTION: This shows the expected directory structure for placing WebViewer's static assets in Mendix versions prior to version 9. These assets are required for WebViewer to run correctly within the Mendix application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-mendix/README.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n/path/to/your/mendix/app/theme/resources\n└───lib\n    ├───core\n    └───ui\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository\nDESCRIPTION: This command clones the forked Apache Tomcat repository from GitHub to your local machine. Replace `$USERNAME` with your GitHub username. This allows you to make changes locally and then submit a pull request.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/$USERNAME/tomcat.git\n```\n\n----------------------------------------\n\nTITLE: Run the Application\nDESCRIPTION: This snippet starts the Node.js server for the WebViewer real-time collaboration sample using npm. It assumes that the necessary dependencies have already been installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-realtime-collaboration-sqlite3/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring GPG Executable Path in build.properties - Properties\nDESCRIPTION: Configures the location of the GPG executable in the build.properties file. This is used for cryptographically signing the released artifacts with a PGP signature during a full release build. This is optional and only needed if you plan to sign the release.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_8\n\nLANGUAGE: Properties\nCODE:\n```\n# Location of GPG executable (used only for releases)\ngpg.exec=/path/to/gpg\n```\n\n----------------------------------------\n\nTITLE: Defining a Servlet in web.xml\nDESCRIPTION: This snippet defines a servlet named `controller` with initialization parameters. It specifies the servlet class, the servlet's role in the MVC architecture, and maps action classes to servlet paths. The `<load-on-startup>` element ensures that the servlet is loaded when the server starts.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/web.xml.txt#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n    <servlet>\n      <servlet-name>controller</servlet-name>\n      <description>\n        This servlet plays the \"controller\" role in the MVC architecture\n        used in this application.  It is generally mapped to the \".do\"\n        filename extension with a servlet-mapping element, and all form\n        submits in the app will be submitted to a request URI like\n        \"saveCustomer.do\", which will therefore be mapped to this servlet.\n\n        The initialization parameter names for this servlet are the\n        \"servlet path\" that will be received by this servlet (after the\n        filename extension is removed).  The corresponding value is the\n        name of the action class that will be used to process this request.\n      </description>\n      <servlet-class>com.mycompany.mypackage.ControllerServlet</servlet-class>\n      <init-param>\n        <param-name>listOrders</param-name>\n        <param-value>com.mycompany.myactions.ListOrdersAction</param-value>\n      </init-param>\n      <init-param>\n        <param-name>saveCustomer</param-name>\n        <param-value>com.mycompany.myactions.SaveCustomerAction</param-value>\n      </init-param>\n      <!-- Load this servlet at server startup time -->\n      <load-on-startup>5</load-on-startup>\n    </servlet>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository using Git\nDESCRIPTION: Clones the webviewer-samples repository from GitHub using `git clone`. The `--depth=1` option reduces the download size by only retrieving the latest commit. This is a prerequisite for setting up the WebViewer annotations sample.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-annotations-sqlite3/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the WebViewer Samples Repository\nDESCRIPTION: Clones the webviewer-samples repository from GitHub with a depth of 1 to reduce download size, then changes the current directory to the webviewer-annotations-nodejs folder. This prepares the environment for installing dependencies and running the sample application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-annotations-nodejs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-annotations-nodejs\nnpm install\n```\n\n----------------------------------------\n\nTITLE: WebViewer BIM Server Convert API Example\nDESCRIPTION: Example of using the `curl` command to convert a 3D asset into a specified format using the WebViewer BIM Server API. It demonstrates how to specify the input file and the desired output format through HTTP headers. Requires `curl` to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_5\n\nLANGUAGE: shel\nCODE:\n```\ncurl -X GET http://localhost:8085/v1/convert/3d/vsf -H \"uri: url_to_your_3d_asset\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Performance Tests in build.properties\nDESCRIPTION: This snippet shows how to disable the performance tests by setting the test.excludePerformance property to true in build.properties. This is useful on slower or resource-constrained systems.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_25\n\nLANGUAGE: properties\nCODE:\n```\ntest.excludePerformance=true\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Compiler in Watch Mode (Shell)\nDESCRIPTION: This command uses npm to run the `watch` script, which is typically configured in the `package.json` file to start the TypeScript compiler in watch mode. This means that the compiler will automatically recompile the TypeScript source files whenever changes are detected.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-typescript/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Excluding JUnit Test Classes in build.properties\nDESCRIPTION: This snippet shows how to configure the build.properties to exclude specific JUnit test classes from the test run by defining the test.exclude property with an Ant excludes pattern.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_20\n\nLANGUAGE: properties\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Running the Blazor WebViewer application\nDESCRIPTION: Runs the application using npm start command. It will start the server and allow accessing the viewer through the specified URL.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: WebSocket Client Connection\nDESCRIPTION: This JavaScript snippet shows how to establish a WebSocket connection from the client-side. It's used in the index.js file. It constructs the WebSocket URL using the hostname and port (8181 in this case).  The port number should match that of the server.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-realtime-collaboration-sqlite3/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//\\client\\index.js\n\nconst url = `ws://${hostName}:8181`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Signing in build.properties\nDESCRIPTION: This snippet shows the properties that need to be added to the `build.properties` file to configure the code signing service for official releases of Apache Tomcat. The values are placeholders and will be provided by the PMC.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\n# Location of GPG executable (used only for releases)\n# Code signing of Windows installer\ndo.codesigning=true\ncodesigning.user=request-via-pmc\ncodesigning.pwd=request-via-pmc\ncodesigning.partnercode=request-via-pmc\ncodesigning.service=Microsoft Windows Signing\n```\n\n----------------------------------------\n\nTITLE: Starting the Application\nDESCRIPTION: This snippet starts the application using npm.  It assumes that npm is configured correctly and the necessary dependencies have been installed. After running this command, the application should be accessible via a web browser.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-facial-redaction/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Prepare Build Directory (Ant)\nDESCRIPTION: This target prepares the build directory by creating the necessary subdirectories and copying the static content of the web application. It creates the `${build.home}`, `${build.home}/WEB-INF`, and `${build.home}/WEB-INF/classes` directories.  It then copies the static content from the `${web.home}` directory to the `${build.home}` directory. Finally, it creates the `${build.home}/WEB-INF/lib` directory, intended for external dependencies (not populated in this example).\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n  <target name=\"prepare\">\n\n    <!-- Create build directories as needed -->\n    <mkdir  dir=\"${build.home}\"/>\n    <mkdir  dir=\"${build.home}/WEB-INF\"/>\n    <mkdir  dir=\"${build.home}/WEB-INF/classes\"/>\n\n\n    <!-- Copy static content of this web application -->\n    <copy todir=\"${build.home}\">\n      <fileset dir=\"${web.home}\"/>\n    </copy>\n\n    <!-- Copy external dependencies as required -->\n    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->\n    <mkdir  dir=\"${build.home}/WEB-INF/lib\"/>\n<!--\n    <copy todir=\"${build.home}/WEB-INF/lib\" file=\"${foo.jar}\"/>\n-->\n\n    <!-- Copy static files from external dependencies as needed -->\n    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->\n\n  </target>\n```\n\n----------------------------------------\n\nTITLE: Clone WebViewer Video Sample Repository\nDESCRIPTION: Clones the webviewer-samples repository from GitHub with a depth of 1 to retrieve the latest version efficiently.  This command downloads the necessary files for the video sample.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-video/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-video\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the WebViewer Application\nDESCRIPTION: Starts the WebViewer application using the npm start command. This command executes the script defined in the package.json file, typically starting the Node.js server that serves the WebViewer application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-annotations-nodejs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Installing Dependencies\nDESCRIPTION: These commands clone the webviewer-samples repository, navigate to the specific DOCX generation example directory, and install the necessary Node.js dependencies using npm. This sets up the environment to run the DOCX generation and viewing application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-generate-docx/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-generate-docx\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning WebViewer Samples Repository\nDESCRIPTION: This command clones the webviewer-samples repository from GitHub with a depth of 1. This reduces the download size by only retrieving the latest version.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-flutter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\n```\n\n----------------------------------------\n\nTITLE: Initializing WebViewer BIM Viewer\nDESCRIPTION: This snippet demonstrates how to initialize the WebViewer BIM viewer within the WebViewer instance. It includes importing necessary modules, setting up the license key and server URL, and calling `initializeBimViewer`.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport  Webviewer  from  '@pdftron/webviewer';\nimport { initializeBimViewer } from '@pdftron/webviewer/bim-client'\n\nfunction App() {\n  const viewer = useRef(null);\n\n  useEffect(() => {\n    WebViewer(\n      { path: '/webviewer/lib' },\n      viewer.current,\n    ).then(async instance => {\n\n      const license = `---- Insert commercial license key here after purchase ----`;\n      const serverURL = `---- Insert server URL after setup ----`;\n\n      const options = getViewerOptions(license);\n      const webviewerBIM = await initializeBimViewer(instance, serverURL, options);\n    });\n  }, []);\n\nfunction getViewerOptions(license) {\n    return {\n      license,\n      dataSchema: {\n        headerName: 'Name',\n        defaultValues: {\n          Description: 'Description',\n          GlobalID: 'GlobalId',\n          Handle: 'handle',\n        },\n        groups: {\n          ExampleGroup01: {\n            ObjectType: 'ObjectType',\n            ObjectPlacement: 'ObjectPlacement',\n          },\n        },\n        groupOrder: ['ExampleGroup01'],\n        removeEmptyRows: true,\n        removeEmptyGroups: true,\n        createMiscGroup: true,\n      }\n    };\n  }\n\n  return (\n    <div className=\"webviewer-bim-container\">\n      <div className=\"webviewer\" ref={viewer} style={{ height: \"100vh\" }}></div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Test Output on Console - Properties\nDESCRIPTION: Disables the display of test output on the console by setting the \"test.verbose\" property to true.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_28\n\nLANGUAGE: Properties\nCODE:\n```\ntest.verbose=true\n```\n\n----------------------------------------\n\nTITLE: Run the application using npm\nDESCRIPTION: This command starts the development server, which hosts the WebViewer application. It is assumed that all dependencies have been installed beforehand.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-barcode/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing WebViewer Mendix Widget\nDESCRIPTION: These commands clone the WebViewer samples repository, navigate to the Mendix widget directory, and install the necessary npm dependencies. This is the first step in integrating WebViewer into a Mendix application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-mendix/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-mendix\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Screen-Space Ambient Occlusion Options\nDESCRIPTION: This snippet demonstrates how to set custom options for screen-space ambient occlusion (SSAO) using the `setSSAOOptions` function, allowing adjustment of parameters like radius and blur.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst webviewerBIM = await initializeBimViewer(instance, serverURL, options);\nwebviewerBIM.Viewer.setSSAOOptions({\n // example parameters：\n isDynamicRadius: true,\n radius: 1,\n loops: 64,\n blurRadius: 2,\n power: 1.4,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Tiger Annotation\nDESCRIPTION: This JavaScript snippet shows another example of using canvasToPDF. It creates a PDF blob representing a tiger drawing. The drawTiger function draws the tiger image onto a canvas. width and height are derived from the rectangleAnnot.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-react-canvasToPDF/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst blob = await canvasToPDF(drawTiger, {\n  width: rectangleAnnot.Width,\n  height: rectangleAnnot.Height,\n});\n```\n\n----------------------------------------\n\nTITLE: Install WebViewer Mendix Module\nDESCRIPTION: This snippet clones the webviewer-samples repository, navigates to the webviewer-mendix-module directory, and installs the necessary npm packages. This sets up the environment for using the WebViewer Mendix module.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-mendix-module/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-mendix-module\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Bootstrap\nDESCRIPTION: Demonstrates how to use Open Iconic icons with Bootstrap.  The `oi` class and `oi-icon-name` are used to display the icon, and accessibility attributes are included. Requires Open Iconic Bootstrap CSS.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/wwwroot/css/open-iconic/README.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Clone and Install WebViewer Document Merge Sample\nDESCRIPTION: This code snippet clones the webviewer-document-merge repository from GitHub, navigates to the directory, and installs the necessary dependencies using npm.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-document-merge/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone ApryseSDK/webviewer-document-merge\ncd webviewer-samples/webviewer-document-merge\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Styling Open Iconic SVG Sprite Icons\nDESCRIPTION: Shows how to size SVG sprite icons using CSS by setting the width and height properties of the `<svg>` tag.  Ensures the icons maintain their aspect ratio while scaling.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/wwwroot/css/open-iconic/README.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies with npm\nDESCRIPTION: This code snippet clones the webviewer-samples repository from GitHub, navigates to the webviewer-annotations-php directory, and installs the necessary npm dependencies. It sets up the project for running the WebViewer annotations sample.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-annotations-php/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-annotations-php\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Bootstrap Stylesheet\nDESCRIPTION: Shows how to include the Open Iconic stylesheet for Bootstrap in your HTML.  This allows you to use Open Iconic icons with Bootstrap's styling and components.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/wwwroot/css/open-iconic/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Running the Svelte Development Server (Shell)\nDESCRIPTION: This command starts the Svelte development server, allowing you to view and interact with the WebViewer Svelte example application. It automatically rebuilds the application when changes are made to the source code.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-svelte/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository\nDESCRIPTION: This snippet clones the webviewer-samples repository with a depth of 1 to retrieve only the most recent version of the code. After cloning, it changes the directory to the webviewer-facial-redaction folder, preparing for dependency installation.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-facial-redaction/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-facial-redaction\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the Application using npm\nDESCRIPTION: Starts the application using the `npm start` command. This command typically executes a script defined in the `package.json` file, which in turn launches the Node.js server for the WebViewer annotations sample.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-annotations-sqlite3/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Including Default Open Iconic Stylesheet\nDESCRIPTION: Shows how to include the default Open Iconic stylesheet in your HTML. This provides basic styling for Open Iconic icons without relying on a specific framework.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/wwwroot/css/open-iconic/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies for WebViewer SDK\nDESCRIPTION: Installs the necessary Node.js packages using npm. Specifically, it downloads the Apryse WebViewer SDK and places it in the `webviewer-salesforce/webviewer` directory.  This command is executed in the root of the webviewer-salesforce project.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Executing Checkstyle - Properties\nDESCRIPTION: This snippet shows the property that needs to be added to the build.properties file to enable Checkstyle during the build process. Checkstyle validates the source code for certain conventions.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_12\n\nLANGUAGE: Properties\nCODE:\n```\nexecute.validate=true\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing WebViewer BIM Client\nDESCRIPTION: This snippet demonstrates how to clone the WebViewer BIM samples repository, navigate to the BIM directory, and install the required dependencies using npm.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-BIM\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js Server\nDESCRIPTION: This command starts the Node.js server for the WebViewer User Bookmarks sample.  This command will execute the script defined in the package.json file under the \"start\" key.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-user-bookmarks-nodejs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Cloning the WebViewer Samples Repository\nDESCRIPTION: This command clones the webviewer-samples repository from GitHub. The --depth=1 flag creates a shallow clone, downloading only the latest commit. The user should then navigate into the webviewer-tomcat-java directory and install the dependencies using npm.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-tomcat-java\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building Tomcat Extras Components\nDESCRIPTION: This snippet shows how to build the extra components (commons-logging, webservices etc.). It involves navigating to the Tomcat source directory and running the 'extras' target using Ant.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant extras\n```\n\n----------------------------------------\n\nTITLE: Mapping a Servlet to a URL Pattern in XML\nDESCRIPTION: This snippet demonstrates how to map a servlet to a specific URL pattern using the `<servlet-mapping>` element in `web.xml`. Requests with the `.do` extension will be handled by the servlet named `controller`.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/web.xml.txt#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n    <servlet-mapping>\n      <servlet-name>controller</servlet-name>\n      <url-pattern>*.do</url-pattern>\n    </servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Starting the Server\nDESCRIPTION: This command starts the Node.js server, which hosts the WebViewer client and the search API. It typically executes a script defined in the package.json file, which starts the server application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-server-side-search/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App - npm\nDESCRIPTION: This script ejects the application from Create React App's default configuration. This action is irreversible and copies all configuration files and dependencies into the project, providing full control over them.  Use with caution, as you will be responsible for maintaining the build process.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-cors/webviewer-app/README.md#_snippet_3\n\nLANGUAGE: npm\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Starting the Blazor WebViewer Application\nDESCRIPTION: This command starts the Blazor WebViewer application using npm.  It assumes that the user has already navigated to the correct directory (webviewer-samples/webviewer-blazor-wasm) after cloning the repository and installed the dependencies using `npm install`.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies with Shell\nDESCRIPTION: These shell commands clone the webviewer-samples repository from GitHub, navigate to the webviewer-winforms directory, and install the necessary npm dependencies.  The `--depth=1` flag performs a shallow clone, retrieving only the latest commit history.  `npm install` installs all packages listed in the package.json file.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-winforms/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-winforms\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Enable Access Log Generation - Properties\nDESCRIPTION: Enables the generation of an access log file during tests by setting the \"test.accesslog\" property to true.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_22\n\nLANGUAGE: Properties\nCODE:\n```\ntest.accesslog=true\n```\n\n----------------------------------------\n\nTITLE: Tomcat Context Configuration\nDESCRIPTION: This XML snippet configures a Tomcat Context. It sets the document base, disables resource locking, grants privileged access, and configures a RemoteAddrValve to allow access only from localhost (127.0.0.1). The docBase attribute specifies the location of the web application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context docBase=\"${catalina.home}/webapps/manager\"\n  antiResourceLocking=\"false\" privileged=\"true\" >\n  <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n       allow=\"127\\.0\\.0\\.1\" />\n</Context>\n```\n\n----------------------------------------\n\nTITLE: Starting the Vue Application with npm\nDESCRIPTION: This command uses npm to start the Vue application, typically launching a development server that hosts the application on localhost for previewing and development.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-vue/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Serving the Production Build\nDESCRIPTION: This command starts a server to serve the minified production build of the Next.js application.  It uses the 'start' script defined in package.json, requiring that the application has already been built.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-nextjs-14/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This command uses npm (Node Package Manager) to install all the necessary dependencies for the project, as specified in the package.json file. It downloads and installs the required libraries and packages for the WebViewer server-side search example.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-server-side-search/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the Application\nDESCRIPTION: This command starts the Node.js application using npm.  It assumes a `start` script is defined in the `package.json` file of the `webviewer-generate-docx` directory. The application likely handles the DOCX generation and WebViewer integration.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-generate-docx/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: This command starts the Next.js development server, enabling hot-reloading for rapid development.  It uses the 'dev' script defined in package.json.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-nextjs-14/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies with npm\nDESCRIPTION: This shell script clones the webviewer-samples repository from GitHub, navigates to the webviewer-nuxtjs directory, and installs the required dependencies using npm. It is a standard procedure for setting up a project from a Git repository that uses npm for package management.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-nuxtjs/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-nuxtjs\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Salesforce Dev Hub\nDESCRIPTION: Authenticates with the Salesforce Dev Hub org using the Salesforce CLI. The `--set-default-dev-hub` flag sets the authenticated org as the default Dev Hub. The `--alias` flag assigns an alias (DevHub) to the org for easier reference in subsequent commands.  This command opens a browser window for interactive login.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsf org login web --set-default-dev-hub --alias DevHub\n```\n\n----------------------------------------\n\nTITLE: Running End-of-Line Convention Check with Ant\nDESCRIPTION: This snippet demonstrates the Ant command used to validate end-of-line conventions in the Tomcat source code. It requires navigating to the `${tomcat.source}` directory and executing the `ant validate-eoln` command. This ensures that all textual source files use Unix-style LF line endings.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_14\n\nLANGUAGE: Ant\nCODE:\n```\ncd ${tomcat.source}\nant validate-eoln\n```\n\n----------------------------------------\n\nTITLE: Fix ERR_OSSL_EVP_UNSUPPORTED error on Windows\nDESCRIPTION: This snippet demonstrates how to set the NODE_OPTIONS environment variable to `--openssl-legacy-provider` on Windows to resolve the `ERR_OSSL_EVP_UNSUPPORTED` error that may occur when running the sample.  This modifies the start script in package.json.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-barcode/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"start\": \"react-scripts start\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"start\": \"set NODE_OPTIONS=--openssl-legacy-provider && react-scripts start\"\n```\n\n----------------------------------------\n\nTITLE: Starting the WebViewer Audio Application\nDESCRIPTION: This snippet shows how to start the WebViewer Audio application using npm. This command launches the application in a local development server, allowing you to preview and test the integration.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-audio/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting the Application (Shell)\nDESCRIPTION: This command uses npm to run the `start` script, which is typically configured in the `package.json` file to start the application server. This will serve the WebViewer application, allowing it to be accessed in a web browser.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-typescript/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting JRE_HOME and CATALINA_PID in setenv.sh (*nix)\nDESCRIPTION: This snippet demonstrates setting the JRE_HOME and CATALINA_PID environment variables in the setenv.sh file on *nix systems. JRE_HOME points to the Java Runtime Environment, while CATALINA_PID specifies the file to store the Tomcat process ID. The location of the pid file is within the CATALINA_BASE directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nJRE_HOME=/usr/java/latest\nCATALINA_PID=\"$CATALINA_BASE/tomcat.pid\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: This command changes the current directory to the webviewer-server-side-search directory within the cloned repository. This allows subsequent commands to be executed in the correct context.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-server-side-search/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd webviewer-samples/webviewer-server-side-search\n```\n\n----------------------------------------\n\nTITLE: Configuring WebViewer license key in JavaScript\nDESCRIPTION: Sets the license key for WebViewer by modifying the `pdftronWebViewer.js` file. Replace `YOUR_LICENSE_KEY` with the actual license key to remove the watermark from rendered documents.  This involves locating the `WebViewer` constructor in the specified file and adding the `licenseKey` property.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlicenseKey: 'YOUR_LICENSE_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Camera Sensitivity in WebViewer\nDESCRIPTION: This code snippet retrieves the current camera sensitivity for the Orbit tool in WebViewer. It retrieves the orbit tool from the document viewer and calls `getCameraSensitivity()` to get the sensitivity value as a Number. It requires the instance and Core to be initialized beforehand.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { documentViewer } = instance.Core;\nconst cameraTools = {\n  orbit: 'Orbit3D',\n  pan: 'Pan3D',\n  walk: 'Walk',\n};\n\nconst orbitTool = documentViewer.getTool(cameraTools.orbit);\norbitTool.getCameraSensitivity();\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Sprite in HTML\nDESCRIPTION: Illustrates how to use the Open Iconic SVG sprite.  This method allows displaying multiple icons with a single HTTP request. It describes how to use the `<svg>` and `<use>` tags with appropriate class names for styling. Styling requires CSS.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/wwwroot/css/open-iconic/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Shutting down Tomcat on *nix using catalina.sh\nDESCRIPTION: This snippet shows another way to shut down Tomcat on *nix systems, by executing catalina.sh with the 'stop' argument. The script is found in the CATALINA_HOME/bin directory. This approach provides more direct control over the shutdown procedure.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$CATALINA_HOME/bin/catalina.sh stop\n```\n\n----------------------------------------\n\nTITLE: Starting the WebViewer App\nDESCRIPTION: This command starts the WebViewer application using the npm start script, which is configured in the package.json file.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running the Application\nDESCRIPTION: This shell script starts the React application, allowing users to view WebViewer running on localhost:3000.  It uses the npm start command to launch the development server.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-react-canvasToPDF/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting base.path in build.properties\nDESCRIPTION: This snippet shows how to set the base.path property in the build.properties file.  The base.path property specifies the directory where Tomcat dependencies will be downloaded.  It is recommended to place this directory outside of the source tree to avoid redundant downloads.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# ----- Default Base Path for Dependent Packages -----\n# Replace this path with the directory path where dependencies binaries\n# should be downloaded\nbase.path=/home/me/some-place-to-download-to\n```\n\n----------------------------------------\n\nTITLE: Configuring Tomcat Context XML\nDESCRIPTION: This XML snippet configures the Tomcat context, setting the docBase attribute to specify the location of the web application and configuring a RemoteAddrValve to allow access only from localhost.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context docBase=\"${catalina.home}/webapps/manager\"\n  antiResourceLocking=\"false\" privileged=\"true\" >\n  <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n       allow=\"127\\.0\\.0\\.1\" />\n</Context>\n```\n\n----------------------------------------\n\nTITLE: Starting Tomcat on Windows using startup.bat\nDESCRIPTION: This command starts the Apache Tomcat server on a Windows system using the startup.bat script located in the Tomcat's bin directory. The CATALINA_HOME environment variable is expected to be set to the Tomcat installation directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n%CATALINA_HOME%\\bin\\startup.bat\n```\n\n----------------------------------------\n\nTITLE: Parcel Configuration Snippet\nDESCRIPTION: This JSON snippet configures Parcel, a web application bundler. It extends the default configuration and adds a reporter, `parcel-reporter-multiple-static-file-copier`, which is likely used to copy static files during the build process.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-js/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"reporters\": [\n    \"...\",\n    \"parcel-reporter-multiple-static-file-copier\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository\nDESCRIPTION: Clones the webviewer-samples repository from GitHub with a depth of 1 to reduce download size.  Navigates into the webviewer-annotations-document directory. This is a prerequisite for installing dependencies and running the sample application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-annotations-document/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-annotations-document\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building for Production - npm\nDESCRIPTION: This script builds the React application for production, creating an optimized and minified bundle in the `build` folder.  The built application is ready for deployment to a production environment.  Filenames include hashes for cache busting.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-cors/webviewer-app/README.md#_snippet_2\n\nLANGUAGE: npm\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting the Angular application\nDESCRIPTION: This command starts the Angular application using npm, which typically runs the `ng serve` command configured in the project's `package.json` file. This makes the application accessible in the browser.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-angular/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Loading a 3D Asset\nDESCRIPTION: This snippet demonstrates how to load a 3D asset (IFC model) using the `load3dAsset` function after initializing the WebViewer BIM viewer.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst webviewerBIM = await initializeBimViewer(instance, serverURL, options);\nwebviewerBIM.File.load3dAsset('<uri for 3d asset>');\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing WebViewer Audio\nDESCRIPTION: This snippet demonstrates how to clone the WebViewer Audio repository from GitHub, navigate to the project directory, and install the necessary dependencies using npm. These are the initial steps to set up the project for development.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-audio/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone ApryseSDK/webviewer-audio\ncd webviewer-samples/webviewer-audio\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring FindBugs in build.properties\nDESCRIPTION: This snippet shows the property that needs to be added to the `build.properties` file to enable FindBugs during the build process. Once enabled, you can run the `findbugs` target to generate a FindBugs report.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_16\n\nLANGUAGE: properties\nCODE:\n```\nexecute.findbugs=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings in build.properties\nDESCRIPTION: This snippet demonstrates how to configure proxy settings in the build.properties file for users accessing the Internet through a proxy. The properties include proxy.use, proxy.host, proxy.port, proxy.user, and proxy.password.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nproxy.use=true\nproxy.host=proxy.domain\nproxy.port=8080\nproxy.user=username\nproxy.password=password\n```\n\n----------------------------------------\n\nTITLE: Copy WebViewer Resources (Bash)\nDESCRIPTION: This snippet demonstrates copying the necessary WebViewer and WebViewer BIM resources to a public directory for serving in a web application. It utilizes the `cp` command with the `-R` flag to recursively copy directories.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncp -R ./node_modules/@pdftron/webviewer/public public/webviewer/lib\ncp -R ./node_modules/@pdftron/webviewer-bim/dist public/webviewer-bim\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkstyle in build.properties\nDESCRIPTION: This snippet shows the property that needs to be added to the `build.properties` file to enable Checkstyle during the build process. When enabled, the check will be performed automatically before compilation of the source code.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\nexecute.validate=true\n```\n\n----------------------------------------\n\nTITLE: Run Specific Methods in JUnit Test - Properties\nDESCRIPTION: Configures the execution of specific methods within a JUnit test class by using the \"test.entry\" and \"test.entry.methods\" properties in the build.properties file. This allows for focused testing of individual test cases.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_18\n\nLANGUAGE: Properties\nCODE:\n```\ntest.entry=org.apache.el.lang.TestELArithmetic\ntest.entry.methods=testMultiply01,testMultiply02\n```\n\n----------------------------------------\n\nTITLE: Running React-TypeScript app\nDESCRIPTION: This command navigates into the `webviewer-app` directory and starts the React-TypeScript application using `npm start`. The application will then load WebViewer from the specified URL, which demonstrates loading from a different domain.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-cors/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd webviewer-app\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring GPG for Release Signing\nDESCRIPTION: This snippet shows how to configure the location of the GPG executable in the build.properties file for signing the released artifacts.  The gpg.exec property should point to the path of the GPG executable.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\n# Location of GPG executable (used only for releases)\ngpg.exec=/path/to/gpg\n```\n\n----------------------------------------\n\nTITLE: Setting JRE_HOME Environment Variable in setenv.bat (Windows)\nDESCRIPTION: This script sets the JRE_HOME environment variable in a setenv.bat file on Windows. It specifies the location of the Java Runtime Environment to be used by Tomcat. It also includes an exit code.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset \"JRE_HOME=%ProgramFiles%\\Java\\jre8\"\nexit /b 0\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Tomcat on Windows using shutdown.bat\nDESCRIPTION: This command shuts down the Apache Tomcat server on a Windows system using the shutdown.bat script located in the Tomcat's bin directory.  The CATALINA_HOME environment variable is expected to be set to the Tomcat installation directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\n%CATALINA_HOME%\\bin\\shutdown.bat\n```\n\n----------------------------------------\n\nTITLE: Cloning the WebViewer Samples Repository\nDESCRIPTION: This command clones the webviewer-samples repository from GitHub with a depth of 1 to fetch only the latest commit, then changes the directory to the webviewer-custom-ui folder, and installs the dependencies.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-custom-ui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-custom-ui\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Modify start script in package.json (Windows)\nDESCRIPTION: Modifies the start script in package.json to include the NODE_OPTIONS environment variable. This is used to resolve `ERR_OSSL_EVP_UNSUPPORTED` error on some systems. The modification sets the `NODE_OPTIONS` variable and executes the start script.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-video/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"start\": \"node scripts/start.js\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"start\": \"set NODE_OPTIONS=--openssl-legacy-provider && node scripts/start.js\"\n```\n\n----------------------------------------\n\nTITLE: Run WebViewer Document Merge Sample\nDESCRIPTION: This code snippet starts the WebViewer document merge sample application using npm.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-document-merge/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Tomcat on *nix using startup.sh\nDESCRIPTION: This snippet shows how to start Tomcat on *nix systems using the startup.sh script, found in the bin directory under CATALINA_HOME. This is the standard way to start Tomcat on *nix systems.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$CATALINA_HOME/bin/startup.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Triangles Annotation\nDESCRIPTION: This JavaScript snippet demonstrates how to use canvasToPDF to create vector appearances of Triangles.  The drawTriangles function is used to draw the triangles onto a canvas and the pdf blob is created using canvasToPDF.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-react-canvasToPDF/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst blob = await canvasToPDF(drawTriangles, {\n  width: rectangleAnnot.Width,\n  height: rectangleAnnot.Height,\n});\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Tomcat on *nix using catalina.sh\nDESCRIPTION: This command shuts down the Apache Tomcat server on a *nix system using the catalina.sh script with the 'stop' argument. The CATALINA_HOME environment variable is expected to be set to the Tomcat installation directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$CATALINA_HOME/bin/catalina.sh stop\n```\n\n----------------------------------------\n\nTITLE: Installing React-TypeScript app dependencies\nDESCRIPTION: This command navigates into the `webviewer-app` directory and installs the required Node.js dependencies using `npm`.  This sets up the React-TypeScript application to use the WebViewer library served from the separate domain.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-cors/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd webviewer-cors/webviewer-app\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Tomcat on *nix using shutdown.sh\nDESCRIPTION: This command shuts down the Apache Tomcat server on a *nix system using the shutdown.sh script located in the Tomcat's bin directory. The CATALINA_HOME environment variable is expected to be set to the Tomcat installation directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$CATALINA_HOME/bin/shutdown.sh\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Tomcat on Windows using catalina.bat\nDESCRIPTION: This command shuts down the Apache Tomcat server on a Windows system using the catalina.bat script with the 'stop' argument. The CATALINA_HOME environment variable is expected to be set to the Tomcat installation directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\n%CATALINA_HOME%\\bin\\catalina.bat stop\n```\n\n----------------------------------------\n\nTITLE: Starting Tomcat on Windows using catalina.bat\nDESCRIPTION: This command starts the Apache Tomcat server on a Windows system using the catalina.bat script with the 'start' argument.  The CATALINA_HOME environment variable is expected to be set to the Tomcat installation directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n%CATALINA_HOME%\\bin\\catalina.bat start\n```\n\n----------------------------------------\n\nTITLE: WebViewer BIM Server Upload Status API Example\nDESCRIPTION: Example of using the `curl` command to check the status of an uploaded file. The 'src' header is required, containing the key of the local upload. Requires `curl` to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_9\n\nLANGUAGE: shel\nCODE:\n```\ncurl -I -X GET localhost:8085/v1/util/upload/status -H \"src: local://d41d8cd98f00b204e9800998ecf8427e.ifc\"\n```\n\n----------------------------------------\n\nTITLE: Starting Tomcat on *nix using catalina.sh\nDESCRIPTION: This command starts the Apache Tomcat server on a *nix system using the catalina.sh script with the 'start' argument. The CATALINA_HOME environment variable is expected to be set to the Tomcat installation directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$CATALINA_HOME/bin/catalina.sh start\n```\n\n----------------------------------------\n\nTITLE: Running Set of Tests - Properties\nDESCRIPTION: Allows running a set of JUnit test classes by specifying an Ant includes pattern using the \"test.name\" property.  Multiple patterns can be specified with comma separation.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_19\n\nLANGUAGE: Properties\nCODE:\n```\ntest.name=**/TestSsl.java,**/TestWebSocketFrameClientSSL.java\n```\n\n----------------------------------------\n\nTITLE: Starting Tomcat on *nix using startup.sh\nDESCRIPTION: This command starts the Apache Tomcat server on a *nix system using the startup.sh script located in the Tomcat's bin directory. The CATALINA_HOME environment variable is expected to be set to the Tomcat installation directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$CATALINA_HOME/bin/startup.sh\n```\n\n----------------------------------------\n\nTITLE: robots.txt Directives\nDESCRIPTION: This robots.txt file disallows all user agents (*) from accessing any part of the website. The 'User-agent: *' directive applies to all crawlers, and 'Disallow:' without a specific path means nothing is allowed to be crawled.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-generate-docx/public/robots.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Deploying Metadata Types\nDESCRIPTION: Deploys AuraDefinitionBundle, ApexClass, LightningComponentBundle, and LightningMessageChannel metadata types. This is used when the project size exceeds the limit after static resources have been deployed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce-attachments/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsf project deploy start -m AuraDefinitionBundle ApexClass LightningComponentBundle LightningMessageChannel\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository\nDESCRIPTION: This command clones the webviewer-samples repository from GitHub, specifically the webviewer-server-side-search example, using a depth of 1 to reduce download size. It is the first step to get the project code.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-server-side-search/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\n```\n\n----------------------------------------\n\nTITLE: Running Tomcat Tests - Ant\nDESCRIPTION: This snippet shows the Ant command used to run the Tomcat JUnit test suite. It requires the current directory to be the Tomcat source directory. Output should be redirected for later inspection.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_11\n\nLANGUAGE: Ant\nCODE:\n```\ncd ${tomcat.source}\nant test\n```\n\n----------------------------------------\n\nTITLE: Cloning the WebViewer Samples Repository\nDESCRIPTION: This command clones the `webviewer-samples` repository from GitHub, downloading only the most recent commit to reduce the download size. This is the first step in setting up the WebViewer CORS sample project.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-cors/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\n```\n\n----------------------------------------\n\nTITLE: Enabling Cobertura Code Coverage in build.properties\nDESCRIPTION: This snippet shows how to enable Cobertura code coverage during testing by setting test.cobertura=true and test.threads=1 in build.properties. Using Cobertura requires setting test.threads to 1.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_24\n\nLANGUAGE: properties\nCODE:\n```\ntest.cobertura=true\ntest.threads=1\n```\n\n----------------------------------------\n\nTITLE: Installing NPM packages in WebViewer widget directory\nDESCRIPTION: This command installs the necessary npm packages inside the WebViewer widget directory. This ensures that all dependencies required for the widget to function correctly are installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-mendix/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Shutting down Tomcat on Windows using catalina.bat\nDESCRIPTION: This snippet shows an alternative way to shut down Tomcat on Windows using catalina.bat with the 'stop' argument. The script is in the bin directory under CATALINA_HOME.  This offers a more controlled shutdown process.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\n%CATALINA_HOME%\\bin\\catalina.bat stop\n```\n\n----------------------------------------\n\nTITLE: Install Application to Servlet Container (Ant)\nDESCRIPTION: This target installs the web application to a servlet container (Tomcat) using the Manager application. It depends on the `compile` target to ensure the application is compiled.  It requires the URL, username, and password for the Tomcat Manager application, as well as the application path.  The `localWar` attribute specifies the path to the WAR file to deploy.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n  <target name=\"install\" depends=\"compile\"\n   description=\"Install application to servlet container\">\n\n    <deploy url=\"${manager.url}\"\n       username=\"${manager.username}\"\n       password=\"${manager.password}\"\n           path=\"${app.path}\"\n       localWar=\"file://${build.home}\"/>\n\n  </target>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server - npm\nDESCRIPTION: This script starts the React application in development mode. It launches a development server with hot reloading and displays linting errors in the console. The app will be accessible in the browser at http://localhost:3000.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-cors/webviewer-app/README.md#_snippet_0\n\nLANGUAGE: npm\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Sizing Open Iconic SVG Icons with CSS\nDESCRIPTION: Shows how to size Open Iconic icons using CSS.  It sets the width and height of the `<svg>` element to control the icon size, assuming a square aspect ratio.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/wwwroot/css/open-iconic/README.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Tomcat using Ant - Shell\nDESCRIPTION: Navigates to the Tomcat source directory and executes the Ant build script. This command triggers the 'deploy' target in build.xml, producing a usable Tomcat installation in the output directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd ${tomcat.source}\nant\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Output to Console in build.properties\nDESCRIPTION: This snippet shows how to control whether the output of the tests is displayed on the console by setting the test.verbose property to true (default) or false in build.properties.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_28\n\nLANGUAGE: properties\nCODE:\n```\ntest.verbose=true\n```\n\n----------------------------------------\n\nTITLE: Installing WebViewer lib static server dependencies\nDESCRIPTION: This command navigates into the `webviewer-lib` directory and installs the necessary Node.js dependencies using `npm`. This prepares the static server for serving the WebViewer library.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-cors/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd webviewer-cors/webviewer-lib\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Cloning WebViewer Samples Repository\nDESCRIPTION: This command clones the WebViewer samples repository from GitHub. The --depth=1 flag ensures that only the most recent commit is downloaded, reducing the download size.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-electron/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\n```\n\n----------------------------------------\n\nTITLE: Executing FindBugs - Properties\nDESCRIPTION: This snippet shows the property that needs to be added to the build.properties file to enable FindBugs during the build process. FindBugs identifies potential bugs in the source code.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_14\n\nLANGUAGE: Properties\nCODE:\n```\nexecute.findbugs=true\n```\n\n----------------------------------------\n\nTITLE: Building Tomcat Documentation\nDESCRIPTION: This snippet demonstrates how to build the Tomcat documentation web application quickly.  It involves navigating to the Tomcat source directory and running the 'build-docs' target using Ant.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant build-docs\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Sample Directory\nDESCRIPTION: Changes the current directory to the `webviewer-annotations-sqlite3` directory within the cloned repository. This step is necessary to execute subsequent commands within the context of the sample project.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-annotations-sqlite3/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd webviewer-samples/webviewer-annotations-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Running FindBugs - Ant\nDESCRIPTION: This snippet shows the Ant command used to compile Tomcat classes and generate a FindBugs report. It requires the execute.findbugs property to be set to true.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_15\n\nLANGUAGE: Ant\nCODE:\n```\ncd ${tomcat.source}\nant -Dexecute.findbugs=true findbugs\n```\n\n----------------------------------------\n\nTITLE: Run Single JUnit Test Class - Properties\nDESCRIPTION: Specifies the test class to be run using the \"test.entry\" property in the build.properties file. This allows for targeted testing of specific components.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_17\n\nLANGUAGE: Properties\nCODE:\n```\ntest.entry=org.apache.catalina.util.TestServerInfo\n```\n\n----------------------------------------\n\nTITLE: Clone WebViewer Samples Repository\nDESCRIPTION: Clones the webviewer-samples repository from GitHub with a depth of 1 to minimize download size. This command retrieves the latest version of the sample code.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-jquery/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\n```\n\n----------------------------------------\n\nTITLE: Building Documentation using Ant - Shell\nDESCRIPTION: Navigates to the Tomcat source directory and executes the Ant build script, specifically targeting the build-docs target. This creates the documentation web application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncd ${tomcat.source}\nant build-docs\n```\n\n----------------------------------------\n\nTITLE: Running WebViewer lib static server\nDESCRIPTION: This command navigates into the `webviewer-lib` directory and starts the static server using `npm start`. This makes the WebViewer library available at `http://localhost:8081/lib/`.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-cors/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd webviewer-lib\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Tomcat on *nix using catalina.sh\nDESCRIPTION: This snippet shows an alternative way to start Tomcat on *nix systems using catalina.sh with the 'start' argument. This gives more fine-grained control over the startup sequence.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$CATALINA_HOME/bin/catalina.sh start\n```\n\n----------------------------------------\n\nTITLE: Generating Service Worker File List (JavaScript)\nDESCRIPTION: This snippet executes a Node.js script to generate a JSON file (`service-worker-list.json`) containing a list of files that will be cached by the service worker. It depends on Node.js being installed and the `prepare-serviceworker-list.js` file existing in the root folder.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-offline/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnode prepare-serviceworker-list.js\n```\n\n----------------------------------------\n\nTITLE: Building Tomcat Embedded Packages\nDESCRIPTION: This snippet shows how to build the embedded packages. It involves navigating to the Tomcat source directory and running the 'embed' target using Ant.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant embed\n```\n\n----------------------------------------\n\nTITLE: Building Embedded Packages using Ant - Shell\nDESCRIPTION: Navigates to the Tomcat source directory and executes the Ant build script, specifically targeting the embed target. This builds the embedded packages.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncd ${tomcat.source}\nant embed\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies\nDESCRIPTION: Clones the repository from GitHub, changes the directory to the salesforce attachments folder, and installs the necessary npm packages.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce-attachments/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-salesforce-attachments\nnpm install\n```\n\n----------------------------------------\n\nTITLE: WebViewer BIM Server Upload API Example\nDESCRIPTION: Example of using the `curl` command to upload a file to the WebViewer BIM Server. Requires `curl` to be installed. The file is sent as multipart form data.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_8\n\nLANGUAGE: shel\nCODE:\n```\ncurl -X POST localhost:8085/v1/util/upload -v --form file='@ABSOLUTE_PATH/PlayersTheatre.ifc'\n```\n\n----------------------------------------\n\nTITLE: Disabling Screen-Space Ambient Occlusion\nDESCRIPTION: This snippet shows how to disable screen-space ambient occlusion (SSAO) for the WebViewer BIM viewer using the `disableSSAO` function.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst webviewerBIM = await initializeBimViewer(instance, serverURL, options);\nwebviewerBIM.Viewer.disableSSAO();\n```\n\n----------------------------------------\n\nTITLE: WebViewer BIM Server Results API Example\nDESCRIPTION: Example of using the `curl` command to request the result for a specific job from the WebViewer BIM Server. Requires `curl` to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_10\n\nLANGUAGE: shel\nCODE:\n```\ncurl -X GET http://localhost:8085/v1/results/{jid} --output out.vsf\n```\n\n----------------------------------------\n\nTITLE: Running WebViewer Electron Application\nDESCRIPTION: This command starts the WebViewer Electron application. It typically executes the start script defined in the package.json file, which usually involves running the Electron application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-electron/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies\nDESCRIPTION: This snippet demonstrates how to clone the WebViewer PowerApps component sample repository from GitHub, navigate into the project directory, and install the necessary dependencies using npm. This is a crucial step to set up the development environment.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-powerapps-component/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/ApryseSDK/webviewer-powerapps-component-sample.git\ncd webviewer-powerapps-component-sample\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Sample Directory\nDESCRIPTION: This command navigates to a specific sample directory within the cloned repository. Replace `webviewer-nextjs-14` with the directory name of the desired sample.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd webviewer-nextjs-14\n```\n\n----------------------------------------\n\nTITLE: Creating a Gradient Pattern Annotation\nDESCRIPTION: This JavaScript snippet creates a PDF blob from a canvas drawing using the `canvasToPDF` function. The `drawGradientCircles` function is used to draw the content onto the canvas, and the `width` and `height` parameters are taken from a `rectangleAnnot` object.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-react-canvasToPDF/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst blob = await canvasToPDF(drawGradientCircles, {\n  width: rectangleAnnot.Width,\n  height: rectangleAnnot.Height,\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Tests - Properties\nDESCRIPTION: Excludes specific JUnit test classes from execution by specifying an Ant excludes pattern in the \"test.exclude\" property of the build.properties file.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_20\n\nLANGUAGE: Properties\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Installing WebViewer Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the WebViewer project, as defined in the `package.json` file, using the Node Package Manager (npm).\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter Web Application\nDESCRIPTION: This command starts the Flutter web application using npm. It typically runs a script defined in the package.json file to build and serve the application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-flutter/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Stopping the WebViewer App\nDESCRIPTION: This command stops the WebViewer application, if it's configured in package.json. In many cases, this is not configured and this command does nothing.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Disable JUnit Report Files - Properties\nDESCRIPTION: Configures the JUnit formatter to not generate separate report files using the \"junit.formatter.usefile\" property.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_23\n\nLANGUAGE: Properties\nCODE:\n```\njunit.formatter.usefile=false\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Sprite\nDESCRIPTION: Illustrates how to use Open Iconic's SVG sprite for displaying icons. It highlights the use of `<svg>` and `<use>` tags along with CSS styling for sizing and coloring the icons. It requires the `open-iconic.svg` file to be available.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/wwwroot/css/open-iconic/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to WebViewer Electron\nDESCRIPTION: This command changes the current directory to the webviewer-electron directory within the cloned webviewer-samples repository. This is necessary to execute subsequent commands within the correct project context.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-electron/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd webviewer-samples/webviewer-electron\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using npm\nDESCRIPTION: This command installs the necessary dependencies for the project, as specified in the package.json file. This is a prerequisite to running the application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-barcode/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings in build.properties - Properties\nDESCRIPTION: Specifies proxy settings in the build.properties file for users accessing the internet through a proxy. These settings are used by Ant during the build process to download dependencies.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nproxy.use=true\nproxy.host=proxy.domain\nproxy.port=8080\nproxy.user=username\nproxy.password=password\n```\n\n----------------------------------------\n\nTITLE: WebViewer BIM Server Test API Example\nDESCRIPTION: Example of using the `curl` command to test if the server queue is functioning using the WebViewer BIM Server API. Requires `curl` to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_6\n\nLANGUAGE: shel\nCODE:\n```\ncurl -X GET http://localhost:8085/v1/test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies via npm\nDESCRIPTION: This command installs the necessary dependencies for the Flutter web project using npm (Node Package Manager).\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-flutter/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic on its own\nDESCRIPTION: Demonstrates how to use Open Iconic icons with the default stylesheet.  It utilizes the `oi` class and `data-glyph` attribute to specify the icon.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/wwwroot/css/open-iconic/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing dependencies\nDESCRIPTION: This set of commands clones the WebViewer samples repository, navigates to the Angular sample directory, and installs the necessary npm dependencies.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-angular/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-angular\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies\nDESCRIPTION: This snippet clones the WebViewer samples repository, navigates to the Microsoft Teams example directory, and installs the necessary npm packages. It requires Git and Node.js to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-microsoft-teams/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-microsoft-teams\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Set of JUnit Test Classes in build.properties\nDESCRIPTION: This snippet shows how to configure the build.properties to execute a set of JUnit test classes by defining the test.name property with an Ant includes pattern. For example, to run TestSsl.java and TestWebSocketFrameClientSSL.java, you would set test.name=**/TestSsl.java,**/TestWebSocketFrameClientSSL.java.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_19\n\nLANGUAGE: properties\nCODE:\n```\ntest.name=**/TestSsl.java,**/TestWebSocketFrameClientSSL.java\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Flutter Web Sample\nDESCRIPTION: This command changes the current directory to the webviewer-flutter directory within the webviewer-samples folder.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-flutter/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd webviewer-samples/webviewer-flutter\n```\n\n----------------------------------------\n\nTITLE: Navigate to jQuery Sample Directory\nDESCRIPTION: Changes the current directory to the webviewer-jquery sample directory within the cloned repository. This allows subsequent commands to be executed in the correct context.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-jquery/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd webviewer-samples/webviewer-jquery\n```\n\n----------------------------------------\n\nTITLE: Clone and Install Dependencies\nDESCRIPTION: This snippet clones the webviewer-samples repository from GitHub, navigates to the specified directory, and installs the necessary Node.js dependencies using npm.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-realtime-collaboration-sqlite3/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-realtime-collaboration-sqlite3\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Enabling Screen-Space Ambient Occlusion\nDESCRIPTION: This snippet demonstrates how to enable screen-space ambient occlusion (SSAO) for the WebViewer BIM viewer using the `enableSSAO` function.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst webviewerBIM = await initializeBimViewer(instance, serverURL, options);\nwebviewerBIM.Viewer.enableSSAO();\n```\n\n----------------------------------------\n\nTITLE: Include Open Iconic Foundation CSS\nDESCRIPTION: Shows how to include the Open Iconic stylesheet for Foundation.  This CSS file provides the necessary styles to use Open Iconic with Foundation's markup. Requires Foundation to be included.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/wwwroot/css/open-iconic/README.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Run the WebViewer jQuery Application\nDESCRIPTION: Starts the development server, which hosts the WebViewer jQuery application.  The application is accessible at http://localhost:3000/.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-jquery/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies\nDESCRIPTION: This shell script clones the webviewer-samples repository, navigates to the webviewer-react-canvasToPDF directory, and installs the necessary npm packages to run the sample application. It uses git to clone the repository with a depth of 1 and npm to install the dependencies.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-react-canvasToPDF/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-react-canvasToPDF\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Opening the Salesforce scratch org\nDESCRIPTION: Opens the default Salesforce scratch org in a web browser. This command utilizes the Salesforce CLI and requires a default scratch org to be configured. It is typically used after deploying the project to the scratch org.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsf org open\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js (Linux)\nDESCRIPTION: This command installs Node.js on a Linux system using the apt package manager.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install nodejs\n```\n\n----------------------------------------\n\nTITLE: Cloning WebViewer Samples Repository (Shell)\nDESCRIPTION: This command clones the webviewer-samples repository from GitHub with a depth of 1 to reduce the download size. It is the first step in setting up the WebViewer Svelte example.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-svelte/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-svelte\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running FindBugs with Ant\nDESCRIPTION: This snippet demonstrates the Ant command used to run FindBugs on the Tomcat source code. It requires navigating to the `${tomcat.source}` directory and executing the `ant findbugs` command with the `execute.findbugs` property set to true.  FindBugs is used to find potential bugs in the code.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_13\n\nLANGUAGE: Ant\nCODE:\n```\ncd ${tomcat.source}\nant -Dexecute.findbugs=true findbugs\n```\n\n----------------------------------------\n\nTITLE: Running Ant to Build Tomcat\nDESCRIPTION: This snippet shows the command to execute the default 'deploy' target in the build.xml file using Ant.  This command will build a usable Tomcat installation in the output directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository with Git\nDESCRIPTION: This command clones the webviewer-samples repository from GitHub with a depth of 1, which means only the latest commit is downloaded. This reduces the download size and speeds up the process. Subsequently, it navigates into the webviewer-js directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-js/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-js\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning the WebViewer Samples Repository\nDESCRIPTION: This command clones the webviewer-samples repository from GitHub with a depth of 1, retrieving only the most recent version.  It's the first step in setting up the project and requires Git to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-nextjs-14/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Hatch Annotation\nDESCRIPTION: This JavaScript snippet creates a PDF blob from a canvas drawing using the `canvasToPDF` function, this time drawing hatch patterns. The `drawHatch` function draws hatch patterns onto the canvas, and the width and height are determined by `rectangleAnnot.Width` and `rectangleAnnot.Height`.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-react-canvasToPDF/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst blob = await canvasToPDF(drawHatch, {\n  width: rectangleAnnot.Width,\n  height: rectangleAnnot.Height,\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Tomcat on Windows using startup.bat\nDESCRIPTION: This snippet shows how to start Tomcat on Windows using the startup.bat script. The script is located in the bin directory under CATALINA_HOME. This command initiates the Tomcat server.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n%CATALINA_HOME%\\bin\\startup.bat\n```\n\n----------------------------------------\n\nTITLE: Cloning the WebViewer Samples Repository (Shell)\nDESCRIPTION: This command clones the webviewer-samples repository from GitHub with a depth of 1. This retrieves only the latest version of the repository, making the download faster.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-typescript/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples/webviewer-typescript\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Enabling Anti-Aliasing\nDESCRIPTION: This snippet shows how to enable anti-aliasing for the WebViewer BIM viewer using the `enableAntiAliasing` function.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst webviewerBIM = await initializeBimViewer(instance, serverURL, options);\nwebviewerBIM.Viewer.enableAntiAliasing();\n```\n\n----------------------------------------\n\nTITLE: Running Tests - npm\nDESCRIPTION: This script launches the test runner in interactive watch mode. It's used for running unit or integration tests in the application. Refer to Create React App documentation for more details on running tests.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-cors/webviewer-app/README.md#_snippet_1\n\nLANGUAGE: npm\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository with Git\nDESCRIPTION: This code snippet demonstrates how to clone the Apryse WebViewer samples repository from GitHub using Git. The `--depth=1` option creates a shallow clone, downloading only the latest revision. After cloning, the command changes the current directory to the cloned repository.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/ApryseSDK/webviewer-samples.git\ncd webviewer-samples\n```\n\n----------------------------------------\n\nTITLE: Running the Nuxt 2 Application with npm\nDESCRIPTION: This command starts the Nuxt 2 application in development mode.  It uses npm to execute the 'dev' script defined in the package.json file, which typically launches a local development server (usually on localhost:3000) with hot-reloading enabled.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-nuxtjs/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Project Definition in Ant\nDESCRIPTION: Defines the project's name, default target, and base directory. The 'name' attribute sets the project name, 'default' specifies the target to execute when none is provided, and 'basedir' defines the project's root directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<project name=\"My Project\" default=\"compile\" basedir=\".\">\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Salesforce project to scratch org\nDESCRIPTION: Deploys the Salesforce project source code from the `force-app` directory to the target scratch org.  The `sf project deploy start` command initiates the deployment process. Requires a scratch org to be created and set as the default before execution.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-salesforce/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsf project deploy start --source-dir force-app\n```\n\n----------------------------------------\n\nTITLE: Directory Structure - Mendix >= 9 theme web resources\nDESCRIPTION: This shows the expected directory structure for placing WebViewer's static assets in Mendix version 9 or higher. These assets are required for WebViewer to run correctly within the Mendix application.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-mendix/README.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n/path/to/your/mendix/app/theme/web/resources\n└───lib\n    ├───core\n    └───ui\n```\n\n----------------------------------------\n\nTITLE: Validate End-of-Line Conventions - Ant\nDESCRIPTION: This snippet shows the Ant command used to validate that all textual source files use Unix style LF line endings.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_16\n\nLANGUAGE: Ant\nCODE:\n```\ncd ${tomcat.source}\nant validate-eoln\n```\n\n----------------------------------------\n\nTITLE: Starting Tomcat on Windows using catalina.bat\nDESCRIPTION: This snippet demonstrates another way to start Tomcat on Windows using the catalina.bat script with the 'start' argument. The script is in the bin directory under CATALINA_HOME.  This command provides more control over the startup process.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n%CATALINA_HOME%\\bin\\catalina.bat start\n```\n\n----------------------------------------\n\nTITLE: Run WebViewer BIM Server with Environment Variables\nDESCRIPTION: Runs the WebViewer BIM Server Docker image with an environment variable for the license key. This command demonstrates how to configure the server using environment variables instead of a configuration file. Requires Docker CLI to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e trn_license=\"MYLICENSE\" -p 8085:8085 pdftron/webviewer-bim-server\n```\n\n----------------------------------------\n\nTITLE: Path Definition for Compilation Classpath in Ant\nDESCRIPTION: Defines the classpath used for compiling Java source code.  It includes JAR files from Tomcat's 'bin' and 'lib' directories and also allows for custom dependencies. The 'fileset' includes all JAR files in the specified directory, and 'pathelement' specifies a single file or directory to add to the classpath.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <path id=\"compile.classpath\">\n\n    <!-- Include all JAR files that will be included in /WEB-INF/lib -->\n    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->\n<!--\n    <pathelement location=\"${foo.jar}\"/>\n-->\n\n    <!-- Include all elements that Tomcat exposes to applications -->\n    <fileset dir=\"${catalina.home}/bin\">\n      <include name=\"*.jar\"/>\n    </fileset>\n    <pathelement location=\"${catalina.home}/lib\"/>\n    <fileset dir=\"${catalina.home}/lib\">\n      <include name=\"*.jar\"/>\n    </fileset>\n\n  </path>\n```\n\n----------------------------------------\n\nTITLE: Shutting down Tomcat on *nix using shutdown.sh\nDESCRIPTION: This snippet demonstrates how to shut down Tomcat on *nix systems using the shutdown.sh script. This script, located in the CATALINA_HOME/bin directory, stops the Tomcat server.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$CATALINA_HOME/bin/shutdown.sh\n```\n\n----------------------------------------\n\nTITLE: Run WebViewer BIM Server with Config File\nDESCRIPTION: Runs the WebViewer BIM Server Docker image mounting the config file to the container. The mounted config file is used for server configuration. Requires Docker CLI to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8085:8085 -v ABSOLUTE_PATH_TO_CONFIG_JSON_FILE:/home/docjob/config pdftron/webviewer-bim-server\n```\n\n----------------------------------------\n\nTITLE: Relaxing Timing Checks in Tests in build.properties\nDESCRIPTION: This snippet shows how to relax the timing checks in tests by setting the test.relaxTiming property to true in build.properties. This is useful on slower or loaded systems where timing checks might often fail.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_26\n\nLANGUAGE: properties\nCODE:\n```\ntest.relaxTiming=true\n```\n\n----------------------------------------\n\nTITLE: Quick Rebuild of Modified Tomcat Code\nDESCRIPTION: This snippet shows the commands to quickly rebuild only the modified code after updating the source files. It involves navigating to the Tomcat source directory and running Ant.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant\n```\n\n----------------------------------------\n\nTITLE: Run WebViewer BIM Server with License Variable\nDESCRIPTION: Runs the WebViewer BIM Server Docker image with an environment variable for the license key. This command shows how to pass configuration parameters directly to the container.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8085:8085 -e trn_license=\"my_license_key\" pdftron/webviewer-bim-server\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Iconic SVG Icons\nDESCRIPTION: Demonstrates how to display Open Iconic icons using basic SVG images in HTML.  It requires access to the SVG files and suggests using the `alt` attribute for accessibility.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/wwwroot/css/open-iconic/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Building Tomcat Javadoc API Documentation\nDESCRIPTION: This snippet demonstrates how to build the API documentation (Javadoc) separately. It involves navigating to the Tomcat source directory and running the 'javadoc' target using Ant.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant javadoc\n```\n\n----------------------------------------\n\nTITLE: Setting JRE_HOME and CATALINA_PID in setenv.sh (*nix)\nDESCRIPTION: This script sets the JRE_HOME and CATALINA_PID environment variables in a setenv.sh file on *nix systems. JRE_HOME specifies the location of the Java Runtime Environment, and CATALINA_PID sets the path for the Tomcat process ID file.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/RUNNING.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nJRE_HOME=/usr/java/latest\nCATALINA_PID=\"$CATALINA_BASE/tomcat.pid\"\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic on its own\nDESCRIPTION: Demonstrates how to use Open Iconic icons without a framework.  The `oi` class and `data-glyph` attribute are used to display the icon, and accessibility attributes are included. Requires Open Iconic default CSS.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/wwwroot/css/open-iconic/README.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Create Javadoc API Documentation (Ant)\nDESCRIPTION: This target generates Javadoc API documentation for the Java classes in the web application. It depends on the `compile` target.  It creates the destination directory for the Javadoc files and then uses the `javadoc` task to generate the documentation from the Java source files.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n  <target name=\"javadoc\" depends=\"compile\"\n   description=\"Create Javadoc API documentation\">\n\n    <mkdir          dir=\"${dist.home}/docs/api\"/>\n    <javadoc sourcepath=\"${src.home}\"\n                destdir=\"${dist.home}/docs/api\"\n           packagenames=\"*\">\n      <classpath refid=\"compile.classpath\"/>\n    </javadoc>\n\n  </target>\n```\n\n----------------------------------------\n\nTITLE: Include Open Iconic Bootstrap CSS\nDESCRIPTION: Shows how to include the Open Iconic stylesheet for Bootstrap.  This CSS file provides the necessary styles to use Open Iconic with Bootstrap's markup. Requires Bootstrap to be included.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/wwwroot/css/open-iconic/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Running Checkstyle - Ant\nDESCRIPTION: This snippet shows the Ant command used to run the Checkstyle check separately. It requires the execute.validate property to be set to true.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_13\n\nLANGUAGE: Ant\nCODE:\n```\ncd ${tomcat.source}\nant -Dexecute.validate=true validate\n```\n\n----------------------------------------\n\nTITLE: Quick Rebuild of Tomcat using Ant - Shell\nDESCRIPTION: Navigates to the Tomcat source directory and executes the Ant build script for a quick rebuild of only modified code.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd ${tomcat.source}\nant\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Foundation\nDESCRIPTION: Demonstrates how to use Open Iconic icons within a Foundation project. It uses the `fi-icon-name` class for the icons.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/wwwroot/css/open-iconic/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Code Signing Configuration - Properties\nDESCRIPTION: This snippet shows the configuration properties required for code signing the Windows installer during the build process. It includes the location of the GPG executable, user credentials, and service details.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_9\n\nLANGUAGE: Properties\nCODE:\n```\n# Location of GPG executable (used only for releases)\n# Code signing of Windows installer\ndo.codesigning=true\ncodesigning.user=request-via-pmc\ncodesigning.pwd=request-via-pmc\ncodesigning.partnercode=request-via-pmc\ncodesigning.service=Microsoft Windows Signing\n```\n\n----------------------------------------\n\nTITLE: Building Javadoc using Ant - Shell\nDESCRIPTION: Navigates to the Tomcat source directory and executes the Ant build script, specifically targeting the javadoc target. This generates the API documentation.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncd ${tomcat.source}\nant javadoc\n```\n\n----------------------------------------\n\nTITLE: Setting JUnit Report Directory in build.properties\nDESCRIPTION: This snippet shows how to configure the directory where JUnit reports are written to by setting the test.reports property. The default value is output/build/logs.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_21\n\nLANGUAGE: properties\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Building Tomcat Release with Ant\nDESCRIPTION: This snippet demonstrates the Ant command used to build a Tomcat release. It requires navigating to the `${tomcat.source}` directory and executing the `ant release` command.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_10\n\nLANGUAGE: Ant\nCODE:\n```\ncd ${tomcat.source}\nant release\n```\n\n----------------------------------------\n\nTITLE: Create Binary Distribution (Ant)\nDESCRIPTION: This target creates a binary distribution of the web application.  It first depends on the `compile` and `javadoc` targets to ensure the application is compiled and Javadoc documentation is generated. It then copies the documentation files and creates a WAR file from the built application directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n  <target name=\"dist\" depends=\"compile,javadoc\"\n   description=\"Create binary distribution\">\n\n    <!-- Copy documentation subdirectories -->\n    <mkdir   dir=\"${dist.home}/docs\"/>\n    <copy    todir=\"${dist.home}/docs\">\n      <fileset dir=\"${docs.home}\"/>\n    </copy>\n\n    <!-- Create application JAR file -->\n    <jar jarfile=\"${dist.home}/${app.name}-${app.version}.war\"\n         basedir=\"${build.home}\"/>\n\n    <!-- Copy additional files to ${dist.home} as necessary -->\n\n  </target>\n```\n\n----------------------------------------\n\nTITLE: Running Checkstyle with Ant\nDESCRIPTION: This snippet demonstrates the Ant command used to run Checkstyle on the Tomcat source code. It requires navigating to the `${tomcat.source}` directory and executing the `ant validate` command with the `execute.validate` property set to true.  Checkstyle is used to validate the code for certain conventions.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_12\n\nLANGUAGE: Ant\nCODE:\n```\ncd ${tomcat.source}\nant -Dexecute.validate=true validate\n```\n\n----------------------------------------\n\nTITLE: Enabling Access Log for Tests in build.properties\nDESCRIPTION: This snippet shows how to enable the generation of an access log file when the tests are run by setting the test.accesslog property to true. The access_log.<date> file will be written to the same directory as JUnit reports.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_22\n\nLANGUAGE: properties\nCODE:\n```\ntest.accesslog=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Single JUnit Test Methods in build.properties\nDESCRIPTION: This snippet shows how to configure the build.properties to execute a subset of test methods within a single JUnit test class by defining the test.entry and test.entry.methods properties. For example, to run testMultiply01 and testMultiply02 methods from the TestELArithmetic class, you would set test.entry=org.apache.el.lang.TestELArithmetic and test.entry.methods=testMultiply01,testMultiply02.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_18\n\nLANGUAGE: properties\nCODE:\n```\ntest.entry=org.apache.el.lang.TestELArithmetic\ntest.entry.methods=testMultiply01,testMultiply02\n```\n\n----------------------------------------\n\nTITLE: List Installed Applications (Ant)\nDESCRIPTION: This target lists the installed web applications on the specified Tomcat servlet container.  It requires the URL, username, and password for the Tomcat Manager application. It uses the `list` task provided by the Tomcat Ant integration.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n  <target name=\"list\"\n   description=\"List installed applications on servlet container\">\n\n    <list    url=\"${manager.url}\"\n        username=\"${manager.username}\"\n        password=\"${manager.password}\"/>\n\n  </target>\n```\n\n----------------------------------------\n\nTITLE: Running Tomcat JUnit Tests with Ant\nDESCRIPTION: This snippet demonstrates the Ant command used to run the JUnit test suite for Tomcat.  It requires navigating to the `${tomcat.source}` directory and executing the `ant test` command.  The output should be redirected for later inspection.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_11\n\nLANGUAGE: Ant\nCODE:\n```\ncd ${tomcat.source}\nant test\n```\n\n----------------------------------------\n\nTITLE: Preferring IPv4 Stack for Multicast Tests in build.properties\nDESCRIPTION: This snippet shows how to configure the system to prefer IPv4 for multicast tests by setting the java.net.preferIPv4Stack property to true in build.properties. This is necessary on some platforms like OSX El Capitan.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_27\n\nLANGUAGE: properties\nCODE:\n```\njava.net.preferIPv4Stack=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Single JUnit Test Class in build.properties\nDESCRIPTION: This snippet shows how to configure the build.properties to execute only a single JUnit test class by defining the test.entry property. For example, to run the TestServerInfo class, you would set test.entry=org.apache.catalina.util.TestServerInfo.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_17\n\nLANGUAGE: properties\nCODE:\n```\ntest.entry=org.apache.catalina.util.TestServerInfo\n```\n\n----------------------------------------\n\nTITLE: Reload Application on Servlet Container (Ant)\nDESCRIPTION: This target reloads the web application on the specified Tomcat servlet container, effectively restarting the application without requiring a full server restart. It depends on the `compile` target.  It requires the URL, username, and password for the Tomcat Manager application, as well as the application path. This is useful for applying changes to classes or property files.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n  <target name=\"reload\" depends=\"compile\"\n   description=\"Reload application on servlet container\">\n\n    <reload url=\"${manager.url}\"\n       username=\"${manager.username}\"\n       password=\"${manager.password}\"\n           path=\"${app.path}\"/>\n\n  </target>\n```\n\n----------------------------------------\n\nTITLE: Target Definition for Clean Task in Ant\nDESCRIPTION: Defines a target named 'clean' that deletes the build and dist directories. This ensures a fresh build by removing any previous build artifacts. The 'delete' task is used to remove the directories, and the 'dir' attribute specifies the directory to delete.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n  <target name=\"clean\"\n   description=\"Delete old build and dist directories\">\n    <delete dir=\"${build.home}\"/>\n    <delete dir=\"${dist.home}\"/>\n  </target>\n```\n\n----------------------------------------\n\nTITLE: Relax Timing Checks - Properties\nDESCRIPTION: Relaxes timing checks in tests by setting the \"test.relaxTiming\" property to true. Useful for slower systems.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_26\n\nLANGUAGE: Properties\nCODE:\n```\ntest.relaxTiming=true\n```\n\n----------------------------------------\n\nTITLE: Target Definition for All Tasks in Ant\nDESCRIPTION: Defines a target named 'all' that depends on the 'clean' and 'compile' targets. Executing this target will first clean the build and dist directories, and then compile the project. The 'depends' attribute specifies the dependencies, and the 'description' provides a brief explanation of the target's purpose.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <target name=\"all\" depends=\"clean,compile\"\n   description=\"Clean build and dist directories, then compile\"/>\n```\n\n----------------------------------------\n\nTITLE: Property File Definition in Ant\nDESCRIPTION: Defines external property files to be loaded. The 'file' attribute specifies the path to the property file. Properties defined in these files can be overridden by command-line arguments.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <property file=\"build.properties\"/>\n  <property file=\"${user.home}/build.properties\"/>\n```\n\n----------------------------------------\n\nTITLE: Enable Cobertura Code Coverage - Properties\nDESCRIPTION: Enables the Cobertura code coverage tool during testing using the \"test.cobertura\" property and setting \"test.threads=1\".\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_24\n\nLANGUAGE: Properties\nCODE:\n```\ntest.cobertura=true\ntest.threads=1\n```\n\n----------------------------------------\n\nTITLE: Exclude Performance Tests - Properties\nDESCRIPTION: Excludes performance tests from the test suite by setting the \"test.excludePerformance\" property to true.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_25\n\nLANGUAGE: Properties\nCODE:\n```\ntest.excludePerformance=true\n```\n\n----------------------------------------\n\nTITLE: Task Definition for Tomcat Manager in Ant\nDESCRIPTION: Defines custom tasks for interacting with the Tomcat Manager web application. Requires 'catalina-ant.jar' in Ant's 'lib' directory and configuration of manager properties (username, password, URL) in a 'build.properties' file. The 'classpathref' attribute specifies the classpath to use for the task definition.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n  <taskdef resource=\"org/apache/catalina/ant/catalina.tasks\"\n           classpathref=\"compile.classpath\"/>\n```\n\n----------------------------------------\n\nTITLE: Prefer IPv4 Stack - Properties\nDESCRIPTION: Configures the system to prefer IPv4 for multicast tests by setting the \"java.net.preferIPv4Stack\" property to true.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/BUILDING.txt#_snippet_27\n\nLANGUAGE: Properties\nCODE:\n```\njava.net.preferIPv4Stack=true\n```\n\n----------------------------------------\n\nTITLE: Remove Application from Servlet Container (Ant)\nDESCRIPTION: This target removes the web application from the specified Tomcat servlet container. It requires the URL, username, and password for the Tomcat Manager application, as well as the application path. It uses the `undeploy` task from the Tomcat Ant integration.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/appdev/build.xml.txt#_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n  <target name=\"remove\"\n   description=\"Remove application on servlet container\">\n\n    <undeploy url=\"${manager.url}\"\n         username=\"${manager.username}\"\n         password=\"${manager.password}\"\n             path=\"${app.path}\"/>\n\n  </target>\n```\n\n----------------------------------------\n\nTITLE: Disabling JUnit Report File Generation in build.properties\nDESCRIPTION: This snippet shows how to disable the generation of separate report files by setting junit.formatter.usefile=false in build.properties.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/BUILDING.txt#_snippet_23\n\nLANGUAGE: properties\nCODE:\n```\njunit.formatter.usefile=false\n```\n\n----------------------------------------\n\nTITLE: Coloring Open Iconic SVG Sprite Icons\nDESCRIPTION: Demonstrates how to change the color of SVG sprite icons using the `fill` CSS property on the `<use>` tag.  Allows for easy customization of icon colors.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/wwwroot/css/open-iconic/README.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Bootstrap\nDESCRIPTION: Demonstrates how to use Open Iconic icons within a Bootstrap project. It uses the `oi` class prefix for icon elements.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/wwwroot/css/open-iconic/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Coloring Open Iconic SVG Icons with CSS\nDESCRIPTION: Explains how to color Open Iconic icons using CSS.  It sets the `fill` property on the `<use>` tag to change the icon's color.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/wwwroot/css/open-iconic/README.md#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Foundation\nDESCRIPTION: Demonstrates how to use Open Iconic icons with Foundation.  The `fi-icon-name` class is used to display the icon, and accessibility attributes are included. Requires Open Iconic Foundation CSS.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/wwwroot/css/open-iconic/README.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Include Open Iconic Default CSS\nDESCRIPTION: Shows how to include the default Open Iconic stylesheet.  This CSS file provides the necessary styles to use Open Iconic without any specific framework. Does not require any frameworks.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/wwwroot/css/open-iconic/README.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Linting code\nDESCRIPTION: This command is used to check the code for style and formatting issues according to the project's style guide. It is recommended to run this command before submitting a pull request to ensure the code adheres to the project's standards.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-realtime-collaboration-sqlite3/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVGs in HTML\nDESCRIPTION: Demonstrates how to embed Open Iconic SVGs directly into HTML.  It emphasizes the importance of the `alt` attribute for accessibility.  No dependencies beyond the availability of the SVG files are required.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor/wwwroot/css/open-iconic/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Installing Java (Mac)\nDESCRIPTION: These commands install the AdoptOpenJDK 8 JDK on macOS using Homebrew.  It adds the AdoptOpenJDK tap and then installs the JDK cask.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap AdoptOpenJDK/openjdk\nbrew install --cask adoptopenjdk8\n```\n\n----------------------------------------\n\nTITLE: Setting JRE_HOME in setenv.bat (Windows)\nDESCRIPTION: This snippet shows how to set the JRE_HOME environment variable within the setenv.bat file on Windows systems. It specifies the location of the Java Runtime Environment. The script also includes an exit code to ensure proper script execution.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-tomcat-java/webapps/docs/RUNNING.txt#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset \"JRE_HOME=%ProgramFiles%\\Java\\jre8\"\nexit /b 0\n```\n\n----------------------------------------\n\nTITLE: WebViewer BIM Server Health API Example\nDESCRIPTION: Example of using the `curl` command to check the server health of the WebViewer BIM Server. Requires `curl` to be installed.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-BIM/SERVER_README.md#_snippet_7\n\nLANGUAGE: shel\nCODE:\n```\ncurl -X GET http://localhost:8085/v1/health\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Configuration\nDESCRIPTION: This robots.txt configuration disallows all user agents from crawling the entire website.  This is achieved by setting the User-agent to '*' which matches all crawlers, and Disallow to '/' which blocks access to all paths.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-barcode/public/robots.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Foundation Stylesheet\nDESCRIPTION: Shows how to include the Open Iconic stylesheet for Foundation in your HTML. This enables using Open Iconic icons with Foundation's styling and components.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-blazor-wasm/wwwroot/css/open-iconic/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Configuration\nDESCRIPTION: This robots.txt file configures web crawler access. It instructs all user agents (*) to disallow crawling of all URLs under the root directory.\nSOURCE: https://github.com/aprysesdk/webviewer-samples/blob/main/webviewer-react-canvasToPDF/public/robots.txt#_snippet_0\n\nLANGUAGE: Robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```"
  }
]