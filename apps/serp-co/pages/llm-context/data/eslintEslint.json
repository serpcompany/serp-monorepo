[
  {
    "owner": "eslint",
    "repo": "eslint",
    "content": "TITLE: Using Message Placeholders in context.report() in JavaScript\nDESCRIPTION: Shows how to use placeholders in the message and provide data for dynamic content in the error message.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.report({\n    node: node,\n    message: \"Unexpected identifier: {{ identifier }}\",\n    data: {\n        identifier: node.name\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Browser Environment\nDESCRIPTION: Example ESLint configuration file that defines settings for browser JavaScript, including browser globals and recommended rules from the @eslint/js package.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/getting-started.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\nimport globals from \"globals\";\nimport js from \"@eslint/js\";\n\nexport default defineConfig([\n\t{ files: [\"**/*.js\"], languageOptions: { globals: globals.browser } },\n\t{ files: [\"**/*.js\"], plugins: { js }, extends: [\"js/recommended\"] },\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing and Running ESLint using npm\nDESCRIPTION: Commands to install, configure, and run ESLint on JavaScript files using npm. This snippet demonstrates the basic setup process for ESLint in a project.\nSOURCE: https://github.com/eslint/eslint/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init @eslint/config@latest\n\nnpx eslint yourfile.js\n```\n\n----------------------------------------\n\nTITLE: Updating Linter Configuration from ESLintRC to Flat Config Format in JavaScript\nDESCRIPTION: This snippet demonstrates how to update the Linter configuration from the old eslintrc format to the new flat config format. It shows the change in structure for specifying parser options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// eslintrc config format\nlinter.verify(code, {\n\tparserOptions: {\n\t\tecmaVersion: 6,\n\t},\n});\n\n// flat config format\nlinter.verify(code, {\n\tlanguageOptions: {\n\t\tecmaVersion: 6,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Settings in ESLint (JavaScript)\nDESCRIPTION: Demonstrates how to add shared settings to an ESLint configuration file. The settings object is supplied to every rule and can be accessed by custom plugins.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tsettings: {\n\t\t\tsharedData: \"Hello\",\n\t\t},\n\t\tplugins: {\n\t\t\tcustomPlugin: {\n\t\t\t\trules: {\n\t\t\t\t\t\"my-rule\": {\n\t\t\t\t\t\tmeta: {\n\t\t\t\t\t\t\t// custom rule's meta information\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcreate(context) {\n\t\t\t\t\t\t\tconst sharedData = context.settings.sharedData;\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t// code\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\trules: {\n\t\t\t\"customPlugin/my-rule\": \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global and Non-Global Ignores in ESLint\nDESCRIPTION: Examples of setting up global and non-global ignore patterns in ESLint configuration using the ignores property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\n// Example of global ignores\nexport default defineConfig([\n    {\n      ignores: [\".config/\", \"dist/\", \"tsconfig.json\"] // acts as global ignores, due to the absence of other properties\n    },\n    { ... }, // ... other configuration object, inherit global ignores\n    { ... }, // ... other configuration object inherit global ignores\n]);\n\n// Example of non-global ignores\nexport default defineConfig([\n    {\n      ignores: [\".config/**\", \"dir1/script1.js\"],\n      rules: { ... } // the presence of this property dictates non-global ignores\n    },\n    {\n      ignores: [\"other-dir/**\", \"dist/script2.js\"],\n      rules: { ... } // the presence of this property dictates non-global ignores\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Parallel Asynchronous Operations (JavaScript)\nDESCRIPTION: This snippet shows the correct way to handle multiple asynchronous operations in parallel, creating promises for all operations at once and then awaiting their resolution using Promise.all().\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function foo(things) {\n  const promises = [];\n  for (const thing of things) {\n    // Good: all asynchronous operations are immediately started.\n    promises.push(doAsyncWork(thing));\n  }\n  // Now that all the asynchronous operations are running, here we wait until they all complete.\n  const results = await Promise.all(promises);\n  return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript File Extensions in ESLint\nDESCRIPTION: Demonstrates how to configure ESLint to lint TypeScript files with .ts, .cts, and .mts extensions using the files pattern matching.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.ts\", \"**/*.cts\", \"**.*.mts\"],\n\t},\n\t// ...other config\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Custom Parser in Modern Configuration\nDESCRIPTION: Example of how to configure ESLint to use a custom parser in the modern flat config format (eslint.config.js). Shows how to specify the parser in the languageOptions property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nmodule.exports = [\n\t{\n\t\tlanguageOptions: {\n\t\t\tparser: require(\"./path/to/awesome-custom-parser\"),\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Setting up pnpm Configuration for ESLint\nDESCRIPTION: Required .npmrc configuration settings when using pnpm package manager with ESLint to ensure proper dependency resolution and compatibility.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/getting-started.md#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nauto-install-peers=true\nnode-linker=hoisted\n```\n\n----------------------------------------\n\nTITLE: Applying a Predefined Configuration Object with Custom Overrides in ESLint\nDESCRIPTION: This snippet demonstrates how to import the recommended JavaScript rules configuration and combine it with custom rule settings. The predefined configuration is applied first, followed by an object that overrides the severity of the no-unused-vars rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/combine-configs.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport js from \"@eslint/js\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\tjs.configs.recommended,\n\t{\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Rule Configuration in ESLint\nDESCRIPTION: Shows basic rule configuration with error severity level for the semi rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Using a Shareable Configuration Package in ESLint (JavaScript)\nDESCRIPTION: Demonstrates how to use a shareable configuration package in an ESLint configuration file. The example imports a configuration and extends it while modifying a rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport exampleConfig from \"eslint-config-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\textends: [exampleConfig],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint Plugin Structure\nDESCRIPTION: Basic structure for an ESLint plugin showing the required properties meta, configs, rules, and processors. Supports both ESM and CommonJS export patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tmeta: {},\n\tconfigs: {},\n\trules: {},\n\tprocessors: {},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of context.report() in JavaScript\nDESCRIPTION: Demonstrates the simplest way to use context.report() with just node and message parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.report({\n\tnode: node,\n\tmessage: \"Unexpected identifier\",\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Custom ESLint Rule Structure\nDESCRIPTION: Shows the fundamental structure of a custom ESLint rule with metadata configuration and create function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// customRule.js\n\nmodule.exports = {\n\tmeta: {\n\t\ttype: \"suggestion\",\n\t\tdocs: {\n\t\t\tdescription: \"Description of the rule\",\n\t\t},\n\t\tfixable: \"code\",\n\t\tschema: [], // no options\n\t},\n\tcreate: function (context) {\n\t\treturn {\n\t\t\t// callback functions\n\t\t};\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: ESLint Text-Based Linting\nDESCRIPTION: Demonstrates how to lint a string of code directly using ESLint's lintText API with custom configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ESLint } = require(\"eslint\");\n\nconst testCode = `\n  const name = \"eslint\";\n  if(true) {\n    console.log(\"constant condition warning\")\n  };\n`;\n\n(async function main() {\n\t// 1. Create an instance\n\tconst eslint = new ESLint({\n\t\toverrideConfigFile: true,\n\t\toverrideConfig: {\n\t\t\tlanguageOptions: {\n\t\t\t\tecmaVersion: 2018,\n\t\t\t\tsourceType: \"commonjs\",\n\t\t\t},\n\t\t},\n\t});\n\n\t// 2. Lint text.\n\tconst results = await eslint.lintText(testCode);\n\n\t// 3. Format the results.\n\tconst formatter = await eslint.loadFormatter(\"stylish\");\n\tconst resultText = formatter.format(results);\n\n\t// 4. Output it.\n\tconsole.log(resultText);\n})().catch(error => {\n\tprocess.exitCode = 1;\n\tconsole.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Flat and Legacy Configurations in ESLint Plugin\nDESCRIPTION: This snippet demonstrates how to export both flat and legacy configurations for an ESLint plugin. It includes the plugin structure with rules, and shows how to assign configurations that work with both the current (flat config) and old (eslintrc) systems.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\tconfigs: {},\n\trules: {\n\t\t\"dollar-sign\": {\n\t\t\tcreate(context) {\n\t\t\t\t// rule implementation ...\n\t\t\t},\n\t\t},\n\t},\n};\n\n// assign configs here so we can reference `plugin`\nObject.assign(plugin.configs, {\n\t// flat config format\n\t\"flat/recommended\": [\n\t\t{\n\t\t\tplugins: {\n\t\t\t\texample: plugin,\n\t\t\t},\n\t\t\trules: {\n\t\t\t\t\"example/dollar-sign\": \"error\",\n\t\t\t},\n\t\t\tlanguageOptions: {\n\t\t\t\tglobals: {\n\t\t\t\t\tmyGlobal: \"readonly\",\n\t\t\t\t},\n\t\t\t\tparserOptions: {\n\t\t\t\t\tecmaFeatures: {\n\t\t\t\t\t\tjsx: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\n\t// eslintrc format\n\trecommended: {\n\t\tplugins: [\"example\"],\n\t\trules: {\n\t\t\t\"example/dollar-sign\": \"error\",\n\t\t},\n\t\tglobals: {\n\t\t\tmyGlobal: \"readonly\",\n\t\t},\n\t\tparserOptions: {\n\t\t\tecmaFeatures: {\n\t\t\t\tjsx: true,\n\t\t\t},\n\t\t},\n\t},\n});\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Fixed Race Condition Using Intermediate Variable\nDESCRIPTION: Shows how to fix the race condition by storing the async result in a local variable before updating the shared state.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addLengthOfSinglePage(pageNum) {\n  const lengthOfThisPage = await getPageLength(pageNum);\n\n  totalLength += lengthOfThisPage;\n}\n```\n\n----------------------------------------\n\nTITLE: Including .gitignore Patterns in ESLint Configuration\nDESCRIPTION: This example demonstrates how to include patterns from a .gitignore file in the ESLint configuration using the @eslint/compat package. It loads the .gitignore file and translates its patterns into ESLint ignore rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport { includeIgnoreFile } from \"@eslint/compat\";\nimport { fileURLToPath } from \"node:url\";\n\nconst gitignorePath = fileURLToPath(new URL(\".gitignore\", import.meta.url));\n\nexport default defineConfig([\n\tincludeIgnoreFile(gitignorePath),\n\t{\n\t\t// your overrides\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Object.hasOwn() in JavaScript (ES2022)\nDESCRIPTION: This snippet shows the usage of Object.hasOwn(), introduced in ES2022, as a shorter alternative to Object.prototype.hasOwnProperty.call(). It provides a more concise way to check if an object has a specific property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-object-has-own.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (Object.hasOwn(object, \"foo\")) {\n  console.log(\"has property foo\")\n}\n```\n\n----------------------------------------\n\nTITLE: File Linting and Fixing Implementation\nDESCRIPTION: Function to lint files using ESLint and apply automatic fixes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function lintAndFix(eslint, filePaths) {\n\tconst results = await eslint.lintFiles(filePaths);\n\n\t// Apply automatic fixes and output fixed code\n\tawait ESLint.outputFixes(results);\n\n\treturn results;\n}\n```\n\n----------------------------------------\n\nTITLE: Using LegacyESLint for Backwards Compatibility in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use the LegacyESLint class, which provides the v8.x ESLint functionality. This is useful for projects that need to maintain compatibility with the older ESLint API during the migration process.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst { LegacyESLint } = require(\"eslint/use-at-your-own-risk\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect NaN Comparisons in JavaScript\nDESCRIPTION: Examples of incorrect code that directly compares values with NaN, which ESLint will flag as errors when the use-isnan rule is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/use-isnan.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint use-isnan: \"error\"*/\n\nif (foo == NaN) {\n    // ...\n}\n\nif (foo != NaN) {\n    // ...\n}\n\nif (foo == Number.NaN) {\n    // ...\n}\n\nif (foo != Number.NaN) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating ESLint in JavaScript\nDESCRIPTION: Shows how to create a new ESLint instance using the constructor returned by loadESLint(). It also demonstrates how to check which configuration system the returned constructor uses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// loads the default ESLint that the CLI would use based on process.cwd()\nconst DefaultESLint = await loadESLint();\nconst eslint = new DefaultESLint();\n\nif (DefaultESLint.configType === \"flat\") {\n\t// do something specific to flat config\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating ESLint Configuration for a File in JavaScript\nDESCRIPTION: This code shows how to use the eslint.calculateConfigForFile() method to determine the configuration for a specific file, which can be useful for debugging purposes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = await eslint.calculateConfigForFile(filePath);\n```\n\n----------------------------------------\n\nTITLE: Defining Array-Based Schema for ESLint Rule Options (JavaScript)\nDESCRIPTION: Example of defining an array-based schema for the 'yoda' rule options. It specifies a primary mode argument and an optional object with 'exceptRange' property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tmeta: {\n\t\tschema: [\n\t\t\t{\n\t\t\t\tenum: [\"always\", \"never\"],\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\texceptRange: { type: \"boolean\" },\n\t\t\t\t},\n\t\t\t\tadditionalProperties: false,\n\t\t\t},\n\t\t],\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Meta Information in JavaScript\nDESCRIPTION: Demonstrates how to add meta information to an ESLint plugin, including the name and version. This is necessary for the plugin to work with --cache and --print-config options in flat config.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.0.0\",\n\t},\n\tconfigs: {},\n\trules: {},\n\tprocessors: {},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Configuring ECMAScript 5 with Script Source Type in ESLint\nDESCRIPTION: Example configuration file for linting ECMAScript 5 code in script mode. This sets the ecmaVersion to 5 and sourceType to script, which means code has a shared global scope and runs in non-strict mode.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 5,\n\t\t\tsourceType: \"script\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: ESLint Linter Message Format Example\nDESCRIPTION: Example of the message object structure returned by the Linter.verify() method, showing error details and fix suggestions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n[\n\t{\n\t\tfatal: false,\n\t\truleId: \"semi\",\n\t\tseverity: 2,\n\t\tline: 1,\n\t\tcolumn: 23,\n\t\tmessage: \"Expected a semicolon.\",\n\t\tfix: {\n\t\t\trange: [1, 15],\n\t\t\ttext: \";\",\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint Usage in Node.js\nDESCRIPTION: Demonstrates basic usage of ESLint class to lint JavaScript files in a directory and output results using the stylish formatter.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ESLint } = require(\"eslint\");\n\n(async function main() {\n\t// 1. Create an instance.\n\tconst eslint = new ESLint();\n\n\t// 2. Lint files.\n\tconst results = await eslint.lintFiles([\"lib/**/*.js\"]);\n\n\t// 3. Format the results.\n\tconst formatter = await eslint.loadFormatter(\"stylish\");\n\tconst resultText = formatter.format(results);\n\n\t// 4. Output it.\n\tconsole.log(resultText);\n})().catch(error => {\n\tprocess.exitCode = 1;\n\tconsole.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of 'let' and 'const' in JavaScript (ESLint no-var rule)\nDESCRIPTION: This snippet demonstrates the correct way to declare variables using 'let' and 'const', adhering to the 'no-var' ESLint rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-var.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-var: \"error\"*/\n\nlet x = \"y\";\nconst CONFIG = {};\n```\n\n----------------------------------------\n\nTITLE: Basic Flat Config with Default Glob Pattern\nDESCRIPTION: Example of a flat config configuration with the default glob pattern. It extends the recommended configuration and adds custom rule configurations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\n\nimport js from \"@eslint/js\";\n\nexport default [\n\tjs.configs.recommended, // Recommended config applied to all files\n\t// Override the recommended config\n\t{\n\t\trules: {\n\t\t\tindent: [\"error\", 2],\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t\t// ...other configuration\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Rule Configuration in ESLint Config File\nDESCRIPTION: Example of configuring multiple ESLint rules in a configuration file with different severities and options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\trules: {\n\t\t\teqeqeq: \"off\",\n\t\t\t\"no-unused-vars\": \"error\",\n\t\t\t\"prefer-const\": [\"error\", { ignoreReadBeforeAssign: true }],\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Path Event Handlers in ESLint Rules\nDESCRIPTION: Demonstrates how to define event handlers for code path analysis in an ESLint rule. Includes handlers for code path start/end, segment start/end, unreachable segment start/end, and segment loops.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/code-path-analysis.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tmeta: {\n\t\t// ...\n\t},\n\tcreate(context) {\n\t\treturn {\n\t\t\t/**\n\t\t\t * This is called at the start of analyzing a code path.\n\t\t\t * In this time, the code path object has only the initial segment.\n\t\t\t *\n\t\t\t * @param {CodePath} codePath - The new code path.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCodePathStart(codePath, node) {\n\t\t\t\t// do something with codePath\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called at the end of analyzing a code path.\n\t\t\t * In this time, the code path object is complete.\n\t\t\t *\n\t\t\t * @param {CodePath} codePath - The completed code path.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCodePathEnd(codePath, node) {\n\t\t\t\t// do something with codePath\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called when a reachable code path segment was created.\n\t\t\t * It meant the code path is forked or merged.\n\t\t\t * In this time, the segment has the previous segments and has been\n\t\t\t * judged reachable or not.\n\t\t\t *\n\t\t\t * @param {CodePathSegment} segment - The new code path segment.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCodePathSegmentStart(segment, node) {\n\t\t\t\t// do something with segment\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called when a reachable code path segment was left.\n\t\t\t * In this time, the segment does not have the next segments yet.\n\t\t\t *\n\t\t\t * @param {CodePathSegment} segment - The left code path segment.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCodePathSegmentEnd(segment, node) {\n\t\t\t\t// do something with segment\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called when an unreachable code path segment was created.\n\t\t\t * It meant the code path is forked or merged.\n\t\t\t * In this time, the segment has the previous segments and has been\n\t\t\t * judged reachable or not.\n\t\t\t *\n\t\t\t * @param {CodePathSegment} segment - The new code path segment.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonUnreachableCodePathSegmentStart(segment, node) {\n\t\t\t\t// do something with segment\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called when an unreachable code path segment was left.\n\t\t\t * In this time, the segment does not have the next segments yet.\n\t\t\t *\n\t\t\t * @param {CodePathSegment} segment - The left code path segment.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonUnreachableCodePathSegmentEnd(segment, node) {\n\t\t\t\t// do something with segment\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called when a code path segment was looped.\n\t\t\t * Usually segments have each previous segments when created,\n\t\t\t * but when looped, a segment is added as a new previous segment into a\n\t\t\t * existing segment.\n\t\t\t *\n\t\t\t * @param {CodePathSegment} fromSegment - A code path segment of source.\n\t\t\t * @param {CodePathSegment} toSegment - A code path segment of destination.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCodePathSegmentLoop(fromSegment, toSegment, node) {\n\t\t\t\t// do something with segment\n\t\t\t},\n\t\t};\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying ESLint CLI Help Documentation\nDESCRIPTION: A comprehensive listing of all available ESLint CLI options, including configuration options, rule specification, fixing problems, ignoring files, output formatting, and more. This is the output shown when running 'npx eslint -h'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\neslint [options] file.js [file.js] [dir]\n\nBasic configuration:\n  --no-config-lookup              Disable look up for eslint.config.js\n  -c, --config path::String       Use this configuration instead of eslint.config.js, eslint.config.mjs, or\n                                  eslint.config.cjs\n  --inspect-config                Open the config inspector with the current configuration\n  --ext [String]                  Specify additional file extensions to lint\n  --global [String]               Define global variables\n  --parser String                 Specify the parser to be used\n  --parser-options Object         Specify parser options\n\nSpecify Rules and Plugins:\n  --plugin [String]               Specify plugins\n  --rule Object                   Specify rules\n\nFix Problems:\n  --fix                           Automatically fix problems\n  --fix-dry-run                   Automatically fix problems without saving the changes to the file system\n  --fix-type Array                Specify the types of fixes to apply (directive, problem, suggestion, layout)\n\nIgnore Files:\n  --no-ignore                     Disable use of ignore files and patterns\n  --ignore-pattern [String]       Patterns of files to ignore\n\nUse stdin:\n  --stdin                         Lint code provided on <STDIN> - default: false\n  --stdin-filename String         Specify filename to process STDIN as\n\nHandle Warnings:\n  --quiet                         Report errors only - default: false\n  --max-warnings Int              Number of warnings to trigger nonzero exit code - default: -1\n\nOutput:\n  -o, --output-file path::String  Specify file to write report to\n  -f, --format String             Use a specific output format - default: stylish\n  --color, --no-color             Force enabling/disabling of color\n\nInline configuration comments:\n  --no-inline-config              Prevent comments from changing config or rules\n  --report-unused-disable-directives  Adds reported errors for unused eslint-disable and eslint-enable directives\n  --report-unused-disable-directives-severity String  Chooses severity level for reporting unused eslint-disable and\n                                                      eslint-enable directives - either: off, warn, error, 0, 1, or 2\n  --report-unused-inline-configs String  Adds reported errors for unused eslint inline config comments - either: off, warn, error, 0, 1, or 2\n\nCaching:\n  --cache                         Only check changed files - default: false\n  --cache-file path::String       Path to the cache file. Deprecated: use --cache-location - default: .eslintcache\n  --cache-location path::String   Path to the cache file or directory\n  --cache-strategy String         Strategy to use for detecting changed files in the cache - either: metadata or\n                                  content - default: metadata\n\nSuppressing Violations:\n  --suppress-all                  Suppress all violations - default: false\n  --suppress-rule [String]        Suppress specific rules\n  --suppressions-location path::String  Specify the location of the suppressions file\n  --prune-suppressions            Prune unused suppressions - default: false\n\nMiscellaneous:\n  --init                          Run config initialization wizard - default: false\n  --env-info                      Output execution environment information - default: false\n  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched\n  --exit-on-fatal-error           Exit with exit code 2 in case of fatal error - default: false\n  --no-warn-ignored               Suppress warnings when the file list includes ignored files\n  --pass-on-no-patterns           Exit with exit code 0 in case no file patterns are passed\n  --debug                         Output debugging information\n  -h, --help                      Show help\n  -v, --version                   Output the version number\n  --print-config path::String     Print the configuration for the given file\n  --stats                         Add statistics to the lint report - default: false\n  --flag [String]                 Enable a feature flag\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Processor Structure in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure of a custom processor module for ESLint. It includes the preprocess and postprocess methods, along with metadata and optional autofix support.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors-deprecated.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tprocessors: {\n\t\t\"processor-name\": {\n\t\t\tmeta: {\n\t\t\t\tname: \"eslint-processor-name\",\n\t\t\t\tversion: \"1.2.3\",\n\t\t\t},\n\t\t\t// takes text of the file and filename\n\t\t\tpreprocess: function (text, filename) {\n\t\t\t\t// here, you can strip out any non-JS content\n\t\t\t\t// and split into multiple strings to lint\n\n\t\t\t\treturn [\n\t\t\t\t\t// return an array of code blocks to lint\n\t\t\t\t\t{ text: code1, filename: \"0.js\" },\n\t\t\t\t\t{ text: code2, filename: \"1.js\" },\n\t\t\t\t];\n\t\t\t},\n\n\t\t\t// takes a Message[][] and filename\n\t\t\tpostprocess: function (messages, filename) {\n\t\t\t\t// `messages` argument contains two-dimensional array of Message objects\n\t\t\t\t// where each top-level array item contains array of lint messages related\n\t\t\t\t// to the text that was returned in array from preprocess() method\n\n\t\t\t\t// you need to return a one-dimensional array of the messages you want to keep\n\t\t\t\treturn [].concat(...messages);\n\t\t\t},\n\n\t\t\tsupportsAutofix: true, // (optional, defaults to false)\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint Rules for Specific Lines in JavaScript\nDESCRIPTION: Demonstrates various ways to disable ESLint rules for specific lines using inline comments. This can be done for all rules or specific rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"foo\"); // eslint-disable-line\n\n// eslint-disable-next-line\nalert(\"foo\");\n\n/* eslint-disable-next-line */\nalert(\"foo\");\n\nalert(\"foo\"); /* eslint-disable-line */\n```\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"foo\"); // eslint-disable-line no-alert\n\n// eslint-disable-next-line no-alert\nalert(\"foo\");\n\nalert(\"foo\"); /* eslint-disable-line no-alert */\n\n/* eslint-disable-next-line no-alert */\nalert(\"foo\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"foo\"); // eslint-disable-line no-alert, quotes, semi\n\n// eslint-disable-next-line no-alert, quotes, semi\nalert(\"foo\");\n\nalert(\"foo\"); /* eslint-disable-line no-alert, quotes, semi */\n\n/* eslint-disable-next-line no-alert, quotes, semi */\nalert(\"foo\");\n\n/* eslint-disable-next-line\n  no-alert,\n  quotes,\n  semi\n*/\nalert(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Basic RuleTester Usage in JavaScript\nDESCRIPTION: A basic example of using RuleTester to test a custom ESLint rule, showing setup, valid test cases, and invalid test cases with error messages.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\nconst rule = require(\"../../../lib/rules/my-rule\"),\n\tRuleTester = require(\"eslint\").RuleTester;\n\nconst ruleTester = new RuleTester();\n\nruleTester.run(\"my-rule\", rule, {\n\tvalid: [\n\t\t{\n\t\t\tcode: \"var foo = true\",\n\t\t\toptions: [{ allowFoo: true }],\n\t\t},\n\t],\n\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"var invalidVariable = true\",\n\t\t\terrors: [{ message: \"Unexpected invalid variable.\" }],\n\t\t},\n\t\t{\n\t\t\tcode: \"var invalidVariable = true\",\n\t\t\terrors: [{ message: /^Unexpected.+variable/ }],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Testing a Custom ESLint Rule in JavaScript\nDESCRIPTION: Demonstrates how to write tests for a custom ESLint rule using RuleTester.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// avoid-name.test.js\n\nvar rule = require(\"../../../lib/rules/avoid-name\");\nvar RuleTester = require(\"eslint\").RuleTester;\n\nvar ruleTester = new RuleTester();\nruleTester.run(\"avoid-name\", rule, {\n\tvalid: [\"bar\", \"baz\"],\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"foo\",\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tmessageId: \"avoidName\",\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Marking Variables as Used in ESLint Rule Implementation\nDESCRIPTION: Example of creating an ESLint rule that marks a specific variable as used in the context of a ReturnStatement. This technique helps with rules like no-unused-vars by telling ESLint that a variable is being used in a custom way it might not normally detect.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tcreate: function (context) {\n\t\tvar sourceCode = context.sourceCode;\n\n\t\treturn {\n\t\t\tReturnStatement(node) {\n\t\t\t\t// look in the scope of the function for myCustomVar and mark as used\n\t\t\t\tsourceCode.markVariableAsUsed(\"myCustomVar\", node);\n\n\t\t\t\t// or: look in the global scope for myCustomVar and mark as used\n\t\t\t\tsourceCode.markVariableAsUsed(\"myCustomVar\");\n\t\t\t},\n\t\t};\n\t\t// ...\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rules with Options in ESLint Config File\nDESCRIPTION: Example of configuring the 'curly' rule with the 'multi' option in an ESLint config file. This demonstrates how rule configurations are specified with severity and options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\n\nexport default [\n\t{\n\t\trules: {\n\t\t\tcurly: [\"error\", \"multi\"],\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Using Cache Strategy with ESLint CLI\nDESCRIPTION: Example showing how to use the --cache-strategy option with 'content' value to detect changed files based on content rather than metadata.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n\"src/**/*.js\" --cache --cache-strategy content\n```\n\n----------------------------------------\n\nTITLE: Using ESLint Plugin Rules\nDESCRIPTION: This example illustrates how to use specific rules from an ESLint plugin. It imports the plugin, configures it with a custom name, and enables specific rules from the plugin.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport jsdoc from \"eslint-plugin-jsdoc\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjsdoc,\n\t\t},\n\t\trules: {\n\t\t\t\"jsdoc/require-description\": \"error\",\n\t\t\t\"jsdoc/check-values\": \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of an ESLint Core Rule\nDESCRIPTION: Template showing the required format for defining a core rule in ESLint. Includes the meta object with type, documentation, fixability, and schema properties, along with the create function that implements the rule logic.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/core-rules.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @fileoverview Rule to disallow unnecessary semicolons\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../types').Rule.RuleModule} */\nmodule.exports = {\n\tmeta: {\n\t\ttype: \"suggestion\",\n\n\t\tdocs: {\n\t\t\tdescription: \"disallow unnecessary semicolons\",\n\t\t\trecommended: true,\n\t\t\turl: \"https://eslint.org/docs/rules/no-extra-semi\",\n\t\t},\n\t\tfixable: \"code\",\n\t\tschema: [], // no options\n\t},\n\tcreate: function (context) {\n\t\treturn {\n\t\t\t// callback functions\n\t\t};\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Context Object Example\nDESCRIPTION: Shows the basic structure of using the context object in an ESLint rule implementation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// customRule.js\n\nmodule.exports = {\n    meta: { ... },\n    // `context` object is the argument\n    create(context) {\n       // ...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Fixes with context.report() in JavaScript\nDESCRIPTION: Shows how to use the fix function in context.report() to apply automatic fixes to reported problems.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.report({\n\tnode: node,\n\tmessage: \"Missing semicolon\",\n\tfix(fixer) {\n\t\treturn fixer.insertTextAfter(node, \";\");\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ESLint Configuration with ES Modules\nDESCRIPTION: Example of an ESLint configuration file using ES modules syntax. It defines a configuration array with one object that enables two rules: 'semi' and 'prefer-const'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t\t\"prefer-const\": \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ESLint Processor Interface in JavaScript\nDESCRIPTION: This code defines the interface for creating a custom ESLint processor that can process non-JavaScript files. It includes the required preprocess and postprocess methods, along with metadata properties and optional autofix support.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\tprocessors: {\n\t\t\"processor-name\": {\n\t\t\tmeta: {\n\t\t\t\tname: \"eslint-processor-name\",\n\t\t\t\tversion: \"1.2.3\",\n\t\t\t},\n\t\t\t// takes text of the file and filename\n\t\t\tpreprocess(text, filename) {\n\t\t\t\t// here, you can strip out any non-JS content\n\t\t\t\t// and split into multiple strings to lint\n\n\t\t\t\treturn [\n\t\t\t\t\t// return an array of code blocks to lint\n\t\t\t\t\t{ text: code1, filename: \"0.js\" },\n\t\t\t\t\t{ text: code2, filename: \"1.js\" },\n\t\t\t\t];\n\t\t\t},\n\n\t\t\t// takes a Message[][] and filename\n\t\t\tpostprocess(messages, filename) {\n\t\t\t\t// `messages` argument contains two-dimensional array of Message objects\n\t\t\t\t// where each top-level array item contains array of lint messages related\n\t\t\t\t// to the text that was returned in array from preprocess() method\n\n\t\t\t\t// you need to return a one-dimensional array of the messages you want to keep\n\t\t\t\treturn [].concat(...messages);\n\t\t\t},\n\n\t\t\tsupportsAutofix: true, // (optional, defaults to false)\n\t\t},\n\t},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Defining Rules and Parsers in ESLint Linter for ESLintRC and Flat Config Modes\nDESCRIPTION: This snippet illustrates how to define custom rules and parsers in both the old eslintrc mode and the new flat config mode. It shows the transition from using separate methods to define rules and parsers to including them directly in the configuration object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// eslintrc mode\nlinter.defineRule(\"my-rule1\", myRule1);\nlinter.defineRules({\n\t\"my-rule2\": myRule2,\n\t\"my-rule3\": myRule3,\n});\nlinter.defineParser(\"my-parser\", myParser);\nlinter.verify(code, {\n\trules: {\n\t\t\"my-rule1\": \"error\",\n\t\t\"my-rule2\": \"error\",\n\t\t\"my-rule3\": \"error\",\n\t},\n\tparser: \"my-parser\",\n});\n\n// flat config mode\nlinter.verify(code, {\n\tplugins: {\n\t\t\"my-plugin-foo\": {\n\t\t\trules: {\n\t\t\t\t\"my-rule1\": myRule1,\n\t\t\t},\n\t\t},\n\t\t\"my-plugin-bar\": {\n\t\t\trules: {\n\t\t\t\t\"my-rule2\": myRule2,\n\t\t\t\t\"my-rule3\": myRule3,\n\t\t\t},\n\t\t},\n\t},\n\trules: {\n\t\t\"my-plugin-foo/my-rule1\": \"error\",\n\t\t\"my-plugin-bar/my-rule2\": \"error\",\n\t\t\"my-plugin-bar/my-rule3\": \"error\",\n\t},\n\tlanguageOptions: {\n\t\tparser: myParser,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Race Condition Example in Async JavaScript\nDESCRIPTION: Demonstrates a problematic async code pattern that can lead to race conditions when updating a shared variable.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet totalLength = 0;\n\nasync function addLengthOfSinglePage(pageNum) {\n  totalLength += await getPageLength(pageNum);\n}\n\nPromise.all([addLengthOfSinglePage(1), addLengthOfSinglePage(2)]).then(() => {\n  console.log('The combined length of both pages is', totalLength);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an ESLint Configuration File\nDESCRIPTION: Shell command to create an empty ESLint configuration file in JavaScript format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/getting-started.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Create JavaScript configuration file\ntouch eslint.config.js\n```\n\n----------------------------------------\n\nTITLE: Correct Promise Executor Usage in JavaScript\nDESCRIPTION: Demonstrates proper patterns for Promise executors that comply with the no-promise-executor-return rule. These examples show how to restructure code to avoid returning values from Promise executors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-promise-executor-return.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-promise-executor-return: \"error\"*/\n\n// Turn return inline into two lines\nnew Promise((resolve, reject) => {\n    if (someCondition) {\n        resolve(defaultResult);\n        return;\n    }\n    getSomething((err, result) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n\n// Add curly braces\nnew Promise((resolve, reject) => {\n    getSomething((err, data) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(data);\n        }\n    });\n});\n\nnew Promise(r => { r(1) });\n// or just use Promise.resolve\nPromise.resolve(1);\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin File using Shell Command\nDESCRIPTION: Shell command to create a new file for the ESLint plugin that will include the custom rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntouch eslint-plugin-example.js\n```\n\n----------------------------------------\n\nTITLE: Using ESLint v8.x Linter Functionality in v9.0.0 with JavaScript\nDESCRIPTION: This snippet shows how to maintain backwards compatibility with ESLint v8.x Linter functionality in v9.0.0 by passing the 'configType: \"eslintrc\"' option to the Linter constructor. It allows the use of the old configuration format and methods.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst linter = new Linter({ configType: \"eslintrc\" });\n\nlinter.verify(code, {\n\tparserOptions: {\n\t\tecmaVersion: 6,\n\t},\n});\n\nlinter.getRules();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Binary Expressions\nDESCRIPTION: Shows various examples of binary expressions that will always evaluate to the same value, which should be avoided.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-binary-expression.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-binary-expression: \"error\"*/\n\nconst value1 = +x == null;\n\nconst value2 = condition ? x : {} || DEFAULT;\n\nconst value3 = !foo == null;\n\nconst value4 = new Boolean(foo) === true;\n\nconst objIsEmpty = someObj === {};\n\nconst arrIsEmpty = someArr === [];\n\nconst shortCircuit1 = condition1 && false && condition2;\n\nconst shortCircuit2 = condition1 || true || condition2;\n\nconst shortCircuit3 = condition1 ?? \"non-nullish\" ?? condition2;\n```\n\n----------------------------------------\n\nTITLE: Exporting ESLint Configuration in JavaScript\nDESCRIPTION: Demonstrates how to export a shareable ESLint configuration object from the main entry point file (index.js). The configuration includes global variables and rule settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nmodule.exports = {\n\tglobals: {\n\t\tMyGlobal: true,\n\t},\n\n\trules: {\n\t\tsemi: [2, \"always\"],\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Default Options for ESLint Rules (JavaScript)\nDESCRIPTION: Example of specifying default options for a rule using the meta.defaultOptions property. This allows for automatic merging of user-provided options with defaults.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tmeta: {\n\t\tdefaultOptions: [\n\t\t\t{\n\t\t\t\talias: \"basic\",\n\t\t\t},\n\t\t],\n\t\tschema: [\n\t\t\t{\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\talias: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tadditionalProperties: false,\n\t\t\t},\n\t\t],\n\t},\n\tcreate(context) {\n\t\tconst [{ alias }] = context.options;\n\n\t\treturn {\n\t\t\t/* ... */\n\t\t};\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Using MessageIds for Suggestions in ESLint Rules\nDESCRIPTION: This example shows how to use messageIds for suggestions in an ESLint rule. It demonstrates defining messages in the meta object and using them in the context.report() method for both the main message and suggestions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    meta: {\n        messages: {\n            unnecessaryEscape: \"Unnecessary escape character: \\\\{{character}}.\",\n            removeEscape: \"Remove the `\\\\`. This maintains the current functionality.\",\n            escapeBackslash: \"Replace the `\\\\` with `\\\\\\\\` to include the actual backslash character.\"\n        },\n        hasSuggestions: true\n    },\n    create: function(context) {\n        // ...\n        context.report({\n            node: node,\n            messageId: 'unnecessaryEscape',\n            data: { character },\n            suggest: [\n                {\n                    messageId: \"removeEscape\", // suggestion messageId\n                    fix: function(fixer) {\n                        return fixer.removeRange(range);\n                    }\n                },\n                {\n                    messageId: \"escapeBackslash\", // suggestion messageId\n                    fix: function(fixer) {\n                        return fixer.insertTextBeforeRange(range, \"\\\\\");\n                    }\n                }\n            ]\n        });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Shareable Config for ESLint in JavaScript\nDESCRIPTION: Example of a basic ESLint shareable configuration file (index.js) that exports an array containing a configuration object with language options and rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nexport default [\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tMyGlobal: true,\n\t\t\t},\n\t\t},\n\n\t\trules: {\n\t\t\tsemi: [2, \"always\"],\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Complete Integration Implementation\nDESCRIPTION: Complete code example combining all components into a single file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ESLint } = require(\"eslint\");\n\nfunction createESLintInstance(overrideConfig) {\n\treturn new ESLint({\n\t\toverrideConfigFile: true,\n\t\toverrideConfig,\n\t\tfix: true,\n\t});\n}\n\nasync function lintAndFix(eslint, filePaths) {\n\tconst results = await eslint.lintFiles(filePaths);\n\n\tawait ESLint.outputFixes(results);\n\n\treturn results;\n}\n\nfunction outputLintingResults(results) {\n\tconst problems = results.reduce(\n\t\t(acc, result) => acc + result.errorCount + result.warningCount,\n\t\t0,\n\t);\n\n\tif (problems > 0) {\n\t\tconsole.log(\"Linting errors found!\");\n\t\tconsole.log(results);\n\t} else {\n\t\tconsole.log(\"No linting errors found.\");\n\t}\n\treturn results;\n}\n\nasync function lintFiles(filePaths) {\n\tconst overrideConfig = {\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 2018,\n\t\t\tsourceType: \"commonjs\",\n\t\t},\n\t\trules: {\n\t\t\t\"no-console\": \"error\",\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t};\n\n\tconst eslint = createESLintInstance(overrideConfig);\n\tconst results = await lintAndFix(eslint, filePaths);\n\treturn outputLintingResults(results);\n}\n\nmodule.exports = { lintFiles };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of typeof with Default Option in JavaScript\nDESCRIPTION: This code snippet shows the default behavior of the 'no-undef' rule with typeof checks. It allows the use of undefined identifiers within typeof operations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-undef: \"error\"*/\n\nif (typeof UndefinedIdentifier === \"undefined\") {\n    // do something ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rule Implementation in ESLint Plugin\nDESCRIPTION: Example demonstrating how to implement and expose custom rules in an ESLint plugin, including rule configuration usage.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\trules: {\n\t\t\"dollar-sign\": {\n\t\t\tcreate(context) {\n\t\t\t\t// rule implementation ...\n\t\t\t},\n\t\t},\n\t},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Tracking Current Segment Position in ESLint Rules\nDESCRIPTION: Demonstrates how to track the current code path segment position in an ESLint rule. Uses variables to keep track of the current code path, current segments, and all current segments for open paths.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/code-path-analysis.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tmeta: {\n\t\t// ...\n\t},\n\tcreate(context) {\n\t\t// tracks the code path we are currently in\n\t\tlet currentCodePath;\n\n\t\t// tracks the segments we've traversed in the current code path\n\t\tlet currentSegments;\n\n\t\t// tracks all current segments for all open paths\n\t\tconst allCurrentSegments = [];\n\n\t\treturn {\n\t\t\tonCodePathStart(codePath) {\n\t\t\t\tcurrentCodePath = codePath;\n\t\t\t\tallCurrentSegments.push(currentSegments);\n\t\t\t\tcurrentSegments = new Set();\n\t\t\t},\n\n\t\t\tonCodePathEnd(codePath) {\n\t\t\t\tcurrentCodePath = codePath.upper;\n\t\t\t\tcurrentSegments = allCurrentSegments.pop();\n\t\t\t},\n\n\t\t\tonCodePathSegmentStart(segment) {\n\t\t\t\tcurrentSegments.add(segment);\n\t\t\t},\n\n\t\t\tonCodePathSegmentEnd(segment) {\n\t\t\t\tcurrentSegments.delete(segment);\n\t\t\t},\n\n\t\t\tonUnreachableCodePathSegmentStart(segment) {\n\t\t\t\tcurrentSegments.add(segment);\n\t\t\t},\n\n\t\t\tonUnreachableCodePathSegmentEnd(segment) {\n\t\t\t\tcurrentSegments.delete(segment);\n\t\t\t},\n\t\t};\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Formatter Implementation\nDESCRIPTION: Simple example of a custom formatter that outputs results in JSON format\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//my-awesome-formatter.js\nmodule.exports = function (results, context) {\n\treturn JSON.stringify(results, null, 2);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Plugin Package.json for npm Publication\nDESCRIPTION: This JSON snippet shows how to properly configure the package.json file for an ESLint plugin. It includes setting ESLint as a peer dependency and specifying the required keywords for npm publication.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"peerDependencies\": {\n\t\t\"eslint\": \">=9.0.0\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying ESLint Configuration to a Specific File Pattern\nDESCRIPTION: This snippet shows how to apply a configuration to a subset of files by using the files property to specify a glob pattern. The extends property is used to incorporate the recommended JavaScript rules only for files matching the specified pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/combine-configs.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport js from \"@eslint/js\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/src/safe/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/recommended\"],\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Manual ESLint Configuration Example\nDESCRIPTION: Complete example of a manually created ESLint configuration file that sets up JavaScript linting with recommended rules and custom warning levels for specific rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/getting-started.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\nimport js from \"@eslint/js\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/recommended\"],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t\t\"no-undef\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in Flat Config Format\nDESCRIPTION: Example of loading and configuring the jsdoc plugin in flat config format. The plugin is imported as a module and assigned to a named property in the plugins object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\n\nimport jsdoc from \"eslint-plugin-jsdoc\";\n\nexport default [\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjsdoc: jsdoc,\n\t\t},\n\t\trules: {\n\t\t\t\"jsdoc/require-description\": \"error\",\n\t\t\t\"jsdoc/check-values\": \"error\",\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with JavaScript Plugin in eslint.config.js\nDESCRIPTION: Example configuration file for ESLint using the @eslint/js plugin. It demonstrates how to import and configure the plugin with different rule sets including 'js/recommended' and 'js/all', as well as how to override specific rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/packages/js/README.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\nimport js from \"@eslint/js\";\n\nexport default defineConfig([\n\t// apply recommended rules to JS files\n\t{\n\t\tname: \"your-project/recommended-rules\",\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/recommended\"],\n\t},\n\n\t// apply recommended rules to JS files with an override\n\t{\n\t\tname: \"your-project/recommended-rules-with-override\",\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/recommended\"],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n\n\t// apply all rules to JS files\n\t{\n\t\tname: \"your-project/all-rules\",\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/all\"],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint Rules for Entire Files in JavaScript\nDESCRIPTION: Shows how to disable ESLint rules for an entire file using a block comment at the top of the file. This can be done for all rules or specific rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable */\n\nalert(\"foo\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable no-alert */\n\nalert(\"foo\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-alert: \"off\" */\n\nalert(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Inline Configuration in ESLint\nDESCRIPTION: Configuration to disable all inline ESLint configurations using the noInlineConfig option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tlinterOptions: {\n\t\t\tnoInlineConfig: true,\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint Linter Verification\nDESCRIPTION: Demonstrates basic usage of the Linter.verify() method to lint JavaScript code with a simple configuration checking for semicolons.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verify(\n\t\"var foo;\",\n\t{\n\t\trules: {\n\t\t\tsemi: 2,\n\t\t},\n\t},\n\t{ filename: \"foo.js\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Correct RegExp Patterns in JavaScript\nDESCRIPTION: Examples of valid regular expression patterns that will pass the no-invalid-regexp rule. These include well-formed patterns, constructor calls with no arguments, and non-global RegExp instances.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-regexp.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-invalid-regexp: \"error\"*/\n\nRegExp('.')\n\nnew RegExp\n\nthis.RegExp('[')\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rules in JavaScript\nDESCRIPTION: Example of how to configure ESLint rules in an eslint.config.js file. This snippet shows how to define rules for specific file patterns and set error levels for different rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\", \"**/*.cjs\", \"**/*.mjs\"],\n\t\trules: {\n\t\t\t\"prefer-const\": \"warn\",\n\t\t\t\"no-constant-binary-expression\": \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in eslintrc Format\nDESCRIPTION: Example of loading and configuring the jsdoc plugin in eslintrc format. The plugin is referenced by string in the plugins array and rules are prefixed with the plugin name.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// .eslintrc.js\n\nmodule.exports = {\n\t// ...other config\n\tplugins: [\"jsdoc\"],\n\trules: {\n\t\t\"jsdoc/require-description\": \"error\",\n\t\t\"jsdoc/check-values\": \"error\",\n\t},\n\t// ...other config\n};\n```\n\n----------------------------------------\n\nTITLE: Modern ESLint Flat Config with Extensions\nDESCRIPTION: Example showing how to import and use predefined and shareable configs in the flat config format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport js from \"@eslint/js\";\nimport customConfig from \"./custom-config.js\";\nimport myConfig from \"eslint-config-my-config\";\n\nexport default [\n\tjs.configs.recommended,\n\tcustomConfig,\n\tmyConfig,\n\t{\n\t\trules: {\n\t\t\tsemi: [\"warn\", \"always\"],\n\t\t},\n\t\t// ...other config\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Plugin in Flat Config Format\nDESCRIPTION: This snippet demonstrates how to configure a third-party ESLint plugin using the flat config format. It imports the plugin, defines it in the configuration, and sets up rules from the plugin.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport example from \"eslint-plugin-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\trules: {\n\t\t\t\"example/rule1\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Reporting Unused Disable Directives in ESLint\nDESCRIPTION: Shows how to configure reporting of unused eslint-disable directives with severity levels.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tlinterOptions: {\n\t\t\treportUnusedDisableDirectives: \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeErrors with Parenthesized Optional Chaining in JavaScript\nDESCRIPTION: Examples showing how parentheses can limit the scope of short-circuiting in optional chaining expressions, leading to TypeErrors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-optional-chaining.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = undefined;\n\n(obj?.foo)(); // TypeError\n(obj?.foo).bar; // TypeError\n```\n\n----------------------------------------\n\nTITLE: Unignoring Specific Files and Directories in ESLint\nDESCRIPTION: This snippet shows how to unignore specific files or directories that were previously ignored. It unignores the node_modules/mylibrary directory while keeping other node_modules content ignored.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([\n\tglobalIgnores([\n\t\t\"!node_modules/\", // unignore `node_modules/` directory\n\t\t\"node_modules/*\", // ignore its content\n\t\t\"!node_modules/mylibrary/\", // unignore `node_modules/mylibrary` directory\n\t]),\n]);\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule with Code Path Analysis\nDESCRIPTION: Demonstrates implementation of an ESLint rule with code path analysis and function checking, similar to array-callback-return rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction checkLastSegment (node) {\n    // report problem for function if last code path segment is reachable\n}\n\nmodule.exports = {\n    meta: { ... },\n    create: function(context) {\n        // declare the state of the rule\n        return {\n            ReturnStatement: function(node) {\n                // at a ReturnStatement node while going down\n            },\n            // at a function expression node while going up:\n            \"FunctionExpression:exit\": checkLastSegment,\n            \"ArrowFunctionExpression:exit\": checkLastSegment,\n            onCodePathStart: function (codePath, node) {\n                // at the start of analyzing a code path\n            },\n            onCodePathEnd: function(codePath, node) {\n                // at the end of analyzing a code path\n            }\n        };\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ESLint Rule with messageId in JavaScript\nDESCRIPTION: Demonstrates how to create a custom ESLint rule using messageId for centralized message management and easier testing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// avoid-name.js\n\nmodule.exports = {\n    meta: {\n        messages: {\n            avoidName: \"Avoid using variables named '{{ name }}'\"\n        }\n    },\n    create(context) {\n        return {\n            Identifier(node) {\n                if (node.name === \"foo\") {\n                    context.report({\n                        node,\n                        messageId: \"avoidName\",\n                        data: {\n                            name: \"foo\",\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from CLIEngine to ESLint Class in JavaScript\nDESCRIPTION: This snippet shows how to update code that previously used the CLIEngine class, which has been removed in ESLint v8.0.0. The ESLint class is now used instead, with method mappings provided for migration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { linter } = require(\"eslint\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Linter } = require(\"eslint\");\nconst linter = new Linter();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Constant Conditions in JavaScript\nDESCRIPTION: This snippet shows various examples of code that violate the 'no-constant-condition' rule. It includes constant expressions in if statements, loops, and ternary operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-condition.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-condition: \"error\"*/\n\nif (false) {\n    doSomethingUnfinished();\n}\n\nif (void x) {\n    doSomethingUnfinished();\n}\n\nif (x &&= false) {\n    doSomethingNever();\n}\n\nif (class {}) {\n    doSomethingAlways();\n}\n\nif (new Boolean(x)) {\n    doSomethingAlways();\n}\n\nif (Boolean(1)) {\n    doSomethingAlways();\n}\n\nif (undefined) {\n    doSomethingUnfinished();\n}\n\nif (x ||= true) {\n    doSomethingAlways();\n}\n\nfor (;-2;) {\n    doSomethingForever();\n}\n\nwhile (typeof x) {\n    doSomethingForever();\n}\n\ndo {\n    doSomethingForever();\n} while (x = -1);\n\nconst result = 0 ? a : b;\n\nif(input === \"hello\" || \"bye\"){\n  output(input);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Shareable Configs in the Same Package\nDESCRIPTION: Example of exporting an additional configuration from a separate file in the same npm package, allowing for multiple configurations within one package.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// my-special-config.js\nexport default {\n\trules: {\n\t\tquotes: [2, \"double\"],\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Local ESLint Plugin\nDESCRIPTION: ESLint configuration file showing how to set up a local plugin with custom rules. Defines file patterns, language options, and rule settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\n\"use strict\";\n\n// Import the ESLint plugin locally\nconst eslintPluginExample = require(\"./eslint-plugin-example\");\n\nmodule.exports = [\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tlanguageOptions: {\n\t\t\tsourceType: \"commonjs\",\n\t\t\tecmaVersion: \"latest\",\n\t\t},\n\t\t// Using the eslint-plugin-example plugin defined locally\n\t\tplugins: { example: eslintPluginExample },\n\t\trules: {\n\t\t\t\"example/enforce-foo-bar\": \"error\",\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Writing ESLint Autofix Results to Files in JavaScript\nDESCRIPTION: This code shows how to use the static ESLint.outputFixes() method to write code modified by ESLint's autofix feature into its respective file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait ESLint.outputFixes(results);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Language in an ESLint Plugin (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define a custom language in an ESLint plugin. It shows the structure of the plugin object, including the meta information, languages definition, and rules. The example supports both ESM and CommonJS module systems.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/languages.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { myLanguage } from \"../languages/my.js\";\n\nconst plugin = {\n\t// preferred location of name and version\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\tlanguages: {\n\t\tmy: myLanguage,\n\t},\n\trules: {\n\t\t// add rules here\n\t},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Data for ESLint Custom Parser\nDESCRIPTION: Example of adding recommended meta data to a custom parser, including name and version for better debugging and caching. The meta object should match the npm package information.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// preferred location of name and version\nmodule.exports = {\n\tmeta: {\n\t\tname: \"eslint-parser-custom\",\n\t\tversion: \"1.2.3\",\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Indentation Example in JavaScript\nDESCRIPTION: Demonstrates code with correct indentation according to the default 'indent' rule settings (4 spaces).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: \"error\"*/\n\nif (a) {\n    b=c;\n    function foo(d) {\n        e=f;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Unreachable Nodes in JavaScript with ESLint\nDESCRIPTION: ESLint rule implementation that tracks code path segments and detects unreachable expression statements. Uses code path analysis to determine if any segments leading to a node are reachable.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/code-path-analysis.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction areAnySegmentsReachable(segments) {\n\tfor (const segment of segments) {\n\t\tif (segment.reachable) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nmodule.exports = {\n\tmeta: {\n\t\t// ...\n\t},\n\tcreate(context) {\n\t\t// tracks the code path we are currently in\n\t\tlet currentCodePath;\n\n\t\t// tracks the segments we've traversed in the current code path\n\t\tlet currentSegments;\n\n\t\t// tracks all current segments for all open paths\n\t\tconst allCurrentSegments = [];\n\n\t\treturn {\n\t\t\tonCodePathStart(codePath) {\n\t\t\t\tcurrentCodePath = codePath;\n\t\t\t\tallCurrentSegments.push(currentSegments);\n\t\t\t\tcurrentSegments = new Set();\n\t\t\t},\n\n\t\t\tonCodePathEnd(codePath) {\n\t\t\t\tcurrentCodePath = codePath.upper;\n\t\t\t\tcurrentSegments = allCurrentSegments.pop();\n\t\t\t},\n\n\t\t\tonCodePathSegmentStart(segment) {\n\t\t\t\tcurrentSegments.add(segment);\n\t\t\t},\n\n\t\t\tonCodePathSegmentEnd(segment) {\n\t\t\t\tcurrentSegments.delete(segment);\n\t\t\t},\n\n\t\t\tonUnreachableCodePathSegmentStart(segment) {\n\t\t\t\tcurrentSegments.add(segment);\n\t\t\t},\n\n\t\t\tonUnreachableCodePathSegmentEnd(segment) {\n\t\t\t\tcurrentSegments.delete(segment);\n\t\t\t},\n\n\t\t\tExpressionStatement(node) {\n\t\t\t\t// check all the code path segments that led to this node\n\t\t\t\tif (!areAnySegmentsReachable(currentSegments)) {\n\t\t\t\t\tcontext.report({ message: \"Unreachable!\", node });\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Configurations from Plugins in ESLint (JavaScript)\nDESCRIPTION: Shows how to extend configurations from ESLint plugins. The example demonstrates referencing a configuration by string and directly through the plugin object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport examplePlugin from \"eslint-plugin-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\texample: examplePlugin,\n\t\t},\n\t\textends: [\"example/recommended\"],\n\t},\n]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport pluginExample from \"eslint-plugin-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\texample: pluginExample,\n\t\t},\n\t\textends: [pluginExample.configs.recommended],\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct Constructor Super Call Examples\nDESCRIPTION: Examples showing proper implementation of constructors both with and without inheritance, demonstrating correct super() usage.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/constructor-super.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint constructor-super: \"error\"*/\n\nclass A {\n    constructor() { }\n}\n\nclass B extends C {\n    constructor() {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Custom ESLint Rule with Visitor Logic\nDESCRIPTION: Complete implementation of the custom rule with the VariableDeclarator visitor method that checks for const foo variables and ensures they are assigned 'bar', including autofix functionality.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// enforce-foo-bar.js\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n        docs: {\n            description: \"Enforce that a variable named `foo` can only be assigned a value of 'bar'.\"\n        },\n        fixable: \"code\",\n        schema: []\n    },\n    create(context) {\n        return {\n\n            // Performs action in the function on every variable declarator\n            VariableDeclarator(node) {\n\n                // Check if a `const` variable declaration\n                if (node.parent.kind === \"const\") {\n\n                    // Check if variable name is `foo`\n                    if (node.id.type === \"Identifier\" && node.id.name === \"foo\") {\n\n                        // Check if value of variable is \"bar\"\n                        if (node.init && node.init.type === \"Literal\" && node.init.value !== \"bar\") {\n\n                            /*\n                             * Report error to ESLint. Error message uses\n                             * a message placeholder to include the incorrect value\n                             * in the error message.\n                             * Also includes a `fix(fixer)` function that replaces\n                             * any values assigned to `const foo` with \"bar\".\n                             */\n                            context.report({\n                                node,\n                                message: 'Value other than \"bar\" assigned to `const foo`. Unexpected value: {{ notBar }}.',\n                                data: {\n                                    notBar: node.init.value\n                                },\n                                fix(fixer) {\n                                    return fixer.replaceText(node.init, '\"bar\"');\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        };\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Configs from the Same Package in ESLint\nDESCRIPTION: Demonstrates how to import and use both the default and a special configuration from the same shareable config package in an eslint.config.js file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport myconfig from \"eslint-config-myconfig\";\nimport mySpecialConfig from \"eslint-config-myconfig/my-special-config.js\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\textends: [myconfig, mySpecialConfig],\n\n\t\t// anything from here will override myconfig\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Different Quote Styles in JavaScript\nDESCRIPTION: Demonstrates the three different ways to define strings in JavaScript: double quotes, single quotes, and backticks (ES6 template literals).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar double = \"double\";\nvar single = 'single';\nvar backtick = `backtick`;    // ES6 only\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Processor in ESLint Config with Plugin Import\nDESCRIPTION: This snippet shows how to configure ESLint to use a custom processor from a plugin. It imports the plugin and uses it to process .txt files, demonstrating the string format for referencing the processor.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.txt\"], // apply processor to text files\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\tprocessor: \"example/processor-name\",\n\t},\n\t// ... other configs\n]);\n```\n\n----------------------------------------\n\nTITLE: Specifying Fix Types in ESLint CLI\nDESCRIPTION: The --fix-type flag allows specifying which types of fixes to apply (problem, suggestion, layout, directive). Useful when using another program for some types of formatting.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n--fix --fix-type suggestion .\n```\n\nLANGUAGE: bash\nCODE:\n```\n--fix --fix-type suggestion --fix-type problem .\n```\n\nLANGUAGE: bash\nCODE:\n```\n--fix --fix-type suggestion,layout .\n```\n\n----------------------------------------\n\nTITLE: Suppressing All Rule Violations in ESLint\nDESCRIPTION: Command to suppress existing violations for all rules configured as errors. The --fix flag is recommended to avoid suppressing violations that can be auto-fixed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/suppressions.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neslint --fix --suppress-all\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Parser in Flat Config Format\nDESCRIPTION: Example of specifying a custom parser (Babel) in flat config format. The parser is imported as a module and assigned to the languageOptions.parser property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\n\nimport babelParser from \"@babel/eslint-parser\";\n\nexport default [\n\t{\n\t\t// ...other config\n\t\tlanguageOptions: {\n\t\t\tparser: babelParser,\n\t\t},\n\t\t// ...other config\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of 'var' in JavaScript (ESLint no-var rule)\nDESCRIPTION: This snippet shows examples of code that violate the 'no-var' ESLint rule by using 'var' to declare variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-var.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-var: \"error\"*/\n\nvar x = \"y\";\nvar CONFIG = {};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Undeclared Variables in JavaScript\nDESCRIPTION: This code snippet shows examples of incorrect usage that would trigger the 'no-undef' rule. It includes references to undeclared variables 'someFunction' and 'a'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-undef: \"error\"*/\n\nconst foo = someFunction();\nconst bar = a + 1;\n```\n\n----------------------------------------\n\nTITLE: Initializing ESLint Configuration\nDESCRIPTION: Example showing how to run the ESLint config initialization wizard.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n--init\n```\n\n----------------------------------------\n\nTITLE: Overriding ESLint Configuration File with Command Line Option\nDESCRIPTION: This snippet shows how to use the '--config' or '-c' command line option to specify a different ESLint configuration file, overriding the default precedence order.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n{{ npx_tabs({\n    package: \"eslint\",\n    args: [\"--config\", \"eslint.config.ts\"]\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Template Literals in JavaScript\nDESCRIPTION: Examples of code that violate the no-template-curly-in-string rule. These examples show template literal placeholders used inside regular string quotes where they won't be evaluated as expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-template-curly-in-string.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-template-curly-in-string: \"error\"*/\n\"Hello ${name}!\";\n'Hello ${name}!';\n\"Time: ${12 * 60 * 60 * 1000}\";\n```\n\n----------------------------------------\n\nTITLE: Configuring File Extension Processor in Flat Config Format\nDESCRIPTION: Example of explicitly configuring a file extension processor in flat config format, which is needed since automatic file extension processor association doesn't happen in flat config.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    files: [\"**/*.md\"],\n    processor: somePlugin.processors[\".md\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using getText Method with SourceCode\nDESCRIPTION: Demonstrates different ways to use the getText() method to access source code, including getting full source, node-specific source, and source with surrounding characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get all source\nvar source = sourceCode.getText();\n\n// get source for just this AST node\nvar nodeSource = sourceCode.getText(node);\n\n// get source for AST node plus previous two characters\nvar nodeSourceWithPrev = sourceCode.getText(node, 2);\n\n// get source for AST node plus following two characters\nvar nodeSourceWithFollowing = sourceCode.getText(node, 0, 2);\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Custom ESLint Rule\nDESCRIPTION: Updating the rule scaffold with metadata including type, documentation description, fixability, and an empty schema array.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// enforce-foo-bar.js\n\nmodule.exports = {\n\tmeta: {\n\t\ttype: \"problem\",\n\t\tdocs: {\n\t\t\tdescription:\n\t\t\t\t\"Enforce that a variable named `foo` can only be assigned a value of 'bar'.\",\n\t\t},\n\t\tfixable: \"code\",\n\t\tschema: [],\n\t},\n\tcreate(context) {\n\t\treturn {\n\t\t\t// TODO: add callback function(s)\n\t\t};\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rules Using Inline Comments in JavaScript\nDESCRIPTION: Shows how to use ESLint configuration comments to enable/disable rules directly in source code files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint eqeqeq: \"off\", curly: \"error\" */\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint Configuration with Custom Processor for Text Files\nDESCRIPTION: A minimal ESLint configuration that implements a custom processor for .txt files. This shows the essential configuration needed to apply a processor from the 'example' plugin to process text files for linting.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.txt\"],\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\tprocessor: \"example/processor-name\",\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Declarations in Switch Statements (JavaScript)\nDESCRIPTION: This code snippet illustrates the correct way to use declarations in switch statements. It shows how to wrap case clauses in blocks to limit the scope of lexical declarations, demonstrates valid var usage due to function-scope hoisting, and includes an example of a valid declaration outside the switch statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-case-declarations.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-case-declarations: \"error\"*/\n\n// Declarations outside switch-statements are valid\nconst a = 0;\n\nswitch (foo) {\n    // The following case clauses are wrapped into blocks using brackets\n    case 1: {\n        let x = 1;\n        break;\n    }\n    case 2: {\n        const y = 2;\n        break;\n    }\n    case 3: {\n        function f() {}\n        break;\n    }\n    case 4:\n        // Declarations using var without brackets are valid due to function-scope hoisting\n        var z = 4;\n        break;\n    default: {\n        class C {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Renamed Processor in Flat Config\nDESCRIPTION: Demonstrates how to use a renamed processor in a flat config file. This example shows how to specify the 'markdown' processor for .md files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.md\"],\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\tprocessor: \"example/markdown\",\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variables in JSON Configuration File\nDESCRIPTION: This snippet demonstrates how to define global variables with read/write permissions in an ESLint JSON configuration file using the 'globals' property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"globals\": {\n\t\t\"var1\": \"writable\",\n\t\t\"var2\": \"readonly\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Arrow Functions According to no-confusing-arrow Rule\nDESCRIPTION: These examples show correct ways to write arrow functions that comply with the no-confusing-arrow ESLint rule, using parentheses or block statements to clarify the intent.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-confusing-arrow.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-confusing-arrow: \"error\"*/\n\nvar x = a => (1 ? 2 : 3);\nvar x = (a) => (1 ? 2 : 3);\nvar x = (a) => {\n    return 1 ? 2 : 3;\n};\nvar x = a => { return 1 ? 2 : 3; };\n```\n\n----------------------------------------\n\nTITLE: Cascading Configuration Objects in ESLint\nDESCRIPTION: Shows how multiple configuration objects are merged when they match the same files, with later objects overriding previous ones.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tMY_CUSTOM_GLOBAL: \"readonly\",\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tfiles: [\"tests/**/*.js\"],\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tit: \"readonly\",\n\t\t\t\tdescribe: \"readonly\",\n\t\t\t},\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling ESLint Rules Using Block Comments in JavaScript\nDESCRIPTION: Demonstrates how to disable and re-enable ESLint rules for a portion of a file using block comments. This can be done for all rules or specific rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable */\n\nalert(\"foo\");\n\n/* eslint-enable */\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable no-alert, no-console */\n\nalert(\"foo\");\nconsole.log(\"bar\");\n\n/* eslint-enable no-alert, no-console */\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Side Effects in JavaScript Function and Constructor Calls\nDESCRIPTION: Examples showing that function calls and constructor calls with the 'new' operator are not flagged by this rule because they may have side effects on program state.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet i = 0;\nfunction increment() { i += 1; }\nincrement(); // return value is unused, but i changed as a side effect\n\nlet nThings = 0;\nfunction Thing() { nThings += 1; }\nnew Thing(); // constructed object is unused, but nThings changed as a side effect\n```\n\n----------------------------------------\n\nTITLE: Disabling Rules for File Patterns in Configuration\nDESCRIPTION: Shows how to disable rules for specific file patterns using the 'overrides' key in a configuration file. This is useful for test files or other special case files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {...},\n  \"overrides\": [\n    {\n      \"files\": [\"*-test.js\",\"*.spec.js\"],\n      \"rules\": {\n        \"no-unused-expressions\": \"off\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Rule Fixes in JavaScript\nDESCRIPTION: Example showing how to test ESLint rule auto-fixes by specifying the expected output code after the fix is applied.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nruleTester.run(\"my-rule-for-no-foo\", rule, {\n\tvalid: [],\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"var foo;\",\n\t\t\toutput: \"var bar;\",\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tmessageId: \"shouldBeBar\",\n\t\t\t\t\tline: 1,\n\t\t\t\t\tcolumn: 5,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Settings from Shareable Configs in ESLint\nDESCRIPTION: Example showing how to override specific rules from an imported shareable config by adding override rules after extending the config in eslint.config.js.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport myconfig from \"eslint-config-myconfig\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\textends: [myconfig],\n\n\t\t// anything from here will override myconfig\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Customizing RuleTester for a Custom Test Runner in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize RuleTester to work with a custom test runner. It overrides the describe and it functions of RuleTester and shows how to use the customized RuleTester with a rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\nconst RuleTester = require(\"eslint\").RuleTester,\n\ttest = require(\"my-test-runner\"),\n\tmyRule = require(\"../../../lib/rules/my-rule\");\n\nRuleTester.describe = function (text, method) {\n\tRuleTester.it.title = text;\n\treturn method.call(this);\n};\n\nRuleTester.it = function (text, method) {\n\ttest(RuleTester.it.title + \": \" + text, method);\n};\n\n// then use RuleTester as documented\n\nconst ruleTester = new RuleTester();\n\nruleTester.run(\"my-rule\", myRule, {\n\tvalid: [\n\t\t// valid test cases\n\t],\n\tinvalid: [\n\t\t// invalid test cases\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Migrated Environment Config in Flat Config File\nDESCRIPTION: Demonstrates how to use a migrated environment config in a flat config file. This example extends the 'mocha' config and overrides a global variable.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/tests/*.js\"],\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\n\t\t// use the mocha globals\n\t\textends: [\"example/mocha\"],\n\n\t\t// and provide your own overrides\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tit: \"readonly\",\n\t\t\t},\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various Import Syntaxes in JavaScript\nDESCRIPTION: Shows different ways to use the import statement in JavaScript, including single member, multiple members, and importing all members.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// single - Import single member.\nimport myMember from \"my-module.js\";\nimport {myOtherMember} from \"my-other-module.js\";\n\n// multiple - Import multiple members.\nimport {foo, bar} from \"my-module.js\";\n\n// all - Import all members, where myModule contains all the exported bindings.\nimport * as myModule from \"my-module.js\";\n```\n\n----------------------------------------\n\nTITLE: ESLint Autofix Implementation\nDESCRIPTION: Shows how to use ESLint to automatically fix linting issues in JavaScript files using the fix option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ESLint } = require(\"eslint\");\n\n(async function main() {\n\t// 1. Create an instance with the `fix` option.\n\tconst eslint = new ESLint({ fix: true });\n\n\t// 2. Lint files. This doesn't modify target files.\n\tconst results = await eslint.lintFiles([\"lib/**/*.js\"]);\n\n\t// 3. Modify the files with the fixed code.\n\tawait ESLint.outputFixes(results);\n\n\t// 4. Format the results.\n\tconst formatter = await eslint.loadFormatter(\"stylish\");\n\tconst resultText = formatter.format(results);\n\n\t// 5. Output it.\n\tconsole.log(resultText);\n})().catch(error => {\n\tprocess.exitCode = 1;\n\tconsole.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Global Variable Declaration - JavaScript\nDESCRIPTION: Examples of correct code showing proper ways to declare global variables by explicitly setting them on window object or using IIFE for local scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-globals.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-globals: \"error\"*/\n\n// explicitly set on window\nwindow.foo = 1;\nwindow.bar = function() {};\n\n// intended to be scope to this file\n(function() {\n  var foo = 1;\n\n  function bar() {}\n})();\n```\n\n----------------------------------------\n\nTITLE: Adding Test Script to package.json\nDESCRIPTION: Update to package.json that adds a test script to run the rule tests using Node.js.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// package.json\n{\n    // ...other configuration\n    \"scripts\": {\n        \"test\": \"node enforce-foo-bar.test.js\"\n    },\n    // ...other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Buffer Constructor Usage in Node.js\nDESCRIPTION: Examples of unsafe and deprecated Buffer constructor usage that should be avoided due to potential security vulnerabilities.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-buffer-constructor.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-buffer-constructor: error */\n\nnew Buffer(5);\nnew Buffer([1, 2, 3]);\n\nBuffer(5);\nBuffer([1, 2, 3]);\n\nnew Buffer(res.body.amount);\nnew Buffer(res.body.values);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rules with Options in JavaScript\nDESCRIPTION: Shows how to specify additional options for ESLint rules using array syntax in comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint quotes: [\"error\", \"double\"], curly: 2 */\n```\n\n----------------------------------------\n\nTITLE: Updating RuleTester Test Cases for Language Options in JavaScript\nDESCRIPTION: This example shows how to update RuleTester test cases to use the new 'languageOptions' property instead of 'parserOptions' when specifying ecmaVersion. This change is part of the migration to the flat config system in ESLint v9.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nruleTester.run(\"my-rule\", myRule, {\n\tvalid: [\n\t\t{\n\t\t\tcode: \"foo\",\n\t\t\tlanguageOptions: {\n\t\t\t\tecmaVersion: 6,\n\t\t\t},\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Processors in Flat Config Format\nDESCRIPTION: Multiple ways to configure processors in flat config format. Shows referencing by string, directly using the processor object, and without requiring the plugin in the config.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport somePlugin from \"eslint-plugin-someplugin\";\n\nexport default [\n\t{\n\t\tplugins: { somePlugin },\n\t\tprocessor: \"somePlugin/someProcessor\",\n\t},\n\t{\n\t\tplugins: { somePlugin },\n\t\t// We can embed the processor object in the config directly\n\t\tprocessor: somePlugin.processors.someProcessor,\n\t},\n\t{\n\t\t// We don't need the plugin to be present in the config to use the processor directly\n\t\tprocessor: somePlugin.processors.someProcessor,\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Examples of Incorrect Code Violating no-implied-eval Rule in JavaScript\nDESCRIPTION: This code block contains multiple examples of incorrect usage that violate the no-implied-eval rule, including setTimeout(), setInterval(), execScript(), and their window-scoped variants with string arguments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implied-eval.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implied-eval: \"error\"*/\n/*global window*/\n\nsetTimeout(\"alert('Hi!');\", 100);\n\nsetInterval(\"alert('Hi!');\", 100);\n\nexecScript(\"alert('Hi!')\");\n\nwindow.setTimeout(\"count = 5\", 10);\n\nwindow.setInterval(\"foo = bar\", 10);\n```\n\n----------------------------------------\n\nTITLE: Fixed Example Code\nDESCRIPTION: Example of how the code looks after applying the ESLint fix with the --fix flag.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// example.js\n\n// ... rest of file\n\nfunction incorrectFoo() {\n\tconst foo = \"bar\"; // Fixed!\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing SourceCode Object in ESLint Rule\nDESCRIPTION: Shows how to access the SourceCode object from within an ESLint rule's create function using the context.sourceCode property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tcreate: function (context) {\n\t\tvar sourceCode = context.sourceCode;\n\n\t\t// ...\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables Flag in ESLint CLI\nDESCRIPTION: The --global flag defines global variables to prevent them from being flagged as undefined by the no-undef rule. Variables can be marked as read-only (default) or writable by appending :true to the variable name.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--global require,exports:true file.js\n```\n\nLANGUAGE: bash\nCODE:\n```\n--global require --global exports:true\n```\n\n----------------------------------------\n\nTITLE: Complex Object-Based Schema for ESLint Rule Options (JavaScript)\nDESCRIPTION: A more complex object-based schema example that requires a specific number of options and allows for different types of second options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tmeta: {\n\t\tschema: {\n\t\t\ttype: \"array\",\n\t\t\tminItems: 1,\n\t\t\tmaxItems: 2,\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\tminimum: 0,\n\t\t\t\t\tmaximum: 10,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tsomeNonOptionalProperty: { type: \"boolean\" },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trequired: [\"someNonOptionalProperty\"],\n\t\t\t\t\t\t\tadditionalProperties: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tenum: [\"off\", \"strict\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with Global Ignores\nDESCRIPTION: Example of an ESLint configuration that applies rules to all JavaScript files except those ending with '.config.js'. It demonstrates using 'ignores' without 'files' to create a global ignore pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tignores: [\"**/*.config.js\"],\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Syntax with Parser Options\nDESCRIPTION: A correct example of JSX syntax with specific parser options enabling JSX features. This snippet shows how to properly define a JSX element.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/good-examples.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst foo = <bar></bar>;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Variables Within Block Scope in JavaScript\nDESCRIPTION: Examples of code that comply with the 'block-scoped-var' rule by properly scoping variables. This includes correct usage in if statements, try-catch blocks, for loops, and class static blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/block-scoped-var.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint block-scoped-var: \"error\"*/\n\nfunction doIf() {\n    var build;\n\n    if (true) {\n        build = true;\n    }\n\n    console.log(build);\n}\n\nfunction doIfElse() {\n    var build;\n\n    if (true) {\n        build = true;\n    } else {\n        build = false;\n    }\n}\n\nfunction doTryCatch() {\n    var build;\n    var f;\n\n    try {\n        build = 1;\n    } catch (e) {\n        f = build;\n    }\n}\n\nfunction doFor() {\n    for (var x = 1; x < 10; x++) {\n        var y = f(x);\n        console.log(y);\n    }\n}\n\nclass C {\n    static {\n        var build = false;\n        if (something) {\n            build = true;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Multiple Examples of Duplicate Keys in JavaScript Objects\nDESCRIPTION: These examples demonstrate various ways of incorrectly using duplicate keys in object literals, which violate the no-dupe-keys rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-keys.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-dupe-keys: \"error\"*/\n\nconst foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n};\n\nconst bar = {\n    \"bar\": \"baz\",\n    bar: \"qux\"\n};\n\nconst baz = {\n    0x1: \"baz\",\n    1: \"qux\"\n};\n```\n\n----------------------------------------\n\nTITLE: eslintrc Configuration with Overrides\nDESCRIPTION: Example of an eslintrc configuration with overrides for different file patterns, allowing different rules for source and test files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// .eslintrc.js\n\nmodule.exports = {\n\t// ...other config\n\toverrides: [\n\t\t{\n\t\t\tfiles: [\"src/**/*\"],\n\t\t\trules: {\n\t\t\t\tsemi: [\"warn\", \"always\"],\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tfiles: [\"test/**/*\"],\n\t\t\trules: {\n\t\t\t\t\"no-console\": \"off\",\n\t\t\t},\n\t\t},\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Variables in JavaScript\nDESCRIPTION: This snippet shows examples of code that comply with the no-unused-vars rule, including proper usage of variables, function parameters, and destructuring assignments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-vars.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-vars: \"error\"*/\n\nconst x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the destructured array is used.\nfunction getY([, y]) {\n    return y;\n}\ngetY([\"a\", \"b\"]);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Parser with Babel in ESLint\nDESCRIPTION: This snippet shows how to configure ESLint to use the Babel parser instead of the default Espree parser for all JavaScript files. It imports the Babel parser and applies it to files with .js and .mjs extensions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/parser.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport babelParser from \"@babel/eslint-parser\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\", \"**/*.mjs\"],\n\t\tlanguageOptions: {\n\t\t\tparser: babelParser,\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: ESLint Constructor Example\nDESCRIPTION: Shows the basic instantiation of an ESLint object with options parameter.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst eslint = new ESLint(options);\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with File Patterns\nDESCRIPTION: Example of an ESLint configuration that applies rules only to JavaScript files in the 'src' directory. It uses the 'files' property to specify the file pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"src/**/*.js\"],\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding meta.hasSuggestions to ESLint Rules with Suggestions\nDESCRIPTION: An example of how to properly define a rule that provides suggestions in ESLint v8.0.0. The meta.hasSuggestions property must be set to true for rules that want to provide suggestions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n\tmeta: {\n\t\thasSuggestions: true,\n\t},\n\tcreate(context) {\n\t\t// your rule\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of 'const' and 'let' in JavaScript\nDESCRIPTION: Examples of code that comply with the 'prefer-const' rule by using 'const' for constants and 'let' only when necessary.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-const.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-const: \"error\"*/\n\n// using const.\nconst a = 0;\n\n// it's never initialized.\nlet b;\nconsole.log(b);\n\n// it's reassigned after initialized.\nlet c;\nc = 0;\nc = 1;\nconsole.log(c);\n\n// it's initialized in a different block from the declaration.\nlet d;\nif (true) {\n    d = 0;\n}\nconsole.log(d);\n\n// it's initialized in a different scope.\nlet e;\nclass C {\n    #x;\n    static {\n        e = obj => obj.#x;\n    }\n}\n\n// it's initialized at a place that we cannot write a variable declaration.\nlet f;\nif (true) f = 0;\nconsole.log(f);\n\n// `i` gets a new binding each iteration\nfor (const i in [1, 2, 3]) {\n  console.log(i);\n}\n\n// `a` gets a new binding each iteration\nfor (const a of [1, 2, 3]) {\n  console.log(a);\n}\n\n// `end` is never reassigned, but we cannot separate the declarations without modifying the scope.\nfor (let i = 0, end = 10; i < end; ++i) {\n    console.log(i);\n}\n\n// `predicate` is only assigned once but cannot be separately declared as `const`\nlet predicate;\n[object.type, predicate] = foo();\n\n// `g` is only assigned once but cannot be separately declared as `const`\nlet g;\nconst h = {};\n({ g, c: h.c } = func());\n\n// suggest to use `no-var` rule.\nvar i = 3;\nconsole.log(i);\n```\n\n----------------------------------------\n\nTITLE: Testing Rule Suggestions with Description\nDESCRIPTION: Example demonstrating how to test rule suggestions by verifying the suggestion description and the resulting code output after applying the suggestion.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nruleTester.run(\"my-rule-for-no-foo\", rule, {\n\tvalid: [],\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"var foo;\",\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tsuggestions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdesc: \"Rename identifier 'foo' to 'bar'\",\n\t\t\t\t\t\t\toutput: \"var bar;\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Running ESLint CLI in Debug Mode\nDESCRIPTION: Shows how to run ESLint with the --debug flag to see detailed debugging information, including which configuration file is being loaded for a specific JavaScript file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/debug.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\neslint:eslint Using file patterns: bin/eslint.js +0ms\neslint:eslint Searching for eslint.config.js +0ms\neslint:eslint Loading config from C:\\Users\\nzakas\\projects\\eslint\\eslint\\eslint.config.js +5ms\neslint:eslint Config file URL is file:///C:/Users/nzakas/projects/eslint/eslint/eslint.config.js +0ms\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Generator Functions with ESLint require-yield Rule\nDESCRIPTION: Examples showing proper generator function implementations that satisfy the require-yield rule: using yield, regular functions, and empty generator functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-yield.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint require-yield: \"error\"*/\n\nfunction* foo() {\n  yield 5;\n  return 10;\n}\n\nfunction bar() {\n  return 10;\n}\n\n// This rule does not warn on empty generator functions.\nfunction* baz() { }\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with File Exclusions\nDESCRIPTION: Example of an ESLint configuration that applies rules to JavaScript files in the 'src' directory, excluding files ending with '.config.js'. It uses both 'files' and 'ignores' properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"src/**/*.js\"],\n\t\tignores: [\"**/*.config.js\"],\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Shareable Configs\nDESCRIPTION: Example showing how to use multiple shareable configs together, combining the recommended configs from @eslint/js and eslint-plugin-solid.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/glossary.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport js from \"@eslint/js\";\nimport solid from \"eslint-plugin-solid/configs/recommended\";\n\nexport default [js.configs.recommended, solid];\n```\n\n----------------------------------------\n\nTITLE: Using Symbol with Description in JavaScript\nDESCRIPTION: Demonstrates the proper way to create Symbol instances with descriptions, both using string literals and variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/symbol-description.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = Symbol(\"some description\");\n\nconst someString = \"some description\";\nconst bar = Symbol(someString);\n```\n\n----------------------------------------\n\nTITLE: Implementing Detailed Formatter in JavaScript\nDESCRIPTION: A more complex ESLint formatter that provides detailed information about each error and warning, including file paths, rule IDs, and line numbers.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (results, context) {\n\tvar results = results || [];\n\n\tvar summary = results.reduce(\n\t\tfunction (seq, current) {\n\t\t\tcurrent.messages.forEach(function (msg) {\n\t\t\t\tvar logMessage = {\n\t\t\t\t\tfilePath: current.filePath,\n\t\t\t\t\truleId: msg.ruleId,\n\t\t\t\t\truleUrl: context.rulesMeta[msg.ruleId].docs.url,\n\t\t\t\t\tmessage: msg.message,\n\t\t\t\t\tline: msg.line,\n\t\t\t\t\tcolumn: msg.column,\n\t\t\t\t};\n\n\t\t\t\tif (msg.severity === 1) {\n\t\t\t\t\tlogMessage.type = \"warning\";\n\t\t\t\t\tseq.warnings.push(logMessage);\n\t\t\t\t}\n\t\t\t\tif (msg.severity === 2) {\n\t\t\t\t\tlogMessage.type = \"error\";\n\t\t\t\t\tseq.errors.push(logMessage);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn seq;\n\t\t},\n\t\t{\n\t\t\terrors: [],\n\t\t\twarnings: [],\n\t\t},\n\t);\n\n\tif (summary.errors.length > 0 || summary.warnings.length > 0) {\n\t\tvar lines = summary.errors\n\t\t\t.concat(summary.warnings)\n\t\t\t.map(function (msg) {\n\t\t\t\treturn (\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tmsg.type +\n\t\t\t\t\t\" \" +\n\t\t\t\t\tmsg.ruleId +\n\t\t\t\t\t(msg.ruleUrl ? \" (\" + msg.ruleUrl + \")\" : \"\") +\n\t\t\t\t\t\"\\n  \" +\n\t\t\t\t\tmsg.filePath +\n\t\t\t\t\t\":\" +\n\t\t\t\t\tmsg.line +\n\t\t\t\t\t\":\" +\n\t\t\t\t\tmsg.column\n\t\t\t\t);\n\t\t\t})\n\t\t\t.join(\"\\n\");\n\n\t\treturn lines + \"\\n\";\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Custom Formatter with Environment Variables\nDESCRIPTION: Advanced formatter implementation that uses environment variables to control output behavior\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (results) {\n\tvar skipWarnings = process.env.FORMATTER_SKIP_WARNINGS === \"true\";\n\n\tvar results = results || [];\n\tvar summary = results.reduce(\n\t\tfunction (seq, current) {\n\t\t\tcurrent.messages.forEach(function (msg) {\n\t\t\t\tvar logMessage = {\n\t\t\t\t\tfilePath: current.filePath,\n\t\t\t\t\truleId: msg.ruleId,\n\t\t\t\t\tmessage: msg.message,\n\t\t\t\t\tline: msg.line,\n\t\t\t\t\tcolumn: msg.column,\n\t\t\t\t};\n\n\t\t\t\tif (msg.severity === 1) {\n\t\t\t\t\tlogMessage.type = \"warning\";\n\t\t\t\t\tseq.warnings.push(logMessage);\n\t\t\t\t}\n\t\t\t\tif (msg.severity === 2) {\n\t\t\t\t\tlogMessage.type = \"error\";\n\t\t\t\t\tseq.errors.push(logMessage);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn seq;\n\t\t},\n\t\t{\n\t\t\terrors: [],\n\t\t\twarnings: [],\n\t\t},\n\t);\n\n\tif (summary.errors.length > 0 || summary.warnings.length > 0) {\n\t\tvar warnings = !skipWarnings ? summary.warnings : []; // skip the warnings in that case\n\n\t\tvar lines = summary.errors\n\t\t\t.concat(warnings)\n\t\t\t.map(function (msg) {\n\t\t\t\treturn (\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tmsg.type +\n\t\t\t\t\t\" \" +\n\t\t\t\t\tmsg.ruleId +\n\t\t\t\t\t\"\\n  \" +\n\t\t\t\t\tmsg.filePath +\n\t\t\t\t\t\":\" +\n\t\t\t\t\tmsg.line +\n\t\t\t\t\t\":\" +\n\t\t\t\t\tmsg.column\n\t\t\t\t);\n\t\t\t})\n\t\t\t.join(\"\\n\");\n\n\t\treturn lines + \"\\n\";\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: ESLint Plugin Metadata Definition\nDESCRIPTION: Example showing how to define plugin metadata including name and version information. Demonstrates the recommended structure for plugin identification.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\t// preferred location of name and version\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\trules: {\n\t\t// add rules here\n\t},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Globals to ESLint Configuration Using Globals Package\nDESCRIPTION: Example showing how to import and use the globals package to add browser globals to your ESLint configuration. This adds all browser globals like console, document, etc.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport globals from \"globals\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t},\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Symbol Function in JavaScript\nDESCRIPTION: This example demonstrates the proper way to use Symbol as a function call without the new operator. It also shows that the rule ignores shadowed Symbol variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-symbol.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-new-symbol: \"error\"*/\n\nvar foo = Symbol('foo');\n\n// Ignores shadowed Symbol.\nfunction bar(Symbol) {\n    const baz = new Symbol(\"baz\");\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'always' Option - JavaScript\nDESCRIPTION: Shows correct code examples when the rule is configured with the 'always' option, demonstrating proper spacing before function parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-parentheses.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo () {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nvar bar = function foo () {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Example of async function with await\nDESCRIPTION: An example of a proper async function that uses the await operator with fetch and JSON processing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-await.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchData(processDataItem) {\n    const response = await fetch(DATA_URL);\n    const data = await response.json();\n\n    return data.map(processDataItem);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Array Reduce Method in JavaScript\nDESCRIPTION: This snippet demonstrates an incorrect implementation of the reduce method, where the return statement is missing in the callback function. This can lead to errors when trying to access properties of undefined.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-callback-return.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst indexMap = myArray.reduce(function(memo, item, index) {\n  memo[item] = index;\n}, {}); // Error: cannot set property 'b' of undefined\n```\n\n----------------------------------------\n\nTITLE: ESLint Verify and Fix Operation\nDESCRIPTION: Shows usage of verifyAndFix() method to automatically fix linting errors while verifying code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verifyAndFix(\"var foo\", {\n\trules: {\n\t\tsemi: 2,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Suggestions for ESLint Rules in JavaScript\nDESCRIPTION: This snippet demonstrates how to provide suggestions for an ESLint rule using the 'suggest' key in the context.report() method. It includes examples of providing multiple suggestions with descriptions and fix functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.report({\n    node: node,\n    message: \"Unnecessary escape character: \\\\{{character}}.\",\n    data: { character },\n    suggest: [\n        {\n            desc: \"Remove the `\\\\`. This maintains the current functionality.\",\n            fix: function(fixer) {\n                return fixer.removeRange(range);\n            }\n        },\n        {\n            desc: \"Replace the `\\\\` with `\\\\\\\\` to include the actual backslash character.\",\n            fix: function(fixer) {\n                return fixer.insertTextBeforeRange(range, \"\\\\\");\n            }\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual ESLint Plugin\nDESCRIPTION: This snippet demonstrates how to create and configure a virtual ESLint plugin directly in the configuration file, allowing the use of custom rules without creating a separate plugin file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport myRule from \"./rules/my-rule.js\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tplugins: {\n\t\t\tlocal: {\n\t\t\t\trules: {\n\t\t\t\t\t\"my-rule\": myRule,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\trules: {\n\t\t\t\"local/my-rule\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for Restricting Require Calls\nDESCRIPTION: JSON configuration for the no-restricted-syntax rule that disallows calls to the require function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/selectors.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"no-restricted-syntax\": [\n\t\t\t\"error\",\n\t\t\t\"CallExpression[callee.name='require']\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of code that trigger the prefer-arrow-callback rule\nDESCRIPTION: These examples show function expressions used as callbacks that would trigger the rule violation. The rule recommends using arrow functions instead for cleaner, more concise code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-arrow-callback.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint prefer-arrow-callback: \"error\" */\n\nfoo(function(a) { return a; }); // ERROR\n// prefer: foo(a => a)\n\nfoo(function() { return this.a; }.bind(this)); // ERROR\n// prefer: foo(() => this.a)\n```\n\n----------------------------------------\n\nTITLE: Configuring simple module restrictions in ESLint (JSON)\nDESCRIPTION: Basic configuration that restricts usage of 'foo-module' and 'bar-module' in JavaScript code using an array of module names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-modules\": [\"error\", \"foo-module\", \"bar-module\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rules with Inline Comments\nDESCRIPTION: Example of an inline configuration comment that disables the eqeqeq rule and sets the curly rule to error severity. This demonstrates how to use configuration comments to modify rule settings within source code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/glossary.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint eqeqeq: \"off\", curly: \"error\" */\n```\n\n----------------------------------------\n\nTITLE: Enforcing Parentheses in Arrow Functions (JavaScript)\nDESCRIPTION: This snippet demonstrates the basic usage of the 'arrow-parens' rule, showing examples of bad and good practices for arrow function parameter parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\na => {}\n\n// Good\n(a) => {}\n```\n\n----------------------------------------\n\nTITLE: Implementing ESLint Rule with Selectors\nDESCRIPTION: Example showing how to create an ESLint rule that uses selectors to listen for specific AST patterns. Demonstrates listening for if statements with block bodies and function declarations with more than 3 parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/selectors.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tcreate(context) {\n\t\t// ...\n\n\t\treturn {\n\t\t\t// This listener will be called for all IfStatement nodes with blocks.\n\t\t\t\"IfStatement > BlockStatement\": function (blockStatementNode) {\n\t\t\t\t// ...your logic here\n\t\t\t},\n\n\t\t\t// This listener will be called for all function declarations with more than 3 parameters.\n\t\t\t\"FunctionDeclaration[params.length>3]\": function (\n\t\t\t\tfunctionDeclarationNode,\n\t\t\t) {\n\t\t\t\t// ...your logic here\n\t\t\t},\n\t\t};\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Plugin Metadata Loading\nDESCRIPTION: Example showing how to dynamically load plugin metadata from package.json using the file system module.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from \"fs\";\n\nconst pkg = JSON.parse(\n\tfs.readFileSync(new URL(\"./package.json\", import.meta.url), \"utf8\"),\n);\n\nconst plugin = {\n\t// preferred location of name and version\n\tmeta: {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t},\n\trules: {\n\t\t// add rules here\n\t},\n};\n\nexport default plugin;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Always Option\nDESCRIPTION: Examples of code that violates the eqeqeq rule when configured with the \"always\" option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/eqeqeq.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Reassigning const Variable in JavaScript\nDESCRIPTION: This snippet demonstrates incorrect usage by attempting to reassign a value to a const variable, which is not allowed and will raise a runtime error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-const-assign.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-const-assign: \"error\"*/\n\nconst a = 0;\na = 1;\n```\n\n----------------------------------------\n\nTITLE: Examples of Correct Code for space-infix-ops Rule\nDESCRIPTION: Examples of code that correctly follows the space-infix-ops rule, with proper spacing around various operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-infix-ops.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-infix-ops: \"error\"*/\n\na + b\n\na       + b\n\na ? b : c\n\nconst a = {b:1};\n\nvar {b = 0} = bar;\n\nfunction foo(a = 0) { }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of typeof with 'typeof' Option and Global Declaration in JavaScript\nDESCRIPTION: This code snippet shows how to use typeof checks with the 'typeof' option set to true by declaring the variable as global, preventing 'no-undef' warnings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*global a*/\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rules in JSON Configuration File\nDESCRIPTION: Shows how to configure ESLint rules in a JSON configuration file using the 'rules' key with error levels and options. This is used for project-wide rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"eqeqeq\": \"off\",\n\t\t\"curly\": \"error\",\n\t\t\"quotes\": [\"error\", \"double\"]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Configuration Array to a Specific File Pattern in ESLint\nDESCRIPTION: This snippet demonstrates how to apply an entire configuration array to only a subset of files. The extends property is used to incorporate the imported configuration array, and the files property restricts the configuration to specific file paths.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/combine-configs.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport exampleConfigs from \"eslint-config-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/src/safe/*.js\"],\n\t\textends: [exampleConfigs],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Test File (Shell Command)\nDESCRIPTION: Shell command to create a test file for the custom ESLint rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ntouch example.js\n```\n\n----------------------------------------\n\nTITLE: Modern Object-based ESLint Rule Definition with Fixable Property\nDESCRIPTION: The recommended object-based format for defining ESLint rules that provide fixes. The meta.fixable property must be set to either \"code\" or \"whitespace\" for rules that want to provide fixes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n\tmeta: {\n\t\tfixable: \"code\", // or \"whitespace\"\n\t},\n\tcreate(context) {\n\t\t// your rule\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Awaiting in Loop (JavaScript)\nDESCRIPTION: This snippet demonstrates an inefficient use of await inside a loop, where each iteration waits for the previous asynchronous operation to complete before starting the next one.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Bad: each loop iteration is delayed until the entire asynchronous operation completes\n    results.push(await doAsyncWork(thing));\n  }\n  return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Modern Spread Syntax Usage\nDESCRIPTION: Example showing how to call variadic functions using ES2015 spread syntax\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-spread.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst args = [1, 2, 3, 4];\nMath.max(...args);\n```\n\n----------------------------------------\n\nTITLE: Configuring no-redeclare Rule in ESLint v6\nDESCRIPTION: This snippet shows how to configure the no-redeclare rule to restore the previous default behavior in ESLint v6. It sets the builtinGlobals option to false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"no-redeclare\": [\"error\", { \"builtinGlobals\": false }]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Object Spread Syntax in JavaScript\nDESCRIPTION: Examples of code patterns that comply with the prefer-object-spread rule, demonstrating proper use of object spread syntax and valid Object.assign calls.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-object-spread.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-object-spread: \"error\"*/\n\n({ ...foo });\n\n({ ...baz, foo: 'bar' });\n\n// Any Object.assign call without an object literal as the first argument\nObject.assign(foo, { bar: baz });\n\nObject.assign(foo, bar);\n\nObject.assign(foo, { bar, baz });\n\nObject.assign(foo, { ...baz });\n```\n\n----------------------------------------\n\nTITLE: Disabling Inline ESLint Configuration Comments in JavaScript\nDESCRIPTION: Demonstrates how to disable all inline config comments using the 'noInlineConfig' setting in the configuration file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlinterOptions: {\n\t\t\tnoInlineConfig: true,\n\t\t},\n\t\trules: {\n\t\t\t\"no-unused-expressions\": \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Using ESLint Directive Comments with Descriptions\nDESCRIPTION: Example of using the new ESLint v7.0.0 feature that allows adding descriptions to directive comments. This demonstrates how to disable rules for a specific line while providing context.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-7.0.0.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint-disable-next-line a-rule, another-rule -- those are buggy!!\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Native Object Extension\nDESCRIPTION: Examples of code that violates the no-extend-native rule by directly modifying built-in object prototypes\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extend-native.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-extend-native: \"error\"*/\n\nObject.prototype.a = \"a\";\nObject.defineProperty(Array.prototype, \"times\", { value: 999 });\n```\n\n----------------------------------------\n\nTITLE: Configuring RuleTester with ESLint v8 Defaults in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the new RuleTester to use the old ESLint v8 defaults for ecmaVersion and sourceType. This is useful when migrating existing tests that rely on the previous default behavior.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst ruleTester = new RuleTester({\n\tlanguageOptions: {\n\t\tecmaVersion: 5,\n\t\tsourceType: \"script\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SourceCode Instances in JavaScript\nDESCRIPTION: Illustrates how to create a new SourceCode instance by passing in a code string and an AST. It also shows how SourceCode handles Unicode BOM characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst SourceCode = require(\"eslint\").SourceCode;\n\nconst code = new SourceCode(\"var foo = bar;\", ast);\n\nconst codeWithBOM = new SourceCode(\"\\uFEFFvar foo = bar;\", ast);\n\nassert(codeWithBOM.hasBOM === true);\nassert(codeWithBOM.text === \"var foo = bar;\");\n```\n\n----------------------------------------\n\nTITLE: Enabling JSX Parsing in ESLint's Default Parser\nDESCRIPTION: Configuration example that enables JSX syntax parsing in ESLint's default parser. This sets the jsx ecmaFeature to true while keeping other parser options at their default values.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tparserOptions: {\n\t\t\t\tecmaFeatures: {\n\t\t\t\t\tjsx: true,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct Alternative to Function Constructor in JavaScript\nDESCRIPTION: Example of the recommended way to create functions in JavaScript using function expressions instead of the Function constructor.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-func.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new-func: \"error\"*/\n\nconst x = function (a, b) {\n    return a + b;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating operator-linebreak with 'before' option in JavaScript\nDESCRIPTION: This snippet shows incorrect and correct code examples for the operator-linebreak rule with the 'before' option. It illustrates how operators should be placed at the beginning of lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-linebreak.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint operator-linebreak: [\"error\", \"before\"]*/\n\nfoo = 1 + 2;\n\nfoo = 1\n    + 2;\n\nfoo\n    = 5;\n\nif (someCondition\n    || otherCondition) {\n}\n\nanswer = everything\n  ? 42\n  : foo;\n\nclass Foo {\n    a\n        = 1;\n    [b]\n        = 2;\n    [c\n    ]\n        = 3;\n    d = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Environments to Configs in JavaScript\nDESCRIPTION: Shows how to migrate plugin environments to configs in the flat config system. This example converts a 'mocha' environment to a config with global variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tconfigs: {},\n\trules: {},\n\tprocessors: {},\n};\n\n// assign configs here so we can reference `plugin`\nObject.assign(plugin.configs, {\n\tmocha: {\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tit: \"writeable\",\n\t\t\t\txit: \"writeable\",\n\t\t\t\tdescribe: \"writeable\",\n\t\t\t\txdescribe: \"writeable\",\n\t\t\t},\n\t\t},\n\t},\n});\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Ignoring Directories in ESLint Configuration\nDESCRIPTION: This snippet shows how to ignore an entire directory in ESLint configuration. It ignores the .config directory as a whole, preventing file search from traversing into it.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([globalIgnores([\".config/\"]));\n```\n\n----------------------------------------\n\nTITLE: Validating Callback Execution Paths in JavaScript\nDESCRIPTION: ESLint rule that verifies a callback parameter 'cb' is called in every possible code path. Tracks function information and segment states to ensure complete callback coverage.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/code-path-analysis.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction hasCb(node, context) {\n\tif (node.type.indexOf(\"Function\") !== -1) {\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn sourceCode.getDeclaredVariables(node).some(function (v) {\n\t\t\treturn v.type === \"Parameter\" && v.name === \"cb\";\n\t\t});\n\t}\n\treturn false;\n}\n\nfunction isCbCalled(info) {\n\treturn info.cbCalled;\n}\n\nmodule.exports = {\n\tmeta: {\n\t\t// ...\n\t},\n\tcreate(context) {\n\t\tlet funcInfo;\n\t\tconst funcInfoStack = [];\n\t\tconst segmentInfoMap = Object.create(null);\n\n\t\treturn {\n\t\t\t// Checks `cb`.\n\t\t\tonCodePathStart(codePath, node) {\n\t\t\t\tfuncInfoStack.push(funcInfo);\n\n\t\t\t\tfuncInfo = {\n\t\t\t\t\tcodePath: codePath,\n\t\t\t\t\thasCb: hasCb(node, context),\n\t\t\t\t\tcurrentSegments: new Set(),\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tonCodePathEnd(codePath, node) {\n\t\t\t\tfuncInfo = funcInfoStack.pop();\n\n\t\t\t\t// Checks `cb` was called in every paths.\n\t\t\t\tconst cbCalled = codePath.finalSegments.every(\n\t\t\t\t\tfunction (segment) {\n\t\t\t\t\t\tconst info = segmentInfoMap[segment.id];\n\t\t\t\t\t\treturn info.cbCalled;\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (!cbCalled) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tmessage: \"`cb` should be called in every path.\",\n\t\t\t\t\t\tnode: node,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Manages state of code paths and tracks traversed segments\n\t\t\tonCodePathSegmentStart(segment) {\n\t\t\t\tfuncInfo.currentSegments.add(segment);\n\n\t\t\t\t// Ignores if `cb` doesn't exist.\n\t\t\t\tif (!funcInfo.hasCb) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Initialize state of this path.\n\t\t\t\tconst info = (segmentInfoMap[segment.id] = {\n\t\t\t\t\tcbCalled: false,\n\t\t\t\t});\n\n\t\t\t\t// If there are the previous paths, merges state.\n\t\t\t\t// Checks `cb` was called in every previous path.\n\t\t\t\tif (segment.prevSegments.length > 0) {\n\t\t\t\t\tinfo.cbCalled = segment.prevSegments.every(isCbCalled);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Tracks unreachable segment traversal\n\t\t\tonUnreachableCodePathSegmentStart(segment) {\n\t\t\t\tfuncInfo.currentSegments.add(segment);\n\t\t\t},\n\n\t\t\t// Tracks reachable segment traversal\n\t\t\tonCodePathSegmentEnd(segment) {\n\t\t\t\tfuncInfo.currentSegments.delete(segment);\n\t\t\t},\n\n\t\t\t// Tracks unreachable segment traversal\n\t\t\tonUnreachableCodePathSegmentEnd(segment) {\n\t\t\t\tfuncInfo.currentSegments.delete(segment);\n\t\t\t},\n\n\t\t\t// Checks reachable or not.\n\t\t\tCallExpression(node) {\n\t\t\t\t// Ignores if `cb` doesn't exist.\n\t\t\t\tif (!funcInfo.hasCb) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Sets marks that `cb` was called.\n\t\t\t\tconst callee = node.callee;\n\t\t\t\tif (callee.type === \"Identifier\" && callee.name === \"cb\") {\n\t\t\t\t\tfuncInfo.currentSegments.forEach(segment => {\n\t\t\t\t\t\tconst info = segmentInfoMap[segment.id];\n\t\t\t\t\t\tinfo.cbCalled = true;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Optional Chaining in JavaScript\nDESCRIPTION: Examples of code patterns that use optional chaining safely and would pass the no-unsafe-optional-chaining rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-optional-chaining.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-optional-chaining: \"error\"*/\n\n(obj?.foo)?.()\n\nobj?.foo();\n\n(obj?.foo ?? bar)();\n\nobj?.foo.bar;\n\nobj.foo?.bar;\n\nfoo?.()?.bar;\n\n(obj?.foo ?? bar)`template`;\n\nnew (obj?.foo ?? bar)();\n\nconst baz = {...obj?.foo};\n\nconst { bar } = obj?.foo || baz;\n\nasync function foo () {\n  const { bar } = await obj?.foo || baz;\n   (await obj?.foo)?.()\n   (await obj?.foo)?.bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Template Tag Spacing in JavaScript\nDESCRIPTION: These examples show the two equivalent ways of using tagged template literals, with and without spacing between the tag function and the template literal.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-tag-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet hello = func`Hello world`;\nlet hello = func `Hello world`;\n```\n\n----------------------------------------\n\nTITLE: Correct Error Handling: Parallel Promise Resolution (JavaScript)\nDESCRIPTION: This snippet demonstrates the proper way to handle multiple promises, using Promise.all() to resolve them in parallel and catch any rejections in a single try-catch block.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function foo() {\n    const arrayOfPromises = somethingThatCreatesAnArrayOfPromises();\n    // Good: Any rejections will cause a single exception to be thrown here,\n    // which may be caught and handled by the caller.\n    const arrayOfValues = await Promise.all(arrayOfPromises);\n    for (const value of arrayOfValues) {\n        console.log(value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Import Sorting Examples in JavaScript\nDESCRIPTION: Demonstrates correctly sorted import statements according to the default sort-imports rule settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-imports: \"error\"*/\nimport 'module-without-export.js';\nimport * as bar from 'bar.js';\nimport * as foo from 'foo.js';\nimport {alpha, beta} from 'alpha.js';\nimport {delta, gamma} from 'delta.js';\nimport a from 'baz.js';\nimport {b} from 'qux.js';\n```\n\n----------------------------------------\n\nTITLE: Applying an Imported Configuration Array in ESLint\nDESCRIPTION: This snippet demonstrates importing a configuration array from a shareable config module and inserting it directly into the exported configuration. Additional custom rules are added after the imported configuration array.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/combine-configs.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport exampleConfigs from \"eslint-config-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t// insert array directly\n\texampleConfigs,\n\n\t// your modifications\n\t{\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Combining ESLint Configs in JavaScript\nDESCRIPTION: Shows how to create an ESLint configuration that both extends another configuration and adds its own rules. This example demonstrates proper resolution of package paths.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\trules: {\n\t\t\"no-console\": 1,\n\t},\n\textends: \"myconfig/lib/ci/common\",\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Case in JavaScript Switch Statement\nDESCRIPTION: This snippet shows a switch statement with a default case, which is the recommended practice according to some code conventions. The default case is explicitly stated, even if it's empty.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-case.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nswitch (foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomething();\n        break;\n\n    default:\n    // do nothing\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Return Override in Finally Block (JavaScript)\nDESCRIPTION: This example shows how a return statement in a finally block overrides a return statement in a try block. Instead of returning 1 as expected, the function returns 3.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// We expect this function to return 1;\n(() => {\n    try {\n        return 1; // 1 is returned but suspended until finally block ends\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3; // 3 is returned before 1, which we did not expect\n    }\n})();\n\n// > 3\n```\n\n----------------------------------------\n\nTITLE: Mixed Environment ESLint Configuration\nDESCRIPTION: Advanced configuration example for projects with both browser scripts and Node.js tools using base and CJS configs\nSOURCE: https://github.com/eslint/eslint/blob/main/packages/eslint-config-eslint/README.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require(\"eslint/config\");\nconst eslintConfigESLintBase = require(\"eslint-config-eslint/base\");\nconst eslintConfigESLintCJS = require(\"eslint-config-eslint/cjs\");\n\nmodule.exports = defineConfig([\n\t{\n\t\tfiles: [\"scripts/*.js\"],\n\t\textends: [eslintConfigESLintBase],\n\t},\n\t{\n\t\tfiles: [\"eslint.config.js\", \".eleventy.js\", \"tools/*.js\"],\n\t\textends: [eslintConfigESLintCJS],\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating operator-linebreak with overrides in JavaScript\nDESCRIPTION: This snippet shows correct code examples for the operator-linebreak rule with overrides for specific operators. It illustrates how to customize linebreak behavior for individual operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-linebreak.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint operator-linebreak: [\"error\", \"after\", { \"overrides\": { \"+=\": \"before\" } }]*/\n\nvar thing = 'thing';\nthing\n  += 's';\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'single' and 'avoidEscape' Options\nDESCRIPTION: Shows code that complies with the 'single' quotes rule with avoidEscape option, allowing double quotes when they help avoid escaping.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"single\", { \"avoidEscape\": true }]*/\n\nvar double = \"a string containing 'single' quotes\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Options for Babel in ESLint\nDESCRIPTION: This example demonstrates how to pass specific options to the Babel parser through the parserOptions property. It configures Babel to not require a config file and sets up Babel presets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/parser.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport babelParser from \"@babel/eslint-parser\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tparser: babelParser,\n\t\t\tparserOptions: {\n\t\t\t\trequireConfigFile: false,\n\t\t\t\tbabelOptions: {\n\t\t\t\t\tbabelrc: false,\n\t\t\t\t\tconfigFile: false,\n\t\t\t\t\tpresets: [\"@babel/preset-env\"],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Migrating Configs to Flat Config Format in JavaScript\nDESCRIPTION: Shows how to update plugin configs to the new flat config format. This example demonstrates moving configs after the plugin definition and referencing the plugin directly.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tconfigs: {},\n\trules: {},\n\tprocessors: {},\n};\n\n// assign configs here so we can reference `plugin`\nObject.assign(plugin.configs, {\n\trecommended: {\n\t\tplugins: {\n\t\t\texample: plugin,\n\t\t},\n\t\trules: {\n\t\t\t\"example/rule1\": \"error\",\n\t\t\t\"example/rule2\": \"error\",\n\t\t},\n\t},\n});\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ESLint Rule Macro in HTML\nDESCRIPTION: This snippet demonstrates how to import and use the ESLint rule macro in an HTML template. It shows the basic structure and parameters required to define a rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/rule.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- import the macro -->\n{ % from 'components/rule.macro.html' import rule % }\n\n<!-- use the macro -->\n{ { rule({ name: \"rule-name\", deprecated: true, // or removed: true replacedBy:\n\"name-of-replacement-rule\" description: 'Example: Enforce `return` statements in\ngetters.', categories: { recommended: true, fixable: true, hasSuggestions: false\n} }) } }\n```\n\n----------------------------------------\n\nTITLE: Fixing Code Issues with ESLint CLI\nDESCRIPTION: The --fix flag instructs ESLint to automatically fix as many issues as possible. Fixes are applied directly to the files, and only remaining unfixed issues are reported.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n--fix file.js\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Private Class Members in JavaScript\nDESCRIPTION: This code snippet shows examples of private class members that are declared but never used, which violates the 'no-unused-private-class-members' rule. It includes unused fields, methods, and accessors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-private-class-members.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-private-class-members: \"error\"*/\n\nclass A {\n    #unusedMember = 5;\n}\n\nclass B {\n    #usedOnlyInWrite = 5;\n    method() {\n        this.#usedOnlyInWrite = 42;\n    }\n}\n\nclass C {\n    #usedOnlyToUpdateItself = 5;\n    method() {\n        this.#usedOnlyToUpdateItself++;\n    }\n}\n\nclass D {\n    #unusedMethod() {}\n}\n\nclass E {\n    get #unusedAccessor() {}\n    set #unusedAccessor(value) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exceptions for no-global-assign Rule in JSON\nDESCRIPTION: JSON configuration example showing how to specify exceptions to the no-global-assign rule, allowing reassignment of specific built-in objects.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-global-assign.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-global-assign\": [\"error\", {\"exceptions\": [\"Object\"]}]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Overrides in YAML\nDESCRIPTION: Example YAML configuration for ESLint showing how to use overrides to apply different configs for JavaScript and TypeScript files. This demonstrates the new behavior of linting files matched by overrides[].files by default.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-7.0.0.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .eslintrc.yml\nextends: my-config-js\noverrides:\n    - files: \"*.ts\"\n      extends: my-config-ts\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Shorthand Property AST Format Change in JavaScript\nDESCRIPTION: This snippet shows how the AST representation of shorthand properties has changed in ESLint v8.0.0 due to an upgrade to Acorn v8.0.0. The key and value nodes are now separate objects instead of being the same object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst version = 8;\nconst x = {\n\tversion,\n};\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"Property\",\n\t\"method\": false,\n\t\"shorthand\": true,\n\t\"computed\": false,\n\t\"key\": {\n\t\t\"type\": \"Identifier\",\n\t\t\"name\": \"version\"\n\t},\n\t\"kind\": \"init\",\n\t\"value\": {\n\t\t\"type\": \"Identifier\",\n\t\t\"name\": \"version\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Plugin Rules, Environments, and Configurations in ESLint\nDESCRIPTION: Example showing how to reference rules, environments, and configurations defined in plugins following the required naming convention.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins-deprecated.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n    // ...\n    \"plugins\": [\n        \"jquery\",   // eslint-plugin-jquery\n        \"@foo/foo\", // @foo/eslint-plugin-foo\n        \"@bar\"      // @bar/eslint-plugin\n    ],\n    \"extends\": [\n        \"plugin:@foo/foo/recommended\",\n        \"plugin:@bar/recommended\"\n    ],\n    \"rules\": {\n        \"jquery/a-rule\": \"error\",\n        \"@foo/foo/some-rule\": \"error\",\n        \"@bar/another-rule\": \"error\"\n    },\n    \"env\": {\n        \"jquery/jquery\": true,\n        \"@foo/foo/env-foo\": true,\n        \"@bar/env-bar\": true,\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variables in ESLint v6\nDESCRIPTION: This snippet illustrates the new validation for global variable configuration in ESLint v6. It shows both valid and invalid configurations for globals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// .eslintrc.js\nmodule.exports = {\n\tglobals: {\n\t\tfoo: \"readonly\",\n\t\tbar: \"writable\",\n\t\tbaz: \"hello!\", // Invalid in ESLint v6\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Console Usage with ESLint\nDESCRIPTION: Examples of code that violates the no-console rule\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-console.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-console: \"error\" */\n\nconsole.log(\"Log a debug level message.\");\nconsole.warn(\"Log a warn level message.\");\nconsole.error(\"Log an error level message.\");\nconsole.log = foo();\n```\n\n----------------------------------------\n\nTITLE: Declaring ESLint Peer Dependency in package.json\nDESCRIPTION: Shows how to declare ESLint as a peer dependency in the package.json file using the recommended version range syntax for future-proof compatibility.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"peerDependencies\": {\n\t\t\"eslint\": \">= 3\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variables in ESLint Configuration File\nDESCRIPTION: Example showing how to define global variables in an ESLint configuration file with different access levels. This sets var1 as writable and var2 as readonly.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tvar1: \"writable\",\n\t\t\t\tvar2: \"readonly\",\n\t\t\t},\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying Individual Elements of a Configuration Array in ESLint\nDESCRIPTION: This snippet illustrates an alternative approach to applying a configuration array by inserting each element individually. This is equivalent to inserting the array directly but provides more explicit control over the configuration order.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/combine-configs.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport exampleConfigs from \"eslint-config-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t// insert individual elements instead of an array\n\texampleConfigs[0],\n\texampleConfigs[1],\n\texampleConfigs[2],\n\n\t// your modifications\n\t{\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Summary Formatter in JavaScript\nDESCRIPTION: A basic ESLint formatter that reports only the total count of errors and warnings. It reduces the results array to compute totals and returns a simple string output.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (results, context) {\n\t// accumulate the errors and warnings\n\tvar summary = results.reduce(\n\t\tfunction (seq, current) {\n\t\t\tseq.errors += current.errorCount;\n\t\t\tseq.warnings += current.warningCount;\n\t\t\treturn seq;\n\t\t},\n\t\t{ errors: 0, warnings: 0 },\n\t);\n\n\tif (summary.errors > 0 || summary.warnings > 0) {\n\t\treturn (\n\t\t\t\"Errors: \" +\n\t\t\tsummary.errors +\n\t\t\t\", Warnings: \" +\n\t\t\tsummary.warnings +\n\t\t\t\"\\n\"\n\t\t);\n\t}\n\n\treturn \"\";\n};\n```\n\n----------------------------------------\n\nTITLE: Correct code examples for 'always' option\nDESCRIPTION: Examples of code that comply with the 'always' option, showing proper semicolon usage at the end of statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi: \"error\"*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n\nclass Foo {\n    bar = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a File is Ignored by ESLint Configuration in JavaScript\nDESCRIPTION: This snippet illustrates the use of the eslint.isPathIgnored() method to check if a given file is ignored by the ESLint configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst isPathIgnored = await eslint.isPathIgnored(filePath);\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript Loop Function Examples\nDESCRIPTION: These examples show various incorrect ways of creating functions within loops, which the 'no-loop-func' rule aims to prevent. They include unsafe references to outer scope variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-loop-func.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-loop-func: \"error\"*/\n\nvar i = 0;\nwhile(i < 5) {\n    var a = function() { return i; };\n    a();\n\n    i++;\n}\n\nvar i = 0;\ndo {\n    function a() { return i; };\n    a();\n\n    i++\n} while (i < 5);\n\nlet foo = 0;\nfor (let i = 0; i < 10; ++i) {\n    //Bad, `foo` is not in the loop-block's scope and `foo` is modified in/after the loop\n    setTimeout(() => console.log(foo));\n    foo += 1;\n}\n\nfor (let i = 0; i < 10; ++i) {\n    //Bad, `foo` is not in the loop-block's scope and `foo` is modified in/after the loop\n    setTimeout(() => console.log(foo));\n}\nfoo = 100;\n\nvar arr = [];\n\nfor (var i = 0; i < 5; i++) {\n    arr.push((f => f)(() => i));\n}\n\nfor (var i = 0; i < 5; i++) {\n    arr.push((() => {\n        return () => i;\n    })());\n}\n\nfor (var i = 0; i < 5; i++) {\n    (function fun () {\n        if (arr.includes(fun)) return i;\n        else arr.push(fun);\n    })();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Promise Usage Without Async Executors\nDESCRIPTION: Shows the proper way to handle Promises without using async executor functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-async-promise-executor.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-async-promise-executor: \"error\"*/\n\nconst foo = new Promise((resolve, reject) => {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst result = Promise.resolve(foo);\n```\n\n----------------------------------------\n\nTITLE: Accessing ESLint Rules After /lib Entrypoint Removal in JavaScript\nDESCRIPTION: This snippet demonstrates how to access ESLint rules after the removal of the /lib entrypoint in v8.0.0. The new method uses the /use-at-your-own-risk entrypoint to access built-in rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst rule = require(\"eslint/lib/rules/semi\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { builtinRules } = require(\"eslint/use-at-your-own-risk\");\nconst rule = builtinRules.get(\"semi\");\n```\n\n----------------------------------------\n\nTITLE: Examples of Code Flagged by object-shorthand Rule\nDESCRIPTION: Demonstrates code that would trigger warnings under the object-shorthand rule when set to 'error', showing both the non-compliant and the expected compliant forms.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: \"error\"*/\n\nconst foo = {\n    w: function() {},\n    x: function *() {},\n    [y]: function() {},\n    z: z\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: \"error\"*/\n\nconst foo = {\n    w() {},\n    *x() {},\n    [y]() {},\n    z\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Semicolons in JavaScript\nDESCRIPTION: This code snippet demonstrates examples of unnecessary semicolons that would trigger the no-extra-semi ESLint rule. It shows incorrect usage in variable declarations, function declarations, class fields, class methods, and static blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-semi.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;;\n\nfunction foo() {\n    // code\n};\n\nclass C {\n    field;;\n\n    method() {\n        // code\n    };\n\n    static {\n        // code\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Error Handling with Custom Parameter Name (JavaScript)\nDESCRIPTION: This example shows correct error handling with a custom error parameter name 'error', as specified in the ESLint rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/handle-callback-err.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint handle-callback-err: [\"error\", \"error\"]*/\n\nfunction loadData (error, data) {\n    if (error) {\n       console.log(error.stack);\n    }\n    doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Examples - Correct Implementation\nDESCRIPTION: Examples showing correct usage where getters and setters are properly grouped together in objects and classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/grouped-accessor-pairs.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint grouped-accessor-pairs: \"error\"*/\n\nconst foo = {\n    get a() {\n        return this.val;\n    },\n    set a(value) {\n        this.val = value;\n    },\n    b: 1\n};\n\nconst bar = {\n    set b(value) {\n        this.val = value;\n    },\n    get b() {\n        return this.val;\n    },\n    a: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Configurations in ESLint (JavaScript)\nDESCRIPTION: Illustrates how to use ESLint's predefined configurations for JavaScript. The example uses the 'js/recommended' configuration and modifies a rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport js from \"@eslint/js\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/recommended\"],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Exported Config in Flat Config File\nDESCRIPTION: Demonstrates how to use an exported plugin config in a flat config file. This example extends the 'recommended' config and overrides a rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t// use recommended config and provide your own overrides\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\textends: [\"example/recommended\"],\n\t\trules: {\n\t\t\t\"example/rule1\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for prefer-template Rule\nDESCRIPTION: These examples demonstrate code that would be flagged as incorrect by the prefer-template rule, showing string concatenation with variables and expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-template.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-template: \"error\"*/\n\nconst str = \"Hello, \" + name + \"!\";\nconst str1 = \"Time: \" + (12 * 60 * 60 * 1000);\n```\n\n----------------------------------------\n\nTITLE: Specifying Language from ESLint Plugin\nDESCRIPTION: This example demonstrates how to specify a language provided by an ESLint plugin. It configures the JSON language for JSON files using the @eslint/json plugin.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport json from \"@eslint/json\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.json\"],\n\t\tplugins: {\n\t\t\tjson,\n\t\t},\n\t\tlanguage: \"json/jsonc\",\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing ESLint Version and Default Configuration in JavaScript\nDESCRIPTION: These snippets demonstrate how to access the ESLint version string and default configuration using static properties of the ESLint class.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst version = ESLint.version;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultConfig = ESLint.defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Correct Patterns for Async Returns in JavaScript\nDESCRIPTION: Examples showing correct usage patterns for async functions, including direct returns, separated await statements, storing awaited values, and proper error handling with try/catch blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-return-await.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-return-await: \"error\"*/\n\nasync function foo1() {\n    return bar();\n}\n\nasync function foo2() {\n    await bar();\n    return;\n}\n\n// This is essentially the same as `return await bar();`, but the rule checks only `await` in `return` statements\nasync function foo3() {\n    const x = await bar();\n    return x;\n}\n\n// In this example the `await` is necessary to be able to catch errors thrown from `bar()`\nasync function foo4() {\n    try {\n        return await bar();\n    } catch (error) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Let Declaration in ECMAScript 2015\nDESCRIPTION: A correct example of using the 'let' keyword for variable declaration in ECMAScript 2015 (ES6). This snippet demonstrates the use of block-scoped variables introduced in ES6.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/good-examples.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nlet x;\n```\n\n----------------------------------------\n\nTITLE: Splitting Source Code into Lines in JavaScript\nDESCRIPTION: Demonstrates the usage of the static SourceCode.splitLines() function to split source code text into an array of lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst SourceCode = require(\"eslint\").SourceCode;\n\nconst code = \"var a = 1;\\nvar b = 2;\";\n\n// split code into an array\nconst codeLines = SourceCode.splitLines(code);\n\n/*\n    Value of codeLines will be\n    [\n        \"var a = 1;\",\n        \"var b = 2;\"\n    ]\n */\n```\n\n----------------------------------------\n\nTITLE: Flat Config with Multiple File Pattern Configurations\nDESCRIPTION: Example of a flat config configuration with multiple configurations for different file patterns. It extends the recommended configuration and applies different rules to source and test files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\n\nimport js from \"@eslint/js\";\n\nexport default [\n\tjs.configs.recommended, // Recommended config applied to all files\n\t// File-pattern specific overrides\n\t{\n\t\tfiles: [\"src/**/*\", \"test/**/*\"],\n\t\trules: {\n\t\t\tsemi: [\"warn\", \"always\"],\n\t\t},\n\t},\n\t{\n\t\tfiles: [\"test/**/*\"],\n\t\trules: {\n\t\t\t\"no-console\": \"off\",\n\t\t},\n\t},\n\t// ...other configurations\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Directory and Files using Shell Commands\nDESCRIPTION: Shell commands to set up a new project for the custom ESLint rule, including creating directories and initializing an npm project.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkdir eslint-custom-rule-example # create directory\ncd eslint-custom-rule-example # enter the directory\nnpm init -y # init new npm project\ntouch enforce-foo-bar.js # create file enforce-foo-bar.js\n```\n\n----------------------------------------\n\nTITLE: Advanced Rule Configuration with Options in ESLint\nDESCRIPTION: Demonstrates rule configuration with both severity level and additional options for the semi rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\trules: {\n\t\t\tsemi: [\"error\", \"never\"],\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples for the no-unneeded-ternary rule in JavaScript\nDESCRIPTION: Examples of code that would trigger the ESLint no-unneeded-ternary rule, showing unnecessary ternary operators that could be simplified.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unneeded-ternary.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unneeded-ternary: \"error\"*/\n\nconst a = x === 2 ? true : false;\n\nconst b = x ? true : false;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of 'this' and 'super' in Class Constructors (JavaScript)\nDESCRIPTION: Examples of correct code that comply with the 'no-this-before-super' rule. These snippets show proper usage of 'this' and 'super' in various scenarios, including non-derived classes, derived classes with correct 'super()' calls, and usage outside of constructors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-this-before-super.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-this-before-super: \"error\"*/\n\nclass A1 {\n    constructor() {\n        this.a = 0; // OK, this class doesn't have an `extends` clause.\n    }\n}\n\nclass A2 extends B {\n    constructor() {\n        super();\n        this.a = 0; // OK, this is after `super()`.\n    }\n}\n\nclass A3 extends B {\n    foo() {\n        this.a = 0; // OK. this is not in a constructor.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples for no-self-assign Rule in JavaScript\nDESCRIPTION: Examples of code that would pass the no-self-assign rule, including different variable assignments, default values in destructuring, property assignments, and bitwise operations that have an effect on non-integers.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-self-assign.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-self-assign: \"error\"*/\n\nfoo = bar;\n[a, b] = [b, a];\n\n// This pattern is warned by the `no-use-before-define` rule.\nlet foo = foo;\n\n// The default values have an effect.\n[foo = 1] = [foo];\n\n// non-self-assignments with properties.\nobj.a = obj.b;\nobj.a.b = obj.c.b;\nobj.a.b = obj.a.c;\nobj[a] = obj[\"a\"];\n\n// This ignores if there is a function call.\nobj.a().b = obj.a().b;\na().b = a().b;\n\n// `&=` and `|=` have an effect on non-integers.\nfoo &= foo;\nfoo |= foo;\n\n// Known limitation: this does not support computed properties except single literal or single identifier.\nobj[a + b] = obj[a + b];\nobj[\"a\" + \"b\"] = obj[\"a\" + \"b\"];\n```\n\n----------------------------------------\n\nTITLE: Specifying Global Variables in JavaScript File Using Comments\nDESCRIPTION: Example of how to specify global variables directly in a JavaScript file using comment syntax. The first example defines read-only globals, while the second example defines writable globals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* global var1, var2 */\n```\n\n----------------------------------------\n\nTITLE: Exporting Default ESLint Config in JavaScript\nDESCRIPTION: Shows how to export a default ESLint configuration by requiring another configuration file within the package. This allows for flexible configuration organization.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require(\"./lib/ci.js\");\n```\n\n----------------------------------------\n\nTITLE: Basic eslintrc Configuration\nDESCRIPTION: Example of a basic eslintrc configuration that applies rules to all files in its directory and subdirectories.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// .eslintrc.js\n\nmodule.exports = {\n\t// ...other config\n\trules: {\n\t\tsemi: [\"warn\", \"always\"],\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Ignoring Directory Contents Except Specific Files in ESLint\nDESCRIPTION: This example demonstrates how to ignore all contents of a directory except for specific files. It ignores everything in the build directory except for build/test.js.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([\n\tglobalIgnores([\n\t\t\"build/**/*\", // ignore all contents in and under `build/` directory but not the `build/` directory itself\n\t\t\"!build/test.js\", // unignore `!build/test.js`\n\t]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Arithmetic Operations with Optional Chaining in JavaScript\nDESCRIPTION: Examples of arithmetic operations with optional chaining that would be flagged when the disallowArithmeticOperators option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-optional-chaining.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-optional-chaining: [\"error\", { \"disallowArithmeticOperators\": true }]*/\n\n+obj?.foo;\n-obj?.foo;\n\nobj?.foo + bar;\nobj?.foo - bar;\nobj?.foo / bar;\nobj?.foo * bar;\nobj?.foo % bar;\nobj?.foo ** bar;\n\nbaz += obj?.foo;\nbaz -= obj?.foo;\nbaz /= obj?.foo;\nbaz *= obj?.foo;\nbaz %= obj?.foo;\nbaz **= obj?.foo;\n\nasync function foo () {\n  +await obj?.foo;\n  await obj?.foo + bar;\n  baz += await obj?.foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of the no-import-assign ESLint Rule in JavaScript\nDESCRIPTION: Examples showing code that complies with the no-import-assign rule by only modifying properties of imported objects rather than reassigning the bindings themselves. Also includes examples of known limitations of the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-import-assign.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-import-assign: \"error\"*/\n\nimport mod, { named } from \"./mod.mjs\"\nimport * as mod_ns from \"./mod.mjs\"\n\nmod.prop = 1\nnamed.prop = 2\nmod_ns.named.prop = 3\n\n// Known Limitation\nfunction test(obj) {\n    obj.named = 4 // Not errored because 'obj' is not namespace objects.\n}\ntest(mod_ns) // Not errored because it doesn't know that 'test' updates the member of the argument.\n```\n\n----------------------------------------\n\nTITLE: Configuring no-constructor-return and no-sequences Rules in ESLint\nDESCRIPTION: Example of how to correctly configure the 'no-constructor-return' and 'no-sequences' rules in ESLint v9.0.0, which now have stricter schemas.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"no-constructor-return\": [\"error\"],\n\t\t\"no-sequences\": [\"error\", { \"allowInParentheses\": false }]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Good ESLint Commit Messages\nDESCRIPTION: Examples of properly formatted commit message summaries for ESLint contributions, showing different tags and concise descriptions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nbuild: Update Travis to only test Node 0.10\nfix: Semi rule incorrectly flagging extra semicolon\nchore: Upgrade Esprima to 1.2, switch to using comment attachment\n```\n\n----------------------------------------\n\nTITLE: Testing ESLint Rules with New RuleTester\nDESCRIPTION: Example showing the new recommended way of testing ESLint rules using the RuleTester class from the eslint package. This approach simplifies testing and eliminates circular dependencies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-1.0.0.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar rule = require(\"../../../lib/rules/your-rule\"),\n\tRuleTester = require(\"eslint\").RuleTester;\n\nvar ruleTester = new RuleTester();\nruleTester.run(\"your-rule\", rule, {\n\tvalid: [],\n\tinvalid: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling New Rules in eslint:recommended Config with JSON\nDESCRIPTION: A JSON configuration that extends eslint:recommended but disables the newly added rules to mimic ESLint 4.x behavior.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-5.0.0.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\",\n\n\t\"rules\": {\n\t\t\"for-direction\": \"off\",\n\t\t\"getter-return\": \"off\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Default Callback Usage\nDESCRIPTION: Shows incorrect callback implementation without return statements, which could lead to multiple callback invocations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/callback-return.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        callback(err);\n    }\n    callback();\n}\n```\n\n----------------------------------------\n\nTITLE: Updated RuleTester Configuration for ESLint v2.0.0\nDESCRIPTION: Example of updating RuleTester test cases to use the new parserOptions property instead of ecmaFeatures for specifying ES6 support in rule tests.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar ruleTester = new RuleTester();\nruleTester.run(\"no-var\", rule, {\n\tvalid: [\n\t\t{\n\t\t\tcode: \"let x;\",\n\t\t\tparserOptions: { ecmaVersion: 6 },\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ESLint Configuration with CommonJS\nDESCRIPTION: Example of an ESLint configuration file using CommonJS syntax. It defines a configuration array with one object that enables two rules: 'semi' and 'prefer-const'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nconst { defineConfig } = require(\"eslint/config\");\n\nmodule.exports = defineConfig([\n\t{\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t\t\"prefer-const\": \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Writable Global Variables Using Comments in JavaScript\nDESCRIPTION: Example showing how to define global variables with writable flag in JavaScript using comment syntax. This allows the variables to be modified within the code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* global var1:writable, var2:writable */\n```\n\n----------------------------------------\n\nTITLE: Valid Use Case: Dependent Loop Iterations (JavaScript)\nDESCRIPTION: This snippet shows a scenario where using await in a loop is valid, as each iteration depends on the result of the previous one.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function loopIterationsDependOnEachOther() {\n    let previousResult = null;\n    for (let i = 0; i < 10; i++) {\n        const result = await doSomething(i, previousResult);\n        if (someCondition(result, previousResult)) {\n            break;\n        } else {\n            previousResult = result;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex-Based Import Restrictions\nDESCRIPTION: Configuration that uses regular expressions to restrict imports, which provides more flexibility than gitignore-style patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"regex\": \"import1/private/\",\n      \"message\": \"usage of import1 private modules not allowed.\"\n    }, {\n      \"regex\": \"import2/(?!good)\",\n      \"message\": \"import2 is deprecated, except the modules in import2/good.\"\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint 'indent' Rule for 2-Space Indentation\nDESCRIPTION: JSON configuration example for setting the 'indent' rule to enforce 2-space indentation in ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"indent\": [\"error\", 2]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tests for Custom ESLint Rule\nDESCRIPTION: Complete test implementation using ESLint's RuleTester to verify both valid and invalid cases for the custom rule, including autofix behavior.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// enforce-foo-bar.test.js\nconst { RuleTester } = require(\"eslint\");\nconst fooBarRule = require(\"./enforce-foo-bar\");\n\nconst ruleTester = new RuleTester({\n\t// Must use at least ecmaVersion 2015 because\n\t// that's when `const` variables were introduced.\n\tlanguageOptions: { ecmaVersion: 2015 },\n});\n\n// Throws error if the tests in ruleTester.run() do not pass\nruleTester.run(\n\t\"enforce-foo-bar\", // rule name\n\tfooBarRule, // rule code\n\t{\n\t\t// checks\n\t\t// 'valid' checks cases that should pass\n\t\tvalid: [\n\t\t\t{\n\t\t\t\tcode: \"const foo = 'bar';\",\n\t\t\t},\n\t\t],\n\t\t// 'invalid' checks cases that should not pass\n\t\tinvalid: [\n\t\t\t{\n\t\t\t\tcode: \"const foo = 'baz';\",\n\t\t\t\toutput: 'const foo = \"bar\";',\n\t\t\t\terrors: 1,\n\t\t\t},\n\t\t],\n\t},\n);\n\nconsole.log(\"All tests passed!\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of 1tbs Brace Style in JavaScript\nDESCRIPTION: Examples of incorrect code for the ESLint brace-style rule with the default '1tbs' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/brace-style.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint brace-style: \"error\"*/\n\nfunction foo()\n{\n  return true;\n}\n\nif (foo)\n{\n  bar();\n}\n\ntry\n{\n  somethingRisky();\n} catch(e)\n{\n  handleError();\n}\n\nif (foo) {\n  bar();\n}\nelse {\n  baz();\n}\n\nclass C\n{\n    static\n    {\n        foo();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for no-use-before-define Rule in JSON\nDESCRIPTION: This snippet shows the configuration options for the no-use-before-define rule, including flags for functions, classes, variables, and named exports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"no-use-before-define\": [\"error\", {\n        \"functions\": true,\n        \"classes\": true,\n        \"variables\": true,\n        \"allowNamedExports\": false\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Guarded for...in Loop Using Shorthand hasOwnProperty.call in JavaScript\nDESCRIPTION: Another correct example using a shorthand version of hasOwnProperty.call to filter properties in a for...in loop.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/guard-for-in.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfor (key in foo) {\n    if ({}.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Error Handling: Sequential Awaiting (JavaScript)\nDESCRIPTION: This snippet illustrates the risk of unhandled promise rejections when awaiting promises sequentially in a loop, which can lead to program termination in certain environments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function foo() {\n    const arrayOfPromises = somethingThatCreatesAnArrayOfPromises();\n    for (const promise of arrayOfPromises) {\n        // Bad: if any of the promises reject, an exception is thrown, and\n        // subsequent loop iterations will not run. Therefore, rejections later\n        // in the array will become unhandled rejections that cannot be caught\n        // by a caller.\n        const value = await promise;\n        console.log(value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Use Case: Rate Limiting (JavaScript)\nDESCRIPTION: This snippet shows a valid use of await in a loop to implement rate limiting for API requests, preventing excessive parallel requests.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function makeUpdatesToRateLimitedApi(thingsToUpdate) {\n    // we'll exceed our rate limit if we make all the network calls in parallel.\n    for (const thing of thingsToUpdate) {\n        await updateThingWithRateLimitedApi(thing);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rules\nDESCRIPTION: Example showing how to configure specific ESLint rules with custom error levels. This demonstrates setting 'no-unused-vars' and 'no-undef' rules to 'warn' level.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/getting-started.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\nimport js from \"@eslint/js\";\n\nexport default defineConfig([\n\t{ files: [\"**/*.js\"], plugins: { js }, extends: [\"js/recommended\"] },\n\n\t{\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t\t\"no-undef\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct ESLint Usage Example in JavaScript\nDESCRIPTION: Demonstrates the proper way to use ESLint programmatically in JavaScript. The example shows a complete workflow including creating an ESLint instance with the fix option, linting files, applying fixes, formatting results, and handling errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/code-blocks.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { ESLint } = require(\"eslint\");\n\n(async function main() {\n\t// 1. Create an instance with the `fix` option.\n\tconst eslint = new ESLint({ fix: true });\n\n\t// 2. Lint files. This doesn't modify target files.\n\tconst results = await eslint.lintFiles([\"lib/**/*.js\"]);\n\n\t// 3. Modify the files with the fixed code.\n\tawait ESLint.outputFixes(results);\n\n\t// 4. Format the results.\n\tconst formatter = await eslint.loadFormatter(\"stylish\");\n\tconst resultText = formatter.format(results);\n\n\t// 5. Output it.\n\tconsole.log(resultText);\n})().catch(error => {\n\tprocess.exitCode = 1;\n\tconsole.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with Negation Patterns\nDESCRIPTION: Example of an ESLint configuration that excludes '.config.js' files but includes 'eslint.config.js'. It demonstrates the use of negation patterns in the 'ignores' property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"src/**/*.js\"],\n\t\tignores: [\"**/*.config.js\", \"!**/eslint.config.js\"],\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration Using Plugin Extension\nDESCRIPTION: Example of an ESLint configuration file that extends from a plugin configuration. This demonstrates how ESLint attempts to load the plugin from node_modules, which can cause the plugin not found error if the package doesn't exist.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/troubleshooting/couldnt-find-the-plugin.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\textends: [\"plugin:eslint-plugin-yours/config-name\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect ESLint Consistent Return Examples\nDESCRIPTION: Multiple examples of code that violates the consistent-return rule by mixing explicit returns with implicit undefined returns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-return.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomethingElse(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flat Config ESLint Configuration with Language Options\nDESCRIPTION: Modern flat config format showing equivalent language options configuration using the globals package and consolidated languageOptions property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport globals from \"globals\";\n\nexport default [\n\t{\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 2022,\n\t\t\tsourceType: \"module\",\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t\t...globals.node,\n\t\t\t\tmyCustomGlobal: \"readonly\",\n\t\t\t},\n\t\t},\n\t\t// ...other config\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags for VS Code Lint Tasks\nDESCRIPTION: Demonstrates how to enable ESLint feature flags for VS Code lint tasks through the eslint.lintTask.options setting. This configuration applies when running ESLint as a task in VS Code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/pages/flags.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"eslint.lintTask.options\": \"--flag flag_one --flag flag_two .\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Function Creation in JavaScript Loops Using let\nDESCRIPTION: This snippet demonstrates the correct way to create functions within a loop using 'let' to declare the loop variable, ensuring each function returns the expected value.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-loop-func.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Declaration Placement in JavaScript\nDESCRIPTION: Shows proper and improper placement of variable declarations. While block bindings (let, const) can be placed in nested blocks without issue, var declarations should be moved to the root of the program or function to avoid hoisting issues.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\nvar foo = 42;\n\n// Good\nif (foo) {\n    let bar1;\n}\n\n// Bad\nwhile (test) {\n    var bar2;\n}\n\nfunction doSomething() {\n    // Good\n    var baz = true;\n\n    // Bad\n    if (baz) {\n        var quux;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Specific ESLint Rules\nDESCRIPTION: Example showing how to suppress violations for specific rules using --suppress-rule flag.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n\"src/**/*.js\" --suppress-rule no-console --suppress-rule indent\n```\n\n----------------------------------------\n\nTITLE: Example JavaScript with Valid Assignment (After Fix)\nDESCRIPTION: Sample JavaScript code after the custom rule's autofix has been applied, showing the correct assignment of 'bar' to const foo.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// foo.js\n\nconst foo = \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Global Objects in JavaScript\nDESCRIPTION: Examples of correct code that comply with the no-obj-calls rule by using Math, JSON, Reflect, Atomics, and Intl objects properly as intended in the ECMAScript specification.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-obj-calls.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-obj-calls: \"error\"*/\n\nfunction area(r) {\n    return Math.PI * r * r;\n}\n\nconst object = JSON.parse(\"{}\");\n\nconst value = Reflect.get({ x: 1, y: 2 }, \"x\");\n\nconst first = Atomics.load(foo, 0);\n\nconst segmenterFr = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\n```\n\n----------------------------------------\n\nTITLE: Detecting Unreachable Code After Return Statement in JavaScript\nDESCRIPTION: Example of unreachable code after a return statement, which is flagged by the no-unreachable rule. The code after the return statement will never be executed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fn() {\n    x = 1;\n    return x;\n    x = 3; // this will never execute\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of arrow functions with 'always' option (JavaScript)\nDESCRIPTION: Shows correct usage of arrow functions when the 'arrow-body-style' rule is set to 'always'. All function bodies are wrapped in braces with explicit returns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/*eslint arrow-body-style: [\"error\", \"always\"]*/\n\nconst foo = () => {\n    return 0;\n};\n\nconst bar = (retv, name) => {\n    retv[name] = true;\n    return retv;\n};\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Configs in JavaScript\nDESCRIPTION: Illustrates how to create an ESLint configuration that extends another configuration within the same package. This example extends a 'defaults' configuration and adds a new rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\trules: {\n\t\t\"no-alert\": 2,\n\t},\n\textends: \"myconfig/lib/defaults\",\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ESLint Plugin to Bundle the Custom Rule\nDESCRIPTION: Plugin implementation that exports an object with a rules property containing the custom rule, allowing it to be distributed and shared across projects.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint-plugin-example.js\n\nconst fooBarRule = require(\"./enforce-foo-bar\");\nconst plugin = { rules: { \"enforce-foo-bar\": fooBarRule } };\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Disabling All Rules for an Entire File\nDESCRIPTION: Shows how to disable all ESLint rules for an entire file by placing a disable comment at the top of the file. This should be used sparingly and with good reason.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable */\n\nalert(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Without Non-octal Decimal Escapes in JavaScript\nDESCRIPTION: Examples of correct code that avoids using \\8 and \\9 escape sequences, using proper alternatives instead.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-nonoctal-decimal-escape.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-nonoctal-decimal-escape: \"error\"*/\n\n\"8\";\n\n\"9\";\n\nconst foo = \"w8less\";\n\nconst bar = \"December 19\";\n\nconst baz = \"Don't use \\\\8 and \\\\9 escapes.\";\n\nconst quux = \"\\0\\u0038\";\n```\n\n----------------------------------------\n\nTITLE: ESLint SourceCode Retrieval\nDESCRIPTION: Demonstrates how to access the SourceCode object used in the last linting operation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verify(\n\t\"var foo = bar;\",\n\t{\n\t\trules: {\n\t\t\tsemi: 2,\n\t\t},\n\t},\n\t{ filename: \"foo.js\" }\n);\n\nconst code = linter.getSourceCode();\n\nconsole.log(code.text);\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Rules in a Block of Code\nDESCRIPTION: Shows how to disable specific ESLint rules for a section of code using block comments. This allows more granular control over which rules are bypassed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable no-alert, no-console */\n\nalert(\"foo\");\nconsole.log(\"bar\");\n\n/* eslint-enable no-alert, no-console */\n```\n\n----------------------------------------\n\nTITLE: Basic eval() Usage Example\nDESCRIPTION: Demonstrates a basic example of eval() usage that should be avoided\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eval.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);\n```\n\n----------------------------------------\n\nTITLE: Pruning Unused Suppressions\nDESCRIPTION: Example demonstrating how to remove unused suppressions from the suppressions file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n\"src/**/*.js\" --prune-suppressions\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage examples of shadowing restricted names in module context\nDESCRIPTION: Demonstrates incorrect shadowing of restricted names in ES modules through imports and class definitions, which violates the no-shadow-restricted-names rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow-restricted-names.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-shadow-restricted-names: \"error\"*/\n\nimport NaN from \"foo\";\n\nimport { undefined } from \"bar\";\n\nclass Infinity {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unnecessary Boolean Casts in JavaScript\nDESCRIPTION: Examples of equivalent if statements showing unnecessary boolean casts using double negation and Boolean function calls.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-boolean-cast.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (!!foo) {\n    // ...\n}\n\nif (Boolean(foo)) {\n    // ...\n}\n\nif (foo) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Usage of bind() Method in JavaScript\nDESCRIPTION: Example of correctly using bind() to set the value of 'this' in a function. The function uses 'this.name' in its body, making the bind() call necessary and functional.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-bind.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst boundGetName = (function getName() {\n    return this.name;\n}).bind({ name: \"ESLint\" });\n\nconsole.log(boundGetName());      // \"ESLint\"\n```\n\n----------------------------------------\n\nTITLE: ignoreOverrideMethods Option - Correct Example (True)\nDESCRIPTION: TypeScript example showing methods with 'override' modifier that don't use 'this', which is allowed when ignoreOverrideMethods is true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"ignoreOverrideMethods\": true }] */\n\nabstract class Base {\n    abstract method(): void;\n    abstract property: () => void;\n}\n\nclass Derived extends Base {\n    override method() {}\n    override property = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples for no-multi-assign Rule in JavaScript\nDESCRIPTION: These examples show code that complies with the 'no-multi-assign' rule. They demonstrate proper ways to assign values to multiple variables without chaining assignments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-assign.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-assign: \"error\"*/\n\nlet a = 5;\nlet b = 5;\nconst c = 5;\n\nconst foo = \"baz\";\nconst bar = \"baz\";\n\nlet d = c;\nlet e = c;\n\nclass Foo {\n    a = 10;\n    b = 10;\n}\n\na = \"quux\";\nb = \"quux\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct and Incorrect Default Parameter Usage in JavaScript\nDESCRIPTION: This snippet shows the correct way to use default parameters (at the end of the parameter list) and an incorrect way (in the middle of the parameter list). It explains how optional arguments can be omitted when default parameters are last.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-param-last.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Correct: optional argument can be omitted\nfunction createUser(id, isAdmin = false) {}\ncreateUser(\"tabby\")\n\n// Incorrect: optional argument can **not** be omitted\nfunction createUser(isAdmin = false, id) {}\ncreateUser(undefined, \"tabby\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unnecessary String Concatenation in JavaScript\nDESCRIPTION: Example of code that triggers the no-useless-concat rule. This shows concatenation of string literals that could be written as a single literal.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-concat.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = \"a\" + \"b\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating IIFE Expression vs Declaration in JavaScript\nDESCRIPTION: Shows the difference between function expressions (which can be invoked immediately) and function declarations (which cannot be invoked immediately).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-iife.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError\n```\n\n----------------------------------------\n\nTITLE: Using a Published Custom Parser in Modern ESLint Configuration\nDESCRIPTION: Example of configuring ESLint to use a published custom parser package in the modern flat config format. This demonstrates how to use a parser after installing it as a dependency.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\n\nconst myparser = require(\"eslint-parser-myparser\");\n\nmodule.exports = [\n\t{\n\t\tlanguageOptions: {\n\t\t\tparser: myparser,\n\t\t},\n\t\t// ... rest of configuration\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Constructor with 'new' Keyword in JavaScript\nDESCRIPTION: Demonstrates the typical and correct way of using the 'new' keyword with a constructor to create an object and store it in a variable.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst person = new Person();\n```\n\n----------------------------------------\n\nTITLE: Using Fix Dry Run in ESLint CLI\nDESCRIPTION: The --fix-dry-run flag applies fixes without saving to the file system. Requires a different formatter (like json) to view the fixes. Useful for stdin input or editor integrations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n--stdin --fix-dry-run --format json\n```\n\n----------------------------------------\n\nTITLE: Configuring array-element-newline Rule with Different Options in ESLint\nDESCRIPTION: Example of configuring the array-element-newline rule with separate settings for array expressions and array patterns in an ESLint configuration file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"array-element-newline\": [\"error\", {\n        \"ArrayExpression\": \"consistent\",\n        \"ArrayPattern\": { \"minItems\": 3 },\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Rest Parameters in JavaScript\nDESCRIPTION: Examples showing correct usage of ES2015 rest parameters instead of the arguments object. These patterns pass the prefer-rest-params rule check.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-rest-params.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-rest-params: \"error\"*/\n\nfunction foo(...args) {\n    console.log(args);\n}\n\nfunction foo(action, ...args) {\n    action.apply(null, args); // or `action(...args)`, related to the `prefer-spread` rule.\n}\n\n// Note: the implicit arguments can be overwritten.\nfunction foo(arguments) {\n    console.log(arguments); // This is the first argument.\n}\nfunction foo() {\n    const arguments = 0;\n    console.log(arguments); // This is a local variable.\n}\n```\n\n----------------------------------------\n\nTITLE: Using exceptMethods Option - Correct Example\nDESCRIPTION: Shows how to exempt specific methods from the rule using the 'exceptMethods' option. The methods 'foo' and '#bar' are allowed to not use 'this'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"foo\", \"#bar\"] }] */\n\nclass A {\n    foo() {\n    }\n    #bar() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Main Integration Function\nDESCRIPTION: Main function that combines all components and exports the integration functionality.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function lintFiles(filePaths) {\n\tconst overrideConfig = {\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 2018,\n\t\t\tsourceType: \"commonjs\",\n\t\t},\n\t\trules: {\n\t\t\t\"no-console\": \"error\",\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t};\n\n\tconst eslint = createESLintInstance(overrideConfig);\n\tconst results = await lintAndFix(eslint, filePaths);\n\treturn outputLintingResults(results);\n}\n\nmodule.exports = { lintFiles };\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Using const in for...of Loop in JavaScript\nDESCRIPTION: This example illustrates correct usage of const in a for...of loop, where 'a' is re-defined (not modified) on each loop iteration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-const-assign.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-const-assign: \"error\"*/\n\nfor (const a of [1, 2, 3]) { // `a` is re-defined (not modified) on each loop step.\n    console.log(a);\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Instance Configuration\nDESCRIPTION: JavaScript code to import and configure an ESLint instance with custom options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ESLint } = require(\"eslint\");\n\n// Create an instance of ESLint with the configuration passed to the function\nfunction createESLintInstance(overrideConfig) {\n\treturn new ESLint({\n\t\toverrideConfigFile: true,\n\t\toverrideConfig,\n\t\tfix: true,\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Path Construction Using path.resolve()\nDESCRIPTION: Example of using Node.js path.resolve() method to create fully-qualified file paths, handling platform-specific separators correctly.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-path-concat.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar fullPath = path.resolve(__dirname, \"foo.js\");\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Global Collections in ESLint Configuration\nDESCRIPTION: Example demonstrating how to include multiple collections of globals in the same configuration. This combines both browser and Jest globals for projects using both environments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport globals from \"globals\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t\t...globals.jest,\n\t\t\t},\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Using a Shareable Config in ESLint Configuration\nDESCRIPTION: JavaScript example showing how to import and use a shareable configuration in an eslint.config.js file using the extends property to apply the imported config.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport myconfig from \"eslint-config-myconfig\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\textends: [myconfig],\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct usages with default 'always' option\nDESCRIPTION: Examples of code that would be considered correct when using the default 'always' option, demonstrating proper use of parseInt() with valid radix parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/radix.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint radix: \"error\"*/\n\nconst num = parseInt(\"071\", 10);\n\nconst num1 = parseInt(\"071\", 8);\n\nconst num2 = parseFloat(someValue);\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rules in JavaScript\nDESCRIPTION: Example of an eslint.config.js file that enables the prefer-const rule at the error severity level. This demonstrates how to export a config array containing a config object with rule settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/glossary.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default [\n\t{\n\t\trules: {\n\t\t\t\"prefer-const\": \"error\",\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating correct variable usage without redeclaration in JavaScript\nDESCRIPTION: This example shows JavaScript code that complies with the no-redeclare rule by reassigning values to variables instead of redeclaring them with 'var'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-redeclare.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-redeclare: \"error\"*/\n\nvar a = 3;\na = 10;\n\nclass C {\n    foo() {\n        var b = 3;\n        b = 10;\n    }\n\n    static {\n        var c = 3;\n        c = 10;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Operator Precedence Issue in JavaScript\nDESCRIPTION: Shows how operator precedence with the nullish coalescing operator can lead to unexpected behavior when combined with addition.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-binary-expression.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// One might think this would evaluate as `a + (b ?? c)`:\nconst x = a + b ?? c;\n\n// But it actually evaluates as `(a + b) ?? c`. Since `a + b` can never be null,\n// the `?? c` has no effect.\n```\n\n----------------------------------------\n\nTITLE: Valid Use Case: Retry Mechanism (JavaScript)\nDESCRIPTION: This snippet demonstrates a valid use of await in a loop for implementing a retry mechanism for asynchronous operations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function retryUpTo10Times() {\n    for (let i = 0; i < 10; i++) {\n        const wasSuccessful = await tryToDoSomething();\n        if (wasSuccessful)\n            return 'succeeded!';\n        // wait to try again.\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    return 'failed!';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in Suggestion Messages for ESLint Rules\nDESCRIPTION: This snippet illustrates how to use placeholders in suggestion messages for ESLint rules. It shows how to provide data for both the main message and suggestion messages separately.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    meta: {\n        messages: {\n            unnecessaryEscape: \"Unnecessary escape character: \\\\{{character}}.\",\n            removeEscape: \"Remove `\\\\` before {{character}}.\",\n        },\n        hasSuggestions: true\n    },\n    create: function(context) {\n        // ...\n        context.report({\n            node: node,\n            messageId: \"unnecessaryEscape\",\n            data: { character }, // data for the unnecessaryEscape overall message\n            suggest: [\n                {\n                    messageId: \"removeEscape\",\n                    data: { character }, // data for the removeEscape suggestion message\n                    fix: function(fixer) {\n                        return fixer.removeRange(range);\n                    }\n                }\n            ]\n        });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Additional ESLint Config in JavaScript\nDESCRIPTION: Shows how to create and export an additional shareable ESLint configuration within the same npm package, allowing for multiple configurations to be shared.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// my-special-config.js\nmodule.exports = {\n\trules: {\n\t\tquotes: [2, \"double\"],\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Language in ESLint Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure and use a custom language from a plugin in an ESLint configuration file. It demonstrates importing the plugin, including it in the 'plugins' key with a namespace, and referencing the language in the 'language' configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/languages.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.my\"],\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\tlanguage: \"example/my\",\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Arrow Functions Exception in object-shorthand Rule\nDESCRIPTION: Shows that arrow functions inside object literals are not flagged by the object-shorthand rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: \"error\"*/\n\nconst foo = {\n    x: (y) => y\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Lexical Declarations in Switch Statements (JavaScript)\nDESCRIPTION: This code snippet shows examples of lexical declarations (let, const, function, and class) incorrectly used within case clauses of a switch statement. These declarations are visible throughout the entire switch block but only initialized when reached, which can lead to unexpected behavior.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-case-declarations.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-case-declarations: \"error\"*/\n\nswitch (foo) {\n    case 1:\n        let x = 1;\n        break;\n    case 2:\n        const y = 2;\n        break;\n    case 3:\n        function f() {}\n        break;\n    default:\n        class C {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Always Option\nDESCRIPTION: Examples of code that complies with the eqeqeq rule when configured with the \"always\" option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/eqeqeq.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Statement Fallthrough Example\nDESCRIPTION: Demonstrates unintended fallthrough behavior in switch statements without break statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nswitch(foo) {\n    case 1:\n        doSomething();\n\n    case 2:\n        doSomethingElse();\n}\n```\n\n----------------------------------------\n\nTITLE: Example Test Code for ESLint Rule\nDESCRIPTION: JavaScript code demonstrating correct and incorrect usage of the custom ESLint rule for testing purposes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// example.js\n\nfunction correctFooBar() {\n\tconst foo = \"bar\";\n}\n\nfunction incorrectFoo() {\n\tconst foo = \"baz\"; // Problem!\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'requireForBlockBody' Option (JavaScript)\nDESCRIPTION: Examples of correct code for the 'arrow-parens' rule with the 'requireForBlockBody' option, demonstrating proper use of parentheses for block bodies and concise arrow functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-parens: [2, \"as-needed\", { \"requireForBlockBody\": true }]*/\n\n(a) => {};\n(a) => {'\\n'};\na => ({});\n() => {};\na => a;\na.then((foo) => {});\na.then((foo) => { if (true) {} });\na((foo) => { if (true) {} });\n(a, b, c) => a;\n(a = 10) => a;\n([a, b]) => a;\n({a, b}) => a;\n```\n\n----------------------------------------\n\nTITLE: Preventing Accidental Comparisons in Arrow Functions (JavaScript)\nDESCRIPTION: This example illustrates how the 'arrow-parens' rule can help prevent accidental use of arrow functions in conditions where comparisons were intended.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nif (a => 2) {\n}\n\n// Good\nif (a >= 2) {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local ESLint Plugin\nDESCRIPTION: This example shows how to load and configure a local ESLint plugin directly from a file in the project, without publishing it to npm.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport local from \"./my-local-plugin.js\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tplugins: {\n\t\t\tlocal,\n\t\t},\n\t\trules: {\n\t\t\t\"local/rule1\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct Function-Level Strict Mode Implementation\nDESCRIPTION: Example of correct code when using the 'function' option. Each top-level function has its own strict mode directive, and functions with non-simple parameters are properly wrapped.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"function\"]*/\n\nfunction foo() {\n    \"use strict\";\n}\n\n(function() {\n    \"use strict\";\n\n    function bar() {\n    }\n\n    function baz(a = 1) {\n    }\n}());\n\nconst foo2 = (function() {\n    \"use strict\";\n\n    return function foo(a = 1) {\n    };\n}());\n```\n\n----------------------------------------\n\nTITLE: Correct Alternatives to __proto__ in JavaScript\nDESCRIPTION: Examples of code that comply with the no-proto rule by using Object.getPrototypeOf() and Object.setPrototypeOf() instead of __proto__. Also shows a valid use of __proto__ in an object literal.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-proto.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-proto: \"error\"*/\n\nconst a = Object.getPrototypeOf(obj);\n\nObject.setPrototypeOf(obj, b);\n\nconst c = { __proto__: a };\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable and Function Declarations - JavaScript\nDESCRIPTION: Examples of incorrect code that creates implicit global variables through var and function declarations at the top-level script scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-globals.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-globals: \"error\"*/\n\nvar foo = 1;\n\nfunction bar() {}\n```\n\n----------------------------------------\n\nTITLE: Initializing Code Path Analysis Objects in JavaScript\nDESCRIPTION: Defines the CodePath and CodePathSegment objects used for code path analysis in ESLint. CodePath represents a complete code path, while CodePathSegment represents a part of a code path.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/code-path-analysis.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (a && b) {\n\tfoo();\n}\nbar();\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with allowVoid Option in JavaScript\nDESCRIPTION: These examples demonstrate correct usage when both 'checkForEach' and 'allowVoid' options are set to true, allowing void returns in forEach callbacks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-callback-return.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-callback-return: [\"error\", { checkForEach: true, allowVoid: true }]*/\n\nmyArray.forEach(item => void handleItem(item));\n\nmyArray.forEach(item => {\n    return void handleItem(item);\n});\n\nmyArray.forEach(item => {\n    if (item < 0) {\n        return void x;\n    }\n    handleItem(item);\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating no-useless-computed-key rule change in JavaScript\nDESCRIPTION: This snippet shows how the no-useless-computed-key rule now flags unnecessary computed member names in classes by default in ESLint v9.0.0. The code that was previously allowed in v8 now produces an error in v9.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-computed-key: \"error\"*/\n\nclass SomeClass {\n\t[\"someMethod\"]() {} // ok in ESLint v8, error in ESLint v9.\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Alert, Confirm, and Prompt Functions in JavaScript\nDESCRIPTION: This snippet demonstrates multiple violations of the no-alert rule by using the built-in alert, confirm, and prompt functions, which are considered obtrusive.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-alert.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-alert: \"error\"*/\n\nalert(\"here!\");\n\nconfirm(\"Are you sure?\");\n\nprompt(\"What's your name?\", \"John Doe\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect Async Promise Executor Usage\nDESCRIPTION: Demonstrates incorrect patterns that violate the no-async-promise-executor rule by using async executor functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-async-promise-executor.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-async-promise-executor: \"error\"*/\n\nconst foo = new Promise(async (resolve, reject) => {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst result = new Promise(async (resolve, reject) => {\n  resolve(await foo);\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Switch Statement with Break\nDESCRIPTION: Shows proper switch statement implementation using break statements to prevent fallthrough.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nswitch(foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomethingElse();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Empty Static Blocks in JavaScript\nDESCRIPTION: This snippet demonstrates an example of incorrect code that violates the 'no-empty-static-block' rule. It shows an empty static block within a class, which is disallowed by this rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-static-block.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-empty-static-block: \"error\"*/\n\nclass Foo {\n    static {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Examples with ignoreJSX: 'single-line' Option\nDESCRIPTION: Examples showing valid JSX code when the 'ignoreJSX' option is set to 'single-line', allowing extra parentheses around single-line JSX expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"single-line\" }] */\nconst ThisComponent = (<div />)\nconst ThatComponent = (<div><p /></div>)\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for no-unmodified-loop-condition Rule in JavaScript\nDESCRIPTION: Examples of code that complies with the no-unmodified-loop-condition rule, showing various ways variables in loop conditions can be properly modified.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unmodified-loop-condition.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unmodified-loop-condition: \"error\"*/\n\nwhile (node) {\n    doSomething(node);\n    node = node.parent;\n}\n\nfor (let j = 0; j < items.length; ++j) {\n    doSomething(items[j]);\n}\n\n// OK, the result of this binary expression is changed in this loop.\nwhile (node !== root) {\n    doSomething(node);\n    node = node.parent;\n}\n\n// OK, the result of this ternary expression is changed in this loop.\nwhile (node ? A : B) {\n    doSomething(node);\n    node = node.parent;\n}\n\n// A property might be a getter which has side effect...\n// Or \"doSomething\" can modify \"obj.foo\".\nwhile (obj.foo) {\n    doSomething(obj);\n}\n\n// A function call can return various values.\nwhile (check(obj)) {\n    doSomething(obj);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of __iterator__ Property in JavaScript\nDESCRIPTION: Example of code that would trigger the no-iterator rule error by defining custom iterators using the obsolete __iterator__ property. This shows three methods of assigning to this property, all of which are discouraged.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-iterator.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-iterator: \"error\"*/\n\nFoo.prototype.__iterator__ = function() {\n    return new FooIterator(this);\n};\n\nfoo.__iterator__ = function () {};\n\nfoo[\"__iterator__\"] = function () {};\n```\n\n----------------------------------------\n\nTITLE: Recommended Error Handling Approach\nDESCRIPTION: Better approach using throw to allow proper error handling throughout the application.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-process-exit.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (somethingBadHappened) {\n    throw new Error(\"Something bad happened!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Code to be Linted in JavaScript\nDESCRIPTION: Shows an example of JavaScript code that would trigger the custom 'avoid-name' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// someFile.js\n\nvar foo = 2;\n//  ^ error: Avoid using variables named 'foo'\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Parser in ESLint Configuration File\nDESCRIPTION: This example demonstrates how to specify Esprima as a custom parser in an .eslintrc file. The configuration includes setting the parser and a simple rule for requiring semicolons.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/parser-deprecated.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"parser\": \"esprima\",\n\t\"rules\": {\n\t\t\"semi\": \"error\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with JavaScript-style Comments\nDESCRIPTION: Example of JSON configuration file that includes JavaScript-style comments to improve readability. It configures browser environment and overrides default rule settings for eqeqeq and strict rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"env\": {\n        \"browser\": true\n    },\n    \"rules\": {\n        // Override our default settings just for this directory\n        \"eqeqeq\": \"warn\",\n        \"strict\": \"off\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: New JSX Configuration Format\nDESCRIPTION: Updated configuration format for enabling JSX support in ESLint v2.0.0, where ecmaFeatures is now nested under parserOptions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tparserOptions: {\n\t\tecmaFeatures: {\n\t\t\tjsx: true;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Boolean Casts in JavaScript\nDESCRIPTION: Examples of code that violate the no-extra-boolean-cast rule, showing unnecessary boolean casts in various contexts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-boolean-cast.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-extra-boolean-cast: \"error\"*/\n\nconst foo = !!!bar;\n\nconst foo1 = !!bar ? baz : bat;\n\nconst foo2 = Boolean(!!bar);\n\nconst foo3 = new Boolean(!!bar);\n\nif (!!foo) {\n    // ...\n}\n\nif (Boolean(foo)) {\n    // ...\n}\n\nwhile (!!foo) {\n    // ...\n}\n\ndo {\n    // ...\n} while (Boolean(foo));\n\nfor (; !!foo; ) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Capture Groups in JavaScript RegExp\nDESCRIPTION: Demonstrates the correct usage of named capture groups in regular expressions using the (?<name>...) syntax to capture year values.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-named-capture-group.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst regex = /(?<year>[0-9]{4})/;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage with Non-Mergeable Exports in JavaScript\nDESCRIPTION: This snippet shows cases where exports cannot be merged with imports, even with the includeExports option set to true. It includes examples of namespace exports and re-exporting all contents of a module.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-imports.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-duplicate-imports: [\"error\", { \"includeExports\": true }]*/\n\nimport { merge, find } from 'module';\n\n// cannot be merged with the above import\nexport * as something from 'module';\n\n// cannot be written differently\nexport * from 'module';\n```\n\n----------------------------------------\n\nTITLE: Accessing Rule Options in ESLint Rule Implementation\nDESCRIPTION: This JavaScript code demonstrates how to access and use options passed to an ESLint rule. It shows how to retrieve the first option and use it in the rule's logic, as well as how to define a schema for the rule's options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tmeta: {\n\t\tschema: [\n\t\t\t{\n\t\t\t\tenum: [\"single\", \"double\", \"backtick\"],\n\t\t\t},\n\t\t],\n\t},\n\tcreate: function (context) {\n\t\tvar isDouble = context.options[0] === \"double\";\n\n\t\t// ...\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Default Rule\nDESCRIPTION: Examples of code that violates the eqeqeq rule when configured with default \"error\" setting.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/eqeqeq.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\n----------------------------------------\n\nTITLE: Plugin Rule Configuration in ESLint\nDESCRIPTION: Demonstrates how to configure rules from plugins in an ESLint configuration file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport example from \"eslint-plugin-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\trules: {\n\t\t\t\"example/rule1\": \"warn\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Parse Method for ESLint Custom Parser\nDESCRIPTION: A simple custom parser implementation that logs parsing duration using espree as the underlying parser. This demonstrates the basic structure of a custom parser with the parse() method.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// customParser.js\n\nconst espree = require(\"espree\");\n\n// Logs the duration it takes to parse each file.\nfunction parse(code, options) {\n\tconst label = `Parsing file \"${options.filePath}\"`;\n\tconsole.time(label);\n\tconst ast = espree.parse(code, options);\n\tconsole.timeEnd(label);\n\treturn ast; // Only the AST is returned.\n}\n\nmodule.exports = { parse };\n```\n\n----------------------------------------\n\nTITLE: Correct Alternatives to Nested Ternary Expressions in JavaScript\nDESCRIPTION: These examples show correct code that complies with the no-nested-ternary rule. They demonstrate how to rewrite nested ternary expressions using simple ternary operations and if-else statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-nested-ternary.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-nested-ternary: \"error\"*/\n\nconst thing = foo ? bar : foobar;\n\nlet otherThing;\n\nif (foo) {\n  otherThing = bar;\n} else if (baz === qux) {\n  otherThing = quxx;\n} else {\n  otherThing = foobar;\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Unused Inline Configs in ESLint\nDESCRIPTION: Configuration for reporting unused inline ESLint configurations with severity levels.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tlinterOptions: {\n\t\t\treportUnusedInlineConfigs: \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of new operator with Symbol and BigInt\nDESCRIPTION: Examples of code that violate the no-new-native-nonconstructor rule by incorrectly using the new operator with Symbol and BigInt functions, which will throw TypeError at runtime.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-native-nonconstructor.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// throws a TypeError\nconst foo = new Symbol(\"foo\");\n\n// throws a TypeError\nconst result = new BigInt(9007199254740991);\n```\n\n----------------------------------------\n\nTITLE: Declaring ESLint Peer Dependencies in package.json\nDESCRIPTION: JSON configuration showing how to properly declare ESLint as a peer dependency in the package.json file of a shareable config, using the recommended version range syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"peerDependencies\": {\n\t\t\"eslint\": \">= 9\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct ID Length Usage Examples\nDESCRIPTION: Examples showing proper usage following the default id-length rule requirements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-length.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-length: \"error\"*/     // default is minimum 2-chars ({ \"min\": 2 })\n\nconst num = 5;\nfunction _f() { return 42; }\nfunction _func() { return 42; }\nobj.el = document.body;\nconst foo = function (evt) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (error) {\n    // ignore as many do\n}\nconst myObj = { apple: 1 };\n(num) => { num * num };\nfunction bar(num = 0) { }\nclass MyClass { }\nclass Foo { method() {} }\nclass Bar { #method() {} }\nclass Baz { field = 1 }\nclass Qux { #field = 1 }\nfunction baz(...args) { }\nfunction qux([longName]) { }\nconst { prop } = {};\nconst { prop: [name] } = {};\nconst [longName] = arr;\nfunction foobar({ prop }) { }\nfunction foobaz({ a: prop }) { }\nconst { a: property } = {};\n({ prop: obj.longName } = {});\nconst data = { \"x\": 1 };  // excused because of quotes\ndata[\"y\"] = 3;  // excused because of calculated property access\n```\n\n----------------------------------------\n\nTITLE: Example of undefined Shadowing in JavaScript\nDESCRIPTION: Shows how undefined can be dangerously shadowed in a local scope, causing comparisons against undefined to behave unexpectedly.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undefined.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doSomething(data) {\n    const undefined = \"hi\";\n\n    // doesn't do what you think it does\n    if (data === undefined) {\n        // ...\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: IIFE Body Indentation in JavaScript\nDESCRIPTION: Demonstrates proper indentation for Immediately Invoked Function Expression (IIFE) bodies with outerIIFEBody option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"outerIIFEBody\": 0 }]*/\n\n(function() {\n\nfunction foo(x) {\n  return x + 1;\n}\n\n})();\n\nif (y) {\n  console.log('foo');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rule Overrides in JavaScript\nDESCRIPTION: Example showing how to override the no-unused-expressions rule severity in test files using an ESLint config file. Demonstrates setting different severities for different file patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/glossary.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default [\n\t{\n\t\trules: {\n\t\t\t\"no-unused-expressions\": \"error\",\n\t\t},\n\t},\n\t{\n\t\tfiles: [\"*.test.js\"],\n\t\trules: {\n\t\t\t\"no-unused-expressions\": \"off\",\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: ESLint Flat Config with Global Definitions\nDESCRIPTION: Configuration example showing how to define globals for specific file patterns using the flat config format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport globals from \"globals\";\n\nexport default [\n\t// ...other config\n\t{\n\t\tfiles: [\"tests/**\"],\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.mocha,\n\t\t\t},\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: ESLint Global Configuration with Comments (Modern)\nDESCRIPTION: Modern approach using global comments to define specific global identifiers for testing environments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/* global describe, it -- Globals defined by Mocha */\n\ndescribe(\"unit tests\", () => {\n\tit(\"should pass\", () => {\n\t\t// ...\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Getter Implementation (ESLint Rule Violation)\nDESCRIPTION: Shows examples of getters that violate the 'getter-return' rule by not including return statements. This includes object literals, Object.defineProperty(), and class syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/getter-return.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint getter-return: \"error\"*/\n\nconst p = {\n    get name(){\n        // no returns.\n    }\n};\n\nObject.defineProperty(p, \"age\", {\n    get: function (){\n        // no returns.\n    }\n});\n\nclass P{\n    get name(){\n        // no returns.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Getter Implementation (ESLint Rule Compliant)\nDESCRIPTION: Demonstrates correct implementations of getters that comply with the 'getter-return' rule by including return statements. Examples cover object literals, Object.defineProperty(), and class syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/getter-return.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint getter-return: \"error\"*/\n\nconst p = {\n    get name(){\n        return \"nicholas\";\n    }\n};\n\nObject.defineProperty(p, \"age\", {\n    get: function (){\n        return 18;\n    }\n});\n\nclass P{\n    get name(){\n        return \"nicholas\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage with Global Declarations in JavaScript\nDESCRIPTION: This code snippet shows how to correctly use global variables by declaring them in a comment. This prevents the 'no-undef' rule from triggering warnings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*global someFunction, a*/\n/*eslint no-undef: \"error\"*/\n\nconst foo = someFunction();\nconst bar = a + 1;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Assignment - Basic Example\nDESCRIPTION: Shows a basic violation where a class identifier is reassigned after declaration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-class-assign.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-class-assign: \"error\"*/\n\nclass A { }\nA = 0;\n```\n\n----------------------------------------\n\nTITLE: Traditional ESLint Configuration with Language Options\nDESCRIPTION: Example of language options configuration using the eslintrc format, including environment settings, globals, and parser options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tenv: {\n\t\tbrowser: true,\n\t\tnode: true,\n\t},\n\tglobals: {\n\t\tmyCustomGlobal: \"readonly\",\n\t},\n\tparserOptions: {\n\t\tecmaVersion: 2022,\n\t\tsourceType: \"module\",\n\t},\n\t// ...other config\n};\n```\n\n----------------------------------------\n\nTITLE: Properly Modified Loop Condition Example in JavaScript\nDESCRIPTION: Example of a correctly implemented loop where the condition variable is modified within the loop body.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unmodified-loop-condition.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwhile (node) {\n    doSomething(node);\n    node = node.parent;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ESLint Configuration Schema in JSON\nDESCRIPTION: This JSON schema defines various configuration options for ESLint, including indentation rules for different code constructs. It covers settings for switch cases, variable declarators, function declarations and expressions, and various types of expressions like member, call, array, and object expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"SwitchCase\": {\n            \"type\": \"integer\",\n            \"minimum\": 0,\n            \"default\": 0\n        },\n        \"VariableDeclarator\": {\n            \"oneOf\": [\n                {\n                    \"oneOf\": [\n                        {\n                            \"type\": \"integer\",\n                            \"minimum\": 0\n                        },\n                        {\n                            \"enum\": [\n                                \"first\",\n                                \"off\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"var\": {\n                            \"oneOf\": [\n                                {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0\n                                },\n                                {\n                                    \"enum\": [\n                                        \"first\",\n                                        \"off\"\n                                    ]\n                                }\n                            ]\n                        },\n                        \"let\": {\n                            \"oneOf\": [\n                                {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0\n                                },\n                                {\n                                    \"enum\": [\n                                        \"first\",\n                                        \"off\"\n                                    ]\n                                }\n                            ]\n                        },\n                        \"const\": {\n                            \"oneOf\": [\n                                {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0\n                                },\n                                {\n                                    \"enum\": [\n                                        \"first\",\n                                        \"off\"\n                                    ]\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            ]\n        },\n        \"outerIIFEBody\": {\n            \"oneOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                },\n                {\n                    \"enum\": [\n                        \"off\"\n                    ]\n                }\n            ]\n        },\n        \"MemberExpression\": {\n            \"oneOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                },\n                {\n                    \"enum\": [\n                        \"off\"\n                    ]\n                }\n            ]\n        },\n        \"FunctionDeclaration\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"parameters\": {\n                    \"oneOf\": [\n                        {\n                            \"type\": \"integer\",\n                            \"minimum\": 0\n                        },\n                        {\n                            \"enum\": [\n                                \"first\",\n                                \"off\"\n                            ]\n                        }\n                    ]\n                },\n                \"body\": {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        \"FunctionExpression\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"parameters\": {\n                    \"oneOf\": [\n                        {\n                            \"type\": \"integer\",\n                            \"minimum\": 0\n                        },\n                        {\n                            \"enum\": [\n                                \"first\",\n                                \"off\"\n                            ]\n                        }\n                    ]\n                },\n                \"body\": {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        \"StaticBlock\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"body\": {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        \"CallExpression\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"arguments\": {\n                    \"oneOf\": [\n                        {\n                            \"type\": \"integer\",\n                            \"minimum\": 0\n                        },\n                        {\n                            \"enum\": [\n                                \"first\",\n                                \"off\"\n                            ]\n                        }\n                    ]\n                }\n            },\n            \"additionalProperties\": false\n        },\n        \"ArrayExpression\": {\n            \"oneOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                },\n                {\n                    \"enum\": [\n                        \"first\",\n                        \"off\"\n                    ]\n                }\n            ]\n        },\n        \"ObjectExpression\": {\n            \"oneOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                }\n```\n\n----------------------------------------\n\nTITLE: Using ignoreConstructors Option with object-shorthand Rule\nDESCRIPTION: Shows how to configure and use the ignoreConstructors option, which prevents the rule from reporting errors for constructor functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"object-shorthand\": [\"error\", \"always\", { \"ignoreConstructors\": true }]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: [\"error\", \"always\", { \"ignoreConstructors\": true }]*/\n\nconst foo = {\n    ConstructorFunction: function() {}\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Global Variables in Configuration\nDESCRIPTION: This snippet demonstrates how to disable specific global variables even when their environment is enabled. It enables ES6 environment but explicitly disables the Promise global.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"env\": {\n\t\t\"es6\": true\n\t},\n\t\"globals\": {\n\t\t\"Promise\": \"off\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Alternatives to NaN in Switch Statements\nDESCRIPTION: Examples showing correct alternatives to using NaN in switch statements, using conditional checks with Number.isNaN instead.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/use-isnan.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint use-isnan: [\"error\", {\"enforceForSwitchCase\": true}]*/\n\nif (Number.isNaN(foo)) {\n    bar();\n} else {\n    switch (foo) {\n        case 1:\n            baz();\n            break;\n        // ...\n    }\n}\n\nif (Number.isNaN(a)) {\n    bar();\n} else if (Number.isNaN(b)) {\n    baz();\n} // ...\n```\n\n----------------------------------------\n\nTITLE: Correct Property Update Pattern\nDESCRIPTION: Example of correct async property updates that avoid race conditions using temporary variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function foo(obj) {\n    if (!obj.done) {\n        const tmp = await getSomething();\n        if (!obj.done) {\n            obj.something = tmp;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Array Callback Usage in JavaScript\nDESCRIPTION: These examples demonstrate correct usage of array callbacks with proper return statements. The ESLint rule 'array-callback-return' would not flag these as errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-callback-return.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-callback-return: \"error\"*/\n\nconst indexMap = myArray.reduce(function(memo, item, index) {\n    memo[item] = index;\n    return memo;\n}, {});\n\nconst foo = Array.from(nodes, function(node) {\n    if (node.tagName === \"DIV\") {\n        return true;\n    }\n    return false;\n});\n\nconst bar = foo.map(node => node.getAttribute(\"id\"));\n```\n\n----------------------------------------\n\nTITLE: Correct NaN Comparisons in JavaScript\nDESCRIPTION: Examples of correct code that properly uses isNaN() function to check for NaN values, which is the recommended approach according to the ESLint use-isnan rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/use-isnan.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint use-isnan: \"error\"*/\n\nif (isNaN(foo)) {\n    // ...\n}\n\nif (!isNaN(foo)) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint CLI Fix Option Reference\nDESCRIPTION: Reference to the ESLint CLI fix option used for automatically applying rule fixes\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/index.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`--fix` command line option](../command-line-interface#--fix)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Symbol with New Operator in JavaScript\nDESCRIPTION: This example demonstrates the incorrect usage of Symbol with the new operator, which causes a TypeError exception. The rule is intended to prevent this type of error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-symbol.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar foo = new Symbol(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with allowShortCircuit and allowTernary Options\nDESCRIPTION: Examples of code patterns that would be considered valid with both allowShortCircuit and allowTernary options enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true, \"allowTernary\": true }]*/\n\na ? b() || (c = d) : e()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of camelcase Rule with 'properties: never' Option\nDESCRIPTION: Examples of code that comply with the camelcase rule using the { \"properties\": \"never\" } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {properties: \"never\"}]*/\n\nconst obj = {\n    my_pref: 1\n};\n\nobj.foo_bar = \"baz\";\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'property' Option (JavaScript)\nDESCRIPTION: This snippet shows correct code examples when the 'dot-location' rule is set to the 'property' option. The dot is placed on the same line as the property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-location.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint dot-location: [\"error\", \"property\"]*/\n\nvar foo = object\n.property;\nvar bar = object.property;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Trailing Commas with 'always-multiline' Option\nDESCRIPTION: These JavaScript snippets demonstrate correct usage of trailing commas in various scenarios when the 'comma-dangle' rule is set to 'always-multiline'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for no-unmodified-loop-condition Rule in JavaScript\nDESCRIPTION: Examples of code that violates the no-unmodified-loop-condition rule, where variables in loop conditions are not modified within the loop body.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unmodified-loop-condition.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unmodified-loop-condition: \"error\"*/\n\nlet node = something;\n\nwhile (node) {\n    doSomething(node);\n}\nnode = other;\n\nfor (let j = 0; j < 5;) {\n    doSomething(j);\n}\n\nwhile (node !== root) {\n    doSomething(node);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Object Property Ordering in JavaScript\nDESCRIPTION: Examples showing incorrect property ordering in objects according to the sort-keys rule. This includes basic property ordering, case sensitivity issues, non-natural ordering, and computed properties with simple names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: \"error\"*/\n\nconst obj1 = {a: 1, c: 3, b: 2};\nconst obj2 = {a: 1, \"c\": 3, b: 2};\n\n// Case-sensitive by default.\nconst obj3 = {a: 1, b: 2, C: 3};\n\n// Non-natural order by default.\nconst obj4 = {1: a, 2: c, 10: b};\n\n// This rule checks computed properties which have a simple name as well.\n// Simple names are names which are expressed by an Identifier node or a Literal node.\nconst S = Symbol(\"s\")\nconst obj5 = {a: 1, [\"c\"]: 3, b: 2};\nconst obj6 = {a: 1, [S]: 3, b: 2};\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of 'this' in JavaScript strict mode\nDESCRIPTION: Examples of code that violate the 'no-invalid-this' rule in JavaScript strict mode. These snippets show various contexts where 'this' is used incorrectly, such as in non-method functions or callbacks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-this.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-invalid-this: \"error\"*/\n\n\"use strict\";\n\n(function() {\n    this.a = 0;\n    baz(() => this);\n})();\n\nfunction foo() {\n    this.a = 0;\n    baz(() => this);\n}\n\nconst bar = function() {\n    this.a = 0;\n    baz(() => this);\n};\n\nfoo(function() {\n    this.a = 0;\n    baz(() => this);\n});\n\nconst obj = {\n    aaa: function() {\n        return function foo() {\n            // There is in a method `aaa`, but `foo` is not a method.\n            this.a = 0;\n            baz(() => this);\n        };\n    }\n};\n\nfoo.forEach(function() {\n    this.a = 0;\n    baz(() => this);\n});\n```\n\n----------------------------------------\n\nTITLE: Autofixing JavaScript Files in ESLint Documentation in Shell\nDESCRIPTION: Command to automatically fix linting issues in JavaScript files in the ESLint documentation. This should be executed from the root folder of the project, not from the 'docs' folder.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint:fix:docs:js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Promise Rejection in JavaScript\nDESCRIPTION: Examples of incorrect code that violate the 'prefer-promise-reject-errors' rule by rejecting Promises with non-Error values.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-promise-reject-errors.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-promise-reject-errors: \"error\"*/\n\nPromise.reject(\"something bad happened\");\n\nPromise.reject(5);\n\nPromise.reject();\n\nnew Promise(function(resolve, reject) {\n  reject(\"something bad happened\");\n});\n\nnew Promise(function(resolve, reject) {\n  reject();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Options in ESLint Configuration File\nDESCRIPTION: This example demonstrates how to configure ESLint parser options in a JSON configuration file. It specifies the latest ECMAScript version, module source type, and enables JSX syntax support.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"parserOptions\": {\n\t\t\"ecmaVersion\": \"latest\",\n\t\t\"sourceType\": \"module\",\n\t\t\"ecmaFeatures\": {\n\t\t\t\"jsx\": true\n\t\t}\n\t},\n\t\"rules\": {\n\t\t\"semi\": \"error\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration\nDESCRIPTION: JSON configuration options for the no-mixed-operators rule including groups and precedence settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-operators.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"no-mixed-operators\": [\n        \"error\",\n        {\n            \"groups\": [\n                [\"+\", \"-\", \"*\", \"/\", \"%\", \"**\"],\n                [\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"],\n                [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n                [\"&&\", \"||\"],\n                [\"in\", \"instanceof\"]\n            ],\n            \"allowSamePrecedence\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeErrors with Optional Chaining in JavaScript\nDESCRIPTION: Examples showing how optional chaining can still lead to TypeErrors when the result is used in certain operations like the 'in' operator or destructuring.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-optional-chaining.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = undefined;\n\n1 in obj?.foo;  // TypeError\nwith (obj?.foo);  // TypeError\nfor (bar of obj?.foo);  // TypeError\nbar instanceof obj?.foo;  // TypeError\nconst { bar } = obj?.foo;  // TypeError\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for 'never' Option in ESLint yoda Rule\nDESCRIPTION: These examples show code that would be considered correct when the yoda rule is set to 'never', allowing standard condition ordering.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yoda.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint yoda: \"error\"*/\n\nif (5 & value) {\n    // ...\n}\n\nif (value === \"red\") {\n    // ...\n}\n\nif (value === `red`) {\n    // ...\n}\n\nif (`${value}` === `red`) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Unguarded for...in Loop in JavaScript\nDESCRIPTION: An example of incorrect usage where a for...in loop is used without filtering inherited properties. This can lead to unexpected behavior.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/guard-for-in.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Return Statements in Class Constructors (JavaScript)\nDESCRIPTION: This snippet demonstrates incorrect usage of return statements in class constructors, which is disallowed by the 'no-constructor-return' ESLint rule. It shows examples of returning values in constructors, which may lead to unexpected behavior.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constructor-return.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constructor-return: \"error\"*/\n\nclass A {\n    constructor(a) {\n        this.a = a;\n        return a;\n    }\n}\n\nclass B {\n    constructor(f) {\n        if (!f) {\n            return 'falsy';\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Property Update Pattern\nDESCRIPTION: Example of incorrect async property updates that could lead to race conditions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function foo(obj) {\n    if (!obj.done) {\n        obj.something = await getSomething();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to ESLint Configuration Comments in JavaScript\nDESCRIPTION: Demonstrates how to add descriptions to ESLint configuration comments to explain why a rule is being disabled or re-enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint-disable-next-line no-console -- Here's a description about why this configuration is necessary.\nconsole.log(\"hello\");\n\n/* eslint-disable-next-line no-console --\n * Here's a very long description about why this configuration is necessary\n * along with some additional information\n **/\nconsole.log(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for padding-line-between-statements Rule\nDESCRIPTION: This snippet shows how to configure the rule in an ESLint configuration file with multiple rules. Each rule object contains blankLine, prev, and next properties to define when blank lines are required.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"padding-line-between-statements\": [\n        \"error\",\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Promise Executor Pattern in JavaScript\nDESCRIPTION: Demonstrates the correct pattern for creating a Promise with an executor function that handles asynchronous file reading. The executor uses callback functions to resolve or reject the Promise based on the operation's outcome.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-promise-executor-return.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPromise = new Promise(function executor(resolve, reject) {\n    readFile('foo.txt', function(err, result) {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Confusing Arrow Function Syntax in JavaScript\nDESCRIPTION: This snippet shows an example of arrow function syntax that could be confused with a comparison operator, illustrating the problem this ESLint rule addresses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-confusing-arrow.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = a => 1 ? 2 : 3;\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint Plugin Rules in JavaScript\nDESCRIPTION: Shows how to disable specific plugin rules using inline comments by combining the plugin name and rule name.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfoo(); // eslint-disable-line example/rule-name\nfoo(); /* eslint-disable-line example/rule-name */\n```\n\n----------------------------------------\n\nTITLE: Promise Executor with Allowed Void Returns in JavaScript\nDESCRIPTION: Shows examples of Promise executors using void returns which are allowed when the allowVoid option is enabled. This configuration permits returning void expressions that call resolve or reject.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-promise-executor-return.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-promise-executor-return: [\"error\", { allowVoid: true }]*/\n\nnew Promise((resolve, reject) => {\n    if (someCondition) {\n        return void resolve(defaultResult);\n    }\n    getSomething((err, result) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n\nnew Promise((resolve, reject) => void getSomething((err, data) => {\n    if (err) {\n        reject(err);\n    } else {\n        resolve(data);\n    }\n}));\n\nnew Promise(r => void r(1));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating void operator usage in JavaScript\nDESCRIPTION: This snippet shows various uses of the void operator, including getting a pure undefined value, minifying code, and using it with IIFEs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-void.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// will always return undefined\n(function(){\n    return void 0;\n})();\n\n// will return 1 in ES3 and undefined in ES5+\n(function(){\n    undefined = 1;\n    return undefined;\n})();\n\n// will throw TypeError in ES5+\n(function(){\n    'use strict';\n    undefined = 1;\n})();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfoo = void 0;\nfoo = undefined;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet foo = 1;\nvoid function(){ foo = 1; }() // will assign foo a value of 1\n+function(){ foo = 1; }() // same as above\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(){ foo = 1; }() // will throw SyntaxError\n```\n\n----------------------------------------\n\nTITLE: Intentional Fallthrough with Comments\nDESCRIPTION: Shows examples of intentional fallthrough using appropriate comment patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nswitch(foo) {\n    case 1:\n        doSomething();\n        // falls through\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // fall through\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // fallsthrough\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1: {\n        doSomething();\n        // falls through\n    }\n\n    case 2: {\n        doSomethingElse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Directly Referencing a Processor Object in ESLint Configuration\nDESCRIPTION: This snippet demonstrates how to reference a processor object directly in an ESLint configuration, rather than using the string format. This approach relies on the processor's own meta object for serialization.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.txt\"],\n\t\tprocessor: example.processors[\"processor-name\"],\n\t},\n\t// ... other configs\n]);\n```\n\n----------------------------------------\n\nTITLE: Async Custom Formatter Implementation\nDESCRIPTION: Example of an async formatter function that processes results asynchronously\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//my-awesome-formatter.js\nmodule.exports = async function (results) {\n\tconst formatted = await asyncTask();\n\treturn formatted;\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples\nDESCRIPTION: Examples of code that comply with the prefer-destructuring rule when both array and object destructuring are enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-destructuring.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint prefer-destructuring: \"error\" */\n\n// With `array` enabled\nconst [ foo ] = array;\nconst arr = array[someIndex];\n[bar.baz] = array;\n\n\n// With `object` enabled\nconst { baz } = object;\n\nconst obj = object.bar;\n\nlet bar;\n({ bar } = object);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files Except Specific Ones at Any Level in ESLint\nDESCRIPTION: This configuration ignores all files in and under the build directory except for files named test.js at any level. It uses multiple patterns to achieve this complex ignore scenario.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([\n\tglobalIgnores([\n\t\t\"build/**/*\", // ignore all contents in and under `build/` directory but not the `build/` directory itself\n\t\t\"!build/**/*/\", // unignore all subdirectories\n\t\t\"!build/**/test.js\", // unignore `test.js` files\n\t]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Example JavaScript with Invalid Assignment\nDESCRIPTION: Sample JavaScript code that would trigger the custom rule, showing a const foo variable assigned a value other than 'bar'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// foo.js\n\nconst foo = \"baz123\";\n```\n\n----------------------------------------\n\nTITLE: Using a Shareable ESLint Config in JSON\nDESCRIPTION: Demonstrates how to include a shareable ESLint configuration in a project's .eslintrc file using the 'extends' field. Shows both full module name and shortened syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint-config-myconfig\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"myconfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Parameter Reassignment Examples in JavaScript\nDESCRIPTION: Examples showing incorrect usage of function parameter reassignment that will trigger the no-param-reassign rule error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-param-reassign.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-param-reassign: \"error\"*/\n\nconst foo = function(bar) {\n    bar = 13;\n}\n\nconst foo1 = function(bar) {\n    bar++;\n}\n\nconst foo2 = function(bar) {\n    for (bar in baz) {}\n}\n\nconst foo3 = function(bar) {\n    for (bar of baz) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Example for default-param-last Rule\nDESCRIPTION: This example shows correct usage of default parameters in a TypeScript function, where the default parameter is last, followed by an optional parameter, complying with the 'default-param-last' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-param-last.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint default-param-last: [\"error\"] */\n\nfunction h(a = 0, b?: number) {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with Default treatUndefinedAsUnspecified Option\nDESCRIPTION: Examples showing incorrect usage with the default treatUndefinedAsUnspecified option where returns are inconsistent.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-return.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing parseForESLint Method with Parser Services\nDESCRIPTION: An example of a custom parser that implements the parseForESLint method, providing additional services to ESLint rules. This parser exposes a custom 'foo' service through context.sourceCode.parserServices.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// awesome-custom-parser.js\nvar espree = require(\"espree\");\nfunction parseForESLint(code, options) {\n\treturn {\n\t\tast: espree.parse(code, options),\n\t\tservices: {\n\t\t\tfoo: function () {\n\t\t\t\tconsole.log(\"foo\");\n\t\t\t},\n\t\t},\n\t\tscopeManager: null,\n\t\tvisitorKeys: null,\n\t};\n}\n\nmodule.exports = { parseForESLint };\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Configuration with Plugins in JSON\nDESCRIPTION: Example of extending 'eslint:recommended' and a React plugin configuration using JSON format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [\"react\"],\n\t\"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n\t\"rules\": {\n\t\t\"react/no-set-state\": \"off\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Function Implementation Examples\nDESCRIPTION: Examples of properly documented empty functions that pass the rule check across different function types.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-function.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-function: \"error\"*/\n\nfunction foo() {\n    // do nothing.\n}\n\nconst baz = function() {\n    // any clear comments.\n};\n\nconst baz1 = () => {\n    bar();\n};\n\nfunction* foobar() {\n    // do nothing.\n}\n\nconst baz2 = function*() {\n    // do nothing.\n};\n\nconst obj = {\n    foo: function() {\n        // do nothing.\n    },\n\n    foo: function*() {\n        // do nothing.\n    },\n\n    foo() {\n        // do nothing.\n    },\n\n    *foo() {\n        // do nothing.\n    },\n\n    get foo() {\n        // do nothing.\n    },\n\n    set foo(value) {\n        // do nothing.\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Parser in eslintrc Format\nDESCRIPTION: Example of specifying a custom parser (Babel) in eslintrc format. The parser is referenced by string in the parser property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .eslintrc.js\n\nmodule.exports = {\n\t// ...other config\n\tparser: \"@babel/eslint-parser\",\n\t// ...other config\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Scope Issues with 'var' in JavaScript\nDESCRIPTION: This code snippet illustrates a common problem with using 'var', where variable scoping can lead to unintended overrides and potential bugs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-var.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar count = people.length;\nvar enoughFood = count > sandwiches.length;\n\nif (enoughFood) {\n    var count = sandwiches.length; // accidentally overriding the count variable\n    console.log(\"We have \" + count + \" sandwiches for everyone. Plenty for all!\");\n}\n\n// our count variable is no longer accurate\nconsole.log(\"We have \" + count + \" people and \" + sandwiches.length + \" sandwiches!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring 'no-constant-condition' Rule for Loops in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the 'checkLoops' option of the 'no-constant-condition' rule. It shows examples of incorrect and correct usage based on different configuration values.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-condition.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-condition: [\"error\", { \"checkLoops\": \"all\" }]*/\n\nwhile (true) {\n    doSomething();\n};\n\nfor (;true;) {\n    doSomething();\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-condition: [\"error\", { \"checkLoops\": true }]*/\n\nwhile (true) {\n    doSomething();\n};\n\ndo {\n    doSomething();\n} while (true)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-condition: [\"error\", { \"checkLoops\": \"all\" }]*/\n\nwhile (a === b) {\n    doSomething();\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-condition: [\"error\", { \"checkLoops\": true }]*/\n\nfor (let x = 0; x <= 10; x++) {\n    doSomething();\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-condition: \"error\"*/\n\nwhile (true) {\n    doSomething();\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-condition: [\"error\", { \"checkLoops\": \"none\" }]*/\n\nwhile (true) {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n};\n\ndo {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n} while (true)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n\nwhile (true) {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n};\n\nfor (;true;) {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Parser in ESLint CLI\nDESCRIPTION: The --parser flag allows specifying a custom parser for ESLint instead of the default 'espree' parser. This example shows how to use TypeScript ESLint parser.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--parser @typescript-eslint/parser file.ts\n```\n\n----------------------------------------\n\nTITLE: Advanced JSON Configuration with Custom Messages\nDESCRIPTION: Advanced configuration example demonstrating how to restrict syntax with custom error messages using object notation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-syntax.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-restricted-syntax\": [\n            \"error\",\n            {\n                \"selector\": \"FunctionExpression\",\n                \"message\": \"Function expressions are not allowed.\"\n            },\n            {\n                \"selector\": \"CallExpression[callee.name='setTimeout'][arguments.length!=2]\",\n                \"message\": \"setTimeout must always be invoked with two arguments.\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples\nDESCRIPTION: Examples of code that complies with the no-eval rule, showing proper alternatives\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eval.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-eval: \"error\"*/\n\nconst obj = { x: \"foo\" },\n    key = \"x\",\n    value = obj[key];\n\nclass A {\n    foo() {\n        // This is a user-defined method.\n        this.eval(\"const a = 0\");\n    }\n\n    eval() {\n    }\n\n    static {\n        // This is a user-defined static method.\n        this.eval(\"const a = 0\");\n    }\n\n    static eval() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Decimal Number Usage in JavaScript\nDESCRIPTION: Examples of correct JavaScript number formats that follow the rule's recommendations by including numbers both before and after decimal points. This makes the code clearer and prevents confusion with the dot operator.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-floating-decimal.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-floating-decimal: \"error\"*/\n\nvar num = 0.5;\nvar num = 2.0;\nvar num = -0.7;\n```\n\n----------------------------------------\n\nTITLE: Basic if-else-if Chain Example\nDESCRIPTION: Demonstrates a valid if-else-if chain structure where each condition is unique.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-else-if.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (c) {\n    baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Object Constructor vs Object Literal Example\nDESCRIPTION: Comparison between using the Object constructor and the more concise object literal syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-object.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myObject = new Object();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myObject = {};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Smart Option\nDESCRIPTION: Examples of code that complies with the eqeqeq rule when configured with the \"smart\" option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/eqeqeq.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Use of Continue Statement in JavaScript\nDESCRIPTION: This snippet shows an example of code that violates the no-continue rule by using a continue statement in a for loop. The rule suggests using structured control flow statements like if instead.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-continue.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet sum = 0,\n    i;\n\nfor(i = 0; i < 10; i++) {\n    if(i >= 5) {\n        continue;\n    }\n\n    sum += i;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of return await in JavaScript\nDESCRIPTION: Example showing incorrect usage of return await that the rule will flag as an error. This pattern creates an unnecessary microtask and is generally discouraged.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-return-await.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-return-await: \"error\"*/\n\nasync function foo() {\n    return await bar();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package.json Script Name Grammar in ABNF\nDESCRIPTION: Formal grammar specification in ABNF notation defining the allowed structure and components of npm script names. It includes definitions for lifecycle scripts, main targets, options, and watch modifiers.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/package-json-conventions.md#2025-04-14_snippet_0\n\nLANGUAGE: abnf\nCODE:\n```\nname         = life-cycle / main target? option* \":watch\"?\nlife-cycle   = \"prepare\" / \"preinstall\" / \"install\" / \"postinstall\" / \"prepublish\" / \"preprepare\" / \"prepare\" / \"postprepare\" / \"prepack\" / \"postpack\" / \"prepublishOnly\"\nmain         = \"build\" / \"lint\" \":fix\"? / \"release\" / \"start\" / \"test\" / \"fetch\"\ntarget       = \":\" word (\"-\" word)* / extension (\"+\" extension)*\noption       = \":\" word (\"-\" word)*\nword         = ALPHA +\nextension    = ( ALPHA / DIGIT )+\n```\n\n----------------------------------------\n\nTITLE: Updated ESLint Config for Published Plugin\nDESCRIPTION: Modified ESLint configuration to use the published plugin from npm instead of a local version.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\n\"use strict\";\n\n// Import the plugin downloaded from npm\nconst eslintPluginExample = require(\"eslint-plugin-example\");\n\n// ... rest of configuration\n```\n\n----------------------------------------\n\nTITLE: Incorrect typeof Comparisons in JavaScript\nDESCRIPTION: Examples of incorrect code that violate the valid-typeof rule due to typos in string literals being compared with typeof results.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-typeof.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint valid-typeof: \"error\"*/\n\ntypeof foo === \"strnig\"\ntypeof foo == \"undefimed\"\ntypeof bar != \"nunber\"\ntypeof bar !== \"fucntion\"\n```\n\n----------------------------------------\n\nTITLE: Call Expression Indentation in JavaScript\nDESCRIPTION: Shows proper indentation for function call arguments with CallExpression configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"CallExpression\": {\"arguments\": 1} }]*/\n\nfoo(bar,\n  baz,\n  qux\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Trailing Commas in JavaScript Objects\nDESCRIPTION: This snippet shows an example of a JavaScript object with trailing commas, which is valid in ECMAScript 5 and later but can cause issues in older versions of Internet Explorer.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for no-shadow Rule\nDESCRIPTION: JSON configuration showing the available options for the no-shadow rule including builtinGlobals, hoist, allow, and ignoreOnInitialization settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"no-shadow\": [\"error\", { \"builtinGlobals\": false, \"hoist\": \"functions\", \"allow\": [], \"ignoreOnInitialization\": false }]\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Correct Setter Implementations in JavaScript\nDESCRIPTION: These examples demonstrate proper setter implementations that comply with the 'no-setter-return' rule. They show how to write setters in object literals, classes, and property descriptors without returning values or using return only for control flow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-setter-return.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-setter-return: \"error\"*/\n\nconst foo = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\nclass Foo {\n    set a(value) {\n        this.val = value * 2;\n    }\n}\n\nconst Bar = class {\n    static set a(value) {\n        if (value < 0) {\n            this.val = 0;\n            return;\n        }\n        this.val = value;\n    }\n};\n\nObject.defineProperty(foo, \"bar\", {\n    set(value) {\n        if (value < 0) {\n            throw new Error(\"Negative value.\");\n        }\n        this.val = value;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Functions with the Function Constructor in JavaScript\nDESCRIPTION: Examples of creating functions using the Function constructor, which is discouraged due to debugging difficulty and security concerns with CSP directives.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-func.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = new Function(\"a\", \"b\", \"return a + b\");\nconst b = Function(\"a\", \"b\", \"return a + b\");\nconst c = Function.call(null, \"a\", \"b\", \"return a + b\");\nconst d = Function.apply(null, [\"a\", \"b\", \"return a + b\"]);\nconst x = Function.bind(null, \"a\", \"b\", \"return a + b\")();\n```\n\n----------------------------------------\n\nTITLE: Updating Shorthand Property Node Comparison in JavaScript\nDESCRIPTION: This snippet demonstrates how to update code that previously compared key and value nodes of shorthand properties. In ESLint v8.0.0, direct comparison with === no longer works, and alternative methods are provided.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// true in ESLint v7.x, false in ESLint v8.0.0\nif (propertyNode.key === propertyNode.value) {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Variables in JavaScript\nDESCRIPTION: This snippet shows examples of code that violate the no-unused-vars rule, including unused global variables, write-only variables, and unused function parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-vars.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nlet x;\n\n// Write-only variables are not considered as used.\nlet y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nlet z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\ngetY([\"a\", \"b\"]);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for no-use-before-define Rule in JavaScript\nDESCRIPTION: This snippet shows correct usage patterns where identifiers are properly declared before use, adhering to the no-use-before-define rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-use-before-define: \"error\"*/\n\nvar a;\na = 10;\nalert(a);\n\nfunction f() {}\nf(1);\n\nvar b = 1;\nfunction g() {\n    return b;\n}\n\n{\n    let c;\n    c++;\n}\n\n{\n    class C {\n        static x = C;\n    }\n}\n\n{\n    const C = class C {\n        static x = C;\n    }\n}\n\n{\n    const C = class {\n        x = C;\n    }\n}\n\n{\n    const C = class C {\n        static {\n            C.x = \"foo\";\n        }\n    }\n}\n\nconst foo = 1;\nexport { foo };\n```\n\n----------------------------------------\n\nTITLE: Correct Async Update Patterns\nDESCRIPTION: Examples of safe code patterns that properly handle async updates without race conditions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet result;\n\nasync function foobar() {\n    result = await something + result;\n}\n\nasync function baz() {\n    const tmp = doSomething(await somethingElse);\n    result += tmp;\n}\n\nasync function qux() {\n    if (!result) {\n        const tmp = await initialize();\n        if (!result) {\n            result = tmp;\n        }\n    }\n}\n\nasync function quux() {\n    let localVariable = 0;\n    localVariable += await something;\n}\n\nfunction* generator() {\n    result = (yield) + result;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of 'let' for Constants in JavaScript\nDESCRIPTION: Examples of code that violate the 'prefer-const' rule by using 'let' for variables that are never reassigned after initialization.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-const.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-const: \"error\"*/\n\n// it's initialized and never reassigned.\nlet a = 3;\nconsole.log(a);\n\nlet b;\nb = 0;\nconsole.log(b);\n\nclass C {\n    static {\n        let a;\n        a = 0;\n        console.log(a);\n    }\n}\n\n// `i` is redefined (not reassigned) on each loop step.\nfor (let i in [1, 2, 3]) {\n    console.log(i);\n}\n\n// `a` is redefined (not reassigned) on each loop step.\nfor (let a of [1, 2, 3]) {\n    console.log(a);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating multi-code point character issues in RegExp character classes\nDESCRIPTION: Examples showing how RegExp character classes incorrectly handle multi-code point characters, causing the match to fail even when it appears like it should match.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-misleading-character-class.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/^[Á]$/u.test(\"Á\"); //→ false\n/^[❇️]$/u.test(\"❇️\"); //→ false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Duplicate Imports in JavaScript\nDESCRIPTION: This snippet shows an example of incorrect code that violates the no-duplicate-imports rule. It imports from the same module 'module' twice, which can be combined into a single import statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-imports.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { merge } from 'module';\nimport something from 'another-module';\nimport { find } from 'module';\n```\n\n----------------------------------------\n\nTITLE: Additional Correct Usage Examples for 'no-undef-init' Rule\nDESCRIPTION: This snippet shows additional cases where initializing to undefined is allowed, including const declarations, destructuring, function parameters, and class fields.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef-init.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-undef-init: \"error\"*/\n\nconst foo = undefined;\n\nlet { bar = undefined } = baz;\n\n[quux = undefined] = quuux;\n\n(foo = undefined) => {};\n\nclass Foo {\n    bar = undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Ignores in ESLint\nDESCRIPTION: This snippet demonstrates how to use the globalIgnores function to specify files or directories to be ignored by ESLint. It ignores all files in the .config directory.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([globalIgnores([\".config/*\"]));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating incorrect variable redeclaration in JavaScript with ESLint no-redeclare rule\nDESCRIPTION: This example shows JavaScript code that violates the no-redeclare rule by redeclaring variables using 'var' in the same scope, which the rule is designed to prevent.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-redeclare.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-redeclare: \"error\"*/\n\nvar a = 3;\nvar a = 10;\n\nclass C {\n    foo() {\n        var b = 3;\n        var b = 10;\n    }\n\n    static {\n        var c = 3;\n        var c = 10;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Settings for ESLint Flat Config\nDESCRIPTION: Settings required in VS Code to enable support for ESLint's flat configuration system in versions of vscode-eslint prior to v3.0.10.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n\t// required in vscode-eslint < v3.0.10 only\n\t\"eslint.experimental.useFlatConfig\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Switch Statement Patterns with default-case-last Rule\nDESCRIPTION: Examples showing correct placement of default clauses in switch statements that comply with the default-case-last rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-case-last.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint default-case-last: \"error\"*/\n\nswitch (foo) {\n    case \"a\":\n        baz();\n        break;\n    default:\n        bar();\n        break;\n}\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n    case 2:\n        quux();\n        break;\n    default:\n        baz();\n        break;\n}\n\nswitch (foo) {\n    case \"x\":\n        bar();\n        break;\n    case \"y\":\n    default:\n        baz();\n        break;\n}\n\nswitch (foo) {\n    case -1:\n        bar();\n        break;\n}\n\nif (foo !== 0) {\n    doSomethingIfNotZero();\n}\ndoSomethingAnyway();\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags in VS Code Editor\nDESCRIPTION: Shows how to enable ESLint feature flags in VS Code through the eslint.options setting in settings.json. This configuration applies to ESLint when linting files within the editor.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/pages/flags.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"eslint.options\": { \"flags\": [\"flag_one\", \"flag_two\"] }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Rule Suggestions with MessageId\nDESCRIPTION: Example showing how to test rule suggestions using messageId and data properties instead of a static description, useful for rules that use parameterized messages.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nruleTester.run(\"my-rule-for-no-foo\", rule, {\n\tvalid: [],\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"var foo;\",\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tsuggestions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessageId: \"renameFoo\",\n\t\t\t\t\t\t\tdata: { newName: \"bar\" },\n\t\t\t\t\t\t\toutput: \"var bar;\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of 'with' Statement in JavaScript\nDESCRIPTION: This code snippet shows an example of incorrect usage of the 'with' statement, which is disallowed by the 'no-with' ESLint rule. It illustrates how 'with' can make it unclear whether a variable is a member of the object or not.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-with.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-with: \"error\"*/\n\nwith (point) {\n    r = Math.sqrt(x * x + y * y); // is r a member of point?\n}\n```\n\n----------------------------------------\n\nTITLE: Results Output Handler\nDESCRIPTION: Function to process and display ESLint results, counting errors and warnings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction outputLintingResults(results) {\n\t// Identify the number of problems found\n\tconst problems = results.reduce(\n\t\t(acc, result) => acc + result.errorCount + result.warningCount,\n\t\t0,\n\t);\n\n\tif (problems > 0) {\n\t\tconsole.log(\"Linting errors found!\");\n\t\tconsole.log(results);\n\t} else {\n\t\tconsole.log(\"No linting errors found.\");\n\t}\n\treturn results;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing ES5 and ES6 Object Syntax in JavaScript\nDESCRIPTION: Shows the difference between ES5 and ES6 syntax for defining object properties and methods, demonstrating the more concise form available in ES6.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// properties\nconst foo = {\n    x: x,\n    y: y,\n    z: z,\n};\n\n// methods\nconst bar = {\n    a: function() {},\n    b: function() {}\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// properties\nconst foo = {x, y, z};\n\n// methods\nconst bar = {\n    a() {},\n    b() {}\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Additional Correct Usage with 'ignoreDestructuring: true' Option\nDESCRIPTION: Examples of additional code that comply with the camelcase rule using the { \"ignoreDestructuring\": true } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nconst { some_property, ...rest } = obj;\n// do something with 'rest', nothing with 'some_property'\n```\n\n----------------------------------------\n\nTITLE: Specifying Ignore Path in ESLint CLI\nDESCRIPTION: The --ignore-path flag specifies a custom file to use instead of the default .eslintignore. This option is only supported in eslintrc mode. Can also use .gitignore patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n--ignore-path tmp/.eslintignore file.js\n```\n\nLANGUAGE: bash\nCODE:\n```\n--ignore-path .gitignore file.js\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Parentheses\nDESCRIPTION: Shows how to properly use new with a required module when needed by using parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-require.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar appHeader = new (require('app-header'));\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of throw Statements in JavaScript\nDESCRIPTION: Examples of code that comply with the no-throw-literal rule by throwing Error objects or variables that contain Error objects.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-throw-literal.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-throw-literal: \"error\"*/\n\nthrow new Error();\n\nthrow new Error(\"error\");\n\nconst e = new Error(\"error\");\nthrow e;\n\ntry {\n    throw new Error(\"error\");\n} catch (e) {\n    throw e;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Optional Chaining in JavaScript\nDESCRIPTION: Examples of code patterns that would be flagged by the no-unsafe-optional-chaining rule because they may lead to runtime errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-optional-chaining.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-optional-chaining: \"error\"*/\n\n(obj?.foo)();\n\n(obj?.foo).bar;\n\n(foo?.()).bar;\n\n(foo?.()).bar();\n\n(obj?.foo ?? obj?.bar)();\n\n(foo || obj?.foo)();\n\n(obj?.foo && foo)();\n\n(foo ? obj?.foo : bar)();\n\n(foo, obj?.bar).baz;\n\n(obj?.foo)`template`;\n\nnew (obj?.foo)();\n\n[...obj?.foo];\n\nbar(...obj?.foo);\n\n1 in obj?.foo;\n\nbar instanceof obj?.foo;\n\nfor (bar of obj?.foo);\n\nconst { bar } = obj?.foo;\n\n[{ bar } = obj?.foo] = [];\n\nwith (obj?.foo);\n\nclass A extends obj?.foo {}\n\nconst a = class A extends obj?.foo {};\n\nasync function foo () {\n    const { bar } = await obj?.foo;\n   (await obj?.foo)();\n   (await obj?.foo).bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Without Synchronous Methods in JavaScript\nDESCRIPTION: Examples of code that complies with the no-sync rule. The code shows valid patterns that don't use Node.js synchronous methods ending with 'Sync'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sync.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-sync: \"error\"*/\n\nobj.sync();\n\nasync(function() {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Rebasing onto Upstream ESLint Branch\nDESCRIPTION: Commands to fetch and rebase your branch onto the latest upstream ESLint code before submitting a pull request, ensuring your changes work with the latest code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for Enforcing setTimeout Parameter Count\nDESCRIPTION: JSON configuration for the no-restricted-syntax rule that enforces setTimeout calls to have exactly two arguments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/selectors.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"no-restricted-syntax\": [\n\t\t\t\"error\",\n\t\t\t\"CallExpression[callee.name='setTimeout'][arguments.length!=2]\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Alternatives to undefined in JavaScript\nDESCRIPTION: Examples of code that comply with the no-undefined rule, showing proper alternatives such as using void 0, checking types with typeof, and using different variable names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undefined.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-undefined: \"error\"*/\n\nconst foo = void 0;\n\nconst Undefined = \"foo\";\n\nif (typeof foo === \"undefined\") {\n    // ...\n}\n\nglobal.undefined = \"foo\";\n\nbar(void 0, \"lorem\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Function Declaration After Assignment in JavaScript\nDESCRIPTION: This snippet shows an example of code that violates the no-func-assign rule by declaring a function after it has been assigned, which is caught by ESLint but not by JSHint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-func-assign.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-func-assign: \"error\"*/\n\nfoo = bar;\nfunction foo() {}\n```\n\n----------------------------------------\n\nTITLE: Basic Promise Executor Example\nDESCRIPTION: Shows the correct way to create a Promise with a synchronous executor function that handles file reading.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-async-promise-executor.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = new Promise(function executor(resolve, reject) {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Correct comparison with zero in JavaScript\nDESCRIPTION: This snippet shows a correct way to compare a value with zero. Using x === 0 avoids the issue of distinguishing between +0 and -0.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-compare-neg-zero.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-compare-neg-zero: \"error\" */\n\nif (x === 0) {\n    // doSomething()...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Examples with enforceForJSX Option\nDESCRIPTION: Examples of JSX expressions that would be considered valid with the enforceForJSX option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n/*eslint no-unused-expressions: [\"error\", { \"enforceForJSX\": true }]*/\n\nconst myComponentPartial = <MyComponent />;\n\nconst myFragment = <></>;\n```\n\n----------------------------------------\n\nTITLE: Basic Console Usage Examples\nDESCRIPTION: Examples of console methods that would be flagged by the rule\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-console.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Made it here.\");\nconsole.error(\"That shouldn't have happened.\");\n```\n\n----------------------------------------\n\nTITLE: Advanced Incorrect Examples with Logical Operators\nDESCRIPTION: Examples of incorrect if-else-if chains with complex logical expressions that result in unreachable branches.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-else-if.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-dupe-else-if: \"error\"*/\n\nif (a || b) {\n    foo();\n} else if (a) {\n    bar();\n}\n\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (a || b) {\n    baz();\n}\n\nif (a) {\n    foo();\n} else if (a && b) {\n    bar();\n}\n\nif (a && b) {\n    foo();\n} else if (a && b && c) {\n    bar();\n}\n\nif (a || b) {\n    foo();\n} else if (b && c) {\n    bar();\n}\n\nif (a) {\n    foo();\n} else if (b && c) {\n    bar();\n} else if (d && (c && e && b || a)) {\n    baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying ESLint Processor from Plugin\nDESCRIPTION: This snippet shows how to specify a processor from an ESLint plugin. It configures the markdown processor for Markdown files and sets up additional configurations for JavaScript code blocks within Markdown files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport markdown from \"@eslint/markdown\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t// applies to all JavaScript files\n\t{\n\t\trules: {\n\t\t\tstrict: \"error\",\n\t\t},\n\t},\n\n\t// applies to Markdown files\n\t{\n\t\tfiles: [\"**/*.md\"],\n\t\tplugins: {\n\t\t\tmarkdown,\n\t\t},\n\t\tprocessor: \"markdown/markdown\",\n\t},\n\n\t// applies only to JavaScript blocks inside of Markdown files\n\t{\n\t\tfiles: [\"**/*.md/*.js\"],\n\t\trules: {\n\t\t\tstrict: \"off\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unexpected Results of Chained Assignments in JavaScript\nDESCRIPTION: This snippet shows how chaining assignments can lead to unexpected scoping issues and potential bugs. It illustrates why the 'no-multi-assign' rule is useful.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-assign.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n    const foo = bar = 0; // Did you mean `foo = bar == 0`?\n    bar = 1;             // This will not fail since `bar` is not constant.\n})();\nconsole.log(bar);        // This will output 1 since `bar` is not scoped.\n```\n\n----------------------------------------\n\nTITLE: Converting a Method to Static\nDESCRIPTION: Shows how to convert the 'sayHi' method to a static method since it doesn't use 'this'. Note that the method is now called directly on the class, not on an instance.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n    constructor() {\n        this.a = \"hi\";\n    }\n\n    print() {\n        console.log(this.a);\n    }\n\n    static sayHi() {\n        console.log(\"hi\");\n    }\n}\n\nA.sayHi(); // => \"hi\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with Default Options\nDESCRIPTION: Examples of code that would trigger the no-irregular-whitespace rule with the default settings. These examples demonstrate various functions containing irregular whitespace characters in different positions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-irregular-whitespace.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-irregular-whitespace: \"error\"*/\n\nconst thing = function() /*<NBSP>*/{\n    return 'test';\n}\n\nconst foo = function( /*<NBSP>*/){\n    return 'test';\n}\n\nconst bar = function /*<NBSP>*/(){\n    return 'test';\n}\n\nconst baz = function /*<Ogham Space Mark>*/(){\n    return 'test';\n}\n\nconst qux = function() {\n    return 'test'; /*<ENSP>*/\n}\n\nconst quux = function() {\n    return 'test'; /*<NBSP>*/\n}\n\nconst item = function() {\n    // Description <NBSP>: some descriptive text\n}\n\n/*\nDescription <NBSP>: some descriptive text\n*/\n\nconst func = function() {\n    return / <NBSP>regexp/;\n}\n\nconst myFunc = function() {\n    return `template <NBSP>string`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReplacedByInfo Type for ESLint Rule Replacement\nDESCRIPTION: The ReplacedByInfo type describes a single possible replacement for a deprecated rule. It includes optional properties for message, URL, plugin, and rule specifications.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/rule-deprecation.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   `message` (`string`)<br>\n    A general message about this rule replacement, e.g.\n-   `url` (`string`)<br>\n    An URL with more information about this rule replacement.\n-   `plugin` (`ExternalSpecifier`)<br>\n    Specifies which plugin has the replacement rule.\n    The name should be the package name and should be \"eslint\" if the replacement is an ESLint core rule.\n    This property should be omitted if the replacement is in the same plugin.\n-   `rule` (`ExternalSpecifier`)<br>\n    Specifies the replacement rule.\n    May be omitted if the plugin only contains a single rule or has the same name as the rule.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for no-self-assign Rule in JavaScript\nDESCRIPTION: Examples of code that would be flagged as incorrect by the no-self-assign rule, including variable assignments, array destructuring, and logical assignments where a variable is assigned to itself.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-self-assign.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-self-assign: \"error\"*/\n\nfoo = foo;\n\n[a, b] = [a, b];\n\n[a, ...b] = [x, ...b];\n\n({a, b} = {a, x});\n\nfoo &&= foo;\nfoo ||= foo;\nfoo ??= foo;\n```\n\n----------------------------------------\n\nTITLE: Marking Code Blocks as Correct or Incorrect in Markdown\nDESCRIPTION: Shows the markdown syntax for wrapping code blocks in containers to indicate if they represent correct or incorrect usage. The example demonstrates how to properly format the containers with spacing around the code blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/code-blocks.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n::: correct\n\n`` `js\nfunction() {\n    const another = [];\n}\n`` `\n\n:::\n\n::: incorrect\n\n`` `js\nfunction() {\n    const another = [];\n}\n`` `\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of setTimeout with Function Argument in JavaScript\nDESCRIPTION: This snippet shows the correct and safer way to use setTimeout() by passing a function as the first argument instead of a string. This approach is recommended for better security and performance.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implied-eval.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetTimeout(function() {\n    alert(\"Hi!\");\n}, 100);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples of Unreachable Code for ESLint Rule\nDESCRIPTION: Collection of incorrect code examples showing different scenarios of unreachable code after return, throw, break statements, and more. All these patterns would trigger the no-unreachable rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unreachable: \"error\"*/\n\nfunction foo() {\n    return true;\n    console.log(\"done\");\n}\n\nfunction bar() {\n    throw new Error(\"Oops!\");\n    console.log(\"done\");\n}\n\nwhile(value) {\n    break;\n    console.log(\"done\");\n}\n\nthrow new Error(\"Oops!\");\nconsole.log(\"done\");\n\nfunction baz() {\n    if (Math.random() < 0.5) {\n        return;\n    } else {\n        throw new Error();\n    }\n    console.log(\"done\");\n}\n\nfor (;;) {}\nconsole.log(\"done\");\n```\n\n----------------------------------------\n\nTITLE: Compliant Code Length Example (JavaScript)\nDESCRIPTION: Shows how to properly format code to comply with the 80 character line length limit.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-len.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-len: [\"error\", { \"code\": 80 }]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples for no-empty-pattern Rule\nDESCRIPTION: Examples of code that correctly follow the no-empty-pattern rule, showing proper use of default values instead of empty patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-pattern.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-pattern: \"error\"*/\n\nconst {a = {}} = foo;\nconst {b = []} = foo;\nfunction foo({a = {}}) {}\nfunction bar({a = []}) {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Modifying const Variable with Assignment Operator in JavaScript\nDESCRIPTION: This example shows incorrect usage by trying to modify a const variable using the += assignment operator, which is not permitted for const variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-const-assign.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-const-assign: \"error\"*/\n\nconst a = 0;\na += 1;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Floating Decimal Usage in JavaScript\nDESCRIPTION: Examples of invalid JavaScript number formats with floating decimal points that this ESLint rule will flag as errors. These formats include decimal points with missing numbers before or after them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-floating-decimal.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-floating-decimal: \"error\"*/\n\nvar num = .5;\nvar num = 2.;\nvar num = -.7;\n```\n\n----------------------------------------\n\nTITLE: Printing Configuration\nDESCRIPTION: Example showing how to output the configuration for a specific file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\n--print-config file.js\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Settings in JSON Configuration\nDESCRIPTION: Example of adding shared settings to an ESLint JSON configuration file, which allows plugins to access shared information across all rules. This is useful for custom rules that need access to common settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"settings\": {\n\t\t\"sharedData\": \"Hello\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Suppression in Finally Block (JavaScript)\nDESCRIPTION: This example shows how a return statement in a finally block suppresses an error thrown in a try block. Instead of propagating the error, the function returns 3.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// We expect this function to throw an error, then return\n(() => {\n    try {\n        throw new Error(\"Try\"); // error is thrown but suspended until finally block ends\n    } finally {\n        return 3; // 3 is returned before the error is thrown, which we did not expect\n    }\n})();\n\n// > 3\n```\n\n----------------------------------------\n\nTITLE: Configuring arrow-body-style rule in ESLint (JSON)\nDESCRIPTION: Example of how to configure the 'arrow-body-style' rule in an ESLint configuration file. This snippet sets the rule to enforce braces around all arrow function bodies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"arrow-body-style\": [\"error\", \"always\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for CommonJS Projects\nDESCRIPTION: Configuration setup for CommonJS projects in eslint.config.js\nSOURCE: https://github.com/eslint/eslint/blob/main/packages/eslint-config-eslint/README.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst eslintConfigESLintCJS = require(\"eslint-config-eslint/cjs\");\n\nmodule.exports = [...eslintConfigESLintCJS];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'always' Option\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'always' option, which requires a space before function parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-function-paren: \"error\"*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function foo() {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n\nvar baz = async() => 1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Block-Level Functions in ES6 Strict Mode\nDESCRIPTION: Illustrates how block-level functions behave in ES6 with strict mode. In strict mode, functions declared in blocks are limited to the scope of that block, making them inaccessible from outside.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\nif (test) {\n    function doSomething () { }\n\n    doSomething(); // no error\n}\n\ndoSomething(); // error\n```\n\n----------------------------------------\n\nTITLE: enforceForClassFields Option - Correct Example (True)\nDESCRIPTION: Shows a class field initialized with an arrow function that uses 'this', complying with the rule when enforceForClassFields is true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"enforceForClassFields\": true }] */\n\nclass A {\n    foo = () => {this;}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Function Usage in JavaScript\nDESCRIPTION: This snippet shows examples of code that comply with the no-func-assign rule, including function expressions and shadowed variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-func-assign.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-func-assign: \"error\"*/\n\nlet foo = function () {}\nfoo = bar;\n\nfunction baz(baz) { // `baz` is shadowed.\n    baz = bar;\n}\n\nfunction qux() {\n    const qux = bar;  // `qux` is shadowed.\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of throw Statements in JavaScript\nDESCRIPTION: Examples of code that violate the no-throw-literal rule by throwing literals, primitives, or expressions that cannot be Error objects.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-throw-literal.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-throw-literal: \"error\"*/\n\nthrow \"error\";\n\nthrow 0;\n\nthrow undefined;\n\nthrow null;\n\nconst err = new Error();\nthrow \"an \" + err;\n// err is recast to a string literal\n\nconst er2 = new Error();\nthrow `${err2}`\n```\n\n----------------------------------------\n\nTITLE: Specifying Rules in ESLint CLI\nDESCRIPTION: The --rule flag specifies rules to be used, which merge with rules from configuration files. Plugin rules need to be prefixed with the plugin name. Can be combined with --no-eslintrc to ignore configuration files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--rule 'quotes: [error, double]'\n```\n\nLANGUAGE: bash\nCODE:\n```\n--rule 'guard-for-in: error' --rule 'brace-style: [error, 1tbs]'\n```\n\nLANGUAGE: bash\nCODE:\n```\n--rule 'jquery/dollar-sign: error'\n```\n\nLANGUAGE: bash\nCODE:\n```\n--rule 'quotes: [error, double]' --no-eslintrc\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of arguments Object in JavaScript\nDESCRIPTION: Examples showing incorrect usage of the arguments object that should be replaced with rest parameters. These patterns are flagged by the prefer-rest-params rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-rest-params.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-rest-params: \"error\"*/\n\nfunction foo() {\n    console.log(arguments);\n}\n\nfunction foo(action) {\n    const args = Array.prototype.slice.call(arguments, 1);\n    action.apply(null, args);\n}\n\nfunction foo(action) {\n    const args = [].slice.call(arguments, 1);\n    action.apply(null, args);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Plugins in ESLint CLI\nDESCRIPTION: The --plugin flag specifies a plugin to load. The eslint-plugin- prefix can be optionally omitted from the plugin name. Plugins must be installed via npm before use.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--plugin jquery file.js\n```\n\nLANGUAGE: bash\nCODE:\n```\n--plugin eslint-plugin-mocha file.js\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of require-jsdoc Rule in JavaScript\nDESCRIPTION: This snippet shows examples of code that correctly follows the 'require-jsdoc' rule, providing JSDoc comments for various function and class declarations as required by the rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-jsdoc.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint \"require-jsdoc\": [\"error\", {\n    \"require\": {\n        \"FunctionDeclaration\": true,\n        \"MethodDefinition\": true,\n        \"ClassDeclaration\": true,\n        \"ArrowFunctionExpression\": true,\n        \"FunctionExpression\": true\n    }\n}]*/\n\n/**\n * It returns 10\n */\nfunction foo() {\n    return 10;\n}\n\n/**\n * It returns test + 10\n * @params {number} test - some number\n * @returns {number} sum of test and 10\n */\nvar bar = (test) => {\n    return test + 10;\n}\n\n/**\n * It returns 10\n */\nvar bar = () => {\n    return 10;\n}\n\n/**\n * It returns 10\n */\nvar bar = function() {\n    return 10;\n}\n\nvar array = [1,2,3];\narray.filter(function(item) {\n    return item > 2;\n});\n\n/**\n * A class that can return the number 10\n */\nclass Foo {\n    /**\n    * It returns 10\n    */\n    bar() {\n        return 10;\n    }\n}\n\n/**\n * It returns 10\n */\nvar bar = function() {\n    return 10;\n};\n\nvar bar = {\n    /**\n    * It returns 10\n    */\n    bar: function() {\n        return 10;\n    },\n\n    /**\n    * It returns 10\n    */\n    baz() {\n        return 10;\n    }\n};\n\nsetTimeout(() => {}, 10); // since it's an anonymous arrow function\n```\n\n----------------------------------------\n\nTITLE: Function Declaration Indentation in JavaScript\nDESCRIPTION: Examples of function declaration indentation including parameters and body with FunctionDeclaration options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }]*/\n\nfunction foo(bar,\n    baz,\n    qux) {\n  qux();\n}\n```\n\n----------------------------------------\n\nTITLE: Using @eslint/js Package for Built-in Configs\nDESCRIPTION: Example of how to correctly use the @eslint/js package to access built-in configurations like 'recommended' and 'all' in ESLint v9.0.0.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport js from \"@eslint/js\";\n\nexport default [js.configs.recommended, js.configs.all];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Constructor Super Call Examples\nDESCRIPTION: Examples demonstrating invalid constructor implementations including missing super() calls and incorrect usage with null inheritance.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/constructor-super.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint constructor-super: \"error\"*/\n\nclass A extends B {\n    constructor() { }  // Would throw a ReferenceError.\n}\n\n// Classes which inherits from a non constructor are always problems.\nclass C extends null {\n    constructor() {\n        super();  // Would throw a TypeError.\n    }\n}\n\nclass D extends null {\n    constructor() { }  // Would throw a ReferenceError.\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Object.assign vs Object Spread Syntax in JavaScript\nDESCRIPTION: Examples of code patterns that violate the prefer-object-spread rule, showing various Object.assign calls that should be replaced with object spread syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-object-spread.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-object-spread: \"error\"*/\n\nObject.assign({}, foo);\n\nObject.assign({}, {foo: 'bar'});\n\nObject.assign({ foo: 'bar'}, baz);\n\nObject.assign({}, baz, { foo: 'bar' });\n\nObject.assign({}, { ...baz });\n\n// Object.assign with a single argument that is an object literal\nObject.assign({});\n\nObject.assign({ foo: bar });\n```\n\n----------------------------------------\n\nTITLE: Configuring the comma-dangle ESLint Rule\nDESCRIPTION: This JSON snippet shows how to configure the 'comma-dangle' rule in ESLint, including options for different types of syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"never\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing ternary conditional with logical OR in JavaScript\nDESCRIPTION: Examples showing how to replace a ternary expression with logical OR when the same variable is used as both the condition and the consequent, which provides simpler and more readable code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unneeded-ternary.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nfoo(bar ? bar : 1);\n\n// Good\nfoo(bar || 1);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Generator Functions with Complex Configuration\nDESCRIPTION: Examples of correctly formatted generator functions when using a complex configuration with overrides.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star-spacing.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint generator-star-spacing: [\"error\", {\n    \"before\": false,\n    \"after\": true,\n    \"anonymous\": \"neither\",\n    \"method\": {\"before\": true, \"after\": true}\n}]*/\n\nfunction* generator() {}\n\nvar anonymous = function*() {};\n\nvar shorthand = { * generator() {} };\n\nclass Class { static * method() {} }\n```\n\n----------------------------------------\n\nTITLE: Recursively Ignoring Directories in ESLint\nDESCRIPTION: This example demonstrates how to recursively ignore all directories with a specific name. It ignores all .config directories at any level in the project structure.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([globalIgnores([\"**/.config/\"]));\n```\n\n----------------------------------------\n\nTITLE: Using Template Literals in JavaScript\nDESCRIPTION: This example demonstrates the preferred approach of using template literals with embedded expressions instead of string concatenation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-template.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst str = `Hello, ${name}!`;\n```\n\n----------------------------------------\n\nTITLE: Correct usage of object-curly-spacing with 'never' option in JavaScript\nDESCRIPTION: Examples of code that comply with the 'object-curly-spacing' rule when set to 'never', showing correct spacing inside curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-curly-spacing: [\"error\", \"never\"]*/\n\nvar obj = {'foo': 'bar'};\nvar obj = {'foo': {'bar': 'baz'}, 'qux': 'quxx'};\nvar obj = {\n  'foo': 'bar'\n};\nvar obj = {'foo': 'bar'\n};\nvar obj = {\n  'foo':'bar'};\nvar obj = {};\nvar {x} = y;\nimport {foo} from 'bar';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Promise Executor Return Examples in JavaScript\nDESCRIPTION: Shows examples of code that violate the no-promise-executor-return rule. These include returning values from Promise executors, which is problematic because the returned values cannot be used and don't affect the promise.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-promise-executor-return.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-promise-executor-return: \"error\"*/\n\nnew Promise((resolve, reject) => {\n    if (someCondition) {\n        return defaultResult;\n    }\n    getSomething((err, result) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n\nnew Promise((resolve, reject) => getSomething((err, data) => {\n    if (err) {\n        reject(err);\n    } else {\n        resolve(data);\n    }\n}));\n\nnew Promise(() => {\n    return 1;\n});\n\nnew Promise(r => r(1));\n```\n\n----------------------------------------\n\nTITLE: Loading ESLint Implementations in JavaScript\nDESCRIPTION: Demonstrates how to use the loadESLint() function to load different ESLint implementations based on configuration preferences. It shows loading the default, flat config, and legacy versions of ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { loadESLint } = require(\"eslint\");\n\n// loads the default ESLint that the CLI would use based on process.cwd()\nconst DefaultESLint = await loadESLint();\n\n// loads the flat config version specifically\nconst FlatESLint = await loadESLint({ useFlatConfig: true });\n\n// loads the legacy version specifically\nconst LegacyESLint = await loadESLint({ useFlatConfig: false });\n```\n\n----------------------------------------\n\nTITLE: Correct RegExp Usage Examples\nDESCRIPTION: Examples of regular expressions that comply with the require-unicode-regexp rule by using u or v flags.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-unicode-regexp.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint require-unicode-regexp: error */\n\nconst a = /aaa/u\nconst b = /bbb/giu\nconst c = new RegExp(\"ccc\", \"u\")\nconst d = new RegExp(\"ddd\", \"giu\")\n\nconst e = /aaa/v\nconst f = /bbb/giv\nconst g = new RegExp(\"ccc\", \"v\")\nconst h = new RegExp(\"ddd\", \"giv\")\n\n// This rule ignores RegExp calls if the flags could not be evaluated to a static value.\nfunction i(flags) {\n    return new RegExp(\"eee\", flags)\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of 'this' with capIsConstructor option set to false\nDESCRIPTION: Example of code that complies with the 'no-invalid-this' rule when the 'capIsConstructor' option is set to false. This shows a valid use of 'this' in a method, even with a capitalized function name.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-this.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-invalid-this: [\"error\", { \"capIsConstructor\": false }]*/\n\n\"use strict\";\n\nobj.Foo = function Foo() {\n    // OK, this is in a method.\n    this.a = 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Object Property Ordering in JavaScript\nDESCRIPTION: Examples showing correct property ordering in objects according to the sort-keys rule. This includes alphabetically sorted properties, proper handling of case sensitivity, non-natural ordering, computed properties, and spread operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: \"error\"*/\n\nconst obj1 = {a: 1, b: 2, c: 3};\nconst obj2 = {a: 1, \"b\": 2, c: 3};\n\n// Case-sensitive by default.\nconst obj3 = {C: 3, a: 1, b: 2};\n\n// Non-natural order by default.\nconst obj4 = {1: a, 10: b, 2: c};\n\n// This rule checks computed properties which have a simple name as well.\nconst obj5 = {a: 1, [\"b\"]: 2, c: 3};\nconst obj6 = {a: 1, [b]: 2, c: 3};\n\n// This rule ignores computed properties which have a non-simple name.\nconst obj7 = {a: 1, [c + d]: 3, b: 2};\nconst obj8 = {a: 1, [\"c\" + \"d\"]: 3, b: 2};\nconst obj9 = {a: 1, [`${c}`]: 3, b: 2};\nconst obj10 = {a: 1, [tag`c`]: 3, b: 2};\n\n// This rule does not report unsorted properties that are separated by a spread property.\nconst obj11 = {b: 1, ...c, a: 2};\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript Code Exceeding Complexity Threshold\nDESCRIPTION: Examples of code that violates a maximum complexity rule setting of 2, including conditional paths, optional operators, and default parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/complexity.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n\nfunction b() {\n    foo ||= 1;\n    bar &&= 1;\n}\n\nfunction c(a = {}) { // default parameter -> 2nd path\n    const { b = 'default' } = a; // default value during destructuring -> 3rd path\n}\n\nfunction d(a) {\n    return a?.b?.c; // optional chaining with two optional properties creates two additional branches\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for ESLint Plugin\nDESCRIPTION: Complete package.json configuration for publishing an ESLint plugin to npm, including required fields and dependencies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"eslint-plugin-example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"ESLint plugin for enforce-foo-bar rule.\",\n  \"main\": \"eslint-plugin-example.js\",\n  \"scripts\": {\n    \"test\": \"node enforce-foo-bar.test.js\"\n  },\n  \"peerDependencies\": {\n    \"eslint\": \">=9.0.0\"\n  },\n  \"keywords\": [\n    \"eslint\",\n    \"eslintplugin\",\n    \"eslint-plugin\"\n  ],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"eslint\": \"^9.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Shadowing in JavaScript\nDESCRIPTION: Example showing variable shadowing where a local variable 'a' inside function 'b' shadows the global variable 'a'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 3;\nfunction b() {\n    const a = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cyclomatic Complexity Example in JavaScript\nDESCRIPTION: Demonstrates how cyclomatic complexity is calculated with a simple function containing three different code paths.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/complexity.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct require() Usage Patterns\nDESCRIPTION: Demonstrates proper ways to use require() at the top level of modules, including various initialization patterns and conditional requires.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/global-require.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire(\"x\");\nvar y = require(\"y\");\nvar z;\nz = require(\"z\").initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require(\"fs\");\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback);\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require(\"dev-logger\") : require(\"logger\");\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n----------------------------------------\n\nTITLE: Alternative Rule Configuration\nDESCRIPTION: JSON configuration using no-restricted-syntax instead of no-console\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-console.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-console\": \"off\",\n        \"no-restricted-syntax\": [\n            \"error\",\n            {\n                \"selector\": \"CallExpression[callee.object.name='console'][callee.property.name!=/^(log|warn|error|info|trace)$/]\",\n                \"message\": \"Unexpected property on console object was called\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recommended Plugin Structure in JavaScript\nDESCRIPTION: Shows the recommended structure for an ESLint plugin, including meta information, configs, rules, and processors. This structure works for both ESM and CommonJS modules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tmeta: {},\n\tconfigs: {},\n\trules: {},\n\tprocessors: {},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for no-else-return Rule in JavaScript\nDESCRIPTION: These examples show correct code that follows the 'no-else-return' rule, demonstrating proper use of if-else statements and avoiding unnecessary else blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-else-return.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-else-return: \"error\"*/\n\nfunction foo1() {\n    if (x) {\n        return y;\n    }\n\n    return z;\n}\n\nfunction foo2() {\n    if (x) {\n        return y;\n    } else if (z) {\n        const t = \"foo\";\n    } else {\n        return w;\n    }\n}\n\nfunction foo3() {\n    if (x) {\n        if (z) {\n            return y;\n        }\n    } else {\n        return z;\n    }\n}\n\nfunction foo4() {\n    if (error) {\n        return 'It failed';\n    } else if (loading) {\n        return \"It's still loading\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Math.pow in JavaScript\nDESCRIPTION: Examples of code that violate the prefer-exponentiation-operator rule by using Math.pow instead of the ** operator.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-exponentiation-operator.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-exponentiation-operator: \"error\"*/\n\nconst foo = Math.pow(2, 8);\n\nconst bar = Math.pow(a, b);\n\nlet baz = Math.pow(a + b, c + d);\n\nlet quux = Math.pow(-1, n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript ESLint Configuration Example in JSON\nDESCRIPTION: A JSON configuration file example that sets up ESLint to work with TypeScript. It configures the TypeScript parser, extends recommended rules, sets specific TypeScript rules, and defines patterns to ignore during linting.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"root\": true,\n\t\"extends\": [\"eslint:recommended\", \"plugin:@typescript-eslint/recommended\"],\n\t\"parser\": \"@typescript-eslint/parser\",\n\t\"parserOptions\": { \"project\": [\"./tsconfig.json\"] },\n\t\"plugins\": [\"@typescript-eslint\"],\n\t\"rules\": {\n\t\t\"@typescript-eslint/strict-boolean-expressions\": [\n\t\t\t2,\n\t\t\t{\n\t\t\t\t\"allowString\": false,\n\t\t\t\t\"allowNumber\": false\n\t\t\t}\n\t\t]\n\t},\n\t\"ignorePatterns\": [\"src/**/*.test.ts\", \"src/frontend/generated/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Arrow Functions According to no-confusing-arrow Rule\nDESCRIPTION: These examples demonstrate code that would be flagged as incorrect by the no-confusing-arrow ESLint rule. The arrow functions could be mistaken for comparison operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-confusing-arrow.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-confusing-arrow: \"error\"*/\n\nvar x = a => 1 ? 2 : 3;\nvar x = (a) => 1 ? 2 : 3;\n```\n\n----------------------------------------\n\nTITLE: Object Comparison Issue Example in JavaScript\nDESCRIPTION: Demonstrates how comparing against newly constructed objects will always return false due to reference comparison.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-binary-expression.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Programmers coming from a language where objects are compared by value might expect this to work:\nconst isEmpty = x === [];\n\n// However, this will always result in `isEmpty` being `false`.\n```\n\n----------------------------------------\n\nTITLE: ASI hazard with return statements\nDESCRIPTION: Example demonstrating how ASI can unexpectedly change code behavior with return statements, causing an object literal to be unreachable code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn\n{\n    name: \"ESLint\"\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'single' and 'allowTemplateLiterals' Options\nDESCRIPTION: Shows code that complies with the 'single' quotes rule with allowTemplateLiterals option, allowing both single quotes and backticks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"single\", { \"allowTemplateLiterals\": true }]*/\n\nvar single = 'single';\nvar single = `single`;\n```\n\n----------------------------------------\n\nTITLE: Detecting Unreachable Instance Fields in Subclass Without super() Call\nDESCRIPTION: Example showing unreachable instance field definitions in a subclass that doesn't call super() in its constructor. The private field will never be added to instances.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass C extends B {\n    #x; // this will never be added to instances\n\n    constructor() {\n        return {};\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Function.prototype.call() and apply() in JavaScript\nDESCRIPTION: Examples of code that violate the no-useless-call rule by using .call() and .apply() unnecessarily, where normal function invocation would be equivalent and more performant.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-call.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-call: \"error\"*/\n\n// These are same as `foo(1, 2, 3);`\nfoo.call(undefined, 1, 2, 3);\nfoo.apply(undefined, [1, 2, 3]);\nfoo.call(null, 1, 2, 3);\nfoo.apply(null, [1, 2, 3]);\n\n// These are same as `obj.foo(1, 2, 3);`\nobj.foo.call(obj, 1, 2, 3);\nobj.foo.apply(obj, [1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Suppressing All ESLint Violations\nDESCRIPTION: Example demonstrating how to suppress all existing violations using the --suppress-all flag.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n\"src/**/*.js\" --suppress-all\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'always' and 'empty' Exception\nDESCRIPTION: Examples of code that would be considered correct when using the 'always' option with an exception for empty parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples\nDESCRIPTION: Examples of code that violates the no-eval rule, including direct eval calls and various eval invocation patterns\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eval.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-eval: \"error\"*/\n\nconst obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);\n\n(0, eval)(\"const a = 0\");\n\nconst foo = eval;\nfoo(\"const a = 0\");\n\n// This `this` is the global object.\nthis.eval(\"const a = 0\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage with includeExports Option in JavaScript\nDESCRIPTION: This snippet shows the correct way to handle imports and exports from the same module when the includeExports option is set to true. It combines the import and export into a single import statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-imports.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-duplicate-imports: [\"error\", { \"includeExports\": true }]*/\n\nimport { merge, find } from 'module';\n\nexport { find };\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Array Creation in JavaScript\nDESCRIPTION: Examples of code that comply with the no-array-constructor rule in JavaScript. These show proper ways to create arrays or use the Array constructor for specific purposes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-array-constructor.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-array-constructor: \"error\"*/\n\nArray(500);\n\nnew Array(someOtherArray.length);\n\n[0, 1, 2];\n\nconst createArray = Array => new Array();\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of curly braces with 'multi-line' option in JavaScript\nDESCRIPTION: Examples of code that violate the 'curly' rule when set to the 'multi-line' option. This option requires braces for multi-line blocks but allows single-line blocks without braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint curly: [\"error\", \"multi-line\"]*/\n\nif (foo)\n  doSomething();\nelse\n  doSomethingElse();\n\nif (foo) foo(\n  bar,\n  baz);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for prefer-object-has-own Rule\nDESCRIPTION: These code snippets show correct usage according to the prefer-object-has-own ESLint rule. They demonstrate the proper use of Object.hasOwn() to check for object property ownership.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-object-has-own.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-object-has-own: \"error\"*/\n\nObject.hasOwn(obj, \"a\");\n\nconst hasProperty = Object.hasOwn(object, property);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dead Store in JavaScript\nDESCRIPTION: This snippet shows an example of a 'dead store' where a variable is assigned a value that is never read.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-assignment.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet id = \"x1234\";    // this is a \"dead store\" - this value (\"x1234\") is never read\n\nid = generateId();\n\ndoSomethingWith(id);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Object Construction in JavaScript\nDESCRIPTION: Examples of code that comply with the no-object-constructor rule by either using the Object constructor with arguments, using object literal notation, or using the Object constructor in other valid contexts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-object-constructor.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-object-constructor: \"error\"*/\n\nObject(\"foo\");\n\nconst obj = { a: 1, b: 2 };\n\nconst isObject = value => value === Object(value);\n\nconst createObject = Object => new Object();\n```\n\n----------------------------------------\n\nTITLE: Running ESLint with a Formatter\nDESCRIPTION: Shell command demonstrating how to run ESLint with a specific formatter using the --format flag. The command will lint the fullOfProblems.js file and output the results in the specified format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx eslint --format <Add formatter here> fullOfProblems.js\n```\n\n----------------------------------------\n\nTITLE: Examples of code that trigger the rule with allowUnboundThis set to false\nDESCRIPTION: These examples show code that would trigger the rule when the 'allowUnboundThis' option is set to false, which prohibits function expressions as callbacks even if they contain unbound this references.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-arrow-callback.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint prefer-arrow-callback: [ \"error\", { \"allowUnboundThis\": false } ] */\n\nfoo(function() { this.a; });\n\nfoo(function() { (() => this); });\n\nsomeArray.map(function(item) { return this.doSomething(item); }, someObject);\n```\n\n----------------------------------------\n\nTITLE: Correct Switch Statement Examples without Duplicate Cases\nDESCRIPTION: Examples showing correct usage of switch statements where each case clause has a unique test expression.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-case.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-duplicate-case: \"error\"*/\n\nconst a = 1,\n    one = 1;\n\nswitch (a) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case one:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case \"1\":\n        break;\n    case \"2\":\n        break;\n    case \"3\":\n        break;\n    default:\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of try-catch in JavaScript\nDESCRIPTION: Examples of code that violate the no-useless-catch rule by using catch clauses that only rethrow the caught error without any additional processing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-catch.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-catch: \"error\"*/\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  throw e;\n}\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  throw e;\n} finally {\n  cleanUp();\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Duplicate Keys in JavaScript Object Literals\nDESCRIPTION: This snippet shows an example of duplicate keys in an object literal, which is considered incorrect usage and can lead to unexpected behavior.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-keys.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Function Style Examples\nDESCRIPTION: Demonstrates the different ways to define functions in JavaScript including function declarations, arrow functions, and function expressions\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-style.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// function declaration\nfunction doSomething() {\n    // ...\n}\n\n// arrow function expression assigned to a variable\nconst doSomethingElse = () => {\n    // ...\n};\n\n// function expression assigned to a variable\nconst doSomethingAgain = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Array Bracket Newline Rule - Multiline Option Examples\nDESCRIPTION: Examples demonstrating usage with the multiline option, which requires line breaks if there are line breaks inside elements or between elements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-newline.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", { \"multiline\": true }]*/\n\nconst a = [\n];\nconst b = [\n    1\n];\nconst c = [\n    1, 2\n];\nconst d = [1,\n    2];\nconst e = [function foo() {\n    dosomething();\n}];\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", { \"multiline\": true }]*/\n\nconst a = [];\nconst b = [1];\nconst c = [1, 2];\nconst d = [\n    1,\n    2\n];\nconst e = [\n    function foo() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Correct For Loop Direction Examples in JavaScript\nDESCRIPTION: These examples show for loops that comply with the 'for-direction' rule by having counter variables that change in a way that allows the stop condition to be met, avoiding potential infinite loops.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/for-direction.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint for-direction: \"error\"*/\nfor (let i = 0; i < 10; i++) {\n}\n\nfor (let i = 0; 10 > i; i++) { // with counter \"i\" on the right\n}\n\nfor (let i = 10; i >= 0; i += this.step) { // direction unknown\n}\n\nfor (let i = MIN; i <= MAX; i -= 0) { // not increasing or decreasing\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Array Bracket Spacing Examples in JavaScript\nDESCRIPTION: Examples showing the two main spacing styles (with and without spaces) for array literals and destructuring assignments that this rule controls.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = [ 'foo', 'bar' ];\nvar [ x, y ] = z;\n\nvar arr = ['foo', 'bar'];\nvar [x,y] = z;\n```\n\n----------------------------------------\n\nTITLE: Correct examples for 'omitLastInOneLineClassBody' option\nDESCRIPTION: Examples of valid code when using the 'omitLastInOneLineClassBody' option, which allows omitting semicolons at the end of one-line class bodies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi: [\"error\", \"always\", { \"omitLastInOneLineClassBody\": true}] */\n\nexport class SomeClass{\n    logType(){\n        console.log(this.type);\n        console.log(this.anotherType);\n    }\n}\n\nexport class Variant1 extends SomeClass{type=1}\nexport class Variant2 extends SomeClass{type=2; anotherType=3}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples\nDESCRIPTION: Demonstrates valid use cases including proper ES6 numeric literals and acceptable uses of parseInt() functions that don't trigger the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-numeric-literals.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-numeric-literals: \"error\"*/\n\nparseInt(1);\nparseInt(1, 3);\nNumber.parseInt(1);\nNumber.parseInt(1, 3);\n\n0b111110111 === 503;\n0o767 === 503;\n0x1F7 === 503;\n\na[parseInt](1,2);\n\nparseInt(foo);\nparseInt(foo, 2);\nNumber.parseInt(foo);\nNumber.parseInt(foo, 2);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Accessor Pairs with getWithoutSet Option\nDESCRIPTION: These examples demonstrate correct implementations that satisfy the 'accessor-pairs' rule with the 'getWithoutSet' option enabled, showing objects with both getters and setters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/accessor-pairs.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint accessor-pairs: [\"error\", { \"getWithoutSet\": true }]*/\nconst y = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n\nconst z = {d: 1};\nObject.defineProperty(z, 'c', {\n    set: function(value) {\n        this.val = value;\n    },\n    get: function() {\n        return this.val;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Error Handling with ESLint Rule (JavaScript)\nDESCRIPTION: These examples demonstrate correct error handling in Node.js callbacks, complying with the 'handle-callback-err' rule. The error is properly checked and handled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/handle-callback-err.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint handle-callback-err: \"error\"*/\n\nfunction loadData (err, data) {\n    if (err) {\n        console.log(err.stack);\n    }\n    doSomething();\n}\n\nfunction generateError (err) {\n    if (err) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring no-implicit-coercion Rule to Maintain Previous Behavior\nDESCRIPTION: Configuration example for the 'no-implicit-coercion' rule to retain the behavior from ESLint v8.x by allowing unary and double unary negation operations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"no-implicit-coercion\": [2, { \"allow\": [\"-\", \"- -\"] }]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for Default Configuration\nDESCRIPTION: Examples of code patterns that would be flagged as errors with the default configuration options (allowShortCircuit: false, allowTernary: false).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: \"error\"*/\n\n0\n\nif(0) 0\n\n{0}\n\nf(0), {}\n\na && b()\n\na, b()\n\nc = a, b;\n\na() && function namedFunctionInExpressionContext () {f();}\n\n(function anIncompleteIIFE () {});\n\ninjectGlobal`body{ color: red; }`\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of JSX Comments\nDESCRIPTION: Examples of JSX code that complies with the no-inline-comments rule by placing comments in their own braces and on separate lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inline-comments.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n/*eslint no-inline-comments: \"error\"*/\n\nconst foo = (\n    <div>\n      {/* These braces are just for this comment and there is nothing else on this line */}\n      <h1>Some heading</h1>\n    </div>\n)\n\nconst bar = (\n    <div>\n    {\n        // There is nothing else on this line\n        baz\n    }\n    </div>\n);\n\nconst quux = (\n    <div>\n      {/*\n        Multiline\n        comment\n      */}\n      <h1>Some heading</h1>\n    </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of the no-import-assign ESLint Rule in JavaScript\nDESCRIPTION: Examples showing code that violates the no-import-assign rule by attempting to reassign imported bindings or modify namespace objects. These operations cause runtime errors as imported bindings are readonly.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-import-assign.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-import-assign: \"error\"*/\n\nimport mod, { named } from \"./mod.mjs\"\nimport * as mod_ns from \"./mod.mjs\"\n\nmod = 1          // ERROR: 'mod' is readonly.\nnamed = 2        // ERROR: 'named' is readonly.\nmod_ns.named = 3 // ERROR: The members of 'mod_ns' are readonly.\nmod_ns = {}      // ERROR: 'mod_ns' is readonly.\n// Can't extend 'mod_ns'\nObject.assign(mod_ns, { foo: \"foo\" }) // ERROR: The members of 'mod_ns' are readonly.\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Variable Declarations in JavaScript\nDESCRIPTION: Examples of code that comply with the 'vars-on-top' rule by declaring variables at the top of their containing scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/vars-on-top.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint vars-on-top: \"error\"*/\n\nfunction doSomething() {\n    var first;\n    var second; //multiple declarations are allowed at the top\n    if (true) {\n        first = true;\n    }\n}\n\nfunction doSomethingElse() {\n    var i;\n    for (i=0; i<10; i++) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint vars-on-top: \"error\"*/\n\nvar a;\nf();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint vars-on-top: \"error\"*/\n\nclass C {\n\n    static {\n        var a;\n        if (something) {\n            a = true;\n        }\n    }\n\n    static {\n        var a;\n        f();\n    }\n\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint vars-on-top: \"error\"*/\n\n// Directives may precede variable declarations.\n\"use strict\";\nvar a;\nf();\n\n// Comments can describe variables.\nfunction doSomething() {\n    // this is the first var.\n    var first;\n    // this is the second var.\n    var second\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with anonymous:never and named:always\nDESCRIPTION: Examples showing correct code when anonymous functions should have no space and named functions should have a space before parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"never\", \"named\": \"always\" }]*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Correct usage of 'this' in JavaScript strict mode\nDESCRIPTION: Examples of code that comply with the 'no-invalid-this' rule in JavaScript strict mode. These snippets demonstrate valid uses of 'this' in constructors, methods, class fields, and other allowed contexts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-this.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-invalid-this: \"error\"*/\n\n\"use strict\";\n\nthis.a = 0;\nbaz(() => this);\n\nfunction Foo() {\n    // OK, this is in a legacy style constructor.\n    this.a = 0;\n    baz(() => this);\n}\n\nclass Bar {\n    constructor() {\n        // OK, this is in a constructor.\n        this.a = 0;\n        baz(() => this);\n    }\n}\n\nconst obj = {\n    foo: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n};\n\nconst obj1 = {\n    foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n};\n\nconst obj2 = {\n    get foo() {\n        // OK, this is in a method (this function is on object literal).\n        return this.a;\n    }\n};\n\nconst obj3 = Object.create(null, {\n    foo: {value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }}\n});\n\nObject.defineProperty(obj, \"foo\", {\n    value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n});\n\nObject.defineProperties(obj, {\n    foo: {value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }}\n});\n\nfunction Foo() {\n    this.foo = function foo() {\n        // OK, this is in a method (this function assigns to a property).\n        this.a = 0;\n        baz(() => this);\n    };\n}\n\nobj.foo = function foo() {\n    // OK, this is in a method (this function assigns to a property).\n    this.a = 0;\n};\n\nFoo.prototype.foo = function foo() {\n    // OK, this is in a method (this function assigns to a property).\n    this.a = 0;\n};\n\nclass Baz {\n\n    // OK, this is in a class field initializer.\n    a = this.b;\n\n    // OK, static initializers also have valid this.\n    static a = this.b;\n\n    foo() {\n        // OK, this is in a method.\n        this.a = 0;\n        baz(() => this);\n    }\n\n    static foo() {\n        // OK, this is in a method (static methods also have valid this).\n        this.a = 0;\n        baz(() => this);\n    }\n\n    static {\n        // OK, static blocks also have valid this.\n        this.a = 0;\n        baz(() => this);\n    }\n}\n\nconst bar = (function foo() {\n    // OK, the `bind` method of this function is called directly.\n    this.a = 0;\n}).bind(obj);\n\nfoo.forEach(function() {\n    // OK, `thisArg` of `.forEach()` is given.\n    this.a = 0;\n    baz(() => this);\n}, thisArg);\n\n/** @this Foo */\nfunction foo() {\n    // OK, this function has a `@this` tag in its JSDoc comment.\n    this.a = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for 'never' option\nDESCRIPTION: Examples of code that would trigger the object-curly-newline rule when configured with the 'never' option, which disallows line breaks after opening and before closing braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", \"never\"]*/\n\nlet a = {\n};\nlet b = {\n    foo: 1\n};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {\n} = obj;\nlet {\n    f\n} = obj;\nlet {\n    g, h\n} = obj;\nlet {\n    i,\n    j\n} = obj;\nlet {\n    k = function() {\n        dosomething();\n    }\n} = obj;\n```\n\n----------------------------------------\n\nTITLE: Examples of Incorrect Code with no-useless-rename Rule\nDESCRIPTION: JavaScript code examples that would trigger the no-useless-rename rule by using redundant renaming in different contexts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-rename.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-rename: \"error\"*/\n\nimport { foo1 as foo1 } from \"bar\";\nimport { \"foo2\" as foo2 } from \"bar\";\nexport { foo1 as foo1 };\nexport { foo2 as \"foo2\" };\nexport { foo3 as foo3 } from \"bar\";\nexport { \"foo4\" as \"foo4\" } from \"bar\";\nlet { foo3: foo3 } = bar;\nlet { 'foo4': foo4 } = bar;\nfunction foo({ bar: bar }) {}\n({ foo: foo }) => {}\n```\n\n----------------------------------------\n\nTITLE: Using globalIgnores Helper Function in ESLint\nDESCRIPTION: Demonstrates the use of globalIgnores() helper function for clearer indication of global ignore patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\n// Example of global ignores\nexport default defineConfig([\n    globalIgnores([\".config/\", \"dist/\", \"tsconfig.json\"]),\n    { ... }, // ... other configuration object, inherit global ignores\n    { ... }, // ... other configuration object inherit global ignores\n]);\n\n// Example of non-global ignores\nexport default defineConfig([\n    {\n      ignores: [\".config/**\", \"dir1/script1.js\"],\n      rules: { ... } // the presence of this property dictates non-global ignores\n    },\n    {\n      ignores: [\"other-dir/**\", \"dist/script2.js\"],\n      rules: { ... } // the presence of this property dictates non-global ignores\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unnecessary Escapes in JavaScript\nDESCRIPTION: Examples showing how escaping non-special characters doesn't change the output in strings, template literals, and regular expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-escape.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet foo = \"hol\\a\"; // > foo = \"hola\"\nlet bar = `${foo}\\!`; // > bar = \"hola!\"\nlet baz = /\\:/ // same functionality with /:/\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Global Objects in JavaScript\nDESCRIPTION: Examples of incorrect code that violate the no-obj-calls rule by calling Math, JSON, Reflect, Atomics, and Intl as functions or using them with the 'new' operator.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-obj-calls.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-obj-calls: \"error\"*/\n\nconst math = Math();\n\nconst newMath = new Math();\n\nconst json = JSON();\n\nconst newJSON = new JSON();\n\nconst reflect = Reflect();\n\nconst newReflect = new Reflect();\n\nconst atomics = Atomics();\n\nconst newAtomics = new Atomics();\n\nconst intl = Intl();\n\nconst newIntl = new Intl();\n```\n\n----------------------------------------\n\nTITLE: Correct usage of curly braces with 'multi' and 'consistent' options in JavaScript\nDESCRIPTION: Examples of code that comply with the 'curly' rule when set to 'multi' and 'consistent' options. This shows consistent use of braces across if-else chains.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint curly: [\"error\", \"multi\", \"consistent\"]*/\n\nif (foo) {\n    bar();\n    baz();\n} else {\n    buz();\n}\n\nif (foo) {\n    bar();\n} else if (faa) {\n    bor();\n} else {\n    other();\n    things();\n}\n\nif (true)\n    foo();\nelse\n    baz();\n\nif (foo)\n    foo++;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Smart-Tabs Option in JavaScript\nDESCRIPTION: Example of code that uses the 'smart-tabs' option, which allows mixing tabs and spaces when the spaces are used for alignment purposes. The variable declarations use tabs for indentation and spaces for alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-spaces-and-tabs.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-mixed-spaces-and-tabs: [\"error\", \"smart-tabs\"]*/\n\nfunction main() {\n\tvar x = 5,\n\t    y = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Array Constructor with TypeScript Syntax\nDESCRIPTION: Examples of code that comply with the no-array-constructor rule in TypeScript. These demonstrate valid uses of Array with TypeScript type annotations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-array-constructor.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint no-array-constructor: \"error\"*/\n\nnew Array<number>(1, 2, 3);\n\nnew Array<Foo>();\n\nArray<number>(1, 2, 3);\n\nArray<Foo>();\n\nArray?.foo();\n```\n\n----------------------------------------\n\nTITLE: Configuring Pattern Groups With Custom Messages\nDESCRIPTION: Configuration that uses the 'group' property to specify gitignore-style patterns with custom error messages for each pattern group.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"group\": [\"import1/private/*\"],\n      \"message\": \"usage of import1 private modules not allowed.\"\n    }, {\n      \"group\": [\"import2/*\", \"!import2/good\"],\n      \"message\": \"import2 is deprecated, except the modules in import2/good.\"\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Using Object.prototype.hasOwnProperty.call() in JavaScript\nDESCRIPTION: This snippet demonstrates the common practice of using Object.prototype.hasOwnProperty.call() to check if an object has a specific property. This method is often used to avoid issues with unavailable or redefined Object.prototype methods.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-object-has-own.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (Object.prototype.hasOwnProperty.call(object, \"foo\")) {\n  console.log(\"has property foo\");\n}\n```\n\n----------------------------------------\n\nTITLE: Block-level Functions with no-inner-declarations Rule\nDESCRIPTION: Example showing the new default behavior of the 'no-inner-declarations' rule in ESLint v9.0.0, which allows block-level functions in strict mode with ES2015+ language settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inner-declarations: \"error\"*/\n\"use strict\";\n\nif (test) {\n\tfunction foo() {} // no error\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Error Handling in Node.js Callback (JavaScript)\nDESCRIPTION: This snippet demonstrates incorrect usage where the error parameter in a callback function is not handled, which can lead to unexpected behavior in Node.js applications.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/handle-callback-err.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction loadData (err, data) {\n    doSomething(); // forgot to handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Correct code for ObjectExpression and ObjectPattern options\nDESCRIPTION: Examples of code that correctly follows the object-curly-newline rule when ObjectExpression is set to 'always' and ObjectPattern to 'never', showing proper formatting for different syntax constructs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", { \"ObjectExpression\": \"always\", \"ObjectPattern\": \"never\" }]*/\n\nlet a = {\n};\nlet b = {\n    foo: 1\n};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {} = obj;\nlet {f} = obj;\nlet {g, h} = obj;\nlet {i,\n    j} = obj;\nlet {k = function() {\n    dosomething();\n}} = obj;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Imports in JavaScript\nDESCRIPTION: This snippet shows the correct way to import from multiple modules, combining imports from the same module into a single statement. It adheres to the no-duplicate-imports rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-imports.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-duplicate-imports: \"error\"*/\n\nimport { merge, find } from 'module';\nimport something from 'another-module';\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Promise Rejection in JavaScript\nDESCRIPTION: Examples of correct code that comply with the 'prefer-promise-reject-errors' rule by rejecting Promises with Error objects or unknown values.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-promise-reject-errors.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-promise-reject-errors: \"error\"*/\n\nPromise.reject(new Error(\"something bad happened\"));\n\nPromise.reject(new TypeError(\"something bad happened\"));\n\nnew Promise(function(resolve, reject) {\n  reject(new Error(\"something bad happened\"));\n});\n\nconst foo = getUnknownValue();\nPromise.reject(foo);\n```\n\n----------------------------------------\n\nTITLE: Configuring File Extensions in ESLint Flat Config\nDESCRIPTION: Example of how to specify file patterns for TypeScript files in the new flat config format, replacing the --ext command line flag functionality.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nexport default [\n\t{\n\t\tfiles: [\"**/*.ts\", \"**/*.tsx\"],\n\n\t\t// any additional configuration for these file types here\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Getter with Implicit Return (ESLint Rule Option)\nDESCRIPTION: Shows a getter implementation that implicitly returns undefined, which is allowed when the 'allowImplicit' option is set to true in the ESLint rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/getter-return.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint getter-return: [\"error\", { allowImplicit: true }]*/\nconst p = {\n    get name(){\n        return; // return undefined implicitly.\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for no-use-before-define Rule in JavaScript\nDESCRIPTION: This snippet demonstrates various cases where identifiers are used before they are declared, which violates the no-use-before-define rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-use-before-define: \"error\"*/\n\nalert(a);\nvar a = 10;\n\nf();\nfunction f() {}\n\nfunction g() {\n    return b;\n}\nvar b = 1;\n\n{\n    alert(c);\n    let c = 1;\n}\n\n{\n    class C extends C {}\n}\n\n{\n    class C {\n        static x = \"foo\";\n        [C.x]() {}\n    }\n}\n\n{\n    const C = class {\n        static x = C;\n    }\n}\n\n{\n    const C = class {\n        static {\n            C.x = \"foo\";\n        }\n    }\n}\n\nexport { foo };\nconst foo = 1;\n```\n\n----------------------------------------\n\nTITLE: Unicode Case Folding Example\nDESCRIPTION: Demonstrates how the u flag can affect behavior when used with i flag and \\w character class due to Unicode case folding.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-unicode-regexp.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst regexWithoutU = /^\\w+$/i;\nconst regexWithU = /^\\w+$/iu;\n\nconst str = \"\\u017f\\u212a\"; // Example Unicode characters\n\nconsole.log(regexWithoutU.test(str)); // false\nconsole.log(regexWithU.test(str)); // true\n```\n\n----------------------------------------\n\nTITLE: Configuring require-jsdoc Rule in ESLint\nDESCRIPTION: This JSON snippet shows the default configuration options for the 'require-jsdoc' rule in ESLint. It specifies which types of nodes require JSDoc comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-jsdoc.md#2025-04-14_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"require-jsdoc\": [\"error\", {\n        \"require\": {\n            \"FunctionDeclaration\": true,\n            \"MethodDefinition\": false,\n            \"ClassDeclaration\": false,\n            \"ArrowFunctionExpression\": false,\n            \"FunctionExpression\": false\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with allowForLoopAfterthoughts Option\nDESCRIPTION: Examples of valid code when the allowForLoopAfterthoughts option is enabled, allowing increment/decrement operators in for loop afterthoughts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-plusplus.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }]*/\n\nfor (i = 0; i < l; i++) {\n    doSomething(i);\n}\n\nfor (i = l; i >= 0; i--) {\n    doSomething(i);\n}\n\nfor (i = 0, j = l; i < l; i++, j--) {\n    doSomething(i, j);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating IE8 catch parameter shadowing issue\nDESCRIPTION: Shows how catch clause parameters can unexpectedly overwrite outer scope variables in IE 8 and earlier versions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-catch-shadow.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar err = \"x\";\n\ntry {\n    throw \"problem\";\n} catch (err) {\n\n}\n\nconsole.log(err)    // err is 'problem', not 'x'\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint 'indent' Rule for Tab Indentation\nDESCRIPTION: JSON configuration example for setting the 'indent' rule to enforce tab indentation in ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"indent\": [\"error\", \"tab\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Useful Renaming in JavaScript ES2015\nDESCRIPTION: Examples of proper variable renaming in import/export statements and destructuring assignments where the renamed variable has a different name than the original.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-rename.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { foo as bar } from \"baz\";\nexport { foo as bar };\nlet { foo: bar } = baz;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code for hoist:all Option\nDESCRIPTION: Example showing code that incorrectly shadows variables when the hoist option is set to 'all', which reports all shadowing before outer variables/functions are defined.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-shadow: [\"error\", { \"hoist\": \"all\" }]*/\n\nif (true) {\n    const a = 3;\n    const b = 6;\n}\n\nconst a = 5;\nfunction b() {}\n```\n\n----------------------------------------\n\nTITLE: Comparing ternary boolean assignment with direct boolean comparison in JavaScript\nDESCRIPTION: Examples demonstrating the unnecessary use of ternary operators for boolean values, where direct comparison is cleaner. Shows how to properly assign boolean values based on conditions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unneeded-ternary.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nconst isYes = answer === 1 ? true : false;\n\n// Good\nconst isYes = answer === 1;\n\n// Bad\nconst isNo = answer === 1 ? false : true;\n\n// Good\nconst isNo = answer !== 1;\n```\n\n----------------------------------------\n\nTITLE: Correct usage of curly braces with 'multi' option in JavaScript\nDESCRIPTION: Examples of code that comply with the 'curly' rule when set to the 'multi' option. This shows proper use of braces for multi-statement blocks and no braces for single-statement blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint curly: [\"error\", \"multi\"]*/\n\nif (foo) foo++;\n\nelse foo();\n\nwhile (true) {\n    doSomething();\n    doSomethingElse();\n}\n```\n\n----------------------------------------\n\nTITLE: Regular Expression with 'v' Flag in ECMAScript 2024\nDESCRIPTION: A correct example of using a regular expression with the 'v' flag in ECMAScript 2024. This snippet showcases a feature proposed for future JavaScript versions.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/good-examples.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nlet x = /a/v;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage (Compliant with no-octal Rule)\nDESCRIPTION: Example of code that complies with the no-octal rule by using a string representation instead of an octal literal, avoiding the leading zero numeric interpretation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-octal.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-octal: \"error\"*/\n\nconst num  = \"071\";\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for class-methods-use-this Rule\nDESCRIPTION: Shows valid code patterns that comply with the rule: methods using 'this', constructors, static methods, and static blocks, which are exempt from the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint class-methods-use-this: \"error\"*/\n\nclass A {\n    foo() {\n        this.bar = \"Hello World\"; // OK, this is used\n    }\n}\n\nclass B {\n    constructor() {\n        // OK. constructor is exempt\n    }\n}\n\nclass C {\n    static foo() {\n        // OK. static methods aren't expected to use this.\n    }\n\n    static {\n        // OK. static blocks are exempt.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Duplicate Function Parameters in JavaScript\nDESCRIPTION: Examples of incorrect code that violate the no-dupe-args rule by using duplicate parameter names in function declarations and expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-args.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-dupe-args: \"error\"*/\n\nfunction foo(a, b, a) {\n    console.log(\"value of the second a:\", a);\n}\n\nconst bar = function (a, b, a) {\n    console.log(\"value of the second a:\", a);\n};\n```\n\n----------------------------------------\n\nTITLE: Correct usage with requireReturnForObjectLiteral option (JavaScript)\nDESCRIPTION: Demonstrates correct usage when 'requireReturnForObjectLiteral' is true. Empty object can be returned implicitly, but non-empty objects require explicit return.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n/*eslint arrow-body-style: [\"error\", \"as-needed\", { \"requireReturnForObjectLiteral\": true }]*/\n\nconst foo = () => {};\n\nconst bar = () => { return { bar: 0 }; };\n```\n\n----------------------------------------\n\nTITLE: Project Structure with Configuration Cascading\nDESCRIPTION: Example showing a project structure with multiple configuration files demonstrating how ESLint's configuration cascade works. The configuration closest to the file being linted takes precedence.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nyour-project\n├── .eslintrc.json\n├── lib\n│ └── source.js\n└─┬ tests\n  ├── .eslintrc.json\n  └── test.js\n```\n\n----------------------------------------\n\nTITLE: Tab Width Configuration Example (JavaScript)\nDESCRIPTION: Demonstrates the tabWidth option with proper indentation using tab width of 4.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-len.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-len: [\"error\", { \"code\": 80, \"tabWidth\": 4 }]*/\n\n\t\tvar foo = {\n\t\t\t\t\"bar\": \"This is a bar.\",\n\t\t\t\t\"baz\": { \"qux\": \"This is a qux\" }\n\t\t};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Arrow Functions with 'always' Option (JavaScript)\nDESCRIPTION: Examples of correct code for the 'arrow-parens' rule with the default 'always' option, demonstrating proper use of parentheses in various arrow function scenarios.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-parens: [\"error\", \"always\"]*/\n\n() => {};\n(a) => {};\n(a) => a;\n(a) => {'\\n'}\na.then((foo) => {});\na.then((foo) => { if (true) {} });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Primitive Wrapper Behavior in JavaScript\nDESCRIPTION: This snippet shows how primitive values can use object-like methods without explicit wrapper creation, and how manually created wrapper objects behave differently from primitives.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-wrappers.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = \"Hello world\".substring(2);\n\nconst stringObject = new String(\"Hello world\");\nconst numberObject = new Number(33);\nconst booleanObject = new Boolean(false);\n\nconst stringObject = new String(\"Hello world\");\nconsole.log(typeof stringObject);       // \"object\"\n\nconst text = \"Hello world\";\nconsole.log(typeof text);               // \"string\"\n\nconst booleanObject = new Boolean(false);\nif (booleanObject) {    // all objects are truthy!\n    console.log(\"This executes\");\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect require() Usage Patterns\nDESCRIPTION: Shows various incorrect patterns of using require() that violate the global-require rule, including usage in functions, conditionals, and try-catch blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/global-require.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint global-require: \"error\"*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require(\"fs\");\n    fs.readFile(filename, callback);\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) {\n    require(\"debug\");\n}\n\n// a require() in a switch statement is also flagged\nswitch (x) {\n    case \"1\":\n        require(\"1\");\n        break;\n}\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) {\n    return require(name);\n}\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch (e) {\n    console.log(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Permanently Disabling a Rule in a File\nDESCRIPTION: Shows how to permanently disable a rule in a file regardless of any future enable/disable lines. This uses the rule configuration syntax rather than the disable directive.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-alert: \"off\" */\n\nalert(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Nested Ternary Expressions in JavaScript\nDESCRIPTION: These examples demonstrate code that violates the no-nested-ternary rule. They show nested ternary expressions in variable assignments and function calls, which are considered incorrect under this rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-nested-ternary.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-nested-ternary: \"error\"*/\n\nconst thing = foo ? bar : baz === qux ? quxx : foobar;\n\nfoo ? baz === qux ? quxx() : foobar() : bar();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Examples - Incorrect Implementation\nDESCRIPTION: Examples showing incorrect usage where getters and setters are not grouped together in objects and classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/grouped-accessor-pairs.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst o = {\n    get a() {\n        return this.val;\n    },\n    b: 1,\n    set a(value) {\n        this.val = value;\n    }\n};\n\nconst o1 = {\n    get a() {\n        return this.val;\n    },\n    b: 1,\n    set a(value) {\n        this.val = value;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Native Object Extension in JavaScript\nDESCRIPTION: Example showing how extending Object.prototype can cause unexpected behavior in for...in loops\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extend-native.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// seems harmless\nObject.prototype.extra = 55;\n\n// loop through some userIds\nconst users = {\n    \"123\": \"Stan\",\n    \"456\": \"David\"\n};\n\n// not what you'd expect\nfor (const id in users) {\n    console.log(id); // \"123\", \"456\", \"extra\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Super Call Without Extends\nDESCRIPTION: Example showing incorrect usage of super() in a class constructor without extends clause, which results in a syntax error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/constructor-super.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n    constructor() {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dot Notation Usage\nDESCRIPTION: Example showing incorrect usage that will trigger the rule warning.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-notation.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint dot-notation: \"error\"*/\n\nconst x = foo[\"bar\"];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'backtick' Quote Option\nDESCRIPTION: Shows code examples that violate the 'backtick' quotes rule configuration, which requires using backticks wherever possible.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"backtick\"]*/\n\nvar single = 'single';\nvar double = \"double\";\nvar unescaped = 'a string containing `backticks`';\n```\n\n----------------------------------------\n\nTITLE: Correct usage of arrow functions with 'as-needed' option (JavaScript)\nDESCRIPTION: Demonstrates correct usage of arrow functions with the 'as-needed' option. Braces are omitted for simple expressions and used for multi-line or complex bodies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/*eslint arrow-body-style: [\"error\", \"as-needed\"]*/\n\nconst foo1 = () => 0;\n\nconst foo2 = (retv, name) => {\n    retv[name] = true;\n    return retv;\n};\n\nconst foo3 = () => ({\n    bar: {\n        foo: 1,\n        bar: 2,\n    }\n});\n\nconst foo4 = () => { bar(); };\nconst foo5 = () => {};\nconst foo6 = () => { /* do nothing */ };\n\nconst foo7 = () => {\n    // do nothing.\n};\n\nconst foo8 = () => ({ bar: 0 });\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with Mixed Configuration\nDESCRIPTION: Examples of code that correctly follows a mixed configuration for anonymous, named, and async arrow functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-function-paren: [\"error\", {\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}]*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n\nvar baz = async (a) => await a\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with enforceForInnerExpressions Option in JavaScript\nDESCRIPTION: Examples of code that comply with the no-extra-boolean-cast rule when the enforceForInnerExpressions option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-boolean-cast.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-extra-boolean-cast: [\"error\", {\"enforceForInnerExpressions\": true}]*/\n\n// Note that `||` and `&&` alone aren't a boolean context for either operand\n// since the resultant value need not be a boolean without casting.\nconst foo = !!bar || baz;\n\nif (foo || bar) {\n    //...\n}\n\nwhile (foo && bar) {\n    //...\n}\n\nif ((foo || bar) && baz) {\n    //...\n}\n\nconst foo1 = new Boolean(bar || baz);\n\nfoo && bar ? baz : bat;\n\nconst ternaryBranches = Boolean(bar ? baz : bat);\n\nconst nullishCoalescingOperator = Boolean(bar ?? baz);\n\nconst commaOperator = Boolean((bar, baz, bat));\n\n// another comma operator example\nfor (let i = 0; console.log(i), i < 10; i++) {\n    // ...\n}\n\n// comma operator in non-final position\nBoolean((Boolean(bar), baz, bat));\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of capitalized-comments Rule in JavaScript\nDESCRIPTION: Example of a comment that violates the default configuration of the capitalized-comments rule, which requires a non-lowercase letter at the beginning of comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/capitalized-comments.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint capitalized-comments: [\"error\"] */\n\n// lowercase comment\n\n```\n\n----------------------------------------\n\nTITLE: String Concatenation with Plus Operator in JavaScript\nDESCRIPTION: This example shows the traditional way of concatenating strings using the plus operator, which the prefer-template rule discourages.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-template.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst str = \"Hello, \" + name + \"!\";\n```\n\n----------------------------------------\n\nTITLE: Traditional ESLint Configuration with Extensions\nDESCRIPTION: Example of extending predefined and shareable configs using the eslintrc format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\t// ...other config\n\textends: [\n\t\t\"eslint:recommended\",\n\t\t\"./custom-config.js\",\n\t\t\"eslint-config-my-config\",\n\t],\n\trules: {\n\t\tsemi: [\"warn\", \"always\"],\n\t},\n\t// ...other config\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Buffer API Usage in Node.js\nDESCRIPTION: Examples of proper Buffer creation using the recommended methods Buffer.alloc(), Buffer.allocUnsafe(), and Buffer.from().\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-buffer-constructor.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-buffer-constructor: error */\n\nBuffer.alloc(5);\nBuffer.allocUnsafe(5);\nBuffer.from([1, 2, 3]);\n\nBuffer.alloc(res.body.amount);\nBuffer.from(res.body.values);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Without Primitive Wrappers in JavaScript\nDESCRIPTION: This snippet shows correct usage of String and Number functions without the 'new' operator, which is compliant with the 'no-new-wrappers' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-wrappers.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new-wrappers: \"error\"*/\n\nconst text = String(someValue);\nconst num = Number(someValue);\n\nconst object = new MyString();\n```\n\n----------------------------------------\n\nTITLE: Enforcing Keyword Spacing in JavaScript with ESLint\nDESCRIPTION: Demonstrates the default behavior of the 'keyword-spacing' rule, which requires spaces before and after keywords.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/keyword-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (foo) {\n    // ...\n} else {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Generator Functions with 'before' Option\nDESCRIPTION: Examples of correctly formatted generator functions when the 'before' option is set to true and 'after' is false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint generator-star-spacing: [\"error\", {\"before\": true, \"after\": false}]*/\n\nfunction *generator() {}\n\nvar anonymous = function *() {};\n\nvar shorthand = { *generator() {} };\n```\n\n----------------------------------------\n\nTITLE: Filtering ESLint Results for Errors in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the static ESLint.getErrorResults() method to filter lint results and keep only errors, removing warnings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst filteredResults = ESLint.getErrorResults(results);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Spacing Before Keywords in JavaScript\nDESCRIPTION: Examples of code that comply with the 'space-before-keywords' rule using the default 'always' option. It shows proper spacing before keywords in various contexts, including JSX.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-keywords.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-keywords: [\"error\", \"always\"]*/\n\nif (foo) {\n    // ...\n} else {}\n\n(function() {})();\n\n<Foo onClick={function bar() {}} />\n\nfor (let foo of ['bar', 'baz', 'qux']) {}\n```\n\n----------------------------------------\n\nTITLE: Basic Computed Property Usage Examples\nDESCRIPTION: Demonstrates basic usage patterns of computed properties in JavaScript, including object member expressions and object literals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/computed-property-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = { prop: \"value\" };\nvar a = \"prop\";\nvar x = obj[a]; // computed property in object member expression\n\nvar a = \"prop\";\nvar obj = {\n  [a]: \"value\" // computed property key in object literal (ECMAScript 6)\n};\n\nvar obj = { prop: \"value\" };\nvar a = \"prop\";\nvar { [a]: x } = obj; // computed property key in object destructuring pattern (ECMAScript 6)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Private Class Members in JavaScript\nDESCRIPTION: This code snippet illustrates proper usage of private class members that are declared and used, complying with the 'no-unused-private-class-members' rule. It shows examples of used fields, methods, and accessors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-private-class-members.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-private-class-members: \"error\"*/\n\nclass A {\n    #usedMember = 42;\n    method() {\n        return this.#usedMember;\n    }\n}\n\nclass B {\n    #usedMethod() {\n        return 42;\n    }\n    anotherMethod() {\n        return this.#usedMethod();\n    }\n}\n\nclass C {\n    get #usedAccessor() {}\n    set #usedAccessor(value) {}\n    \n    method() {\n        this.#usedAccessor = 42;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Assignment to Readonly Global Variable in JavaScript\nDESCRIPTION: Example of code that violates the no-global-assign rule by reassigning a value to the window global variable that is explicitly marked as read-only in ESLint configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-global-assign.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-global-assign: \"error\"*/\n/*global window:readonly*/\n\nwindow = {}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'double' and 'avoidEscape' Options\nDESCRIPTION: Shows code that complies with the 'double' quotes rule with avoidEscape option, allowing single quotes when they help avoid escaping.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"double\", { \"avoidEscape\": true }]*/\n\nvar single = 'a string containing \"double\" quotes';\n```\n\n----------------------------------------\n\nTITLE: Correct Parameter Usage Example in JavaScript\nDESCRIPTION: Example showing correct usage of function parameters without reassignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-param-reassign.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-param-reassign: \"error\"*/\n\nconst foo = function(bar) {\n    const baz = bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Fix Range in context.report() in JavaScript\nDESCRIPTION: Demonstrates how to extend the range of a fix to prevent other rules from making changes in the same scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.report({\n\tnode,\n\tmessage,\n\t*fix(fixer) {\n\t\tyield fixer.replaceText(node, replacementText);\n\n\t\t// extend range of the fix to the range of `node.parent`\n\t\tyield fixer.insertTextBefore(node.parent, \"\");\n\t\tyield fixer.insertTextAfter(node.parent, \"\");\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Valid Nested If Statements\nDESCRIPTION: Examples of valid nested if statements that are not detected by this rule since they are not part of the same if-else-if chain.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-else-if.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (a) {\n    if (a) {\n        foo();\n    }\n}\n\nif (a) {\n    foo();\n} else {\n    if (a) {\n        bar();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 'no-empty' Rule to Allow Empty Catch Clauses in JavaScript\nDESCRIPTION: Examples of code that are valid when the 'no-empty' rule is configured with the 'allowEmptyCatch' option set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\ntry {\n    doSomething();\n} catch (ex) {}\n\ntry {\n    doSomething();\n}\ncatch (ex) {}\nfinally {\n    /* continue regardless of error */\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Declaration Styles in JavaScript\nDESCRIPTION: Examples showing different styles of separating variable declarations from the rest of the code, with and without empty lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-after-var.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo;\n\n// do something with foo\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo;\n// do something with foo\n```\n\n----------------------------------------\n\nTITLE: Configuring importNamePattern Option in no-restricted-imports Rule\nDESCRIPTION: JSON configuration example showing how to restrict imports based on a regex pattern that matches import names beginning with 'foo'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"group\": [\"import-foo/*\"],\n      \"importNamePattern\": \"^foo\",\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'single' Quote Option\nDESCRIPTION: Shows code examples that violate the 'single' quotes rule configuration, which requires using single quotes wherever possible.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"single\"]*/\n\nvar double = \"double\";\nvar unescaped = \"a string containing 'single' quotes\";\n```\n\n----------------------------------------\n\nTITLE: Correct usage examples avoiding catch parameter shadowing\nDESCRIPTION: Examples showing correct code patterns that follow the no-catch-shadow rule by using unique parameter names in catch clauses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-catch-shadow.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-catch-shadow: \"error\"*/\n\nvar err = \"x\";\n\ntry {\n    throw \"problem\";\n} catch (e) {\n\n}\n\nfunction error() {\n    // ...\n};\n\ntry {\n    throw \"problem\";\n} catch (e) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Rule Configuration - JSON\nDESCRIPTION: Examples of how to configure the rule using either a simple integer or an object with options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-lines-per-function.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"max-lines-per-function\": [\"error\", 20]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"max-lines-per-function\": [\"error\", { \"max\": 20 }]\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript without and with semicolons\nDESCRIPTION: Example showing JavaScript statements with and without semicolons, demonstrating how ASI (Automatic Semicolon Insertion) allows both styles.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = \"ESLint\"\nvar website = \"eslint.org\";\n```\n\n----------------------------------------\n\nTITLE: RegExp Constructor Limitations (JavaScript)\nDESCRIPTION: Demonstrates the known limitation of the rule when using the RegExp constructor with control characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-control-regex.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-control-regex: \"error\"*/\n\nnew RegExp(\"\\t\"); // disallowed since the pattern is: <TAB>\n\nnew RegExp(\"\\\\t\"); // allowed since the pattern is: \\t\n```\n\n----------------------------------------\n\nTITLE: Example Usage of padding-line-between-statements Rule in JavaScript\nDESCRIPTION: This example demonstrates how to configure the rule to require a blank line between a variable declaration and a return statement. The rule enforces clean separation between declarations and code execution.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"var\", next: \"return\" }\n]*/\n\nfunction foo() {\n    var a = 1;\n\n    return a;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Loop Function Example\nDESCRIPTION: This example shows a correct way of using a function within a loop in TypeScript, which is compliant with the 'no-loop-func' rule. It uses TypeScript type syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-loop-func.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint no-loop-func: \"error\"*/\n\ntype MyType = 1;\nlet someArray: MyType[] = [];\nfor (let i = 0; i < 10; i += 1) {\n\tsomeArray = someArray.filter((item: MyType) => !!item);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of camelcase Rule with 'ignoreDestructuring: true' Option\nDESCRIPTION: Examples of code that comply with the camelcase rule using the { \"ignoreDestructuring\": true } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nconst { category_id } = query;\n\nconst { category_name = 1 } = query;\n\nconst { category_id_name: category_id_name } = query;\n```\n\n----------------------------------------\n\nTITLE: Correct Import With Proper Directory Negation\nDESCRIPTION: Example showing how to properly reinclude a subdirectory when its parent is restricted by negating the directory itself rather than its contents.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { \"patterns\": [\"import1/*\", \"!import1/private\"] }]*/\n\nimport pick from 'import1/private/someModule';\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Logical Assignment Operators in JavaScript\nDESCRIPTION: Examples of code that comply with the 'logical-assignment-operators' rule when set to 'always'. These expressions use the correct logical assignment operator syntax or are exceptions to the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/logical-assignment-operators.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint logical-assignment-operators: [\"error\", \"always\"]*/\n\na = b\na += b\na ||= b\na = b || c\na || (b = c)\n\nif (a) a = b\n\na = (a || b) || c\n```\n\n----------------------------------------\n\nTITLE: Correct Examples of bind() Usage in JavaScript\nDESCRIPTION: Examples of properly using bind() method, either to set the 'this' value for a function that uses 'this' in its body or to partially apply arguments to a function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-bind.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-extra-bind: \"error\"*/\n\nconst x = function () {\n    this.foo();\n}.bind(bar);\n\nconst y = function (a) {\n    return a + 1;\n}.bind(foo, bar);\n```\n\n----------------------------------------\n\nTITLE: Correct Arrow Spacing Examples with Default Configuration\nDESCRIPTION: Examples of code that follows the default arrow-spacing rule configuration with spaces before and after the arrow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-spacing: \"error\"*/\n\n() => {};\n(a) => {};\na => a;\n() => {'\\n'};\n```\n\n----------------------------------------\n\nTITLE: Creating Linter Instances in JavaScript\nDESCRIPTION: Shows how to create new Linter instances with different options, specifically demonstrating the usage of the 'cwd' option to set the current working directory.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst Linter = require(\"eslint\").Linter;\nconst linter1 = new Linter({ cwd: \"path/to/project\" });\nconst linter2 = new Linter();\n```\n\n----------------------------------------\n\nTITLE: Correct Tab Indentation Example in JavaScript\nDESCRIPTION: Demonstrates correct tab indentation as per the 'indent' rule set to use tabs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", \"tab\"]*/\n\nif (a) {\n\tb=c;\n\tfunction foo(d) {\n\t\te=f;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example of using allowNamedFunctions option with prefer-arrow-callback\nDESCRIPTION: This example demonstrates how to use the 'allowNamedFunctions' option set to true, which allows named function expressions to be used as callbacks without triggering the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-arrow-callback.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint prefer-arrow-callback: [ \"error\", { \"allowNamedFunctions\": true } ] */\n\nfoo(function bar() {});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of undefined in JavaScript\nDESCRIPTION: Examples of code that violate the no-undefined rule, including direct assignment, variable shadowing, comparisons, function parameters, and function arguments using undefined.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undefined.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-undefined: \"error\"*/\n\nconst foo = undefined;\n\nconst undefined = \"foo\";\n\nif (foo === undefined) {\n    // ...\n}\n\nfunction baz(undefined) {\n    // ...\n}\n\nbar(undefined, \"lorem\");\n```\n\n----------------------------------------\n\nTITLE: Correct Import Not Matching Restricted Pattern\nDESCRIPTION: Example of code that passes the rule by importing a module that doesn't match any restricted pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { \"patterns\": [\"crypto/*\"] }]*/\n\nimport crypto from 'crypto';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Object Constructor in JavaScript\nDESCRIPTION: Examples of code that violate the no-object-constructor rule by using the Object constructor without arguments to create empty objects.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-object-constructor.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-object-constructor: \"error\"*/\n\nObject();\n\nnew Object();\n```\n\n----------------------------------------\n\nTITLE: Using consistent Option with object-shorthand Rule\nDESCRIPTION: Demonstrates the consistent option which ensures that either all shorthand or all long-form will be used in an object literal.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: [2, \"consistent\"]*/\n\nconst foo = {\n    a,\n    b: \"foo\",\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: [2, \"consistent\"]*/\n\nconst foo = {\n    a: a,\n    b: \"foo\"\n};\n\nconst bar = {\n    a,\n    b,\n};\n```\n\n----------------------------------------\n\nTITLE: Race Condition Fix Using Promise.all\nDESCRIPTION: Alternative solution that avoids mutable state by using Promise.all and reduce to combine results.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPromise.all([getPageLength(1), getPageLength(2)]).then(pageLengths => {\n  const totalLength = pageLengths.reduce((accumulator, length) => accumulator + length, 0);\n\n  console.log('The combined length of both pages is', totalLength);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring no-restricted-globals with string array in ESLint\nDESCRIPTION: Basic configuration example that restricts the use of 'event' and 'fdescribe' global variables using a string array format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-globals.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-restricted-globals\": [\"error\", \"event\", \"fdescribe\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of arrow functions with 'always' option (JavaScript)\nDESCRIPTION: Demonstrates incorrect usage of arrow functions when the 'arrow-body-style' rule is set to 'always'. The function body should be wrapped in braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*eslint arrow-body-style: [\"error\", \"always\"]*/\n\nconst foo = () => 0;\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with skipTemplates Option\nDESCRIPTION: Examples of code that pass the no-irregular-whitespace rule when the skipTemplates option is enabled, allowing irregular whitespace in template literals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-irregular-whitespace.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-irregular-whitespace: [\"error\", { \"skipTemplates\": true }]*/\n\nfunction thing() {\n    return `template <NBSP>string`;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Arrow Functions with 'as-needed' Option (JavaScript)\nDESCRIPTION: Examples of correct code for the 'arrow-parens' rule with the 'as-needed' option, demonstrating when parentheses can be omitted and when they are required.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-parens: [\"error\", \"as-needed\"]*/\n\n() => {};\na => {};\na => a;\na => {'\\n'};\na.then(foo => {});\na.then(foo => { if (true) {} });\n(a, b, c) => a;\n(a = 10) => a;\n([a, b]) => a;\n({a, b}) => a;\nconst f = (/** @type {number} */a) => a + a;\nconst g = (/* comment */ a) => a + a;\nconst h = (a /* comment */) => a + a;\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Loop Types for no-unreachable-loop\nDESCRIPTION: This snippet demonstrates how to configure the no-unreachable-loop rule to ignore specific loop types using the 'ignore' option in the ESLint configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable-loop.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unreachable-loop: [\"error\", { \"ignore\": [\"ForInStatement\", \"ForOfStatement\"] }]*/\n\nfor (let key in obj) {\n  hasEnumerableProperties = true;\n  break;\n}\n\nfor (const a of b) break;\n```\n\n----------------------------------------\n\nTITLE: Allowed Coercions with Custom Configuration in JavaScript\nDESCRIPTION: Examples of coercions that are allowed when using a custom 'allow' list in the rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-coercion: [2, { \"allow\": [\"!!\", \"~\"] } ]*/\n\nconst b = !!foo;\nconst b1 = ~foo.indexOf(\".\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Strict Mode with Never Option\nDESCRIPTION: Example of incorrect code when using the 'never' option. The strict mode directive in the global scope is not allowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"never\"]*/\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code with ignoreOnInitialization Option\nDESCRIPTION: Examples showing code that correctly uses the ignoreOnInitialization option to allow shadowing in callback functions and IIFEs during variable initialization.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-shadow: [\"error\", { \"ignoreOnInitialization\": true }]*/\n\nconst x = foo(x => x)\n\nconst y = (y => y)()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Function Reassignment in JavaScript\nDESCRIPTION: This snippet shows examples of code that violate the no-func-assign rule by reassigning function declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-func-assign.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-func-assign: \"error\"*/\n\nfunction foo() {}\nfoo = bar;\n\nfunction baz() {\n    baz = bar;\n}\n\nlet a = function hello() {\n  hello = 123;\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Array Constructor in JavaScript\nDESCRIPTION: Examples of code that violate the no-array-constructor rule in JavaScript. These uses of the Array constructor are discouraged.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-array-constructor.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-array-constructor: \"error\"*/\n\nArray();\n\nArray(0, 1, 2);\n\nnew Array(0, 1, 2);\n\nArray(...args);\n```\n\n----------------------------------------\n\nTITLE: Configuring id-denylist Rule in ESLint JSON\nDESCRIPTION: This snippet shows how to configure the 'id-denylist' rule in ESLint to restrict the use of common generic identifiers. The rule takes an array of strings as options, where the first element is the rule severity and the following elements are the disallowed identifiers.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-denylist.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id-denylist\": [\"error\", \"data\", \"err\", \"e\", \"cb\", \"callback\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Extension-named Processors in JavaScript\nDESCRIPTION: This code example illustrates how to create file extension-named processors in ESLint. It shows processors for .md and .mdx files, which are automatically applied to files with those extensions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors-deprecated.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myCustomProcessor = {\n\t/* processor methods */\n};\n\nmodule.exports = {\n\t// The same custom processor is applied to both\n\t// `.md` and `.mdx` files.\n\tprocessors: {\n\t\t\".md\": myCustomProcessor,\n\t\t\".mdx\": myCustomProcessor,\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with allowImplicit Option in JavaScript\nDESCRIPTION: This example shows correct usage when the 'allowImplicit' option is set to true, allowing implicit undefined returns in array callbacks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-callback-return.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-callback-return: [\"error\", { allowImplicit: true }]*/\nconst undefAllTheThings = myArray.map(function(item) {\n    return;\n});\n```\n\n----------------------------------------\n\nTITLE: Correct code examples for 'consistent: true' option\nDESCRIPTION: Examples of code that correctly follows the object-curly-newline rule when configured with the consistent option, showing consistent line break pattern for opening and closing braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", { \"consistent\": true }]*/\n\nlet empty1 = {};\nlet empty2 = {\n};\nlet a = {foo: 1};\nlet b = {\n    foo: 1\n};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {foo: function() {dosomething();}};\nlet f = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {} = obj;\nlet {\n} = obj;\nlet {g} = obj;\nlet {\n    h\n} = obj;\nlet {i, j} = obj;\nlet {\n    k, l\n} = obj;\nlet {m,\n    n} = obj;\nlet {\n    o,\n    p\n} = obj;\nlet {q = function() {dosomething();}} = obj;\nlet {\n    r = function() {\n        dosomething();\n    }\n} = obj;\n```\n\n----------------------------------------\n\nTITLE: Correct usage of curly braces with 'multi-line' option in JavaScript\nDESCRIPTION: Examples of code that comply with the 'curly' rule when set to the 'multi-line' option. This shows proper use of braces for multi-line blocks and optional braces for single-line blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint curly: [\"error\", \"multi-line\"]*/\n\nif (foo) foo++; else doSomething();\n\nif (foo) foo++;\nelse if (bar) baz()\nelse doSomething();\n\ndo something();\nwhile (foo);\n\nwhile (foo\n  && bar) baz();\n\nif (foo) {\n    foo++;\n}\n\nif (foo) { foo++; }\n\nwhile (true) {\n    doSomething();\n    doSomethingElse();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Example: Safe Operations in Finally Block (JavaScript)\nDESCRIPTION: This example shows code that complies with the no-unsafe-finally rule. The function performs a console.log operation in the finally block, which doesn't affect the control flow of the function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        console.log(\"hola!\");\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Lexical Declarations - JavaScript\nDESCRIPTION: Examples of correct code showing proper scoping of lexical declarations using blocks or IIFEs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-globals.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-globals: [\"error\", {\"lexicalBindings\": true}]*/\n\n{\n    const foo = 1;\n    let baz;\n    class Bar {}\n}\n\n(function() {\n    const foo = 1;\n    let baz;\n    class Bar {}\n}());\n```\n\n----------------------------------------\n\nTITLE: Incorrect For Loop Direction Examples in JavaScript\nDESCRIPTION: These examples demonstrate for loops that violate the 'for-direction' rule by having counter variables that change in a way that the stop condition can never be met, potentially causing infinite loops.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/for-direction.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint for-direction: \"error\"*/\nfor (let i = 0; i < 10; i--) {\n}\n\nfor (let i = 10; i >= 0; i++) {\n}\n\nfor (let i = 0; i > 10; i++) {\n}\n\nfor (let i = 0; 10 > i; i--) {\n}\n\nconst n = -2;\nfor (let i = 0; i < 10; i += n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Strict Mode in JavaScript\nDESCRIPTION: Example of strict mode applied to the entire script by placing the directive in the global scope. When the directive is in global scope, strict mode applies to all functions in the file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\n// strict mode\n\nfunction foo() {\n    // strict mode\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'always' Option\nDESCRIPTION: Examples of code that correctly follows the 'always' option, showing proper spacing before function parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-function-paren: \"error\"*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nvar bar = function foo () {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n\nvar baz = async () => 1\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration with Variable Types\nDESCRIPTION: Detailed configuration example showing how to set different rules for variable declarations and assignment expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-destructuring.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"VariableDeclarator\": {\n        \"array\": true,\n        \"object\": true\n      },\n      \"AssignmentExpression\": {\n        \"array\": true,\n        \"object\": true\n      }\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples for the \"both\" Option\nDESCRIPTION: Demonstrates permitted code patterns that comply with the no-inner-declarations rule using the \"both\" option. Both function and var declarations must be at the root level, while let/const declarations can be nested.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inner-declarations: [\"error\", \"both\"]*/\n\nvar bar = 42;\n\nif (test) {\n    let baz = 43;\n}\n\nfunction doAnotherThing() {\n    var baz = 81;\n}\n\nclass C {\n    static {\n        var something;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint:All Configuration in JavaScript\nDESCRIPTION: Example of extending 'eslint:all' configuration and overriding specific rules using JavaScript format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\textends: \"eslint:all\",\n\trules: {\n\t\t// override default options\n\t\t\"comma-dangle\": [\"error\", \"always\"],\n\t\tindent: [\"error\", 2],\n\t\t\"no-cond-assign\": [\"error\", \"always\"],\n\n\t\t// disable now, but enable in the future\n\t\t\"one-var\": \"off\", // [\"error\", \"never\"]\n\n\t\t// disable\n\t\t\"init-declarations\": \"off\",\n\t\t\"no-console\": \"off\",\n\t\t\"no-inline-comments\": \"off\",\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Glob Pattern Overrides in JSON\nDESCRIPTION: Example of using the 'overrides' key to apply different configurations based on file glob patterns in JSON format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"quotes\": [\"error\", \"double\"]\n\t},\n\n\t\"overrides\": [\n\t\t{\n\t\t\t\"files\": [\"bin/*.js\", \"lib/*.js\"],\n\t\t\t\"excludedFiles\": \"*.test.js\",\n\t\t\t\"rules\": {\n\t\t\t\t\"quotes\": [\"error\", \"single\"]\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic no-lonely-if Pattern in JavaScript\nDESCRIPTION: This code snippet illustrates the pattern that the no-lonely-if rule discourages, showing an if statement nested as the only element inside an else block, and demonstrates how it should be rewritten using else-if.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-lonely-if.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (foo) {\n    // ...\n} else {\n    if (bar) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration of capitalized-comments Rule in JSON\nDESCRIPTION: Example of a more complex configuration for the capitalized-comments rule, using different options for line and block comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/capitalized-comments.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"capitalized-comments\": [\n        \"error\",\n        \"always\",\n        {\n            \"line\": {\n                \"ignorePattern\": \"pragma|ignored\",\n            },\n            \"block\": {\n                \"ignoreInlineComments\": true,\n                \"ignorePattern\": \"ignored\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'double' Quote Option\nDESCRIPTION: Shows code examples that comply with the 'double' quotes rule configuration, including allowed exceptions for backticks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"double\"]*/\n\nvar double = \"double\";\nvar backtick = `back\ntick`;  // backticks are allowed due to newline\nvar backtick = tag`backtick`; // backticks are allowed due to tag\n```\n\n----------------------------------------\n\nTITLE: Correct Array Element Formatting with 'consistent' Option in JavaScript\nDESCRIPTION: Examples of correctly formatted arrays that comply with the 'consistent' option, showing consistent usage of line breaks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", \"consistent\"]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1, 2, 3];\nvar e = [\n    1,\n    2\n];\nvar f = [\n    1,\n    2,\n    3\n];\nvar g = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }, function baz() {\n        dosomething();\n    }\n];\nvar h = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    },\n    function baz() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Using avoidExplicitReturnArrows Option with object-shorthand Rule\nDESCRIPTION: Shows configuration and examples for the avoidExplicitReturnArrows option, which prefers methods over explicit-return arrow functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"object-shorthand\": [\"error\", \"always\", { \"avoidExplicitReturnArrows\": true }]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidExplicitReturnArrows\": true }]*/\n\nconst foo = {\n  foo: (bar, baz) => {\n    return bar + baz;\n  },\n\n  qux: (foobar) => {\n    return foobar * 2;\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidExplicitReturnArrows\": true }]*/\n\nconst foo = {\n  foo(bar, baz) {\n    return bar + baz;\n  },\n\n  qux: foobar => foobar * 2\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of try-catch in JavaScript\nDESCRIPTION: Examples of code that comply with the no-useless-catch rule by either performing additional operations in the catch block or handling the error appropriately.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-catch.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-catch: \"error\"*/\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  doSomethingBeforeRethrow();\n  throw e;\n}\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  handleError(e);\n}\n\ntry {\n  doSomethingThatMightThrow();\n} finally {\n  cleanUp();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ES6 Numeric Literals\nDESCRIPTION: Demonstrates the preferred way of representing binary and octal numbers using ES6 numeric literals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-numeric-literals.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n0b111110111 === 503;\n0o767 === 503;\n```\n\n----------------------------------------\n\nTITLE: Correct code examples for 'never' option\nDESCRIPTION: Examples of code that comply with the 'never' option, showing proper handling of statements without semicolons, including handling of ASI hazards.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n\nvar name = \"ESLint\"\n\n;(function() {\n    // ...\n})()\n\nimport a from \"a\"\n(function() {\n    // ...\n})()\n\nimport b from \"b\"\n;(function() {\n    // ...\n})()\n\nclass Foo {\n    bar = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with variables Option Set to False in JavaScript\nDESCRIPTION: This snippet shows incorrect usage patterns even when the 'variables' option is set to false, as it still disallows certain variable-related issues.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nconsole.log(foo);\nvar foo = 1;\n\nf();\nconst f = () => {};\n\ng();\nconst g = function() {};\n\n{\n    const C = class {\n        static x = C;\n    }\n}\n\n{\n    const C = class {\n        static x = foo;\n    }\n    const foo = 1;\n}\n\n{\n    class C {\n        static {\n            this.x = foo;\n        }\n    }\n    const foo = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Proper Function Declaration Placement in JavaScript\nDESCRIPTION: Shows the correct (root level) and incorrect (nested) placement of function declarations in JavaScript. Function declarations should only be at the first level of a program or function body, while function expressions can appear anywhere expressions are allowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\nfunction doSomething() { }\n\n// Bad\nif (test) {\n    function doSomethingElse () { }\n}\n\nfunction anotherThing() {\n    var fn;\n\n    if (test) {\n\n        // Good\n        fn = function expression() { };\n\n        // Bad\n        function declaration() { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of no-useless-return Rule in JavaScript\nDESCRIPTION: Examples showing proper implementation patterns that comply with the no-useless-return rule by having meaningful return statements or proper control flow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-return.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-useless-return: \"error\" */\n\nconst foo = function() { return 5; }\n\nconst bar = function() {\n  return doSomething();\n}\n\nconst baz = function() {\n  if (condition) {\n    qux();\n    return;\n  } else {\n    quux();\n  }\n  qux();\n}\n\nconst item = function() {\n  switch (bar) {\n    case 1:\n      doSomething();\n      return;\n    default:\n      doSomethingElse();\n  }\n}\n\nconst func = function() {\n  for (const foo of bar) {\n    return;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of __proto__ in JavaScript\nDESCRIPTION: Examples of code that violate the no-proto rule by using the deprecated __proto__ property for getting or setting an object's prototype.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-proto.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-proto: \"error\"*/\n\nconst a = obj.__proto__;\n\nconst a1 = obj[\"__proto__\"];\n\nobj.__proto__ = b;\n\nobj[\"__proto__\"] = b;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Object Prototype Methods in JavaScript\nDESCRIPTION: Examples of code that comply with the no-prototype-builtins rule by calling Object.prototype methods indirectly through Object.prototype or an empty object literal. This approach safely works with all objects regardless of their prototype chain.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-prototype-builtins.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-prototype-builtins: \"error\"*/\n\nconst hasBarProperty = Object.prototype.hasOwnProperty.call(foo, \"bar\");\n\nconst isPrototypeOfBar = Object.prototype.isPrototypeOf.call(foo, bar);\n\nconst barIsEnumerable = {}.propertyIsEnumerable.call(foo, \"bar\");\n```\n\n----------------------------------------\n\nTITLE: Correct Always Spacing Examples\nDESCRIPTION: Shows correct spacing examples when using the 'always' option, which requires spaces inside computed property brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/computed-property-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint computed-property-spacing: [\"error\", \"always\"]*/\n\nobj[ foo ]\nobj[ 'foo' ]\nvar x = {[ b ]: a}\nobj[ foo[ bar ] ]\nconst { [ a ]: someProp } = obj;\n({ [ b ]: anotherProp } = anotherObj);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit Type Coercions in JavaScript\nDESCRIPTION: Examples of implicit type coercions that the rule aims to flag, including conversions to boolean, number, and string types.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst b = !!foo;\nconst b1 = ~foo.indexOf(\".\");\nconst n = +foo;\nconst n1 = -(-foo);\nconst n2 = foo - 0;\nconst n3 = 1 * foo;\nconst s = \"\" + foo;\nfoo += ``;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Statement Count in JavaScript Functions\nDESCRIPTION: This snippet shows how statements are counted within a function, which is relevant to the max-statements rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-statements.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n  const bar = 1; // one statement\n  const baz = 2; // two statements\n  const qux = 3; // three statements\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for 'never' Option in ESLint yoda Rule\nDESCRIPTION: These examples demonstrate code that would be flagged as incorrect when the yoda rule is set to 'never', prohibiting Yoda conditions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yoda.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint yoda: \"error\"*/\n\nif (\"red\" === color) {\n    // ...\n}\n\nif (`red` === color) {\n    // ...\n}\n\nif (`red` === `${color}`) {\n    // ...\n}\n\nif (true == flag) {\n    // ...\n}\n\nif (5 > count) {\n    // ...\n}\n\nif (-1 < str.indexOf(substr)) {\n    // ...\n}\n\nif (0 <= x && x < 1) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Unnecessary bind() Method Usage in JavaScript\nDESCRIPTION: Example of an unnecessary bind() call where the function doesn't use 'this' in its body. This creates overhead without providing any benefit since the function returns a static string.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-bind.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// useless bind\nconst boundGetName = (function getName() {\n    return \"ESLint\";\n}).bind({ name: \"ESLint\" });\n\nconsole.log(boundGetName());      // \"ESLint\"\n```\n\n----------------------------------------\n\nTITLE: Examples of Incorrect Setter Implementations in JavaScript\nDESCRIPTION: These examples show various incorrect implementations of setter methods that return values. This includes setters in object literals, class declarations, class expressions, and property descriptors, all of which violate the 'no-setter-return' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-setter-return.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-setter-return: \"error\"*/\n\nconst foo = {\n    set a(value) {\n        this.val = value;\n        return value;\n    }\n};\n\nclass Foo {\n    set a(value) {\n        this.val = value * 2;\n        return this.val;\n    }\n}\n\nconst Bar = class {\n    static set a(value) {\n        if (value < 0) {\n            this.val = 0;\n            return 0;\n        }\n        this.val = value;\n    }\n};\n\nObject.defineProperty(foo, \"bar\", {\n    set(value) {\n        if (value < 0) {\n            return false;\n        }\n        this.val = value;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring no-useless-rename Rule in ESLint\nDESCRIPTION: JSON configuration for the no-useless-rename rule, showing default options that check imports, exports, and destructuring assignments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-rename.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"no-useless-rename\": [\"error\", {\n    \"ignoreDestructuring\": false,\n    \"ignoreImport\": false,\n    \"ignoreExport\": false\n}]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Break Override in Finally Block (JavaScript)\nDESCRIPTION: This example shows how a break statement in a finally block can break out of a labeled try-finally block before the return value from the try block is processed, resulting in an unexpected return value.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// We expect this function to return 0 from try block.\n(() => {\n  label: try {\n    return 0; // 0 is returned but suspended until finally block ends\n  } finally {\n    break label; // It breaks out the try-finally block, before 0 is returned.\n  }\n  return 1;\n})();\n\n// > 1\n```\n\n----------------------------------------\n\nTITLE: Property Modification with Ignored Parameters\nDESCRIPTION: Examples showing allowed property modifications for specifically ignored parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-param-reassign.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"bar\"] }]*/\n\nconst foo = function(bar) {\n    bar.prop = \"value\";\n}\n\nconst foo1 = function(bar) {\n    delete bar.aaa;\n}\n\nconst foo2 = function(bar) {\n    bar.aaa++;\n}\n\nconst foo3 = function(bar) {\n    for (bar.aaa in baz) {}\n}\n\nconst foo4 = function(bar) {\n    for (bar.aaa of baz) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for the Default \"functions\" Option\nDESCRIPTION: Demonstrates code patterns that violate the no-inner-declarations rule with the default \"functions\" option. Function declarations in nested blocks are flagged as incorrect in non-strict mode scripts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inner-declarations: \"error\"*/\n\n// script, non-strict code\n\nif (test) {\n    function doSomething() { }\n}\n\nfunction doSomethingElse() {\n    if (test) {\n        function doAnotherThing() { }\n    }\n}\n\nif (foo) function f(){}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of 'newline-after-var' Rule with 'always' Option\nDESCRIPTION: Examples of code that correctly follow the 'newline-after-var' rule when set to 'always', demonstrating proper newline usage after variable declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-after-var.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint newline-after-var: [\"error\", \"always\"]*/\n\nvar greet = \"hello,\",\n    name = \"world\";\n\nconsole.log(greet, name);\n\nlet hello = \"hello,\",\n    world = \"world\";\n\nconsole.log(hello, world);\n\nvar greet = \"hello,\";\nconst NAME = \"world\";\n\nconsole.log(greet, NAME);\n\nvar greet = \"hello,\";\nvar name = \"world\";\n// var name = require(\"world\");\n\nconsole.log(greet, name);\n```\n\n----------------------------------------\n\nTITLE: Correct Directive Usage Examples\nDESCRIPTION: Examples of string expressions that are considered valid because they are part of a directive prologue at the beginning of a script, module, or function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: \"error\"*/\n\n\"use strict\";\n\"use asm\"\n\"use stricter\";\n\"use babel\"\n\"any other strings like this in the directive prologue\";\n\"this is still the directive prologue\";\n\nfunction foo() {\n    \"bar\";\n}\n\nclass Foo {\n    someMethod() {\n        \"use strict\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Code Meeting Complexity Threshold\nDESCRIPTION: Examples of code that complies with a maximum complexity rule setting of 2, with simpler control flow paths.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/complexity.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n\nfunction b() {\n    foo ||= 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct code for ImportDeclaration and ExportDeclaration options\nDESCRIPTION: Examples of code that correctly follows the object-curly-newline rule when ImportDeclaration is set to 'always' and ExportDeclaration to 'never', showing proper formatting for imports and exports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", { \"ImportDeclaration\": \"always\", \"ExportDeclaration\": \"never\" }]*/\n\nimport {\n    foo,\n    bar\n} from 'foo-bar';\nimport {\n    baz, qux\n} from 'foo-bar';\nimport {\n    foo as f,\n    foobar\n} from 'foo-bar';\n\nexport { foo, bar } from 'foo-bar';\nexport { foo as f, baz } from 'foo-bar';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for 'never' Option\nDESCRIPTION: Examples of code that violate the template-curly-spacing rule when configured with the default 'never' option, showing unwanted spaces inside curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-curly-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint template-curly-spacing: \"error\"*/\n\n`hello, ${ people.name}!`;\n`hello, ${people.name }!`;\n\n`hello, ${ people.name }!`;\n```\n\n----------------------------------------\n\nTITLE: Using avoidQuotes Option with object-shorthand Rule\nDESCRIPTION: Demonstrates configuration and code examples for the avoidQuotes option, which prefers long-form syntax when object keys are string literals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"object-shorthand\": [\"error\", \"always\", { \"avoidQuotes\": true }]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidQuotes\": true }]*/\n\nconst foo = {\n    \"bar-baz\"() {}\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidQuotes\": true }]*/\n\nconst foo = {\n    \"bar-baz\": function() {},\n    \"qux\": qux\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rules with Options in JavaScript\nDESCRIPTION: Demonstrates how to specify additional options for rules using array literal syntax in inline comments. The first item is the rule severity followed by rule-specific options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint quotes: [\"error\", \"double\"], curly: 2 */\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Conditions in JavaScript\nDESCRIPTION: This snippet shows examples of code that comply with the 'no-constant-condition' rule. It includes proper conditional expressions in if statements, loops, and ternary operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-condition.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-condition: \"error\"*/\n\nif (x === 0) {\n    doSomething();\n}\n\nfor (;;) {\n    doSomethingForever();\n}\n\nwhile (typeof x === \"undefined\") {\n    doSomething();\n}\n\ndo {\n    doSomething();\n} while (x);\n\nconst result = x !== 0 ? a : b;\n\nif(input === \"hello\" || input === \"bye\"){\n  output(input);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Function.prototype.call() and apply() in JavaScript\nDESCRIPTION: Examples of code that comply with the no-useless-call rule by using .call() and .apply() only when necessary, such as when changing the 'this' binding or dealing with variadic arguments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-call.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-call: \"error\"*/\n\n// The `this` binding is different.\nfoo.call(obj, 1, 2, 3);\nfoo.apply(obj, [1, 2, 3]);\nobj.foo.call(null, 1, 2, 3);\nobj.foo.apply(null, [1, 2, 3]);\nobj.foo.call(otherObj, 1, 2, 3);\nobj.foo.apply(otherObj, [1, 2, 3]);\n\n// The argument list is variadic.\n// Those are warned by the `prefer-spread` rule.\nfoo.apply(undefined, args);\nfoo.apply(null, args);\nobj.foo.apply(obj, args);\n```\n\n----------------------------------------\n\nTITLE: Correct usage examples for no-new-native-nonconstructor rule\nDESCRIPTION: Examples of code that comply with the no-new-native-nonconstructor rule by properly using Symbol and BigInt without the new operator, including cases where the global identifiers are shadowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-native-nonconstructor.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new-native-nonconstructor: \"error\"*/\n\nconst foo = Symbol('foo');\nconst bar = BigInt(9007199254740991);\n\n// Ignores shadowed Symbol.\nfunction baz(Symbol) {\n    const qux = new Symbol(\"baz\");\n}\nfunction quux(BigInt) {\n    const corge = new BigInt(9007199254740991);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with the enforceForFunctionPrototypeMethods Exception\nDESCRIPTION: Examples showing valid code when the 'enforceForFunctionPrototypeMethods' option is set to false, allowing extra parentheses around function expressions with immediate .call() and .apply() method calls.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { \"enforceForFunctionPrototypeMethods\": false }] */\n\nconst foo = (function () {}).call();\n\nconst bar = (function () {}).apply();\n\nconst baz = (function () {}.call());\n\nconst quux = (function () {}.apply());\n```\n\n----------------------------------------\n\nTITLE: Unmodified Loop Condition Example in JavaScript\nDESCRIPTION: Basic example showing a potential bug where a loop variable is not modified inside the loop, resulting in an infinite loop.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unmodified-loop-condition.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwhile (node) {\n    doSomething(node);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of yield* with 'before' spacing (JavaScript)\nDESCRIPTION: Example of correct code for the yield-star-spacing rule with the 'before' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yield-star-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/*eslint yield-star-spacing: [\"error\", \"before\"]*/\n\nfunction *generator() {\n  yield *other();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'backtick' and 'avoidEscape' Options\nDESCRIPTION: Shows code that complies with the 'backtick' quotes rule with avoidEscape option, allowing double quotes when they help avoid escaping backticks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"backtick\", { \"avoidEscape\": true }]*/\n\nvar double = \"a string containing `backtick` quotes\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Return Behavior Example\nDESCRIPTION: Example showing inconsistent return value behavior in a function, where one code path returns a boolean while another returns undefined.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-return.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Example of Duplicate Class Members in JavaScript\nDESCRIPTION: Demonstrates how duplicate class member declarations can lead to unexpected behavior where the last declaration silently overwrites previous ones.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-class-members.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo {\n  bar() { console.log(\"hello\"); }\n  bar() { console.log(\"goodbye\"); }\n}\n\nconst foo = new Foo();\nfoo.bar(); // goodbye\n```\n\n----------------------------------------\n\nTITLE: Incorrect Number Coercions in JavaScript\nDESCRIPTION: Examples of number coercions that the rule flags as incorrect when the 'number' option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-coercion: \"error\"*/\n\nconst n = +foo;\nconst n1 = -(-foo);\nconst n2 = foo - 0;\nconst n3 = 1 * foo;\n```\n\n----------------------------------------\n\nTITLE: JSDoc with requireReturnDescription Disabled in ESLint\nDESCRIPTION: Example demonstrating valid JSDoc when the requireReturnDescription option is set to false. This configuration allows return types to be documented without requiring a description of the return value.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-jsdoc.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint valid-jsdoc: [\"error\", { \"requireReturnDescription\": false }]*/\n\n/**\n * Add two numbers.\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n * @returns {number}\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript Examples for default-param-last Rule\nDESCRIPTION: These examples demonstrate incorrect usage of default parameters in JavaScript functions, where default parameters are not the last in the parameter list. This violates the 'default-param-last' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-param-last.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint default-param-last: [\"error\"] */\n\nfunction f(a = 0, b) {}\n\nfunction g(a, b = 0, c) {}\n```\n\n----------------------------------------\n\nTITLE: Correct typeof Comparisons in JavaScript\nDESCRIPTION: Examples of correct code that comply with the valid-typeof rule by using correct string literals or variables for comparison.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-typeof.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint valid-typeof: \"error\"*/\n\ntypeof foo === \"string\"\ntypeof bar == \"undefined\"\ntypeof foo === baz\ntypeof bar === typeof qux\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for object-shorthand Rule\nDESCRIPTION: Shows how to configure the object-shorthand rule in ESLint configuration with the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"object-shorthand\": [\"error\", \"always\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ASI Issues with Increment Operator\nDESCRIPTION: Shows how automatic semicolon insertion can affect the behavior of the increment operator based on whitespace differences.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-plusplus.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet i = 10;\nlet j = 20;\n\ni ++\nj\n// i = 11, j = 20\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet i = 10;\nlet j = 20;\n\ni\n++\nj\n// i = 10, j = 21\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Exponentiation Operator in JavaScript\nDESCRIPTION: Examples of code that comply with the prefer-exponentiation-operator rule by using the ** operator instead of Math.pow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-exponentiation-operator.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-exponentiation-operator: \"error\"*/\n\nconst foo = 2 ** 8;\n\nconst bar = a ** b;\n\nlet baz = (a + b) ** (c + d);\n\nlet quux = (-1) ** n;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Callbacks in JavaScript\nDESCRIPTION: This example shows how to refactor deeply nested callbacks into separate named functions, adhering to the max-nested-callbacks rule with a maximum depth of 3. This approach improves code readability and maintainability.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-nested-callbacks.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-nested-callbacks: [\"error\", 3]*/\n\nfoo1(handleFoo1);\n\nfunction handleFoo1() {\n    foo2(handleFoo2);\n}\n\nfunction handleFoo2() {\n    foo3(handleFoo3);\n}\n\nfunction handleFoo3() {\n    foo4(handleFoo4);\n}\n\nfunction handleFoo4() {\n    foo5();\n}\n```\n\n----------------------------------------\n\nTITLE: Complying with object-property-newline rule (nested example 2)\nDESCRIPTION: Another example of code that complies with the object-property-newline rule, showing fully expanded nested objects with all properties on separate lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst newObject = {\n    a: 1,\n    b: [\n        2,\n        {\n            a: 3,\n            b: 4\n        }\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for 'onlyEquality' Option in ESLint yoda Rule\nDESCRIPTION: These examples show code that would be considered correct when the yoda rule is set to 'never' with the 'onlyEquality' option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yoda.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint yoda: [\"error\", \"never\", { \"onlyEquality\": true }]*/\n\nif (x < -1 || 9 < x) {\n}\n\nif (x !== 'foo' && 'bar' != x) {\n}\n\nif (x !== `foo` && `bar` != x) {\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Switch Statement Patterns with default-case-last Rule\nDESCRIPTION: Examples showing incorrect placement of default clauses in switch statements that violate the default-case-last rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-case-last.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint default-case-last: \"error\"*/\n\nswitch (foo) {\n    default:\n        bar();\n        break;\n    case \"a\":\n        baz();\n        break;\n}\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n    default:\n        baz();\n        break;\n    case 2:\n        quux();\n        break;\n}\n\nswitch (foo) {\n    case \"x\":\n        bar();\n        break;\n    default:\n    case \"y\":\n        baz();\n        break;\n}\n\nswitch (foo) {\n    default:\n        break;\n    case -1:\n        bar();\n        break;\n}\n\nswitch (foo) {\n  default:\n    doSomethingIfNotZero();\n  case 0:\n    doSomethingAnyway();\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Character Classes in JavaScript RegEx\nDESCRIPTION: This snippet illustrates correct usage of regular expressions without empty character classes. These examples show valid patterns that match as expected, adhering to the no-empty-character-class rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-character-class.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-character-class: \"error\"*/\n\n/^abc/.test(\"abcdefg\"); // true\n\"abcdefg\".match(/^abc/); // [\"abc\"]\n\n/^abc[a-z]/.test(\"abcdefg\"); // true\n\"abcdefg\".match(/^abc[a-z]/); // [\"abcd\"]\n\n/^abc[^]/.test(\"abcdefg\"); // true\n\"abcdefg\".match(/^abc[^]/); // [\"abcd\"]\n```\n\n----------------------------------------\n\nTITLE: Correct code examples for object-property-newline rule\nDESCRIPTION: Examples of code that properly follow the object-property-newline rule by placing each property on its own line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-property-newline: \"error\"*/\n\nconst obj1 = {\n    foo: \"foo\",\n    bar: \"bar\",\n    baz: \"baz\"\n};\n\nconst obj2 = {\n    foo: \"foo\"\n    , bar: \"bar\"\n    , baz: \"baz\"\n};\n\nconst user = process.argv[2];\nconst obj3 = {\n    user,\n    [process.argv[3] ? \"foo\" : \"bar\"]: 0,\n    baz: [\n        1,\n        2,\n        4,\n        8\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Negation with 'in' Operator in JavaScript\nDESCRIPTION: Examples of correct code showing proper use of parentheses to negate the result of an 'in' expression, as well as an explicit approach when negation of the left operand is actually intended.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-negated-in-lhs.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-negated-in-lhs: \"error\"*/\n\nif(!(key in object)) {\n    // key is not in object\n}\n\nif(('' + !key) in object) {\n    // make operator precedence and type conversion explicit\n    // in a rare situation when that is the intended meaning\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Diffs with and without Trailing Commas in JavaScript\nDESCRIPTION: These code blocks demonstrate how trailing commas can improve the clarity of diffs when adding or removing items from objects or arrays.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nLANGUAGE: diff\nCODE:\n```\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Variables Outside Block Scope in JavaScript\nDESCRIPTION: Examples of code that violate the 'block-scoped-var' rule by using variables outside their defined blocks. This includes usage in if statements, try-catch blocks, for loops, and class static blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/block-scoped-var.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint block-scoped-var: \"error\"*/\n\nfunction doIf() {\n    if (true) {\n        var build = true;\n    }\n\n    console.log(build);\n}\n\nfunction doIfElse() {\n    if (true) {\n        var build = true;\n    } else {\n        var build = false;\n    }\n}\n\nfunction doTryCatch() {\n    try {\n        var build = 1;\n    } catch (e) {\n        var f = build;\n    }\n}\n\nfunction doFor() {\n    for (var x = 1; x < 10; x++) {\n        var y = f(x);\n    }\n    console.log(y);\n}\n\nclass C {\n    static {\n        if (something) {\n            var build = true;\n        }\n        build = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage with 'ignoreImports: true' Option\nDESCRIPTION: Examples of code that comply with the camelcase rule using the { \"ignoreImports\": true } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {ignoreImports: true}]*/\n\nimport { snake_cased } from 'mod';\n```\n\n----------------------------------------\n\nTITLE: Configuring Rules Using Comments in JavaScript\nDESCRIPTION: Demonstrates how to configure ESLint rules using inline comments within JavaScript files. This method allows setting rule severities and options directly in the source code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint eqeqeq: \"off\", curly: \"error\" */\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage Without Dangling Underscores in JavaScript\nDESCRIPTION: Examples of code that comply with the no-underscore-dangle rule, showing valid use of underscores and exceptions to the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: \"error\"*/\n\nconst _ = require('underscore');\nconst obj = _.contains(items, item);\nobj.__proto__ = {};\nconst file = __filename;\nfunction foo(_bar) {};\nconst bar = { onClick(_bar) {} };\nconst baz = (_bar) => {};\n```\n\n----------------------------------------\n\nTITLE: Defining a Generator Function in JavaScript\nDESCRIPTION: Examples of valid generator function syntax with different asterisk placements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction *generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction * generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Default Callback Usage\nDESCRIPTION: Demonstrates proper callback implementation with return statements to prevent multiple invocations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/callback-return.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        return callback(err);\n    }\n    callback();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of reportUsedIgnorePattern Option in JavaScript\nDESCRIPTION: Demonstrates correct code when 'reportUsedIgnorePattern' is set to true. It shows variables that don't match the ignore pattern being used without triggering errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-vars.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-vars: [\"error\", { \"reportUsedIgnorePattern\": true, \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nconst firstVar = 1;\nconst secondVar = 2;\nconsole.log(firstVar, secondVar);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of 1tbs Brace Style in JavaScript\nDESCRIPTION: Examples of correct code for the ESLint brace-style rule with the default '1tbs' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/brace-style.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint brace-style: \"error\"*/\n\nfunction foo() {\n  return true;\n}\n\nif (foo) {\n  bar();\n}\n\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n\ntry {\n  somethingRisky();\n} catch(e) {\n  handleError();\n}\n\nclass C {\n    static {\n        foo();\n    }\n}\n\n// when there are no braces, there are no problems\nif (foo) bar();\nelse if (baz) boom();\n```\n\n----------------------------------------\n\nTITLE: Strict mode spacing alignment in JavaScript objects\nDESCRIPTION: Examples demonstrating strict mode spacing enforcement in multi-line object literals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/key-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint key-spacing: [\"error\", { \"mode\": \"strict\" }]*/\n\ncall({\n    foobar: 42,\n    bat:    2 * 2\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint key-spacing: [\"error\", { \"mode\": \"strict\" }]*/\n\ncall({\n    foobar: 42,\n    bat: 2 * 2\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Code Examples with Hoisting for ESLint Rule\nDESCRIPTION: Examples of correct code that doesn't trigger the no-unreachable rule because of JavaScript function and variable hoisting. These patterns are valid despite appearing to have unreachable code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unreachable: \"error\"*/\n\nfunction foo() {\n    return bar();\n    function bar() {\n        return 1;\n    }\n}\n\nfunction bar() {\n    return x;\n    var x;\n}\n\nswitch (foo) {\n    case 1:\n        break;\n        var x;\n}\n```\n\n----------------------------------------\n\nTITLE: Using labeled statements with break to control nested loops in JavaScript\nDESCRIPTION: Example of labeled statements in JavaScript used with break to control flow in nested loops. This pattern allows breaking out of multiple loop levels at once.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-labels.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nouter:\n    while (true) {\n\n        while (true) {\n            break outer;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with checkForEach Option in JavaScript\nDESCRIPTION: These examples show correct usage of forEach when the 'checkForEach' option is set to true, avoiding returns in forEach callbacks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-callback-return.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-callback-return: [\"error\", { checkForEach: true }]*/\n\nmyArray.forEach(function(item) {\n    handleItem(item)\n});\n\nmyArray.forEach(function(item) {\n    if (item < 0) {\n        return;\n    }\n    handleItem(item);\n});\n\nmyArray.forEach(function(item) {\n    handleItem(item);\n    return;\n});\n\nmyArray.forEach(item => {\n    handleItem(item);\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples for no-misleading-character-class rule\nDESCRIPTION: Examples of code patterns that would trigger violations of the no-misleading-character-class rule, showing various incorrect uses of multi-code point characters in character classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-misleading-character-class.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-misleading-character-class: error */\n\n/^[Á]$/u;\n/^[❇️]$/u;\n/^[👶🏻]$/u;\n/^[🇯🇵]$/u;\n/^[👨‍👩‍👦]$/u;\n/^[👍]$/;\nnew RegExp(\"[🎵]\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Redundant Strict Mode Directives in JavaScript\nDESCRIPTION: This example shows incorrect usage where a 'use strict' directive is unnecessarily placed in an inner scope that is already under strict mode from the outer scope declaration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-strict.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\n(function () {\n    \"use strict\";\n    var foo = true;\n}());\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Custom Configuration\nDESCRIPTION: Examples of code that violates the custom semi-spacing configuration with spaces before semicolons\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo;\nvar foo ; var bar;\nthrow new Error(\"error\");\nwhile (a) { break; }\nfor (i = 0;i < 10;i++) {}\nfor (i = 0; i < 10; i++) {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of importNamePattern with is* Functions\nDESCRIPTION: Example of an ESLint violation where the importNamePattern option restricts importing functions that start with 'is' from utils modules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_33\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    importNamePattern: '^is',\n    message: \"Use 'is*' functions from lodash instead.\"\n}]}]*/\n\nimport { isEmpty } from 'utils/collection-utils';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of 'this' and 'super' in Derived Class Constructors (JavaScript)\nDESCRIPTION: Examples of incorrect code that violate the 'no-this-before-super' rule. These snippets demonstrate using 'this' or 'super' before calling 'super()' in derived class constructors, which can lead to reference errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-this-before-super.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-this-before-super: \"error\"*/\n\nclass A1 extends B {\n    constructor() {\n        this.a = 0;\n        super();\n    }\n}\n\nclass A2 extends B {\n    constructor() {\n        this.foo();\n        super();\n    }\n}\n\nclass A3 extends B {\n    constructor() {\n        super.foo();\n        super();\n    }\n}\n\nclass A4 extends B {\n    constructor() {\n        super(this.foo());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'never' and 'empty' Exception\nDESCRIPTION: Examples of code that would be considered correct when using the 'never' option with an exception for empty parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo( );\n```\n\n----------------------------------------\n\nTITLE: Correct code examples for 'multiline: true' option\nDESCRIPTION: Examples of code that correctly follows the object-curly-newline rule when configured with the multiline option, showing proper line break formatting based on internal line breaks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", { \"multiline\": true }]*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {foo: 1, bar: 2};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {} = obj;\nlet {f} = obj;\nlet {g, h} = obj;\nlet {\n    i,\n    j\n} = obj;\nlet {\n    k = function() {\n        dosomething();\n    }\n} = obj;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with allowParens: false Option\nDESCRIPTION: This example demonstrates code that would be considered incorrect when the 'allowParens' option is set to false. Even parenthesized expressions are flagged.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-confusing-arrow.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-confusing-arrow: [\"error\", {\"allowParens\": false}]*/\n\nvar x = a => (1 ? 2 : 3);\nvar x = (a) => (1 ? 2 : 3);\n```\n\n----------------------------------------\n\nTITLE: Correct usage of curly braces with 'multi-or-nest' option in JavaScript\nDESCRIPTION: Examples of code that comply with the 'curly' rule when set to the 'multi-or-nest' option. This shows proper use of braces for nested and multi-statement blocks, and no braces for single-line blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint curly: [\"error\", \"multi-or-nest\"]*/\n\nif (!foo) {\n    foo = {\n        bar: baz,\n        qux: foo\n    };\n}\n\nwhile (true) {\n  if(foo)\n      doSomething();\n  else\n      doSomethingElse();\n}\n\nif (foo)\n    foo++;\n\nwhile (true)\n    doSomething();\n\nfor (let i = 0; foo; i++)\n    doSomething();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Closure Issue in JavaScript Loops\nDESCRIPTION: This snippet shows how creating functions within a loop can lead to unexpected behavior due to closure issues. All functions created will return the final value of the loop variable.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-loop-func.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (var i = 0; i < 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Primitive Wrappers in JavaScript\nDESCRIPTION: This snippet demonstrates incorrect usage of String, Number, and Boolean constructors with the 'new' operator, which is discouraged by the 'no-new-wrappers' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-wrappers.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new-wrappers: \"error\"*/\n\nconst stringObject = new String(\"Hello world\");\nconst numberObject = new Number(33);\nconst booleanObject = new Boolean(false);\n\nconst stringObject2 = new String;\nconst numberObject2 = new Number;\nconst booleanObject2 = new Boolean;\n```\n\n----------------------------------------\n\nTITLE: ESLint Version Access Examples\nDESCRIPTION: Demonstrates different ways to access the ESLint version number from Linter instances and class.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nlinter.version; // => '9.0.0'\n```\n\n----------------------------------------\n\nTITLE: Configuring 'keyword-spacing' Rule with After Option\nDESCRIPTION: Demonstrates how to configure the 'keyword-spacing' rule to require spaces after keywords but not before.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/keyword-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint keyword-spacing: [\"error\", { \"after\": true }]*/\n\nif (foo) {\n    //...\n} else if (bar) {\n    //...\n} else {\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Without Trailing Commas in JavaScript\nDESCRIPTION: Examples of code that comply with the no-comma-dangle rule, showing proper syntax for object literals, array literals, and function calls without trailing commas.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-comma-dangle.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Loop Function Examples\nDESCRIPTION: These examples demonstrate correct ways of using functions with loops that comply with the 'no-loop-func' rule. They avoid unsafe references to outer scope variables or use block-scoped variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-loop-func.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-loop-func: \"error\"*/\n\nvar a = function() {};\n\nfor (var i=10; i; i--) {\n    a();\n}\n\nfor (var i=10; i; i--) {\n    var a = function() {}; // OK, no references to variables in the outer scopes.\n    a();\n}\n\nfor (let i=10; i; i--) {\n    var a = function() { return i; }; // OK, all references are referring to block scoped variables in the loop.\n    a();\n}\n\nvar foo = 100;\nfor (let i=10; i; i--) {\n    var a = function() { return foo; }; // OK, all references are referring to never modified variables.\n    a();\n}\n//... no modifications of foo after this loop ...\n\nvar arr = [];\n\nfor (var i=10; i; i--) {\n    (function() { return i; })();\n}\n\nfor (var i = 0; i < 5; i++) {\n    arr.push((f => f)((() => i)()));\n}\n\nfor (var i = 0; i < 5; i++) {\n    arr.push((() => {\n        return (() => i)();\n    })());\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Assigning to Non-Global Variables in JavaScript\nDESCRIPTION: Examples of code that comply with the no-native-reassign rule by assigning values to non-global variables or writable globals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-native-reassign.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-native-reassign: \"error\"*/\n\na = 1\nvar b = 1\nb = 2\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-native-reassign: \"error\"*/\n/*global onload:writable*/\n\nonload = function() {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Effective Destructuring Pattern in JavaScript\nDESCRIPTION: Example showing a proper destructuring pattern that successfully creates a variable by including a property name in the nested object pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-pattern.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// creates variable b\nconst {a: { b }} = foo;\n```\n\n----------------------------------------\n\nTITLE: Correct Examples Complying with 'no-new' Rule in JavaScript\nDESCRIPTION: Shows correct usage that complies with the 'no-new' rule, including assigning the result of 'new' to a variable and calling a function without 'new'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new: \"error\"*/\n\nconst thing = new Thing();\n\nFoo();\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with 'consecutive' Option\nDESCRIPTION: Examples of code that complies with the one-var rule when configured with the 'consecutive' option, showing properly combined consecutive declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", \"consecutive\"]*/\n\nfunction foo1() {\n    var bar,\n        baz;\n}\n\nfunction foo2(){\n    var bar = 1,\n        baz = 2;\n\n    qux();\n\n    var qux = 3,\n        quux;\n}\n\nclass C {\n    static {\n        var foo, bar;\n        let baz, qux;\n        doSomething();\n        let quux;\n        var quuux;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Path Concatenation in Node.js\nDESCRIPTION: Example of using string concatenation with __dirname or __filename to create file paths, which is discouraged due to cross-platform compatibility issues.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-path-concat.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fullPath = __dirname + \"/foo.js\";\n```\n\n----------------------------------------\n\nTITLE: Example of a Class Method Not Using This\nDESCRIPTION: Demonstrates a class with a method that doesn't use 'this', which could be made static. The 'sayHi' method doesn't reference the instance and simply logs a static message.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n    constructor() {\n        this.a = \"hi\";\n    }\n\n    print() {\n        console.log(this.a);\n    }\n\n    sayHi() {\n        console.log(\"hi\");\n    }\n}\n\nlet a = new A();\na.sayHi(); // => \"hi\"\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with allowTernary Option\nDESCRIPTION: Examples of code patterns that would be considered valid with the allowTernary option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: [\"error\", { \"allowTernary\": true }]*/\n\na ? b() : c()\na ? (b = c) : d()\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Switch Statements with Custom Comment Pattern\nDESCRIPTION: These snippets show correct usage of switch statements without default cases, using a custom comment pattern specified in the rule options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-case.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint default-case: [\"error\", { \"commentPattern\": \"^skip\\\\sdefault\" }]*/\n\nswitch(a) {\n    case 1:\n        /* code */\n        break;\n\n    // skip default\n}\n\nswitch(a) {\n    case 1:\n        /* code */\n        break;\n\n    // skip default case\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - First Comma Style\nDESCRIPTION: Examples of correct comma placement when using the 'first' option, showing proper comma placement at the start of lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-style.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-style: [\"error\", \"first\"]*/\n\nvar foo = 1, bar = 2;\n\nvar foo = 1\n    ,bar = 2;\n\nvar foo = [\"apples\"\n          ,\"oranges\"];\n\nfunction baz() {\n    return {\n        \"a\": 1\n        ,\"b:\": 2\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Array Element Formatting with 'minItems' Option in JavaScript\nDESCRIPTION: Examples of correctly formatted arrays that comply with the 'minItems' option, showing line breaks when there are at least 3 elements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", { \"minItems\": 3 }]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1,\n    2,\n    3];\nvar e = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for 'minProperties: 2' option\nDESCRIPTION: Examples of code that would trigger the object-curly-newline rule when configured with the minProperties option, which requires line breaks if the number of properties is at least the given integer.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", { \"minProperties\": 2 }]*/\n\nlet a = {\n};\nlet b = {\n    foo: 1\n};\nlet c = {foo: 1, bar: 2};\nlet d = {foo: 1,\n    bar: 2};\nlet e = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {\n} = obj;\nlet {\n    f\n} = obj;\nlet {g, h} = obj;\nlet {i,\n    j} = obj;\nlet {\n    k = function() {\n        dosomething();\n    }\n} = obj;\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Constructor Usage\nDESCRIPTION: Example of TypeScript code with an unnecessary public constructor that violates the no-useless-constructor rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-constructor.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint no-useless-constructor: \"error\" */\n\nclass A {\n    public constructor() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Useless Constructors in JavaScript\nDESCRIPTION: Examples of constructors that are considered unnecessary because they either do nothing or simply delegate to a parent class constructor.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-constructor.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n    constructor () {\n    }\n}\n\nclass B extends A {\n    constructor (value) {\n      super(value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with ES6 and Strict Mode for no-lone-blocks Rule in JavaScript\nDESCRIPTION: This snippet demonstrates correct usage of the 'no-lone-blocks' rule in an ES6 environment with strict mode, where function declarations in blocks are allowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-lone-blocks.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-lone-blocks: \"error\"*/\n\n\"use strict\";\n\n{\n    function foo() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Correct Code Complying with no-implied-eval Rule in JavaScript\nDESCRIPTION: This code block demonstrates correct usage that complies with the no-implied-eval rule by using function arguments instead of strings in setTimeout() and setInterval() calls.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implied-eval.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implied-eval: \"error\"*/\n\nsetTimeout(function() {\n    alert(\"Hi!\");\n}, 100);\n\nsetInterval(function() {\n    alert(\"Hi!\");\n}, 100);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'always' Option\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'always' option for the space-in-parens rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\"]*/\n\nfoo( 'bar');\nfoo('bar' );\nfoo('bar');\n\nfoo(/* bar */);\n\nvar foo = (1 + 2) * 3;\n(function () { return 'bar'; }());\n```\n\n----------------------------------------\n\nTITLE: Correct usage examples with no shadowing of restricted names in script context\nDESCRIPTION: Examples of code that properly avoid shadowing restricted names like Object, while showing the exception that 'undefined' may be shadowed if never assigned a value.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow-restricted-names.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-shadow-restricted-names: \"error\"*/\n\nlet Object;\n\nfunction f(a, b){}\n\n// Exception: `undefined` may be shadowed if the variable is never assigned a value.\nlet undefined;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with functions Option Set to False in JavaScript\nDESCRIPTION: This snippet demonstrates correct usage when the 'functions' option is set to false, allowing function calls before declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-use-before-define: [\"error\", { \"functions\": false }]*/\n\nf();\nfunction f() {}\n```\n\n----------------------------------------\n\nTITLE: Using npm Scoped Modules for ESLint Config\nDESCRIPTION: Illustrates various ways to specify npm scoped modules as shareable ESLint configurations in the 'extends' field of .eslintrc files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"@scope/eslint-config\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"@scope\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"@scope/eslint-config-myconfig\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"@scope/myconfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Initializations Option\nDESCRIPTION: Examples of code that violates the rule when configured with the 'initializations' option, showing improper mixing of declarations and initializations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var-declaration-per-line.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var-declaration-per-line: [\"error\", \"initializations\"]*/\n\nvar a, b, c = 0;\n\nlet d,\n    e = 0, f;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Constructors Without Return Statements (JavaScript)\nDESCRIPTION: This snippet shows correct usage of class constructors without return statements or with empty return statements, which comply with the 'no-constructor-return' ESLint rule. It demonstrates proper initialization and flow control in constructors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constructor-return.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constructor-return: \"error\"*/\n\nclass C {\n    constructor(c) {\n        this.c = c;\n    }\n}\n\nclass D {\n    constructor(f) {\n        if (!f) {\n            return;  // Flow control.\n        }\n\n        f();\n    }\n}\n\nclass E {\n    constructor() {\n        return;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Always Option - Correct Examples\nDESCRIPTION: Shows proper implementation of named functions when using the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-names.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-names: [\"error\", \"always\"]*/\n\nFoo.prototype.bar = function bar() {};\n\nconst cat = {\n  meow() {}\n}\n\n(function bar() {\n    // ...\n}())\n\nexport default function foo() {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of typeof with 'typeof' Option in JavaScript\nDESCRIPTION: This code snippet shows how the 'no-undef' rule behaves when the 'typeof' option is set to true. It warns about undeclared variables even within typeof checks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\n----------------------------------------\n\nTITLE: Correct typeof Comparisons with requireStringLiterals Option in JavaScript\nDESCRIPTION: Examples of correct code with the requireStringLiterals option enabled, showing proper string literal comparisons and typeof expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-typeof.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint valid-typeof: [\"error\", { \"requireStringLiterals\": true }]*/\n\ntypeof foo === \"undefined\"\ntypeof bar == \"object\"\ntypeof baz === \"string\"\ntypeof bar === typeof qux\n```\n\n----------------------------------------\n\nTITLE: Incorrect spacing examples with unary operators in JavaScript\nDESCRIPTION: Examples of code that violates the space-unary-ops rule with the default configuration that requires spaces after word operators and no spaces around nonword operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-ops.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-unary-ops: \"error\"*/\n\ntypeof!foo;\n\nvoid{foo:0};\n\nnew[foo][0];\n\ndelete(foo.bar);\n\n++ foo;\n\nfoo --;\n\n- foo;\n\n+ \"3\";\n```\n\n----------------------------------------\n\nTITLE: Correct Assignment Examples in JavaScript\nDESCRIPTION: Examples of code that comply with the no-global-assign rule by only assigning values to regular variables, not read-only globals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-global-assign.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-global-assign: \"error\"*/\n\na = 1\nlet b = 1\nb = 2\n```\n\n----------------------------------------\n\nTITLE: Correct example with ImportDeclaration exception\nDESCRIPTION: Example showing how enabling the ImportDeclaration exception allows multiple spaces in import statements for alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-spaces: [\"error\", { exceptions: { \"ImportDeclaration\": true } }]*/\n\nimport mod          from 'mod';\nimport someOtherMod from 'some-other-mod';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'never' and '{}' Exception\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'never' option with an exception for curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo({bar: 'baz'});\nfoo(1, {bar: 'baz'});\n```\n\n----------------------------------------\n\nTITLE: ESLint Stats Collection using Node.js API\nDESCRIPTION: Example showing how to collect statistics using the ESLint Node.js API with the stats option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/stats.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ESLint } = require(\"eslint\");\n\n(async function main() {\n\t// 1. Create an instance.\n\tconst eslint = new ESLint({ stats: true, fix: true });\n\n\t// 2. Lint files.\n\tconst results = await eslint.lintFiles([\"file-to-fix.js\"]);\n\n\t// 3. Format the results.\n\tconst formatter = await eslint.loadFormatter(\"json\");\n\tconst resultText = formatter.format(results);\n\n\t// 4. Output it.\n\tconsole.log(resultText);\n})().catch(error => {\n\tprocess.exitCode = 1;\n\tconsole.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Quantified Spaces in Regular Expressions (JavaScript)\nDESCRIPTION: This snippet shows the correct way to represent multiple spaces in regular expressions using quantifiers. It demonstrates both literal notation and the RegExp constructor, which comply with the 'no-regex-spaces' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-regex-spaces.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-regex-spaces: \"error\"*/\n\nconst re = /foo {3}bar/;\nconst re1 = new RegExp(\"foo {3}bar\");\n```\n\n----------------------------------------\n\nTITLE: Correct Boolean Coercions in JavaScript\nDESCRIPTION: Examples of correct boolean coercions and usage that the rule allows when the 'boolean' option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-coercion: \"error\"*/\n\nconst b = Boolean(foo);\nconst b1 = foo.indexOf(\".\") !== -1;\n\nconst n = ~foo; // This is a just bitwise not.\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Negation Operators in JavaScript\nDESCRIPTION: Examples of proper negation patterns that show the correct way to negate 'in' and 'instanceof' operators using parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-negation.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-negation: \"error\"*/\n\nif (!(key in object)) {\n    // key is not in object\n}\n\nif (!(obj instanceof Ctor)) {\n    // obj is not an instance of Ctor\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example with Unused OUTER_LOOP Label\nDESCRIPTION: Example showing an unnecessary label that should be removed as it's not being used in the loop structure.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-labels.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nOUTER_LOOP:\nfor (const student of students) {\n    if (checkScores(student.scores)) {\n        continue;\n    }\n    doSomething(student);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Numbered Capture Groups\nDESCRIPTION: Examples of incorrect regular expression patterns that use numbered capture groups instead of named ones.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-named-capture-group.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-named-capture-group: \"error\"*/\n\nconst foo = /(ba[rz])/;\nconst bar = new RegExp('(ba[rz])');\nconst baz = RegExp('(ba[rz])');\n\nfoo.exec('bar')[1]; // Retrieve the group result.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Constructor Naming\nDESCRIPTION: Example of incorrect constructor naming with lowercase function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-cap.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-cap: [\"error\", { \"newIsCap\": true }]*/\n\nconst friend = new person();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Intentional Omission of Default Case in JavaScript Switch Statement\nDESCRIPTION: This snippet demonstrates a switch statement without a default case, but with a comment indicating that the omission is intentional. This approach is allowed by some code conventions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-case.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nswitch (foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomething();\n        break;\n\n    // no default\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Multiline Expressions in JavaScript\nDESCRIPTION: Examples of proper code patterns that avoid ASI-related issues by using explicit semicolons or alternative syntax structures to ensure correct statement termination.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unexpected-multiline.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unexpected-multiline: \"error\"*/\n\nconst foo = bar;\n(1 || 2).baz();\n\nconst baz = bar\n;(1 || 2).baz()\n\nconst hello = 'world';\n[1, 2, 3].forEach(addNumber);\n\nconst hi = 'world'\nvoid [1, 2, 3].forEach(addNumber);\n\nconst x = function() {};\n`hello`\n\nconst tag = function() {}\ntag `hello`\n```\n\n----------------------------------------\n\nTITLE: Correct usage of object-curly-spacing with 'arraysInObjects' option in JavaScript\nDESCRIPTION: Examples of code that comply with the 'object-curly-spacing' rule when using the 'arraysInObjects' option, showing correct spacing for objects containing arrays.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-curly-spacing: [\"error\", \"never\", { \"arraysInObjects\": true }]*/\n\nvar obj = {\"foo\": [ 1, 2 ] };\nvar obj = {\"foo\": [ \"baz\", \"bar\" ] };\n\n/*eslint object-curly-spacing: [\"error\", \"always\", { \"arraysInObjects\": false }]*/\n\nvar obj = { \"foo\": [ 1, 2 ]};\nvar obj = { \"foo\": [ \"baz\", \"bar\" ]};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'never' Option in JavaScript\nDESCRIPTION: Example of correct code when the unicode-bom rule is set to 'never' (default), which prohibits files from beginning with the Unicode BOM character.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/unicode-bom.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint unicode-bom: [\"error\", \"never\"]*/\n\nlet abc;\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples for no-multi-assign Rule with ignoreNonDeclaration Option\nDESCRIPTION: These examples demonstrate code that is allowed when the 'ignoreNonDeclaration' option is set to true. This option permits chained assignments that don't involve variable declarations or class field initializations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-assign.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-assign: [\"error\", { \"ignoreNonDeclaration\": true }]*/\n\nlet a;\nlet b;\na = b = \"baz\";\n\nconst x = {};\nconst y = {};\nx.one = y.one = 1;\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Declaration Example - JavaScript\nDESCRIPTION: Demonstrates basic variable declaration and initialization patterns that the rule addresses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet foo = 1;\nlet bar;\n\nif (foo) {\n    bar = 1;\n} else {\n    bar = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Equivalent Non-Renamed Syntax in JavaScript ES2015\nDESCRIPTION: Simplified syntax without redundant renaming for import/export statements and destructuring assignments, showing the preferred approach.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-rename.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { foo } from \"bar\";\nexport { foo };\nlet { foo } = bar;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Rule Categories Macro\nDESCRIPTION: Shows how to import and use the ruleCategories macro to display multiple rule categories with their respective boolean flags.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/rule-categories.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{ % from 'components/rule-categories.macro.html' import ruleCategories % } { {\nruleCategories({ recommended: true, fixable: true, hasSuggestions: true }) } }\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Character Escaping in JavaScript\nDESCRIPTION: Examples of code that properly use escape characters in strings, template literals, and regular expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-escape.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-escape: \"error\"*/\n\n\"\\\"\";\n'\\''; \n\"\\x12\";\n\"\\u00a9\";\n\"\\371\";\n\"xs\\u2111\";\n`\\``;\n`\\${${foo}}`;\n`$\\{${foo}}`;\n/\\\\/g; \n/\\t/g; \n/\\w\\$\\*\\^\\./;\n/[[]/;\n/[\\]]/;\n/[a-z-]/;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Property Descriptor Examples\nDESCRIPTION: Examples showing violations when using the considerPropertyDescriptor option with mismatched function names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-name-matching.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-name-matching: [\"error\", { \"considerPropertyDescriptor\": true }]*/\n// equivalent to /*eslint func-name-matching: [\"error\", \"always\", { \"considerPropertyDescriptor\": true }]*/\nconst obj = {};\nObject.create(obj, {foo:{value: function bar() {}}});\nObject.defineProperty(obj, 'bar', {value: function baz() {}});\nObject.defineProperties(obj, {baz:{value: function foo() {} }});\nReflect.defineProperty(obj, 'foo', {value: function value() {}});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Template Literals in JavaScript\nDESCRIPTION: Examples of code that comply with the no-template-curly-in-string rule. These examples show proper use of backticks for template literals and valid cases where template literal syntax appears in other contexts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-template-curly-in-string.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-template-curly-in-string: \"error\"*/\n`Hello ${name}!`;\n`Time: ${12 * 60 * 60 * 1000}`;\n\ntemplateFunction`Hello ${name}`;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Labels with Variable Name Conflicts in JavaScript\nDESCRIPTION: This example demonstrates incorrect code where a label shares the same name as a variable that is in scope, which violates the no-label-var rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-label-var.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-label-var: \"error\"*/\n\nvar x = foo;\nfunction bar() {\nx:\n  for (;;) {\n    break x;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Function Name Matching Examples - Never Mode\nDESCRIPTION: Examples of valid code where function names do not match their assignment targets in 'never' mode.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-name-matching.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-name-matching: [\"error\", \"never\"] */\n\nlet foo = function bar() {};\nconst foo1 = function() {};\nconst foo2 = () => {};\nfoo = function bar() {};\n\nconst obj = {foo: function bar() {}};\nobj.foo = function bar() {};\nobj['foo'] = function bar() {};\nobj['foo//bar'] = function foo() {};\nobj[foo] = function foo() {};\n\nconst obj1 = {foo: function bar() {}};\nconst obj2 = {[foo]: function foo() {}};\nconst obj3 = {'foo//bar': function foo() {}};\nconst obj4 = {foo: function() {}};\n\nobj['x' + 2] = function bar(){};\nconst [ bar ] = [ function bar(){} ];\n({[foo]: function bar() {}})\n\nclass C {\n    foo = function bar() {};\n    baz = function() {};\n}\n\n// private names are ignored\nclass D {\n    #foo = function foo() {};\n    #bar = function foo() {};\n    baz() {\n        this.#foo = function foo() {};\n        this.#foo = function bar() {};\n    }\n}\n\nmodule.exports = function foo(name) {};\nmodule['exports'] = function foo(name) {};\n```\n\n----------------------------------------\n\nTITLE: Correct Switch Statement Examples\nDESCRIPTION: Multiple examples of correct switch statement implementations using various termination methods including break, return, and throw.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-fallthrough: \"error\"*/\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomething();\n}\n\nfunction bar(foo) {\n    switch(foo) {\n        case 1:\n            doSomething();\n            return;\n\n        case 2:\n            doSomething();\n    }\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        throw new Error(\"Boo!\");\n\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1:\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1: case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // falls through\n\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1: {\n        doSomething();\n        // falls through\n    }\n\n    case 2: {\n        doSomethingElse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Airbnb base configuration\nDESCRIPTION: Equivalent ESLint configuration that extends the Airbnb base preset, which provides similar functionality to the JSCS Airbnb preset.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"airbnb-base\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage example of renaming imported undefined in JavaScript modules\nDESCRIPTION: Shows the correct way to import a name that conflicts with 'undefined' by using the 'as' keyword to rename it, which avoids shadowing the global identifier.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow-restricted-names.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-shadow-restricted-names: \"error\"*/\n\nimport { undefined as undef } from \"bar\";\n```\n\n----------------------------------------\n\nTITLE: enforceForClassFields Option - Correct Example (False)\nDESCRIPTION: Shows a class field initialized with an arrow function that doesn't use 'this', which is allowed when enforceForClassFields is set to false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"enforceForClassFields\": false }] */\n\nclass A {\n    foo = () => {}\n}\n```\n\n----------------------------------------\n\nTITLE: Shareable Configurations in ESLint Plugin\nDESCRIPTION: Example demonstrating how to create and expose shareable configurations within an ESLint plugin, including rule and plugin references.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\tconfigs: {},\n\trules: {\n\t\t\"dollar-sign\": {\n\t\t\tcreate(context) {\n\t\t\t\t// rule implementation ...\n\t\t\t},\n\t\t},\n\t},\n};\n\n// assign configs here so we can reference `plugin`\nObject.assign(plugin.configs, {\n\trecommended: [\n\t\t{\n\t\t\tplugins: {\n\t\t\t\texample: plugin,\n\t\t\t},\n\t\t\trules: {\n\t\t\t\t\"example/dollar-sign\": \"error\",\n\t\t\t},\n\t\t\tlanguageOptions: {\n\t\t\t\tglobals: {\n\t\t\t\t\tmyGlobal: \"readonly\",\n\t\t\t\t},\n\t\t\t\tparserOptions: {\n\t\t\t\t\tecmaFeatures: {\n\t\t\t\t\t\tjsx: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Paths Configuration Example\nDESCRIPTION: Example showing how to configure restricted imports using the paths option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", { \"paths\": [\"import1\", \"import2\"] }]\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Code Blocks in Processors with ESLint\nDESCRIPTION: Example demonstrating how to specify additional configurations for named code blocks in the 'overrides' section of the config, such as disabling specific rules for code blocks in markdown files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins-deprecated.md#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [\"a-plugin\"],\n\t\"overrides\": [\n\t\t{\n\t\t\t\"files\": [\"*.md\"],\n\t\t\t\"processor\": \"a-plugin/markdown\"\n\t\t},\n\t\t{\n\t\t\t\"files\": [\"**/*.md/*.js\"],\n\t\t\t\"rules\": {\n\t\t\t\t\"strict\": \"off\"\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for no-lonely-if Rule\nDESCRIPTION: These examples demonstrate code that follows the no-lonely-if rule by using else-if syntax or having additional statements in the else block that justify not using else-if.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-lonely-if.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-lonely-if: \"error\"*/\n\nif (condition) {\n    // ...\n} else if (anotherCondition) {\n    // ...\n}\n\nif (condition) {\n    // ...\n} else if (anotherCondition) {\n    // ...\n} else {\n    // ...\n}\n\nif (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    }\n    doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Comment Length Configuration Example (JavaScript)\nDESCRIPTION: Shows usage of the comments option which enforces a maximum line length specifically for comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-len.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n----------------------------------------\n\nTITLE: Basic Rule Configuration in JSON\nDESCRIPTION: Basic configuration example showing how to enable the prefer-destructuring rule with default settings for both array and object destructuring.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-destructuring.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Symbol with Description\nDESCRIPTION: Examples of code that satisfies the symbol-description rule by providing descriptions when creating Symbol instances.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/symbol-description.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint symbol-description: \"error\"*/\n\nconst foo = Symbol(\"some description\");\n\nconst someString = \"some description\";\nconst bar = Symbol(someString);\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript Constructor Usage\nDESCRIPTION: Examples of code that violate the no-useless-constructor rule, showing empty constructors and constructors that just pass arguments to super.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-constructor.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-constructor: \"error\"*/\n\nclass A {\n    constructor () {\n    }\n}\n\nclass B extends A {\n    constructor (...args) {\n      super(...args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples with except-parens Option in JavaScript\nDESCRIPTION: Examples of code that comply with the no-return-assign rule using the default 'except-parens' option. These examples either use comparison operators instead of assignment or enclose assignments in parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-return-assign.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-return-assign: \"error\"*/\n\nfunction doSomething() {\n    return foo == bar + 2;\n}\n\nfunction doSomethingElse() {\n    return foo === bar + 2;\n}\n\nfunction doSomethingMore() {\n    return (foo = bar + 2);\n}\n\nconst foo = (a, b) => (a = b)\n\nconst bar = (a, b, c) => ((a = b), c == b)\n\nfunction doAnotherThing() {\n    return (foo = bar) && foo > 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct examples with allowEscape option\nDESCRIPTION: Examples of code patterns that comply with the no-misleading-character-class rule when allowEscape option is enabled, using proper escape sequences to represent the multi-code point characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-misleading-character-class.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-misleading-character-class: [\"error\", { \"allowEscape\": true }] */\n\n/[\\ud83d\\udc4d]/;\n/[\\u00B7\\u0300-\\u036F]/u;\n/[👨\\u200d👩]/u;\nnew RegExp(\"[\\x41\\u0301]\");\nnew RegExp(`[\\u{1F1EF}\\u{1F1F5}]`, \"u\");\nnew RegExp(\"[\\\\u{1F1EF}\\\\u{1F1F5}]\", \"u\");\n```\n\n----------------------------------------\n\nTITLE: Configuring beforeColon spacing in JavaScript objects\nDESCRIPTION: Examples showing incorrect and correct spacing before colons in object literals with beforeColon:false option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/key-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint key-spacing: [\"error\", { \"beforeColon\": false }]*/\n\nvar obj = { \"foo\" : 42 };\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint key-spacing: [\"error\", { \"beforeColon\": false }]*/\n\nvar obj = { \"foo\": 42 };\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples for prefer-template Rule\nDESCRIPTION: These examples show code that complies with the prefer-template rule, including plain strings, template literals, and cases handled by other rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-template.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-template: \"error\"*/\n\nconst str = \"Hello World!\";\nconst str1 = `Hello, ${name}!`;\nconst str2 = `Time: ${12 * 60 * 60 * 1000}`;\n\n// This is reported by `no-useless-concat`.\nconst str4 = \"Hello, \" + \"World!\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for prefer-object-has-own Rule\nDESCRIPTION: These code snippets demonstrate incorrect usage according to the prefer-object-has-own ESLint rule. They show various ways of using Object.prototype.hasOwnProperty.call() or similar constructs, which the rule aims to replace with Object.hasOwn().\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-object-has-own.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-object-has-own: \"error\"*/\n\nObject.prototype.hasOwnProperty.call(obj, \"a\");\n\nObject.hasOwnProperty.call(obj, \"a\");\n\n({}).hasOwnProperty.call(obj, \"a\");\n\nconst hasProperty = Object.prototype.hasOwnProperty.call(object, property);\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for no-confusing-arrow ESLint Rule\nDESCRIPTION: This JSON snippet shows the default configuration options for the no-confusing-arrow rule. It includes settings for 'allowParens' and 'onlyOneSimpleParam'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-confusing-arrow.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-confusing-arrow\": [\n            \"error\",\n            { \"allowParens\": true, \"onlyOneSimpleParam\": false }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Boolean Casts in JavaScript\nDESCRIPTION: Examples of code that comply with the no-extra-boolean-cast rule, showing proper use of boolean casts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-boolean-cast.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-extra-boolean-cast: \"error\"*/\n\nconst foo = !!bar;\nconst foo1 = Boolean(bar);\n\nfunction qux() {\n    return !!bar;\n}\n\nfoo = bar ? !!baz : !!bat;\n```\n\n----------------------------------------\n\nTITLE: Enforcing Generator Star Placement in JavaScript\nDESCRIPTION: Examples of generator function syntax enforced by different rule configurations (start, middle, end).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* generator() {\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction * generator() {\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction *generator() {\n}\n```\n\n----------------------------------------\n\nTITLE: Correct implementation of padded-blocks with 'blocks: never' option in JavaScript\nDESCRIPTION: Examples of code that correctly implements no padding for block statements when using the blocks-specific option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"never\" }]*/\n\nif (a) {\n    b();\n}\n\nif (a)\n{\n    b();\n}\n\nclass C {\n    static {\n        a();\n    }\n}\n\nclass D {\n\n    static {\n        a();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Linter Verification with SourceCode\nDESCRIPTION: Shows how to use the Linter.verify() method with a SourceCode instance for more advanced linting scenarios.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst Linter = require(\"eslint\").Linter,\n\tlinter = new Linter(),\n\tSourceCode = require(\"eslint\").SourceCode;\n\nconst code = new SourceCode(\"var foo = bar;\", ast);\n\nconst messages = linter.verify(\n\tcode,\n\t{\n\t\trules: {\n\t\t\tsemi: 2,\n\t\t},\n\t},\n\t{ filename: \"foo.js\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript Switch Statement According to default-case Rule\nDESCRIPTION: This snippet shows an example of incorrect code according to the default-case rule. The switch statement lacks both a default case and a comment indicating intentional omission.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-case.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint default-case: \"error\"*/\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Binary Expressions\nDESCRIPTION: Demonstrates proper ways to write binary expressions that avoid constant evaluation issues.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-binary-expression.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-constant-binary-expression: \"error\"*/\n\nconst value1 = x == null;\n\nconst value2 = (condition ? x : {}) || DEFAULT;\n\nconst value3 = !(foo == null);\n\nconst value4 = Boolean(foo) === true;\n\nconst objIsEmpty = Object.keys(someObj).length === 0;\n\nconst arrIsEmpty = someArr.length === 0;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Callback Usage in JavaScript\nDESCRIPTION: These examples show incorrect usage of array callbacks where return statements are missing or improperly used. The ESLint rule 'array-callback-return' would flag these as errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-callback-return.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-callback-return: \"error\"*/\n\nconst indexMap = myArray.reduce(function(memo, item, index) {\n    memo[item] = index;\n}, {});\n\nconst foo = Array.from(nodes, function(node) {\n    if (node.tagName === \"DIV\") {\n        return true;\n    }\n});\n\nconst bar = foo.filter(function(x) {\n    if (x) {\n        return true;\n    } else {\n        return;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Array Bracket Newline Rule - Consistent Option Examples\nDESCRIPTION: Examples showing incorrect and correct usage with the 'consistent' option, which requires consistent usage of linebreaks for each pair of brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-newline.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", \"consistent\"]*/\n\nconst a = [1\n];\nconst b = [\n    1];\nconst c = [function foo() {\n    dosomething();\n}\n]\nconst d = [\n    function foo() {\n        dosomething();\n    }]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", \"consistent\"]*/\n\nconst a = [];\nconst b = [\n];\nconst c = [1];\nconst d = [\n    1\n];\nconst e = [function foo() {\n    dosomething();\n}];\nconst f = [\n    function foo() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Defining custom parser for Linter API\nDESCRIPTION: When using the Linter API with a custom parser, explicitly define the parser using Linter#defineParser before linting any code, as Linter no longer loads parsers from the filesystem.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst linter = new Linter();\n\n// Define parser before linting\nlinter.defineParser('custom-parser', customParserObject);\n\n// Now you can lint using the custom parser\nlinter.verify(code, config, { parser: 'custom-parser' });\n```\n\n----------------------------------------\n\nTITLE: Updating File Extension-Named Processors in JavaScript\nDESCRIPTION: Shows how to update file extension-named processors to use valid identifiers in the new flat config system. This example renames a .md processor to 'markdown'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tconfigs: {},\n\trules: {},\n\tprocessors: {\n\t\t// works in both old and new config systems\n\t\tmarkdown: {\n\t\t\tpreprocess() {},\n\t\t\tpostprocess() {},\n\t\t},\n\t},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Correct example with VariableDeclarator exception\nDESCRIPTION: Example showing how enabling the VariableDeclarator exception allows multiple spaces in variable declarations for alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-spaces: [\"error\", { exceptions: { \"VariableDeclarator\": true } }]*/\n\nvar someVar      = 'foo';\nvar someOtherVar = 'barBaz';\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Assignment in Conditionals (JavaScript)\nDESCRIPTION: These examples show correct usage of assignments and comparisons in conditional statements that comply with the no-cond-assign rule using the 'except-parens' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-cond-assign.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-cond-assign: \"error\"*/\n\n// Assignment replaced by comparison\nlet x;\nif (x === 0) {\n    const b = 1;\n}\n\n// Practical example that wraps the assignment in parentheses\nconst setHeight = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode));\n}\n\n// Practical example that wraps the assignment and tests for 'null'\nconst set_height = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode) !== null);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Boolean Coercions in JavaScript\nDESCRIPTION: Examples of boolean coercions that the rule flags as incorrect when the 'boolean' option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-coercion: \"error\"*/\n\nconst b = !!foo;\nconst b1 = ~foo.indexOf(\".\");\n// bitwise not is incorrect only with `indexOf`/`lastIndexOf` method calling.\n```\n\n----------------------------------------\n\nTITLE: Basic Mixed Operators Examples\nDESCRIPTION: Demonstrates basic usage of mixed operators showing incorrect and correct patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-operators.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = a && b || c || d;    /*BAD: Unexpected mix of '&&' and '||'.*/\nvar foo = (a && b) || c || d;  /*GOOD*/\nvar foo = a && (b || c || d);  /*GOOD*/\n```\n\n----------------------------------------\n\nTITLE: Function Expression Error Example\nDESCRIPTION: Demonstrates the error that occurs when trying to use a function expression before its definition\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-style.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomething();  // error!\n\nconst doSomething = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using restrictedNamedExports Option - Incorrect Examples\nDESCRIPTION: Examples of code that violate the no-restricted-exports rule when specific export names are restricted. This demonstrates how various export syntaxes are flagged when they use restricted names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", {\n    \"restrictedNamedExports\": [\"foo\", \"bar\", \"Baz\", \"a\", \"b\", \"c\", \"d\", \"e\", \"👍\"]\n}]*/\n\nexport const foo = 1;\n\nexport function bar() {}\n\nexport class Baz {}\n\nconst a = {};\nexport { a };\n\nfunction someFunction() {}\nexport { someFunction as b };\n\nexport { c } from \"some_module\";\n\nexport { \"d\" } from \"some_module\";\n\nexport { something as e } from \"some_module\";\n\nexport { \"👍\" } from \"some_module\";\n```\n\n----------------------------------------\n\nTITLE: Known Limitation Examples in Native Object Extension Detection\nDESCRIPTION: Examples of undetectable approaches to modifying built-in object prototypes that the rule cannot catch\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extend-native.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = Object;\nx.prototype.thing = a;\n\neval(\"Array.prototype.forEach = 'muhahaha'\");\n\nwith(Array) {\n    prototype.thing = 'thing';\n};\n\nwindow.Function.prototype.bind = 'tight';\n```\n\n----------------------------------------\n\nTITLE: Correct Function Call Spacing with 'always' and 'allowNewlines' Options in JavaScript\nDESCRIPTION: Examples of correct function call spacing when 'always' and 'allowNewlines' options are set, showing space and newline variations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-call-spacing.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-call-spacing: [\"error\", \"always\", { \"allowNewlines\": true }]*/\n\nfn (); // Newlines are never required.\n\nfn\n();\n```\n\n----------------------------------------\n\nTITLE: Defining Generator Functions in JavaScript\nDESCRIPTION: Examples of different ways to define generator functions in JavaScript, demonstrating various placements of the asterisk (*) symbol.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction *generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction * generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using Non-capturing Groups in JavaScript RegExp\nDESCRIPTION: Shows how to use non-capturing groups with (?:...) syntax when capture groups are not needed for result extraction.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-named-capture-group.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst regex = /(?:cauli|sun)flower/;\n```\n\n----------------------------------------\n\nTITLE: Correct usage of object-curly-spacing with 'objectsInObjects' option in JavaScript\nDESCRIPTION: Examples of code that comply with the 'object-curly-spacing' rule when using the 'objectsInObjects' option, showing correct spacing for nested objects.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-spacing.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-curly-spacing: [\"error\", \"never\", { \"objectsInObjects\": true }]*/\n\nvar obj = {\"foo\": {\"baz\": 1, \"bar\": 2} };\n\n/*eslint object-curly-spacing: [\"error\", \"always\", { \"objectsInObjects\": false }]*/\n\nvar obj = { \"foo\": { \"baz\": 1, \"bar\": 2 }};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Additional Incorrect Usage with 'ignoreDestructuring: true' Option\nDESCRIPTION: Examples of additional code that violate the camelcase rule with the { \"ignoreDestructuring\": true } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nconst { some_property } = obj; // allowed by {ignoreDestructuring: true}\nconst foo = some_property + 1; // error, ignoreDestructuring does not apply to this statement\n```\n\n----------------------------------------\n\nTITLE: Overriding Keyword Spacing for Specific Keywords\nDESCRIPTION: Shows how to use the 'overrides' option to customize spacing for specific keywords while maintaining default behavior for others.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/keyword-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint keyword-spacing: [\"error\", { \"overrides\": {\n  \"if\": { \"after\": false },\n  \"for\": { \"after\": false },\n  \"while\": { \"after\": false },\n  \"static\": { \"after\": false },\n  \"as\": { \"after\": false }\n} }]*/\n\nif(foo) {\n    //...\n} else if(bar) {\n    //...\n} else {\n    //...\n}\n\nfor(;;);\n\nwhile(true) {\n    //...\n}\n\nclass C {\n    static{\n        //...\n    }\n}\n\nexport { C as\"my class\" };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unnecessary Else Block in JavaScript\nDESCRIPTION: This snippet shows an example of an unnecessary 'else' block after an 'if' statement with a return, which the 'no-else-return' rule aims to highlight.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-else-return.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n    if (x) {\n        return y;\n    } else {\n        return z;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating correct usage of curly braces in JavaScript\nDESCRIPTION: Examples of code that comply with the 'curly' rule when set to the default 'all' option. These snippets show proper use of curly braces around block statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint curly: \"error\"*/\n\nif (foo) {\n    foo++;\n}\n\nwhile (bar) {\n    baz();\n}\n\nif (foo) {\n    baz();\n} else {\n    qux();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct examples for the no-unneeded-ternary rule in JavaScript\nDESCRIPTION: Examples of code that comply with the ESLint no-unneeded-ternary rule, demonstrating proper use of conditionals and ternary operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unneeded-ternary.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unneeded-ternary: \"error\"*/\n\nconst a = x === 2 ? \"Yes\" : \"No\";\n\nconst b = x !== false;\n\nconst c = x ? \"Yes\" : \"No\";\n\nconst d = x ? y : x;\n\nf(x ? x : 1); // default assignment - would be disallowed if defaultAssignment option set to false. See option details below.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Self-Assignment Examples in JavaScript\nDESCRIPTION: Examples of self-assignments that have no effect and would trigger the rule error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-self-assign.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfoo = foo;\n[bar, baz] = [bar, qiz];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'always' Option\nDESCRIPTION: Examples of incorrect ternary expression formatting when using the 'always' rule option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-ternary.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint multiline-ternary: [\"error\", \"always\"]*/\n\nfoo > bar ? value1 : value2;\n\nfoo > bar ? value :\n    value2;\n\nfoo > bar ?\n    value : value2;\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Global Variables in ESLint Configuration\nDESCRIPTION: Configuration example showing how to disable specific global variables in an environment where most globals are available. This example disables the Promise global.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tPromise: \"off\",\n\t\t\t},\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct usage with local variable in JavaScript\nDESCRIPTION: Example of code that uses 'event' as a local constant rather than accessing the global variable, which is allowed by the no-restricted-globals rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-globals.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/*global event*/\n/*eslint no-restricted-globals: [\"error\", \"event\"]*/\n\nconst event = 1;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Non-octal Decimal Escapes in JavaScript\nDESCRIPTION: Examples of code that improperly uses \\8 and \\9 escape sequences in string literals, which this ESLint rule flags as incorrect.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-nonoctal-decimal-escape.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-nonoctal-decimal-escape: \"error\"*/\n\n\"\\8\";\n\n\"\\9\";\n\nconst foo = \"w\\8less\";\n\nconst bar = \"December 1\\9\";\n\nconst baz = \"Don't use \\8 and \\9 escapes.\";\n\nconst quux = \"\\0\\8\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example with ESLint Rule\nDESCRIPTION: Example of code that violates the 'class-methods-use-this' rule where a class method 'foo' doesn't use 'this', triggering an ESLint error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint class-methods-use-this: \"error\"*/\n\nclass A {\n    foo() {\n        console.log(\"Hello World\");     /*error Expected 'this' to be used by class method 'foo'.*/\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples for no-new-native-nonconstructor rule\nDESCRIPTION: Examples of code that violate the no-new-native-nonconstructor rule by incorrectly using the new operator with Symbol and BigInt global functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-native-nonconstructor.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new-native-nonconstructor: \"error\"*/\n\nconst foo = new Symbol('foo');\nconst bar = new BigInt(9007199254740991);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Generator Functions with 'neither' Option\nDESCRIPTION: Examples of correctly formatted generator functions when both 'before' and 'after' options are set to false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star-spacing.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint generator-star-spacing: [\"error\", {\"before\": false, \"after\": false}]*/\n\nfunction*generator() {}\n\nvar anonymous = function*() {};\n\nvar shorthand = { *generator() {} };\n```\n\n----------------------------------------\n\nTITLE: Reporting Unused ESLint Disable Comments in JavaScript\nDESCRIPTION: Shows how to configure ESLint to report unused 'eslint-disable' comments using the 'reportUnusedDisableDirectives' setting in the configuration file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlinterOptions: {\n\t\t\treportUnusedDisableDirectives: \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing FileEnumerator After /lib Entrypoint Removal in JavaScript\nDESCRIPTION: This snippet shows how to access the FileEnumerator after the removal of the /lib entrypoint in ESLint v8.0.0. The new method uses the /use-at-your-own-risk entrypoint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FileEnumerator } = require(\"eslint/lib/cli-engine/file-enumerator\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FileEnumerator } = require(\"eslint/use-at-your-own-risk\");\n```\n\n----------------------------------------\n\nTITLE: Correct Example: Function Definition in Finally Block (JavaScript)\nDESCRIPTION: This example shows code that complies with the no-unsafe-finally rule. The function defines an inner function in the finally block, which doesn't affect the control flow of the outer function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        let a = function() {\n            return \"hola!\";\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Recommended else-if Pattern in JavaScript\nDESCRIPTION: This code snippet shows the recommended pattern using else-if instead of a lonely if statement, which improves code readability and structure.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-lonely-if.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (foo) {\n    // ...\n} else if (bar) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Unix Line Endings in JavaScript\nDESCRIPTION: Example of correct code for the 'linebreak-style' rule with the default 'unix' option. It demonstrates proper use of LF line endings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/linebreak-style.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint linebreak-style: [\"error\", \"unix\"]*/\n\nvar a = 'a', // \\n\n    b = 'b'; // \\n\n// \\n\nfunction foo(params) { // \\n\n    // do stuff \\n\n}// \\n\n```\n\n----------------------------------------\n\nTITLE: New ecmaVersion Configuration Format\nDESCRIPTION: Updated configuration format for enabling ES6 features in ESLint v2.0.0 using the ecmaVersion property under parserOptions. This replaces individual feature flags with a version number.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tparserOptions: {\n\t\tecmaVersion: 6;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Tax Calculation with Magic Numbers\nDESCRIPTION: Example of incorrect code using magic number for tax calculation\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-magic-numbers.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-magic-numbers: \"error\"*/\n\nconst dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * 0.25);\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript code examples that violate the no-labels rule\nDESCRIPTION: Examples of code patterns that would trigger the no-labels rule error in ESLint. These include various usages of labeled statements with loops, switches, and other blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-labels.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-labels: \"error\"*/\n\nlabel:\n    while(true) {\n        // ...\n    }\n\nlabel:\n    while(true) {\n        break label;\n    }\n\nlabel:\n    while(true) {\n        continue label;\n    }\n\nlabel:\n    switch (a) {\n    case 0:\n        break label;\n    }\n\nlabel:\n    {\n        break label;\n    }\n\nlabel:\n    if (a) {\n        break label;\n    }\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for Required Blank Lines Before Return Statements\nDESCRIPTION: These examples demonstrate correct code with proper blank line spacing before return statements, following the rule configuration. Both functions properly implement the required blank line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"*\", next: \"return\" }\n]*/\n\nfunction foo1() {\n    bar();\n\n    return;\n}\n\nfunction foo2() {\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific RuleTester Test Cases in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to run specific test cases within a RuleTester suite by adding 'only: true' or using RuleTester.only() wrapper. Useful for focused testing during development.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/tests.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nruleTester.run(\"my-rule\", myRule, {\n\tvalid: [\n\t\tRuleTester.only(\"const valid = 42;\"),\n\t\t// Other valid cases\n\t],\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"const invalid = 42;\",\n\t\t\tonly: true,\n\t\t},\n\t\t// Other invalid cases\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Element Formatting with 'consistent' Option in JavaScript\nDESCRIPTION: Examples of incorrectly formatted arrays that violate the 'consistent' option, which requires consistent usage of line breaks between elements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", \"consistent\"]*/\n\nvar a = [\n    1, 2,\n    3\n];\nvar b = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    },\n    function baz() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in JSON Format\nDESCRIPTION: Example of how to configure ESLint plugins in a JSON configuration file. The 'eslint-plugin-' prefix can be omitted from the plugin name.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins-deprecated.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [\"plugin1\", \"eslint-plugin-plugin2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating incorrect usage of curly braces in JavaScript\nDESCRIPTION: Examples of code that violate the 'curly' rule when set to the default 'all' option. These snippets show block statements without curly braces, which the rule aims to prevent.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint curly: \"error\"*/\n\nif (foo) foo++;\n\nwhile (bar)\n    baz();\n\nif (foo) {\n    baz();\n} else qux();\n```\n\n----------------------------------------\n\nTITLE: Illustrating Stroustrup Brace Style in JavaScript\nDESCRIPTION: Example of the Stroustrup brace style in JavaScript, where the else statement is on its own line after the preceding closing brace.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/brace-style.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (foo) {\n  bar();\n}\nelse {\n  baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Constructor Naming\nDESCRIPTION: Example of correct constructor naming with uppercase function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-cap.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-cap: [\"error\", { \"newIsCap\": true }]*/\n\nconst friend = new Person();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Spacing Options in Parentheses in JavaScript\nDESCRIPTION: Examples showing both styles of parentheses spacing: with spaces inside parentheses and without spaces inside parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfoo( 'bar' );\nvar x = ( 1 + 2 ) * 3;\n\nfoo('bar');\nvar x = (1 + 2) * 3;\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of restricted globals in JavaScript\nDESCRIPTION: Example of code that violates the no-restricted-globals rule by using the restricted 'event' and 'fdescribe' globals directly.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-globals.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/*global event, fdescribe*/\n/*eslint no-restricted-globals: [\"error\", \"event\", \"fdescribe\"]*/\n\nfunction onClick() {\n    console.log(event);\n}\n\nfdescribe(\"foo\", function() {\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Index Usage\nDESCRIPTION: Example of incorrect code using magic number as array index\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-magic-numbers.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-magic-numbers: \"error\"*/\n\nconst data = ['foo', 'bar', 'baz'];\n\nconst dataLast = data[2];\n```\n\n----------------------------------------\n\nTITLE: enforceForClassFields Option - Incorrect Example\nDESCRIPTION: Demonstrates a class field initialized with an arrow function that doesn't use 'this', which violates the rule with enforceForClassFields set to true (default).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"enforceForClassFields\": true }] */\n\nclass A {\n    foo = () => {}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Inline Configuration Comments\nDESCRIPTION: Shows how to disable all inline configuration comments using the 'noInlineConfig' setting in a configuration file. This enforces consistent rule application across the codebase.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {...},\n  \"noInlineConfig\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Call Spacing with 'always' and 'allowNewlines' Options in JavaScript\nDESCRIPTION: Example of incorrect function call spacing when 'always' and 'allowNewlines' options are set, showing no space between function name and parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-call-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-call-spacing: [\"error\", \"always\", { \"allowNewlines\": true }]*/\n\nfn();\n```\n\n----------------------------------------\n\nTITLE: Debugging Symbols with Descriptions in JavaScript\nDESCRIPTION: Shows how Symbol descriptions improve debugging by being displayed when symbols are logged to the console.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/symbol-description.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = Symbol(\"some description\");\n\n> console.log(foo);\n// Symbol(some description)\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with 'never' Option\nDESCRIPTION: Examples of code that complies with the one-var rule when configured with the 'never' option, showing proper separate declaration patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", \"never\"]*/\n\nfunction foo1() {\n    var bar;\n    var baz;\n}\n\nfunction foo2() {\n    var bar;\n\n    if (baz) {\n        var qux = true;\n    }\n}\n\nfunction foo3() {\n    let bar;\n\n    if (baz) {\n        let qux = true;\n    }\n}\n\nclass C {\n    static {\n        var foo;\n        var bar;\n        let baz;\n        let qux;\n    }\n}\n\n// declarations with multiple variables are allowed in for-loop initializers\nfor (var i = 0, len = arr.length; i < len; i++) {\n    doSomething(arr[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct example with default Property exception\nDESCRIPTION: Example showing how the default exception for Property nodes allows multiple spaces in object property alignments when used with key-spacing rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-spaces: \"error\"*/\n/*eslint key-spacing: [\"error\", { align: \"value\" }]*/\n\nvar obj = {\n    first:  \"first\",\n    second: \"second\"\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Processors in eslintrc Format\nDESCRIPTION: Example of configuring a processor in eslintrc format. The processor is referenced by a string pattern combining the plugin name and processor name.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// .eslintrc.js\nmodule.exports = {\n\tplugins: [\"someplugin\"],\n\tprocessor: \"someplugin/someProcessor\",\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating Ambiguous Code Without Proper Spacing\nDESCRIPTION: This example demonstrates how code without proper spacing can be ambiguous and difficult to interpret, showing i+++2 which could be interpreted in multiple ways.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-infix-ops.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sum = i+++2;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Missing Function-Level Strict Mode\nDESCRIPTION: Example of incorrect code when using the 'function' option. Some functions are missing the strict mode directive, and a nested function incorrectly has one.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"function\"]*/\n\nfunction foo() {\n}\n\n(function() {\n    function bar() {\n        \"use strict\";\n    }\n}());\n```\n\n----------------------------------------\n\nTITLE: Invalid Null Comparisons Using Loose Equality\nDESCRIPTION: Examples of incorrect code that uses loose equality (== or !=) when comparing with null. These patterns are flagged by the rule as they can match both null and undefined values.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eq-null.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Testing surrogate pairs in RegExp character classes\nDESCRIPTION: Examples showing how surrogate pairs require the Unicode flag to work correctly in RegExp character classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-misleading-character-class.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/^[👍]$/.test(\"👍\"); //→ false\n\n// Surrogate pair is OK if with u flag.\n/^[👍]$/u.test(\"👍\"); //→ true\n```\n\n----------------------------------------\n\nTITLE: Correct code with enforceForClassMembers option disabled\nDESCRIPTION: Examples of code that comply with the rule when enforceForClassMembers is set to false, allowing unnecessary computed keys in class members.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-computed-key.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-computed-key: [\"error\", { \"enforceForClassMembers\": false }]*/\n\nclass SomeClass {\n    [\"foo\"] = \"bar\";\n    [42] = \"baz\";\n\n    ['a']() {}\n    get ['b']() {}\n    set ['c'](value) {}\n\n    static [\"foo\"] = \"bar\";\n    static ['baz']() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'always' and '()' Exception\nDESCRIPTION: Examples of code that would be considered correct when using the 'always' option with an exception for nested parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"()\"] }]*/\n\nfoo(( 1 + 2 ));\nfoo(( 1 + 2 ), 1 );\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Blocks with Comments in JavaScript\nDESCRIPTION: Examples of code that comply with the 'no-empty' rule, showing blocks with comments to indicate intentional emptiness.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty: \"error\"*/\n\nif (foo) {\n    // empty\n}\n\nwhile (foo) {\n    /* empty */\n}\n\ntry {\n    doSomething();\n} catch (ex) {\n    // continue regardless of error\n}\n\ntry {\n    doSomething();\n} finally {\n    /* continue regardless of error */\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Without debugger Statement in JavaScript\nDESCRIPTION: This snippet shows correct code that complies with the no-debugger rule by not using a debugger statement and suggesting an alternative debugging approach.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-debugger.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-debugger: \"error\"*/\n\nfunction isTruthy(x) {\n    return Boolean(x); // set a breakpoint at this line\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Property Descriptor Examples\nDESCRIPTION: Examples of valid code when using the considerPropertyDescriptor option with Object.create, Object.defineProperty, and related methods.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-name-matching.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-name-matching: [\"error\", { \"considerPropertyDescriptor\": true }]*/\n// equivalent to /*eslint func-name-matching: [\"error\", \"always\", { \"considerPropertyDescriptor\": true }]*/\nconst obj = {};\nObject.create(obj, {foo:{value: function foo() {}}});\nObject.defineProperty(obj, 'bar', {value: function bar() {}});\nObject.defineProperties(obj, {baz:{value: function baz() {} }});\nReflect.defineProperty(obj, 'foo', {value: function foo() {}});\n```\n\n----------------------------------------\n\nTITLE: Incorrect CommonJS Module Exports Examples\nDESCRIPTION: Examples showing violations when using the includeCommonJSModuleExports option with module.exports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-name-matching.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-name-matching: [\"error\", { \"includeCommonJSModuleExports\": true }]*/\n// equivalent to /*eslint func-name-matching: [\"error\", \"always\", { \"includeCommonJSModuleExports\": true }]*/\n\nmodule.exports = function foo(name) {};\nmodule['exports'] = function foo(name) {};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Tab Indentation Example in JavaScript\nDESCRIPTION: Shows incorrect indentation when the 'indent' rule is set to use tabs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", \"tab\"]*/\n\nif (a) {\n     b=c;\nfunction foo(d) {\n           e=f;\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of no-useless-return Rule in JavaScript\nDESCRIPTION: Examples demonstrating code patterns that violate the no-useless-return rule by including redundant return statements that serve no purpose and should be avoided.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-return.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-useless-return: \"error\" */\n\nconst foo = function() { return; }\n\nconst bar = function() {\n  doSomething();\n  return;\n}\n\nconst baz = function() {\n  if (condition) {\n    qux();\n    return;\n  } else {\n    quux();\n  }\n}\n\nconst item = function() {\n  switch (bar) {\n    case 1:\n      doSomething();\n    default:\n      doSomethingElse();\n      return;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct ESLint Consistent Return Examples\nDESCRIPTION: Examples of code that correctly implements the consistent-return rule with consistent return values and constructor functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-return.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic require() Usage\nDESCRIPTION: Shows the basic way to require a module in Node.js at the top level.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/global-require.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fs = require(\"fs\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Line Separated Groups for sort-keys Rule\nDESCRIPTION: Examples of correct code when using the allowLineSeparatedGroups option where properties are sorted within their groups separated by blank lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"asc\", {allowLineSeparatedGroups: true}]*/\n\nconst obj1 = {\n    e: 1,\n    f: 2,\n    g: 3,\n\n    a: 4,\n    b: 5,\n    c: 6\n}\n\nconst obj2 = {\n    b: 1,\n\n    // comment\n    a: 4,\n    c: 5,\n}\n\nconst obj3 = {\n    c: 1,\n    d: 2,\n\n    b () {\n\n    },\n    e: 3,\n}\n\nconst obj4 = {\n    c: 1,\n    d: 2,\n    // comment\n\n    // comment\n    b() {\n\n    },\n    e: 4\n}\n\nconst obj5 = {\n    b,\n\n    [foo + bar]: 1,\n    a\n}\n\nconst obj6 = {\n    b: 1\n    // comment before comma\n\n    ,\n    a: 2\n};\n\nconst obj7 = {\n    b: 1,\n\n    a: 2,\n    ...z,\n    c: 3\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for the Default 'all' Option\nDESCRIPTION: Examples showing code patterns that would be flagged by the rule when using the default 'all' option, which disallows unnecessary parentheses around any expression.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: \"error\" */\n\na = (b * c);\n\n(a * b) + c;\n\nfor (a in (b, c));\n\nfor (a in (b));\n\nfor (a of (b));\n\ntypeof (a);\n\n(Object.prototype.toString.call());\n\nclass A {\n    [(x)] = 1;\n}\n\nclass B {\n    x = (y + z);\n}\n```\n\n----------------------------------------\n\nTITLE: Using parseInt() with radix (Correct - default option)\nDESCRIPTION: Example of correct code when using parseInt() with the radix parameter explicitly set to 10, ensuring the string is interpreted as a decimal number.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/radix.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst num = parseInt(\"071\", 10);\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage examples of shadowing restricted names in JavaScript\nDESCRIPTION: Shows several examples of code that incorrectly shadows restricted global names like NaN, Infinity, undefined, and eval in a script context. These patterns are flagged by the no-shadow-restricted-names ESLint rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow-restricted-names.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-shadow-restricted-names: \"error\"*/\n\nfunction NaN(){}\n\n!function(Infinity){};\n\nconst undefined = 5;\n\ntry {} catch(eval){}\n```\n\n----------------------------------------\n\nTITLE: Correct SwitchCase Indentation in JavaScript\nDESCRIPTION: Demonstrates correct indentation for switch cases when the 'SwitchCase' option is set to 1.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"SwitchCase\": 1 }]*/\n\nswitch(a){\n  case \"a\":\n    break;\n  case \"b\":\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Using const Variable without Modification in JavaScript\nDESCRIPTION: This example demonstrates correct usage of a const variable by declaring it and using it without any attempts to modify its value.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-const-assign.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-const-assign: \"error\"*/\n\nconst a = 0;\nconsole.log(a);\n```\n\n----------------------------------------\n\nTITLE: Unicode Properties with RegExp v Flag\nDESCRIPTION: Demonstrates the use of Unicode property escapes with the v flag to match emoji sequences.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-unicode-regexp.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /^\\p{RGI_Emoji}$/v;\n\n// Match an emoji that consists of just 1 code point:\nre.test('⚽'); // '\\u26BD'\n// → true ✅\n\n// Match an emoji that consists of multiple code points:\nre.test('👨🏾‍⚕️'); // '\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'\n// → true ✅\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Negated Conditions in JavaScript\nDESCRIPTION: Examples demonstrating incorrect uses of negated conditions that violate the no-negated-condition rule. Shows problematic patterns in if-else statements and ternary expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-negated-condition.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-negated-condition: \"error\"*/\n\nif (!a) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\nif (a != b) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\nif (a !== b) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\n!a ? c : b\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Starred-Block Option\nDESCRIPTION: Examples of correct multiline comment formatting using the starred-block option, showing proper alignment and spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-comment-style.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n * this line\n * calls foo()\n */\nfoo();\n\n// single-line comment\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Rule Scaffold in JavaScript\nDESCRIPTION: Basic scaffold for the custom ESLint rule with empty meta object and create function that returns an empty object for node callbacks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// enforce-foo-bar.js\n\nmodule.exports = {\n\tmeta: {\n\t\t// TODO: add metadata\n\t},\n\tcreate(context) {\n\t\treturn {\n\t\t\t// TODO: add callback function(s)\n\t\t};\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Basic JSDoc Function Documentation Example\nDESCRIPTION: Demonstrates the basic structure of a valid JSDoc comment for a function with parameter and return type documentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-jsdoc.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Add two numbers.\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n * @returns {number} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring space-unary-ops rule with operator overrides in ESLint\nDESCRIPTION: Example configuration for the space-unary-ops rule showing how to use the overrides option to specify custom spacing rules for particular operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-ops.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    \"space-unary-ops\": [\n        2, {\n          \"words\": true,\n          \"nonwords\": false,\n          \"overrides\": {\n            \"new\": false,\n            \"++\": true\n          }\n    }]\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for 'always' Option in ESLint yoda Rule\nDESCRIPTION: These examples show code that would be considered correct when the yoda rule is set to 'always', enforcing Yoda conditions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yoda.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint yoda: [\"error\", \"always\"]*/\n\nif (\"blue\" == value) {\n    // ...\n}\n\nif (`blue` == value) {\n    // ...\n}\n\nif (`blue` == `${value}`) {\n    // ...\n}\n\nif (-1 < str.indexOf(substr)) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Correct Usage Examples\nDESCRIPTION: Examples of correct usage with the default ignoreChainWithDepth option set to 2.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-per-chained-call.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint newline-per-chained-call: [\"error\", { \"ignoreChainWithDepth\": 2 }]*/\n\n_\n  .chain({})\n  .map(foo)\n  .filter(bar)\n  .value();\n\n// Or\n_\n  .chain({})\n  .map(foo)\n  .filter(bar);\n\n// Or\n_.chain({})\n  .map(foo)\n  .filter(bar);\n\n// Or\nobj\n  .prop\n  .method().prop;\n\n// Or\nobj\n  .prop.method()\n  .method2()\n  .method3().prop;\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Examples for default-param-last Rule\nDESCRIPTION: These examples show correct usage of default parameters in JavaScript functions, where default parameters are the last in the parameter list, complying with the 'default-param-last' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-param-last.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint default-param-last: [\"error\"] */\n\nfunction f(a, b = 0) {}\n\nfunction g(a, b = 0, c = 0) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring lines-around-comment with afterLineComment and allowArrayEnd in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with afterLineComment and allowArrayEnd options enabled, which allows line comments at the end of array literals without requiring a blank line after them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true, \"allowArrayEnd\": true }]*/\n\nvar day = [\n    \"great\",\n    \"wonderful\"\n    // what a great and wonderful day\n];\n\nconst [\n    someDay\n    // what a great and wonderful day\n] = [\"great\", \"not great\"];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function-Level Strict Mode with Never Option\nDESCRIPTION: Example of incorrect code when using the 'never' option. The strict mode directive in the function scope is not allowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"never\"]*/\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of 'new-parens' rule with 'always' option in JavaScript\nDESCRIPTION: These examples demonstrate incorrect code when the 'new-parens' rule is set to 'always', which enforces parentheses after a new constructor with no arguments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-parens.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-parens: \"error\"*/\n\nvar person = new Person;\nvar person = new (Person);\n```\n\n----------------------------------------\n\nTITLE: Function Hoisting Example\nDESCRIPTION: Shows how function declarations are hoisted and can be used before their definition\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-style.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomething(); // ok\n\nfunction doSomething() {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rules Using Numeric Severities in JavaScript\nDESCRIPTION: Shows how to configure ESLint rules using numeric codes for rule severity (0 = off, 2 = error) in inline comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint eqeqeq: 0, curly: 2 */\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'never' Option\nDESCRIPTION: Examples of correct spacing when the rule is configured with 'never' option, showing proper usage without extra spaces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/rest-spread-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint rest-spread-spacing: [\"error\", \"never\"]*/\n\nfn(...args);\n[...arr, 4, 5, 6];\nlet [a, b, ...arr] = [1, 2, 3, 4, 5];\nfunction fn(...args) { console.log(args); }\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nlet n = { x, y, ...z };\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Increased Max Classes in JavaScript\nDESCRIPTION: This snippet demonstrates correct usage when the 'max-classes-per-file' rule is configured to allow two classes per file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-classes-per-file.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint max-classes-per-file: [\"error\", 2] */\n\nclass Foo {}\nclass Bar {}\n```\n\n----------------------------------------\n\nTITLE: Basic String Configuration in ESLint\nDESCRIPTION: Simple configuration example showing how to restrict specific module imports using string values.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", \"import1\", \"import2\"]\n```\n\n----------------------------------------\n\nTITLE: Correct Function Name Matching Examples - Always Mode\nDESCRIPTION: Examples of valid code where function names properly match their assignment targets in 'always' mode.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-name-matching.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-name-matching: \"error\"*/\n// equivalent to /*eslint func-name-matching: [\"error\", \"always\"]*/\n\nconst foo = function foo() {};\nconst foo1 = function() {};\nconst foo2 = () => {};\nfoo = function foo() {};\n\nconst obj = {foo: function foo() {}};\nobj.foo = function foo() {};\nobj['foo'] = function foo() {};\nobj['foo//bar'] = function foo() {};\nobj[foo] = function bar() {};\n\nconst obj1 = {[foo]: function bar() {}};\nconst obj2 = {'foo//bar': function foo() {}};\nconst obj3 = {foo: function() {}};\n\nobj['x' + 2] = function bar(){};\nconst [ bar ] = [ function bar(){} ];\n({[foo]: function bar() {}})\n\nclass C {\n    foo = function foo() {};\n    baz = function() {};\n}\n\n// private names are ignored\nclass D {\n    #foo = function foo() {};\n    #bar = function foo() {};\n    baz() {\n        this.#foo = function foo() {};\n        this.#foo = function bar() {};\n    }\n}\n\nmodule.exports = function foo(name) {};\nmodule['exports'] = function foo(name) {};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Non-Mergeable Imports in JavaScript\nDESCRIPTION: This snippet shows a case where imports from the same module cannot be merged due to different import styles (named import and namespace import). This is still considered correct under the no-duplicate-imports rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-imports.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-duplicate-imports: \"error\"*/\n\n// not mergeable\nimport { merge } from 'module';\nimport * as something from 'module';\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Characters in RegEx (JavaScript)\nDESCRIPTION: Examples of regular expressions that comply with the no-control-regex rule by using allowed characters and escape sequences.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-control-regex.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-control-regex: \"error\"*/\n\nconst pattern1 = /\\x20/;\nconst pattern2 = /\\u0020/;\nconst pattern3 = /\\u{20}/u;\nconst pattern4 = /\\t/;\nconst pattern5 = /\\n/;\nconst pattern6 = new RegExp(\"\\x20\");\nconst pattern7 = new RegExp(\"\\\\t\");\nconst pattern8 = new RegExp(\"\\\\n\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect RegExp Patterns in JavaScript\nDESCRIPTION: Examples of invalid regular expression patterns that will trigger the no-invalid-regexp rule. These include incomplete bracket patterns, invalid flags, and backslashes that aren't properly escaped.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-regexp.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-invalid-regexp: \"error\"*/\n\nRegExp('[')\n\nRegExp('.', 'z')\n\nnew RegExp('\\\\')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for no-empty-pattern Rule\nDESCRIPTION: Examples of code that violate the no-empty-pattern rule, showing various ways empty destructuring patterns can be incorrectly used in object and array destructuring.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-pattern.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-pattern: \"error\"*/\n\nconst {} = foo;\nconst [] = foo;\nconst {a: {}} = foo;\nconst {a: []} = foo;\nfunction foo({}) {}\nfunction bar([]) {}\nfunction baz({a: {}}) {}\nfunction qux({a: []}) {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sequence Expressions in JavaScript\nDESCRIPTION: Examples of sequence expressions using the comma operator, which are typically discouraged and flagged by the no-sequences rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sequences.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = (3, 5); // a = 5\n\na = b += 5, a + b;\n\nwhile (a = next(), a && a.length);\n\n(0, eval)(\"doSomething();\");\n```\n\n----------------------------------------\n\nTITLE: Examples of Correct Code with no-useless-rename Rule\nDESCRIPTION: JavaScript code examples that comply with the no-useless-rename rule by either using proper renaming or avoiding redundant renaming.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-rename.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-rename: \"error\"*/\n\nimport * as foo1 from \"foo\";\nimport { foo2 } from \"bar\";\nimport { foo as bar1 } from \"baz\";\nimport { \"foo\" as bar2 } from \"baz\";\n\nexport { foo };\nexport { foo as bar1 };\nexport { foo as \"bar2\" };\nexport { foo as bar3 } from \"foo\";\nexport { \"foo\" as \"bar4\" } from \"foo\";\n\nlet { foo } = bar;\nlet { foo: bar } = baz;\nlet { [qux]: qux } = bar;\n\nfunction foo3({ bar }) {}\nfunction foo4({ bar: baz }) {}\n\n({ foo }) => {}\n({ foo: bar }) => {}\n```\n\n----------------------------------------\n\nTITLE: Specifying Processors for Specific File Types in ESLint\nDESCRIPTION: Example showing how to specify processors for specific file types using the 'overrides' key in conjunction with the 'processor' key.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins-deprecated.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [\"a-plugin\"],\n\t\"overrides\": [\n\t\t{\n\t\t\t\"files\": [\"*.md\"],\n\t\t\t\"processor\": \"a-plugin/markdown\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating object-curly-spacing usage in JavaScript\nDESCRIPTION: Examples of object literals, nested objects, destructuring assignments, and import/export declarations with different spacing inside curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// simple object literals\nvar obj = { foo: \"bar\" };\n\n// nested object literals\nvar obj = { foo: { zoo: \"bar\" } };\n\n// destructuring assignment (EcmaScript 6)\nvar { x, y } = y;\n\n// import/export declarations (EcmaScript 6)\nimport { foo } from \"bar\";\nexport { foo };\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'never' Option\nDESCRIPTION: Examples of code that correctly follows the 'never' option, showing no spaces before function parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-function-paren: [\"error\", \"never\"]*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function foo() {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n\nvar baz = async() => 1\n```\n\n----------------------------------------\n\nTITLE: Incorrect Arrow Spacing Examples with No Spaces Configuration\nDESCRIPTION: Examples of code that violates the arrow-spacing rule when configured to require no spaces before or after the arrow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": false }]*/\n\n() =>{};\n(a) => {};\n()=> {'\\n'};\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with treatUndefinedAsUnspecified Option Enabled\nDESCRIPTION: Examples showing correct usage when treatUndefinedAsUnspecified is true, consistently using undefined returns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-return.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Regular Expression with Division-like Pattern\nDESCRIPTION: Example of a regular expression that could be confused with a division assignment operator, which is considered incorrect under this rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-div-regex.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction bar() { return /=foo/; }\n```\n\n----------------------------------------\n\nTITLE: Defining Getters in JavaScript\nDESCRIPTION: Demonstrates how to define getters using object literal syntax and Object.defineProperty(). These examples show the basic structure of getters without enforcing return statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/getter-return.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = {\n    get name(){\n        return \"nicholas\";\n    }\n};\n\nObject.defineProperty(p, \"age\", {\n    get: function (){\n        return 17;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Accessor Pairs with getWithoutSet Option\nDESCRIPTION: These examples show violations of the 'accessor-pairs' rule when the 'getWithoutSet' option is enabled, including cases with getters but no setters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/accessor-pairs.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint accessor-pairs: [\"error\", { \"getWithoutSet\": true }]*/\n\nconst u = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\nconst v = {\n    get a() {\n        return this.val;\n    }\n};\n\nconst w = {d: 1};\nObject.defineProperty(w, 'c', {\n    set: function(value) {\n        this.val = value;\n    }\n});\n\nconst x = {d: 1};\nObject.defineProperty(x, 'c', {\n    get: function() {\n        return this.val;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: ASI hazard with function calls\nDESCRIPTION: Example showing how omitting semicolons can lead to runtime errors when the next line starts with parentheses, causing an object to be called as a function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar globalCounter = { }\n\n(function () {\n    var n = 0\n    globalCounter.increment = function () {\n        return ++n\n    }\n})()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Usage\nDESCRIPTION: Example of incorrect eval usage with global global variable\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eval.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-eval: \"error\"*/\n/*global global*/\n\nglobal.eval(\"const a = 0\");\n```\n\n----------------------------------------\n\nTITLE: Class Fields Option Example\nDESCRIPTION: Example of code that violates the id-match rule when the classFields option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-match.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\", { \"classFields\": true }]*/\n\nclass myClass {\n    my_pref = 1;\n}\n\nclass anotherClass {\n    #my_pref = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Method Overload Example\nDESCRIPTION: Shows correct usage of TypeScript method overloading, which is a valid exception to the no-dupe-class-members rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-class-members.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint no-dupe-class-members: \"error\" */\n\nclass A {\n\tfoo(value: string): void;\n\tfoo(value: number): void;\n\tfoo(value: string | number) {} // ✅ This is the actual implementation.\n}\n```\n\n----------------------------------------\n\nTITLE: Guarded for...in Loop Using hasOwnProperty.call in JavaScript\nDESCRIPTION: A correct example using Object.prototype.hasOwnProperty.call() to filter properties in a for...in loop. This method is recommended for older codebases.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/guard-for-in.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfor (key in foo) {\n    if (Object.prototype.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Name Matching Examples - Never Mode\nDESCRIPTION: Examples showing violations where function names match their assignment targets in 'never' mode.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-name-matching.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-name-matching: [\"error\", \"never\"] */\n\nlet foo = function foo() {};\nfoo = function foo() {};\nconst obj = {foo: function foo() {}};\nobj.foo = function foo() {};\nobj['foo'] = function foo() {};\n({['foo']: function foo() {}});\n\nclass C {\n    foo = function foo() {};\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage with 'allow' Option\nDESCRIPTION: Examples of code that comply with the camelcase rule using the 'allow' option to specify exceptions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {allow: [\"UNSAFE_componentWillMount\"]}]*/\n\nfunction UNSAFE_componentWillMount() {\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {allow: [\"^UNSAFE_\"]}]*/\n\nfunction UNSAFE_componentWillMount() {\n    // ...\n}\n\nfunction UNSAFE_componentWillReceiveProps() {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Tax Calculation with Named Constant\nDESCRIPTION: Example of correct code using named constant for tax calculation\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-magic-numbers.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-magic-numbers: \"error\"*/\n\nconst TAX = 0.25;\n\nconst dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * TAX);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Unique Keys in JavaScript Object Literals\nDESCRIPTION: These examples show the correct way to define object literals without duplicate keys, adhering to the no-dupe-keys rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-keys.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-dupe-keys: \"error\"*/\n\nconst foo = {\n    bar: \"baz\",\n    quxx: \"qux\"\n};\n\nconst obj = {\n    \"__proto__\": baz, // defines object's prototype\n    [\"__proto__\"]: qux // defines a property named \"__proto__\"\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'double' and 'allowTemplateLiterals' Options\nDESCRIPTION: Shows code that complies with the 'double' quotes rule with allowTemplateLiterals option, allowing both double quotes and backticks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"double\", { \"allowTemplateLiterals\": true }]*/\n\nvar double = \"double\";\nvar double = `double`;\n```\n\n----------------------------------------\n\nTITLE: Error handling with async functions example\nDESCRIPTION: Demonstrates how async functions work with promises for error handling, which is a valid use case that may not require await.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-await.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fail() {\n    throw new Error(\"Failure!\");\n}\n\nfail().catch(error => {\n    console.log(error.message);\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Allow Pattern Usage\nDESCRIPTION: Example showing correct usage with allowPattern option for snake case properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-notation.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint dot-notation: [\"error\", { \"allowPattern\": \"^[a-z]+(_[a-z]+)+$\" }]*/\n\nconst data = {};\ndata[\"foo_bar\"] = 42;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Declaration Parameter Indentation in JavaScript\nDESCRIPTION: Example of incorrectly indented function declaration parameters with the indent-legacy rule set to 'first' parameter alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, {\"FunctionDeclaration\": {\"parameters\": \"first\"}}]*/\n\nfunction foo(bar, baz,\n  qux, boop) {\n  qux();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Configuration Comments in JavaScript\nDESCRIPTION: Shows how to include descriptive comments explaining why a particular rule configuration is necessary. The description follows the configuration and is separated by two or more consecutive hyphens.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint eqeqeq: \"off\", curly: \"error\" -- Here's a description about why this configuration is necessary. */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for 'always' Option\nDESCRIPTION: Examples of code that violate the template-curly-spacing rule when configured with the 'always' option, showing inconsistent or missing spaces inside curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-curly-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint template-curly-spacing: [\"error\", \"always\"]*/\n\n`hello, ${ people.name}!`;\n`hello, ${people.name }!`;\n\n`hello, ${people.name}!`;\n```\n\n----------------------------------------\n\nTITLE: Refactored String Concatenation in JavaScript\nDESCRIPTION: Example of how to properly write the code to avoid triggering the no-useless-concat rule by combining the string literals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-concat.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = \"ab\";\n```\n\n----------------------------------------\n\nTITLE: Correct Custom Callback Names\nDESCRIPTION: Demonstrates proper implementation with custom callback names including appropriate return statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/callback-return.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint callback-return: [\"error\", [\"done\", \"send.error\", \"send.success\"]]*/\n\nfunction foo(err, done) {\n    if (err) {\n        return done(err);\n    }\n    done();\n}\n\nfunction bar(err, send) {\n    if (err) {\n        return send.error(err);\n    }\n    send.success();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example of Using Symbol with New Operator\nDESCRIPTION: This code snippet shows a complete example of incorrect usage of Symbol with the new operator when the ESLint rule is enabled, which would trigger the linting error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-symbol.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-new-symbol: \"error\"*/\n\nvar foo = new Symbol('foo');\n```\n\n----------------------------------------\n\nTITLE: Implementing padded-blocks rule with 'always' option in JavaScript\nDESCRIPTION: Examples of incorrect and correct code when using the 'always' option, which requires empty lines at the beginning and ending of blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", \"always\"]*/\n\nif (a) {\n    b();\n}\n\nif (a) { b(); }\n\nif (a)\n{\n    b();\n}\n\nif (a) {\n    b();\n\n}\n\nif (a) {\n    // comment\n    b();\n\n}\n\nclass C {\n    static {\n        a();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Class Member Declarations\nDESCRIPTION: Demonstrates valid patterns that comply with the no-dupe-class-members rule, including proper getter/setter pairs and distinct member names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-class-members.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-dupe-class-members: \"error\"*/\n\nclass A {\n  bar() { }\n  qux() { }\n}\n\nclass B {\n  get bar() { }\n  set bar(value) { }\n}\n\nclass C {\n  bar;\n  qux;\n}\n\nclass D {\n  bar;\n  qux() { }\n}\n\nclass E {\n  static bar() { }\n  bar() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Global Ignores Configuration in ESLint\nDESCRIPTION: This snippet shows how to assign a custom name to the global ignores configuration. It provides a descriptive name for the ignore rules, which can be useful for debugging purposes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([\n\tglobalIgnores([\"build/**/*\"], \"Ignore build directory\"),\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Descending Order for sort-keys Rule\nDESCRIPTION: Examples of correct property ordering when using the 'desc' option for the sort-keys rule to enforce descending alphabetical order.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"desc\"]*/\n\nconst obj1 = {c: 3, b: 2, a: 1};\nconst obj2 = {c: 3, \"b\": 2, a: 1};\n\n// Case-sensitive by default.\nconst obj3 = {b: 3, a: 2, C: 1};\n\n// Non-natural order by default.\nconst obj4 = {2: c, 10: b, 1: a};\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples with defaultAssignment: false option in JavaScript\nDESCRIPTION: Examples of code that would trigger the ESLint no-unneeded-ternary rule when the defaultAssignment option is set to false, showing ternary expressions that could be replaced with the logical OR operator.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unneeded-ternary.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unneeded-ternary: [\"error\", { \"defaultAssignment\": false }]*/\n\nconst a = x ? x : 1;\n\nf(x ? x : 1);\n```\n\n----------------------------------------\n\nTITLE: Correct Example for Required Blank Lines Between Switch Cases\nDESCRIPTION: This example demonstrates correct code with proper blank line spacing between switch case clauses. Each case statement is separated by blank lines, improving readability of the switch structure.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: [\"case\", \"default\"], next: \"*\" }\n]*/\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n\n    case 2:\n\n    case 3:\n        baz();\n        break;\n\n    default:\n        quux();\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint JSON Formatter Output Example\nDESCRIPTION: Example of the JSON formatter output from ESLint, which provides structured data about linting results that can be consumed programmatically. The output includes detailed information about each error or warning found in the analyzed code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"filePath\": \"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\",\n        \"messages\": [\n            {\n                \"ruleId\": \"no-unused-vars\",\n                \"severity\": 2,\n                \"message\": \"'addOne' is defined but never used.\",\n                \"line\": 1,\n                \"column\": 10,\n                \"nodeType\": \"Identifier\",\n                \"messageId\": \"unusedVar\",\n                \"endLine\": 1,\n                \"endColumn\": 16,\n                \"suggestions\": [\n                    {\n                        \"messageId\": \"removeVar\",\n                        \"data\": {\n                            \"varName\": \"addOne\"\n                        },\n                        \"fix\": {\n                            \"range\": [\n                                0,\n                                94\n                            ],\n                            \"text\": \"\"\n                        },\n                        \"desc\": \"Remove unused variable 'addOne'.\"\n                    }\n                ]\n            },\n            {\n                \"ruleId\": \"use-isnan\",\n                \"severity\": 2,\n                \"message\": \"Use the isNaN function to compare with NaN.\",\n                \"line\": 2,\n                \"column\": 9,\n                \"nodeType\": \"BinaryExpression\",\n                \"messageId\": \"comparisonWithNaN\",\n                \"endLine\": 2,\n                \"endColumn\": 17,\n                \"suggestions\": [\n                    {\n                        \"messageId\": \"replaceWithIsNaN\",\n                        \"fix\": {\n                            \"range\": [\n                                29,\n                                37\n                            ],\n                            \"text\": \"!Number.isNaN(i)\"\n                        },\n                        \"desc\": \"Replace with Number.isNaN.\"\n                    },\n                    {\n                        \"messageId\": \"replaceWithCastingAndIsNaN\",\n                        \"fix\": {\n                            \"range\": [\n                                29,\n                                37\n                            ],\n                            \"text\": \"!Number.isNaN(Number(i))\"\n                        },\n                        \"desc\": \"Replace with Number.isNaN and cast to a Number.\"\n                    }\n                ]\n            },\n            {\n                \"ruleId\": \"space-unary-ops\",\n                \"severity\": 2,\n                \"message\": \"Unexpected space before unary operator '++'.\",\n                \"line\": 3,\n                \"column\": 16,\n                \"nodeType\": \"UpdateExpression\",\n                \"messageId\": \"unexpectedBefore\",\n                \"endLine\": 3,\n                \"endColumn\": 20,\n                \"fix\": {\n                    \"range\": [\n                        57,\n                        58\n                    ],\n                    \"text\": \"\"\n                }\n            },\n            {\n                \"ruleId\": \"semi\",\n                \"severity\": 1,\n                \"message\": \"Missing semicolon.\",\n                \"line\": 3,\n                \"column\": 20,\n                \"nodeType\": \"ReturnStatement\",\n                \"messageId\": \"missingSemi\",\n                \"endLine\": 4,\n                \"endColumn\": 1,\n                \"fix\": {\n                    \"range\": [\n                        60,\n                        60\n                    ],\n                    \"text\": \";\"\n                }\n            },\n            {\n                \"ruleId\": \"no-else-return\",\n                \"severity\": 1,\n                \"message\": \"Unnecessary 'else' after 'return'.\",\n                \"line\": 4,\n                \"column\": 12,\n                \"nodeType\": \"BlockStatement\",\n                \"messageId\": \"unexpected\",\n                \"endLine\": 6,\n                \"endColumn\": 6,\n                \"fix\": {\n                    \"range\": [\n                        0,\n                        94\n                    ],\n                    \"text\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } \\n      return\\n    \\n}\"\n                }\n            },\n            {\n                \"ruleId\": \"indent\",\n                \"severity\": 1,\n                \"message\": \"Expected indentation of 8 spaces but found 6.\",\n                \"line\": 5,\n                \"column\": 1,\n                \"nodeType\": \"Keyword\",\n                \"messageId\": \"wrongIndentation\",\n                \"endLine\": 5,\n                \"endColumn\": 7,\n                \"fix\": {\n                    \"range\": [\n                        74,\n                        80\n                    ],\n                    \"text\": \"        \"\n                }\n            },\n            {\n                \"ruleId\": \"consistent-return\",\n                \"severity\": 2,\n                \"message\": \"Function 'addOne' expected a return value.\",\n                \"line\": 5,\n                \"column\": 7,\n                \"nodeType\": \"ReturnStatement\",\n                \"messageId\": \"missingReturnValue\",\n                \"endLine\": 5,\n                \"endColumn\": 13\n            },\n            {\n                \"ruleId\": \"semi\",\n                \"severity\": 1,\n                \"message\": \"Missing semicolon.\",\n                \"line\": 5,\n                \"column\": 13,\n                \"nodeType\": \"ReturnStatement\",\n                \"messageId\": \"missingSemi\",\n                \"endLine\": 6,\n                \"endColumn\": 1,\n                \"fix\": {\n                    \"range\": [\n                        86,\n                        86\n                    ],\n                    \"text\": \";\"\n                }\n            }\n        ],\n        \"suppressedMessages\": [],\n        \"errorCount\": 4,\n        \"fatalErrorCount\": 0,\n        \"warningCount\": 4,\n        \"fixableErrorCount\": 1,\n        \"fixableWarningCount\": 4,\n        \"source\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } else {\\n      return\\n    }\\n};\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting ignorePatterns in ESLint Configuration Files (JSON)\nDESCRIPTION: Add ignorePatterns to your ESLint configuration file to specify glob patterns for files and directories that should be ignored during linting. Patterns are relative to the directory containing the config file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore-deprecated.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"ignorePatterns\": [\"temp.js\", \"**/vendor/*.js\"],\n\t\"rules\": {\n\t\t//...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Strict Mode with Function Option\nDESCRIPTION: Example of incorrect code when using the 'function' option. The strict mode directive is in the global scope instead of each function scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"function\"]*/\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n----------------------------------------\n\nTITLE: Using Empty Catch Binding with no-unused-vars\nDESCRIPTION: Example showing how to use ES2019 optional catch binding to avoid the 'no-unused-vars' error for unused caught errors in ESLint v9.0.0.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-vars: \"error\"*/\ntry {\n} catch {\n\t// no error\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Variable Declaration with 'no-undef-init' Rule\nDESCRIPTION: This snippet demonstrates the correct way to declare variables without explicit initialization to undefined, complying with the 'no-undef-init' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef-init.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-undef-init: \"error\"*/\n\nvar foo;\nlet bar;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with prefer-single Option\nDESCRIPTION: Examples of correct code when using the prefer-single option, showing proper usage of single quotes and handling of nested quotes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/jsx-quotes.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n/*eslint jsx-quotes: [\"error\", \"prefer-single\"]*/\n\n<a b='c' />;\n<a b=\"'\" />;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Trailing Commas in Functions with 'never' Option\nDESCRIPTION: These JavaScript snippets demonstrate correct usage of function declarations and calls without trailing commas when the 'comma-dangle' rule for functions is set to 'never'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - With Lines Between Members\nDESCRIPTION: Example showing correct code with proper line spacing between class members using the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-between-class-members.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint lines-between-class-members: [\"error\", \"always\"]*/\nclass MyClass {\n  x;\n\n  foo() {\n    //...\n  }\n\n  bar() {\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Declaration Indentation - Default Configuration\nDESCRIPTION: Demonstrates correct indentation for import declarations using the default configuration of 4 spaces with ImportDeclaration: 1.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 4, { \"ImportDeclaration\": 1 }]*/\n\nimport { foo,\n    bar,\n    baz,\n} from 'qux';\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Trailing Commas in Functions with 'always' Option\nDESCRIPTION: These JavaScript snippets demonstrate correct usage of function declarations and calls with trailing commas when the 'comma-dangle' rule for functions is set to 'always'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Strict Mode with Non-Simple Parameters\nDESCRIPTION: Example of incorrect code when using the 'function' option with ES2016+. Strict mode directives in functions with non-simple parameter lists (like default parameters) cause syntax errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"function\"]*/\n\n// Illegal \"use strict\" directive in function with non-simple parameter list.\n// This is a syntax error since ES2016.\nfunction foo(a = 1) {\n    \"use strict\";\n}\n\n// We cannot write \"use strict\" directive in this function.\n// So we have to wrap this function with a function with \"use strict\" directive.\nfunction foo(a = 1) {\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for no-shadow Rule\nDESCRIPTION: Examples of code that violate the no-shadow rule, showing various ways variables can be shadowed in different scopes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-shadow: \"error\"*/\n\nconst a = 3;\nfunction b() {\n    const a = 10;\n}\n\nconst c = function () {\n    const a = 10;\n}\n\nfunction d(a) {\n    a = 10;\n}\nd(a);\n\nif (true) {\n    const a = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for no-lonely-if Rule\nDESCRIPTION: These examples show code patterns that would trigger the no-lonely-if rule error in ESLint, featuring if statements as the only content within else blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-lonely-if.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-lonely-if: \"error\"*/\n\nif (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    }\n}\n\nif (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    } else {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples for Default Configuration\nDESCRIPTION: Examples of code patterns that would be considered valid with the default configuration options (allowShortCircuit: false, allowTernary: false).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: \"error\"*/\n\n{} // In this context, this is a block statement, not an object literal\n\n{ myLabel: foo() } // In this context, this is a block statement with a label and expression, not an object literal\n\nfunction namedFunctionDeclaration () {}\n\n(function aGenuineIIFE () {}());\n\nf()\n\na = 0\n\nnew C\n\ndelete a.b\n\nvoid a\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Indentation in JavaScript Function\nDESCRIPTION: Shows a function with conditional logic using 4-space indentation, which is the default style enforced by the 'indent' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction hello(indentSize, type) {\n    if (indentSize === 4 && type !== 'tab') {\n        console.log('Each next indentation will increase on 4 spaces');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Variable Sorting Examples in JavaScript\nDESCRIPTION: Examples showing correct alphabetical ordering of variable declarations that comply with the sort-vars rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-vars.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-vars: \"error\"*/\n\nlet a, b, c, d;\n\nlet _a = 10;\nlet _b = 20;\n\nlet E, e;\n\nlet G, f, h;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Backreferences in JavaScript RegExp\nDESCRIPTION: This code block shows valid usages of backreferences in regular expressions that are not flagged by the ESLint rule, including properly positioned backreferences that reference groups that have already captured content when the backreference is evaluated.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-backreference.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-backreference: \"error\"*/\n\n/^(?:(a)|(b)\\2)$/; // reference to (b)\n\n/(a)\\1/; // reference to (a)\n\nRegExp('(a)\\\\1(b)'); // reference to (a)\n\n/(a)(b)\\2(c)/; // reference to (b)\n\n/(?<foo>a)\\k<foo>/; // reference to (?<foo>a)\n\n/(?<=\\1(a))b/; // reference to (a), correctly before the group as they're in the same lookbehind\n\n/(?<=(a))b\\1/; // reference to (a), correctly after the group as the backreference isn't in the lookbehind\n\nnew RegExp('(.)\\\\1'); // reference to (.)\n\n/^(?:(a)\\1)$/; // reference to (a)\n\n/^((a)\\2)$/; // reference to (a)\n\n/a(?<foo>(.)b\\2)/; // reference to (.)\n\n/a(?!(b|c)\\1)./; // reference to (b|c), correct as it's from within the same negative lookahead\n\n/(?<!\\1(a))b/; // reference to (a), correct as it's from within the same negative lookbehind\n```\n\n----------------------------------------\n\nTITLE: Correct Require Statement Examples\nDESCRIPTION: Demonstrates valid code patterns showing proper separation of require declarations and consistent grouping of similar require types.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-requires.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-mixed-requires: \"error\"*/\n\n// only require declarations (grouping off)\nvar eventEmitter = require('events').EventEmitter,\n    myUtils = require('./utils'),\n    util = require('util'),\n    bar = require(getBarModuleName());\n\n// only non-require declarations\nvar foo = 42,\n    bar = 'baz';\n\n// always valid regardless of grouping because all declarations are of the same type\nvar foo = require('foo' + VERSION),\n    bar = require(getBarModuleName()),\n    baz = require();\n```\n\n----------------------------------------\n\nTITLE: Correct Block Spacing with 'never' Option in JavaScript\nDESCRIPTION: Examples of correct code when using the 'never' option, which disallows spaces inside blocks. These examples properly omit spaces between opening/closing block tokens and adjacent tokens.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/block-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/*eslint block-spacing: [\"error\", \"never\"]*/\n\nfunction foo() {return true;}\nif (foo) {bar = 0;}\n\nclass C {\n    static {this.bar = 0;}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Global Strict Mode Implementation\nDESCRIPTION: Example of correct code when using the 'global' option. The strict mode directive appears only once in the global scope, affecting all functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"global\"]*/\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Arguments.caller and Arguments.callee\nDESCRIPTION: Examples showing incorrect recursive function implementations using arguments.callee, which should be avoided.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-caller.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-caller: \"error\"*/\n\nfunction foo(n) {\n    if (n <= 0) {\n        return;\n    }\n\n    arguments.callee(n - 1);\n}\n\n[1,2,3,4,5].map(function(n) {\n    return !(n > 1) ? 1 : arguments.callee(n - 1) * n;\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Control Characters in RegEx (JavaScript)\nDESCRIPTION: Examples of regular expressions that violate the no-control-regex rule by including control characters or their escape sequences.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-control-regex.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-control-regex: \"error\"*/\n\nconst pattern1 = /\\x00/;\nconst pattern2 = /\\x0C/;\nconst pattern3 = /\\x1F/;\nconst pattern4 = /\\u000C/;\nconst pattern5 = /\\u{C}/u;\nconst pattern6 = new RegExp(\"\\x0C\"); // raw U+000C character in the pattern\nconst pattern7 = new RegExp(\"\\\\x0C\"); // \\x0C pattern\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with allowElseIf: false Option in JavaScript\nDESCRIPTION: This example demonstrates incorrect code when the 'allowElseIf' option is set to false, showing an else-if block that should be avoided.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-else-return.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-else-return: [\"error\", {allowElseIf: false}]*/\n\nfunction foo() {\n    if (error) {\n        return 'It failed';\n    } else if (loading) {\n        return \"It's still loading\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Function Length Examples - JavaScript\nDESCRIPTION: Examples of functions that comply with the max-lines-per-function rule with different configurations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-lines-per-function.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines-per-function: [\"error\", 3]*/\nfunction foo() {\n    const x = 0;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines-per-function: [\"error\", 4]*/\nfunction foo() {\n    // a comment\n    const x = 0;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines-per-function: [\"error\", 5]*/\nfunction foo() {\n    // a comment followed by a blank line\n\n    const x = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Default Configuration\nDESCRIPTION: Examples of code that follows the default semi-spacing rule configuration\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi-spacing: \"error\"*/\n\nvar foo;\nvar foo; var bar;\nthrow new Error(\"error\");\nwhile (a) { break; }\nfor (i = 0; i < 10; i++) {}\nfor (;;) {}\nif (true) {;}\n;foo();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Generator Functions with Complex Configuration\nDESCRIPTION: Examples of incorrectly formatted generator functions when using a complex configuration with overrides.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star-spacing.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint generator-star-spacing: [\"error\", {\n    \"before\": false,\n    \"after\": true,\n    \"anonymous\": \"neither\",\n    \"method\": {\"before\": true, \"after\": true}\n}]*/\n\nfunction * generator() {}\n\nvar anonymous = function* () {};\n\nvar shorthand = { *generator() {} };\n\nclass Class { static* method() {} }\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of 'newline-after-var' Rule with 'never' Option\nDESCRIPTION: Examples of code that correctly follow the 'newline-after-var' rule when set to 'never', demonstrating no newlines after variable declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-after-var.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint newline-after-var: [\"error\", \"never\"]*/\n\nvar greet = \"hello,\",\n    name = \"world\";\nconsole.log(greet, name);\n\nlet hello = \"hello,\",\n    world = \"world\";\nconsole.log(hello, world);\n\nvar greet = \"hello,\";\nconst NAME = \"world\";\nconsole.log(greet, NAME);\n\nvar greet = \"hello,\";\nvar name = \"world\";\n// var name = require(\"world\");\nconsole.log(greet, name);\n```\n\n----------------------------------------\n\nTITLE: Array Expression Indentation in JavaScript\nDESCRIPTION: Examples of array literal indentation with ArrayExpression configuration options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"ArrayExpression\": 1 }]*/\n\nvar foo = [\n  bar,\n  baz,\n  qux\n];\n```\n\n----------------------------------------\n\nTITLE: Expression Style Rule Examples\nDESCRIPTION: Shows incorrect and correct code examples for the 'expression' rule option\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-style.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-style: [\"error\", \"expression\"]*/\n\nconst foo = function() {\n    // ...\n};\n\nconst foo1 = () => {};\n\n// allowed as allowArrowFunctions : false is applied only for declaration\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of capitalized-comments Rule in JavaScript\nDESCRIPTION: Examples of comments that comply with the default configuration of the capitalized-comments rule, including capitalized comments, non-letter beginnings, and special cases like configuration comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/capitalized-comments.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint capitalized-comments: error */\n\n// Capitalized comment\n\n// 1. Non-letter at beginning of comment\n\n// 丈 Non-Latin character at beginning of comment\n\n/* istanbul ignore next */\n/* jscs:enable */\n/* jshint asi:true */\n/* global foo */\n/* globals foo */\n/* exported myVar */\n// https://github.com\n\n/* eslint semi:2 */\n/* eslint-disable */\nfoo\n/* eslint-enable */\n// eslint-disable-next-line\nbaz\nbar // eslint-disable-line\n\n```\n\n----------------------------------------\n\nTITLE: Configuring max-classes-per-file Rule in ESLint JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the 'max-classes-per-file' rule in ESLint to allow only one class per file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-classes-per-file.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"max-classes-per-file\": [\"error\", 1]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of process.exit()\nDESCRIPTION: Example showing problematic usage of process.exit() that can abruptly terminate the application without proper error handling.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-process-exit.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (somethingBadHappened) {\n    console.error(\"Something bad happened!\");\n    process.exit(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Number Coercions in JavaScript\nDESCRIPTION: Examples of correct number coercions and usage that the rule allows when the 'number' option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-coercion: \"error\"*/\n\nconst n = Number(foo);\nconst n1 = parseFloat(foo);\nconst n2 = parseInt(foo, 10);\n\nconst n3 = foo * 1/4; // `* 1` is allowed when followed by the `/` operator\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSDoc Usage in JavaScript\nDESCRIPTION: This snippet shows an example of a JSDoc comment for a function that adds two numbers together. It includes parameter descriptions and return value information.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-jsdoc.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Adds two numbers together.\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n * @returns {number} The sum of the two numbers.\n */\nfunction sum(num1, num2) {\n    return num1 + num2;\n}\n```\n\n----------------------------------------\n\nTITLE: Using restrictedNamedExportsPattern Option - Correct Example\nDESCRIPTION: Example showing exports that don't match the restricted pattern are allowed, demonstrating pattern-based filtering of export names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", {\n    \"restrictedNamedExportsPattern\": \"bar$\"\n}]*/\n\nexport const abc = 1;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Disabled Default Ignore Patterns\nDESCRIPTION: This snippet shows an incorrect comment when default ignore patterns are disabled. The comment 'falls through' would be allowed by default, but is now considered invalid.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/line-comment-position.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\", \"applyDefaultIgnorePatterns\": false }]*/\n1 + 1; // falls through\n```\n\n----------------------------------------\n\nTITLE: Correct Number Precision Examples in JavaScript\nDESCRIPTION: Examples of number literals that maintain precision when converted to JavaScript Numbers by staying within safe integer limits and floating-point precision bounds.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-loss-of-precision.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-loss-of-precision: \"error\"*/\n\nconst a = 12345\nconst b = 123.456\nconst c = 123e34\nconst d = 12300000000000000000000000\nconst e = 0x1FFFFFFFFFFFFF\nconst f = 9007199254740991\nconst g = 9007_1992547409_91\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Sequence Expressions (no-sequences rule)\nDESCRIPTION: Examples of code that violate the no-sequences rule, showing various contexts where comma operators are used incorrectly.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sequences.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-sequences: \"error\"*/\n\nfoo = doSomething(), val;\n\n0, eval(\"doSomething();\");\n\ndo {} while (doSomething(), !!test);\n\nfor (; doSomething(), !!test; );\n\nif (doSomething(), !!test);\n\nswitch (val = foo(), val) {}\n\nwhile (val = foo(), val < 42);\n\nwith (doSomething(), val) {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Case-Insensitive Sorting Option for sort-keys Rule\nDESCRIPTION: Examples of incorrect and correct object property ordering when using the caseSensitive:false option for case-insensitive alphabetical sorting.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"asc\", {caseSensitive: false}]*/\n\nconst obj1 = {a: 1, c: 3, C: 4, b: 2};\nconst obj2 = {a: 1, C: 3, c: 4, b: 2};\n```\n\n----------------------------------------\n\nTITLE: Configuring pnpm for ESLint Installation\nDESCRIPTION: Recommended .npmrc file settings for using ESLint with pnpm. These settings ensure better compatibility with npm and reduce the likelihood of errors during installation.\nSOURCE: https://github.com/eslint/eslint/blob/main/README.md#2025-04-14_snippet_2\n\nLANGUAGE: Plain Text\nCODE:\n```\nauto-install-peers=true\nnode-linker=hoisted\n```\n\n----------------------------------------\n\nTITLE: Complying with object-property-newline rule (nested example 1)\nDESCRIPTION: An example of code that complies with the object-property-newline rule by placing properties on separate lines, including proper formatting for nested objects.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst newObject = {\n    a: 1,\n    b: [2, {\n        a: 3,\n        b: 4\n    }]\n};\n```\n\n----------------------------------------\n\nTITLE: Using int32Hint Option in JavaScript\nDESCRIPTION: Example showing the use of the int32Hint option which allows writing bitwise OR operations without spaces for 32-bit integer coercion.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-infix-ops.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = bar|0; // `foo` is forced to be signed 32 bit integer\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for 'always' option\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'always' option, which requires semicolons at the end of statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi: [\"error\", \"always\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n\nclass Foo {\n    bar = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of code that comply with the prefer-arrow-callback rule\nDESCRIPTION: These examples show code that would not trigger the rule violation, including already-using arrow functions, generators, non-callback function expressions, unbound functions that use 'this', and recursive named functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-arrow-callback.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint prefer-arrow-callback: \"error\" */\n\n// arrow function callback\nfoo(a => a); // OK\n\n// generator as callback\nfoo(function*() { yield; }); // OK\n\n// function expression not used as callback or function argument\nconst foo = function foo(a) { return a; }; // OK\n\n// unbound function expression callback\nfoo(function() { return this.a; }); // OK\n\n// recursive named function callback\nfoo(function bar(n) { return n && n + bar(n - 1); }); // OK\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-Level Strict Mode in JavaScript\nDESCRIPTION: Example showing how strict mode can be applied at the function level. When the directive appears at the beginning of a function body, strict mode applies only to that function and any contained functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n    \"use strict\";\n    // strict mode\n}\n\nfunction foo2() {\n    // not strict mode\n};\n\n(function() {\n    \"use strict\";\n    function bar() {\n        // strict mode\n    }\n}());\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Loop Usage in JavaScript\nDESCRIPTION: This snippet shows an example of a loop that will never reach its second iteration due to an unconditional break statement. This is the type of code the rule aims to prevent.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable-loop.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < arr.length; i++) {\n    if (arr[i].name === myName) {\n        doSomething(arr[i]);\n        // break was supposed to be here\n    }\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Function Parameters in JavaScript\nDESCRIPTION: Examples of correct code that comply with the no-dupe-args rule by using unique parameter names in function declarations and expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-args.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-dupe-args: \"error\"*/\n\nfunction foo(a, b, c) {\n    console.log(a, b, c);\n}\n\nconst bar = function (a, b, c) {\n    console.log(a, b, c);\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Always Option Example - JavaScript\nDESCRIPTION: Example of code that complies with the 'always' initialization rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint init-declarations: [\"error\", \"always\"]*/\n\nfunction foo() {\n    var bar = 1;\n    let baz = 2;\n    const qux = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for no-multi-assign Rule in JavaScript\nDESCRIPTION: These examples demonstrate code that violates the 'no-multi-assign' rule. They show various ways of chaining assignments that are not allowed under this rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-assign.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-assign: \"error\"*/\n\nlet a = b = c = 5;\n\nconst foo = bar = \"baz\";\n\nlet d =\n    e =\n    f;\n\nclass Foo {\n    a = b = 10;\n}\n\na = b = \"quux\";\n```\n\n----------------------------------------\n\nTITLE: Using JSCS with the fix option\nDESCRIPTION: Command to run JSCS with the --fix option to automatically fix code issues.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njscs --fix file.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for no-extra-label Rule\nDESCRIPTION: Examples of code that violate the no-extra-label rule by using unnecessary labels on loops and switch statements where simple break statements would suffice.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-label.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-extra-label: \"error\"*/\n\nA: while (a) {\n    break A;\n}\n\nB: for (let i = 0; i < 10; ++i) {\n    break B;\n}\n\nC: switch (a) {\n    case 0:\n        break C;\n}\n```\n\n----------------------------------------\n\nTITLE: Import Declaration Indentation - First Alignment\nDESCRIPTION: Shows proper indentation when using the 'first' option for import declarations, aligning all imported items with the first one.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 4, { \"ImportDeclaration\": \"first\" }]*/\n\nimport { foo,\n         bar,\n         baz,\n} from 'qux';\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for 'exceptRange' Option in ESLint yoda Rule\nDESCRIPTION: These examples demonstrate code that would be considered correct when the yoda rule is set to 'never' with the 'exceptRange' option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yoda.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint yoda: [\"error\", \"never\", { \"exceptRange\": true }]*/\n\nfunction isReddish(color) {\n    return (color.hue < 60 || 300 < color.hue);\n}\n\nif (x < -1 || 1 < x) {\n    // ...\n}\n\nif (count < 10 && (0 <= rand && rand < 1)) {\n    // ...\n}\n\nif (`blue` < x && x < `green`) {\n    // ...\n}\n\nfunction howLong(arr) {\n    return (0 <= arr.length && arr.length < 10) ? \"short\" : \"long\";\n}\n```\n\n----------------------------------------\n\nTITLE: Final Correct Example with Class-Specific Configuration\nDESCRIPTION: Example showing proper code when classes are configured to require spaces but functions and keywords are not.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-blocks.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"never\", \"classes\": \"always\" }]*/\n\nclass Foo {\n  constructor(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Module Import Using require()\nDESCRIPTION: Shows the standard way to import a module using require() function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-require.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar appHeader = require('app-header');\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for no-lone-blocks Rule in JavaScript\nDESCRIPTION: This code block shows examples of code that comply with the 'no-lone-blocks' rule, including valid uses of blocks and scopes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-lone-blocks.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-lone-blocks: \"error\"*/\n\nwhile (foo) {\n    bar();\n}\n\nif (foo) {\n    if (bar) {\n        baz();\n    }\n}\n\nfunction bar() {\n    baz();\n}\n\n{\n    let x = 1;\n}\n\n{\n    const y = 1;\n}\n\n{\n    class Foo {}\n}\n\naLabel: {\n}\n\nclass C {\n    static {\n        lbl: {\n            if (something) {\n                break lbl;\n            }\n\n            foo();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Assignment in Conditional (JavaScript)\nDESCRIPTION: This snippet shows an example of unintentional assignment in a conditional statement, which is considered incorrect by the no-cond-assign rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-cond-assign.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Check the user's job title\nif (user.jobTitle = \"manager\") {\n    // user.jobTitle is now incorrect\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples of bind() Usage in JavaScript\nDESCRIPTION: Examples of code patterns that the no-extra-bind rule will flag as problematic, including using bind() with functions that don't reference 'this' and using bind() with arrow functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-bind.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-extra-bind: \"error\"*/\n\nconst x = function () {\n    foo();\n}.bind(bar);\n\nconst y = (() => {\n    foo();\n}).bind(bar);\n\nconst z = (() => {\n    this.foo();\n}).bind(bar);\n\nconst a = function () {\n    (function () {\n      this.foo();\n    }());\n}.bind(bar);\n\nconst b = function () {\n    function foo() {\n      this.bar();\n    }\n}.bind(baz);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rules in YAML Configuration File\nDESCRIPTION: Shows how to configure ESLint rules in a YAML configuration file. YAML provides an alternative, sometimes more readable syntax for ESLint configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\nrules:\n    eqeqeq: off\n    curly: error\n    quotes:\n        - error\n        - double\n```\n\n----------------------------------------\n\nTITLE: ESLint no-path-concat Rule Examples - Incorrect Usage\nDESCRIPTION: Examples showing incorrect code that would trigger the no-path-concat ESLint rule, demonstrating string concatenation with __dirname and __filename.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-path-concat.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-path-concat: \"error\"*/\n\nvar fullPath = __dirname + \"/foo.js\";\n\nvar fullPath = __filename + \"/foo.js\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Declaration Styles in JavaScript\nDESCRIPTION: Example showing two different styles of variable declaration: using a single declaration for multiple variables versus using multiple declarations for individual variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// one variable declaration per function\nfunction foo() {\n    var bar, baz;\n}\n\n// multiple variable declarations per function\nfunction foo() {\n    var bar;\n    var baz;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with allowEmptyReject Option in JavaScript\nDESCRIPTION: Examples of correct code when the 'allowEmptyReject' option is set to true, allowing empty rejections in Promises.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-promise-reject-errors.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-promise-reject-errors: [\"error\", {\"allowEmptyReject\": true}]*/\n\nPromise.reject();\n\nnew Promise(function(resolve, reject) {\n  reject();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Semi-Style Rule in ESLint\nDESCRIPTION: JSON configuration example for the semi-style rule in ESLint. Shows how to set the rule to error level and specify semicolon placement preference.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-style.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"semi-style\": [\"error\", \"last\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of arrow functions with 'never' option (JavaScript)\nDESCRIPTION: Illustrates correct usage when the rule is set to 'never'. Arrow functions must have a single expression body without braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n/*eslint arrow-body-style: [\"error\", \"never\"]*/\n\nconst foo = () => 0;\n\nconst bar = () => ({ foo: 0 });\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of max-statements Rule in JavaScript\nDESCRIPTION: This example demonstrates code that violates the max-statements rule with a limit of 10 statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-statements.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-statements: [\"error\", 10]*/\n\nfunction foo() {\n  const foo1 = 1;\n  const foo2 = 2;\n  const foo3 = 3;\n  const foo4 = 4;\n  const foo5 = 5;\n  const foo6 = 6;\n  const foo7 = 7;\n  const foo8 = 8;\n  const foo9 = 9;\n  const foo10 = 10;\n\n  const foo11 = 11; // Too many.\n}\n\nconst bar = () => {\n  const foo1 = 1;\n  const foo2 = 2;\n  const foo3 = 3;\n  const foo4 = 4;\n  const foo5 = 5;\n  const foo6 = 6;\n  const foo7 = 7;\n  const foo8 = 8;\n  const foo9 = 9;\n  const foo10 = 10;\n\n  const foo11 = 11; // Too many.\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Code with Decoration Configuration\nDESCRIPTION: Shows comments that pass the rule check when using the 'decoration' option because the warning terms are preceded by non-decorative characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-warning-comments.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-warning-comments: [\"error\", { \"decoration\": [\"/\", \"*\"] }]*/\n\n//!TODO preceded by non-decoration character\n/**\n *!TODO preceded by non-decoration character in a block comment\n */\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'always' and Multiple Exceptions\nDESCRIPTION: Examples of code that would be considered correct when using the 'always' option with exceptions for both curly and square brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\", \"[]\"] }]*/\n\nbar({bar:'baz'});\nbaz( 1, [1,2]);\nfoo({bar: 'baz'}, [1, 2]);\n```\n\n----------------------------------------\n\nTITLE: Configuring yield-star-spacing rule in ESLint (JSON)\nDESCRIPTION: Example of configuring the yield-star-spacing rule in ESLint using an object with 'before' and 'after' options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yield-star-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"yield-star-spacing\": [\"error\", {\"before\": true, \"after\": false}]\n```\n\n----------------------------------------\n\nTITLE: Basic Self-Comparison Example in JavaScript\nDESCRIPTION: Example showing incorrect usage where a variable is compared to itself, which is typically a mistake or typo.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-self-compare.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-self-compare: \"error\"*/\n\nlet x = 10;\nif (x === x) {\n    x = 20;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of max-params Rule in JavaScript\nDESCRIPTION: These examples demonstrate code that violates the max-params rule when set to a maximum of 3 parameters. Both function declaration and arrow function syntax are shown.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-params.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-params: [\"error\", 3]*/\n\nfunction foo1 (bar, baz, qux, qxx) {\n    doSomething();\n}\n\nlet foo2 = (bar, baz, qux, qxx) => {\n    doSomething();\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with allowTaggedTemplates Option\nDESCRIPTION: Examples of code patterns that would be flagged as errors even with the allowTaggedTemplates option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: [\"error\", { \"allowTaggedTemplates\": true }]*/\n\n`some untagged template string`;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of spaced-line-comment with 'never' Configuration in JavaScript\nDESCRIPTION: Example showing incorrect code when the rule is configured with 'never' option. A line comment has whitespace after // which violates the rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-line-comment.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// When [\"never\"]\n// This is a comment with a whitespace at the beginning\n```\n\n----------------------------------------\n\nTITLE: Example of incorrect ignorePattern usage with lines-around-comment in JavaScript\nDESCRIPTION: Example of incorrect code where a comment doesn't match the ignorePattern and doesn't have required blank lines around it, causing an ESLint error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"ignorePattern\": \"pragma\" }] */\n\n1 + 1;\n/* something else */\n```\n\n----------------------------------------\n\nTITLE: ESLint Semi Rule Example\nDESCRIPTION: Example reference to the semi rule configuration that controls whether JavaScript statements should end with semicolons\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/index.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`semi`](../../rules/semi)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Semicolons in JavaScript\nDESCRIPTION: This code snippet demonstrates proper semicolon usage that complies with the no-extra-semi ESLint rule. It shows the correct way to terminate variable declarations, function declarations, class fields, class methods, and static blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-semi.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;\n\nfunction foo() {\n    // code\n}\n\nvar bar = function() {\n    // code\n};\n\nclass C {\n    field;\n\n    method() {\n        // code\n    }\n\n    static {\n        // code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Function Call Spacing with 'always' Option in JavaScript\nDESCRIPTION: Example of correct function call spacing when the 'always' option is set, showing a space between the function name and parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-call-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-call-spacing: [\"error\", \"always\"]*/\n\nfn ();\n```\n\n----------------------------------------\n\nTITLE: Correct code examples for 'always' option\nDESCRIPTION: Examples of code that correctly follows the object-curly-newline rule when configured with the 'always' option, showing proper line break formatting.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", \"always\"]*/\n\nlet a = {\n};\nlet b = {\n    foo: 1\n};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {\n} = obj;\nlet {\n    f\n} = obj;\nlet {\n    g, h\n} = obj;\nlet {\n    i,\n    j\n} = obj;\nlet {\n    k = function() {\n        dosomething();\n    }\n} = obj;\n```\n\n----------------------------------------\n\nTITLE: Correct Import Using Negated Pattern Exception\nDESCRIPTION: Example of code that passes the rule by importing a module that matches a negated pattern in the restriction list.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { \"patterns\": [\"lodash/*\", \"!lodash/pick\"] }]*/\n\nimport pick from 'lodash/pick';\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Conversions in JavaScript\nDESCRIPTION: Recommended explicit alternatives for type conversions that are preferred over implicit coercions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst b = Boolean(foo);\nconst b1 = foo.indexOf(\".\") !== -1;\nconst n = Number(foo);\nconst n1 = Number(foo);\nconst n2 = Number(foo);\nconst n3 = Number(foo);\nconst s = String(foo);\nfoo = String(foo);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Comment Separation in ESLint sort-imports Rule\nDESCRIPTION: Example showing valid import sorting with allowSeparatedGroups enabled where a comment line separates import groups, allowing different ordering in each group.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-imports: [\"error\", { \"allowSeparatedGroups\": true }]*/\n\nimport b from 'foo.js';\nimport c from 'bar.js';\n// comment\nimport a from 'baz.js';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Multiple Spaces in Regular Expressions (JavaScript)\nDESCRIPTION: This snippet demonstrates incorrect usage of multiple spaces in regular expression literals, which the 'no-regex-spaces' rule aims to prevent. It shows examples using both literal notation and the RegExp constructor.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-regex-spaces.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-regex-spaces: \"error\"*/\n\nconst re = /foo   bar/;\nconst re1 = new RegExp(\"foo   bar\");\n```\n\n----------------------------------------\n\nTITLE: Valid Null Comparisons Using Strict Equality\nDESCRIPTION: Examples of correct code that uses strict equality (=== or !==) when comparing with null. These patterns are recommended as they only match null values explicitly.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eq-null.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Non-Fixable Code with Extra Parentheses\nDESCRIPTION: This example demonstrates a case where the rule detects but cannot automatically fix extra parentheses around \"use strict\" because removing them would change the semantics of the code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<!--\n// this is a script\n// -->\n\n(\"use strict\");\n\nfunction test() {\n    console.log(typeof this);\n}\n\ntest();\n```\n\n----------------------------------------\n\nTITLE: Including Scoped Plugin Packages in ESLint Configuration\nDESCRIPTION: Example showing how to include scoped plugin packages in the ESLint configuration, where the 'eslint-plugin-' prefix can be omitted from both scoped and non-scoped packages.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins-deprecated.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n    // ...\n    \"plugins\": [\n        \"@jquery/jquery\", // means @jquery/eslint-plugin-jquery\n        \"@foobar\" // means @foobar/eslint-plugin\n    ]\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Always Option\nDESCRIPTION: Examples of code that violates the rule when configured with the 'always' option, showing multiple declarations on the same line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var-declaration-per-line.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var-declaration-per-line: [\"error\", \"always\"]*/\n\nvar a, b;\n\nlet c, d = 0;\n\nconst e = 0, f = 0;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Allman Brace Style in JavaScript\nDESCRIPTION: Example of the Allman brace style in JavaScript, where all braces are on their own lines without extra indentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/brace-style.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (foo)\n{\n  bar();\n}\nelse\n{\n  baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'always' Option (JavaScript)\nDESCRIPTION: This example shows correct usage of a comparison in a conditional statement that complies with the no-cond-assign rule using the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-cond-assign.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-cond-assign: [\"error\", \"always\"]*/\n\n// Assignment replaced by comparison\nlet x;\nif (x === 0) {\n    const b = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Class Member Declarations\nDESCRIPTION: Shows various incorrect patterns that violate the no-dupe-class-members rule, including duplicate methods, getters, and properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-class-members.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-dupe-class-members: \"error\"*/\n\nclass A {\n  bar() { }\n  bar() { }\n}\n\nclass B {\n  bar() { }\n  get bar() { }\n}\n\nclass C {\n  bar;\n  bar;\n}\n\nclass D {\n  bar;\n  bar() { }\n}\n\nclass E {\n  static bar() { }\n  static bar() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating operator-linebreak with 'after' option in JavaScript\nDESCRIPTION: This snippet shows incorrect and correct code examples for the operator-linebreak rule with the 'after' option. It demonstrates how operators should be placed at the end of lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-linebreak.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint operator-linebreak: [\"error\", \"after\"]*/\n\nfoo = 1 +\n      2;\n\nfoo = 1 +\n    2;\n\nfoo =\n    5;\n\nif (someCondition ||\n    otherCondition) {\n}\n\nanswer = everything ?\n  42 :\n  foo;\n\nclass Foo {\n    a =\n        1;\n    [b] =\n        2;\n    [c\n    ] =\n        3;\n    d = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of max-statements Rule with Class Static Blocks in JavaScript\nDESCRIPTION: This example demonstrates that the max-statements rule does not apply to class static blocks, and statements within them don't count towards the function's limit.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-statements.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-statements: [\"error\", 2]*/\n\nfunction foo() {\n    let one;\n    let two = class {\n        static {\n            let three;\n            let four;\n            let five;\n            if (six) {\n                let seven;\n                let eight;\n                let nine;\n            }\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with allowElseIf: false Option in JavaScript\nDESCRIPTION: This example shows correct code when the 'allowElseIf' option is set to false, demonstrating the proper way to structure conditional statements without else-if blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-else-return.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-else-return: [\"error\", {allowElseIf: false}]*/\n\nfunction foo() {\n    if (error) {\n        return 'It failed';\n    }\n\n    if (loading) {\n        return \"It's still loading\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Sequence Expressions (no-sequences rule)\nDESCRIPTION: Examples of code that comply with the no-sequences rule, showing how to properly use parentheses to allow sequence expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sequences.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-sequences: \"error\"*/\n\nfoo = (doSomething(), val);\n\n(0, eval)(\"doSomething();\");\n\ndo {} while ((doSomething(), !!test));\n\nfor (i = 0, j = 10; i < j; i++, j--);\n\nif ((doSomething(), !!test));\n\nswitch ((val = foo(), val)) {}\n\nwhile ((val = foo(), val < 42));\n\nwith ((doSomething(), val)) {}\n```\n\n----------------------------------------\n\nTITLE: Using ESLint Configuration Comments to Override Rule Severity\nDESCRIPTION: Example of using an ESLint configuration comment to override the severity of the 'curly' rule. In v9.0.0, this preserves the options from the config file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// my-file.js\n\n/* eslint curly: \"warn\" */\n```\n\n----------------------------------------\n\nTITLE: Function Call Arguments with Always Option - Correct Examples\nDESCRIPTION: Examples of correct function call argument formatting when using the 'always' option, showing proper line breaks between arguments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-call-argument-newline.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint function-call-argument-newline: [\"error\", \"always\"]*/\n\nfoo(\n    \"one\",\n    \"two\",\n    \"three\"\n);\n\nbar(\n    \"one\",\n    \"two\",\n    { one: 1, two: 2 }\n);\n// or\nbar(\n    \"one\",\n    \"two\",\n    {\n        one: 1,\n        two: 2\n    }\n);\n\nbaz(\n    \"one\",\n    \"two\",\n    (x) => {\n        console.log(x);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for no-useless-concat Rule in JavaScript\nDESCRIPTION: Multiple examples of code that would violate the no-useless-concat rule, including concatenation of string literals and template literals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-concat.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-concat: \"error\"*/\n\nconst a = `some` + `string`;\n\n// these are the same as \"10\"\nconst b = '1' + '0';\nconst c = '1' + `0`;\nconst d = `1` + '0';\nconst e = `1` + `0`;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Examples with enforceForJSX Option\nDESCRIPTION: Examples of JSX expressions that would be flagged as errors with the enforceForJSX option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n/*eslint no-unused-expressions: [\"error\", { \"enforceForJSX\": true }]*/\n\n<MyComponent />;\n\n<></>;\n```\n\n----------------------------------------\n\nTITLE: Correct Alternatives to indexOf with NaN\nDESCRIPTION: Examples of correct alternatives to using indexOf and lastIndexOf with NaN, providing custom implementations and using ES2015+ methods.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/use-isnan.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint use-isnan: [\"error\", {\"enforceForIndexOf\": true}]*/\n\nfunction myIsNaN(val) {\n    return typeof val === \"number\" && isNaN(val);\n}\n\nfunction indexOfNaN(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        if (myIsNaN(arr[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction lastIndexOfNaN(arr) {\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (myIsNaN(arr[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst hasNaN = myArray.some(myIsNaN);\n\nconst hasNaN1 = indexOfNaN(myArray) >= 0;\n\nconst firstIndex = indexOfNaN(myArray);\n\nconst lastIndex = lastIndexOfNaN(myArray);\n\n// ES2015\nconst hasNaN2 = myArray.some(Number.isNaN);\n\n// ES2015\nconst firstIndex1 = myArray.findIndex(Number.isNaN);\n\n// ES2016\nconst hasNaN3 = myArray.includes(NaN);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Code Without Newlines Before Return in JavaScript\nDESCRIPTION: This snippet shows a JavaScript function without newlines before return statements, which may reduce code clarity.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-before-return.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo(bar) {\n  var baz = 'baz';\n  if (!bar) {\n    bar = baz;\n    return bar;\n  }\n  return bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for 'never' option\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'never' option, which prohibits semicolons at the end of statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n\nclass Foo {\n    bar = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Useless Renaming in JavaScript ES2015\nDESCRIPTION: Examples of redundant variable renaming in import/export statements and destructuring assignments where the variable is renamed to the same name.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-rename.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { foo as foo } from \"bar\";\nexport { foo as foo };\nlet { foo: foo } = bar;\n```\n\n----------------------------------------\n\nTITLE: ignoreClassesWithImplements Option - Correct Example (all)\nDESCRIPTION: TypeScript example showing a class that implements an interface where methods don't use 'this', which is allowed when ignoreClassesWithImplements is 'all'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"ignoreClassesWithImplements\": \"all\" }] */\n\ninterface Base {\n    method(): void;\n}\n\nclass Derived implements Base {\n    method() {}\n    property = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration for template-curly-spacing\nDESCRIPTION: JSON configuration for the template-curly-spacing rule, set to 'error' with 'never' as the default option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-curly-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"template-curly-spacing\": [\"error\", \"never\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaration Style Rule Examples\nDESCRIPTION: Shows correct code examples for the 'declaration' rule option\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-style.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-style: [\"error\", \"declaration\"]*/\n\nfunction foo() {\n    // ...\n}\n\n// Methods (functions assigned to objects) are not checked by this rule\nSomeObject.foo = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with the nestedBinaryExpressions Exception\nDESCRIPTION: Examples showing valid code when the 'nestedBinaryExpressions' option is set to false, allowing extra parentheses in nested binary expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { \"nestedBinaryExpressions\": false }] */\n\nx = a || (b && c);\nx = a + (b * c);\nx = (a * b) / c;\n```\n\n----------------------------------------\n\nTITLE: Correct examples with ignoreEOLComments set to true\nDESCRIPTION: Examples of code that comply with the no-multi-spaces rule when end-of-line comments are ignored, allowing multiple spaces before comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-spaces: [\"error\", { ignoreEOLComments: true }]*/\n\nvar x = 5; // comment\nvar x = 5;      // comment\nvar x = 5; /* multiline\n * comment\n */\nvar x = 5;      /* multiline\n * comment\n */\n```\n\n----------------------------------------\n\nTITLE: Examples of Incorrect Loop Usage Detected by no-unreachable-loop\nDESCRIPTION: These code snippets demonstrate various loop constructs (while, do-while, for, for-in, for-of) that violate the no-unreachable-loop rule. Each loop contains a path that always exits on the first iteration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable-loop.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unreachable-loop: \"error\"*/\n\nwhile (foo) {\n    doSomething(foo);\n    foo = foo.parent;\n    break;\n}\n\nfunction verifyList(head) {\n    let item = head;\n    do {\n        if (verify(item)) {\n            return true;\n        } else {\n            return false;\n        }\n    } while (item);\n}\n\nfunction findSomething(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        if (isSomething(arr[i])) {\n            return arr[i];\n        } else {\n            throw new Error(\"Doesn't exist.\");\n        }\n    }\n}\n\nfor (key in obj) {\n    if (key.startsWith(\"_\")) {\n        break;\n    }\n    firstKey = key;\n    firstValue = obj[key];\n    break;\n}\n\nfor (foo of bar) {\n    if (foo.id === id) {\n        doSomething(foo);\n    }\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with checkForEach Option in JavaScript\nDESCRIPTION: These examples demonstrate incorrect usage of forEach when the 'checkForEach' option is set to true, flagging returns in forEach callbacks as errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-callback-return.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-callback-return: [\"error\", { checkForEach: true }]*/\n\nmyArray.forEach(function(item) {\n    return handleItem(item);\n});\n\nmyArray.forEach(function(item) {\n    if (item < 0) {\n        return x;\n    }\n    handleItem(item);\n});\n\nmyArray.forEach(function(item) {\n    if (item < 0) {\n        return void x;\n    }\n    handleItem(item);\n});\n\nmyArray.forEach(item => handleItem(item));\n\nmyArray.forEach(item => void handleItem(item));\n\nmyArray.forEach(item => {\n    return handleItem(item);\n});\n\nmyArray.forEach(item => {\n    return void handleItem(item);\n});\n```\n\n----------------------------------------\n\nTITLE: Maximum Length Rule Examples\nDESCRIPTION: Examples showing violations and correct usage with a maximum length requirement of 10 characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-length.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-length: [\"error\", { \"max\": 10 }]*/\n\nconst reallyLongVarName = 5;\nfunction reallyLongFuncName() { return 42; }\nobj.reallyLongPropName = document.body;\nconst foo = function (reallyLongArgName) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (reallyLongErrorName) {\n    // ignore as many do\n}\n(reallyLongArgName) => { return !reallyLongArgName; };\nconst [reallyLongFirstElementName] = arr;\n```\n\n----------------------------------------\n\nTITLE: Basic Arrow Spacing Examples in JavaScript\nDESCRIPTION: Shows the basic spacing styles that can be enforced with the arrow-spacing rule. The first example shows spacing before and after the arrow, while the second shows no spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// { \"before\": true, \"after\": true }\n(a) => {}\n\n// { \"before\": false, \"after\": false }\n(a)=>{}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Mixed Spaces and Tabs in JavaScript\nDESCRIPTION: Example of code that violates the no-mixed-spaces-and-tabs rule by using both spaces and tabs for indentation. The function add() uses a tab followed by spaces, and the variable declarations in main() also mix tabs and spaces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-spaces-and-tabs.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-mixed-spaces-and-tabs: \"error\"*/\n\nfunction add(x, y) {\n\t  return x + y;\n}\n\nfunction main() {\n\tvar x = 5,\n\t    y = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of return, throw, and case Keywords\nDESCRIPTION: Examples of code that complies with the space-return-throw-case rule by including proper spaces after the keywords. This shows the correct spacing for throw statements, return statements with negation, and case clauses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-return-throw-case.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*eslint space-return-throw-case: \"error\"*/\n\nthrow {a: 0};\n\nfunction f(){ return -a; }\n\nswitch(a){ case 'a': break; }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Promise-Based ESLint Formatter\nDESCRIPTION: Example of a Promise-based ESLint formatter that handles asynchronous operations. This pattern is useful when formatter needs to perform asynchronous tasks like reading files or making network requests.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/ignored-paths/ignore-pattern/subdir/ignore-me.txt#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function(results) {\n    const formatted = await Promise.all(\n        results\n            .filter(result => result.messages.length)\n            .map(async result => `${result.filePath} has problems`)\n    );\n    return formatted.join(\"\\n\");\n};\n```\n\n----------------------------------------\n\nTITLE: Array Bracket Newline Rule - Always Option Examples\nDESCRIPTION: Examples demonstrating incorrect and correct usage when the rule is configured with the 'always' option, which requires line breaks inside brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-newline.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", \"always\"]*/\n\nconst a = [];\nconst b = [1];\nconst c = [1, 2];\nconst d = [1,\n    2];\nconst e = [function foo() {\n    dosomething();\n}];\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", \"always\"]*/\n\nconst a = [\n];\nconst b = [\n    1\n];\nconst c = [\n    1, 2\n];\nconst d = [\n    1,\n    2\n];\nconst e = [\n    function foo() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Additional correct comma spacing examples with default options\nDESCRIPTION: Examples demonstrating cases where the rule does not enforce spacing, such as between two commas, after opening brackets, or before closing parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n\n// this rule does not enforce spacing between two commas\nvar arr = [\n    ,,\n    , ,\n];\n\n// this rule does not enforce spacing after `[` and before `]`\nvar arr = [,];\nvar arr = [ , ];\nvar arr = [a, b,];\n[,] = arr;\n[ , ] = arr;\n[a, b,] = arr;\n\n// this rule does not enforce spacing before `}`\nvar obj = {x, y,};\nvar {z, q,} = obj;\nimport {foo, bar,} from \"mod\";\n\n// this rule does not enforce spacing before `)`\nfoo(a, b,)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Value Usage in Destructuring in JavaScript\nDESCRIPTION: Example showing how to use a default value with destructuring, which is often the intended behavior when developers mistakenly use empty patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-pattern.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// creates variable a\nconst {a = {}} = foo;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Spacing with 'Never' Option in JavaScript\nDESCRIPTION: Examples of code that comply with the 'space-before-keywords' rule using the 'never' option. It shows the correct absence of spaces before keywords in various contexts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-keywords.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-keywords: [\"error\", \"never\"]*/\n\nif (foo) {\n    // ...\n}else {}\n\ndo {}while (foo)\n\ntry {}finally {}\n\ntry{}catch(e) {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect NaN Usage in Switch Statements\nDESCRIPTION: Examples showing incorrect usage of NaN in switch statements, which will be flagged when the enforceForSwitchCase option is enabled (default behavior).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/use-isnan.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint use-isnan: [\"error\", {\"enforceForSwitchCase\": true}]*/\n\nswitch (foo) {\n    case NaN:\n        bar();\n        break;\n    case 1:\n        baz();\n        break;\n    // ...\n}\n\nswitch (NaN) {\n    case a:\n        bar();\n        break;\n    case b:\n        baz();\n        break;\n    // ...\n}\n\nswitch (foo) {\n    case Number.NaN:\n        bar();\n        break;\n    case 1:\n        baz();\n        break;\n    // ...\n}\n\nswitch (Number.NaN) {\n    case a:\n        bar();\n        break;\n    case b:\n        baz();\n        break;\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage with allowAsStatement option in no-void rule\nDESCRIPTION: This snippet shows code that violates the no-void rule when the allowAsStatement option is set to true, focusing on expression-position usage.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-void.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-void: [\"error\", { \"allowAsStatement\": true }]*/\n\nconst foo = void bar();\nfunction baz() {\n    return void 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Without Tabs in JavaScript\nDESCRIPTION: Examples showing correct code without any tab characters, using proper spacing for alignment and indentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-tabs.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-tabs: \"error\" */\n\nvar a = 2;\n\n/**\n* it's a test function\n*/\nfunction test(){}\n\nvar x = 1; // test\n```\n\n----------------------------------------\n\nTITLE: Incorrect String Coercions in JavaScript\nDESCRIPTION: Examples of string coercions that the rule flags as incorrect when the 'string' option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-coercion: \"error\"*/\n\nconst s = \"\" + foo;\nconst s1 = `` + foo;\nfoo += \"\";\nfoo += ``;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating operator-linebreak with 'none' option in JavaScript\nDESCRIPTION: This snippet shows correct code examples for the operator-linebreak rule with the 'none' option. It demonstrates how linebreaks are disallowed around operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-linebreak.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint operator-linebreak: [\"error\", \"none\"]*/\n\nfoo = 1 + 2;\n\nfoo = 5;\n\nif (someCondition || otherCondition) {\n}\n\nanswer = everything ? 42 : foo;\n\nclass Foo {\n    a = 1;\n    [b] = 2;\n    [c\n    ] = 3;\n    d = 4;\n    [e] = 5;\n    [f\n    ] = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for 'consistent: true' option\nDESCRIPTION: Examples of code that would trigger the object-curly-newline rule when configured with the consistent option, which requires that either both curly braces or neither directly enclose newlines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", { \"consistent\": true }]*/\n\nlet a = {foo: 1\n};\nlet b = {\n    foo: 1};\nlet c = {foo: 1, bar: 2\n};\nlet d = {\n    foo: 1, bar: 2};\nlet e = {foo: function() {\n    dosomething();\n    }\n};\nlet f = {\n    foo: function() {\n    dosomething();}};\n\nlet {g\n} = obj;\nlet {\n    h} = obj;\nlet {i, j\n} = obj;\nlet {k, l\n} = obj;\nlet {\n    m, n} = obj;\nlet {\n    o, p} = obj;\nlet {q = function() {\n    dosomething();\n    }\n} = obj;\nlet {\n    r = function() {\n        dosomething();\n    }} = obj;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Blank Line Separation in ESLint sort-imports Rule\nDESCRIPTION: Example demonstrating valid import sorting with allowSeparatedGroups enabled where a blank line separates import groups, allowing each group to be sorted independently.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-imports: [\"error\", { \"allowSeparatedGroups\": true }]*/\n\nimport b from 'foo.js';\nimport c from 'bar.js';\n\nimport a from 'baz.js';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Negation Operators in JavaScript\nDESCRIPTION: Examples of unsafe negation patterns that this rule warns against, including incorrect negation of 'in' and 'instanceof' operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-negation.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-negation: \"error\"*/\n\nif (!key in object) {\n    // operator precedence makes it equivalent to (!key) in object\n    // and type conversion makes it equivalent to (key ? \"false\" : \"true\") in object\n}\n\nif (!obj instanceof Ctor) {\n    // operator precedence makes it equivalent to (!obj) instanceof Ctor\n    // and it equivalent to always false since boolean values are not objects.\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with onlyOneSimpleParam: true Option\nDESCRIPTION: These examples show arrow functions that are considered correct when the 'onlyOneSimpleParam' option is set to true. The rule is relaxed for functions with multiple or complex parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-confusing-arrow.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-confusing-arrow: [\"error\", {\"onlyOneSimpleParam\": true}]*/\n\n() => 1 ? 2 : 3;\n(a, b) => 1 ? 2 : 3;\n(a = b) => 1 ? 2 : 3;\n({ a }) => 1 ? 2 : 3;\n([a]) => 1 ? 2 : 3;\n(...a) => 1 ? 2 : 3;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for id-denylist Rule in JavaScript\nDESCRIPTION: This code snippet showcases correct usage of identifiers that comply with the 'id-denylist' rule. It includes examples of allowed identifiers and demonstrates cases where the rule does not apply, such as function calls and non-assignment property access.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-denylist.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-denylist: [\"error\", \"data\", \"callback\"] */\n\nconst encodingOptions = {...values};\n\nfunction processFileResult() {\n    // ...\n}\n\nelement.successHandler = function() {\n    // ...\n};\n\nconst itemSet = {\n    entities: [...values]\n};\n\ncallback(); // all function calls are ignored\n\nfoo.callback(); // all function calls are ignored\n\nfoo.data; // all property names that are not assignments are ignored\n\nclass Foo {\n    items = [];\n}\n\nclass Bar {\n    #items = [];\n}\n\nclass Baz {\n    method() {}\n}\n\nclass Qux {\n    #method() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Disable Comments\nDESCRIPTION: Demonstrates how to include descriptive comments explaining why a particular disable directive is necessary. Descriptions follow the configuration after two or more consecutive hyphens.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint-disable-next-line no-console -- Here's a description about why this configuration is necessary.\nconsole.log(\"hello\");\n\n/* eslint-disable-next-line no-console --\n * Here's a very long description about why this configuration is necessary\n * along with some additional information\n **/\nconsole.log(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Correct Always Option Examples\nDESCRIPTION: Examples of correct comment spacing with the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-comment.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/*\n * This is a comment with a whitespace at the beginning\n */\n\n/*\nThis comment has a newline\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuration Example - Method Spacing\nDESCRIPTION: Example showing configuration that disallows blank lines between methods with custom enforce rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-between-class-members.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-between-class-members: [\n    \"error\",\n    {\n      enforce: [\n        { blankLine: \"never\", prev: \"method\", next: \"method\" }\n      ]\n    },\n]*/\n\nclass MyClass {\n  constructor(height, width) {\n      this.height = height;\n      this.width = width;\n  }\n\n  fieldA = 'Field A';\n\n  #fieldB = 'Field B';\n\n  method1() {}\n  get area() {\n    return this.method1();\n  }\n  method2() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Accessor Pairs with Default ESLint Configuration\nDESCRIPTION: These examples show correct implementations that satisfy the 'accessor-pairs' rule, with objects having both getters and setters for properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/accessor-pairs.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint accessor-pairs: \"error\"*/\n\nconst s = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n\nconst t = {d: 1};\nObject.defineProperty(t, 'c', {\n    set: function(value) {\n        this.val = value;\n    },\n    get: function() {\n        return this.val;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Formatter Command\nDESCRIPTION: Command line example showing how to use a custom formatter with ESLint using the -f flag.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\neslint -f awesome src/\n```\n\n----------------------------------------\n\nTITLE: Correct JSDoc Documentation Examples\nDESCRIPTION: Demonstrates properly formatted JSDoc comments for various scenarios including functions, constructors, and class methods.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-jsdoc.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint valid-jsdoc: \"error\"*/\n\n/**\n * Add two numbers.\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n * @returns {number} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n\n/**\n * @param {string} name Whom to greet.\n * @returns {void}\n */\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n}\n\n/**\n * Represents a sum.\n * @constructor\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n */\nfunction sum(num1, num2) {\n    this.num1 = num1;\n    this.num2 = num2;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Allow Comments at Block Start (JavaScript)\nDESCRIPTION: Examples of correct code that allow comments at the start of blocks when using the 'allowBlockStart' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true, \"allowBlockStart\": true }]*/\n\nfunction foo(){\n    // what a great and wonderful day\n    var day = \"great\"\n    return day;\n}\n\nif (bar) {\n    // what a great and wonderful day\n    foo();\n}\n\nclass C {\n    // what a great and wonderful day\n\n    method() {\n        // what a great and wonderful day\n        foo();\n    }\n\n    static {\n        // what a great and wonderful day\n        foo();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Sequence Expressions in Arrow Functions\nDESCRIPTION: Examples of incorrect use of sequence expressions in arrow function bodies, which require double parentheses to be considered intentional.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sequences.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-sequences: \"error\"*/\nconst foo = (val) => (console.log('bar'), val);\n\nconst baz = () => ((bar = 123), 10);\n\nconst qux = () => { return (bar = 123), 10 }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples\nDESCRIPTION: Examples of code that violate the prefer-destructuring rule when both array and object destructuring are enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-destructuring.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint prefer-destructuring: \"error\" */\n\n// With `array` enabled\nconst foo = array[0];\nbar.baz = array[0];\n\n// With `object` enabled\nconst qux = object.qux;\nconst quux = object['quux'];\n```\n\n----------------------------------------\n\nTITLE: Correct Single-line Statement Positioning with 'below' Option\nDESCRIPTION: Examples of correct code for the nonblock-statement-body-position rule with the 'below' option, showing control structures with single-line statements placed on the line below the condition.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/nonblock-statement-body-position.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint nonblock-statement-body-position: [\"error\", \"below\"] */\n\nif (foo)\n  bar();\nelse\n  baz();\n\nwhile (foo)\n  bar();\n\nfor (let i = 1; i < foo; i++)\n  bar();\n\ndo\n  bar();\nwhile (foo)\n\nif (foo) {\n  // Although the second `if` statement is on the same line as the `else`, this is a very common\n  // pattern, so it's not checked by this rule.\n} else if (bar) {\n}\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Constructor Usage\nDESCRIPTION: Examples of valid TypeScript constructors that use access modifiers, decorator patterns, or perform meaningful operations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-constructor.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint no-useless-constructor: \"error\" */\n\nclass A {\n    protected constructor() {}\n}\n\nclass B extends A {\n    public constructor() {\n        super();\n    }\n}\n\nclass C {\n    constructor(@decorated param) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct String Coercions in JavaScript\nDESCRIPTION: Examples of correct string coercions that the rule allows when the 'string' option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-coercion: \"error\"*/\n\nconst s = String(foo);\nfoo = String(foo);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of max-statements Rule in JavaScript\nDESCRIPTION: This example shows code that complies with the max-statements rule, limiting functions to 10 statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-statements.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-statements: [\"error\", 10]*/\n\nfunction foo() {\n  const foo1 = 1;\n  const foo2 = 2;\n  const foo3 = 3;\n  const foo4 = 4;\n  const foo5 = 5;\n  const foo6 = 6;\n  const foo7 = 7;\n  const foo8 = 8;\n  const foo9 = 9;\n  return function () { // 10\n\n    // The number of statements in the inner function does not count toward the\n    // statement maximum.\n\n    let bar;\n    let baz;\n    return 42;\n  };\n}\n\nconst bar = () => {\n  const foo1 = 1;\n  const foo2 = 2;\n  const foo3 = 3;\n  const foo4 = 4;\n  const foo5 = 5;\n  const foo6 = 6;\n  const foo7 = 7;\n  const foo8 = 8;\n  const foo9 = 9;\n  return function () { // 10\n\n    // The number of statements in the inner function does not count toward the\n    // statement maximum.\n\n    let bar;\n    let baz;\n    return 42;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Array Bracket Newline Rule - MinItems Option Examples\nDESCRIPTION: Examples showing usage with the minItems option, which requires line breaks if the number of elements meets or exceeds the specified threshold.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-newline.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", { \"minItems\": 2 }]*/\n\nconst a = [\n];\nconst b = [\n    1\n];\nconst c = [1, 2];\nconst d = [1,\n    2];\nconst e = [\n  function foo() {\n    dosomething();\n  }\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", { \"minItems\": 2 }]*/\n\nconst a = [];\nconst b = [1];\nconst c = [\n    1, 2\n];\nconst d = [\n    1,\n    2\n];\nconst e = [function foo() {\n    dosomething();\n}];\n```\n\n----------------------------------------\n\nTITLE: Correct Dot Notation Usage\nDESCRIPTION: Examples showing correct usage of dot notation and valid cases for square bracket notation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-notation.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint dot-notation: \"error\"*/\n\nconst x = foo.bar;\n\nconst y = foo[bar];    // Property name is a variable, square-bracket notation required\n```\n\n----------------------------------------\n\nTITLE: Correct implementation of padded-blocks with 'always' and 'allowSingleLineBlocks' in JavaScript\nDESCRIPTION: Examples of code that correctly implements the 'always' padding rule with the single-line block exception.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", \"always\", { allowSingleLineBlocks: true }]*/\n\nif (a) { b(); }\n\nif (a) {\n\n    b();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Synchronous Methods with Default Options in JavaScript\nDESCRIPTION: Examples of code that violates the no-sync rule with the default configuration (allowAtRootLevel: false). The code shows usage of synchronous methods both at the root level and within functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sync.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-sync: \"error\"*/\n\nfs.existsSync(somePath);\n\nfunction foo() {\n  var contents = fs.readFileSync(somePath).toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample ESLint File with Rules\nDESCRIPTION: Example JavaScript file demonstrating ESLint rules for regex spacing and wrapping.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/stats.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-regex-spaces: \"error\", wrap-regex: \"error\"*/\n\nfunction a() {\n\treturn / foo/.test(\"bar\");\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Semicolon Placement with 'last' Option\nDESCRIPTION: Examples of correct semicolon placement when the rule is configured to require semicolons at the end of statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-style.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi-style: [\"error\", \"last\"]*/\n\nfoo();\n[1, 2, 3].forEach(bar)\n\nfor (\n    var i = 0;\n    i < 10;\n    ++i\n) {\n    foo()\n}\n\nclass C {\n    static {\n        foo();\n        bar()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Incorrect Code for space-infix-ops Rule\nDESCRIPTION: Several examples of code that violates the space-infix-ops rule, showing various operators without proper spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-infix-ops.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-infix-ops: \"error\"*/\n\na+b\n\na+ b\n\na +b\n\na?b:c\n\nconst a={b:1};\n\nvar {b=0}=bar;\n\nfunction foo(a=0) { }\n```\n\n----------------------------------------\n\nTITLE: Using Ignore Patterns with Command Line (Shell)\nDESCRIPTION: Use the --ignore-pattern flag with ESLint CLI to specify ignore patterns directly from the command line. This example achieves the same result as the previous .eslintignore example.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore-deprecated.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\neslint --ignore-pattern '!.build' --ignore-pattern '.build/*' --ignore-pattern '!.build/test.js' parent-folder/\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with blockScopedFunctions: \"allow\" Option\nDESCRIPTION: Demonstrates code patterns that comply with the rule when blockScopedFunctions is set to \"allow\". Function declarations in blocks are permitted in strict mode or within modules when using ES2015+.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inner-declarations: [\"error\", \"functions\", { blockScopedFunctions: \"allow\" }]*/\n\n\"use strict\";\n\nif (test) {\n    function doSomething() { }\n}\n\nfunction doSomething() {\n    if (test) {\n        function doSomethingElse() { }\n    }\n}\n\n// OR\n\nfunction foo() {\n    \"use strict\";\n\n    if (test) {\n        function bar() { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating spacing options in JavaScript objects and arrays\nDESCRIPTION: Examples of object and array literals with and without spaces inside brackets and braces. This snippet illustrates the formatting preferences that the rule aimed to enforce.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-brackets.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = { foo: 'bar' };\nvar arr = [ 'foo', 'bar' ];\nfoo[ 'bar' ];\n\nvar obj = {foo: 'bar'};\nvar arr = ['foo', 'bar'];\nfoo['bar'];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage with Dynamic Expressions in JavaScript\nDESCRIPTION: An example of code that correctly uses .call() with dynamic expressions, which the no-useless-call rule does not flag due to potential 'thisArg' changes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-call.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-call: \"error\"*/\n\na[++i].foo.call(a[i], 1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSDoc Documentation Examples\nDESCRIPTION: Shows common mistakes in JSDoc documentation including missing parameters, incorrect parameter names, and missing type information.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-jsdoc.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint valid-jsdoc: \"error\"*/\n\n/**\n * Add two numbers.\n * @param {number} num The first number.\n * @returns The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n\n/**\n * @param {string name Whom to greet.\n */\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n}\n\n/**\n * Represents a sum.\n * @constructor\n * @param num1 The first number.\n * @param {number} num2\n */\nfunction sum(num1, num2) {\n    this.num1 = num1;\n    this.num2 = num2;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Comment Position Rule for 'Beside' Position\nDESCRIPTION: This snippet demonstrates the correct usage of the 'line-comment-position' rule when configured to enforce comments beside code. It includes the ESLint configuration comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/line-comment-position.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint line-comment-position: [\"error\", { \"position\": \"beside\" }]*/\n1 + 1; // valid comment\n```\n\n----------------------------------------\n\nTITLE: Incorrect usages with default 'always' option\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the default 'always' option, showing various ways parseInt() might be used incorrectly without a proper radix.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/radix.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint radix: \"error\"*/\n\nconst num = parseInt(\"071\");\n\nconst num1 = parseInt(someValue);\n\nconst num2 = parseInt(\"071\", \"abc\");\n\nconst num3 = parseInt(\"071\", 37);\n\nconst num4 = parseInt();\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with allowNamedExports Option Set to True in JavaScript\nDESCRIPTION: This snippet shows correct usage when the 'allowNamedExports' option is set to true, allowing named exports before declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-use-before-define: [\"error\", { \"allowNamedExports\": true }]*/\n\nexport { a, b, f, C };\n\nconst a = 1;\n\nlet b;\n\nfunction f () {}\n\nclass C {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Known Limitation of the no-empty-character-class Rule\nDESCRIPTION: This snippet shows a known limitation of the rule where it does not report empty character classes in the string argument of calls to the RegExp constructor. This is considered a false negative.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-character-class.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-character-class: \"error\"*/\n\nconst abcNeverMatches = new RegExp(\"^abc[]\");\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with allowObjectPatternsAsParameters Option\nDESCRIPTION: Examples of code that correctly follow the no-empty-pattern rule when using the allowObjectPatternsAsParameters option set to true, showing allowed top-level empty object patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-pattern.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-pattern: [\"error\", { \"allowObjectPatternsAsParameters\": true }]*/\n\nfunction foo({}) {}\nconst bar = function({}) {};\nconst qux = ({}) => {};\n\nfunction baz({} = {}) {}\n```\n\n----------------------------------------\n\nTITLE: Disabling Ignore Patterns in ESLint CLI\nDESCRIPTION: The --no-ignore flag disables excluding of files from .eslintignore files, --ignore-path flags, --ignore-pattern flags, and the ignorePatterns property in config files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n--no-ignore file.js\n```\n\n----------------------------------------\n\nTITLE: Mixed Configuration Examples - JavaScript\nDESCRIPTION: Demonstrates correct usage with mixed configuration options for named and anonymous functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-parentheses.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Allow Comments at Class End (JavaScript)\nDESCRIPTION: Examples of correct code that allow comments at the end of classes when using the 'allowClassEnd' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true, \"allowClassEnd\": true }]*/\n\nclass foo {\n    day() {}\n    // what a great and wonderful day\n};\n```\n\n----------------------------------------\n\nTITLE: Running Summary Formatter\nDESCRIPTION: Command line example showing how to run ESLint with a custom formatter file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\neslint -f ./my-awesome-formatter.js src/\n```\n\n----------------------------------------\n\nTITLE: Demonstrating comma spacing examples in JavaScript\nDESCRIPTION: Examples showing different styles of comma spacing in variable declarations. This illustrates the basic spacing patterns that the rule addresses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = 1, bar = 2;\nvar foo = 1 ,bar = 2;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples\nDESCRIPTION: JavaScript code examples showing proper usage that complies with the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-properties.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-restricted-properties: [2, {\n    \"object\": \"disallowedObjectName\",\n    \"property\": \"disallowedPropertyName\"\n}] */\n\nconst example = disallowedObjectName.somePropertyName;\n\nallowedObjectName.disallowedPropertyName();\n```\n\n----------------------------------------\n\nTITLE: Correct Switch Statement Spacing Example\nDESCRIPTION: Example showing correct spacing around colons in switch statement case/default clauses with default rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/switch-colon-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint switch-colon-spacing: \"error\"*/\n\nswitch (a) {\n    case 0: foo(); break;\n    case 1:\n        bar();\n        break;\n    default:\n        baz();\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for 'outside' Option in wrap-iife Rule\nDESCRIPTION: Demonstrates code that violates the wrap-iife rule when configured with the 'outside' option, which requires wrapping the call expression.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-iife.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Call Spacing with 'never' Option in JavaScript\nDESCRIPTION: Examples of incorrect function call spacing when the 'never' option is set, showing spaces and newlines between function names and parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-call-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-call-spacing: [\"error\", \"never\"]*/\n\nfn ();\n\nfn\n();\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of ignoreClassWithStaticInitBlock Option in JavaScript\nDESCRIPTION: Shows correct code when 'ignoreClassWithStaticInitBlock' is set to true. It demonstrates a class with a static block where a variable is declared and used.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-vars.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-vars: [\"error\", { \"ignoreClassWithStaticInitBlock\": true }]*/\n\nclass Foo {\n    static {\n        let bar = \"some string\";\n\n        console.log(bar);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ESLint Rule: semi\nDESCRIPTION: This snippet defines the 'semi' rule in ESLint. It requires or disallows semicolons instead of ASI (Automatic Semicolon Insertion). The rule is marked as deprecated with information about its replacement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n\"semi\": {\n    \"deprecated\": {\n        \"message\": \"Formatting rules are being moved out of ESLint core.\",\n        \"url\": \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n        \"deprecatedSince\": \"8.53.0\",\n        \"availableUntil\": \"10.0.0\",\n        \"replacedBy\": [\n            {\n                \"message\": \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                \"url\": \"https://eslint.style/guide/migration\",\n                \"plugin\": {\n                    \"name\": \"@stylistic/eslint-plugin-js\",\n                    \"url\": \"https://eslint.style/packages/js\"\n                },\n                \"rule\": {\n                    \"name\": \"semi\",\n                    \"url\": \"https://eslint.style/rules/js/semi\"\n                }\n            }\n        ]\n    },\n    \"type\": \"layout\",\n    \"docs\": {\n        \"description\": \"Require or disallow semicolons instead of ASI\",\n        \"recommended\": false,\n        \"url\": \"https://eslint.org/docs/latest/rules/semi\"\n    },\n    \"fixable\": \"code\",\n    \"schema\": {\n        \"anyOf\": [\n            {\n                \"type\": \"array\",\n                \"items\": [\n                    {\n                        \"enum\": [\n                            \"never\"\n                        ]\n                    },\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"beforeStatementContinuationChars\": {\n                                \"enum\": [\n                                    \"always\",\n                                    \"any\",\n                                    \"never\"\n                                ]\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"minItems\": 0,\n                \"maxItems\": 2\n            },\n            {\n                \"type\": \"array\",\n                \"items\": [\n                    {\n                        \"enum\": [\n                            \"always\"\n                        ]\n                    },\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"omitLastInOneLineBlock\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"omitLastInOneLineClassBody\": {\n                                \"type\": \"boolean\"\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"minItems\": 0,\n                \"maxItems\": 2\n            }\n        ]\n    },\n    \"messages\": {\n        \"missingSemi\": \"Missing semicolon.\",\n        \"extraSemi\": \"Extra semicolon.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for Restricting ArrayPattern\nDESCRIPTION: Shows how to configure the 'no-restricted-syntax' rule to specifically restrict the use of ArrayPattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/bad-examples.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-restricted-syntax: \"error\" */\n\n/* eslint no-restricted-syntax: [\"error\", \"ArrayPattern\"] */\n```\n\n----------------------------------------\n\nTITLE: Renamed Properties Configuration\nDESCRIPTION: Configuration example showing how to enforce destructuring for renamed properties using the enforceForRenamedProperties option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-destructuring.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\",\n    {\n      \"object\": true\n    },\n    {\n      \"enforceForRenamedProperties\": true\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration Examples in JavaScript\nDESCRIPTION: Examples showing different styles of function declarations with and without spaces before parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction withoutSpace(x) {\n    // ...\n}\n\nfunction withSpace (x) {\n    // ...\n}\n\nvar anonymousWithoutSpace = function() {};\n\nvar anonymousWithSpace = function () {};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Labels without Variable Name Conflicts in JavaScript\nDESCRIPTION: This example shows correct code where the variable with the same name as the label is not in scope, thus complying with the no-label-var rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-label-var.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-label-var: \"error\"*/\n\n// The variable that has the same name as the label is not in scope.\n\nfunction foo() {\n  var q = t;\n}\n\nfunction bar() {\nq:\n  for(;;) {\n    break q;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Exports Override Examples\nDESCRIPTION: Demonstrates correct usage with named exports override options\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-style.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-style: [\"error\", \"expression\", { \"overrides\": { \"namedExports\": \"ignore\" } }]*/\n\nexport const foo = function() {\n    // ...\n};\n\nexport const bar = () => {};\n\nexport function baz() {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'enforceForIfStatements' Option in JavaScript\nDESCRIPTION: Examples of code that comply with the 'logical-assignment-operators' rule when 'enforceForIfStatements' is set to true. These if statements cannot be expressed using logical assignment operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/logical-assignment-operators.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint logical-assignment-operators: [\"error\", \"always\", { enforceForIfStatements: true }]*/\n\nif (a) b = c\nif (a === 0) a = b\n```\n\n----------------------------------------\n\nTITLE: Correct Alternative to process.env in JavaScript\nDESCRIPTION: Example of code that complies with the no-process-env rule by importing configuration from a dedicated config file instead of directly using process.env.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-process-env.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-process-env: \"error\"*/\n\nvar config = require(\"./config\");\n\nif(config.env === \"development\") {\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Line Comment Positions in JavaScript\nDESCRIPTION: This snippet shows two different positions for line comments: above the code and beside the code. The rule enforces consistency in comment placement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/line-comment-position.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// above comment\nvar foo = \"bar\";  // beside comment\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples for no-extra-label Rule\nDESCRIPTION: Examples of code that comply with the no-extra-label rule, showing proper usage of break statements without labels when unnecessary, and appropriate label usage in nested contexts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-label.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-extra-label: \"error\"*/\n\nwhile (a) {\n    break;\n}\n\nfor (let i = 0; i < 10; ++i) {\n    break;\n}\n\nswitch (a) {\n    case 0:\n        break;\n}\n\nA: {\n    break A;\n}\n\nB: while (a) {\n    while (b) {\n        break B;\n    }\n}\n\nC: switch (a) {\n    case 0:\n        while (b) {\n            break C;\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'always' and '()' Exception\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'always' option with an exception for nested parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"()\"] }]*/\n\nfoo( ( 1 + 2 ) );\nfoo( ( 1 + 2 ), 1 );\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Alert Function in JavaScript\nDESCRIPTION: This snippet shows an example of code that violates the no-alert rule by using the built-in alert function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-alert.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"here!\");\n```\n\n----------------------------------------\n\nTITLE: Correct Array Bracket Spacing with 'never' Option in JavaScript\nDESCRIPTION: Examples of code that would be considered correct when the rule is set to 'never', showing proper array bracket formatting without spaces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-spacing: [\"error\", \"never\"]*/\n\nvar arr = [];\nvar arr = ['foo', 'bar', 'baz'];\nvar arr = [['foo'], 'bar', 'baz'];\nvar arr = [\n  'foo',\n  'bar',\n  'baz'\n];\nvar arr = ['foo',\n  'bar'\n];\nvar arr = [\n  'foo',\n  'bar'];\n\nvar [x, y] = z;\nvar [x,y] = z;\nvar [x, ...y] = z;\nvar [,,x,] = z;\n```\n\n----------------------------------------\n\nTITLE: Offset Ternary Expressions\nDESCRIPTION: Demonstrates correct indentation for complex ternary expressions with offsetTernaryExpressions enabled, showing proper indentation of nested functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"offsetTernaryExpressions\": true }]*/\n\ncondition\n  ? () => {\n      return true\n    }\n  : condition2\n    ? () => {\n        return true\n      }\n    : () => {\n        return false\n      }\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for 'always' Option in ESLint operator-assignment Rule\nDESCRIPTION: Examples of JavaScript code that comply with the operator-assignment rule when configured with the 'always' option, showing valid usage patterns and exceptions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-assignment.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/*eslint operator-assignment: [\"error\", \"always\"]*/\n\nx = y;\nx += y;\nx = y * z;\nx = (x * y) * z;\nx[0] /= y;\nx[foo()] = x[foo()] % 2;\nx = y + x; // `+` is not always commutative (e.g. x = \"abc\")\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Values for Rule Configuration in JavaScript\nDESCRIPTION: Demonstrates using numeric values (0, 2) instead of strings for configuring ESLint rule severities in comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint eqeqeq: 0, curly: 2 */\n```\n\n----------------------------------------\n\nTITLE: JavaScript Examples of Incorrect Label Usage\nDESCRIPTION: Examples demonstrating incorrect usage of labels where they are declared but never referenced in breaks or continues.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-labels.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-labels: \"error\"*/\n\nA: var foo = 0;\n\nB: {\n    foo();\n}\n\nC:\nfor (let i = 0; i < 10; ++i) {\n    foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for no-useless-assignment Rule\nDESCRIPTION: These examples demonstrate various scenarios where the no-useless-assignment rule would flag unnecessary variable assignments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-assignment.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-useless-assignment: \"error\" */\n\nfunction fn1() {\n    let v = 'used';\n    doSomething(v);\n    v = 'unused';\n}\n\nfunction fn2() {\n    let v = 'used';\n    if (condition) {\n        v = 'unused';\n        return\n    }\n    doSomething(v);\n}\n\nfunction fn3() {\n    let v = 'used';\n    if (condition) {\n        doSomething(v);\n    } else {\n        v = 'unused';\n    }\n}\n\nfunction fn4() {\n    let v = 'unused';\n    if (condition) {\n        v = 'used';\n        doSomething(v);\n        return\n    }\n}\n\nfunction fn5() {\n    let v = 'used';\n    if (condition) {\n        let v = 'used';\n        console.log(v);\n        v = 'unused';\n    }\n    console.log(v);\n}\n```\n\n----------------------------------------\n\nTITLE: Using consistent-as-needed Option with object-shorthand Rule\nDESCRIPTION: Shows an example of incorrect code with the consistent-as-needed option, which ensures all shorthand is used whenever possible.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: [2, \"consistent-as-needed\"]*/\n\nconst foo = {\n    a: a,\n    b: b,\n};\n```\n\n----------------------------------------\n\nTITLE: Special cases where computed properties are necessary in JavaScript\nDESCRIPTION: Examples of valid computed property usage with special property names like __proto__, constructor, and prototype which might require computed notation for specific behavior.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-computed-key.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-computed-key: \"error\"*/\n\nconst c = {\n    \"__proto__\": foo, // defines object's prototype\n\n    [\"__proto__\"]: bar // defines a property named \"__proto__\"\n};\n\nclass Foo {\n    [\"constructor\"]; // instance field named \"constructor\"\n\n    \"constructor\"() {} // the constructor of this class\n\n    [\"constructor\"]() {} // method named \"constructor\"\n\n    static [\"constructor\"]; // static field named \"constructor\"\n\n    static [\"prototype\"]; // runtime error, it would be a parsing error without `[]`\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Disallowed Arguments.callee Usage\nDESCRIPTION: Example showing incorrect usage of arguments.callee which is prohibited by the no-caller rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-caller.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n    const callee = arguments.callee;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with prefer-double Option\nDESCRIPTION: Example of incorrect code when using the prefer-double option, showing usage of single quotes when double quotes are required.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/jsx-quotes.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/*eslint jsx-quotes: [\"error\", \"prefer-double\"]*/\n\n<a b='c' />;\n```\n\n----------------------------------------\n\nTITLE: Correct Example for Required Blank Lines After Directives\nDESCRIPTION: This example demonstrates correct code with proper blank line spacing after directive prologues. The code includes a blank line after the directives section before other code begins.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"directive\", next: \"*\" },\n    { blankLine: \"any\",    prev: \"directive\", next: \"directive\" }\n]*/\n\n\"use strict\";\n\"use asm\";\n\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Switch Statements According to default-case Rule\nDESCRIPTION: These snippets demonstrate correct usage according to the default-case rule. They show a switch with a default case, and switches without default cases but with appropriate comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-case.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint default-case: \"error\"*/\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n\n    default:\n        /* code */\n        break;\n}\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n\n    // no default\n}\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n\n    // No Default\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for 'always' Option\nDESCRIPTION: Examples of code that comply with the template-curly-spacing rule when configured with the 'always' option, showing the required spaces inside curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-curly-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint template-curly-spacing: [\"error\", \"always\"]*/\n\n`hello, ${ people.name }!`;\n\n`hello, ${\n    people.name\n}!`;\n```\n\n----------------------------------------\n\nTITLE: Allowed Indentation Tabs in JavaScript\nDESCRIPTION: Example showing correct usage when allowIndentationTabs option is enabled, allowing tabs for indentation purposes only.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-tabs.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-tabs: [\"error\", { allowIndentationTabs: true }] */\n\nfunction test() {\n\tdoSomething();\n}\n\n\t// comment with leading indentation tab\n```\n\n----------------------------------------\n\nTITLE: Using methodsIgnorePattern Option with object-shorthand Rule\nDESCRIPTION: Demonstrates how to use the methodsIgnorePattern option to exclude methods matching a specific regex pattern from being enforced.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-shorthand: [\"error\", \"always\", { \"methodsIgnorePattern\": \"^bar$\" }]*/\n\nconst foo = {\n    bar: function() {}\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Trailing Commas with 'always' Option\nDESCRIPTION: These JavaScript snippets show correct usage of objects and arrays with trailing commas when the 'comma-dangle' rule is set to 'always'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n},);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Windows Line Endings in JavaScript\nDESCRIPTION: Example of correct code for the 'linebreak-style' rule with the 'windows' option. It demonstrates proper use of CRLF line endings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/linebreak-style.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint linebreak-style: [\"error\", \"windows\"]*/ // \\r\\n\n// \\r\\n\nvar a = 'a', // \\r\\n\n    b = 'b'; // \\r\\n\n// \\r\\n\nfunction foo(params) { // \\r\\n\n    // do stuff \\r\\n\n} // \\r\\n\n```\n\n----------------------------------------\n\nTITLE: Correct comma spacing examples with default options\nDESCRIPTION: Examples of code that complies with the default comma-spacing rule configuration, showing proper spacing after commas but not before them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n\nvar foo = 1, bar = 2\n    , baz = 3;\nvar arr = [1, 2];\nvar arr = [1,, 3]\nvar obj = {\"foo\": \"bar\", \"baz\": \"qur\"};\nfoo(a, b);\nnew Foo(a, b);\nfunction qur(a, b){}\na, b\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Unused Inline Configs\nDESCRIPTION: Example showing how to report unused inline configuration directives with error severity\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx eslint --report-unused-inline-configs error file.js\n```\n\n----------------------------------------\n\nTITLE: Restricting Specific Named Imports Within Patterns\nDESCRIPTION: Configuration that restricts specific named imports from modules matching a pattern using the importNames option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"group\": [\"utils/*\"],\n      \"importNames\": [\"isEmpty\"],\n      \"message\": \"Use 'isEmpty' from lodash instead.\"\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example for Required Blank Lines After Directives\nDESCRIPTION: This example shows incorrect code that violates the rule requiring blank lines after directive prologues. The code is missing a blank line between the 'use strict' directive and the following statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"directive\", next: \"*\" },\n    { blankLine: \"any\",    prev: \"directive\", next: \"directive\" }\n]*/\n\n\"use strict\";\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Configuring allowImportNamePattern Option\nDESCRIPTION: JSON configuration example showing how to allow only specific import names using the allowImportNamePattern option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"group\": [\"import-foo/*\"],\n      \"allowImportNamePattern\": \"^foo\",\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Trailing Commas with 'always' Option\nDESCRIPTION: These JavaScript snippets demonstrate incorrect usage when trailing commas are required but not present, with the 'comma-dangle' rule set to 'always'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript code examples that satisfy the no-labels rule\nDESCRIPTION: Examples of code patterns that comply with the no-labels rule, including using label as an object property and using break/continue without labels.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-labels.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-labels: \"error\"*/\n\nconst f = {\n    label: \"foo\"\n};\n\nwhile (true) {\n    break;\n}\n\nwhile (true) {\n    continue;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Never Option Example - JavaScript\nDESCRIPTION: Example of code that violates the 'never' initialization rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint init-declarations: [\"error\", \"never\"]*/\n\nfunction foo() {\n    var bar = 1;\n    let baz = 2;\n\n    for (let i = 0; i < 1; i++) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Negation in Pattern-Based Import Restrictions\nDESCRIPTION: Configuration that restricts imports using gitignore-style patterns with negation to re-include specific modules. Order matters for negated patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [\"import1/private/*\", \"import2/*\", \"!import2/good\"]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in YAML Format\nDESCRIPTION: Example of how to configure ESLint plugins in a YAML configuration file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins-deprecated.md#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nplugins:\n    - plugin1\n    - eslint-plugin-plugin2\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Spacing Examples\nDESCRIPTION: Examples of function declarations that violate the rule. Shows incorrect spacing for the default 'never' option and for the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-after-function-name.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo (x) {\n    // ...\n}\n\nvar x = function named (x) {};\n\n// When [\"error\", \"always\"]\nfunction bar(x) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Additional Correct Loop Usage Examples for no-unreachable-loop\nDESCRIPTION: These examples show loops that are considered correct by the no-unreachable-loop rule, even though they may only execute once. The rule does not check loop conditions, only the loop body.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable-loop.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unreachable-loop: \"error\"*/\n\ndo {\n    doSomething();\n} while (false)\n\nfor (let i = 0; i < 1; i++) {\n    doSomething(i);\n}\n\nfor (const a of [1]) {\n    doSomething(a);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Unix Line Endings in JavaScript\nDESCRIPTION: Example of incorrect code for the 'linebreak-style' rule with the default 'unix' option. It shows a line ending with CRLF instead of LF.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/linebreak-style.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint linebreak-style: [\"error\", \"unix\"]*/\n\nvar a = 'a'; // \\r\\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unicode Flag Benefits in RegExp\nDESCRIPTION: Shows how the u flag enables correct handling of UTF-16 surrogate pairs in regular expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-unicode-regexp.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/^[👍]$/.test(\"👍\") //→ false\n/^[👍]$/u.test(\"👍\") //→ true\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with 'always' Option\nDESCRIPTION: Examples of code that violates the one-var rule when configured with the 'always' option, which requires all variables to be declared in a single declaration per scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", \"always\"]*/\n\nfunction foo1() {\n    var bar;\n    var baz;\n    let qux;\n    let norf;\n}\n\nfunction foo2(){\n    const bar = false;\n    const baz = true;\n    let qux;\n    let norf;\n}\n\nfunction foo3() {\n    var bar;\n\n    if (baz) {\n        var qux = true;\n    }\n}\n\nclass C {\n    static {\n        var foo;\n        var bar;\n    }\n\n    static {\n        var foo;\n        if (bar) {\n            var baz = true;\n        }\n    }\n\n    static {\n        let foo;\n        let bar;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples with Default Option\nDESCRIPTION: Shows invalid ways of using the designated 'that' alias, including incorrect initialization and assignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-this.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nlet that = 42;\n\nlet self = this;\n\nthat = 42;\n\nself = this;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'object' Option (JavaScript)\nDESCRIPTION: This snippet shows correct code examples when the 'dot-location' rule is set to the 'object' option. The dot is placed on the same line as the object or immediately after it.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-location.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint dot-location: [\"error\", \"object\"]*/\n\nvar foo = object.\nproperty;\n\nvar bar = (\n    object\n).\nproperty;\n\nvar baz = object.property;\n```\n\n----------------------------------------\n\nTITLE: Correct usage of function-paren-newline with 'never' option (JavaScript)\nDESCRIPTION: Examples of code that comply with the 'function-paren-newline' rule when set to 'never'. Shows functions and arrow functions without line breaks inside parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-paren-newline.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/* eslint function-paren-newline: [\"error\", \"never\"] */\n\nfunction foo(bar, baz) {}\n\nfunction qux(bar,\n             baz) {}\n\nvar foobar = function(bar, baz) {};\n\nvar foobar = (bar, baz) => {};\n\nfoo(bar, baz);\n\nfoo(bar,\n  baz);\n```\n\n----------------------------------------\n\nTITLE: Allowing Specific Named Imports Within Patterns\nDESCRIPTION: Configuration that allows only specific named imports from modules matching a pattern using the allowImportNames option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"group\": [\"utils/*\"],\n      \"allowImportNames\": [\"isEmpty\"],\n      \"message\": \"Please use only 'isEmpty' from utils.\"\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with the ternaryOperandBinaryExpressions Exception\nDESCRIPTION: Examples showing valid code when the 'ternaryOperandBinaryExpressions' option is set to false, allowing extra parentheses around binary expressions in ternary operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { \"ternaryOperandBinaryExpressions\": false }] */\n\n(a && b) ? foo : bar;\n\n(a - b > a) ? foo : bar;\n\nfoo ? (bar || baz) : qux;\n\nfoo ? bar : (baz || qux);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of JavaScript Labels\nDESCRIPTION: This example shows correct code that complies with the no-empty-label rule. The label 'labeled:' is properly used to mark a for loop, which is an iteration statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-label.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-label: \"error\"*/\n\nlabeled:\nfor (var i=10; i; i--) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with ignorePattern Option\nDESCRIPTION: Example showing how to configure the rule with an ignorePattern to exclude specific types of comments from the rule enforcement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inline-comments.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inline-comments: [\"error\", { \"ignorePattern\": \"webpackChunkName:\\\\s.+\" }]*/\n\nimport(/* webpackChunkName: \"my-chunk-name\" */ './locale/en');\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Assignment - Class Expression\nDESCRIPTION: Demonstrates invalid reassignment in a named class expression context.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-class-assign.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-class-assign: \"error\"*/\n\nlet A = class A {\n    b() {\n        A = 0;\n        // `let A` is shadowed by the class name.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct examples for require-await rule\nDESCRIPTION: Examples of code that satisfy the require-await rule, including async functions with await, regular functions, and empty async functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-await.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint require-await: \"error\"*/\n\nasync function foo() {\n    await doSomething();\n}\n\nbar(async () => {\n    await doSomething();\n});\n\nfunction baz() {\n    doSomething();\n}\n\nbar(() => {\n    doSomething();\n});\n\n// Allow empty functions.\nasync function noop() {}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples with Default Option\nDESCRIPTION: Demonstrates valid ways of using the designated 'that' alias, showing proper initialization and assignment patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-this.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nlet that = this;\n\nconst self = 42;\n\nlet foo;\n\nthat = this;\n\nfoo.bar = this;\n```\n\n----------------------------------------\n\nTITLE: Basic Rule Configuration with Single Restriction\nDESCRIPTION: Configures the rule to disallow access to a single property on a specific object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-properties.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"object\": \"disallowedObjectName\",\n            \"property\": \"disallowedPropertyName\"\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Module-Scoped Declarations - JavaScript\nDESCRIPTION: Example of correct code in module context where declarations are automatically scoped to the module.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-globals.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-globals: \"error\"*/\n\n// foo and bar are local to module\nvar foo = 1;\nfunction bar() {}\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript code examples for the allowLoop option\nDESCRIPTION: Example of labeled statements with loop that is allowed when the allowLoop option is set to true. This configuration permits using labels with loop statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-labels.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-labels: [\"error\", { \"allowLoop\": true }]*/\n\nlabel:\n    while (true) {\n        break label;\n    }\n```\n\n----------------------------------------\n\nTITLE: Exception Cases for Negation Operators in JavaScript\nDESCRIPTION: Examples of allowed exception cases where explicit parentheses wrapping of negation is permitted.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-negation.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-negation: \"error\"*/\n\nif ((!foo) in object) {\n    // allowed, because the negation is explicitly wrapped in parentheses\n    // it is equivalent to (foo ? \"false\" : \"true\") in object\n    // this is allowed as an exception for rare situations when that is the intended meaning\n}\n\nif((\"\" + !foo) in object) {\n    // you can also make the intention more explicit, with type conversion\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deeply Nested Callbacks in JavaScript\nDESCRIPTION: This snippet shows an example of deeply nested callbacks, which the max-nested-callbacks rule aims to prevent. It illustrates the potential readability issues that can arise from excessive nesting.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-nested-callbacks.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfoo(function () {\n    bar(function () {\n        baz(function() {\n            qux(function () {\n\n            });\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'single' Quote Option\nDESCRIPTION: Shows code examples that comply with the 'single' quotes rule configuration, including allowed exceptions for backticks with substitutions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"single\"]*/\n\nvar single = 'single';\nvar backtick = `back${x}tick`; // backticks are allowed due to substitution\n```\n\n----------------------------------------\n\nTITLE: Correct Logical Operations\nDESCRIPTION: Examples of valid code that uses logical operators instead of bitwise operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-bitwise.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-bitwise: \"error\"*/\n\nlet x = y || z;\n\nconst x1 = y && z;\n\nconst x2 = y > z;\n\nconst x3 = y < z;\n\nx += y;\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of function-paren-newline with 'always' option (JavaScript)\nDESCRIPTION: Examples of code that violate the 'function-paren-newline' rule when set to 'always'. Shows functions and arrow functions without line breaks inside parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-paren-newline.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/* eslint function-paren-newline: [\"error\", \"always\"] */\n\nfunction foo(bar, baz) {}\n\nvar qux = function(bar, baz) {};\n\nvar qux = (bar, baz) => {};\n\nfoo(bar, baz);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Default Max Depth\nDESCRIPTION: Example showing code that complies with the default maximum nesting depth of 4 levels.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-depth.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-depth: [\"error\", 4]*/\n\nfunction foo() {\n    for (;;) { // Nested 1 deep\n        while (true) { // Nested 2 deep\n            if (true) { // Nested 3 deep\n                if (true) { // Nested 4 deep\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of parseInt Functions\nDESCRIPTION: Examples of code patterns that this rule flags as incorrect, showing various uses of parseInt() and Number.parseInt() with binary, octal, and hexadecimal conversions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-numeric-literals.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-numeric-literals: \"error\"*/\n\nparseInt(\"111110111\", 2) === 503;\nparseInt(`111110111`, 2) === 503;\nparseInt(\"767\", 8) === 503;\nparseInt(\"1F7\", 16) === 503;\nNumber.parseInt(\"111110111\", 2) === 503;\nNumber.parseInt(\"767\", 8) === 503;\nNumber.parseInt(\"1F7\", 16) === 503;\n```\n\n----------------------------------------\n\nTITLE: ESLint Stylish Formatter Output Example\nDESCRIPTION: Example of the Stylish formatter output from ESLint, which is the default human-readable format. It presents linting results in a concise, color-coded format showing files, line numbers, error types, and rule identifiers.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\n  1:10  error    'addOne' is defined but never used            no-unused-vars\n  2:9   error    Use the isNaN function to compare with NaN    use-isnan\n  3:16  error    Unexpected space before unary operator '++'   space-unary-ops\n  3:20  warning  Missing semicolon                             semi\n  4:12  warning  Unnecessary 'else' after 'return'             no-else-return\n  5:1   warning  Expected indentation of 8 spaces but found 6  indent\n  5:7   error    Function 'addOne' expected a return value     consistent-return\n  5:13  warning  Missing semicolon                             semi\n\n✖ 8 problems (4 errors, 4 warnings)\n  1 error and 4 warnings potentially fixable with the `--fix` option.\n\n```\n\n----------------------------------------\n\nTITLE: Correct Arrow Spacing Examples with Mixed Spacing Configuration\nDESCRIPTION: Examples of code that follows the arrow-spacing rule when configured to have no space before but require space after the arrow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-spacing.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n\n()=> {};\n(a)=> {};\n()=> {'\\n'};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'always' Option\nDESCRIPTION: Examples of correct ternary expression formatting when using the 'always' rule option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-ternary.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint multiline-ternary: [\"error\", \"always\"]*/\n\nfoo > bar ?\n    value1 :\n    value2;\n\nfoo > bar ?\n    (baz > qux ?\n        value1 :\n        value2) :\n    value3;\n\nfoo > bar\n    ? (baz > qux\n        ? value1\n        : value2)\n    : value3;\n```\n\n----------------------------------------\n\nTITLE: Correct Examples of String Handling in JavaScript\nDESCRIPTION: This code snippet demonstrates correct alternatives to multiline strings: using a single line string or concatenating multiple strings with the plus operator.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-str.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-str: \"error\"*/\n\nconst x = \"some very long text\";\n\nconst y = \"some very \" +\n        \"long text\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with Mixed Consecutive Options\nDESCRIPTION: Examples showing code that violates the one-var rule when configured with mixed consecutive options for different variable types.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { var: \"never\", let: \"consecutive\", const: \"consecutive\" }]*/\n\nfunction foo1() {\n    let a,\n        b;\n    let c;\n\n    var d,\n        e;\n}\n\nfunction foo2() {\n    const a = 1,\n        b = 2;\n    const c = 3;\n\n    var d,\n        e;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Property Modification Examples with props:true\nDESCRIPTION: Examples showing disallowed property modifications when props option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-param-reassign.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-param-reassign: [\"error\", { \"props\": true }]*/\n\nconst foo = function(bar) {\n    bar.prop = \"value\";\n}\n\nconst foo1 = function(bar) {\n    delete bar.aaa;\n}\n\nconst foo2 = function(bar) {\n    bar.aaa++;\n}\n\nconst foo3 = function(bar) {\n    for (bar.aaa in baz) {}\n}\n\nconst foo4 = function(bar) {\n    for (bar.aaa of baz) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Sorting Examples in JavaScript\nDESCRIPTION: Examples showing incorrect variable declaration ordering that violate the sort-vars rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-vars.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-vars: \"error\"*/\n\nlet b, a;\n\nlet c, D, e;\n\nlet f, F;\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for 'multiline: true' option\nDESCRIPTION: Examples of code that would trigger the object-curly-newline rule when configured with the multiline option, which requires line breaks if there are line breaks inside properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", { \"multiline\": true }]*/\n\nlet a = {\n};\nlet b = {\n    foo: 1\n};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {foo: 1,\n    bar: 2};\nlet e = {foo: function() {\n    dosomething();\n}};\n\nlet {\n} = obj;\nlet {\n    f\n} = obj;\nlet {\n    g, h\n} = obj;\nlet {i,\n    j} = obj;\nlet {k = function() {\n    dosomething();\n}} = obj;\n```\n\n----------------------------------------\n\nTITLE: Correct code examples for 'minProperties: 2' option\nDESCRIPTION: Examples of code that correctly follows the object-curly-newline rule when configured with the minProperties option, showing proper line break formatting based on property count.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", { \"minProperties\": 2 }]*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {foo: function() {\n    dosomething();\n}};\n\nlet {} = obj;\nlet {f} = obj;\nlet {\n    g, h\n} = obj;\nlet {\n    i,\n    j\n} = obj;\nlet {k = function() {\n    dosomething();\n}} = obj;\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Usage Examples\nDESCRIPTION: Examples of JavaScript code that comply with the no-restricted-syntax rule restrictions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-syntax.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-restricted-syntax: [\"error\", \"FunctionExpression\", \"WithStatement\", \"BinaryExpression[operator='in']\"] */\n\nme.dontMess();\n\nfunction doSomething() {};\n\nfoo instanceof bar;\n```\n\n----------------------------------------\n\nTITLE: Correct BigInt Usage with Ignored Value\nDESCRIPTION: Example of correct code using ignored BigInt value\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-magic-numbers.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-magic-numbers: [\"error\", { \"ignore\": [\"1n\"] }]*/\n\nfoo(1n);\n```\n\n----------------------------------------\n\nTITLE: Correct code examples for no-whitespace-before-property rule in JavaScript\nDESCRIPTION: Examples of code that comply with the no-whitespace-before-property rule, showing proper whitespace usage in property access.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-whitespace-before-property.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-whitespace-before-property: \"error\"*/\n\nfoo.bar\n\nfoo[bar]\n\nfoo[ bar ]\n\nfoo.bar.baz\n\nfoo\n  .bar().baz()\n\nfoo\n  .bar()\n  .baz()\n\nfoo.\n  bar().\n  baz()\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Line Endings in JavaScript Files\nDESCRIPTION: Example of a .gitattributes file configuration to prevent Git from converting line endings in .js files. This ensures consistent line endings across different platforms.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/linebreak-style.md#2025-04-14_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n*.js text eol=lf\n```\n\n----------------------------------------\n\nTITLE: Correct examples for no-misleading-character-class rule\nDESCRIPTION: Examples of code patterns that comply with the no-misleading-character-class rule, showing proper uses of single code point characters or valid syntax for RegExp character classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-misleading-character-class.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-misleading-character-class: error */\n\n/^[abc]$/;\n/^[👍]$/u;\n/^[\\q{👶🏻}]$/v;\nnew RegExp(\"^[]$\");\nnew RegExp(`[Á-${z}]`, \"u\"); // variable pattern\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of arrow functions with 'as-needed' option (JavaScript)\nDESCRIPTION: Illustrates incorrect usage of arrow functions when the rule is set to 'as-needed'. Braces and 'return' keyword are unnecessary for simple expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/*eslint arrow-body-style: [\"error\", \"as-needed\"]*/\n\nconst foo = () => {\n    return 0;\n};\n\nconst bar = () => {\n    return {\n       bar: {\n            foo: 1,\n            bar: 2,\n        }\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Directive Usage Examples in JavaScript\nDESCRIPTION: Examples showing how strict mode directives can be applied at file and function scope levels.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-directive.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Strict mode is invoked for the entire script\n\"use strict\";\n\nvar foo;\n\nfunction bar() {\n  var baz;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo;\n\nfunction bar() {\n  // Strict mode is only invoked within this function\n  \"use strict\";\n\n  var baz;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with the returnAssign Exception\nDESCRIPTION: Examples showing valid code when the 'returnAssign' option is set to false, allowing extra parentheses around assignments in return statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { \"returnAssign\": false }] */\n\nfunction a1(b) {\n  return (b = 1);\n}\n\nfunction a2(b) {\n  return b ? (c = d) : (c = e);\n}\n\nb => (b = 1);\n\nb => b ? (c = d) : (c = e);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Combined importNames and importNamePattern\nDESCRIPTION: Example demonstrating how ESLint handles violations when combining both importNames and importNamePattern restrictions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_35\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"foo/*\"],\n    importNames: [\"bar\"],\n    importNamePattern: '^baz',\n}]}]*/\n\nimport { bar, bazQux } from 'foo/quux';\n```\n\n----------------------------------------\n\nTITLE: Basic Warning Comments Example in JavaScript\nDESCRIPTION: Shows examples of warning comments that would be flagged by the rule, including TODO and FIXME comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-warning-comments.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// TODO: do something\n// FIXME: this is not a good idea\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Reflect.apply in JavaScript\nDESCRIPTION: Demonstrates the correct way to use Reflect.apply as per the prefer-reflect rule, replacing Function.prototype.apply and Function.prototype.call.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-reflect.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint prefer-reflect: \"error\"*/\n\nReflect.apply(myFunction, undefined, args);\nReflect.apply(myFunction, null, args);\nReflect.apply(obj.myMethod, obj, args);\nReflect.apply(obj.myMethod, other, args);\nReflect.apply(myFunction, undefined, [arg]);\nReflect.apply(myFunction, null, [arg]);\nReflect.apply(obj.myMethod, obj, [arg]);\nReflect.apply(obj.myMethod, other, [arg]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Card with URL in HTML-like Shortcode\nDESCRIPTION: This snippet demonstrates how to use the 'link' shortcode to render a link as a card. The shortcode takes a single parameter, which is the URL of the page to be scraped for metadata and displayed as a card.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/link-card.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{ % link \"https://thesiteurl.com\" % }\n```\n\n----------------------------------------\n\nTITLE: Allowlisting a File in a Dot-Folder (Text)\nDESCRIPTION: Configure .eslintignore to selectively lint a specific file in a dot-folder while ignoring other files. This example allowlists .build/test.js while denylisting other files in the .build folder.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore-deprecated.md#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Allowlist 'test.js' in the '.build' folder\n# But do not allow anything else in the '.build' folder to be linted\n!.build\n.build/*\n!.build/test.js\n```\n\n----------------------------------------\n\nTITLE: Configuring sort-keys Rule Options in JSON\nDESCRIPTION: JSON configuration for the sort-keys rule showing the available options. The options include sort direction, case sensitivity, natural sorting, and minimum key threshold.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"sort-keys\": [\"error\", \"asc\", {\"caseSensitive\": true, \"natural\": false, \"minKeys\": 2}]\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of incorrect code for 'never' option in JavaScript\nDESCRIPTION: Demonstrates various cases of incorrect spacing inside brackets and braces when the rule is set to 'never'. These examples would trigger the ESLint rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-brackets.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfoo[ 'bar' ];\nfoo['bar' ];\n\nvar arr = [ 'foo', 'bar' ];\nvar arr = ['foo', 'bar' ];\nvar arr = [ ['foo'], 'bar'];\nvar arr = [[ 'foo' ], 'bar'];\nvar arr = ['foo',\n  'bar'\n];\n\nvar obj = { 'foo': 'bar' };\nvar obj = {'foo': 'bar' };\nvar obj = { baz: {'foo': 'qux'}, bar};\nvar obj = {baz: { 'foo': 'qux' }, bar};\n```\n\n----------------------------------------\n\nTITLE: Array Bracket Newline Rule - Never Option Examples\nDESCRIPTION: Examples demonstrating incorrect and correct usage when the rule is configured with the 'never' option, which disallows line breaks inside brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-newline.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", \"never\"]*/\n\nconst a = [\n];\nconst b = [\n    1\n];\nconst c = [\n    1, 2\n];\nconst d = [\n    1,\n    2\n];\nconst e = [\n    function foo() {\n        dosomething();\n    }\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", \"never\"]*/\n\nconst a = [];\nconst b = [1];\nconst c = [1, 2];\nconst d = [1,\n    2];\nconst e = [function foo() {\n    dosomething();\n}];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with treatUndefinedAsUnspecified Option Enabled\nDESCRIPTION: Examples showing incorrect usage when treatUndefinedAsUnspecified is true, mixing undefined and explicit returns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-return.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring afterColon spacing in JavaScript objects\nDESCRIPTION: Examples showing incorrect and correct spacing after colons in object literals with afterColon:true option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/key-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint key-spacing: [\"error\", { \"afterColon\": true }]*/\n\nvar obj = { \"foo\":42 };\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint key-spacing: [\"error\", { \"afterColon\": true }]*/\n\nvar obj = { \"foo\": 42 };\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for no-multi-assign Rule with ignoreNonDeclaration Option\nDESCRIPTION: These examples show code that still violates the 'no-multi-assign' rule even when the 'ignoreNonDeclaration' option is set to true. It illustrates that chained assignments in declarations and class fields are still not allowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-assign.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-assign: [\"error\", { \"ignoreNonDeclaration\": true }]*/\n\nlet a = b = \"baz\";\n\nconst foo = bar = 1;\n\nclass Foo {\n    a = b = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Logical Assignment Operators with 'never' Option in JavaScript\nDESCRIPTION: Examples of code that comply with the 'logical-assignment-operators' rule when set to 'never'. These expressions use the traditional assignment syntax instead of logical assignment operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/logical-assignment-operators.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint logical-assignment-operators: [\"error\", \"never\"]*/\n\na = a || b\na = a && b\na = a ?? b\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Yoda Condition in JavaScript\nDESCRIPTION: This snippet shows an example of a Yoda condition, where the literal value comes before the variable in a comparison.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yoda.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (\"red\" === color) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring template-tag-spacing Rule in ESLint\nDESCRIPTION: This JSON snippet shows how to configure the 'template-tag-spacing' rule in ESLint. The rule can be set to 'never' (default) or 'always' to enforce spacing preferences.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-tag-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"template-tag-spacing\": [\"error\", \"never\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Import With Case-Sensitive Pattern\nDESCRIPTION: Example of code that passes the rule with case-sensitive matching enabled, where the import path doesn't match the case specified in the pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"foo[A-Z]*\"],\n    caseSensitive: true\n}]}]*/\n\nimport pick from 'food';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Bracket Spacing with 'never' Option in JavaScript\nDESCRIPTION: Examples of code that would be flagged as incorrect when the rule is set to 'never', demonstrating various ways spaces might be incorrectly used inside array brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-spacing: [\"error\", \"never\"]*/\n\nvar arr = [ 'foo', 'bar' ];\nvar arr = ['foo', 'bar' ];\nvar arr = [ ['foo'], 'bar'];\nvar arr = [[ 'foo' ], 'bar'];\nvar arr = [ 'foo',\n  'bar'\n];\nvar [ x, y ] = z;\nvar [ x,y ] = z;\nvar [ x, ...y ] = z;\nvar [ ,,x, ] = z;\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Label Example in JavaScript\nDESCRIPTION: An example showing a labeled loop where the label is unnecessary because there are no nested loops or switches, making the label redundant.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-label.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nA: while (a) {\n    break A;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of 'this' in TypeScript\nDESCRIPTION: Examples of TypeScript code that comply with the 'no-invalid-this' rule. These snippets demonstrate valid uses of 'this' with TypeScript-specific features like interface types and class fields.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-this.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint no-invalid-this: \"error\"*/\n\ninterface SomeType {\n    prop: string;\n}\n\nfunction foo(this: SomeType) {\n    this.prop;\n}\n\nclass A {\n    a = 5;\n    b = this.a;\n    accessor c = this.a;\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Cyclomatic Complexity Example with Switch Statement\nDESCRIPTION: Demonstrates the modified cyclomatic complexity variant where a switch statement only increases complexity by 1 regardless of case count.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/complexity.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint complexity: [\"error\", {\"max\": 3, \"variant\": \"modified\"}]*/\n\nfunction a(x) {     // initial modified complexity is 1\n    switch (x) {    // switch statement increases modified complexity by 1\n        case 1:\n            1;\n            break;\n        case 2:\n            2;\n            break;\n        case 3:\n            if (x === 'foo') {  // if block increases modified complexity by 1\n                3;\n            }\n            break;\n        default:\n            4;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct examples with the no-multi-spaces rule enabled\nDESCRIPTION: Examples of code that comply with the no-multi-spaces rule, using single spaces consistently.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-spaces: \"error\"*/\n\nvar a = 1;\n\nif(foo === \"bar\") {}\n\na << b\n\nvar arr = [1, 2];\n\na ? b: c\n```\n\n----------------------------------------\n\nTITLE: Boolean Function Example\nDESCRIPTION: Shows correct usage of built-in Boolean constructor function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-cap.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-cap: \"error\"*/\n\nfunction foo(arg) {\n    return Boolean(arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring no-restricted-globals with custom messages in ESLint\nDESCRIPTION: Advanced configuration example that restricts globals with custom error messages using an object format, allowing for more descriptive feedback when the rule is violated.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-globals.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-restricted-globals\": [\n            \"error\",\n            {\n                \"name\": \"event\",\n                \"message\": \"Use local parameter instead.\"\n            },\n            {\n                \"name\": \"fdescribe\",\n                \"message\": \"Do not commit fdescribe. Use describe instead.\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Allow Comments at Block End (JavaScript)\nDESCRIPTION: Examples of correct code that allow comments at the end of blocks when using the 'allowBlockEnd' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true, \"allowBlockEnd\": true }]*/\n\nfunction foo(){\n    var day = \"great\"\n    return day;\n    // what a great and wonderful day\n}\n\nif (bar) {\n    foo();\n    // what a great and wonderful day\n}\n\nclass C {\n\n    method() {\n        foo();\n        // what a great and wonderful day\n    }\n\n    static {\n        foo();\n        // what a great and wonderful day\n    }\n\n    // what a great and wonderful day\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Magic Numbers Example in JavaScript\nDESCRIPTION: Example showing problematic usage of magic numbers in date calculation\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-magic-numbers.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = Date.now(),\n    inOneHour = now + (60 * 60 * 1000);\n```\n\n----------------------------------------\n\nTITLE: Basic Empty Function Example\nDESCRIPTION: Example showing a properly documented empty function that passes the rule check by including a comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-function.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n    // do nothing.\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Incorrect Usage Examples\nDESCRIPTION: Examples of incorrect usage with the default ignoreChainWithDepth option set to 2.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-per-chained-call.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint newline-per-chained-call: [\"error\", { \"ignoreChainWithDepth\": 2 }]*/\n\n_.chain({}).map(foo).filter(bar).value();\n\n// Or\n_.chain({}).map(foo).filter(bar);\n\n// Or\n_\n  .chain({}).map(foo)\n  .filter(bar);\n\n// Or\nobj.method().method2().method3();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Imports With Regex Pattern\nDESCRIPTION: Example of code that violates the rule by importing modules that match a regex pattern, which allows for more complex matching than glob patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    regex: \"@app/(?!(api/enums$)).*\",\n}]}]*/\n\nimport Foo from '@app/api';\nimport Bar from '@app/api/bar';\nimport Baz from '@app/api/baz';\nimport Bux from '@app/api/enums/foo';\n```\n\n----------------------------------------\n\nTITLE: Ignore Comments Configuration\nDESCRIPTION: Shows how ignoreComments option allows comments to be positioned independently of the normal indentation rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 4, { \"ignoreComments\": true }] */\n\nif (foo) {\n    doSomething();\n\n// comment intentionally de-indented\n    doSomethingElse();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Arrow Spacing Examples with Default Configuration\nDESCRIPTION: Examples of code that violates the default arrow-spacing rule configuration (spaces required before and after the arrow).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-spacing: \"error\"*/\n\n()=> {};\n() =>{};\n(a)=> {};\n(a) =>{};\na =>a;\na=> a;\n()=> {'\\n'};\n() =>{'\\n'};\n```\n\n----------------------------------------\n\nTITLE: Flat Ternary Expressions - Default Configuration\nDESCRIPTION: Illustrates correct indentation for nested ternary expressions with flatTernaryExpressions: false, showing increased indentation for each level.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 4, { \"flatTernaryExpressions\": false }]*/\n\nvar a =\n    foo ? bar :\n        baz ? qux :\n            boop;\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'backtick' Quote Option\nDESCRIPTION: Shows code examples that comply with the 'backtick' quotes rule configuration, including exceptions for directives and property names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"backtick\"]*/\n\n\"use strict\"; // directives must use single or double quotes\nvar backtick = `backtick`;\nvar obj = { 'prop-name': `value` }; // backticks not allowed for property names\n```\n\n----------------------------------------\n\nTITLE: Using Additional Shareable ESLint Config in JSON\nDESCRIPTION: Demonstrates how to reference an additional shareable ESLint configuration from within a project's .eslintrc file, including syntax for both regular and scoped npm packages.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"myconfig/my-special-config\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"@scope/eslint-config/my-special-config\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Block Spacing with 'always' Option in JavaScript\nDESCRIPTION: Examples of incorrect code when using the 'always' option, which requires spaces inside blocks. These examples show missing spaces between opening/closing block tokens and adjacent tokens.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/block-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/*eslint block-spacing: \"error\"*/\n\nfunction foo() {return true;}\nif (foo) { bar = 0;}\nfunction baz() {let i = 0;\n    return i;\n}\n\nclass C {\n    static {this.bar = 0;}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Exceptions Configuration\nDESCRIPTION: Example of allowed native object extension when using the exceptions option for Object prototype\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extend-native.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-extend-native: [\"error\", { \"exceptions\": [\"Object\"] }]*/\n\nObject.prototype.a = \"a\";\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with skipRegExps Option\nDESCRIPTION: Examples of code that pass the no-irregular-whitespace rule when the skipRegExps option is enabled, allowing irregular whitespace inside regular expression literals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-irregular-whitespace.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-irregular-whitespace: [\"error\", { \"skipRegExps\": true }]*/\n\nfunction thing() {\n    return / <NBSP>regexp/;\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Relations Option Examples in JavaScript\nDESCRIPTION: Examples of incorrect usage when the enforceForOrderingRelations option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-negation.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-negation: [\"error\", { \"enforceForOrderingRelations\": true }]*/\n\nif (! a < b) {}\n\nwhile (! a > b) {}\n\nfoo = ! a <= b;\n\nfoo = ! a >= b;\n```\n\n----------------------------------------\n\nTITLE: Property Modification Examples with props:false\nDESCRIPTION: Examples showing allowed property modifications when props option is set to false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-param-reassign.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-param-reassign: [\"error\", { \"props\": false }]*/\n\nconst foo = function(bar) {\n    bar.prop = \"value\";\n}\n\nconst foo1 = function(bar) {\n    delete bar.aaa;\n}\n\nconst foo2 = function(bar) {\n    bar.aaa++;\n}\n\nconst foo3 = function(bar) {\n    for (bar.aaa in baz) {}\n}\n\nconst foo4 = function(bar) {\n    for (bar.aaa of baz) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with allowNamedExports Option Set to True in JavaScript\nDESCRIPTION: This snippet demonstrates incorrect usage patterns even when 'allowNamedExports' is set to true, as it still disallows certain export-related issues.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-use-before-define: [\"error\", { \"allowNamedExports\": true }]*/\n\nexport default a;\nconst a = 1;\n\nconst b = c;\nexport const c = 1;\n\nexport function foo() {\n    return d;\n}\nconst d = 1;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'always-multiline' Option\nDESCRIPTION: Examples of correct ternary expression formatting when using the 'always-multiline' rule option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-ternary.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint multiline-ternary: [\"error\", \"always-multiline\"]*/\n\nfoo > bar ? value1 : value2;\n\nfoo > bar ?\n    value1 :\n    value2;\n\nfoo > bar ?\n    (baz > qux ? value1 : value2) :\n    value3;\n\nfoo > bar ?\n    (baz > qux ?\n        value1 :\n        value2) :\n    value3;\n\nfoo > bar &&\n    bar > baz ?\n        value1 :\n        value2;\n\nfoo > bar\n    ? baz > qux\n        ? value1\n        : value2\n    : value3;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of debugger Statement in JavaScript\nDESCRIPTION: This snippet demonstrates incorrect code that violates the no-debugger rule by including a debugger statement in a function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-debugger.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-debugger: \"error\"*/\n\nfunction isTruthy(x) {\n    debugger;\n    return Boolean(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct implementation of padded-blocks with 'always' option in JavaScript\nDESCRIPTION: Examples of code that correctly follows the 'always' option requirements, showing properly padded blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", \"always\"]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    // comment\n    b();\n\n}\n\nclass C {\n\n    static {\n\n        a();\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of max-params Rule in JavaScript\nDESCRIPTION: These examples show functions that comply with the max-params rule when set to a maximum of 3 parameters. Both function declaration and arrow function syntax are demonstrated.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-params.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-params: [\"error\", 3]*/\n\nfunction foo1 (bar, baz, qux) {\n    doSomething();\n}\n\nlet foo2 = (bar, baz, qux) => {\n    doSomething();\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: one-var with initialized:never\nDESCRIPTION: An example showing correct variable declarations where initialized variables are declared separately, following the rule configuration requirements. Uninitialized variables are ignored in this configuration and can be declared together.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { \"initialized\": \"never\" }]*/\n\nfunction foo() {\n    var foo = true;\n    var bar = false;\n    var a, b, c; // Uninitialized variables are ignored\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Missing ESLint Plugin\nDESCRIPTION: Example error message shown when ESLint cannot locate a referenced plugin. The error indicates that the plugin was not found when loaded as a Node module and suggests reinstalling the plugin using npm.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/troubleshooting/couldnt-find-the-plugin.md#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nESLint couldn't find the plugin \"${pluginName}\".\n\n(The package \"${pluginName}\" was not found when loaded as a Node module from the directory \"${resolvePluginsRelativeTo}\".)\n\nIt's likely that the plugin isn't installed correctly. Try reinstalling by running the following:\n\n    npm install ${pluginName}@latest --save-dev\n\nThe plugin \"${pluginName}\" was referenced from the config file in \"${importerName}\".\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nested require() Example\nDESCRIPTION: Demonstrates an improper use of require() nested within a function condition.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/global-require.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code with Mixed Consecutive Options\nDESCRIPTION: Examples showing correct code with the one-var rule configured with mixed consecutive options for different variable types.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { var: \"never\", let: \"consecutive\", const: \"consecutive\" }]*/\n\nfunction foo1() {\n    let a,\n        b;\n\n    var d;\n    var e;\n\n    let f;\n}\n\nfunction foo2() {\n    const a = 1,\n          b = 2;\n\n    var c;\n    var d;\n\n    const e = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Import With allowImportNames\nDESCRIPTION: Example of code that passes the rule by importing only a named export that is explicitly allowed from a module matching the pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    allowImportNames: ['isEmpty'],\n    message: \"Please use only 'isEmpty' from utils.\"\n}]}]*/\n\nimport { isEmpty } from 'utils/collection-utils';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Block Spacing with 'never' Option in JavaScript\nDESCRIPTION: Examples of incorrect code when using the 'never' option, which disallows spaces inside blocks. These examples incorrectly include spaces between opening/closing block tokens and adjacent tokens.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/block-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/*eslint block-spacing: [\"error\", \"never\"]*/\n\nfunction foo() { return true; }\nif (foo) { bar = 0;}\n\nclass C {\n    static { this.bar = 0; }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Variable Declaration Example - JavaScript\nDESCRIPTION: Shows the difference between initialized and uninitialized variable declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet foo = 1;\nlet bar;\n\nbar = 2;\n```\n\n----------------------------------------\n\nTITLE: Configuring module paths restrictions in ESLint (JSON)\nDESCRIPTION: Configuration that restricts module paths using the 'paths' property in an object format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-modules\": [\"error\", { \"paths\": [\"foo-module\", \"bar-module\"] }]\n```\n\n----------------------------------------\n\nTITLE: Using exceptMethods Option - Incorrect Example\nDESCRIPTION: Demonstrates code that violates the rule when used without the 'exceptMethods' option, where a class method 'foo' doesn't use 'this'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint class-methods-use-this: \"error\"*/\n\nclass A {\n    foo() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Logical Assignment Operators with 'never' Option in JavaScript\nDESCRIPTION: Examples of code that violate the 'logical-assignment-operators' rule when set to 'never'. These expressions use the logical assignment operator syntax, which is not allowed with this option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/logical-assignment-operators.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint logical-assignment-operators: [\"error\", \"never\"]*/\n\na ||= b\na &&= b\na ??= b\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'always' Option\nDESCRIPTION: Examples of code that would be considered correct when using the 'always' option for the space-in-parens rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\"]*/\n\nfoo();\nfoo( );\n\nfoo( 'bar' );\n\nfoo( /* bar */ );\n\nvar foo = ( 1 + 2 ) * 3;\n( function () { return 'bar'; }() );\n```\n\n----------------------------------------\n\nTITLE: Always Option - Incorrect Examples\nDESCRIPTION: Demonstrates code patterns that violate the 'always' option which requires all function expressions to have names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-names.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-names: [\"error\", \"always\"]*/\n\nFoo.prototype.bar = function() {};\n\nconst cat = {\n  meow: function() {}\n}\n\n(function() {\n    // ...\n}())\n\nexport default function() {}\n```\n\n----------------------------------------\n\nTITLE: Disabling 'no-undef-init' Rule for Specific Line in JavaScript\nDESCRIPTION: This snippet shows how to disable the 'no-undef-init' rule for a specific line when initialization to undefined is necessary in a loop context.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef-init.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n----------------------------------------\n\nTITLE: Allowed Property Updates with Options\nDESCRIPTION: Example of property updates allowed when using the allowProperties option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function foo(obj) {\n    if (!obj.done) {\n        obj.something = await getSomething();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Named Import Within Pattern\nDESCRIPTION: Example of code that violates the rule by importing a specific named export that is restricted from a module matching the pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    importNames: ['isEmpty'],\n    message: \"Use 'isEmpty' from lodash instead.\"\n}]}]*/\n\nimport { isEmpty } from 'utils/collection-utils';\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples with 'beforeStatementContinuationChars: always' option\nDESCRIPTION: Examples of code that would be flagged when using 'never' with 'beforeStatementContinuationChars: always', which requires semicolons before continuation characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi: [\"error\", \"never\", { \"beforeStatementContinuationChars\": \"always\"}] */\nimport a from \"a\"\n\n(function() {\n    // ...\n})()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of ignoreClassWithStaticInitBlock Option in JavaScript\nDESCRIPTION: Demonstrates incorrect code when 'ignoreClassWithStaticInitBlock' is set to true. It shows classes with unused static properties and methods, as well as an unused variable in a static block.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-vars.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-vars: [\"error\", { \"ignoreClassWithStaticInitBlock\": true }]*/\n\nclass Foo {\n    static myProperty = \"some string\";\n    static mymethod() {\n        return \"some string\";\n    }\n}\n\nclass Bar {\n    static {\n        let baz; // unused variable\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Javascript URLs in JavaScript\nDESCRIPTION: Examples of code patterns that violate the no-script-url rule by using javascript: URLs in string literals and template literals, which are considered harmful as they function similarly to eval statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-script-url.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-script-url: \"error\"*/\n\nlocation.href = \"javascript:void(0)\";\n\nlocation.href = `javascript:void(0)`;\n```\n\n----------------------------------------\n\nTITLE: Adding custom error messages to restricted modules in ESLint (JSON)\nDESCRIPTION: Configuration that includes a custom error message for a restricted module, providing more context about why the module is restricted and offering alternatives.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-modules\": [\"error\", {\n  \"name\": \"foo-module\",\n  \"message\": \"Please use bar-module instead.\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Disallowing Dangling Underscores in Object Destructuring in JavaScript\nDESCRIPTION: Example of using the 'allowInObjectDestructuring' option set to false to disallow dangling underscores in variable names assigned by object destructuring.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: [\"error\", { \"allowInObjectDestructuring\": false }]*/\n\nconst { foo, bar: _bar } = collection;\nconst { qux, xyz, _baz } = collection;\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for sort-imports ESLint Rule in JSON\nDESCRIPTION: Shows the default configuration options for the sort-imports rule in ESLint, including ignoreCase, ignoreDeclarationSort, ignoreMemberSort, memberSyntaxSortOrder, and allowSeparatedGroups.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"sort-imports\": [\"error\", {\n        \"ignoreCase\": false,\n        \"ignoreDeclarationSort\": false,\n        \"ignoreMemberSort\": false,\n        \"memberSyntaxSortOrder\": [\"none\", \"all\", \"multiple\", \"single\"],\n        \"allowSeparatedGroups\": false\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Assignment - Pre-assignment\nDESCRIPTION: Demonstrates invalid assignment before class declaration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-class-assign.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-class-assign: \"error\"*/\n\nA = 0;\nclass A { }\n```\n\n----------------------------------------\n\nTITLE: Object-Only Destructuring Configuration\nDESCRIPTION: Configuration example that enforces only object destructuring while disabling array destructuring requirements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-destructuring.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\"object\": true, \"array\": false}]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for 'outside' Option in wrap-iife Rule\nDESCRIPTION: Shows code that complies with the wrap-iife rule when using the 'outside' option, where the call expression is properly wrapped.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-iife.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n----------------------------------------\n\nTITLE: Correct Class Implementation Meeting Complexity Threshold\nDESCRIPTION: Examples of classes with field initializers and static blocks that comply with a maximum complexity rule setting of 2.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/complexity.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint complexity: [\"error\", 2]*/\n\nfunction foo() { // this function has complexity = 1\n    class C {\n        x = a + b; // this initializer has complexity = 1\n        y = c || d; // this initializer has complexity = 2\n        z = e && f; // this initializer has complexity = 2\n\n        static p = g || h; // this initializer has complexity = 2\n        static q = i ? j : k; // this initializer has complexity = 2\n\n        static { // this static block has complexity = 2\n            if (foo) {\n                baz = bar;\n            }\n        }\n\n        static { // this static block has complexity = 2\n            qux = baz || quux;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing padded-blocks with 'always' and 'allowSingleLineBlocks' options in JavaScript\nDESCRIPTION: Examples of incorrect code when using the 'always' option with an exception for single-line blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", \"always\", { allowSingleLineBlocks: true }]*/\n\nif (a) {\n    b();\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Empty Line After Line Comment (JavaScript)\nDESCRIPTION: Example of correct code that follows the rule by including an empty line after a line comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true }]*/\n\nvar night = \"long\";\n// what a great and wonderful day\n\nvar day = \"great\"\n```\n\n----------------------------------------\n\nTITLE: Basic This Aliasing with jQuery Example\nDESCRIPTION: Demonstrates a common use case for aliasing 'this' in jQuery event callbacks where the context needs to be preserved.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-this.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst that = this;\njQuery('li').click(function (event) {\n    // here, \"this\" is the HTMLElement where the click event occurred\n    that.setFoo(42);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Rules in JSON Configuration\nDESCRIPTION: Demonstrates how to configure rules from plugins in a JSON configuration file. Plugin rules are referenced by prefixing the rule ID with the plugin name and a slash.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [\"plugin1\"],\n\t\"rules\": {\n\t\t\"eqeqeq\": \"off\",\n\t\t\"curly\": \"error\",\n\t\t\"quotes\": [\"error\", \"double\"],\n\t\t\"plugin1/rule1\": \"error\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - MaxBOF Option\nDESCRIPTION: Example showing incorrect code that violates the maxBOF setting of 1 empty line at beginning of file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multiple-empty-lines.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\n\n/*eslint no-multiple-empty-lines: [\"error\", { \"max\": 2, \"maxBOF\": 1 }]*/\n\n\nvar foo = 5;\n\n\nvar bar = 3;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Always Option\nDESCRIPTION: Examples of code that correctly follows the rule when configured with the 'always' option, showing each declaration on its own line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var-declaration-per-line.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var-declaration-per-line: [\"error\", \"always\"]*/\n\nvar a,\n    b;\n\nlet c,\n    d = 0;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Assignment - Within Method\nDESCRIPTION: Shows invalid reassignment of class identifier within a class method.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-class-assign.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-class-assign: \"error\"*/\n\nclass A {\n    b() {\n        A = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Non-Scoped Plugin Packages in ESLint Configuration\nDESCRIPTION: Example showing how to include a non-scoped plugin package in the ESLint configuration, where the 'eslint-plugin-' prefix can be omitted.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins-deprecated.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n    // ...\n    \"plugins\": [\n        \"jquery\", // means eslint-plugin-jquery\n    ]\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples with ignoreEOLComments set to false\nDESCRIPTION: Examples of code that violate the no-multi-spaces rule when end-of-line comments are not ignored.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-spaces: [\"error\", { ignoreEOLComments: false }]*/\n\nvar x = 5;      // comment\nvar x = 5;      /* multiline\n * comment\n */\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for Restricting If Statements Without Block Bodies\nDESCRIPTION: JSON configuration for the no-restricted-syntax rule that disallows if statements that don't use block statements for their consequent part.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/selectors.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"no-restricted-syntax\": [\n\t\t\t\"error\",\n\t\t\t\"IfStatement > :not(BlockStatement).consequent\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of 'space-before-blocks' with 'always' Option\nDESCRIPTION: Examples of code that violates the rule when configured with the 'always' option, requiring spaces before blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-blocks.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-blocks: \"error\"*/\n\nif (a){\n    b();\n}\n\nfunction a(){}\n\nfor (;;){\n    b();\n}\n\ntry {} catch(a){}\n\nclass Foo{\n  constructor(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Set Notation with RegExp v Flag\nDESCRIPTION: Shows how the v flag enables set operations between character classes in regular expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-unicode-regexp.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /[\\p{White_Space}&&\\p{ASCII}]/v;\nre.test('\\n'); // → true\nre.test('\\u2028'); // → false\n```\n\n----------------------------------------\n\nTITLE: Testing ZWJ sequences in RegExp character classes\nDESCRIPTION: Example demonstrating how Zero Width Joiner sequences (like family emojis) are incorrectly handled in RegExp character classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-misleading-character-class.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/^[👨‍👩‍👦]$/u.test(\"👨‍👩‍👦\"); //→ false\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'always' Option\nDESCRIPTION: Examples of incorrect spacing when the rule is configured with 'always' option, showing cases where spaces are required.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/rest-spread-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint rest-spread-spacing:[\"error\", \"always\"]*/\n\nfn(...args);\n[...arr, 4, 5, 6];\nlet [a, b, ...arr] = [1, 2, 3, 4, 5];\nfunction fn(...args) { console.log(args); }\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nlet n = { x, y, ...z };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage with Mixed Configuration Options\nDESCRIPTION: Examples showing proper code when the rule is configured with custom settings for functions, keywords, and classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-blocks.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"never\" }]*/\n\nfor (;;) {\n  // ...\n}\n\ndescribe(function(){\n  // ...\n});\n\nclass Foo{\n  constructor(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Undefined Assignment in JavaScript\nDESCRIPTION: This snippet shows how variables in JavaScript are automatically assigned the value of undefined when declared without initialization.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef-init.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage with Default 'ignoreImports' Option\nDESCRIPTION: Examples of code that violate the camelcase rule with the default { \"ignoreImports\": false } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: \"error\"*/\n\nimport { snake_cased } from 'mod';\n```\n\n----------------------------------------\n\nTITLE: Configuring 'as-needed' Option for Arrow Function Parentheses (JavaScript)\nDESCRIPTION: This snippet shows how the rule can be configured to discourage the use of parentheses when they are not required, using the 'as-needed' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\n(a) => {}\n\n// Good\na => {}\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript code examples for the allowSwitch option\nDESCRIPTION: Example of labeled statements with switch that is allowed when the allowSwitch option is set to true. This configuration permits using labels with switch statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-labels.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-labels: [\"error\", { \"allowSwitch\": true }]*/\n\nlabel:\n    switch (a) {\n        case 0:\n            break label;\n    }\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'never' and '[]' Exception\nDESCRIPTION: Examples of code that would be considered correct when using the 'never' option with an exception for square brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo( [bar, baz] );\nfoo( [bar, baz], 1);\n```\n\n----------------------------------------\n\nTITLE: Incorrect comparison with negative zero in JavaScript\nDESCRIPTION: This snippet demonstrates an incorrect comparison with -0, which will not work as intended. The comparison x === -0 will pass for both +0 and -0.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-compare-neg-zero.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-compare-neg-zero: \"error\" */\n\nif (x === -0) {\n    // doSomething()...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information\nDESCRIPTION: Example showing how to display the help menu with all available options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n--help\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for no-useless-concat Rule in JavaScript\nDESCRIPTION: Examples of code that would not trigger the no-useless-concat rule, including cases with non-string operands and multiline string concatenation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-concat.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-concat: \"error\"*/\n\n// when a non string is included\nconst a = a + b;\nconst b = '1' + a;\nconst c = 1 + '1';\nconst d = 1 - 2;\n// when the string concatenation is multiline\nconst e = \"foo\" +\n    \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Default Export in JavaScript\nDESCRIPTION: An example of incorrect default export syntax in JavaScript. This snippet demonstrates a syntax error that ESLint would catch.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/good-examples.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default⏎\n\"foo\";\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with anonymous:ignore and named:always\nDESCRIPTION: Examples showing correct code when anonymous functions can have any spacing but named functions must have a space before parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"ignore\", \"named\": \"always\" }]*/\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function () {\n    // ...\n};\n\nfunction foo () {\n    // ...\n}\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Case-Sensitive Pattern Matching\nDESCRIPTION: Configuration that sets the caseSensitive option to true, making pattern matching respect letter casing in import paths.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"group\": [\"import1/private/prefix[A-Z]*\"],\n      \"caseSensitive\": true\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of 'space-before-blocks' with 'always' Option\nDESCRIPTION: Examples of code that complies with the rule when configured with the 'always' option, showing proper spacing before blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-blocks.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-blocks: \"error\"*/\n\nif (a) {\n    b();\n}\n\nif (a) {\n    b();\n} else{ /*no error. this is checked by `keyword-spacing` rule.*/\n    c();\n}\n\nclass C {\n    static{} /*no error. this is checked by `keyword-spacing` rule.*/\n}\n\nfunction a() {}\n\nfor (;;) {\n    b();\n}\n\ntry {} catch(a) {}\n```\n\n----------------------------------------\n\nTITLE: Correct Array Element Formatting with 'multiline' Option in JavaScript\nDESCRIPTION: Examples of correctly formatted arrays that comply with the 'multiline' option, showing proper line breaks when elements contain line breaks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", { \"multiline\": true }]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1, 2, 3];\nvar e = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Code With Newlines Before Return in JavaScript\nDESCRIPTION: This snippet shows the same JavaScript function with newlines added before return statements, improving code readability.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-before-return.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo(bar) {\n  var baz = 'baz';\n\n  if (!bar) {\n    bar = baz;\n\n    return bar;\n  }\n\n  return bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Inline Comments in JavaScript\nDESCRIPTION: Examples of code that violates the no-inline-comments rule by placing comments on the same line as code statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inline-comments.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inline-comments: \"error\"*/\n\nconst a = 1; // declaring a to 1\n\nfunction getRandomNumber(){\n    return 4; // chosen by fair dice roll.\n              // guaranteed to be random.\n}\n\n/* A block comment before code */ const b = 2;\n\nconst c = 3; /* A block comment after code */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Increment/Decrement Operators\nDESCRIPTION: Examples of code that violates the no-plusplus rule by using increment and decrement operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-plusplus.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-plusplus: \"error\"*/\n\nlet foo = 0;\nfoo++;\n\nlet bar = 42;\nbar--;\n\nfor (i = 0; i < l; i++) {\n    doSomething(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with allowInParentheses Option Set to False\nDESCRIPTION: Example of code that complies with the no-sequences rule when allowInParentheses is false, showing the exception for for loops.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sequences.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-sequences: [\"error\", { \"allowInParentheses\": false }]*/\n\nfor (i = 0, j = 10; i < j; i++, j--);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for 'inside' with functionPrototypeMethods Option\nDESCRIPTION: Shows code that violates the wrap-iife rule when configured with the 'inside' option and functionPrototypeMethods set to true, requiring wrapping for .call and .apply invocations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-iife.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = function(){ foo(); }()\nvar x = (function(){ foo(); }())\nvar x = function(){ foo(); }.call(bar)\nvar x = (function(){ foo(); }.call(bar))\n```\n\n----------------------------------------\n\nTITLE: Object Expression Indentation in JavaScript\nDESCRIPTION: Demonstrates proper object literal indentation with ObjectExpression configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"ObjectExpression\": 1 }]*/\n\nvar foo = {\n  bar: 1,\n  baz: 2,\n  qux: 3\n};\n```\n\n----------------------------------------\n\nTITLE: JSDoc with requireParamDescription Disabled in ESLint\nDESCRIPTION: Example showing valid JSDoc usage when the requireParamDescription option is set to false. This allows parameters to be documented without requiring descriptions for each parameter.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-jsdoc.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint valid-jsdoc: [\"error\", { \"requireParamDescription\": false }]*/\n\n/**\n * Add two numbers.\n * @param {number} num1\n * @param {number} num2\n * @returns {number} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Message Configuration\nDESCRIPTION: Configuration example showing how to specify custom error messages for restricted imports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n    \"name\": \"import-foo\",\n    \"message\": \"Please use import-bar instead.\"\n}, {\n    \"name\": \"import-baz\",\n    \"message\": \"Please use import-quux instead.\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Proper Spacing Around Operators in JavaScript\nDESCRIPTION: This example shows the recommended way to format code with spaces around infix operators for better readability.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-infix-ops.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar sum = 1 + 2;\n```\n\n----------------------------------------\n\nTITLE: Correct Identifier Examples\nDESCRIPTION: Examples of variable and function names that comply with the camelCase naming convention rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-match.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\"]*/\n\nconst myFavoriteColor   = \"#112C85\";\nconst foo = bar.baz_boom;\nconst buz = { qux: bar.baz_boom };\ndo_something();\nconst obj = {\n    my_pref: 1\n};\n\nclass myClass {}\n\nclass anotherClass {\n    doSomething() {}\n}\n\nclass oneMoreClass {\n    #doSomething() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect NaN Usage with indexOf Methods\nDESCRIPTION: Examples of incorrect code using indexOf and lastIndexOf with NaN, which will be flagged when the enforceForIndexOf option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/use-isnan.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint use-isnan: [\"error\", {\"enforceForIndexOf\": true}]*/\n\nconst hasNaN = myArray.indexOf(NaN) >= 0;\n\nconst firstIndex = myArray.indexOf(NaN);\n\nconst lastIndex = myArray.lastIndexOf(NaN);\n\nconst indexWithSequenceExpression = myArray.indexOf((doStuff(), NaN));\n\nconst firstIndexFromSecondElement = myArray.indexOf(NaN, 1);\n\nconst lastIndexFromSecondElement = myArray.lastIndexOf(NaN, 1);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Element Formatting with 'always' Option in JavaScript\nDESCRIPTION: Examples of incorrectly formatted arrays that violate the 'always' option, which requires line breaks between all array elements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", \"always\"]*/\n\nvar c = [1, 2];\nvar d = [1, 2, 3];\nvar e = [1, 2, 3\n];\nvar f = [\n  1, 2, 3\n];\nvar g = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating correct usage of property keys in JavaScript\nDESCRIPTION: Examples of code that comply with the no-useless-computed-key rule by using direct property notation instead of unnecessary computed properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-computed-key.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-computed-key: \"error\"*/\n\nconst a = { 'a': 0 };\nconst b = { 0: 0 };\nconst c = { x() {} };\nconst d = { a: 0 };\nconst e = { '0+1,234': 0 };\n\nconst { 0: foo } = obj;\nconst { 'x': bar } = obj;\n\nclass Foo {\n    \"foo\" = \"bar\";\n\n    0() {}\n    'a'() {}\n    get 'b'() {}\n    set 'c'(value) {}\n\n    static \"foo\" = \"bar\";\n\n    static 'a'() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage with 'ignoreGlobals: true' Option\nDESCRIPTION: Examples of code that comply with the camelcase rule using the { \"ignoreGlobals\": true } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {ignoreGlobals: true}]*/\n/* global no_camelcased */\n\nconst foo = no_camelcased;\n```\n\n----------------------------------------\n\nTITLE: Correct usage with allowAsStatement option in no-void rule\nDESCRIPTION: This snippet demonstrates correct usage of the void operator when the allowAsStatement option is set to true in the no-void rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-void.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-void: [\"error\", { \"allowAsStatement\": true }]*/\n\nvoid foo;\nvoid someFunction();\n```\n\n----------------------------------------\n\nTITLE: Correct examples for 'omitLastInOneLineBlock' option\nDESCRIPTION: Examples of valid code when using the 'omitLastInOneLineBlock' option, which allows omitting semicolons at the end of one-line blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi: [\"error\", \"always\", { \"omitLastInOneLineBlock\": true}] */\n\nif (foo) { bar() }\n\nif (foo) { bar(); baz() }\n\nfunction f() { bar(); baz() }\n\nclass C {\n    foo() { bar(); baz() }\n\n    static { bar(); baz() }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for 'inside' Option in wrap-iife Rule\nDESCRIPTION: Demonstrates code that complies with the wrap-iife rule when using the 'inside' option, where the function expression is properly wrapped.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-iife.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Setup\nDESCRIPTION: Shell commands to create a new project directory and initialize it with npm.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir eslint-integration\ncd eslint-integration\n```\n\n----------------------------------------\n\nTITLE: Correct Function Call Spacing Example in JavaScript\nDESCRIPTION: Example showing the correct way to call functions without spaces between the identifier and parentheses, following the no-spaced-func rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-spaced-func.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-spaced-func: \"error\"*/\n\nfn()\n```\n\n----------------------------------------\n\nTITLE: Correct comparison with negative zero using Object.is() in JavaScript\nDESCRIPTION: This snippet demonstrates the correct way to compare a value specifically with -0 using Object.is(). This method can distinguish between +0 and -0.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-compare-neg-zero.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-compare-neg-zero: \"error\" */\n\nif (Object.is(x, -0)) {\n    // doSomething()...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for 'never' Option\nDESCRIPTION: Examples of code that comply with the template-curly-spacing rule when configured with the default 'never' option, showing no spaces inside curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-curly-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint template-curly-spacing: \"error\"*/\n\n`hello, ${people.name}!`;\n\n`hello, ${\n    people.name\n}!`;\n```\n\n----------------------------------------\n\nTITLE: Using Plugin Rules in Inline Comments\nDESCRIPTION: Shows how to configure rules from plugins directly in inline comments. Plugin rules are referenced by prefixing the rule name with the plugin name and a slash.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint \"plugin1/rule1\": \"error\" */\n```\n\n----------------------------------------\n\nTITLE: SetBeforeGet Option Examples - Correct\nDESCRIPTION: Examples showing correct implementation when using the 'setBeforeGet' option, where setters appear before getters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/grouped-accessor-pairs.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint grouped-accessor-pairs: [\"error\", \"setBeforeGet\"]*/\n\nconst foo = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Ignoring Indentation for Specific Nodes in JavaScript\nDESCRIPTION: Examples of correct indentation when the 'ignoredNodes' option is used to ignore indentation for ConditionalExpression nodes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 4, { \"ignoredNodes\": [\"ConditionalExpression\"] }]*/\n\nvar a = foo\n      ? bar\n      : baz;\n\nvar a = foo\n                ? bar\n: baz;\n```\n\n----------------------------------------\n\nTITLE: Function Declaration Examples with Different Spacing\nDESCRIPTION: Examples of function declarations showing the two spacing styles: without space between function name and parameter list, and with space between function name and parameter list.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-after-function-name.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction withoutSpace(x) {\n    // ...\n}\n\nfunction withSpace (x) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Comment Position Rule for 'Above' Position\nDESCRIPTION: This snippet demonstrates the correct usage of the 'line-comment-position' rule when configured to enforce comments above code. It includes the ESLint configuration comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/line-comment-position.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint line-comment-position: [\"error\", { \"position\": \"above\" }]*/\n// valid comment\n1 + 1;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with enforceForInnerExpressions Option in JavaScript\nDESCRIPTION: Examples of code that violate the no-extra-boolean-cast rule when the enforceForInnerExpressions option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-boolean-cast.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-extra-boolean-cast: [\"error\", {\"enforceForInnerExpressions\": true}]*/\n\nif (!!foo || bar) {\n    //...\n}\n\nwhile (!!foo && bar) {\n    //...\n}\n\nif ((!!foo || bar) && !!baz) {\n    //...\n}\n\nconst foo = new Boolean(!!bar || baz);\n\nfoo && Boolean(bar) ? baz : bat;\n\nconst ternaryBranches = Boolean(bar ? !!baz : bat);\n\nconst nullishCoalescingOperator = Boolean(bar ?? Boolean(baz));\n\nconst commaOperator = Boolean((bar, baz, !!bat));\n\n// another comma operator example\nfor (let i = 0; console.log(i), Boolean(i < 10); i++) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing ESLint's Calculated Configuration Output\nDESCRIPTION: Demonstrates the JSON output from using the --print-config flag, which displays the calculated configuration for a specific file including linter options, language settings, plugins, and rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/debug.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"linterOptions\": {\n\t\t\"reportUnusedDisableDirectives\": 1\n\t},\n\t\"language\": \"@/js\",\n\t\"languageOptions\": {\n\t\t\"sourceType\": \"module\",\n\t\t\"ecmaVersion\": \"latest\"\n\t},\n\t\"plugins\": [\"@\"],\n\t\"rules\": {\n\t\t\"prefer-const\": 2\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Strict Mode at Function Scope\nDESCRIPTION: This example shows another correct approach where strict mode is declared only at the function scope level without any outer scope declaration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-strict.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(function () {\n    \"use strict\";\n    var foo = true;\n}());\n```\n\n----------------------------------------\n\nTITLE: Correct Statement Positioning with Overrides Configuration\nDESCRIPTION: Examples of correct code for the nonblock-statement-body-position rule with the 'beside' option and an override for 'while' statements to appear below.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/nonblock-statement-body-position.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint nonblock-statement-body-position: [\"error\", \"beside\", { \"overrides\": { \"while\": \"below\" } }] */\n\nif (foo) bar();\n\nwhile (foo)\n  bar();\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Without Trailing Spaces in JavaScript\nDESCRIPTION: Examples showing code that correctly follows the no-trailing-spaces rule by having no whitespace at line endings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-trailing-spaces.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-trailing-spaces: \"error\"*/\n\nvar foo = 0;\nvar baz = 5;\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage with custom error message in JavaScript\nDESCRIPTION: Example of code that violates the no-restricted-globals rule with a custom error message for the 'event' global variable.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-globals.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/*global event*/\n/* eslint no-restricted-globals: [\"error\", { name: \"event\", message: \"Use local parameter instead.\" }] */\n\nfunction onClick() {\n    console.log(event);    // Unexpected global variable 'event'. Use local parameter instead.\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of curly braces with 'multi' and 'consistent' options in JavaScript\nDESCRIPTION: Examples of code that violate the 'curly' rule when set to 'multi' and 'consistent' options. This configuration requires consistent use of braces across if-else chains.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint curly: [\"error\", \"multi\", \"consistent\"]*/\n\nif (foo) {\n    bar();\n    baz();\n} else\n    buz();\n\nif (foo)\n    bar();\nelse if (faa)\n    bor();\nelse {\n    other();\n    things();\n}\n\nif (true)\n    foo();\nelse {\n    baz();\n}\n\nif (foo) {\n    foo++;\n}\n```\n\n----------------------------------------\n\nTITLE: Global Property Restriction\nDESCRIPTION: Configuration to restrict a property across all objects with a custom message.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-properties.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"property\": \"__defineGetter__\",\n            \"message\": \"Please use Object.defineProperty instead.\"\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Symbol without Description\nDESCRIPTION: Example of code that violates the symbol-description rule by creating a Symbol without providing a description.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/symbol-description.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint symbol-description: \"error\"*/\n\nconst foo = Symbol();\n```\n\n----------------------------------------\n\nTITLE: Examples of Floating Decimal Points in JavaScript\nDESCRIPTION: Demonstrates valid JavaScript syntax for numbers with floating decimal points that the rule aims to prevent. While syntactically correct, these formats can be confusing and are discouraged by the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-floating-decimal.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar num = .5;\nvar num = 2.;\nvar num = -.7;\n```\n\n----------------------------------------\n\nTITLE: Object Rest/Spread Examples\nDESCRIPTION: Shows usage of object rest and spread properties, which are part of the ECMAScript proposal.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/rest-spread-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx; // -> 1\ny; // -> 2\nz; // -> { a: 3, b: 4 }\n\nlet n = { x, y, ...z };\nn; // -> { x: 1, y: 2, a: 3, b: 4 }\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Comments in JavaScript\nDESCRIPTION: Examples of code that complies with the no-inline-comments rule by placing comments on separate lines from code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inline-comments.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inline-comments: \"error\"*/\n\n// This is a comment above a line of code\nconst foo = 5;\n\nconst bar = 5;\n//This is a comment below a line of code\n```\n\n----------------------------------------\n\nTITLE: Correct Array Bracket Spacing with 'singleValue' Exception in JavaScript\nDESCRIPTION: Examples of code that would be correct when the 'singleValue' exception is set to false with the 'always' option, showing arrays with single values having no spaces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"singleValue\": false }]*/\n\nvar foo = ['foo'];\nvar foo = [1];\nvar foo = [[ 1, 1 ]];\nvar foo = [{ 'foo': 'bar' }];\n```\n\n----------------------------------------\n\nTITLE: Always Initialization Configuration - JSON\nDESCRIPTION: ESLint configuration for enforcing initialization at declaration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"init-declarations\": [\"error\", \"always\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Array Literal with no-restricted-syntax Rule\nDESCRIPTION: Demonstrates an incorrect usage of an array literal when the 'no-restricted-syntax' rule is configured to restrict ArrayPattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/bad-examples.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-restricted-syntax: [\"error\", \"ArrayPattern\"] */\n\nconst foo = [bar];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples\nDESCRIPTION: Complete set of code patterns that would trigger violations of the no-arrow-condition rule\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-arrow-condition.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-arrow-condition: \"error\"*/\n\nif (a => 1) {}\nwhile (a => 1) {}\nfor (var a = 1; a => 10; a++) {}\na => 1 ? 2 : 3\n(a => 1) ? 2 : 3\nvar x = a => 1 ? 2 : 3\nvar x = (a) => 1 ? 2 : 3\n```\n\n----------------------------------------\n\nTITLE: Correct implementation of padded-blocks with 'blocks: always' option in JavaScript\nDESCRIPTION: Examples of code that correctly implements padding for block statements when using the blocks-specific option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"always\" }]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    // comment\n    b();\n\n}\n\nclass C {\n\n    static {\n\n        a();\n\n    }\n\n}\n\nclass D {\n    static {\n\n        a();\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage with restricted patterns configuration (JavaScript)\nDESCRIPTION: Example of code that violates the rule by importing a module that matches a restricted pattern, in this case any module from the lodash directory.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-modules: [\"error\", { \"patterns\": [\"lodash/*\"] }]*/\n\nconst pick = require('lodash/pick');\n```\n\n----------------------------------------\n\nTITLE: Always Quote Mode Examples\nDESCRIPTION: Examples of incorrect and correct code when using the 'always' option requiring quotes for all property names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quote-props.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quote-props: [\"error\", \"always\"]*/\n\nvar object = {\n    foo: \"bar\",\n    baz: 42\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quote-props: [\"error\", \"always\"]*/\n\nvar object1 = {\n    \"foo\": \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    'foo': 'bar',\n    'baz': 42,\n    'qux-lorem': true\n};\n\nvar object3 = {\n    foo() {\n        return;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Trailing Spaces in JavaScript\nDESCRIPTION: Examples showing code that violates the no-trailing-spaces rule by including whitespace at the end of lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-trailing-spaces.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-trailing-spaces: \"error\"*/\n\nvar foo = 0;/* trailing whitespace */     \nvar baz = 5;/* trailing whitespace */  \n/* trailing whitespace */     \n```\n\n----------------------------------------\n\nTITLE: Incorrect Exception Parameter Assignment in JavaScript\nDESCRIPTION: Example showing incorrect code that violates the no-ex-assign rule by reassigning the exception parameter in a catch clause, which is considered an error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-ex-assign.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-ex-assign: \"error\"*/\n\ntry {\n    // code\n} catch (e) {\n    e = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Template Usage in JavaScript\nDESCRIPTION: Examples of correct template usage that the rule allows when the 'disallowTemplateShorthand' option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-coercion: [\"error\", { \"disallowTemplateShorthand\": true }]*/\n\nconst s = String(foo);\n\nconst s1 = `a${foo}`;\n\nconst s2 = `${foo}b`;\n\nconst s3 = `${foo}${bar}`;\n\nconst s4 = tag`${foo}`;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'always' Option\nDESCRIPTION: Examples of correct spacing when the rule is configured with 'always' option, showing proper usage with required spaces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/rest-spread-spacing.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint rest-spread-spacing: [\"error\", \"always\"]*/\n\nfn(... args);\n[... arr, 4, 5, 6];\nlet [a, b, ... arr] = [1, 2, 3, 4, 5];\nfunction fn(... args) { console.log(args); }\nlet { x, y, ... z } = { x: 1, y: 2, a: 3, b: 4 };\nlet n = { x, y, ... z };\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Declaration Examples\nDESCRIPTION: Examples showing different styles of variable declarations on single vs multiple lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var-declaration-per-line.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo, bar, baz;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo,\n    bar,\n    baz;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Bracket Spacing with 'arraysInArrays' Exception in JavaScript\nDESCRIPTION: Examples of code that would be incorrect when the 'arraysInArrays' exception is set to false with the 'always' option, showing nested arrays with improper spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"arraysInArrays\": false }]*/\n\nvar arr = [ [ 1, 2 ], 2, 3, 4 ];\nvar arr = [ [ 1, 2 ], 2, [ 3, 4 ] ];\n```\n\n----------------------------------------\n\nTITLE: Correct Exported Variable Declaration - JavaScript\nDESCRIPTION: Example of correct code using the exported comment directive to explicitly allow global variable declaration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-globals.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-implicit-globals: error */\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n----------------------------------------\n\nTITLE: Correct usage of object-curly-spacing with 'always' option in JavaScript\nDESCRIPTION: Examples of code that comply with the 'object-curly-spacing' rule when set to 'always', showing correct spacing inside curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-curly-spacing: [\"error\", \"always\"]*/\n\nvar obj = {};\nvar obj = { 'foo': 'bar' };\nvar obj = { 'foo': { 'bar': 'baz' }, 'qux': 'quxx' };\nvar obj = {\n  'foo': 'bar'\n};\nvar { x } = y;\nimport { foo } from 'bar';\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Examples with ignoreJSX: 'all' Option\nDESCRIPTION: Examples showing valid JSX code when the 'ignoreJSX' option is set to 'all', allowing extra parentheses around all JSX expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"all\" }] */\nconst ThisComponent = (<div />)\nconst ThatComponent = (\n    <div\n        prop={true}\n    />\n)\n```\n\n----------------------------------------\n\nTITLE: Old ES6 Modules Configuration Format\nDESCRIPTION: Example of the old configuration format for enabling ES6 module support in ESLint v1.x using the ecmaFeatures.modules property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tecmaFeatures: {\n\t\tmodules: true;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Single Line Ternary Expression - Basic Example\nDESCRIPTION: Basic example of a single-line ternary expression that may be affected by this rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-ternary.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = bar > baz ? value1 : value2;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript Code Using Ternary Operators\nDESCRIPTION: Examples of code that would violate the no-ternary rule, showing both variable assignment and return statements using ternary operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-ternary.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-ternary: \"error\"*/\n\nconst foo = isBar ? baz : qux;\n\nfunction quux() {\n  return foo ? bar() : baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of setTimeout with String Argument in JavaScript\nDESCRIPTION: This snippet demonstrates an incorrect way of using setTimeout() with a string argument, which is considered an implied eval() and is discouraged due to security and performance concerns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implied-eval.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetTimeout(\"alert('Hi!');\", 100);\n```\n\n----------------------------------------\n\nTITLE: Correct Class Implementation Examples with super() Calls and Static Fields\nDESCRIPTION: Additional correct code examples showing proper class implementations with super() calls or static fields that don't trigger the no-unreachable rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unreachable: \"error\"*/\n\nclass D extends B {\n    #x;\n    #y = 1;\n    a;\n    b = 1;\n\n    constructor() {\n        super();\n    }\n}\n\nclass E extends B {\n    #x;\n    #y = 1;\n    a;\n    b = 1;\n\n    // implicit constructor always calls `super()`\n}\n\nclass F extends B {\n    static #x;\n    static #y = 1;\n    static a;\n    static b = 1;\n\n    constructor() {\n        return {};\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration of capitalized-comments Rule in JSON\nDESCRIPTION: Example configuration for the capitalized-comments rule, setting it to 'always' require capitalization and specifying additional options like ignorePattern and ignoreInlineComments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/capitalized-comments.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"capitalized-comments\": [\n        \"error\",\n        \"always\",\n        {\n            \"ignorePattern\": \"pragma|ignored\",\n            \"ignoreInlineComments\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using restrictedNamedExports Option - Correct Examples\nDESCRIPTION: Examples of code that comply with the no-restricted-exports rule by avoiding the use of restricted export names through alternative naming or different export patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", {\n    \"restrictedNamedExports\": [\"foo\", \"bar\", \"Baz\", \"a\", \"b\", \"c\", \"d\", \"e\", \"👍\"]\n}]*/\n\nexport const quux = 1;\n\nexport function myFunction() {}\n\nexport class MyClass {}\n\nconst a = {};\nexport { a as myObject };\n\nfunction someFunction() {}\nexport { someFunction };\n\nexport { c as someName } from \"some_module\";\n\nexport { \"d\" as \" d \" } from \"some_module\";\n\nexport { something } from \"some_module\";\n\nexport { \"👍\" as thumbsUp } from \"some_module\";\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with Unique Conditions\nDESCRIPTION: Multiple examples of correct if-else-if chains where all conditions are unique and logically distinct.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-else-if.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-dupe-else-if: \"error\"*/\n\nif (isSomething(x)) {\n    foo();\n} else if (isSomethingElse(x)) {\n    bar();\n}\n\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (c && d) {\n    baz();\n} else if (c && e) {\n    quux();\n} else {\n    quuux();\n}\n\nif (n === 1) {\n    foo();\n} else if (n === 2) {\n    bar();\n} else if (n === 3) {\n    baz();\n} else if (n === 4) {\n    quux();\n} else if (n === 5) {\n    quuux();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of 1tbs Brace Style with allowSingleLine Option in JavaScript\nDESCRIPTION: Examples of correct code for the ESLint brace-style rule with the '1tbs' option and allowSingleLine set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/brace-style.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint brace-style: [\"error\", \"1tbs\", { \"allowSingleLine\": true }]*/\n\nfunction nop() { return; }\n\nif (foo) { bar(); }\n\nif (foo) { bar(); } else { baz(); }\n\ntry { somethingRisky(); } catch(e) { handleError(); }\n\nif (foo) { baz(); } else {\n  boom();\n}\n\nif (foo) { baz(); } else if (bar) {\n  boom();\n}\n\nif (foo) { baz(); } else\nif (bar) {\n  boom();\n}\n\nif (foo) { baz(); } else if (bar) {\n  boom();\n}\n\ntry { somethingRisky(); } catch(e) {\n  handleError();\n}\n\nclass C {\n    static { foo(); }\n}\n\nclass D { static { foo(); } }\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with Default max:1 Option\nDESCRIPTION: Examples showing code that complies with the rule when configured with the default maximum of 1 statement per line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-statements-per-line.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-statements-per-line: [\"error\", { \"max\": 1 }]*/\n\nvar bar, baz;\nif (condition) bar = 1;\nfor (var i = 0; i < length; ++i);\nswitch (discriminant) { default: }\nfunction foo() { }\nvar qux = function qux() { };\n(function foo() { })();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Use of Minimum Keys Option for sort-keys Rule\nDESCRIPTION: Examples of code that passes the sort-keys rule with minKeys:4 option, as objects with fewer than 4 keys are not required to be sorted.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"asc\", {minKeys: 4}]*/\n\n// 3 keys\nconst obj1 = {\n    b: 2,\n    a: 1,\n    c: 3,\n};\n\n// 2 keys\nconst obj2 = {\n    2: 'b',\n    1: 'a',\n};\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests for ESLint Rules\nDESCRIPTION: Example of using the 'npm run perf' command to measure and compare the performance impact of rule modifications. Shows comparing the execution time between the main branch and a feature branch.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/core-rules.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout main\nSwitched to branch 'main'\n\n$ npm run perf\nCPU Speed is 2200 with multiplier 7500000\nPerformance Run #1:  1394.689313ms\nPerformance Run #2:  1423.295351ms\nPerformance Run #3:  1385.09515ms\nPerformance Run #4:  1382.406982ms\nPerformance Run #5:  1409.68566ms\nPerformance budget ok:  1394.689313ms (limit: 3409.090909090909ms)\n\n$ git checkout my-rule-branch\nSwitched to branch 'my-rule-branch'\n\n$ npm run perf\nCPU Speed is 2200 with multiplier 7500000\nPerformance Run #1:  1443.736547ms\nPerformance Run #2:  1419.193291ms\nPerformance Run #3:  1436.018228ms\nPerformance Run #4:  1473.605485ms\nPerformance Run #5:  1457.455283ms\nPerformance budget ok:  1443.736547ms (limit: 3409.090909090909ms)\n```\n\n----------------------------------------\n\nTITLE: Updating Parser Options for Object Rest/Spread in ESLint v6\nDESCRIPTION: This snippet shows how to update the parser options to enable object rest/spread support in ESLint v6, replacing the deprecated experimentalObjectRestSpread option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"parserOptions\": {\n\t\t\"ecmaVersion\": 2018\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for Required Blank Lines After Variable Declarations\nDESCRIPTION: These examples show incorrect code that violates the rule requiring blank lines after variable declarations. Each function is missing the required blank line after various types of variable declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: [\"const\", \"let\", \"var\"], next: \"*\"},\n    { blankLine: \"any\",    prev: [\"const\", \"let\", \"var\"], next: [\"const\", \"let\", \"var\"]}\n]*/\n\nfunction foo1() {\n    var a = 0;\n    bar();\n}\n\nfunction foo2() {\n    let a = 0;\n    bar();\n}\n\nfunction foo3() {\n    const a = 0;\n    bar();\n}\n\nclass C {\n    static {\n        let a = 0;\n        bar();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Never Initialization Configuration - JSON\nDESCRIPTION: ESLint configuration for prohibiting initialization at declaration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"init-declarations\": [\"error\", \"never\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Shadowing undefined with variable definition in JavaScript\nDESCRIPTION: Demonstrates shadowing the global 'undefined' identifier, which is considered incorrect because it can lead to confusion and unintended behavior in the code scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow-restricted-names.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst undefined = \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Numeric Property Keys Example\nDESCRIPTION: Shows potential issues with numeric property keys in strict mode due to type coercion.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quote-props.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = {\n    1e2: 1,\n    100: 2\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Within Max Lines with Skip Comments Option (JavaScript)\nDESCRIPTION: Example of code that complies with the max-lines rule with the skipComments option set to true and a max value of 2. The code has 2 or fewer non-comment lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-lines.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines: [\"error\", {\"max\": 2, \"skipComments\": true}]*/\n// a comment\nlet a,\n    b, c;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Smart Option\nDESCRIPTION: Examples of code that violates the eqeqeq rule when configured with the \"smart\" option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/eqeqeq.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\n----------------------------------------\n\nTITLE: Configuration Naming Conventions in ESLint (JavaScript)\nDESCRIPTION: Shows the recommended naming conventions for ESLint configurations, especially for shared configurations. The example includes naming for plugin configurations and nested configurations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tconfigs: {\n\t\trecommended: {\n\t\t\tname: \"example/recommended\",\n\t\t\trules: {\n\t\t\t\t\"no-unused-vars\": \"warn\",\n\t\t\t},\n\t\t},\n\t\tstrict: {\n\t\t\tname: \"example/strict\",\n\t\t\trules: {\n\t\t\t\t\"no-unused-vars\": \"error\",\n\t\t\t},\n\t\t},\n\t},\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tconfigs: {\n\t\tstrict: [\n\t\t\t{\n\t\t\t\tname: \"example/strict/language-setup\",\n\t\t\t\tlanguageOptions: {\n\t\t\t\t\tecmaVersion: 2024,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"example/strict/sub-config\",\n\t\t\t\tfile: [\"src/**/*.js\"],\n\t\t\t\trules: {\n\t\t\t\t\t\"no-unused-vars\": \"error\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Single Class in JavaScript\nDESCRIPTION: This snippet shows the correct usage of the 'max-classes-per-file' rule by defining only one class in the file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-classes-per-file.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-classes-per-file: \"error\"*/\n\nclass Foo {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code for builtinGlobals Option\nDESCRIPTION: Example showing code that incorrectly shadows a built-in global variable 'Object' when the builtinGlobals option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-shadow: [\"error\", { \"builtinGlobals\": true }]*/\n\nfunction foo() {\n    const Object = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Natural Sorting Option for sort-keys Rule\nDESCRIPTION: Examples of incorrect and correct numeric key ordering when using the natural:true option for natural number sorting in object properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"asc\", {natural: true}]*/\n\nconst obj = {1: a, 10: c, 2: b};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Missing Line Before Line Comment (JavaScript)\nDESCRIPTION: Example of incorrect code that violates the rule by not having an empty line before a line comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true }]*/\n\nvar night = \"long\";\n// what a great and wonderful day\nvar day = \"great\"\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with the enforceForArrowConditionals Exception\nDESCRIPTION: Examples showing valid code when the 'enforceForArrowConditionals' option is set to false, allowing extra parentheses around ternary expressions in arrow function bodies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { \"enforceForArrowConditionals\": false }] */\n\nconst b = a => 1 ? 2 : 3;\nconst d = c => (1 ? 2 : 3);\n```\n\n----------------------------------------\n\nTITLE: Incorrect async/await spacing example in JavaScript\nDESCRIPTION: Example of improper spacing with the await operator in async functions that violates the space-unary-ops rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-ops.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-unary-ops: \"error\"*/\n\nasync function foo() {\n    await(bar);\n}\n```\n\n----------------------------------------\n\nTITLE: Using allowConstructorFlags Option with no-invalid-regexp in JavaScript\nDESCRIPTION: Examples of using the allowConstructorFlags option to specify custom RegExp flags that should be allowed. This example shows how to configure the rule to allow 'a' and 'z' flags.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-regexp.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-invalid-regexp: [\"error\", { \"allowConstructorFlags\": [\"a\", \"z\"] }]*/\n\nnew RegExp('.', 'a')\n\nnew RegExp('.', 'az')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Duplicate Strict Mode Directives\nDESCRIPTION: Example of incorrect code when using the 'global' option. Strict mode directives appear in both global and function scopes, which is redundant.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"global\"]*/\n\n\"use strict\";\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using parseInt() without radix (Incorrect - default option)\nDESCRIPTION: Example of incorrect code when using parseInt() without specifying the radix parameter, which can lead to unexpected results depending on the input format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/radix.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst num = parseInt(\"071\");\n```\n\n----------------------------------------\n\nTITLE: Examples of correct code for 'never' option in JavaScript\nDESCRIPTION: Illustrates correct spacing inside brackets and braces when the rule is set to 'never'. These examples would pass the ESLint rule check.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-brackets.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfoo['bar'];\nfoo[\n  'bar'\n];\nfoo[\n  'bar'];\n\nvar arr = [];\nvar arr = ['foo', 'bar', 'baz'];\nvar arr = [['foo'], 'bar', 'baz'];\nvar arr = [\n  'foo',\n  'bar',\n  'baz'\n];\n\nvar arr = [\n  'foo',\n  'bar'];\n\nvar obj = {'foo': 'bar'};\n\nvar obj = {'foo': {'bar': 'baz'}, 'qux': 'quxx'};\n\nvar obj = {\n  'foo': 'bar'\n};\nvar obj = {'foo': 'bar'\n};\nvar obj = {\n  'foo':'bar'};\n\nvar obj = {};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Function Constructor with ESLint Rule\nDESCRIPTION: Examples of code that would trigger the no-new-func ESLint rule, showing various ways of using the Function constructor that should be avoided.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-func.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new-func: \"error\"*/\n\nconst a = new Function(\"a\", \"b\", \"return a + b\");\nconst b = Function(\"a\", \"b\", \"return a + b\");\nconst c = Function.call(null, \"a\", \"b\", \"return a + b\");\nconst d = Function.apply(null, [\"a\", \"b\", \"return a + b\"]);\nconst x = Function.bind(null, \"a\", \"b\", \"return a + b\")();\nconst y = Function.bind(null, \"a\", \"b\", \"return a + b\"); // assuming that the result of Function.bind(...) will be eventually called.\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Custom Parser in Legacy Configuration\nDESCRIPTION: Example of how to configure ESLint to use a custom parser using the legacy configuration format (.eslintrc.json). Shows how to specify the parser as a string path.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// .eslintrc.json\n{\n    \"parser\": \"./path/to/awesome-custom-parser.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Call Option Examples\nDESCRIPTION: Demonstrates the behavior of the allowCall option, showing both invalid and valid patterns when calling functions on required modules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-requires.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-mixed-requires: [\"error\", { \"allowCall\": true }]*/\n\nvar async = require('async'),\n    debug = require('diagnostics').someFunction('my-module'), /* allowCall doesn't allow calling any function */\n    eslint = require('eslint');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-mixed-requires: [\"error\", { \"allowCall\": true }]*/\n\nvar async = require('async'),\n    debug = require('diagnostics')('my-module'),\n    eslint = require('eslint');\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of importNamePattern Option\nDESCRIPTION: Example showing how to correctly use imports that don't match the restricted pattern of 'is*' function names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_36\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    importNamePattern: '^is',\n    message: \"Use 'is*' functions from lodash instead.\"\n}]}]*/\n\nimport isEmpty, { hasValue } from 'utils/collection-utils';\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Code Using If-Else Instead of Ternary Operators\nDESCRIPTION: Examples of code that complies with the no-ternary rule by using if-else statements instead of ternary operators for conditional logic.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-ternary.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-ternary: \"error\"*/\n\nlet foo;\n\nif (isBar) {\n    foo = baz;\n} else {\n    foo = qux;\n}\n\nfunction quux() {\n    if (foo) {\n        return bar();\n    } else {\n        return baz();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Arrow Function Formatting - below option\nDESCRIPTION: Examples of correctly formatted arrow functions following the 'below' option, placing the implicit return on a new line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/implicit-arrow-linebreak.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint implicit-arrow-linebreak: [\"error\", \"below\"] */\n\n(foo) =>\n  bar;\n\n(foo) =>\n  (bar);\n\n(foo) =>\n  bar =>\n    baz;\n```\n\n----------------------------------------\n\nTITLE: Correct Code with var-specific Option\nDESCRIPTION: Example showing correct code when the one-var rule is configured specifically for 'var' declarations with the 'never' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { var: \"never\" }]*/\n\nfunction foo() {\n    var bar;\n    var baz;\n\n    // `const` and `let` declarations are ignored if they are not specified\n    const foobar = 1;\n    const foobaz = 2;\n    const barfoo = 1, bazfoo = 2;\n    let qux;\n    let norf;\n    let fooqux, foonorf;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code for Default hoist:functions Option\nDESCRIPTION: Example showing incorrect shadowing with the default hoist:functions option where a variable shadows a function declared later.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-shadow: [\"error\", { \"hoist\": \"functions\" }]*/\n\nif (true) {\n    const b = 6;\n}\n\nfunction b() {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Variable Declarations in JavaScript\nDESCRIPTION: Examples of code that violate the 'vars-on-top' rule by declaring variables in nested blocks or after other statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/vars-on-top.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint vars-on-top: \"error\"*/\n\n// Variable declaration in a nested block, and a variable declaration after other statements:\nfunction doSomething() {\n    if (true) {\n        var first = true;\n    }\n    var second;\n}\n\n// Variable declaration in for initializer:\nfunction doSomethingElse() {\n    for (var i=0; i<10; i++) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint vars-on-top: \"error\"*/\n\n// Variable declaration after other statements:\nf();\nvar a;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint vars-on-top: \"error\"*/\n\n// Variables in class static blocks should be at the top of the static blocks.\n\nclass C {\n\n    // Variable declaration in a nested block:\n    static {\n        if (something) {\n            var a = true;\n        }\n    }\n\n    // Variable declaration after other statements:\n    static {\n        f();\n        var a;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Consecutive Statements\nDESCRIPTION: Example showing correct code with sequential class member declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-between-class-members.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint lines-between-class-members: [\"error\", \"always\"]*/\nclass MyClass {\n  x = 1\n\n  ;in = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Empty Blocks in JavaScript\nDESCRIPTION: Examples of code that violate the 'no-empty' rule, showing empty blocks in various JavaScript constructs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty: \"error\"*/\n\nif (foo) {\n}\n\nwhile (foo) {\n}\n\nswitch(foo) {\n}\n\ntry {\n    doSomething();\n} catch(ex) {\n\n} finally {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Correct implementation of padded-blocks with 'never' option in JavaScript\nDESCRIPTION: Examples of code that correctly follows the 'never' option requirements, showing blocks without padding.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", \"never\"]*/\n\nif (a) {\n    b();\n}\n\nif (a)\n{\n    b();\n}\n\nclass C {\n    static {\n        a();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code for Default hoist:functions Option\nDESCRIPTION: Example showing code that correctly avoids function shadowing with the default hoist:functions option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-shadow: [\"error\", { \"hoist\": \"functions\" }]*/\n\nif (true) {\n    const a = 3;\n}\n\nconst a = 5;\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with 'always' Option\nDESCRIPTION: Examples of code that complies with the one-var rule when configured with the 'always' option, showing proper single declaration patterns per scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", \"always\"]*/\n\nfunction foo1() {\n    var bar,\n        baz;\n    let qux,\n        norf;\n}\n\nfunction foo2(){\n    const bar = true,\n        baz = false;\n    let qux,\n        norf;\n}\n\nfunction foo3() {\n    var bar,\n        qux;\n\n    if (baz) {\n        qux = true;\n    }\n}\n\nfunction foo4(){\n    let bar;\n\n    if (baz) {\n        let qux;\n    }\n}\n\nclass C {\n    static {\n        var foo, bar;\n    }\n\n    static {\n        var foo, baz;\n        if (bar) {\n            baz = true;\n        }\n    }\n\n    static {\n        let foo, bar;\n    }\n\n    static {\n        let foo;\n        if (bar) {\n            let baz;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Constructor Usage\nDESCRIPTION: Examples of valid constructor implementations that perform meaningful operations or pass specific arguments to parent constructors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-constructor.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-constructor: \"error\"*/\n\nclass A { }\n\nclass B {\n    constructor () {\n        doSomething();\n    }\n}\n\nclass C extends A {\n    constructor() {\n        super('foo');\n    }\n}\n\nclass D extends A {\n    constructor() {\n        super();\n        doSomething();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Never Spacing Examples\nDESCRIPTION: Shows correct spacing examples when using the 'never' option, which disallows spaces inside computed property brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/computed-property-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint computed-property-spacing: [\"error\", \"never\"]*/\n\nobj[foo]\nobj['foo']\nvar x = {[b]: a}\nobj[foo[bar]]\n\nconst { [a]: someProp } = obj;\n({ [b]: anotherProp } = anotherObj);\n```\n\n----------------------------------------\n\nTITLE: Correct Assignment to Writable Global in JavaScript\nDESCRIPTION: Example of code that complies with the no-global-assign rule by assigning a value to a global variable explicitly marked as writable in ESLint configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-global-assign.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-global-assign: \"error\"*/\n/*global onload:writable*/\n\nonload = function() {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Windows Line Endings in JavaScript\nDESCRIPTION: Example of incorrect code for the 'linebreak-style' rule with the 'windows' option. It shows a line ending with LF instead of CRLF.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/linebreak-style.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint linebreak-style: [\"error\", \"windows\"]*/\n\nvar a = 'a'; // \\n\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Deprecated Globals in ESLint Configuration\nDESCRIPTION: A JSON configuration that explicitly adds back deprecated globals that have been removed from built-in environments in ESLint v5.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-5.0.0.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"env\": {\n\t\t\"browser\": true\n\t},\n\t\"globals\": {\n\t\t\"SVGAltGlyphElement\": false\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring yield-star-spacing rule with shorthand (JSON)\nDESCRIPTION: Example of using the string shorthand to configure the yield-star-spacing rule in ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yield-star-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"yield-star-spacing\": [\"error\", \"after\"]\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Comparison Example\nDESCRIPTION: Demonstrates the difference between empty arrow function blocks and empty object literals in arrow functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-function.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlist.map(() => {});   // This is a block, would return undefined.\nlist.map(() => ({})); // This is an empty object.\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration for Generator Star Spacing Rule\nDESCRIPTION: Example of a more complex configuration for the generator-star-spacing rule, including overrides for different function types.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"generator-star-spacing\": [\"error\", {\n    \"before\": false,\n    \"after\": true,\n    \"anonymous\": \"neither\",\n    \"method\": {\"before\": true, \"after\": true}\n}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - MaxEOF Option\nDESCRIPTION: Example showing incorrect code that violates the maxEOF setting of 0 empty lines at end of file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multiple-empty-lines.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multiple-empty-lines: [\"error\", { \"max\": 2, \"maxEOF\": 0 }]*/\n\nvar foo = 5;\n\n\nvar bar = 3;\n\n\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with allowShortCircuit Option\nDESCRIPTION: Examples of code patterns that would be considered valid with the allowShortCircuit option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }]*/\n\na && b()\na() || (b = c)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples with always Option in JavaScript\nDESCRIPTION: Examples of code that comply with the no-return-assign rule using the 'always' option. These examples use comparison operators instead of assignment operators in return statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-return-assign.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-return-assign: [\"error\", \"always\"]*/\n\nfunction doSomething() {\n    return foo == bar + 2;\n}\n\nfunction doSomethingElse() {\n    return foo === bar + 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Call Arguments with Consistent Option - Correct Examples\nDESCRIPTION: Examples of correct function call argument formatting when using the 'consistent' option, showing consistent usage of line breaks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-call-argument-newline.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint function-call-argument-newline: [\"error\", \"consistent\"]*/\n\nfoo(\"one\", \"two\", \"three\");\n// or\nfoo(\n    \"one\",\n    \"two\",\n    \"three\"\n);\n\nbar(\"one\", \"two\", {\n    one: 1,\n    two: 2\n});\n// or\nbar(\n    \"one\",\n    \"two\",\n    { one: 1, two: 2 }\n);\n// or\nbar(\n    \"one\",\n    \"two\",\n    {\n        one: 1,\n        two: 2\n    }\n);\n\nbaz(\"one\", \"two\", (x) => {\n    console.log(x);\n});\n// or\nbaz(\n    \"one\",\n    \"two\",\n    (x) => {\n        console.log(x);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with ignorePattern Option\nDESCRIPTION: Example showing that the ignorePattern only excludes specific patterns, and other inline comments are still flagged.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inline-comments.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inline-comments: [\"error\", { \"ignorePattern\": \"something\" }] */\n\nconst foo = 4; // other thing\n```\n\n----------------------------------------\n\nTITLE: Basic Named Function Expression Example\nDESCRIPTION: Shows the basic pattern of using a named function expression for better debugging through stack traces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-names.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.prototype.bar = function bar() {};\n```\n\n----------------------------------------\n\nTITLE: Traditional Function.prototype.apply() Usage\nDESCRIPTION: Example showing how variadic functions were called before ES2015 using Function.prototype.apply()\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-spread.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst args = [1, 2, 3, 4];\nMath.max.apply(Math, args);\n```\n\n----------------------------------------\n\nTITLE: Correct usage of 'new-parens' rule with 'never' option in JavaScript\nDESCRIPTION: These examples demonstrate correct code when the 'new-parens' rule is set to 'never', showing various ways to invoke constructors without parentheses or with arguments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-parens.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-parens: [\"error\", \"never\"]*/\n\nvar person = new Person;\nvar person = (new Person);\nvar person = new Person(\"Name\");\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with the conditionalAssign Exception\nDESCRIPTION: Examples showing valid code when the 'conditionalAssign' option is set to false, allowing extra parentheses around assignments in conditional test expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { \"conditionalAssign\": false }] */\n\nwhile ((foo = bar())) {}\n\nif ((foo = bar())) {}\n\ndo; while ((foo = bar()))\n\nfor (;(a = b););\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for no-lone-blocks Rule in JavaScript\nDESCRIPTION: This code block demonstrates various examples of code that violate the 'no-lone-blocks' rule, including unnecessary blocks at the top level and within other blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-lone-blocks.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-lone-blocks: \"error\"*/\n\n{}\n\nif (foo) {\n    bar();\n    {\n        baz();\n    }\n}\n\nfunction bar() {\n    {\n        baz();\n    }\n}\n\n{\n    function foo() {}\n}\n\n{\n    aLabel: {\n    }\n}\n\nclass C {\n    static {\n        {\n            foo();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Out Shebang Comments in JavaScript\nDESCRIPTION: Shows how to filter out shebang comments from the list of all comments in a source file using ESLint 4.0's new comment handling approach.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-4.0.0.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsourceCode.getAllComments().filter(comment => comment.type !== \"Shebang\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect RegExp Usage Examples\nDESCRIPTION: Examples of regular expressions that violate the require-unicode-regexp rule by not using u or v flags.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-unicode-regexp.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint require-unicode-regexp: error */\n\nconst a = /aaa/\nconst b = /bbb/gi\nconst c = new RegExp(\"ccc\")\nconst d = new RegExp(\"ddd\", \"gi\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unnecessary Code Block in JavaScript\nDESCRIPTION: This snippet shows an example of an unnecessary standalone code block in JavaScript, which the 'no-lone-blocks' rule aims to eliminate.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-lone-blocks.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    var foo = bar();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples\nDESCRIPTION: Examples of properly formatted code that follows the no-mixed-operators rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-operators.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-mixed-operators: \"error\"*/\n\nvar foo = a || b || c;\nvar foo = a && b && c;\nvar foo = (a && b < 0) || c > 0 || d + 1 === 0;\nvar foo = a && (b < 0 || c > 0 || d + 1 === 0);\nvar foo = a + (b * c);\nvar foo = (a + b) * c;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Default Max Empty Lines\nDESCRIPTION: Example showing incorrect code that violates the default maximum of 2 consecutive empty lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multiple-empty-lines.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multiple-empty-lines: \"error\"*/\n\nvar foo = 5;\n\n\n\nvar bar = 3;\n```\n\n----------------------------------------\n\nTITLE: Displaying Environment Information\nDESCRIPTION: Example showing how to output execution environment information including Node.js and ESLint versions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n--env-info\n```\n\n----------------------------------------\n\nTITLE: Correct Array Element Formatting with Separate Options for ArrayExpression and ArrayPattern in JavaScript\nDESCRIPTION: Examples of correctly formatted arrays and destructuring patterns that comply with the separate configuration for ArrayExpression and ArrayPattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", { \"ArrayExpression\": \"always\", \"ArrayPattern\": \"never\" }]*/\n\nvar a = [1,\n    2];\nvar b = [1,\n    2,\n    3];\nvar c = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n\nvar [d, e] = arr\nvar [f, g, h] = arr\nvar [i = function foo() {\n    dosomething()\n}, j = function bar() {\n    dosomething()\n}] = arr\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Example - Incorrect Usage\nDESCRIPTION: Example showing code that would trigger the no-new-require ESLint rule error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-require.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new-require: \"error\"*/\n\nvar appHeader = new require('app-header');\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for the 'functions' Option\nDESCRIPTION: Examples showing valid code when the rule is configured with the 'functions' option, demonstrating that only unnecessary parentheses around function expressions are flagged.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"functions\"] */\n\n(0).toString();\n\n(Object.prototype.toString.call());\n\n({}.toString.call());\n\n(function(){} ? a() : b());\n\n(/^a$/).test(x);\n\na = (b * c);\n\n(a * b) + c;\n\ntypeof (a);\n```\n\n----------------------------------------\n\nTITLE: Restricting all Node.js core modules in ESLint (JSON)\nDESCRIPTION: Comprehensive configuration that restricts all Node.js core modules, effectively preventing the use of any built-in Node.js functionality.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"no-restricted-modules\": [\"error\",\n        \"assert\",\"buffer\",\"child_process\",\"cluster\",\"crypto\",\"dgram\",\"dns\",\"domain\",\"events\",\"freelist\",\"fs\",\"http\",\"https\",\"module\",\"net\",\"os\",\"path\",\"punycode\",\"querystring\",\"readline\",\"repl\",\"smalloc\",\"stream\",\"string_decoder\",\"sys\",\"timers\",\"tls\",\"tracing\",\"tty\",\"url\",\"util\",\"vm\",\"zlib\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Exceeding Max Lines with Skip Blank Lines Option (JavaScript)\nDESCRIPTION: Example of code that violates the max-lines rule with the skipBlankLines option set to true and a max value of 3. The code exceeds 3 non-blank lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-lines.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines: [\"error\", {\"max\": 3, \"skipBlankLines\": true}]*/\n\nlet a,\n    b,\n    c;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function Call Spacing Variations in JavaScript\nDESCRIPTION: Examples of different ways to call functions with and without spaces between the function name and parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-call-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nalert('Hello');\nalert ('Hello');\n\nconsole.log(42);\nconsole.log (42);\n\nnew Date();\nnew Date ();\n```\n\n----------------------------------------\n\nTITLE: Using eslint:recommended Configuration in JSON\nDESCRIPTION: Example of extending the eslint:recommended configuration in an ESLint configuration file, which provides a set of recommended rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-3.0.0.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with the enforceForNewInMemberExpressions Exception\nDESCRIPTION: Examples showing valid code when the 'enforceForNewInMemberExpressions' option is set to false, allowing extra parentheses around 'new' expressions in member expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { \"enforceForNewInMemberExpressions\": false }] */\n\nconst foo = (new Bar()).baz;\n\nconst quux = (new Bar())[baz];\n\n(new Bar()).doSomething();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Useless Backreference Behavior in JavaScript RegExp\nDESCRIPTION: This example demonstrates how a useless backreference to a group in another alternative branch behaves in JavaScript. It shows that despite the backreference, the regex matches strings it wouldn't be expected to match if the backreference were meaningful.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-backreference.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst regex = /^(?:(a)|\\1b)$/;\n\nregex.test(\"a\"); // true\nregex.test(\"b\"); // true!\nregex.test(\"ab\"); // false\n\nconst equivalentRegex = /^(?:(a)|b)$/;\n\nequivalentRegex.test(\"a\"); // true\nequivalentRegex.test(\"b\"); // true\nequivalentRegex.test(\"ab\"); // false\n```\n\n----------------------------------------\n\nTITLE: Configuring lines-around-comment with beforeLineComment and allowArrayStart in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with beforeLineComment and allowArrayStart options enabled, which allows line comments at the start of array literals without requiring a blank line before them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true, \"allowArrayStart\": true }]*/\n\nvar day = [\n    // what a great and wonderful day\n    \"great\",\n    \"wonderful\"\n];\n\nconst [\n    // what a great and wonderful day\n    someDay\n] = [\"great\", \"not great\"];\n```\n\n----------------------------------------\n\nTITLE: Creating the Test File using Shell Command\nDESCRIPTION: Shell command to create a new file for testing the custom ESLint rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntouch enforce-foo-bar.test.js\n```\n\n----------------------------------------\n\nTITLE: Member Expression Indentation in JavaScript\nDESCRIPTION: Shows correct method chaining indentation with MemberExpression configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"MemberExpression\": 1 }]*/\n\nfoo\n  .bar\n  .baz();\n```\n\n----------------------------------------\n\nTITLE: Markers Configuration Example\nDESCRIPTION: Configuration example showing how to set up markers for docblock-style comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-comment.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"spaced-comment\": [\"error\", \"always\", { \"markers\": [\"/\"] }]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'requireForBlockBody' Option (JavaScript)\nDESCRIPTION: Examples of incorrect code for the 'arrow-parens' rule with the 'requireForBlockBody' option, showing cases where parentheses are required for block bodies but omitted.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-parens: [2, \"as-needed\", { \"requireForBlockBody\": true }]*/\n\n(a) => a;\na => {};\na => {'\\n'};\na.map((x) => x * x);\na.map(x => {\n  return x * x;\n});\na.then(foo => {});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with Mixed Configuration\nDESCRIPTION: Examples of code that would be flagged as incorrect when using a mixed configuration for anonymous, named, and async arrow functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-function-paren: [\"error\", {\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}]*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n\nvar baz = async(a) => await a\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Nested Callbacks in JavaScript\nDESCRIPTION: This example demonstrates code that violates the max-nested-callbacks rule when set to a maximum depth of 3. The callbacks are nested 4 levels deep, exceeding the specified limit.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-nested-callbacks.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-nested-callbacks: [\"error\", 3]*/\n\nfoo1(function() {\n    foo2(function() {\n        foo3(function() {\n            foo4(function() {\n                // Do something\n            });\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Natural Sorting for sort-keys Rule\nDESCRIPTION: Example of correctly ordered numeric keys when using natural sorting, which orders numbers by their numeric value rather than lexicographically.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"asc\", {natural: true}]*/\n\nconst obj = {1: a, 2: b, 10: c};\n```\n\n----------------------------------------\n\nTITLE: Using a Published Custom Parser in Legacy ESLint Configuration\nDESCRIPTION: Example of configuring ESLint to use a published custom parser package in the legacy configuration format. Shows how to specify the parser name as a string.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// .eslintrc.js\n\nmodule.exports = {\n\tparser: \"eslint-parser-myparser\",\n\t// ... rest of configuration\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Template Tag Spacing (Never Option)\nDESCRIPTION: This JavaScript example shows correct usage of template tag spacing when the rule is set to 'never', with no space between the tag function and template literal.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-tag-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint template-tag-spacing: \"error\"*/\n\nfunc`Hello world`;\n```\n\n----------------------------------------\n\nTITLE: Correct Class Member Spacing Examples\nDESCRIPTION: Shows correct spacing examples for class members with different enforceForClassMembers configurations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/computed-property-spacing.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint computed-property-spacing: [\"error\", \"never\", { \"enforceForClassMembers\": true }]*/\n\nclass Foo {\n  [a]() {}\n  get [b]() {}\n  set [b](value) {}\n}\n\nconst Bar = class {\n  [a](){}\n  static [b]() {}\n  static get [c]() {}\n  static set [c](value) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of yield* with 'neither' spacing (JavaScript)\nDESCRIPTION: Example of correct code for the yield-star-spacing rule with the 'neither' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yield-star-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/*eslint yield-star-spacing: [\"error\", \"neither\"]*/\n\nfunction*generator() {\n  yield*other();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Alternative Implementations Without Arguments.caller/callee\nDESCRIPTION: Examples showing proper recursive function implementations using named functions instead of arguments.callee.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-caller.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-caller: \"error\"*/\n\nfunction foo(n) {\n    if (n <= 0) {\n        return;\n    }\n\n    foo(n - 1);\n}\n\n[1,2,3,4,5].map(function factorial(n) {\n    return !(n > 1) ? 1 : factorial(n - 1) * n;\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Member Spacing Examples\nDESCRIPTION: Shows incorrect spacing examples for class members with enforceForClassMembers option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/computed-property-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint computed-property-spacing: [\"error\", \"never\", { \"enforceForClassMembers\": true }]*/\n\nclass Foo {\n  [a ]() {}\n  get [b ]() {}\n  set [b ](value) {}\n}\n\nconst Bar = class {\n  [ a](){}\n  static [ b]() {}\n  static get [ c ]() {}\n  static set [ c ](value) {}\n}\n```\n\n----------------------------------------\n\nTITLE: If/Else Statement Limitation Example\nDESCRIPTION: Demonstrates a false positive limitation where the rule warns about valid if/else callback usage.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/callback-return.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        callback(err); // this is fine, but WILL warn\n    } else {\n        callback();    // this is fine, but WILL warn\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Function Expression Syntax According to no-wrap-func Rule\nDESCRIPTION: Examples of proper function expression syntax that complies with the no-wrap-func rule. Shows both a standard function expression without unnecessary parentheses and a proper IIFE with the correct parentheses placement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-wrap-func.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = function() {/*...*/};\n\n(function() {/*...*/})();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Missing Line After Line Comment (JavaScript)\nDESCRIPTION: Example of incorrect code that violates the rule by not having an empty line after a line comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true }]*/\n\nvar night = \"long\";\n// what a great and wonderful day\nvar day = \"great\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example: Throw in Finally Block (JavaScript)\nDESCRIPTION: This example shows code that would trigger the no-unsafe-finally rule. The function has a throw statement in the finally block which overrides the return statements in the try and catch blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        throw new Error;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Custom Alert Functions in JavaScript\nDESCRIPTION: This snippet shows examples of code that comply with the no-alert rule by using custom implementations for alert, confirm, and prompt functionalities.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-alert.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-alert: \"error\"*/\n\ncustomAlert(\"Something happened!\");\n\ncustomConfirm(\"Are you sure?\");\n\ncustomPrompt(\"Who are you?\");\n\nfunction foo() {\n    const alert = myCustomLib.customAlert;\n    alert();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring object-curly-newline with different options for different syntax types\nDESCRIPTION: Example configuration in ESLint JSON format that shows how to specify different line break requirements for object literals, destructuring assignments, imports, and exports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"object-curly-newline\": [\"error\", {\n        \"ObjectExpression\": \"always\",\n        \"ObjectPattern\": { \"multiline\": true },\n        \"ImportDeclaration\": \"never\",\n        \"ExportDeclaration\": { \"multiline\": true, \"minProperties\": 3 }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct implementation of padded-blocks with 'classes: never' option in JavaScript\nDESCRIPTION: Examples of code that correctly implements no padding inside class bodies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"classes\": \"never\" }]*/\n\nclass  A {\n    constructor(){\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of function-paren-newline with 'always' option (JavaScript)\nDESCRIPTION: Examples of code that comply with the 'function-paren-newline' rule when set to 'always'. Shows functions and arrow functions with line breaks inside parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-paren-newline.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/* eslint function-paren-newline: [\"error\", \"always\"] */\n\nfunction foo(\n  bar,\n  baz\n) {}\n\nvar qux = function(\n  bar, baz\n) {};\n\nvar qux = (\n  bar,\n  baz\n) => {};\n\nfoo(\n  bar,\n  baz\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Generator Functions with 'after' Option\nDESCRIPTION: Examples of correctly formatted generator functions when the 'after' option is set to true and 'before' is false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint generator-star-spacing: [\"error\", {\"before\": false, \"after\": true}]*/\n\nfunction* generator() {}\n\nvar anonymous = function* () {};\n\nvar shorthand = { * generator() {} };\n```\n\n----------------------------------------\n\nTITLE: Correct Code with allow Option\nDESCRIPTION: Example showing code that correctly uses shadowing for the 'done' identifier when it's included in the allow list.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-shadow: [\"error\", { \"allow\": [\"done\"] }]*/\n\nimport async from 'async';\n\nfunction foo(done) {\n  async.map([1, 2], function (e, done) {\n    done(null, e * 2)\n  }, done);\n}\n\nfoo(function (err, result) {\n  console.log({ err, result });\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from indent to indent-legacy in ESLint v4.0.0\nDESCRIPTION: Configuration example showing how to replace the rewritten 'indent' rule with the 'indent-legacy' rule to preserve ESLint v3.x indentation behavior during migration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-4.0.0.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  rules: {\n    indent: \"off\",\n    \"indent-legacy\": \"error\" // replace this with your previous `indent` configuration\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for ESLint Documentation in Shell\nDESCRIPTION: Command to install the necessary dependencies for the ESLint documentation site. This needs to be run from the 'docs' folder to properly set up the environment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Conditions in JavaScript\nDESCRIPTION: Examples showing proper ways to structure conditions that comply with the no-negated-condition rule. Includes acceptable patterns for if statements and ternary expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-negated-condition.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-negated-condition: \"error\"*/\n\nif (!a) {\n    doSomething();\n}\n\nif (!a) {\n    doSomething();\n} else if (b) {\n    doSomething();\n}\n\nif (a != b) {\n    doSomething();\n}\n\na ? b : c\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Synchronous Methods Within Functions with allowAtRootLevel Option\nDESCRIPTION: Examples of code that violates the no-sync rule when using the allowAtRootLevel: true option. Shows synchronous methods used inside functions and arrow functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sync.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-sync: [\"error\", { allowAtRootLevel: true }]*/\n\nfunction foo() {\n  var contents = fs.readFileSync(somePath).toString();\n}\n\nvar bar = baz => fs.readFileSync(qux);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples\nDESCRIPTION: JavaScript code examples showing violations of the no-restricted-properties rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-properties.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-restricted-properties: [2, {\n    \"object\": \"disallowedObjectName\",\n    \"property\": \"disallowedPropertyName\"\n}] */\n\nconst example = disallowedObjectName.disallowedPropertyName;\n\ndisallowedObjectName.disallowedPropertyName();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Character Escaping in JavaScript\nDESCRIPTION: Examples of code that would trigger the no-useless-escape rule because they contain unnecessary escape characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-escape.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-escape: \"error\"*/\n\n\"\\'\"; \n'\\\"';\n\"\\#\";\n\"\\e\";\n`\\\"`;\n`\\\"${foo}\\\"`;\n`\\#{foo}`;\n/\\!/;\n/\\@/;\n/[\\[]/;\n/[a-z\\-]/;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'always-multiline' Option\nDESCRIPTION: Examples of incorrect ternary expression formatting when using the 'always-multiline' rule option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-ternary.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint multiline-ternary: [\"error\", \"always-multiline\"]*/\n\nfoo > bar ? value1 :\n    value2;\n\nfoo > bar ?\n    value1 : value2;\n\nfoo > bar &&\n    bar > baz ? value1 : value2;\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'never' Option\nDESCRIPTION: Examples of code that would be considered correct when using the default 'never' option for the space-in-parens rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"never\"]*/\n\nfoo();\n\nfoo('bar');\n\nfoo(/* bar */);\n\nvar foo = (1 + 2) * 3;\n(function () { return 'bar'; }());\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'property' Option (JavaScript)\nDESCRIPTION: This snippet demonstrates incorrect code when the 'dot-location' rule is set to the 'property' option. The dot is placed on a different line than the property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-location.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint dot-location: [\"error\", \"property\"]*/\n\nvar foo = object.\nproperty;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Trailing Commas with 'never' Option\nDESCRIPTION: These JavaScript snippets show correct usage of objects and arrays without trailing commas when the 'comma-dangle' rule is set to 'never'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Code with separateRequires Option - Multiple Requires\nDESCRIPTION: Example showing correct code with the separateRequires option, demonstrating multiple require statements grouped together but separate from other declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { separateRequires: true, var: \"always\" }]*/\n\nvar foo = require(\"foo\"),\n    bar = require(\"bar\");\n```\n\n----------------------------------------\n\nTITLE: Testing emoji modifiers in RegExp character classes\nDESCRIPTION: Examples demonstrating how emoji with skin tone modifiers are incorrectly handled in RegExp character classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-misleading-character-class.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/^[👶🏻]$/u.test(\"👶🏻\"); //→ false\n/^[👶🏽]$/u.test(\"👶🏽\"); //→ false\n```\n\n----------------------------------------\n\nTITLE: Correct Array Element Formatting with Combined 'multiline' and 'minItems' Options in JavaScript\nDESCRIPTION: Examples of correctly formatted arrays that comply with both 'multiline' and 'minItems' options together.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", { \"multiline\": true, \"minItems\": 3 }]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1,\n    2,\n    3];\nvar e = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Correct Object Expression Property Alignment in JavaScript\nDESCRIPTION: Example of correctly aligned object expression properties with the indent-legacy rule set to 'first' property alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, {\"ObjectExpression\": \"first\"}]*/\n\nvar foo = { bar: 1,\n            baz: 2 };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ineffective Empty Destructuring Pattern in JavaScript\nDESCRIPTION: Example showing a destructuring pattern that creates no variables due to empty curly braces being used to the right of an embedded object destructuring pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-pattern.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// doesn't create any variables\nconst {a: {}} = foo;\n```\n\n----------------------------------------\n\nTITLE: Correct Path Construction Using path.join()\nDESCRIPTION: Example of using Node.js path.join() method to create file paths, which handles platform-specific path separators correctly.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-path-concat.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar fullPath = path.join(__dirname, \"foo.js\");\n```\n\n----------------------------------------\n\nTITLE: Allowing Specific Dangling Underscores in Object Destructuring in JavaScript\nDESCRIPTION: Example of correct usage when 'allowInObjectDestructuring' is set to false, showing how to use dangling underscores in nested destructuring.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: [\"error\", { \"allowInObjectDestructuring\": false }]*/\n\nconst { foo, bar, _baz: { a, b } } = collection;\nconst { qux, xyz, _baz: baz } = collection;\n```\n\n----------------------------------------\n\nTITLE: Defining Active ESLint Rule using Macro\nDESCRIPTION: This example shows how to define an active (non-deprecated, non-removed) ESLint rule using the rule macro. It includes parameters for the rule name, description, and categories.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/rule.md#2025-04-14_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{{ rule({\n    name: \"getter-return\",\n    deprecated: false,\n    description: 'Enforce `return` statements in getters.',\n    categories: {\n        recommended: true,\n        fixable: false,\n        hasSuggestions: false\n    }\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Removed ESLint Rule with Replacement using Macro\nDESCRIPTION: This example demonstrates how to define a removed ESLint rule using the rule macro. It includes parameters for the rule name, removal status, description, replacement rules, and categories.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/rule.md#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{{ rule({\n    name: \"no-arrow-condition\",\n    removed: true,\n    description: 'Disallows arrow functions where test conditions are expected.',\n    replacedBy: [\"no-confusing-arrow\", \"no-constant-condition\"],\n    categories: {\n        recommended: false,\n        fixable: false,\n        hasSuggestions: false\n    }\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Identifier Examples\nDESCRIPTION: Examples of variable and function names that violate the camelCase naming convention rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-match.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\"]*/\n\nconst my_favorite_color = \"#112C85\";\nconst _myFavoriteColor  = \"#112C85\";\nconst myFavoriteColor_  = \"#112C85\";\nconst MY_FAVORITE_COLOR = \"#112C85\";\nfunction do_something() {\n    // ...\n}\n\nclass My_Class {}\n\nclass myClass {\n    do_something() {}\n}\n\nclass anotherClass {\n    #do_something() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: one-var with initialized:consecutive\nDESCRIPTION: An example showing correct variable declarations where consecutively initialized variables are grouped together when they appear sequentially, while allowing different groups separated by other code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\" }]*/\n\nfunction foo() {\n    var a = 1,\n        b = 2;\n\n    foo();\n\n    var c = 3,\n        d = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mixed Requires Examples\nDESCRIPTION: Shows invalid code patterns that mix require declarations with other variable declarations or mix different types of requires when grouping is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-requires.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-mixed-requires: \"error\"*/\n\nvar fs = require('fs'),\n    i = 0;\n\nvar async = require('async'),\n    debug = require('diagnostics').someFunction('my-module'),\n    eslint = require('eslint');\n```\n\n----------------------------------------\n\nTITLE: Correct usage of yield* with 'both' spacing (JavaScript)\nDESCRIPTION: Example of correct code for the yield-star-spacing rule with the 'both' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yield-star-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/*eslint yield-star-spacing: [\"error\", \"both\"]*/\n\nfunction * generator() {\n  yield * other();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - MaxEOF Option\nDESCRIPTION: Example showing correct code that adheres to the maxEOF setting of 0 empty lines at end of file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multiple-empty-lines.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multiple-empty-lines: [\"error\", { \"max\": 2, \"maxEOF\": 0 }]*/\n\nvar foo = 5;\n\n\nvar bar = 3;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ignore Computed Keys Option for sort-keys Rule\nDESCRIPTION: Examples of correct code when using the ignoreComputedKeys option which ignores computed properties for sorting requirements and resets the sort order for subsequent properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"asc\", {ignoreComputedKeys: true}]*/\n\nconst obj1 = {\n    [b]: 1,\n    a: 2\n}\n\nconst obj2 = {\n    c: 1,\n    [b]: 2,\n    a: 3\n}\n\nconst obj3 = {\n    c: 1,\n    [\"b\"]: 2,\n    a: 3\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Template Shorthand Usage in JavaScript\nDESCRIPTION: Examples of template shorthand usage that the rule flags as incorrect when the 'disallowTemplateShorthand' option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-coercion.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-coercion: [\"error\", { \"disallowTemplateShorthand\": true }]*/\n\nconst s = `${foo}`;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Template Tag Spacing (Always Option)\nDESCRIPTION: This JavaScript example shows correct usage of template tag spacing when the rule is set to 'always', with a space between the tag function and template literal.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-tag-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint template-tag-spacing: [\"error\", \"always\"]*/\n\nfunc `Hello world`;\n```\n\n----------------------------------------\n\nTITLE: Disallowing Dangling Underscores in Function Parameters in JavaScript\nDESCRIPTION: Example of using the 'allowFunctionParams' option set to false to disallow dangling underscores in function parameter names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: [\"error\", { \"allowFunctionParams\": false }]*/\n\nfunction foo1 (_bar) {}\nfunction foo2 (_bar = 0) {}\nfunction foo3 (..._bar) {}\n\nconst foo4 = function onClick (_bar) {}\nconst foo5 = function onClick (_bar = 0) {}\nconst foo6 = function onClick (..._bar) {}\n\nconst foo7 = (_bar) => {};\nconst foo8 = (_bar = 0) => {};\nconst foo9 = (..._bar) => {};\n```\n\n----------------------------------------\n\nTITLE: Detailed Formatter Output Example\nDESCRIPTION: Example output from the detailed formatter showing specific errors and warnings with file locations and rule references.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nerror space-infix-ops (https://eslint.org/docs/rules/space-infix-ops)\n  src/configs/bundler.js:6:8\nerror semi (https://eslint.org/docs/rules/semi)\n  src/configs/bundler.js:6:10\nwarning no-unused-vars (https://eslint.org/docs/rules/no-unused-vars)\n  src/configs/bundler.js:5:6\nwarning no-unused-vars (https://eslint.org/docs/rules/no-unused-vars)\n  src/configs/bundler.js:6:6\nwarning no-shadow (https://eslint.org/docs/rules/no-shadow)\n  src/configs/bundler.js:65:32\nwarning no-unused-vars (https://eslint.org/docs/rules/no-unused-vars)\n  src/configs/clean.js:3:6\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with skipComments Option\nDESCRIPTION: Examples of code that pass the no-irregular-whitespace rule when the skipComments option is enabled, allowing irregular whitespace in both line and block comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-irregular-whitespace.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-irregular-whitespace: [\"error\", { \"skipComments\": true }]*/\n\nfunction thing() {\n    // Description <NBSP>: some descriptive text\n}\n\n/*\nDescription <NBSP>: some descriptive text\n*/\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'never' Option\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'never' option, which disallows spaces before function parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-function-paren: [\"error\", \"never\"]*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nvar bar = function foo () {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n\nvar baz = async () => 1\n```\n\n----------------------------------------\n\nTITLE: Array Bracket Newline Rule - Combined Multiline and MinItems Examples\nDESCRIPTION: Examples demonstrating usage when both multiline and minItems options are specified together.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-newline.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", { \"multiline\": true, \"minItems\": 2 }]*/\n\nconst a = [\n];\nconst b = [\n    1\n];\nconst c = [1, 2];\nconst d = [1,\n    2];\nconst e = [function foo() {\n    dosomething();\n}];\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-newline: [\"error\", { \"multiline\": true, \"minItems\": 2 }]*/\n\nconst a = [];\nconst b = [1];\nconst c = [\n    1, 2\n];\nconst d = [\n    1,\n    2\n];\nconst e = [\n    function foo() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Correct Variable Declaration and Assignment\nDESCRIPTION: Shows valid patterns for declaring and assigning the designated alias in the same scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-this.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nlet that;\nthat = this;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Examples of Correct Label Usage\nDESCRIPTION: Examples showing proper usage of labels where they are declared and referenced in break statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-labels.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-labels: \"error\"*/\n\nA: {\n    if (foo()) {\n        break A;\n    }\n    bar();\n}\n\nB:\nfor (let i = 0; i < 10; ++i) {\n    if (foo()) {\n        break B;\n    }\n    bar();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Sequence Expressions in Arrow Functions\nDESCRIPTION: Examples of correct use of sequence expressions in arrow function bodies, using double parentheses to indicate intentional use.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sequences.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-sequences: \"error\"*/\nconst foo = (val) => ((console.log('bar'), val));\n\nconst baz = () => (((bar = 123), 10));\n\nconst qux = () => { return ((bar = 123), 10) }\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator Star Spacing Rule in ESLint\nDESCRIPTION: JSON configuration for the generator-star-spacing rule in ESLint, showing how to set options for spacing before and after the asterisk.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"generator-star-spacing\": [\"error\", {\"before\": true, \"after\": false}]\n```\n\n----------------------------------------\n\nTITLE: Using an Alternate Ignore File (Shell)\nDESCRIPTION: Specify an alternate ignore file using the --ignore-path option instead of the default .eslintignore file. This example uses .jshintignore, which has the same format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore-deprecated.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\neslint --ignore-path .jshintignore file.js\n```\n\n----------------------------------------\n\nTITLE: Additional Incorrect Examples with Different Mixed Configurations\nDESCRIPTION: More examples showing violations when using different combinations of settings for functions, keywords, and classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-blocks.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"always\", \"keywords\": \"never\", \"classes\": \"never\" }]*/\n\nfunction a(){}\n\ntry {} catch(a) {}\n\nclass Foo {\n  constructor(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Strict Mode Declaration in JavaScript\nDESCRIPTION: Example of enabling strict mode using the 'use strict' pragma in JavaScript code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/global-strict.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n```\n\n----------------------------------------\n\nTITLE: Integer Type Casting with Bitwise OR\nDESCRIPTION: Example of using bitwise OR for integer type casting when the int32Hint option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-bitwise.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-bitwise: [\"error\", { \"int32Hint\": true }] */\n\nconst b = a|0;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Code Separation in ESLint sort-imports Rule\nDESCRIPTION: Example demonstrating valid import sorting with allowSeparatedGroups enabled where a code statement separates import groups, allowing each group to follow its own sort order.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-imports: [\"error\", { \"allowSeparatedGroups\": true }]*/\n\nimport b from 'foo.js';\nimport c from 'bar.js';\nquux();\nimport a from 'baz.js';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Always Spacing Examples\nDESCRIPTION: Shows incorrect spacing examples when using the 'always' option, which requires spaces inside computed property brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/computed-property-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint computed-property-spacing: [\"error\", \"always\"]*/\n\nobj[foo]\nvar x = {[b]: a}\nobj[ foo]\nobj['foo' ]\nobj[foo[ bar ]]\nvar x = {[ b]: a}\nconst { [a]: someProp } = obj;\n({ [b ]: anotherProp } = anotherObj);\n```\n\n----------------------------------------\n\nTITLE: Correct Code with Mixed Variable Type Options\nDESCRIPTION: Examples demonstrating correct code when using different options for var, let, and const declarations in the one-var rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { var: \"always\", let: \"never\", const: \"never\" }]*/\n\nfunction foo1() {\n    var bar,\n        baz;\n    let qux;\n    let norf;\n}\n\nfunction foo2() {\n    const bar = 1;\n    const baz = 2;\n    let qux;\n    let norf;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples for the Default 'all' Option\nDESCRIPTION: Examples showing code patterns that would not be flagged by the rule when using the default 'all' option, demonstrating cases where parentheses are necessary or allowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: \"error\" */\n\n(0).toString();\n\n({}.toString.call());\n\n(function(){}) ? a() : b();\n\n(/^a$/).test(x);\n\nfor (a of (b, c));\n\nfor (a of b);\n\nfor (a in b, c);\n\nfor (a in b);\n\nclass A {\n    [x] = 1;\n}\n\nclass B {\n    x = y + z;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example of Rule Limitation\nDESCRIPTION: This snippet demonstrates a known limitation of the 'no-loop-func' rule. The rule cannot identify when a function is immediately invoked and discarded, which may lead to false positives.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-loop-func.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = [1, 2, 3, 4];\nvar i = 0;\n\nwhile(foo.some(e => e > i)){\n    i += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Array Usage with Ignored Value\nDESCRIPTION: Example of correct code using ignored number in array operations\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-magic-numbers.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-magic-numbers: [\"error\", { \"ignore\": [1] }]*/\n\nconst data = ['foo', 'bar', 'baz'];\nconst dataLast = data.length && data[data.length - 1];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'always' Option (JavaScript)\nDESCRIPTION: These examples demonstrate code that violates the no-cond-assign rule when the 'always' option is used, disallowing all assignments in conditional statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-cond-assign.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-cond-assign: [\"error\", \"always\"]*/\n\n// Unintentional assignment\nlet x;\nif (x = 0) {\n    const b = 1;\n}\n\n// Practical example that is similar to an error\nconst setHeight = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while (someNode = someNode.parentNode);\n}\n\n// Practical example that wraps the assignment in parentheses\nconst set_height = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode));\n}\n\n// Practical example that wraps the assignment and tests for 'null'\nconst heightSetter = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode) !== null);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'never' and '()' Exception\nDESCRIPTION: Examples of code that would be considered correct when using the 'never' option with an exception for nested parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"()\"] }]*/\n\nfoo( (1 + 2) );\nfoo( (1 + 2), 1);\nfoo(bar() );\n```\n\n----------------------------------------\n\nTITLE: Property Modification with Regex-Ignored Parameters\nDESCRIPTION: Examples showing allowed property modifications for parameters matching specific regex patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-param-reassign.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsForRegex\": [\"^bar\"] }]*/\n\nconst foo = function(barVar) {\n    barVar.prop = \"value\";\n}\n\nconst foo1 = function(barrito) {\n    delete barrito.aaa;\n}\n\nconst foo2 = function(bar_) {\n    bar_.aaa++;\n}\n\nconst foo3 = function(barBaz) {\n    for (barBaz.aaa in baz) {}\n}\n\nconst foo4 = function(barBaz) {\n    for (barBaz.aaa of baz) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of max-statements Rule with ignoreTopLevelFunctions Option in JavaScript\nDESCRIPTION: This example shows how the ignoreTopLevelFunctions option allows top-level functions to exceed the statement limit.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-statements.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-statements: [\"error\", 10, { \"ignoreTopLevelFunctions\": true }]*/\n\nfunction foo() {\n  const foo1 = 1;\n  const foo2 = 2;\n  const foo3 = 3;\n  const foo4 = 4;\n  const foo5 = 5;\n  const foo6 = 6;\n  const foo7 = 7;\n  const foo8 = 8;\n  const foo9 = 9;\n  const foo10 = 10;\n  const foo11 = 11;\n}\n```\n\n----------------------------------------\n\nTITLE: Value alignment in JavaScript objects\nDESCRIPTION: Examples showing value alignment configuration for object literal properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/key-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint key-spacing: [\"error\", { \"align\": \"value\" }]*/\n\nvar obj = {\n    a:    value,\n    bcde: 42,\n\n    fg: foo(),\n    h:  function() {\n        return this.a;\n    },\n    ijkl: 'Non-consecutive lines form a new group'\n};\n\nvar obj = { a: \"foo\", longPropertyName: \"bar\" };\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - First Comma Style\nDESCRIPTION: Examples of incorrect comma placement when using the 'first' option, showing violations where commas are placed at the end of lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-style.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-style: [\"error\", \"first\"]*/\n\nvar foo = 1,\n    bar = 2;\n\nvar foo = [\"apples\",\n           \"oranges\"];\n\nfunction baz() {\n    return {\n        \"a\": 1,\n        \"b:\": 2\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'always' and '{}' Exception\nDESCRIPTION: Examples of code that would be considered correct when using the 'always' option with an exception for curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo({bar: 'baz'});\nfoo( 1, {bar: 'baz'});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Last Comma Style\nDESCRIPTION: Examples of incorrect comma placement when using the default 'last' option, showing violations where commas are placed at the start of lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-style.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-style: [\"error\", \"last\"]*/\n\nvar foo = 1\n,\nbar = 2;\n\nvar foo = 1\n  , bar = 2;\n\nvar foo = [\"apples\"\n           , \"oranges\"];\n\nfunction baz() {\n    return {\n        \"a\": 1\n        ,\"b:\": 2\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for 'inside' with functionPrototypeMethods Option\nDESCRIPTION: Demonstrates code that complies with the wrap-iife rule when using the 'inside' option and functionPrototypeMethods set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-iife.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = (function(){ foo(); })()\nvar x = (function(){ foo(); }).call(bar)\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of curly braces with 'multi-or-nest' option in JavaScript\nDESCRIPTION: Examples of code that violate the 'curly' rule when set to the 'multi-or-nest' option. This option requires braces for nested blocks and multi-statement blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint curly: [\"error\", \"multi-or-nest\"]*/\n\nif (!foo)\n    foo = {\n        bar: baz,\n        qux: foo\n    };\n\nwhile (true)\n  if(foo)\n      doSomething();\n  else\n      doSomethingElse();\n\nif (foo) {\n    foo++;\n}\n\nwhile (true) {\n    doSomething();\n}\n\nfor (let i = 0; foo; i++) {\n    doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Regular Expression Usage Without Wrapping\nDESCRIPTION: Example showing incorrect usage where a regular expression is not wrapped in parentheses, potentially causing confusion with division operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-regex.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction a() {\n    return /foo/.test(\"bar\");\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect SwitchCase Indentation in JavaScript\nDESCRIPTION: Shows incorrect indentation for switch cases when the 'SwitchCase' option is set to 1.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"SwitchCase\": 1 }]*/\n\nswitch(a){\ncase \"a\":\n    break;\ncase \"b\":\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: one-var with initialized:always, uninitialized:never\nDESCRIPTION: An example showing correct variable declarations where initialized variables are grouped together in a single declaration and uninitialized variables are declared separately, following the rule configuration requirements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { \"initialized\": \"always\", \"uninitialized\": \"never\" }]*/\n\nfunction foo() {\n    var a;\n    var b;\n    var c;\n    var foo = true,\n        bar = false;\n}\n\nfor (let z of foo) {\n    doSomething(z);\n}\n\nlet z;\nfor (z of foo) {\n    doSomething(z);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with allowShortCircuit Option\nDESCRIPTION: Examples of code patterns that would be flagged as errors even with the allowShortCircuit option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }]*/\n\na || b\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Empty Line Before Line Comment (JavaScript)\nDESCRIPTION: Example of correct code that follows the rule by including an empty line before a line comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true }]*/\n\nvar night = \"long\";\n\n// what a great and wonderful day\nvar day = \"great\"\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'never' Option\nDESCRIPTION: Examples of correct ternary expression formatting when using the 'never' rule option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-ternary.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint multiline-ternary: [\"error\", \"never\"]*/\n\nfoo > bar ? value1 : value2;\n\nfoo > bar ? (baz > qux ? value1 : value2) : value3;\n\nfoo > bar ? (\n    baz > qux ? value1 : value2\n) : value3;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating constructor invocation without parentheses in JavaScript\nDESCRIPTION: This snippet shows how JavaScript allows omitting parentheses when invoking a constructor with no arguments using the 'new' keyword. This practice is considered by some to be inconsistent and less clear.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-parens.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar person = new Person;\n```\n\n----------------------------------------\n\nTITLE: Combining Paths and Patterns for Import Restrictions\nDESCRIPTION: Configuration that restricts imports from both exact paths and pattern-matched modules, demonstrating how to restrict a module and its submodules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n    \"paths\": [{\n      \"name\": \"import-foo\",\n    }],\n    \"patterns\": [{\n      \"group\": [\"import-foo/ba*\"],\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Disabling New eslint:recommended Rules in ESLint v4.0.0\nDESCRIPTION: Configuration snippet showing how to disable the newly added rules in eslint:recommended to maintain v3.x behavior. Disables 'no-compare-neg-zero' and 'no-useless-escape' rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-4.0.0.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\",\n\n\t\"rules\": {\n\t\t\"no-compare-neg-zero\": \"off\",\n\t\t\"no-useless-escape\": \"off\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Properly quoting reserved words as property names (correct)\nDESCRIPTION: These examples show the correct way to use reserved words as property names by enclosing them in quotes, which makes them compatible with ECMAScript 3 environments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-reserved-keys.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar superman = {\n    \"class\": \"Superhero\",\n    \"private\": \"Clark Kent\"\n};\n\nvar values = {\n    \"enum\": [\"red\", \"blue\", \"green\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Directive Usage Examples\nDESCRIPTION: Examples of string expressions that are flagged as errors because they are not properly placed in a directive prologue.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: \"error\"*/\n\ndoSomething();\n\"use strict\"; // this isn't in a directive prologue, because there is a non-directive statement before it\n\nfunction foo() {\n    \"bar\" + 1;\n}\n\nclass Foo {\n    static {\n        \"use strict\"; // class static blocks do not have directive prologues\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with Unicode Escape for Path Pattern\nDESCRIPTION: JSON configuration for the no-restricted-syntax rule demonstrating a workaround for regex patterns with forward slashes by using Unicode escape sequences.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/selectors.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"no-restricted-syntax\": [\n\t\t\t\"error\",\n\t\t\t\"ImportDeclaration[source.value=/^some\\\\u002Fpath$/]\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Array Element Formatting with 'never' Option in JavaScript\nDESCRIPTION: Examples of correctly formatted arrays that comply with the 'never' option, showing arrays without line breaks between elements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", \"never\"]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1, 2, 3];\nvar e = [\n    1, 2, 3];\nvar f = [\n  1, 2, 3\n];\nvar g = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with anonymous:ignore and named:always\nDESCRIPTION: Examples showing incorrect code when anonymous functions can have any spacing but named functions must have a space before parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"ignore\", \"named\": \"always\" }]*/\n\nfunction foo() {\n    // ...\n}\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Correct implementation of padded-blocks with 'classes: always' option in JavaScript\nDESCRIPTION: Examples of code that correctly implements padding inside class bodies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"classes\": \"always\" }]*/\n\nclass  A {\n\n    constructor(){\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Unused Variable Not Reported by no-useless-assignment\nDESCRIPTION: This example shows a case where an unused variable is not reported by the no-useless-assignment rule, as it's considered an unused variable rather than a useless assignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-assignment.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-useless-assignment: \"error\" */\n\nfunction fn() {\n    let v = 'unused';\n    v = 'unused-2'\n    doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Dangling Underscores After 'this.constructor' in JavaScript\nDESCRIPTION: Example of using the 'allowAfterThisConstructor' option to permit dangling underscores in members of the 'this.constructor' object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: [\"error\", { \"allowAfterThisConstructor\": true }]*/\n\nconst a = this.constructor.foo_;\nthis.constructor._bar();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Call Expression Argument Alignment in JavaScript\nDESCRIPTION: Example of incorrectly aligned call expression arguments with the indent-legacy rule set to 'first' argument alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, {\"CallExpression\": {\"arguments\": \"first\"}}]*/\n\nfoo(bar, baz,\n  baz, boop, beep);\n```\n\n----------------------------------------\n\nTITLE: Summary Formatter Output Example\nDESCRIPTION: Example output from the summary formatter showing error and warning counts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nErrors: 2, Warnings: 4\n```\n\n----------------------------------------\n\nTITLE: Minimum Length Rule Examples\nDESCRIPTION: Examples showing violations and correct usage with a minimum length requirement of 4 characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-length.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-length: [\"error\", { \"min\": 4 }]*/\n\nconst val = 5;\nobj.e = document.body;\nfunction foo (e) { };\ntry {\n    dangerousStuff();\n} catch (e) {\n    // ignore as many do\n}\nconst myObj = { a: 1 };\n(val) => { val * val };\nclass y { }\nclass Foo { x() {} }\nfunction bar(...x) { }\nconst { x } = {};\nconst { prop: a} = {};\nconst [i] = arr;\nconst { prop: [num]} = {};\n({ prop: obj.x } = {});\n```\n\n----------------------------------------\n\nTITLE: Correct Code with separateRequires Option - Separate Declarations\nDESCRIPTION: Example showing correct code with the separateRequires option, demonstrating properly separated require statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { separateRequires: true, var: \"always\" }]*/\n\nvar foo = require(\"foo\");\nvar bar = \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Correct code examples with allowAllPropertiesOnSameLine option\nDESCRIPTION: Examples of code that properly follow the object-property-newline rule when the allowAllPropertiesOnSameLine option is enabled, allowing all properties on one line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-property-newline: [\"error\", { \"allowAllPropertiesOnSameLine\": true }]*/\n\nconst obj = { foo: \"foo\", bar: \"bar\", baz: \"baz\" };\n\nconst obj2 = {\n    foo: \"foo\", bar: \"bar\", baz: \"baz\"\n};\nconst user = process.argv[2];\nconst obj3 = {\n    user, [process.argv[3] ? \"foo\" : \"bar\"]: 0, baz: [1, 2, 4, 8]\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for 'any' Option in wrap-iife Rule\nDESCRIPTION: Demonstrates code that complies with the wrap-iife rule when using the 'any' option, showing both valid wrapping styles.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-iife.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n----------------------------------------\n\nTITLE: Default Export Function Declaration - Correct Example\nDESCRIPTION: Example showing that direct default exports are still allowed even when 'default' is a restricted name, as the restriction only applies to named export declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictedNamedExports\": [\"default\", \"foo\"] }]*/\n\nexport default function foo() {}\n```\n\n----------------------------------------\n\nTITLE: Edge Cases of Backreference Syntax in JavaScript RegExp\nDESCRIPTION: This code block demonstrates additional edge cases where backreference-like syntax is not actually creating useless backreferences. In these cases, the syntax is interpreted differently, such as octal escape sequences when a referenced group doesn't exist.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-backreference.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-backreference: \"error\"*/\n\n// comments describe behavior in a browser\n\n/^[\\1](a)$/.test(\"\\x01a\"); // true. In a character class, \\1 is treated as an octal escape sequence.\n/^\\1$/.test(\"\\x01\"); // true. Since the group 1 doesn't exist, \\1 is treated as an octal escape sequence.\n/^(a)\\1\\2$/.test(\"aa\\x02\"); // true. In this case, \\1 is a backreference, \\2 is an octal escape sequence.\n```\n\n----------------------------------------\n\nTITLE: Configuring indent-legacy Rule with 2-Space Indentation\nDESCRIPTION: Shows how to configure the indent-legacy rule in ESLint to use 2-space indentation instead of the default 4 spaces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"indent-legacy\": [\"error\", 2]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect comma spacing examples with default options\nDESCRIPTION: Examples of code that violates the default comma-spacing rule configuration which disallows spaces before commas and requires spaces after commas.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n\nvar foo = 1 ,bar = 2;\nvar arr = [1 , 2];\nvar obj = {\"foo\": \"bar\" ,\"baz\": \"qur\"};\nfoo(a ,b);\nnew Foo(a ,b);\nfunction baz(a ,b){}\na ,b\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Declaration Without Initialization\nDESCRIPTION: Shows invalid pattern where the designated alias is declared but initialized in a different scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-this.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nlet that;\nfunction f() {\n    that = this;\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Keywords Option Example\nDESCRIPTION: Example showing correct usage when allowKeywords option is set to false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-notation.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint dot-notation: [\"error\", { \"allowKeywords\": false }]*/\n\nconst foo = { \"class\": \"CS 101\" }\nconst x = foo[\"class\"]; // Property name is a reserved word, square-bracket notation required\n```\n\n----------------------------------------\n\nTITLE: Suppressing Specific Rule Violations in ESLint\nDESCRIPTION: Command to suppress existing violations for a specific rule. This allows for more targeted suppression when you don't want to suppress all rule violations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/suppressions.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neslint --fix --suppress-rule no-unused-expressions\n```\n\n----------------------------------------\n\nTITLE: Correct usage with prefer-reflect rule\nDESCRIPTION: Examples of code that follows the prefer-reflect rule by using Reflect.deleteProperty() for object properties, while still allowing the delete operator for variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-reflect.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-reflect: \"error\"*/\n\ndelete bar; // deleting variable\nReflect.deleteProperty(foo, 'bar');\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Arrow Functions with 'always' Option (JavaScript)\nDESCRIPTION: Examples of incorrect code for the 'arrow-parens' rule with the default 'always' option, showing various cases where parentheses are required but omitted.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-parens: [\"error\", \"always\"]*/\n\na => {};\na => a;\na => {'\\n'};\na.then(foo => {});\na.then(foo => a);\na(foo => { if (true) {} });\n```\n\n----------------------------------------\n\nTITLE: Correct Array Bracket Spacing with 'objectsInArrays' Exception in JavaScript\nDESCRIPTION: Examples of code that would be correct when the 'objectsInArrays' exception is set to false with the 'always' option, showing arrays containing objects with proper spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"objectsInArrays\": false }]*/\n\nvar arr = [{ 'foo': 'bar' }];\nvar arr = [{\n  'foo': 'bar'\n}];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Grouped Requires Example\nDESCRIPTION: Shows invalid code patterns when the grouping option is enabled, mixing different types of require statements together.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-requires.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-mixed-requires: [\"error\", { \"grouping\": true }]*/\n\n// invalid because of mixed types \"core\" and \"module\"\nvar fs = require('fs'),\n    async = require('async');\n\n// invalid because of mixed types \"file\" and \"unknown\"\nvar foo = require('foo'),\n    bar = require(getBarModuleName());\n```\n\n----------------------------------------\n\nTITLE: ASI interpretation of return statement\nDESCRIPTION: Shows how JavaScript engine actually interprets the previous code example with ASI, inserting a semicolon after the return statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn;\n{\n    name: \"ESLint\";\n}\n```\n\n----------------------------------------\n\nTITLE: Guarded for...in Loop Using Object.hasOwn in JavaScript\nDESCRIPTION: A correct example using Object.hasOwn() to filter properties in a for...in loop. This method is recommended for codebases supporting ES2022.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/guard-for-in.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor (key in foo) {\n    if (Object.hasOwn(foo, key)) {\n        doSomething(key);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of yield* with 'after' spacing (JavaScript)\nDESCRIPTION: Example of correct code for the yield-star-spacing rule with the default 'after' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yield-star-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/*eslint yield-star-spacing: [\"error\", \"after\"]*/\n\nfunction* generator() {\n  yield* other();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with Asterisk Decoration Configuration\nDESCRIPTION: Shows comments that would trigger warnings when using the 'decoration' option with asterisks, ignoring decorative characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-warning-comments.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-warning-comments: [\"error\", { \"decoration\": [\"*\"] }]*/\n\n//***** todo decorative asterisks are ignored *****//\n/**\n * TODO new lines and asterisks are also ignored in block comments.\n */\n```\n\n----------------------------------------\n\nTITLE: Correct Import With Regex Pattern\nDESCRIPTION: Example of code that passes the rule by importing a module that doesn't match the regex pattern or matches an allowed pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    regex: \"@app/(?!(api/enums$)).*\",\n}]}]*/\n\nimport Foo from '@app/api/enums';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for 'always' Option in ESLint operator-assignment Rule\nDESCRIPTION: Examples of JavaScript code that violate the operator-assignment rule when configured with the 'always' option, which requires using shorthand operators when possible.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-assignment.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*eslint operator-assignment: [\"error\", \"always\"]*/\n\nx = x + y;\nx = y * x;\nx[0] = x[0] / y;\nx.y = x.y << z;\n```\n\n----------------------------------------\n\nTITLE: Multiple Property Restrictions with Custom Message\nDESCRIPTION: Shows how to configure multiple property restrictions with custom error messages.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-properties.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"object\": \"disallowedObjectName\",\n            \"property\": \"disallowedPropertyName\"\n        }, {\n            \"object\": \"disallowedObjectName\",\n            \"property\": \"anotherDisallowedPropertyName\",\n            \"message\": \"Please use allowedObjectName.allowedPropertyName.\"\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of newline-before-return Rule in JavaScript\nDESCRIPTION: These examples show code that correctly follows the newline-before-return rule in ESLint, demonstrating various scenarios where newlines are required or optional.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-before-return.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint newline-before-return: \"error\"*/\n\nfunction foo1() {\n    return;\n}\n\nfunction foo2() {\n\n    return;\n}\n\nfunction foo3(bar) {\n    if (!bar) return;\n}\n\nfunction foo4(bar) {\n    if (!bar) { return };\n}\n\nfunction foo5(bar) {\n    if (!bar) {\n        return;\n    }\n}\n\nfunction foo6(bar) {\n    if (!bar) {\n        return;\n    }\n\n    return bar;\n}\n\nfunction foo7(bar) {\n    if (!bar) {\n\n        return;\n    }\n}\n\nfunction foo8() {\n\n    // comment\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of allowImportNamePattern Option\nDESCRIPTION: Example showing correct usage when importing names that match the allowed pattern beginning with 'is'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_41\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    allowImportNamePattern: '^is'\n}]}]*/\n\nimport { isEmpty } from 'utils/collection-utils';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating One True Brace Style in JavaScript\nDESCRIPTION: Example of the one true brace style (1tbs) in JavaScript, where the opening brace is placed on the same line as its corresponding statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/brace-style.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Statements with NaN When enforceForSwitchCase Is Disabled\nDESCRIPTION: Examples showing code that is allowed when the enforceForSwitchCase option is explicitly set to false, which permits NaN in switch statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/use-isnan.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint use-isnan: [\"error\", {\"enforceForSwitchCase\": false}]*/\n\nswitch (foo) {\n    case NaN:\n        bar();\n        break;\n    case 1:\n        baz();\n        break;\n    // ...\n}\n\nswitch (NaN) {\n    case a:\n        bar();\n        break;\n    case b:\n        baz();\n        break;\n    // ...\n}\n\nswitch (foo) {\n    case Number.NaN:\n        bar();\n        break;\n    case 1:\n        baz();\n        break;\n    // ...\n}\n\nswitch (Number.NaN) {\n    case a:\n        bar();\n        break;\n    case b:\n        baz();\n        break;\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Console Override Example\nDESCRIPTION: Example of console method override with ESLint disable comments\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-console.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-console: [\"error\", { allow: [\"warn\"] }] */\nconsole.error = function (message) {\n  throw new Error(message);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring lines-around-comment with afterBlockComment and allowObjectEnd in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with afterBlockComment and allowObjectEnd options enabled, allowing block comments at the end of object literals without requiring a blank line after them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"afterBlockComment\": true, \"allowObjectEnd\": true }]*/\n\nvar foo = {\n    day: \"great\"\n\n    /* what a great and wonderful day */\n};\n\nconst {\n    foo: someDay\n\n    /* what a great and wonderful day */\n} = {foo: \"great\"};\n\nconst {\n    day\n\n    /* what a great and wonderful day */\n} = {day: \"great\"};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of newline-before-return Rule in JavaScript\nDESCRIPTION: These examples demonstrate code that violates the newline-before-return rule in ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-before-return.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint newline-before-return: \"error\"*/\n\nfunction foo1(bar) {\n    if (!bar) {\n        return;\n    }\n    return bar;\n}\n\nfunction foo2(bar) {\n    if (!bar) {\n        return;\n    }\n    /* multi-line\n    comment */\n    return bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring lines-around-comment with beforeBlockComment and allowArrayStart in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with beforeBlockComment and allowArrayStart options enabled, which allows block comments at the start of array literals without requiring a blank line before them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true, \"allowArrayStart\": true }]*/\n\nvar day = [\n    /* what a great and wonderful day */\n    \"great\",\n    \"wonderful\"\n];\n\nconst [\n    /* what a great and wonderful day */\n    someDay\n] = [\"great\", \"not great\"];\n```\n\n----------------------------------------\n\nTITLE: Restricting Named Default Exports - Incorrect Example\nDESCRIPTION: Example showing how the rule restricts exporting a variable as default using named export syntax when the 'named' option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"named\": true } }]*/\n\nconst foo = 123;\n\nexport { foo as default };\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Static Blocks in JavaScript\nDESCRIPTION: This snippet shows examples of correct code that comply with the 'no-empty-static-block' rule. It includes a static block with content and a static block with a comment, both of which are allowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-static-block.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-empty-static-block: \"error\"*/\n\nclass Foo {\n    static {\n        bar();\n    }\n}\n\nclass Bar {\n    static {\n        // comment\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ESLint Rule: consistent-return\nDESCRIPTION: This snippet defines the 'consistent-return' rule in ESLint. It requires return statements to either always or never specify values. The rule includes configuration options and error messages.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n\"consistent-return\": {\n    \"type\": \"suggestion\",\n    \"docs\": {\n        \"description\": \"Require `return` statements to either always or never specify values\",\n        \"recommended\": false,\n        \"url\": \"https://eslint.org/docs/latest/rules/consistent-return\"\n    },\n    \"schema\": [\n        {\n            \"type\": \"object\",\n            \"properties\": {\n                \"treatUndefinedAsUnspecified\": {\n                    \"type\": \"boolean\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ],\n    \"defaultOptions\": [\n        {\n            \"treatUndefinedAsUnspecified\": false\n        }\n    ],\n    \"messages\": {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Empty Character Classes in JavaScript RegEx\nDESCRIPTION: This snippet shows various examples of regular expressions with empty character classes, which are considered incorrect according to the no-empty-character-class rule. These empty classes do not match anything and might be typing mistakes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-character-class.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-character-class: \"error\"*/\n\n/^abc[]/.test(\"abcdefg\"); // false\n\"abcdefg\".match(/^abc[]/);\n // null\n\n/^abc[[]]/v.test(\"abcdefg\"); // false\n\"abcdefg\".match(/^abc[[]]/v); // null\n\n/^abc[[]--[x]]/v.test(\"abcdefg\"); // false\n\"abcdefg\".match(/^abc[[]--[x]]/v); // null\n\n/^abc[[d]&&[]]/v.test(\"abcdefg\"); // false\n\"abcdefg\".match(/^abc[[d]&&[]]/v); // null\n\nconst regex = /^abc[d[]]/v;\nregex.test(\"abcdefg\"); // true, the nested `[]` has no effect\n\"abcdefg\".match(regex); // [\"abcd\"]\nregex.test(\"abcefg\"); // false, the nested `[]` has no effect\n\"abcefg\".match(regex); // null\nregex.test(\"abc\"); // false, the nested `[]` has no effect\n\"abc\".match(regex); // null\n```\n\n----------------------------------------\n\nTITLE: Correct Import Following Pattern Group Advice\nDESCRIPTION: Example of code that follows the guidance provided in the custom message to use the default import instead of individual modules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"lodash/*\"],\n    message: \"Please use the default import from 'lodash' instead.\"\n}]}]*/\n\nimport lodash from 'lodash';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for 'never' Option in ESLint operator-assignment Rule\nDESCRIPTION: Examples of JavaScript code that violate the operator-assignment rule when configured with the 'never' option, which disallows using shorthand operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-assignment.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/*eslint operator-assignment: [\"error\", \"never\"]*/\n\nx *= y;\nx ^= (y + z) / foo();\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Generator Functions with 'both' Option\nDESCRIPTION: Examples of correctly formatted generator functions when both 'before' and 'after' options are set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint generator-star-spacing: [\"error\", {\"before\": true, \"after\": true}]*/\n\nfunction * generator() {}\n\nvar anonymous = function * () {};\n\nvar shorthand = { * generator() {} };\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Accessor Pairs with Default ESLint Configuration\nDESCRIPTION: These examples demonstrate code that violates the 'accessor-pairs' rule with default settings, showing objects with setters but no corresponding getters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/accessor-pairs.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint accessor-pairs: \"error\"*/\n\nconst q = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\n\nconst r = {d: 1};\nObject.defineProperty(r, 'c', {\n    set: function(value) {\n        this.val = value;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: GetBeforeSet Option Examples - Incorrect\nDESCRIPTION: Examples demonstrating incorrect implementations when using the 'getBeforeSet' option, where setters appear before getters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/grouped-accessor-pairs.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint grouped-accessor-pairs: [\"error\", \"getBeforeSet\"]*/\n\nconst foo = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Allowing Dangling Underscores After 'super' in JavaScript\nDESCRIPTION: Example of using the 'allowAfterSuper' option to permit dangling underscores in members of the 'super' object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: [\"error\", { \"allowAfterSuper\": true }]*/\n\nclass Foo extends Bar {\n  doSomething() {\n    const a = super.foo_;\n    super._bar();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for 'any' Option in wrap-iife Rule\nDESCRIPTION: Shows code that violates the wrap-iife rule when configured with the 'any' option, which requires wrapping but allows either style.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-iife.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with props:false Option in JavaScript\nDESCRIPTION: Examples of code that would pass the no-self-assign rule when the 'props' option is set to false, allowing self-assignments of properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-self-assign.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-self-assign: [\"error\", {\"props\": false}]*/\n\n// self-assignments with properties.\nobj.a = obj.a;\nobj.a.b = obj.a.b;\nobj[\"a\"] = obj[\"a\"];\nobj[a] = obj[a];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage with includeExports Option in JavaScript\nDESCRIPTION: This snippet shows incorrect usage when the includeExports option is set to true. It demonstrates a case where an import and an export from the same module should be combined.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-imports.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-duplicate-imports: [\"error\", { \"includeExports\": true }]*/\n\nimport { merge } from 'module';\n\nexport { find } from 'module';\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Empty Line Before Block Comment (JavaScript)\nDESCRIPTION: Example of correct code that follows the rule by including an empty line before a block comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true }]*/\n\nvar night = \"long\";\n\n/* what a great and wonderful day */\nvar day = \"great\"\n```\n\n----------------------------------------\n\nTITLE: Alternative ESLint Configuration for Restricting If Statements Without Block Bodies\nDESCRIPTION: An equivalent JSON configuration for the no-restricted-syntax rule using attribute syntax to disallow if statements without block bodies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/selectors.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"no-restricted-syntax\": [\n\t\t\t\"error\",\n\t\t\t\"IfStatement[consequent.type!='BlockStatement']\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of single spaces in JavaScript\nDESCRIPTION: Example showing the recommended approach with single spaces between identifiers.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif(foo === \"bar\") {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with Mixed Variable Type Options\nDESCRIPTION: Examples demonstrating incorrect code when using different options for var, let, and const declarations in the one-var rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { var: \"always\", let: \"never\", const: \"never\" }]*/\n\nfunction foo1() {\n    var bar;\n    var baz;\n    let qux,\n        norf;\n}\n\nfunction foo2() {\n    const bar = 1,\n          baz = 2;\n    let qux,\n        norf;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Template Tag Spacing (Always Option)\nDESCRIPTION: This JavaScript example demonstrates incorrect usage of template tag spacing when the rule is set to 'always', showing no space between the tag function and template literal.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-tag-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint template-tag-spacing: [\"error\", \"always\"]*/\n\nfunc`Hello world`;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Chained Method Calls - Multi Line Example\nDESCRIPTION: Example of the same chained method calls written with line breaks after each call, showing improved readability.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-per-chained-call.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3\n    .select(\"body\")\n    .selectAll(\"p\")\n    .data([\n        4,\n        8,\n        15,\n        16,\n        23,\n        42\n    ])\n    .enter()\n    .append(\"p\")\n    .text(function (d) {\n        return \"I'm number \" + d + \"!\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Named Capture Groups\nDESCRIPTION: Examples of correct regular expression patterns using named capture groups and non-capturing groups.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-named-capture-group.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-named-capture-group: \"error\"*/\n\nconst foo = /(?<id>ba[rz])/;\nconst bar = new RegExp('(?<id>ba[rz])');\nconst baz = RegExp('(?<id>ba[rz])');\nconst xyz = /xyz(?:zy|abc)/;\n\nfoo.exec('bar').groups.id; // Retrieve the group result.\n```\n\n----------------------------------------\n\nTITLE: Basic Rest/Spread Usage Examples in JavaScript\nDESCRIPTION: Demonstrates common use cases of rest and spread operators including function arguments, array operations, and destructuring assignments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/rest-spread-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet numArr = [1, 2, 3];\nfunction add(a, b, c) {\n    return a + b + c;\n}\nadd(...numArr); // -> 6\n\nlet arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\narr1.push(...arr2); // -> [1, 2, 3, 4, 5, 6]\n\nlet [a, b, ...arr] = [1, 2, 3, 4, 5];\na; // -> 1\nb // -> 2\narr; // ->  [3, 4, 5]\n\nfunction numArgs(...args) {\n  return args.length;\n}\nnumArgs(a, b, c); // -> 3\n```\n\n----------------------------------------\n\nTITLE: Using Custom Ignore Pattern for Line Comment Position Rule\nDESCRIPTION: This snippet demonstrates the use of a custom ignore pattern 'pragma' to allow certain comments to bypass the position rule. The ESLint configuration and a valid example are shown.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/line-comment-position.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\" }]*/\n1 + 1; // pragma valid comment\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with space-after-keywords Rule Set to 'always'\nDESCRIPTION: Demonstrates code that would be flagged as incorrect when the rule is set to require spaces after keywords.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-after-keywords.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-after-keywords: \"error\"*/\n\nif(a) {}\n\nif (a) {} else{}\n\ndo{} while (a);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import Sorting Examples in JavaScript\nDESCRIPTION: Shows examples of incorrectly sorted import statements that violate the sort-imports rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-imports: \"error\"*/\nimport b from 'foo.js';\nimport a from 'bar.js';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of camelcase Rule with 'ignoreDestructuring: true' Option\nDESCRIPTION: Examples of code that violate the camelcase rule with the { \"ignoreDestructuring\": true } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nconst { category_id: category_alias } = query;\n\nconst { category_id, ...other_props } = query;\n```\n\n----------------------------------------\n\nTITLE: Example of varsIgnorePattern Not Applying to Catch Arguments\nDESCRIPTION: Example showing that in ESLint v9.0.0, the 'varsIgnorePattern' option of 'no-unused-vars' no longer applies to catch clause arguments, requiring the use of 'caughtErrorsIgnorePattern'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\", \"varsIgnorePattern\": \"^err\" }]*/\n\ntry {\n\t//...\n} catch (err) {\n\t// 'err' will be reported.\n\tconsole.error(\"errors\");\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Multiple Rule Violations in ESLint\nDESCRIPTION: Command to suppress existing violations for multiple specific rules by providing multiple --suppress-rule flags.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/suppressions.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\neslint --fix --suppress-rule no-unused-expressions --suppress-rule no-unsafe-assignment\n```\n\n----------------------------------------\n\nTITLE: Basic Object Property Quoting Examples\nDESCRIPTION: Demonstrates equivalent object declarations with and without quoted property names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quote-props.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar object1 = {\n    property: true\n};\n\nvar object2 = {\n    \"property\": true\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Bracket Spacing with 'singleValue' Exception in JavaScript\nDESCRIPTION: Examples of code that would be incorrect when the 'singleValue' exception is set to false with the 'always' option, showing arrays with single values having improper spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"singleValue\": false }]*/\n\nvar foo = [ 'foo' ];\nvar foo = [ 'foo'];\nvar foo = ['foo' ];\nvar foo = [ 1 ];\nvar foo = [ 1];\nvar foo = [1 ];\nvar foo = [ [ 1, 2 ] ];\nvar foo = [ { 'foo': 'bar' } ];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Bitwise Operations\nDESCRIPTION: Examples of code that would trigger the no-bitwise rule, including various bitwise operators and compound assignment operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-bitwise.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-bitwise: \"error\"*/\n\nlet x = y | z;\n\nconst x1 = y & z;\n\nconst x2 = y ^ z;\n\nconst x3 = ~ z;\n\nconst x4 = y << z;\n\nconst x5 = y >> z;\n\nconst x6 = y >>> z;\n\nx |= y;\n\nx &= y;\n\nx ^= y;\n\nx <<= y;\n\nx >>= y;\n\nx >>>= y;\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Configuration with YAML\nDESCRIPTION: Example of extending a shareable configuration (standard) and modifying rules using YAML format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nextends: standard\nrules:\n    comma-dangle:\n        - error\n        - always\n    no-empty: warn\n```\n\n----------------------------------------\n\nTITLE: Correct Never Option Example - JavaScript\nDESCRIPTION: Example of code that complies with the 'never' initialization rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint init-declarations: [\"error\", \"never\"]*/\n\nfunction foo() {\n    var bar;\n    let baz;\n    const buzz = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for ESM Projects\nDESCRIPTION: Configuration setup for ESM projects using type:module in eslint.config.js\nSOURCE: https://github.com/eslint/eslint/blob/main/packages/eslint-config-eslint/README.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\nimport eslintConfigESLint from \"eslint-config-eslint\";\n\nexport default defineConfig([eslintConfigESLint]);\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples in ES Modules with blockScopedFunctions: \"allow\"\nDESCRIPTION: Shows permitted code patterns in ES modules where strict mode is implicitly enabled. Function declarations in blocks are allowed when using modules or classes, as they are always in strict mode.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inner-declarations: [\"error\", \"functions\", { blockScopedFunctions: \"allow\" }]*/\n\nif (test) {\n    function doSomething() { }\n}\n\nfunction doSomethingElse() {\n    if (test) {\n        function doAnotherThing() { }\n    }\n}\n\nclass Some {\n    static {\n        if (test) {\n            function doSomething() { }\n        }\n    }\n}\n\nconst C = class {\n    static {\n        if (test) {\n            function doSomething() { }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of object-curly-spacing with 'always' option in JavaScript\nDESCRIPTION: Examples of code that violate the 'object-curly-spacing' rule when set to 'always', showing incorrect spacing inside curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-curly-spacing: [\"error\", \"always\"]*/\n\nvar obj = {'foo': 'bar'};\nvar obj = {'foo': 'bar' };\nvar obj = { baz: {'foo': 'qux'}, bar};\nvar obj = {baz: { 'foo': 'qux' }, bar};\nvar obj = {'foo': 'bar'\n};\nvar obj = {\n  'foo':'bar'};\nvar {x} = y;\nimport {foo } from 'bar';\n```\n\n----------------------------------------\n\nTITLE: Importing a Module Without Exported Bindings in JavaScript\nDESCRIPTION: Demonstrates how to import a module that doesn't export anything but runs its own code or changes the global context.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// none - Import module without exported bindings.\nimport \"my-module.js\"\n```\n\n----------------------------------------\n\nTITLE: Correct Array Bracket Spacing with 'always' Option in JavaScript\nDESCRIPTION: Examples of code that would be considered correct when the rule is set to 'always', showing proper spacing inside array brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-spacing: [\"error\", \"always\"]*/\n\nvar arr = [];\nvar arr = [ 'foo', 'bar', 'baz' ];\nvar arr = [ [ 'foo' ], 'bar', 'baz' ];\nvar arr = [ 'foo',\n  'bar'\n];\nvar arr = [\n  'foo',\n  'bar' ];\nvar arr = [\n  'foo',\n  'bar',\n  'baz'\n];\n\nvar [ x, y ] = z;\nvar [ x,y ] = z;\nvar [ x, ...y ] = z;\nvar [ ,,x, ] = z;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import With allowImportNames\nDESCRIPTION: Example of code that violates the rule by importing a named export that is not in the allowImportNames list from a module matching the pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    allowImportNames: ['isEmpty'],\n    message: \"Please use only 'isEmpty' from utils.\"\n}]}]*/\n\nimport { hasValues } from 'utils/collection-utils';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Case-Insensitive Sorting for sort-keys Rule\nDESCRIPTION: Examples of correctly ordered object properties when using case-insensitive sorting with the caseSensitive:false option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"asc\", {caseSensitive: false}]*/\n\nconst obj1 = {a: 1, b: 2, c: 3, C: 4};\nconst obj2 = {a: 1, b: 2, C: 3, c: 4};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples for the \"both\" Option\nDESCRIPTION: Shows code patterns that violate the no-inner-declarations rule with the \"both\" option, which disallows both function and var declarations in nested blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inner-declarations: [\"error\", \"both\"]*/\n\nif (test) {\n    var foo = 42;\n}\n\nfunction doAnotherThing() {\n    if (test) {\n        var bar = 81;\n    }\n}\n\nif (foo) var a;\n\nif (foo) function f(){}\n\nclass C {\n    static {\n        if (test) {\n            var something;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Generator Function Without yield\nDESCRIPTION: Example of a generator function that doesn't use the yield keyword, which triggers the require-yield rule error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-yield.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint require-yield: \"error\"*/\n\nfunction* foo() {\n  return 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Bare-Block Option\nDESCRIPTION: Example of correct multiline comment formatting using the bare-block option, showing proper bare block style.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-comment-style.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* this line\n   calls foo() */\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Diff Example - Single Line Changes\nDESCRIPTION: Example showing how changes in single-line chained methods appear in diffs, demonstrating less clear change visibility.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-per-chained-call.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-d3.select(\"body\").selectAll(\"p\").style(\"color\", \"white\");\n+d3.select(\"body\").selectAll(\"p\").style(\"color\", \"blue\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import Usage Example\nDESCRIPTION: Example showing incorrect usage of restricted fs module import.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nimport fs from 'fs';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Alternative to 'with' Statement in JavaScript\nDESCRIPTION: This code snippet shows a correct alternative to using the 'with' statement. It uses object destructuring and an arrow function to achieve the same result in a clearer and ESLint-compliant manner.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-with.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-with: \"error\"*/\n\nconst r = ({x, y}) => Math.sqrt(x * x + y * y);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Trailing Commas with 'only-multiline' Option\nDESCRIPTION: These JavaScript snippets demonstrate correct usage of trailing commas in various scenarios when the 'comma-dangle' rule is set to 'only-multiline'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of allowSeparatedGroups Option in ESLint sort-imports Rule\nDESCRIPTION: Example showing code that violates the sort-imports rule when allowSeparatedGroups is enabled. All imports are on consecutive lines but are not alphabetically sorted.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-imports: [\"error\", { \"allowSeparatedGroups\": true }]*/\n\nimport b from 'foo.js';\nimport c from 'bar.js';\nimport a from 'baz.js';\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Empty Line After Block Comment (JavaScript)\nDESCRIPTION: Example of correct code that follows the rule by including an empty line after a block comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"afterBlockComment\": true }]*/\n\nvar night = \"long\";\n\n/* what a great and wonderful day */\n\nvar day = \"great\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'always' Option - JavaScript\nDESCRIPTION: Shows incorrect code examples when the rule is configured with the 'always' option, where spaces are required before all function parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-parentheses.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function foo() {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Array Constructor in TypeScript\nDESCRIPTION: Examples of code that violate the no-array-constructor rule in TypeScript. These uses of the Array constructor are discouraged, even with TypeScript syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-array-constructor.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint no-array-constructor: \"error\"*/\n\nnew Array();\n\nnew Array(0, 1, 2);\n\nArray?.(x, y);\n\nArray?.(0, 1, 2);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of camelcase Rule in JavaScript\nDESCRIPTION: Examples of code that violate the camelcase rule with the default { \"properties\": \"always\" } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: \"error\"*/\n\nimport { no_camelcased } from \"external-module\"\n\nconst my_favorite_color = \"#112C85\";\n\nfunction do_something() {\n    // ...\n}\n\nobj.do_something = function() {\n    // ...\n};\n\nfunction foo({ no_camelcased }) {\n    // ...\n};\n\nfunction bar({ isCamelcased: no_camelcased }) {\n    // ...\n}\n\nfunction baz({ no_camelcased = 'default value' }) {\n    // ...\n};\n\nconst obj = {\n    my_pref: 1\n};\n\nconst { category_id = 1 } = query;\n\nconst { foo: snake_cased } = bar;\n\nconst { foo: bar_baz = 1 } = quz;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with skipBlankLines Option in JavaScript\nDESCRIPTION: Example showing code with the skipBlankLines option enabled, allowing trailing whitespace on empty lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-trailing-spaces.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-trailing-spaces: [\"error\", { \"skipBlankLines\": true }]*/\n\nvar foo = 0;\nvar baz = 5;\n// ↓ a line with whitespace only ↓\n     \n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Strict Mode with Single Outer Declaration\nDESCRIPTION: This example demonstrates the correct approach where strict mode is declared only once at the outer scope level, avoiding redundant declarations in inner scopes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-strict.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\n(function () {\n    var foo = true;\n}());\n```\n\n----------------------------------------\n\nTITLE: Implementing padded-blocks with 'classes: never' option in JavaScript\nDESCRIPTION: Examples of incorrect code when using the option that disallows padding inside class bodies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"classes\": \"never\" }]*/\n\nclass  A {\n\n    constructor(){\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of function-paren-newline with 'never' option (JavaScript)\nDESCRIPTION: Examples of code that violate the 'function-paren-newline' rule when set to 'never'. Shows functions and arrow functions with line breaks inside parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-paren-newline.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/* eslint function-paren-newline: [\"error\", \"never\"] */\n\nfunction foo(\n  bar,\n  baz\n) {}\n\nvar qux = function(\n  bar, baz\n) {};\n\nvar qux = (\n  bar,\n  baz\n) => {};\n\nfoo(\n  bar,\n  baz\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with new require()\nDESCRIPTION: Demonstrates the problematic pattern of using new with require() directly, which is discouraged.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-require.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar appHeader = new require('app-header');\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'always' and '{}' Exception\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'always' option with an exception for curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo( {bar: 'baz'} );\nfoo( 1, {bar: 'baz'} );\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with space-after-keywords Rule Set to 'never'\nDESCRIPTION: Shows code that would be flagged as incorrect when the rule is configured to disallow spaces after keywords.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-after-keywords.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-after-keywords: [\"error\", \"never\"]*/\n\nif (a) {}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Front Matter for ESLint Documentation Page\nDESCRIPTION: This code snippet defines the front matter for the ESLint documentation index page. It specifies the title of the page and sets a custom permalink for the URL.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/pages/index.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Documentation\npermalink: /index.html\n---\n```\n\n----------------------------------------\n\nTITLE: Testing regional indicator symbols in RegExp character classes\nDESCRIPTION: Example showing how flag emojis (made of regional indicator symbol pairs) are incorrectly handled in RegExp character classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-misleading-character-class.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/^[🇯🇵]$/u.test(\"🇯🇵\"); //→ false\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Example for SwitchCase Option\nDESCRIPTION: Shows an example of incorrectly indented switch statement when the SwitchCase option is set to 1.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"SwitchCase\": 1 }]*/\n\nswitch(a){\ncase \"a\":\n    break;\ncase \"b\":\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Additional Correct Examples with Different Mixed Configurations\nDESCRIPTION: More examples showing correct code with different combinations of settings for functions, keywords, and classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-blocks.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"always\", \"keywords\": \"never\", \"classes\": \"never\" }]*/\n\nif (a){\n  b();\n}\n\nvar a = function() {}\n\nclass Foo{\n  constructor() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct implementation of padded-blocks with 'switches: never' option in JavaScript\nDESCRIPTION: Examples of code that correctly implements no padding inside switch statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"switches\": \"never\" }]*/\n\nswitch (a) {\n    case 0: foo();\n}\n\nif (a) {\n\n    b();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Default Configuration\nDESCRIPTION: Examples of code that violates the default semi-spacing rule configuration\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi-spacing: \"error\"*/\n\nvar foo ;\nvar foo;var bar;\nthrow new Error(\"error\") ;\nwhile (a) { break ; }\nfor (i = 0 ; i < 10 ; i++) {}\nfor (i = 0;i < 10;i++) {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect code for ImportDeclaration and ExportDeclaration options\nDESCRIPTION: Examples of code that would trigger the object-curly-newline rule when ImportDeclaration is set to 'always' and ExportDeclaration to 'never', showing different requirements for imports and exports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", { \"ImportDeclaration\": \"always\", \"ExportDeclaration\": \"never\" }]*/\n\nimport {foo, bar} from 'foo-bar';\nimport {foo as f, baz} from 'foo-bar';\nimport {qux,\n    foobar} from 'foo-bar';\n\nexport {\n   foo,\n   bar\n};\nexport {\n   foo as f,\n   baz\n} from 'foo-bar';\n```\n\n----------------------------------------\n\nTITLE: Adding custom error messages to restricted module paths in ESLint (JSON)\nDESCRIPTION: Alternative configuration format for adding custom error messages to restricted module paths using the 'paths' property with objects containing 'name' and 'message'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-modules\": [\"error\",{\n\"paths\":[{\n  \"name\": \"foo-module\",\n  \"message\": \"Please use bar-module instead.\"\n  }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of arrow functions with 'never' option (JavaScript)\nDESCRIPTION: Shows incorrect usage when the rule is set to 'never'. Arrow functions should not have braces around their bodies in this configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n/*eslint arrow-body-style: [\"error\", \"never\"]*/\n\nconst foo = () => {\n    return 0;\n};\n\nconst bar = (retv, name) => {\n    retv[name] = true;\n    return retv;\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Element Formatting with 'multiline' Option in JavaScript\nDESCRIPTION: Examples of incorrectly formatted arrays that violate the 'multiline' option, which requires line breaks if elements contain line breaks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", { \"multiline\": true }]*/\n\nvar d = [1,\n    2, 3];\nvar e = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Always Option Examples\nDESCRIPTION: Examples of incorrect comment spacing with the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-comment.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint spaced-comment: [\"error\", \"always\"]*/\n\n//This is a comment with no whitespace at the beginning\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n----------------------------------------\n\nTITLE: Specifying Rule Options in ESLint Configuration Comments\nDESCRIPTION: Example of using an ESLint configuration comment with explicit options to completely override the configuration from the config file instead of just changing the severity.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// my-file.js\n\n/* eslint curly: [\"warn\", \"all\"] */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples\nDESCRIPTION: Examples of code that violates the prefer-spread rule by using Function.prototype.apply()\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-spread.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-spread: \"error\"*/\n\nfoo.apply(undefined, args);\nfoo.apply(null, args);\nobj.foo.apply(obj, args);\n```\n\n----------------------------------------\n\nTITLE: Allow Import Names Configuration\nDESCRIPTION: Configuration example showing how to allow specific named imports while restricting others.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n  \"paths\": [{\n    \"name\": \"import-foo\",\n    \"allowImportNames\": [\"Bar\"],\n    \"message\": \"Please use only Bar from import-foo.\"\n  }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example: Return in Finally Block (JavaScript)\nDESCRIPTION: This example shows code that would trigger the no-unsafe-finally rule. The function has a return statement in the finally block which overrides the return statements in the try and catch blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Negation with 'in' Operator in JavaScript\nDESCRIPTION: Example of incorrect code where the negation operator is applied to the left operand of an 'in' expression, causing unexpected behavior due to operator precedence.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-negated-in-lhs.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-negated-in-lhs: \"error\"*/\n\nif(!key in object) {\n    // operator precedence makes it equivalent to (!key) in object\n    // and type conversion makes it equivalent to (key ? \"false\" : \"true\") in object\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Class Assignment - Parameter Shadowing\nDESCRIPTION: Shows valid reassignment of a parameter that shadows the class name.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-class-assign.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-class-assign: 2*/\n\nclass A {\n    b(A) {\n        A = 0; // A is a parameter.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rules Metadata from Lint Results in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the eslint.getRulesMetaForResults() method to obtain metadata for rules that triggered lint errors in the given results.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await eslint.lintFiles(patterns);\nconst rulesMeta = eslint.getRulesMetaForResults(results);\n```\n\n----------------------------------------\n\nTITLE: Disabling All Rules in a Block of Code\nDESCRIPTION: Demonstrates how to disable all ESLint rules for a specific section of code using block comments. This is useful when certain code needs to bypass linting rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable */\n\nalert(\"foo\");\n\n/* eslint-enable */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with allowInParentheses Option Set to False\nDESCRIPTION: Examples of code that violate the no-sequences rule when the allowInParentheses option is set to false, disallowing sequences even in parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sequences.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-sequences: [\"error\", { \"allowInParentheses\": false }]*/\n\nfoo = (doSomething(), val);\n\n(0, eval)(\"doSomething();\");\n\ndo {} while ((doSomething(), !!test));\n\nfor (; (doSomething(), !!test); );\n\nif ((doSomething(), !!test));\n\nswitch ((val = foo(), val)) {}\n\nwhile ((val = foo(), val < 42));\n\nwith ((doSomething(), val)) {}\n\nconst foo = (val) => ((console.log('bar'), val));\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Static Blocks with Max Depth 2\nDESCRIPTION: Example showing code that complies with maximum nesting depth of 2 levels within class static blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-depth.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-depth: [\"error\", 2]*/\n\nfunction foo() {\n    if (true) { // Nested 1 deep\n        class C {\n            static {\n                if (true) { // Nested 1 deep\n                    if (true) { // Nested 2 deep\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code with var-consecutive Option\nDESCRIPTION: Example showing correct code with the one-var rule configured with the 'consecutive' option specifically for 'var' declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { var: \"consecutive\" }]*/\n\nfunction foo() {\n    var a,\n        b;\n    const c = 1; // `const` and `let` declarations are ignored if they are not specified\n    const d = 2;\n    let e;\n    let f;\n}\n```\n\n----------------------------------------\n\nTITLE: SourceCode BOM Handling Example\nDESCRIPTION: Demonstration of handling Unicode BOM in SourceCode constructor\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar SourceCode = require(\"eslint\").SourceCode;\n\nvar code = new SourceCode(\"\\uFEFFvar foo = bar;\", ast);\n\nassert(code.hasBOM === true);\nassert(code.text === \"var foo = bar;\");\n```\n\n----------------------------------------\n\nTITLE: ignoreOverrideMethods Option - Incorrect Example\nDESCRIPTION: TypeScript example showing methods with 'override' modifier that don't use 'this', which violates the rule when ignoreOverrideMethods is false (default).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"ignoreOverrideMethods\": false }] */\n\nabstract class Base {\n    abstract method(): void;\n    abstract property: () => void;\n}\n\nclass Derived extends Base {\n    override method() {}\n    override property = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Length Examples - JavaScript\nDESCRIPTION: Examples of functions that violate the max-lines-per-function rule with different configurations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-lines-per-function.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines-per-function: [\"error\", 2]*/\nfunction foo() {\n    const x = 0;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines-per-function: [\"error\", 3]*/\nfunction foo() {\n    // a comment\n    const x = 0;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines-per-function: [\"error\", 4]*/\nfunction foo() {\n    // a comment followed by a blank line\n\n    const x = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Function Spacing Examples - JavaScript\nDESCRIPTION: Demonstrates basic examples of function declarations with and without spaces before parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-parentheses.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction withoutSpace(x) {\n    // ...\n}\n\nfunction withSpace (x) {\n    // ...\n}\n\nvar anonymousWithoutSpace = function() {};\n\nvar anonymousWithSpace = function () {};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating incorrect redeclaration of built-in globals with builtinGlobals option\nDESCRIPTION: This example shows JavaScript code that violates the no-redeclare rule with the builtinGlobals option enabled, which prevents redeclaring built-in globals like Object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-redeclare.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-redeclare: [\"error\", { \"builtinGlobals\": true }]*/\n\nvar Object = 0;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example of Multiline String in JavaScript\nDESCRIPTION: This code snippet demonstrates the incorrect way of creating multiline strings using backslash line continuations, which the no-multi-str rule will flag as an error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-str.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = \"Line 1 \\\n         Line 2\";\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of spaced-line-comment with 'always' Configuration in JavaScript\nDESCRIPTION: Example showing correct code with the 'always' option where each line comment has a whitespace after //.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-line-comment.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// When [\"always\"]\n// This is a comment with a whitespace at the beginning\nvar foo = 5;\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator Star Rule in ESLint\nDESCRIPTION: JSON configuration for the generator-star rule in ESLint, specifying the placement of the asterisk.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"generator-star\": [\"error\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Examples of unary 'words' operators in JavaScript\nDESCRIPTION: Demonstrates common word unary operators including new, delete, typeof, and void, showing their standard usage with proper spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-ops.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// new\nvar joe = new Person();\n\n// delete\nvar obj = {\n    foo: 'bar'\n};\ndelete obj.foo;\n\n// typeof\ntypeof {} // object\n\n// void\nvoid 0 // undefined\n```\n\n----------------------------------------\n\nTITLE: Valid Regular Expression Patterns in JavaScript\nDESCRIPTION: Examples of correct regular expression usage without empty character classes, showing proper pattern definition using character ranges or RegExp constructor.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-class.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = /^abc/;\n\nvar foo = /^abc[a-z]/;\n\nvar bar = new RegExp(\"^abc[]\");\n```\n\n----------------------------------------\n\nTITLE: Examples of Correct Loop Usage Compliant with no-unreachable-loop\nDESCRIPTION: These code snippets demonstrate proper loop usage that complies with the no-unreachable-loop rule. Each loop has the potential to execute multiple iterations or uses appropriate control flow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable-loop.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unreachable-loop: \"error\"*/\n\nwhile (foo) {\n    doSomething(foo);\n    foo = foo.parent;\n}\n\nfunction verifyList(head) {\n    let item = head;\n    do {\n        if (verify(item)) {\n            item = item.next;\n        } else {\n            return false;\n        }\n    } while (item);\n\n    return true;\n}\n\nfunction findSomething(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        if (isSomething(arr[i])) {\n            return arr[i];\n        }\n    }\n    throw new Error(\"Doesn't exist.\");\n}\n\nfor (key in obj) {\n    if (key.startsWith(\"_\")) {\n        continue;\n    }\n    firstKey = key;\n    firstValue = obj[key];\n    break;\n}\n\nfor (foo of bar) {\n    if (foo.id === id) {\n        doSomething(foo);\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Allow Comments at Class Start (JavaScript)\nDESCRIPTION: Examples of correct code that allow comments at the start of classes when using the 'allowClassStart' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true, \"allowClassStart\": true }]*/\n\nclass foo {\n    // what a great and wonderful day\n    day() {}\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'enforceForIfStatements' Option in JavaScript\nDESCRIPTION: Examples of code that violate the 'logical-assignment-operators' rule when 'enforceForIfStatements' is set to true. These if statements could be expressed using logical assignment operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/logical-assignment-operators.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint logical-assignment-operators: [\"error\", \"always\", { enforceForIfStatements: true }]*/\n\nif (a) a = b // <=> a &&= b\nif (!a) a = b // <=> a ||= b\n\nif (a == null) a = b // <=> a ??= b\nif (a === null || a === undefined) a = b // <=> a ??= b\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with the allowParensAfterCommentPattern Option\nDESCRIPTION: Examples showing valid code when the 'allowParensAfterCommentPattern' option is set to '@type', allowing extra parentheses that are preceded by comments matching this pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { \"allowParensAfterCommentPattern\": \"@type\" }] */\n\nconst span = /**@type {HTMLSpanElement}*/(event.currentTarget);\n\nif (/** @type {Foo | Bar} */(options).baz) console.log('Lint free');\n\nfoo(/** @type {Bar} */ (bar), options, {\n    name: \"name\",\n    path: \"path\",\n});\n\nif (foo) {\n    /** @type {Bar} */\n    (bar).prop = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Exception Handling in JavaScript\nDESCRIPTION: Example showing correct code that complies with the no-ex-assign rule by avoiding reassignment of the exception parameter in a catch clause.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-ex-assign.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-ex-assign: \"error\"*/\n\ntry {\n    // code\n} catch (e) {\n    const foo = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of inconsistent spacing in property access in JavaScript\nDESCRIPTION: An example showing inconsistent whitespace in property access chains that the rule aims to prevent.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-whitespace-before-property.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfoo. bar .baz . quz\n```\n\n----------------------------------------\n\nTITLE: Function Call Arguments with Always Option - Incorrect Examples\nDESCRIPTION: Examples of incorrect function call argument formatting when using the 'always' option, which requires line breaks between all arguments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-call-argument-newline.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint function-call-argument-newline: [\"error\", \"always\"]*/\n\nfoo(\"one\", \"two\", \"three\");\n\nbar(\"one\", \"two\", {\n    one: 1,\n    two: 2\n});\n\nbaz(\"one\", \"two\", (x) => {\n    console.log(x);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring space-in-parens Rule in ESLint\nDESCRIPTION: JSON configuration for enabling the 'always' option of the space-in-parens rule in ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"space-in-parens\": [\"error\", \"always\"]\n```\n\n----------------------------------------\n\nTITLE: Correct CapIsNew Usage\nDESCRIPTION: Example of correct usage with new operator for capitalized function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-cap.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-cap: [\"error\", { \"capIsNew\": true }]*/\n\nconst colleague = new Person();\n```\n\n----------------------------------------\n\nTITLE: Correct Array Index Usage Examples\nDESCRIPTION: Examples of correct array index usage with ignoreArrayIndexes option\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-magic-numbers.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-magic-numbers: [\"error\", { \"ignoreArrayIndexes\": true }]*/\n\nconst item = data[2];\n\ndata[100] = a;\n\nf(data[0]);\n\na = data[-0]; // same as data[0], -0 will be coerced to \"0\"\n\na = data[0xAB];\n\na = data[5.6e1];\n\na = data[10n]; // same as data[10], 10n will be coerced to \"10\"\n\na = data[4294967294]; // max array index\n```\n\n----------------------------------------\n\nTITLE: Object-wide Property Restriction\nDESCRIPTION: Configuration to restrict all property access on a specific object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-properties.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"object\": \"require\",\n            \"message\": \"Please call require() directly.\"\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Arrow Functions with 'as-needed' Option (JavaScript)\nDESCRIPTION: Examples of incorrect code for the 'arrow-parens' rule with the 'as-needed' option, showing cases where unnecessary parentheses are used.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-parens: [\"error\", \"as-needed\"]*/\n\n(a) => {};\n(a) => a;\n(a) => {'\\n'};\na.then((foo) => {});\na.then((foo) => a);\na((foo) => { if (true) {} });\nconst f = /** @type {number} */(a) => a + a;\nconst g = /* comment */ (a) => a + a;\nconst h = (a) /* comment */ => a + a;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for 'always' Option in ESLint yoda Rule\nDESCRIPTION: These examples demonstrate code that would be flagged as incorrect when the yoda rule is set to 'always', requiring Yoda conditions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yoda.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint yoda: [\"error\", \"always\"]*/\n\nif (color == \"blue\") {\n    // ...\n}\n\nif (color == `blue`) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring space-before-function-paren for ESLint v4.0.0\nDESCRIPTION: Configuration that mimics the default space-before-function-paren rule behavior from ESLint v3.x by explicitly ignoring asyncArrow functions which are now enforced by default.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-4.0.0.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"space-before-function-paren\": [\n\t\t\t\"error\",\n\t\t\t{\n\t\t\t\t\"anonymous\": \"always\",\n\t\t\t\t\"named\": \"always\",\n\t\t\t\t\"asyncArrow\": \"ignore\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Default ignorePattern behavior with lines-around-comment in JavaScript\nDESCRIPTION: Example of how the lines-around-comment rule ignores comments starting with certain words by default, including eslint, jshint, jslint, istanbul, global, exported, and jscs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\"]*/\n\nfoo();\n/* jshint mentioned in this comment */\nbar();\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for no-space-before-semi rule in JavaScript\nDESCRIPTION: These examples show various patterns that would violate the rule, including spaces before semicolons in variable declarations, function expressions, and expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-space-before-semi.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = \"bar\" ;\n\nvar foo = function() {} ;\n\nvar foo = function() {\n} ;\n\nvar foo = 1 + 2 ;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Element Formatting with 'minItems' Option in JavaScript\nDESCRIPTION: Examples of incorrectly formatted arrays that violate the 'minItems' option, which requires line breaks if the number of elements exceeds the specified threshold.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", { \"minItems\": 3 }]*/\n\nvar c = [1,\n    2];\nvar d = [1, 2, 3];\nvar e = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring custom ignorePattern for lines-around-comment in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with a custom ignorePattern option that allows comments containing the word 'pragma' without requiring blank lines around them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"ignorePattern\": \"pragma\" }] */\n\nfoo();\n/* jshint mentioned in this comment */\nbar();\n\nfoo();\n/* a valid comment using pragma in it */\n```\n\n----------------------------------------\n\nTITLE: Static Block Indentation in JavaScript\nDESCRIPTION: Demonstrates proper indentation for static blocks in classes with StaticBlock configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"StaticBlock\": {\"body\": 1} }]*/\n\nclass C {\n  static {\n    foo();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multiline Expressions in JavaScript\nDESCRIPTION: Examples of problematic code patterns where newlines could cause unexpected behavior due to automatic semicolon insertion. These patterns could lead to runtime errors or unintended execution flow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unexpected-multiline.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unexpected-multiline: \"error\"*/\n\nconst foo = bar\n(1 || 2).baz();\n\nconst hello = 'world'\n[1, 2, 3].forEach(addNumber);\n\nconst x = function() {}\n`hello`\n\nconst y = function() {}\ny\n`hello`\n\nconst z = foo\n/regex/g.test(bar)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Dangling Underscores in JavaScript\nDESCRIPTION: Examples of code that violate the no-underscore-dangle rule, showing identifiers with leading or trailing underscores.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: \"error\"*/\n\nlet foo_;\nconst __proto__ = {};\nfoo._bar();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Arrow Function Formatting - below option\nDESCRIPTION: Examples of incorrectly formatted arrow functions that violate the 'below' option by keeping the implicit return on the same line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/implicit-arrow-linebreak.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint implicit-arrow-linebreak: [\"error\", \"below\"] */\n\n(foo) => bar;\n\n(foo) => (bar);\n\n(foo) => bar => baz;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Empty Function Examples\nDESCRIPTION: Examples of empty functions that violate the rule across different function types and contexts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-function.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-function: \"error\"*/\n\nfunction foo() {}\n\nconst bar = function() {};\n\nconst bar1 = () => {};\n\nfunction* baz() {}\n\nconst bar2 = function*() {};\n\nconst obj = {\n    foo: function() {},\n\n    foo: function*() {},\n\n    foo() {},\n\n    *foo() {},\n\n    get foo() {},\n\n    set foo(value) {}\n};\n\nclass A {\n    constructor() {}\n\n    foo() {}\n\n    *foo() {}\n\n    get foo() {}\n\n    set foo(value) {}\n\n    static foo() {}\n\n    static *foo() {}\n\n    static get foo() {}\n\n    static set foo(value) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of spaced-line-comment with Single Exception in JavaScript\nDESCRIPTION: Example showing correct code with the 'always' option and an exception for the '-' character. Comment lines starting with the exception pattern are allowed without whitespace.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-line-comment.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// When [\"always\",{\"exceptions\":[\"-\"]}]\n//--------------\n// Comment block\n//--------------\n```\n\n----------------------------------------\n\nTITLE: Correct Format for ESLint Exported Directive\nDESCRIPTION: Example of the correct format for 'exported' directive in ESLint v9.0.0. Variables should be comma-separated without colons or values.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* exported foo, bar */\n```\n\n----------------------------------------\n\nTITLE: Restricting Direct Default Function Exports - Incorrect Example\nDESCRIPTION: Example demonstrating how the rule restricts direct default function exports when the 'direct' option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"direct\": true } }]*/\n\nexport default function foo() {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Project Structure for ESLint Configuration\nDESCRIPTION: This code snippet shows a typical project structure to illustrate how ESLint configuration files and glob patterns work in different directories.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_17\n\nLANGUAGE: txt\nCODE:\n```\nproject-root\n├── app\n│   ├── lib\n│   │   ├── foo.js\n│   │   ├── fooSpec.js\n│   ├── components\n│   │   ├── bar.js\n│   │   ├── barSpec.js\n│   ├── .eslintrc.json\n├── server\n│   ├── server.js\n│   ├── serverSpec.js\n├── .eslintrc.json\n```\n\n----------------------------------------\n\nTITLE: Correct Example: Switch Statement in Finally Block (JavaScript)\nDESCRIPTION: This example shows code that complies with the no-unsafe-finally rule. The function has a switch statement in the finally block, and the break statement inside the case block applies to the switch, not to the try-finally block.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function(a) {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        switch(a) {\n            case 1: {\n                console.log(\"hola!\")\n                break;\n            }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Name Matching Examples - Always Mode\nDESCRIPTION: Examples showing violations where function names do not match their assignment targets in 'always' mode.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-name-matching.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-name-matching: \"error\"*/\n\nlet foo = function bar() {};\nfoo = function bar() {};\nconst obj = {foo: function bar() {}};\nobj.foo = function bar() {};\nobj['foo'] = function bar() {};\n({['foo']: function bar() {}});\n\nclass C {\n    foo = function bar() {};\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling All Rules on a Specific Line\nDESCRIPTION: Demonstrates different methods to disable all ESLint rules for a specific line using inline comments. This can be done with end-of-line comments or comments preceding the line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"foo\"); // eslint-disable-line\n\n// eslint-disable-next-line\nalert(\"foo\");\n\n/* eslint-disable-next-line */\nalert(\"foo\");\n\nalert(\"foo\"); /* eslint-disable-line */\n```\n\n----------------------------------------\n\nTITLE: JSX Quote Escaping Examples\nDESCRIPTION: Shows how to include quote characters within JSX attribute values using alternate quote delimiters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/jsx-quotes.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<a b=\"'\" />;\n<a b='\"' />;\n```\n\n----------------------------------------\n\nTITLE: Defining DeprecatedInfo Type for ESLint Rule Deprecation\nDESCRIPTION: The DeprecatedInfo type represents general information about a rule deprecation. It includes optional properties for message, URL, replacements, deprecation version, and availability.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/rule-deprecation.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   `message` (`string`)<br>\n    A general message presentable to the user. May contain why this rule is deprecated or how to replace the rule.\n-   `url` (`string`)<br>\n    An URL with more information about this rule deprecation.\n-   `replacedBy` (`ReplacedByInfo[]`)<br>\n    Information about the available replacements for the rule.\n    This may be an empty array to explicitly state there is no replacement.\n-   `deprecatedSince` (`string`)<br>\n    [Semver](https://semver.org/) of the version deprecating the rule.\n-   `availableUntil` (`string | null`)<br>\n    [Semver](https://semver.org/) of the version likely to remove the rule, e.g. the next major version.\n    The special value `null` means the rule will no longer be changed but will be kept available.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example for Required Blank Lines Before Return Statements\nDESCRIPTION: This code example shows incorrect usage where a blank line is missing before a return statement, which violates the configured rule requiring blank lines before all return statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"*\", next: \"return\" }\n]*/\n\nfunction foo() {\n    bar();\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Comment Pattern Examples\nDESCRIPTION: Examples using custom comment patterns for indicating intentional fallthrough.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-fallthrough: [\"error\", { \"commentPattern\": \"break[\\\\s\\\\w]*omitted\" }]*/\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // break omitted\n\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // caution: break is omitted intentionally\n\n    default:\n        doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Backreferences in JavaScript RegExp\nDESCRIPTION: This code block demonstrates multiple examples of incorrect usages of backreferences in regular expressions that are flagged by the ESLint rule, including references to groups in another alternative, forward references, nested references, and references to groups in negative lookarounds.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-backreference.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-backreference: \"error\"*/\n\n/^(?:(a)|\\1b)$/; // reference to (a) into another alternative\n\n/^(?:(a)|b(?:c|\\1))$/; // reference to (a) into another alternative\n\n/^(?:a|b(?:(c)|\\1))$/; // reference to (c) into another alternative\n\n/\\1(a)/; // forward reference to (a)\n\nRegExp('(a)\\\\2(b)'); // forward reference to (b)\n\n/(?:a)(b)\\2(c)/; // forward reference to (c)\n\n/\\k<foo>(?<foo>a)/; // forward reference to (?<foo>a)\n\n/(?<=(a)\\1)b/; // backward reference to (a) from within the same lookbehind\n\n/(?<!(a)\\1)b/; // backward reference to (a) from within the same lookbehind\n\nnew RegExp('(\\\\1)'); // nested reference to (\\1)\n\n/^((a)\\1)$/; // nested reference to ((a)\\1)\n\n/a(?<foo>(.)b\\1)/; // nested reference to (?<foo>(.)b\\1)\n\n/a(?!(b)).\\1/; // reference to (b) into a negative lookahead\n\n/(?<!(a))b\\1/; // reference to (a) into a negative lookbehind\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with blockScopedFunctions: \"disallow\" Option\nDESCRIPTION: Shows permitted code patterns complying with the no-inner-declarations rule using blockScopedFunctions set to \"disallow\". Only root-level function declarations are allowed regardless of strict mode.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inner-declarations: [\"error\", \"functions\", { blockScopedFunctions: \"disallow\" }]*/\n\nfunction doSomething() { }\n\nfunction doSomething() {\n    function doSomethingElse() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Trailing Commas in JavaScript\nDESCRIPTION: Examples of code that violate the no-comma-dangle rule, showing trailing commas in object literals, array literals, and function calls.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-comma-dangle.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring switch-colon-spacing Rule in ESLint\nDESCRIPTION: JSON configuration for the switch-colon-spacing rule, defining spacing requirements before and after colons in switch statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/switch-colon-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"switch-colon-spacing\": [\"error\", {\"after\": true, \"before\": false}]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect typeof Comparisons with requireStringLiterals Option in JavaScript\nDESCRIPTION: Examples of incorrect code with the requireStringLiterals option enabled, which disallows comparisons with non-string literals or invalid string types.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-typeof.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint valid-typeof: [\"error\", { \"requireStringLiterals\": true }]*/\n\ntypeof foo === undefined\ntypeof bar == Object\ntypeof baz === \"strnig\"\ntypeof qux === \"some invalid type\"\ntypeof baz === anotherVariable\ntypeof foo == 5\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples with always Option in JavaScript\nDESCRIPTION: Examples of code that violate the no-return-assign rule using the 'always' option. When configured with 'always', any assignment in return statements is flagged as an error, even when enclosed in parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-return-assign.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-return-assign: [\"error\", \"always\"]*/\n\nfunction doSomething() {\n    return foo = bar + 2;\n}\n\nfunction doSomethingElse() {\n    return foo += 2;\n}\n\nfunction doSomethingMore() {\n    return (foo = bar + 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Static Blocks with Max Depth 2\nDESCRIPTION: Example showing code that violates maximum nesting depth of 2 levels within class static blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-depth.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-depth: [\"error\", 2]*/\n\nfunction foo() {\n    if (true) { // Nested 1 deep\n        class C {\n            static {\n                if (true) { // Nested 1 deep\n                    if (true) { // Nested 2 deep\n                        if (true) { // Nested 3 deep\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Pull Request Closing Comment - Guidelines Not Followed\nDESCRIPTION: Template message for closing pull requests where submitter is not following project guidelines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/maintain/review-pull-requests.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nUnfortunately, we can't accept pull requests that don't follow our guidelines. I'm going to close this pull request now, but if you'd like to resubmit following our guidelines, we'll be happy to review.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Read-only Global Usage - JavaScript\nDESCRIPTION: Examples of incorrect code attempting to modify read-only global variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-globals.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-globals: \"error\"*/\n\n/*global foo:readonly*/\n\nfoo = 1;\n\nArray = [];\nvar Object;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples with except-parens Option in JavaScript\nDESCRIPTION: Examples of code that violate the no-return-assign rule using the default 'except-parens' option. These examples show assignments in return statements without parentheses, which the rule flags as errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-return-assign.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-return-assign: \"error\"*/\n\nfunction doSomething() {\n    return foo = bar + 2;\n}\n\nfunction doSomethingElse() {\n    return foo += 2;\n}\n\nconst foo = (a, b) => a = b\n\nconst bar = (a, b, c) => (a = b, c == b)\n\nfunction doSomethingMore() {\n    return foo = bar && foo > 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with allowTaggedTemplates Option\nDESCRIPTION: Examples of code patterns that would be considered valid with the allowTaggedTemplates option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: [\"error\", { \"allowTaggedTemplates\": true }]*/\n\ntag`some tagged template string`;\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples with allowEscape option\nDESCRIPTION: Examples of code patterns that would trigger violations even with the allowEscape option enabled, where the escaping is incorrectly implemented or missing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-misleading-character-class.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-misleading-character-class: [\"error\", { \"allowEscape\": true }] */\n\n/[\\👍]/; // backslash can be omitted\n\nnew RegExp(\"[\\ud83d\" + \"\\udc4d]\");\n\nconst pattern = \"[\\ud83d\\udc4d]\";\nnew RegExp(pattern);\n```\n\n----------------------------------------\n\nTITLE: Problematic Return Assignment Example in JavaScript\nDESCRIPTION: An example demonstrating the ambiguity that can occur when using assignment in return statements. The function returns the result of an assignment, which can be confusing to understand.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-return-assign.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doSomething() {\n    return foo = bar + 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code for hoist:never Option\nDESCRIPTION: Example showing code that correctly avoids shadowing violation when the hoist option is set to 'never', which never reports shadowing before outer variables/functions are defined.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-shadow: [\"error\", { \"hoist\": \"never\" }]*/\n\nif (true) {\n    const a = 3;\n    const b = 6;\n}\n\nconst a = 5;\nfunction b() {}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for 'never' Option in ESLint operator-assignment Rule\nDESCRIPTION: Examples of JavaScript code that comply with the operator-assignment rule when configured with the 'never' option, using the expanded form instead of shorthand operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-assignment.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/*eslint operator-assignment: [\"error\", \"never\"]*/\n\nx = x + y;\nx.y = x.y / a.b;\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for object-property-newline rule\nDESCRIPTION: Multiple examples of code that violate the object-property-newline rule, including various scenarios with objects containing different property types.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-property-newline: \"error\"*/\n\nconst obj0 = { foo: \"foo\", bar: \"bar\", baz: \"baz\" };\n\nconst obj1 = {\n    foo: \"foo\", bar: \"bar\", baz: \"baz\"\n};\n\nconst obj2 = {\n    foo: \"foo\", bar: \"bar\",\n    baz: \"baz\"\n};\n\nconst obj3 = {\n    [process.argv[3] ? \"foo\" : \"bar\"]: 0, baz: [\n        1,\n        2,\n        4,\n        8\n    ]\n};\n\nconst a = \"antidisestablishmentarianistically\";\nconst b = \"yugoslavyalılaştırabildiklerimizdenmişsiniz\";\nconst obj4 = {a, b};\n\nconst domain = process.argv[4];\nconst obj5 = {\n    foo: \"foo\", [\n    domain.includes(\":\") ? \"complexdomain\" : \"simpledomain\"\n]: true};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import Using Restricted Pattern\nDESCRIPTION: Example of code that violates the no-restricted-imports rule by importing a module that matches a restricted pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { \"patterns\": [\"lodash/*\"] }]*/\n\nimport pick from 'lodash/pick';\n```\n\n----------------------------------------\n\nTITLE: Correct Code Example with Default Configuration\nDESCRIPTION: Shows code that passes the rule check with default configuration by using non-matching comment terms.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-warning-comments.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-warning-comments: \"error\"*/\n\nfunction callback(err, results) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  // NOT READY FOR PRIME TIME\n  // but too bad, it is not a predefined warning term\n}\n```\n\n----------------------------------------\n\nTITLE: Private Class Fields Example\nDESCRIPTION: Example showing correct usage with private class fields.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-notation.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint dot-notation: [\"error\", { \"allowKeywords\": false }]*/\n\nclass C {\n    #in;\n    foo() {\n        this.#in; // Dot notation is required for private identifiers\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unused Fallthrough Comment Examples - Correct\nDESCRIPTION: Examples of correct usage when reportUnusedFallthroughComment option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-fallthrough: [\"error\", { \"reportUnusedFallthroughComment\": true }] */\n\nswitch(foo){\n    case 1:\n        doSomething();\n        break;\n    // just a comment\n    case 2: doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Lexical Declarations - JavaScript\nDESCRIPTION: Examples of incorrect code with top-level lexical declarations when lexicalBindings option is true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-globals.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-globals: [\"error\", {\"lexicalBindings\": true}]*/\n\nconst foo = 1;\n\nlet baz;\n\nclass Bar {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Regular Expression Usage with ESLint Rule\nDESCRIPTION: Example demonstrating code that violates the wrap-regex rule by not wrapping the regular expression in parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-regex.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint wrap-regex: \"error\"*/\n\nfunction a() {\n    return /foo/.test(\"bar\");\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Line Comment Position for 'Above' Configuration\nDESCRIPTION: This snippet shows an incorrect placement of a line comment when the rule is configured to enforce comments above code. The comment is placed beside the code instead of above it.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/line-comment-position.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint line-comment-position: [\"error\", { \"position\": \"above\" }]*/\n1 + 1; // invalid comment\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Expression Parameter Indentation in JavaScript\nDESCRIPTION: Example of incorrectly indented function expression parameters with the indent-legacy rule set to 'first' parameter alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, {\"FunctionExpression\": {\"parameters\": \"first\"}}]*/\n\nvar foo = function(bar, baz,\n  qux, boop) {\n  qux();\n}\n```\n\n----------------------------------------\n\nTITLE: Valid object-property-newline formatting with trailing commas\nDESCRIPTION: Two examples of correctly formatted objects that comply with the object-property-newline rule, showing both trailing comma and leading comma styles.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst newFunction = multiplier => ({\n    a: 2 * multiplier,\n    b: 4 * multiplier,\n    c: 8 * multiplier\n});\nconst newFunction = multiplier => ({\n    a: 2 * multiplier\n    , b: 4 * multiplier\n    , c: 8 * multiplier\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Examples - Correct Usage\nDESCRIPTION: Examples of code that would not trigger the no-process-exit ESLint rule violation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-process-exit.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-process-exit: \"error\"*/\n\nProcess.exit();\nvar exit = process.exit;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'never' Option\nDESCRIPTION: Examples of incorrect ternary expression formatting when using the 'never' rule option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-ternary.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint multiline-ternary: [\"error\", \"never\"]*/\n\nfoo > bar ? value :\n    value2;\n\nfoo > bar ?\n    value : value2;\n\nfoo >\n    bar ?\n    value1 :\n    value2;\n```\n\n----------------------------------------\n\nTITLE: Configuring lines-around-comment with afterLineComment and allowObjectEnd in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with afterLineComment and allowObjectEnd options enabled, which allows line comments at the end of object literals without requiring a blank line after them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true, \"allowObjectEnd\": true }]*/\n\nvar foo = {\n    day: \"great\"\n    // what a great and wonderful day\n};\n\nconst {\n    foo: someDay\n    // what a great and wonderful day\n} = {foo: \"great\"};\n\nconst {\n    day\n    // what a great and wonderful day\n} = {day: \"great\"};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Call Spacing with 'always' Option in JavaScript\nDESCRIPTION: Examples of incorrect function call spacing when the 'always' option is set, showing no space or a newline between function names and parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-call-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-call-spacing: [\"error\", \"always\"]*/\n\nfn();\n\nfn\n();\n```\n\n----------------------------------------\n\nTITLE: Correct Function Call Spacing with 'never' Option in JavaScript\nDESCRIPTION: Example of correct function call spacing when the 'never' option is set, showing no space between the function name and parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-call-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-call-spacing: [\"error\", \"never\"]*/\n\nfn();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ESLint Formatter Function\nDESCRIPTION: Example of a simple synchronous ESLint formatter function. The function receives an array of linting results and returns a formatted string. This example prints file names with rule violations.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/ignored-paths/ignore-pattern/subdir/ignore-me.txt#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(results) {\n    return results\n        .filter(result => result.messages.length)\n        .map(result => `${result.filePath} has problems`)\n        .join(\"\\n\");\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Indirect Eval Usage\nDESCRIPTION: Example of code that violates the no-eval rule with allowIndirect option enabled\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eval.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-eval: [\"error\", {\"allowIndirect\": true} ]*/\n\nconst obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);\n```\n\n----------------------------------------\n\nTITLE: Multiple incorrect examples of using reserved words as property names\nDESCRIPTION: These examples demonstrate improper usage of ECMAScript 3 reserved words ('class', 'private', 'enum') as unquoted property names, which would throw errors in ECMAScript 3 environments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-reserved-keys.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar superman = {\n    class: \"Superhero\",\n    private: \"Clark Kent\"\n};\n\nvar values = {\n    enum: [\"red\", \"blue\", \"green\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Correct async/await spacing example in JavaScript\nDESCRIPTION: Example of proper spacing with the await operator in async functions that follows the space-unary-ops rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-ops.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-unary-ops: \"error\"*/\n\nasync function foo() {\n    await (bar);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Environments using Configuration Comments in JavaScript\nDESCRIPTION: This code snippet demonstrates how to specify ESLint environments using a comment inside a JavaScript file. This example enables Node.js and Mocha environments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-env node, mocha */\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples for the Default \"functions\" Option\nDESCRIPTION: Shows permitted code patterns that comply with the no-inner-declarations rule using the default \"functions\" option. Function declarations at the root level and function expressions in nested blocks are allowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inner-declarations: \"error\"*/\n\nfunction doSomething() { }\n\nfunction doSomethingElse() {\n    function doAnotherThing() { }\n}\n\nfunction doSomethingElse() {\n    \"use strict\";\n\n    if (test) {\n        function doAnotherThing() { }\n    }\n}\n\nclass C {\n    static {\n        function doSomething() { }\n    }\n}\n\nif (test) {\n    asyncCall(id, function (err, data) { });\n}\n\nvar fn;\nif (test) {\n    fn = function fnExpression() { };\n}\n\nif (foo) var a;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Trailing Commas in Functions with 'always' Option\nDESCRIPTION: These JavaScript snippets show incorrect usage of function declarations and calls without trailing commas when the 'comma-dangle' rule for functions is set to 'always'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Exceeding Max Lines (JavaScript)\nDESCRIPTION: Example of code that violates the max-lines rule with a max value of 3. The code spans more than 3 lines, triggering the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-lines.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines: [\"error\", 3]*/\nlet a,\n    b,\n    c;\n```\n\n----------------------------------------\n\nTITLE: Correct Import Usage Example\nDESCRIPTION: Example showing correct usage of allowed imports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nimport crypto from 'crypto';\nexport { foo } from \"bar\";\n```\n\n----------------------------------------\n\nTITLE: ESLint Results Object Structure\nDESCRIPTION: Example structure of the results object passed to formatter functions\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n\t{\n\t\tfilePath: \"/path/to/a/file.js\",\n\t\tmessages: [\n\t\t\t{\n\t\t\t\truleId: \"curly\",\n\t\t\t\tseverity: 2,\n\t\t\t\tmessage: \"Expected { after 'if' condition.\",\n\t\t\t\tline: 2,\n\t\t\t\tcolumn: 1,\n\t\t\t\tnodeType: \"IfStatement\",\n\t\t\t},\n\t\t\t{\n\t\t\t\truleId: \"no-process-exit\",\n\t\t\t\tseverity: 2,\n\t\t\t\tmessage: \"Don't use process.exit(); throw an error instead.\",\n\t\t\t\tline: 3,\n\t\t\t\tcolumn: 1,\n\t\t\t\tnodeType: \"CallExpression\",\n\t\t\t},\n\t\t],\n\t\terrorCount: 2,\n\t\twarningCount: 0,\n\t\tfixableErrorCount: 0,\n\t\tfixableWarningCount: 0,\n\t\tsource: \"var err = doStuff();\\nif (err) console.log('failed tests: ' + err);\\nprocess.exit(1);\\n\",\n\t},\n\t{\n\t\tfilePath: \"/path/to/Gruntfile.js\",\n\t\tmessages: [],\n\t\terrorCount: 0,\n\t\twarningCount: 0,\n\t\tfixableErrorCount: 0,\n\t\tfixableWarningCount: 0,\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Quote Usage Examples\nDESCRIPTION: Demonstrates basic usage of single and double quotes in JSX attribute values.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/jsx-quotes.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<a b='c' />;\n<a b=\"c\" />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Path Restriction in no-restricted-imports Rule\nDESCRIPTION: Basic configuration that restricts importing the 'import-foo' module using the 'paths' option, but doesn't restrict submodules like 'import-foo/bar'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n  \"paths\": [{\n    \"name\": \"import-foo\",\n  }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Project Structure with package.json Configuration\nDESCRIPTION: Example showing a project structure with package.json containing ESLint configuration that applies to all subdirectories, with more specific .eslintrc files overriding it in subdirectories.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nyour-project\n├── package.json\n├── lib\n│ └── source.js\n└─┬ tests\n  ├── .eslintrc.json\n  └── test.js\n```\n\n----------------------------------------\n\nTITLE: Including Version Switcher Component in ESLint Documentation\nDESCRIPTION: This snippet demonstrates how to include the version switcher component in an ESLint documentation page using Liquid template syntax. The component is included from the components directory.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/version-switcher.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% include 'components/version-switcher.html' %}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Never Spacing Examples\nDESCRIPTION: Shows incorrect spacing examples when using the 'never' option, which disallows spaces inside computed property brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/computed-property-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint computed-property-spacing: [\"error\", \"never\"]*/\n\nobj[foo ]\nobj[ 'foo']\nvar x = {[ b ]: a}\nobj[foo[ bar ]]\n\nconst { [ a ]: someProp } = obj;\n({ [ b ]: anotherProp } = anotherObj);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Bracket Spacing with 'objectsInArrays' Exception in JavaScript\nDESCRIPTION: Examples of code that would be incorrect when the 'objectsInArrays' exception is set to false with the 'always' option, showing arrays containing objects with improper spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"objectsInArrays\": false }]*/\n\nvar arr = [ { 'foo': 'bar' } ];\nvar arr = [ {\n  'foo': 'bar'\n} ]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Variable Leaks - JavaScript\nDESCRIPTION: Examples of incorrect code that creates global variables through accidental leaks in non-strict mode.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-globals.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-implicit-globals: \"error\"*/\n\nfoo = 1;\n\nBar.prototype.baz = function () {\n    a = 1; // Intended to be this.a = 1;\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Arrow Spacing Examples with No Spaces Configuration\nDESCRIPTION: Examples of code that follows the arrow-spacing rule when configured to have no spaces before or after the arrow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": false }]*/\n\n()=>{};\n(a)=>{};\n()=>{'\\n'};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Semicolon Placement with 'first' Option\nDESCRIPTION: Examples of incorrect semicolon placement when the rule is configured to require semicolons at the beginning of statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-style.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi-style: [\"error\", \"first\"]*/\n\nfoo();\n[1, 2, 3].forEach(bar)\n\nfor (\n    var i = 0\n    ; i < 10\n    ; ++i\n) {\n    foo()\n}\n\nclass C {\n    static {\n        foo();\n        bar()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Problems Example in Variable Sorting\nDESCRIPTION: Example showing code that produces multiple sorting problems with the sort-vars rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-vars.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-vars: \"error\"*/\n\nlet c, d, a, b;\n```\n\n----------------------------------------\n\nTITLE: Incorrect code with enforceForClassMembers option disabled\nDESCRIPTION: Examples of code that violate the rule even when the enforceForClassMembers option is set to false, which only affects class members.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-computed-key.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-computed-key: [\"error\", { \"enforceForClassMembers\": false }]*/\n\nconst obj = {\n    [\"foo\"]: \"bar\",\n    [42]: \"baz\",\n\n    ['a']() {},\n    get ['b']() {},\n    set ['c'](value) {}\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Multiple Variable Declaration with Assignment\nDESCRIPTION: Demonstrates valid pattern for declaring multiple variables including the designated alias.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-this.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nlet foo = 42, that;\nthat = this;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: one-var with initialized:consecutive, uninitialized:never\nDESCRIPTION: An example showing correct variable declarations where consecutively initialized variables are grouped together and uninitialized variables are declared separately, following the rule configuration requirements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\", \"uninitialized\": \"never\" }]*/\n\nfunction foo() {\n    var a = 1,\n        b = 2;\n    var c;\n    var d;\n    var e = 3,\n        f = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ESLint with a custom configuration file\nDESCRIPTION: Equivalent ESLint commands to run with a specific configuration file using --config or -c flags.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\neslint --config myconfig.json file.js\neslint -c myconfig.json file.js\n```\n\n----------------------------------------\n\nTITLE: Configuring no-restricted-imports with Multiple Entries for Same Module\nDESCRIPTION: Configuration example for the 'no-restricted-imports' rule showing how multiple config entries with the same module name can now be used to provide different messages for different imported names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    rules: {\n        \"no-restricted-imports\": [\"error\", {\n            paths: [\n                {\n                    name: \"react-native\",\n                    importNames: [\"Text\"],\n                    message: \"import 'Text' from 'ui/_components' instead\"\n                },\n                {\n                    name: \"react-native\",\n                    importNames: [\"View\"],\n                    message: \"import 'View' from 'ui/_components' instead\"\n                }\n            ]\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'never' and '[]' Exception\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'never' option with an exception for square brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo([bar, baz]);\nfoo([bar, baz], 1);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples of Unreachable Class Fields Without super() Call\nDESCRIPTION: Additional incorrect code examples showing unreachable instance fields in a class that extends another class but doesn't call super() in its constructor.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unreachable: \"error\"*/\n\nclass C extends B {\n    #x; // unreachable\n    #y = 1; // unreachable\n    a; // unreachable\n    b = 1; // unreachable\n\n    constructor() {\n        return {};\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Example for SwitchCase Option\nDESCRIPTION: Demonstrates correctly indented switch statement when the SwitchCase option is set to 1.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"SwitchCase\": 1 }]*/\n\nswitch(a){\n  case \"a\":\n    break;\n  case \"b\":\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import With Negated Pattern\nDESCRIPTION: Example of code that violates the rule by importing a module that doesn't match the negated pattern in the restriction list.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { \"patterns\": [\"lodash/*\", \"!lodash/pick\"] }]*/\n\nimport pick from 'lodash/map';\n```\n\n----------------------------------------\n\nTITLE: List of Irregular Whitespace Characters Disallowed by the Rule\nDESCRIPTION: A comprehensive list of Unicode whitespace characters that the rule considers irregular and disallows by default. Each character is listed with its Unicode code point, name, and abbreviated form.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-irregular-whitespace.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\\u000B - Line Tabulation (\\v) - <VT>\n\\u000C - Form Feed (\\f) - <FF>\n\\u00A0 - No-Break Space - <NBSP>\n\\u0085 - Next Line - <NEL>\n\\u1680 - Ogham Space Mark - <OGSP>\n\\u180E - Mongolian Vowel Separator - <MVS>\n\\ufeff - Zero Width No-Break Space - <BOM>\n\\u2000 - En Quad - <NQSP>\n\\u2001 - Em Quad - <MQSP>\n\\u2002 - En Space - <ENSP>\n\\u2003 - Em Space - <EMSP>\n\\u2004 - Three-Per-Em - <THPMSP> - <3/MSP>\n\\u2005 - Four-Per-Em - <FPMSP> - <4/MSP>\n\\u2006 - Six-Per-Em - <SPMSP> - <6/MSP>\n\\u2007 - Figure Space - <FSP>\n\\u2008 - Punctuation Space - <PUNCSP>\n\\u2009 - Thin Space - <THSP>\n\\u200A - Hair Space - <HSP>\n\\u200B - Zero Width Space - <ZWSP>\n\\u2028 - Line Separator - <LS> - <LSEP>\n\\u2029 - Paragraph Separator - <PS> - <PSEP>\n\\u202F - Narrow No-Break Space - <NNBSP>\n\\u205f - Medium Mathematical Space - <MMSP>\n\\u3000 - Ideographic Space - <IDSP>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Template Tag Spacing (Never Option)\nDESCRIPTION: This JavaScript example demonstrates incorrect usage of template tag spacing when the rule is set to 'never', showing a space between the tag function and template literal.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-tag-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint template-tag-spacing: \"error\"*/\n\nfunc `Hello world`;\n```\n\n----------------------------------------\n\nTITLE: Limitations of no-throw-literal Rule in JavaScript\nDESCRIPTION: Examples of code that pass the no-throw-literal rule due to static analysis limitations but still don't throw actual Error objects.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-throw-literal.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-throw-literal: \"error\"*/\n\nconst err = \"error\";\nthrow err;\n\nfunction foo(bar) {\n    console.log(bar);\n}\nthrow foo(\"error\");\n\nthrow new String(\"error\");\n\nconst baz = {\n    bar: \"error\"\n};\nthrow baz.bar;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with separateRequires Option\nDESCRIPTION: Example showing code that violates the one-var rule when configured with the separateRequires option, which requires separating require statements from other declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { separateRequires: true, var: \"always\" }]*/\n\nvar foo = require(\"foo\"),\n    bar = \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Basic Rule Configuration in JSON\nDESCRIPTION: Example showing how to configure the id-match rule to enforce camelCase naming convention using regular expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-match.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id-match\": [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration - JSON\nDESCRIPTION: Default configuration for the semi-spacing rule using JSON format\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"semi-spacing\": [\"error\", {\"before\": false, \"after\": true}]\n```\n\n----------------------------------------\n\nTITLE: Correct Named Import Within Pattern\nDESCRIPTION: Example of code that passes the rule by importing a named export that is not restricted, even though it comes from a module matching the pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    importNames: ['isEmpty'],\n    message: \"Use 'isEmpty' from lodash instead.\"\n}]}]*/\n\nimport { hasValues } from 'utils/collection-utils';\n```\n\n----------------------------------------\n\nTITLE: NewIsCap False Example\nDESCRIPTION: Shows usage with newIsCap option set to false, allowing lowercase constructors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-cap.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-cap: [\"error\", { \"newIsCap\": false }]*/\n\nconst friend = new person();\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint:Recommended Configuration in JavaScript\nDESCRIPTION: Example of extending 'eslint:recommended' configuration and overriding rules using JavaScript format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\textends: \"eslint:recommended\",\n\trules: {\n\t\t// enable additional rules\n\t\tindent: [\"error\", 4],\n\t\t\"linebreak-style\": [\"error\", \"unix\"],\n\t\tquotes: [\"error\", \"double\"],\n\t\tsemi: [\"error\", \"always\"],\n\n\t\t// override configuration set by extending \"eslint:recommended\"\n\t\t\"no-empty\": \"warn\",\n\t\t\"no-cond-assign\": [\"error\", \"always\"],\n\n\t\t// disable rules from base configurations\n\t\t\"for-direction\": \"off\",\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Line Comment Position for 'Beside' Configuration\nDESCRIPTION: This snippet shows an incorrect placement of a line comment when the rule is configured to enforce comments beside code. The comment is placed above the code instead of beside it.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/line-comment-position.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint line-comment-position: [\"error\", { \"position\": \"beside\" }]*/\n// invalid comment\n1 + 1;\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Examples - Incorrect Usage\nDESCRIPTION: Examples of code that would trigger the no-process-exit ESLint rule violation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-process-exit.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-process-exit: \"error\"*/\n\nprocess.exit(1);\nprocess.exit(0);\n```\n\n----------------------------------------\n\nTITLE: Properties Option Example\nDESCRIPTION: Example of code that violates the id-match rule when the properties option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-match.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\", { \"properties\": true }]*/\n\nconst obj = {\n    my_pref: 1\n};\n\nobj.do_something = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of spaced-line-comment with 'never' Configuration in JavaScript\nDESCRIPTION: Example showing correct code with the 'never' option where line comments have no whitespace after //.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-line-comment.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//When [\"never\"]\n//This is a comment with no whitespace at the beginning\nvar foo = 5;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example for Required Blank Lines Between Switch Cases\nDESCRIPTION: This example shows incorrect code that violates the rule requiring blank lines between switch case clauses. The code lacks the required blank lines after each case and default statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: [\"case\", \"default\"], next: \"*\" }\n]*/\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n    case 2:\n    case 3:\n        baz();\n        break;\n    default:\n        quux();\n}\n```\n\n----------------------------------------\n\nTITLE: ESTree AST Representation in JSON\nDESCRIPTION: Example of the ESTree Abstract Syntax Tree (AST) representation for the code '1 + 2;'. This shows how JavaScript syntax is structured as an object in the ESTree format used by ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/glossary.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"ExpressionStatement\",\n\t\"expression\": {\n\t\t\"type\": \"BinaryExpression\",\n\t\t\"left\": {\n\t\t\t\"type\": \"Literal\",\n\t\t\t\"value\": 1,\n\t\t\t\"raw\": \"1\"\n\t\t},\n\t\t\"operator\": \"+\",\n\t\t\"right\": {\n\t\t\t\"type\": \"Literal\",\n\t\t\t\"value\": 2,\n\t\t\t\"raw\": \"2\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Within Max Lines with Skip Blank Lines Option (JavaScript)\nDESCRIPTION: Example of code that complies with the max-lines rule with the skipBlankLines option set to true and a max value of 3. The code has 3 or fewer non-blank lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-lines.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines: [\"error\", {\"max\": 3, \"skipBlankLines\": true}]*/\n\nlet a,\n    b, c;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Ignored Class Expressions in JavaScript\nDESCRIPTION: This snippet shows correct usage when class expressions are ignored in the 'max-classes-per-file' rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-classes-per-file.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint max-classes-per-file: [\"error\", { ignoreExpressions: true }] */\n\nclass VisitorFactory {\n    forDescriptor(descriptor) {\n        return class {\n            visit(node) {\n                return `Visiting ${descriptor}.`;\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with Default max:1 Option\nDESCRIPTION: Examples showing code that violates the rule when configured with the default maximum of 1 statement per line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-statements-per-line.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-statements-per-line: [\"error\", { \"max\": 1 }]*/\n\nvar bar; var baz;\nif (condition) { bar = 1; }\nfor (var i = 0; i < length; ++i) { bar = 1; }\nswitch (discriminant) { default: break; }\nfunction foo() { bar = 1; }\nvar qux = function qux() { bar = 1; };\n(function foo() { bar = 1; })();\n```\n\n----------------------------------------\n\nTITLE: Correct Semicolon Placement with 'first' Option\nDESCRIPTION: Examples of correct semicolon placement when the rule is configured to require semicolons at the beginning of statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-style.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi-style: [\"error\", \"first\"]*/\n\nfoo()\n;[1, 2, 3].forEach(bar)\n\nfor (\n    var i = 0;\n    i < 10;\n    ++i\n) {\n    foo()\n}\n\nclass C {\n    static {\n        foo()\n        ;bar()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ignore Patterns in package.json (JSON)\nDESCRIPTION: Configure ESLint to ignore files by adding an eslintIgnore array to your package.json file. This is used when no .eslintignore file is found and no alternate file is specified.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore-deprecated.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"mypackage\",\n\t\"version\": \"0.0.1\",\n\t\"eslintConfig\": {\n\t\t\"env\": {\n\t\t\t\"browser\": true,\n\t\t\t\"node\": true\n\t\t}\n\t},\n\t\"eslintIgnore\": [\"hello.js\", \"world.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of void operator according to no-void rule\nDESCRIPTION: This snippet demonstrates code that violates the no-void rule, showing various uses of the void operator that are considered incorrect.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-void.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-void: \"error\"*/\n\nvoid foo\nvoid someFunction();\n\nconst foo = void bar();\nfunction baz() {\n    return void 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with 'never' Option\nDESCRIPTION: Examples of code that violates the one-var rule when configured with the 'never' option, which requires separate declarations for each variable.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", \"never\"]*/\n\nfunction foo1() {\n    var bar,\n        baz;\n    const qux = true,\n        foobar = false;\n}\n\nfunction foo2() {\n    var bar,\n        qux;\n\n    if (baz) {\n        qux = true;\n    }\n}\n\nfunction foo3(){\n    let bar = true,\n        baz = false;\n}\n\nclass C {\n    static {\n        var foo, bar;\n        let baz, qux;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with allowTernary Option\nDESCRIPTION: Examples of code patterns that would be flagged as errors even with the allowTernary option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-expressions: [\"error\", { \"allowTernary\": true }]*/\n\na ? b : 0\na ? b : c()\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Examples with ignoreJSX: 'multi-line' Option\nDESCRIPTION: Examples showing valid JSX code when the 'ignoreJSX' option is set to 'multi-line', allowing extra parentheses around multi-line JSX expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"multi-line\" }] */\nconst ThisComponent = (\n    <div>\n        <p />\n    </div>\n)\nconst ThatComponent = (\n    <div\n        prop={true}\n    />\n)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - MaxBOF Option\nDESCRIPTION: Example showing correct code that adheres to the maxBOF setting of 1 empty line at beginning of file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multiple-empty-lines.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multiple-empty-lines: [\"error\", { \"max\": 2, \"maxBOF\": 1}]*/\n\nvar foo = 5;\n\n\nvar bar = 3;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Tabs in JavaScript\nDESCRIPTION: Example of code that correctly follows the no-mixed-spaces-and-tabs rule by using only tabs for indentation. The function add() uses consistent tab indentation with no mixing of spaces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-spaces-and-tabs.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-mixed-spaces-and-tabs: \"error\"*/\n\nfunction add(x, y) {\n\treturn x + y;\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declarator Indentation in JavaScript\nDESCRIPTION: Examples showing correct and incorrect variable declaration indentation with different VariableDeclarator options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": 1 }]*/\n\nvar a,\n    b,\n    c;\nlet d,\n    e,\n    f;\nconst g = 1,\n    h = 2,\n    i = 3;\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Settings in YAML Configuration\nDESCRIPTION: Example of adding shared settings to an ESLint YAML configuration file, which allows plugins to access shared information across all rules. This is useful for custom rules that need access to common settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsettings:\n    sharedData: \"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'double' Quote Option\nDESCRIPTION: Shows code examples that violate the 'double' quotes rule configuration, which requires using double quotes wherever possible.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint quotes: [\"error\", \"double\"]*/\n\nvar single = 'single';\nvar unescaped = 'a string containing \"double\" quotes';\nvar backtick = `back\\ntick`; // you can use \\n in single or double quoted strings\n```\n\n----------------------------------------\n\nTITLE: Correct spacing examples with unary operators in JavaScript\nDESCRIPTION: Examples of code that follows the space-unary-ops rule with the default configuration, showing proper spacing after word operators and no spacing around nonword operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-ops.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-unary-ops: \"error\"*/\n\n// Word unary operator \"typeof\" is followed by a whitespace.\ntypeof !foo;\n\n// Word unary operator \"void\" is followed by a whitespace.\nvoid {foo:0};\n\n// Word unary operator \"new\" is followed by a whitespace.\nnew [foo][0];\n\n// Word unary operator \"delete\" is followed by a whitespace.\ndelete (foo.bar);\n\n// Unary operator \"++\" is not followed by whitespace.\n++foo;\n\n// Unary operator \"--\" is not preceded by whitespace.\nfoo--;\n\n// Unary operator \"-\" is not followed by whitespace.\n-foo;\n\n// Unary operator \"+\" is not followed by whitespace.\n+\"3\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage examples of catch parameter shadowing\nDESCRIPTION: Examples showing incorrect code patterns that violate the no-catch-shadow rule by reusing variable names in catch clauses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-catch-shadow.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-catch-shadow: \"error\"*/\n\nvar err = \"x\";\n\ntry {\n    throw \"problem\";\n} catch (err) {\n\n}\n\nfunction error() {\n    // ...\n};\n\ntry {\n    throw \"problem\";\n} catch (error) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Config for Reporting Unused Inline Comments\nDESCRIPTION: Configuration example showing how to enable reporting of unused ESLint inline configuration comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlinterOptions: {\n\t\t\treportUnusedInlineConfigs: \"error\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Require Statement Types Example\nDESCRIPTION: Demonstrates the different types of require statements that the rule recognizes: core modules, file modules, node_modules, computed requires, uninitialized vars, and other declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-requires.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fs = require('fs'),        // \"core\"     \\\n    async = require('async'),  // \"module\"   |- these are \"require declaration\"s\n    foo = require('./foo'),    // \"file\"     |\n    bar = require(getName()),  // \"computed\" /\n    baz = 42,                  // \"other\"\n    bam;                       // \"uninitialized\"\n```\n\n----------------------------------------\n\nTITLE: Implementing padded-blocks with 'switches: always' option in JavaScript\nDESCRIPTION: Examples of incorrect code when using the option that requires padding inside switch statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"switches\": \"always\" }]*/\n\nswitch (a) {\n    case 0: foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with blockScopedFunctions: \"disallow\" Option\nDESCRIPTION: Demonstrates code patterns that violate the rule with blockScopedFunctions set to \"disallow\", which prevents function declarations in blocks even in strict mode with ES2015 support.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-inner-declarations: [\"error\", \"functions\", { blockScopedFunctions: \"disallow\" }]*/\n\n// non-strict code\n\nif (test) {\n    function doSomething() { }\n}\n\nfunction doSomething() {\n    if (test) {\n        function doSomethingElse() { }\n    }\n}\n\n// strict code\n\nfunction foo() {\n    \"use strict\";\n\n    if (test) {\n        function bar() { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Dangling Underscores After 'this' in JavaScript\nDESCRIPTION: Example of using the 'allowAfterThis' option to permit dangling underscores in members of the 'this' object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: [\"error\", { \"allowAfterThis\": true }]*/\n\nconst a = this.foo_;\nthis._bar();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of allowImportNamePattern Option\nDESCRIPTION: Example showing violations when importing names that don't match the allowed pattern beginning with 'has'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_40\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    allowImportNamePattern: '^has'\n}]}]*/\n\nimport { isEmpty } from 'utils/collection-utils';\n```\n\n----------------------------------------\n\nTITLE: Correct Block Spacing with 'always' Option in JavaScript\nDESCRIPTION: Examples of correct code when using the 'always' option, which requires spaces inside blocks. These examples properly include spaces between opening/closing block tokens and adjacent tokens.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/block-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*eslint block-spacing: \"error\"*/\n\nfunction foo() { return true; }\nif (foo) { bar = 0; }\n\nclass C {\n    static { this.bar = 0; }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Separate-Lines Option\nDESCRIPTION: Example of correct multiline comment formatting using the separate-lines option, showing proper consecutive line comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-comment-style.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// This line\n// calls foo()\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Handling Unmatched Patterns\nDESCRIPTION: Example showing how to prevent errors for unmatched glob patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n--no-error-on-unmatched-pattern --ext .ts \"lib/*\"\n```\n\n----------------------------------------\n\nTITLE: Restoring Rule Behavior from ESLint v4\nDESCRIPTION: A JSON configuration that explicitly sets the previous default options for rules that have changed their defaults in ESLint v5.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-5.0.0.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"object-curly-newline\": [\"error\", { \"multiline\": true }],\n\t\t\"no-self-assign\": [\"error\", { \"props\": false }]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Missing Line Before Block Comment (JavaScript)\nDESCRIPTION: Example of incorrect code that violates the rule by not having an empty line before a block comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true }]*/\n\nvar night = \"long\";\n/* what a great and wonderful day */\nvar day = \"great\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function-Level Strict Mode with Global Option\nDESCRIPTION: Example of incorrect code when using the 'global' option. The strict mode directive is incorrectly placed in the function scope instead of the global scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"global\"]*/\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Tabs in JavaScript\nDESCRIPTION: Examples showing incorrect code that contains tab characters in various contexts including variable declarations, function comments, and inline comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-tabs.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-tabs: \"error\" */\n\nvar a \t= 2;\n\n/**\n* \t\t it's a test function\n*/\nfunction test(){}\n\nvar x = 1; // \t test\n```\n\n----------------------------------------\n\nTITLE: Incorrect Arrow Spacing Examples with Mixed Spacing Configuration\nDESCRIPTION: Examples of code that violates the arrow-spacing rule when configured to require no space before and space after the arrow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n\n() =>{};\n(a) => {};\n()=>{'\\n'};\n```\n\n----------------------------------------\n\nTITLE: Correct usage with restricted fs and cluster modules (JavaScript)\nDESCRIPTION: Example of code that complies with the rule by importing a non-restricted module instead of the restricted 'fs' and 'cluster' modules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-modules: [\"error\", \"fs\", \"cluster\"]*/\n\nconst crypto = require('crypto');\n```\n\n----------------------------------------\n\nTITLE: Basic Indentation Example in JavaScript\nDESCRIPTION: Demonstrates the basic indentation style enforced by the indent-legacy rule. The default style is 4 spaces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction hello(indentSize, type) {\n    if (indentSize === 4 && type !== 'tab') {\n        console.log('Each next indentation will increase on 4 spaces');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with prefer-double Option\nDESCRIPTION: Examples of correct code when using the prefer-double option, showing proper usage of double quotes and handling of nested quotes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/jsx-quotes.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n/*eslint jsx-quotes: [\"error\", \"prefer-double\"]*/\n\n<a b=\"c\" />;\n<a b='\"' />;\n```\n\n----------------------------------------\n\nTITLE: Correct Regular Expression Usage with ESLint Rule\nDESCRIPTION: Example showing the proper way to wrap regular expressions in parentheses to comply with the wrap-regex rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-regex.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint wrap-regex: \"error\"*/\n\nfunction a() {\n    return (/foo/).test(\"bar\");\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'always' and Multiple Exceptions\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'always' option with exceptions for both curly and square brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\", \"[]\"] }]*/\n\nbar( {bar:'baz'} );\nbaz( 1, [1,2] );\nfoo( {bar: 'baz'}, [1, 2] );\n```\n\n----------------------------------------\n\nTITLE: Basic Constructor Usage Example\nDESCRIPTION: Demonstrates basic usage of constructor functions with proper capitalization.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-cap.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst friend = new Person();\n```\n\n----------------------------------------\n\nTITLE: Matching Files Without Extensions in ESLint\nDESCRIPTION: Shows how to configure ESLint to match files without extensions using the !(*.*) pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/!(*.*)\"],\n\t},\n\t// ...other config\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Default Max Empty Lines\nDESCRIPTION: Example showing correct code that adheres to the default maximum of 2 consecutive empty lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multiple-empty-lines.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multiple-empty-lines: \"error\"*/\n\nvar foo = 5;\n\n\nvar bar = 3;\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Example\nDESCRIPTION: Example of TypeScript code that complies with initialization rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint init-declarations: [\"error\", \"never\"] */\n\ndeclare const foo: number;\n\ndeclare namespace myLib {\n\tlet numberOfGreetings: number;\n}\n\ninterface GreetingSettings {\n\tgreeting: string;\n\tduration?: number;\n\tcolor?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Option Example - Correct\nDESCRIPTION: Examples of destructuring patterns that comply with the id-match rule when ignoreDestructuring is true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-match.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-match: [2, \"^[^_]+$\", { \"ignoreDestructuring\": true }]*/\n\nconst { category_id } = query;\n\nconst { category_Id = 1 } = query;\n\nconst { category_alias: category_alias } = query;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Separate-Lines Option\nDESCRIPTION: Examples of incorrect multiline comment formatting when using the separate-lines option, which requires line comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-comment-style.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* This line\ncalls foo() */\nfoo();\n\n/*\n * This line\n * calls foo()\n */\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Correct Examples for Required Blank Lines After Variable Declarations\nDESCRIPTION: These examples demonstrate correct code with proper blank line spacing after variable declarations. The rule allows consecutive variable declarations without blank lines between them, but requires blank lines after the group.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: [\"const\", \"let\", \"var\"], next: \"*\"},\n    { blankLine: \"any\",    prev: [\"const\", \"let\", \"var\"], next: [\"const\", \"let\", \"var\"]}\n]*/\n\nfunction foo1() {\n    var a = 0;\n    var b = 0;\n\n    bar();\n}\n\nfunction foo2() {\n    let a = 0;\n    const b = 0;\n\n    bar();\n}\n\nfunction foo3() {\n    const a = 0;\n    const b = 0;\n\n    bar();\n}\n\nclass C {\n    static {\n        let a = 0;\n        let b = 0;\n\n        bar();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Call Arguments with Consistent Option - Incorrect Examples\nDESCRIPTION: Examples of incorrect function call argument formatting when using the 'consistent' option, which requires consistent use of line breaks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-call-argument-newline.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint function-call-argument-newline: [\"error\", \"consistent\"]*/\n\nfoo(\"one\", \"two\",\n    \"three\");\n//or\nfoo(\"one\",\n    \"two\", \"three\");\n\nbar(\"one\", \"two\",\n    { one: 1, two: 2}\n);\n\nbaz(\"one\", \"two\",\n    (x) => { console.log(x); }\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of Labeled Continue Statement in JavaScript\nDESCRIPTION: This example demonstrates the use of a labeled continue statement, which is also disallowed by the no-continue rule. The rule suggests restructuring the code to avoid using continue statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-continue.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-continue: \"error\"*/\n\nlet sum = 0,\n    i;\n\nlabeledLoop: for(i = 0; i < 10; i++) {\n    if(i >= 5) {\n        continue labeledLoop;\n    }\n\n    sum += i;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Element Formatting with Separate Options for ArrayExpression and ArrayPattern in JavaScript\nDESCRIPTION: Examples of incorrectly formatted arrays and destructuring patterns that violate the separate configuration for ArrayExpression and ArrayPattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", { \"ArrayExpression\": \"always\", \"ArrayPattern\": \"never\" }]*/\n\nvar a = [1, 2];\nvar b = [1, 2, 3];\nvar c = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n\nvar [d,\n    e] = arr;\nvar [f,\n    g,\n    h] = arr;\nvar [i = function foo() {\n  dosomething()\n},\nj = function bar() {\n  dosomething()\n}] = arr\n```\n\n----------------------------------------\n\nTITLE: Invalid comma-dangle Rule Configuration Example in ESLint v8.0.0\nDESCRIPTION: An example of a comma-dangle rule configuration that worked in ESLint v7.0.0 but will cause an error in v8.0.0. This shows the now-invalid format where a third element is included in the array.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"comma-dangle\": [\"error\", \"never\", { \"arrays\": \"always\" }]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'never' Option in JavaScript\nDESCRIPTION: Example of incorrect code when the unicode-bom rule is set to 'never', showing a file with the prohibited Unicode BOM character at the beginning.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/unicode-bom.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n﻿// U+FEFF at the beginning\n\n/*eslint unicode-bom: [\"error\", \"never\"]*/\n\nlet abc;\n```\n\n----------------------------------------\n\nTITLE: Configuring Environments in package.json File\nDESCRIPTION: This example demonstrates how to configure ESLint environments directly in a package.json file using the 'eslintConfig' property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"mypackage\",\n\t\"version\": \"0.0.1\",\n\t\"eslintConfig\": {\n\t\t\"env\": {\n\t\t\t\"browser\": true,\n\t\t\t\"node\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ESLint Rule Using Inline Configuration\nDESCRIPTION: Example of using an inline ESLint configuration comment to set the severity of the no-unused-expressions rule to error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/glossary.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-unused-expressions: \"error\" */\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage with Mixed Configuration Options\nDESCRIPTION: Examples showing violations when the rule is configured with different settings for functions, keywords, and classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-blocks.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"never\" }]*/\n\nfunction a() {}\n\ntry {} catch(a){}\n\nclass Foo{\n  constructor() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Example with Default Configuration\nDESCRIPTION: Demonstrates code that would trigger warnings with the default configuration, showing both block comment and inline comment violations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-warning-comments.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-warning-comments: \"error\"*/\n\n/*\nFIXME\n*/\nfunction callback(err, results) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  // TODO\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Default Max Depth\nDESCRIPTION: Example showing code that violates the default maximum nesting depth of 4 levels.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-depth.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-depth: [\"error\", 4]*/\n\nfunction foo() {\n    for (;;) { // Nested 1 deep\n        while (true) { // Nested 2 deep\n            if (true) { // Nested 3 deep\n                if (true) { // Nested 4 deep\n                    if (true) { // Nested 5 deep\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct code examples for no-space-before-semi rule in JavaScript\nDESCRIPTION: These examples demonstrate proper semicolon usage without spaces before them, including an immediately invoked function expression and a simple variable declaration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-space-before-semi.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n;(function(){}());\n\nvar foo = \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Object Structure\nDESCRIPTION: Shows the structure of the configuration object that can be used to customize the rule behavior.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-directive.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"before\": \"always\" or \"never\"\n  \"after\": \"always\" or \"never\",\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of delete Operator on Variables in JavaScript\nDESCRIPTION: Example showing incorrect code that violates the no-delete-var rule by attempting to delete a variable. This pattern should be avoided as it can cause unexpected behavior and is not allowed in strict mode.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-delete-var.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-delete-var: \"error\"*/\n\nlet x;\ndelete x;\n```\n\n----------------------------------------\n\nTITLE: Example of Root Configuration Behavior\nDESCRIPTION: Example showing how the 'root: true' setting affects configuration file resolution. When root is set in a subdirectory, ESLint does not use configuration files from parent directories.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nhome\n└── user\n    └── projectA\n        ├── .eslintrc.json  <- Not used\n        └── lib\n            ├── .eslintrc.json  <- { \"root\": true }\n            └── main.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with allowObjectPatternsAsParameters Option\nDESCRIPTION: Examples of code that violate the no-empty-pattern rule when using the allowObjectPatternsAsParameters option set to true, showing restricted nested empty patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-pattern.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-pattern: [\"error\", { \"allowObjectPatternsAsParameters\": true }]*/\n\nfunction foo({a: {}}) {}\nconst bar = function({a: {}}) {};\nconst qux = ({a: {}}) => {};\nconst quux = ({} = bar) => {};\nconst item = ({} = { bar: 1 }) => {};\n\nfunction baz([]) {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Indentation Example in JavaScript\nDESCRIPTION: Demonstrates code with incorrect indentation according to the default 'indent' rule settings (4 spaces).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: \"error\"*/\n\nif (a) {\n  b=c;\n  function foo(d) {\n    e=f;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Variable Sorting Example\nDESCRIPTION: Example showing correct variable ordering with the ignoreCase option enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-vars.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-vars: [\"error\", { \"ignoreCase\": true }]*/\n\nlet a, A;\n\nlet c, D, e;\n```\n\n----------------------------------------\n\nTITLE: Linting JavaScript Files in ESLint Documentation in Shell\nDESCRIPTION: Command to lint JavaScript files in the ESLint documentation. This should be run from the root folder of the project, not from the 'docs' folder.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint:docs:js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Error Handling with ESLint Rule (JavaScript)\nDESCRIPTION: This example shows code that violates the 'handle-callback-err' rule with the default 'err' parameter name. The error is not handled in the callback function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/handle-callback-err.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint handle-callback-err: \"error\"*/\n\nfunction loadData (err, data) {\n    doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of 'newline-after-var' Rule with 'never' Option\nDESCRIPTION: Examples of code that violate the 'newline-after-var' rule when set to 'never', showing improper newline usage after variable declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-after-var.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint newline-after-var: [\"error\", \"never\"]*/\n\nvar greet = \"hello,\",\n    name = \"world\";\n\nconsole.log(greet, name);\n\nlet hello = \"hello,\",\n    world = \"world\";\n\nconsole.log(hello, world);\n\nvar greet = \"hello,\";\nconst NAME = \"world\";\n\nconsole.log(greet, NAME);\n\nvar greet = \"hello,\";\nvar name = \"world\";\n// var name = require(\"world\");\n\nconsole.log(greet, name);\n```\n\n----------------------------------------\n\nTITLE: Correct Object Expression Indentation in JavaScript\nDESCRIPTION: Example of correctly indented object expression with the indent-legacy rule set to 1 space indentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"ObjectExpression\": 1 }]*/\n\nvar foo = {\n  bar: 1,\n  baz: 2,\n  qux: 3\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Square Bracket Notation Example\nDESCRIPTION: Simple example showing the discouraged square bracket notation syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-notation.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfoo[\"bar\"];\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration of max-classes-per-file Rule in ESLint JSON\nDESCRIPTION: This JSON snippet shows an advanced configuration of the 'max-classes-per-file' rule, allowing two classes and ignoring class expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-classes-per-file.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"max-classes-per-file\": [\n        \"error\",\n        { \"ignoreExpressions\": true, \"max\": 2 }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'never' Option\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the default 'never' option for the space-in-parens rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"never\"]*/\n\nfoo( );\n\nfoo( 'bar');\nfoo('bar' );\nfoo( 'bar' );\n\nfoo( /* bar */ );\n\nvar foo = ( 1 + 2 ) * 3;\n( function () { return 'bar'; }() );\n```\n\n----------------------------------------\n\nTITLE: Correct Regular Expression Pattern Using Character Class\nDESCRIPTION: Example of how to correctly write a regular expression that matches an equals sign by using a character class, which avoids confusion with division operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-div-regex.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-div-regex: \"error\"*/\n\nfunction bar() { return /[=]foo/; }\n```\n\n----------------------------------------\n\nTITLE: ESLint Error Message Configuration\nDESCRIPTION: A partial configuration showing custom error messages for ESLint. This snippet includes message templates for missing or unexpected return values in functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n                    \"missingReturn\": \"Expected to return a value at the end of {{name}}.\",\n                    \"missingReturnValue\": \"{{name}} expected a return value.\",\n                    \"unexpectedReturnValue\": \"{{name}} expected no return value.\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Unary Word Operators in JavaScript\nDESCRIPTION: Examples of incorrect spacing after unary word operators that violate the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-word-ops.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntypeof!a\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvoid{a:0}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew[a][0]\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndelete(a.b)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Octal Literals (Violating no-octal Rule)\nDESCRIPTION: Examples of code that violate the no-octal rule by using octal literals with leading zeros. Both direct assignment and arithmetic operations with octal literals are disallowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-octal.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-octal: \"error\"*/\n\nconst num = 071;\nconst result = 5 + 07;\n```\n\n----------------------------------------\n\nTITLE: Using Object Constructor (Incorrect)\nDESCRIPTION: Examples of incorrect code that uses the Object constructor with new, which the rule disallows.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-object.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new-object: \"error\"*/\n\nvar myObject = new Object();\n\nnew Object();\n\nvar foo = new Object(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Configuring lines-around-comment with beforeBlockComment and allowObjectStart in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with beforeBlockComment and allowObjectStart options enabled, allowing block comments at the start of object literals without a preceding blank line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true, \"allowObjectStart\": true }]*/\n\nvar foo = {\n    /* what a great and wonderful day */\n    day: \"great\"\n};\n\nconst {\n    /* what a great and wonderful day */\n    foo: someDay\n} = {foo: \"great\"};\n\nconst {\n    /* what a great and wonderful day */\n    day\n} = {day: \"great\"};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Last Comma Style\nDESCRIPTION: Examples of correct comma placement when using the default 'last' option, showing proper comma placement at the end of lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-style.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-style: [\"error\", \"last\"]*/\n\nvar foo = 1, bar = 2;\n\nvar foo = 1,\n    bar = 2;\n\nvar foo = [\"apples\",\n           \"oranges\"];\n\nfunction baz() {\n    return {\n        \"a\": 1,\n        \"b:\": 2\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of spaced-line-comment with Multiple Character Exception in JavaScript\nDESCRIPTION: Example showing correct code with the 'always' option and an exception for the '-+' pattern. Comment lines starting with the exception pattern are allowed without whitespace.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-line-comment.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// When [\"always\",{\"exceptions\":[\"-+\"]}]\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Running ESLint Tests\nDESCRIPTION: Command to execute the ESLint test suite to verify correct environment setup.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/development-environment.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with prefer-single Option\nDESCRIPTION: Example of incorrect code when using the prefer-single option, showing usage of double quotes when single quotes are required.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/jsx-quotes.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n/*eslint jsx-quotes: [\"error\", \"prefer-single\"]*/\n\n<a b=\"c\" />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Suppressions Location\nDESCRIPTION: Example showing how to specify a custom location for the suppressions file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n\"src/**/*.js\" --suppressions-location \".eslint-suppressions-example.json\"\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Initializations Option\nDESCRIPTION: Examples of code that correctly follows the rule when configured with the 'initializations' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var-declaration-per-line.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var-declaration-per-line: [\"error\", \"initializations\"]*/\n\nvar a, b;\n\nlet c,\n    d;\n\nlet e,\n    f = 0;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Accessor Pairs in Classes with enforceForClassMembers Option Disabled\nDESCRIPTION: These examples show correct implementations that satisfy the 'accessor-pairs' rule when the 'enforceForClassMembers' option is set to false, allowing single accessors in classes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/accessor-pairs.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint accessor-pairs: [\"error\", {\n    \"getWithoutSet\": true, \"setWithoutGet\": true, \"enforceForClassMembers\": false\n}]*/\n\nclass Foo {\n    get a() {\n        return this.val;\n    }\n}\n\nclass Bar {\n    static set a(value) {\n        this.val = value;\n    }\n}\n\nconst Baz = class {\n    static get a() {\n        return this.val;\n    }\n}\n\nconst Quux = class {\n    set a(value) {\n        this.val = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Too Many Statements\nDESCRIPTION: Demonstrates code that violates the rule by having multiple statements on a single line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-statements-per-line.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo () { var bar; if (condition) { bar = 1; } else { bar = 2; } return true; }\n```\n\n----------------------------------------\n\nTITLE: Diff comparison showing specific property changes\nDESCRIPTION: Two diff examples comparing the specificity of changes when properties are on separate lines versus all on one line, showing the readability benefit of the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n// More specific\n var obj = {\n     foo: \"foo\",\n-    bar: \"bar\",\n+    bar: \"bazz\",\n     baz: \"baz\"\n };\n```\n\n----------------------------------------\n\nTITLE: Correct Call Expression Argument Indentation in JavaScript\nDESCRIPTION: Example of correctly indented call expression arguments with the indent-legacy rule set to 1 space indentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"CallExpression\": {\"arguments\": 1} }]*/\n\nfoo(bar,\n  baz,\n  qux\n);\n```\n\n----------------------------------------\n\nTITLE: Method Chain Example - JavaScript\nDESCRIPTION: Example showing how nested method chains can create long functions that other complexity rules might not catch.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-lines-per-function.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction() {\n    return m(\"div\", [\n        m(\"table\", {className: \"table table-striped latest-data\"}, [\n            m(\"tbody\",\n                data.map(function(db) {\n                    return m(\"tr\", {key: db.dbname}, [\n                        m(\"td\", {className: \"dbname\"}, db.dbname),\n                        m(\"td\", {className: \"query-count\"},  [\n                            m(\"span\", {className: db.lastSample.countClassName}, db.lastSample.nbQueries)\n                        ])\n                    ])\n                })\n            )\n        ])\n    ])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring lines-around-comment with afterBlockComment and allowArrayEnd in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with afterBlockComment and allowArrayEnd options enabled, which allows block comments at the end of array literals without requiring a blank line after them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"afterBlockComment\": true, \"allowArrayEnd\": true }]*/\n\nvar day = [\n    \"great\",\n    \"wonderful\"\n\n    /* what a great and wonderful day */\n];\n\nconst [\n    someDay\n\n    /* what a great and wonderful day */\n] = [\"great\", \"not great\"];\n```\n\n----------------------------------------\n\nTITLE: Using Environment from a Plugin in package.json\nDESCRIPTION: This snippet shows how to configure an ESLint environment from a plugin directly in a package.json file using the 'eslintConfig' property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"mypackage\",\n\t\"version\": \"0.0.1\",\n\t\"eslintConfig\": {\n\t\t\"plugins\": [\"example\"],\n\t\t\"env\": {\n\t\t\t\"example/custom\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example of incorrect afterHashbangComment usage in JavaScript\nDESCRIPTION: Example of incorrect code when using the afterHashbangComment option, showing how a hashbang comment without a blank line after it violates the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n#!foo\nvar day = \"great\"\n\n/*eslint lines-around-comment: [\"error\", { \"afterHashbangComment\": true }] */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Assignment Examples in JavaScript\nDESCRIPTION: Examples of code that violate the no-global-assign rule by assigning values to read-only global variables like Object and undefined.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-global-assign.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-global-assign: \"error\"*/\n\nObject = null\nundefined = 1\n```\n\n----------------------------------------\n\nTITLE: ESLint Plugin Resolution Error Message\nDESCRIPTION: Example error message shown when ESLint cannot uniquely determine which version of a plugin to use due to multiple installations with different versions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/troubleshooting/couldnt-determine-the-plugin-uniquely.md#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nESLint couldn't determine the plugin \"${pluginId}\" uniquely.\n\n- ${filePath} (loaded in \"${importerName}\")\n- ${filePath} (loaded in \"${importerName}\")\n...\n\nPlease remove the \"plugins\" setting from either config or remove either plugin installation.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating incorrect usage of computed property keys in JavaScript\nDESCRIPTION: Examples of code that violate the no-useless-computed-key rule by using unnecessary computed property syntax with literals.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-computed-key.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-computed-key: \"error\"*/\n\nconst a = { ['0']: 0 };\nconst b = { ['0+1,234']: 0 };\nconst c = { [0]: 0 };\nconst d = { ['x']: 0 };\nconst e = { ['x']() {} };\n\nconst { [0]: foo } = obj;\nconst { ['x']: bar } = obj;\n\nclass Foo {\n    [\"foo\"] = \"bar\";\n\n    [0]() {}\n    ['a']() {}\n    get ['b']() {}\n    set ['c'](value) {}\n\n    static [\"foo\"] = \"bar\";\n\n    static ['a']() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Rest/Spread with experimentalObjectRestSpread (Deprecated)\nDESCRIPTION: The deprecated way to enable object rest/spread support using the experimentalObjectRestSpread option in ESLint's parser options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-5.0.0.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"parserOptions\": {\n\t\t\"ecmaFeatures\": {\n\t\t\t\"experimentalObjectRestSpread\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code with Never Option\nDESCRIPTION: Example of correct code when using the 'never' option. No strict mode directives appear anywhere in the code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"never\"]*/\n\nfunction foo() {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rules for Specific Files in JavaScript\nDESCRIPTION: Shows how to disable rules for a group of files using a configuration file with a 'files' key in the config object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\trules: {\n\t\t\t\"no-unused-expressions\": \"error\",\n\t\t},\n\t},\n\t{\n\t\tfiles: [\"*-test.js\", \"*.spec.js\"],\n\t\trules: {\n\t\t\t\"no-unused-expressions\": \"off\",\n\t\t},\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Correct Array Element Formatting with 'always' Option in JavaScript\nDESCRIPTION: Examples of correctly formatted arrays that comply with the 'always' option, showing proper line breaks between array elements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", \"always\"]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1,\n    2];\nvar d = [1,\n    2,\n    3];\nvar d = [\n  1, \n  2, \n  3\n];\nvar e = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'never' Option\nDESCRIPTION: Examples of incorrect spacing when the rule is configured with 'never' option, showing cases where extra spaces are not allowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/rest-spread-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint rest-spread-spacing: [\"error\", \"never\"]*/\n\nfn(... args);\n[... arr, 4, 5, 6];\nlet [a, b, ... arr] = [1, 2, 3, 4, 5];\nfunction fn(... args) { console.log(args); }\nlet { x, y, ... z } = { x: 1, y: 2, a: 3, b: 4 };\nlet n = { x, y, ... z };\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with 'anywhere' Location Configuration\nDESCRIPTION: Demonstrates code that would trigger warnings when configured to match terms anywhere in comments, with custom terms specified.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-warning-comments.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-warning-comments: [\"error\", { \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" }]*/\n\n// TODO: this\n// todo: this too\n// Even this: TODO\n/*\n * The same goes for this TODO comment\n * Or a fixme\n * as well as any other term\n */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Custom Callback Names\nDESCRIPTION: Shows incorrect implementation with custom callback names (done, send.error, send.success) without return statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/callback-return.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint callback-return: [\"error\", [\"done\", \"send.error\", \"send.success\"]]*/\n\nfunction foo(err, done) {\n    if (err) {\n        done(err);\n    }\n    done();\n}\n\nfunction bar(err, send) {\n    if (err) {\n        send.error(err);\n    }\n    send.success();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Call Spacing Examples in JavaScript\nDESCRIPTION: Examples demonstrating incorrect spacing between function identifiers and their calling parentheses, which violates the no-spaced-func rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-spaced-func.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-spaced-func: \"error\"*/\n\nfn ()\n\nfn\n()\n```\n\n----------------------------------------\n\nTITLE: Basic Bitwise Operation Example\nDESCRIPTION: Simple example showing a bitwise OR operation that would be flagged by this rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-bitwise.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = y | z;\n```\n\n----------------------------------------\n\nTITLE: Allowed Console Methods Configuration\nDESCRIPTION: Example of allowed console methods with specific configuration\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-console.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\n\nconsole.warn(\"Log a warn level message.\");\nconsole.error(\"Log an error level message.\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Rest/Spread with ecmaVersion 2018\nDESCRIPTION: The recommended way to enable object rest/spread support by setting ecmaVersion to 2018 in ESLint's parser options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-5.0.0.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"parserOptions\": {\n\t\t\"ecmaVersion\": 2018\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Descending Order Option for sort-keys Rule\nDESCRIPTION: Examples of incorrect and correct code when the sort-keys rule is configured with 'desc' option to enforce descending alphabetical order of properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"desc\"]*/\n\nconst obj1 = {b: 2, c: 3, a: 1};\nconst obj2 = {\"b\": 2, c: 3, a: 1};\n\n// Case-sensitive by default.\nconst obj3 = {C: 1, b: 3, a: 2};\n\n// Non-natural order by default.\nconst obj4 = {10: b, 2: c, 1: a};\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Rules Directory in ESLint CLI\nDESCRIPTION: The deprecated --rulesdir option allows loading custom rules from specified directories. Rules must follow the same format as bundled rules and still need to be enabled in configuration or via --rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n--rulesdir my-rules/ file.js\n```\n\nLANGUAGE: bash\nCODE:\n```\n--rulesdir my-rules/ --rulesdir my-other-rules/ file.js\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with space-after-keywords Rule Set to 'never'\nDESCRIPTION: Shows code that passes the linting rule when configured to disallow spaces after keywords.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-after-keywords.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-after-keywords: [\"error\", \"never\"]*/\n\nif(a) {}\n```\n\n----------------------------------------\n\nTITLE: ESLint Suppressed Messages Retrieval\nDESCRIPTION: Shows how to retrieve suppressed messages from a previous linting run using getSuppressedMessages().\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verify(\n\t\"var foo = bar; // eslint-disable-line -- Need to suppress\",\n\t{\n\t\trules: {\n\t\t\tsemi: [\"error\", \"never\"],\n\t\t},\n\t},\n\t{ filename: \"foo.js\" }\n);\nconst suppressedMessages = linter.getSuppressedMessages();\n\nconsole.log(suppressedMessages[0].suppressions);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'object' Option (JavaScript)\nDESCRIPTION: This snippet demonstrates incorrect code when the 'dot-location' rule is set to the 'object' option. The dot is placed on a different line than the object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-location.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint dot-location: [\"error\", \"object\"]*/\n\nvar foo = object\n.property;\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Options\nDESCRIPTION: Configuration options for the space-before-function-paren rule, showing both string and object-based configuration formats.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"space-before-function-paren\": [\"error\", \"always\"],\n    // or\n    \"space-before-function-paren\": [\"error\", {\n        \"anonymous\": \"always\",\n        \"named\": \"always\",\n        \"asyncArrow\": \"always\"\n    }],\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Unused Disable Directives\nDESCRIPTION: Shows how to enable reporting of unused 'eslint-disable' comments using the 'reportUnusedDisableDirectives' setting. This helps identify unnecessary bypass comments in the code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {...},\n  \"reportUnusedDisableDirectives\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSCS auto-configure feature\nDESCRIPTION: Command to run JSCS with the auto-configure option to create a configuration based on an existing file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njscs --auto-configure file.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Always Option Example - JavaScript\nDESCRIPTION: Example of code that violates the 'always' initialization rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint init-declarations: [\"error\", \"always\"]*/\n\nfunction foo() {\n    var bar;\n    let baz;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples with the no-multi-spaces rule enabled\nDESCRIPTION: Multiple examples of code that violate the no-multi-spaces rule, showing different contexts where multiple spaces are disallowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-spaces: \"error\"*/\n\nvar a =  1;\n\nif(foo   === \"bar\") {}\n\na <<  b\n\nvar arr = [1,  2];\n\na ?  b: c\n```\n\n----------------------------------------\n\nTITLE: Incorrect code for ObjectExpression and ObjectPattern options\nDESCRIPTION: Examples of code that would trigger the object-curly-newline rule when ObjectExpression is set to 'always' and ObjectPattern to 'never', showing distinct requirements for different syntax constructs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", { \"ObjectExpression\": \"always\", \"ObjectPattern\": \"never\" }]*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {foo: 1, bar: 2};\nlet d = {foo: 1,\n    bar: 2};\nlet e = {foo: function() {\n    dosomething();\n}};\n\nlet {\n} = obj;\nlet {\n    f\n} = obj;\nlet {\n    g, h\n} = obj;\nlet {\n    i,\n    j\n} = obj;\nlet {\n    k = function() {\n        dosomething();\n    }\n} = obj;\n```\n\n----------------------------------------\n\nTITLE: Defining the ESLint Languages Page Layout with Liquid Templates\nDESCRIPTION: This template defines the structure of the ESLint languages page with frontmatter metadata and layout components. It creates a page with a hero section and a navigation area that lists available language options through an included partial template.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/pages/languages.md#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n---\nlayout: main.html\ntitle: Languages\npermalink: /languages/\nhook: \"languages-page\"\n---\n\n{%- from 'components/hero.macro.html' import hero %}\n\n{{ hero({\n    title: \"Languages\",\n    supporting_text: \"Choose your language\"\n}) }}\n\n<section class=\"languages-section section\">\n    <div class=\"content-container\">\n        <nav aria-labelledby=\"languages-label\">\n            {% include 'partials/languages-list.html' %}\n        </nav>\n    </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Enabling ES6 Environment in ESLint Configuration\nDESCRIPTION: Configuration example for enabling the ES6 environment in ESLint v2.0.0. This is necessary to access ES6 global variables like Promise, Map, Set, and Symbol that were moved from the built-in environment to the es6 environment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In your .eslintrc\n{\n\tenv: {\n\t\tes6: true;\n\t}\n}\n\n// Or in a configuration comment\n/*eslint-env es6*/\n```\n\n----------------------------------------\n\nTITLE: Incorrect Switch Statement Spacing Example\nDESCRIPTION: Example showing incorrect spacing around colons in switch statement case/default clauses with default rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/switch-colon-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint switch-colon-spacing: \"error\"*/\n\nswitch (a) {\n    case 0 :break;\n    default :foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Keyword Spacing Variations in JavaScript\nDESCRIPTION: Shows examples of both spaced and unspaced keywords in conditional statements, highlighting the difference in coding styles that the rule addresses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-after-keywords.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (condition) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\nif(condition) {\n    doSomething();\n}else{\n    doSomethingElse();\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Exception Cases for Negation in JavaScript\nDESCRIPTION: Example of a case that is not considered a valid exception even with parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-negation.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unsafe-negation: \"error\"*/\n\nif (!(foo) in object) {\n    // this is not an allowed exception\n}\n```\n\n----------------------------------------\n\nTITLE: Ambiguous Arrow Function Usage\nDESCRIPTION: Shows ambiguous use of arrow functions that could be interpreted multiple ways, demonstrating why the rule prevents such patterns\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-arrow-condition.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// The intent is not clear\nvar x = a => 1 ? 2 : 3\n// Did the author mean this\nvar x = function (a) { return a >= 1 ? 2 : 3 }\n// Or this\nvar x = a <= 1 ? 2 : 3\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'always' Option\nDESCRIPTION: Examples demonstrating code that violates the rule when configured with the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-directive.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint lines-around-directive: [\"error\", \"always\"] */\n\n// comment\n\"use strict\";\nvar foo;\n\nfunction foo() {\n  \"use strict\";\n  \"use asm\";\n  var bar;\n}\n\nfunction foo() {\n  // comment\n  \"use strict\";\n  var bar;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint lines-around-directive: [\"error\", \"always\"] */\n\n// comment\n\"use strict\";\n\"use asm\";\nvar foo;\n```\n\n----------------------------------------\n\nTITLE: Unused Caught Error with no-unused-vars Rule\nDESCRIPTION: Example showing how 'no-unused-vars' now defaults to checking caught errors with the 'caughtErrors' option set to 'all', reporting unused catch parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-vars: \"error\"*/\ntry {\n} catch (error) {\n\t// 'error' is defined but never used\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ESLint Rules in JavaScript\nDESCRIPTION: Demonstrates how to define ESLint rules in a separate configuration file within a package. This example sets the 'no-console' rule to warning level.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\trules: {\n\t\t\"no-console\": 1,\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Accessor Pairs in Classes with enforceForClassMembers Option\nDESCRIPTION: These examples show violations of the 'accessor-pairs' rule in class definitions when the 'enforceForClassMembers' option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/accessor-pairs.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint accessor-pairs: [\"error\", { \"getWithoutSet\": true, \"enforceForClassMembers\": true }]*/\n\nclass Foo {\n    get a() {\n        return this.val;\n    }\n}\n\nclass Bar {\n    static get a() {\n        return this.val;\n    }\n}\n\nconst Baz = class {\n    get a() {\n        return this.val;\n    }\n    static set a(value) {\n        this.val = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Basic Configuration Extension\nDESCRIPTION: Example of extending an ESLint configuration using the module.exports format. Shows how to reference a shareable configuration package.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/troubleshooting/couldnt-find-the-config.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\textends: [\"eslint-config-yours\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring comma-dangle Rule in ESLint v6\nDESCRIPTION: This snippet demonstrates how to configure the comma-dangle rule to restore its previous default behavior in ESLint v6. It sets different options for various code constructs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"comma-dangle\": [\n\t\t\t\"error\",\n\t\t\t{\n\t\t\t\t\"arrays\": \"never\",\n\t\t\t\t\"objects\": \"never\",\n\t\t\t\t\"imports\": \"never\",\n\t\t\t\t\"exports\": \"never\",\n\t\t\t\t\"functions\": \"ignore\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Namespace To Default Re-exports - Incorrect Example\nDESCRIPTION: Example showing restriction of re-exporting an entire module namespace as default when the 'namespaceFrom' option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"namespaceFrom\": true } }]*/\n\nexport * as default from 'foo';\n```\n\n----------------------------------------\n\nTITLE: Setting Root Configuration in YAML Format\nDESCRIPTION: Setting 'root: true' in a YAML configuration file to limit ESLint from looking further up the directory tree for more configuration files. This is useful to isolate project configuration from higher-level settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\nroot: true\n```\n\n----------------------------------------\n\nTITLE: Using prefer-reflect Rule with 'apply' Exception in JavaScript\nDESCRIPTION: Shows how to use the prefer-reflect rule with an exception for the 'apply' method, allowing both Reflect.apply and Function.prototype.apply.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-reflect.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"apply\"] }]*/\n\n// in addition to Reflect.apply(...):\nmyFunction.apply(undefined, args);\nmyFunction.apply(null, args);\nobj.myMethod.apply(obj, args);\nobj.myMethod.apply(other, args);\n```\n\n----------------------------------------\n\nTITLE: Using .gitignore as Ignore File (Shell)\nDESCRIPTION: Use your existing .gitignore file as the ESLint ignore file. This allows you to maintain a single file for both Git and ESLint ignores.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore-deprecated.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\neslint --ignore-path .gitignore file.js\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with max:2 Option\nDESCRIPTION: Examples showing code that complies with the rule when configured with a maximum of 2 statements per line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-statements-per-line.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-statements-per-line: [\"error\", { \"max\": 2 }]*/\n\nvar bar; var baz;\nif (condition) bar = 1; if (condition) baz = 2;\nfor (var i = 0; i < length; ++i) { bar = 1; }\nswitch (discriminant) { default: break; }\nfunction foo() { bar = 1; }\nvar qux = function qux() { bar = 1; };\n(function foo() { var bar = 1; })();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage with 'properties: never' and 'ignoreDestructuring: true' Options\nDESCRIPTION: Examples of code that comply with the camelcase rule using both { \"properties\": \"never\" } and { \"ignoreDestructuring\": true } options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {\"properties\": \"never\", ignoreDestructuring: true}]*/\n\nconst { some_property } = obj;\ndoSomething({ some_property });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of camelcase Rule in JavaScript\nDESCRIPTION: Examples of code that comply with the camelcase rule using the default { \"properties\": \"always\" } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: \"error\"*/\n\nimport { no_camelcased as camelCased } from \"external-module\";\n\nconst myFavoriteColor   = \"#112C85\";\nconst _myFavoriteColor  = \"#112C85\";\nconst myFavoriteColor_  = \"#112C85\";\nconst MY_FAVORITE_COLOR = \"#112C85\";\nconst foo1 = bar.baz_boom;\nconst foo2 = { qux: bar.baz_boom };\n\nobj.do_something();\ndo_something();\nnew do_something();\n\nconst { category_id: category } = query;\n\nfunction foo({ isCamelCased }) {\n    // ...\n};\n\nfunction bar({ isCamelCased: isAlsoCamelCased }) {\n    // ...\n}\n\nfunction baz({ isCamelCased = 'default value' }) {\n    // ...\n};\n\nconst { categoryId = 1 } = query;\n\nconst { foo: isCamelCased } = bar;\n\nconst { foo: camelCasedName = 1 } = quz;\n```\n\n----------------------------------------\n\nTITLE: Implementing padded-blocks with 'switches: never' option in JavaScript\nDESCRIPTION: Examples of incorrect code when using the option that disallows padding inside switch statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"switches\": \"never\" }]*/\n\nswitch (a) {\n\n    case 0: foo();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Named Default Re-exports with Alias - Incorrect Example\nDESCRIPTION: Example showing restriction of re-exporting default as default from another module with an explicit alias when defaultFrom is restricted.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"defaultFrom\": true } }]*/\n\nexport { default as default } from 'foo';\n```\n\n----------------------------------------\n\nTITLE: Configuring function-paren-newline rule in ESLint (JSON)\nDESCRIPTION: Example configurations for the 'function-paren-newline' rule in ESLint. Shows how to set the rule to 'never' and how to use the 'minItems' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-paren-newline.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"function-paren-newline\": [\"error\", \"never\"]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"function-paren-newline\": [\"error\", { \"minItems\": 3 }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rules with eslint:recommended\nDESCRIPTION: JSON configuration example showing how to disable new rules added in eslint:recommended v6 and restore behavior from v5. This configuration explicitly sets rule states to maintain compatibility.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\",\n\n\t\"rules\": {\n\t\t\"no-async-promise-executor\": \"off\",\n\t\t\"no-misleading-character-class\": \"off\",\n\t\t\"no-prototype-builtins\": \"off\",\n\t\t\"no-shadow-restricted-names\": \"off\",\n\t\t\"no-useless-catch\": \"off\",\n\t\t\"no-with\": \"off\",\n\t\t\"require-atomic-updates\": \"off\",\n\n\t\t\"no-console\": \"error\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Specific Rule on a Specific Line\nDESCRIPTION: Shows different methods to disable a specific ESLint rule for a single line using inline comments. This provides very targeted rule bypassing for exceptional cases.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"foo\"); // eslint-disable-line no-alert\n\n// eslint-disable-next-line no-alert\nalert(\"foo\");\n\nalert(\"foo\"); /* eslint-disable-line no-alert */\n\n/* eslint-disable-next-line no-alert */\nalert(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Allowed multi-line property chaining in JavaScript\nDESCRIPTION: An example of allowed whitespace in multi-line property chains, which is a common pattern for longer chains of properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-whitespace-before-property.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfoo\n  .bar()\n  .baz()\n  .qux()\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of 'this' with capIsConstructor option set to false\nDESCRIPTION: Examples of code that violate the 'no-invalid-this' rule when the 'capIsConstructor' option is set to false. This configuration treats functions with capitalized names as regular functions rather than constructors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-this.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-invalid-this: [\"error\", { \"capIsConstructor\": false }]*/\n\n\"use strict\";\n\nfunction Foo() {\n    this.a = 0;\n}\n\nconst bar = function Foo() {\n    this.a = 0;\n}\n\nconst Bar = function() {\n    this.a = 0;\n};\n\nBaz = function() {\n    this.a = 0;\n};\n```\n\n----------------------------------------\n\nTITLE: ignoreClassesWithImplements Option - Correct Example (public-fields)\nDESCRIPTION: TypeScript example showing a class that implements an interface where public methods don't use 'this', which is allowed when ignoreClassesWithImplements is 'public-fields'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"ignoreClassesWithImplements\": \"public-fields\" }] */\n\ninterface Base {\n    method(): void;\n}\n\nclass Derived implements Base {\n    method() {}\n    property = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Never Option Example\nDESCRIPTION: Example of TypeScript code that violates the 'never' initialization rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint init-declarations: [\"error\", \"never\"] */\n\nlet arr: string[] = ['arr', 'ar'];\n\nconst class1 = class NAME {\n\tconstructor() {\n\t  var name1: string = 'hello';\n\t}\n};\n\nnamespace myLib {\n\tlet numberOfGreetings: number = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading an ESLint Formatter in JavaScript\nDESCRIPTION: This code demonstrates how to use the eslint.loadFormatter() method to load a formatter, which converts lint results to a human- or machine-readable string.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = await eslint.loadFormatter(nameOrPath);\n```\n\n----------------------------------------\n\nTITLE: Configuring RuleTester with Default Options\nDESCRIPTION: Example showing how to initialize RuleTester with default options that will apply to all test cases, such as setting the ECMAScript version.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst ruleTester = new RuleTester({ languageOptions: { ecmaVersion: 2015 } });\n```\n\n----------------------------------------\n\nTITLE: Rebasing an ESLint Pull Request onto Latest Upstream\nDESCRIPTION: Commands to update your branch with the latest upstream changes when asked to rebase your pull request, ensuring compatibility with the current codebase.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Incorrect comma spacing examples with reversed options\nDESCRIPTION: Examples of code that violates the comma-spacing rule when configured to require spaces before commas and disallow spaces after commas.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo = 1, bar = 2;\nvar arr = [1 , 2];\nvar obj = {\"foo\": \"bar\", \"baz\": \"qur\"};\nnew Foo(a,b);\nfunction baz(a,b){}\na, b\n```\n\n----------------------------------------\n\nTITLE: NewIsCapExceptions Example\nDESCRIPTION: Demonstrates usage of newIsCapExceptions option for specific lowercase constructors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-cap.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-cap: [\"error\", { \"newIsCapExceptions\": [\"events\"] }]*/\n\nconst events = require('events');\n\nconst emitter = new events();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Field Initializers Exceeding Complexity Threshold\nDESCRIPTION: Examples of class field initializers and static blocks that violate a maximum complexity rule setting of 2.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/complexity.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint complexity: [\"error\", 2]*/\n\nclass C {\n    x = a || b || c; // this initializer has complexity = 3\n}\n\nclass D { // this static block has complexity = 3\n    static {\n        if (foo) {\n            bar = baz || qux;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Expression Syntax According to no-wrap-func Rule\nDESCRIPTION: Example of code that violates the no-wrap-func rule by unnecessarily wrapping a function expression in parentheses when it's not being immediately invoked.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-wrap-func.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = (function() {/*...*/});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of require-jsdoc Rule in JavaScript\nDESCRIPTION: This snippet demonstrates code that violates the 'require-jsdoc' rule when configured to require JSDoc for various types of functions and class declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-jsdoc.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint \"require-jsdoc\": [\"error\", {\n    \"require\": {\n        \"FunctionDeclaration\": true,\n        \"MethodDefinition\": true,\n        \"ClassDeclaration\": true,\n        \"ArrowFunctionExpression\": true,\n        \"FunctionExpression\": true\n    }\n}]*/\n\nfunction foo() {\n    return 10;\n}\n\nvar bar = () => {\n    return 10;\n};\n\nclass Foo {\n    bar() {\n        return 10;\n    }\n}\n\nvar bar = function() {\n    return 10;\n};\n\nvar bar = {\n    bar: function() {\n        return 10;\n    },\n\n    baz() {\n        return 10;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'never' and '()' Exception\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'never' option with an exception for nested parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"()\"] }]*/\n\nfoo((1 + 2));\nfoo((1 + 2), 1);\nfoo(bar());\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Duplicate Conditions\nDESCRIPTION: Shows an invalid if-else-if chain where a condition is duplicated, making one branch unreachable.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-else-if.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (b) {\n    baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Pass on No Patterns\nDESCRIPTION: Example showing how to allow ESLint to exit with code 0 when no patterns are provided.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n--pass-on-no-patterns\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with ignoreOnInitialization Option\nDESCRIPTION: Example showing code that incorrectly shadows a variable during initialization when the ignoreOnInitialization option is set to true.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-shadow: [\"error\", { \"ignoreOnInitialization\": true }]*/\n\nconst x = x => x;\n```\n\n----------------------------------------\n\nTITLE: Correct usage of 'new-parens' rule with 'always' option in JavaScript\nDESCRIPTION: These examples show correct code when the 'new-parens' rule is set to 'always', demonstrating the proper use of parentheses after a new constructor with no arguments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-parens.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-parens: \"error\"*/\n\nvar person = new Person();\nvar person = new (Person)();\n```\n\n----------------------------------------\n\nTITLE: Basic Spaced Comment Rule Configuration\nDESCRIPTION: Basic configuration example for the spaced-comment rule showing exception patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-comment.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"spaced-comment\": [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }]\n```\n\n----------------------------------------\n\nTITLE: Defining Eleventy Navigation Configuration for ESLint Version Support Page\nDESCRIPTION: YAML front matter configuration for an Eleventy static site generator page that defines navigation parameters for the ESLint Version Support documentation page. It specifies the navigation key, URL, parent section, title, and display order.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/version-support.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n    key: Version Support\n    url: https://eslint.org/version-support/\n    parent: use eslint\n    title: Version Support\n    order: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Incorrect Call Expression Argument Indentation in JavaScript\nDESCRIPTION: Example of incorrectly indented call expression arguments with the indent-legacy rule set to 1 space indentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"CallExpression\": {\"arguments\": 1} }]*/\n\nfoo(bar,\n    baz,\n      qux\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Missing Lines Between Members\nDESCRIPTION: Example showing incorrect code where class members are not properly separated by empty lines when using the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-between-class-members.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint lines-between-class-members: [\"error\", \"always\"]*/\nclass MyClass {\n  x;\n  foo() {\n    //...\n  }\n  bar() {\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Function Expression Parameter Indentation in JavaScript\nDESCRIPTION: Example of correctly indented function expression parameters with the indent-legacy rule set to 'first' parameter alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, {\"FunctionExpression\": {\"parameters\": \"first\"}}]*/\n\nvar foo = function(bar, baz,\n                   qux, boop) {\n  qux();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Semicolon Spacing Examples - JavaScript\nDESCRIPTION: Examples showing basic semicolon spacing issues that the rule addresses\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = \"b\" ;\n\nvar c = \"d\";var e = \"f\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Example for default-param-last Rule\nDESCRIPTION: This example demonstrates incorrect usage of default parameters in a TypeScript function, where a default parameter precedes a parameter with a type annotation, violating the 'default-param-last' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/default-param-last.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint default-param-last: [\"error\"] */\n\nfunction h(a = 0, b: number) {}\n```\n\n----------------------------------------\n\nTITLE: Known Limitations with Function Calls in JavaScript\nDESCRIPTION: Examples demonstrating situations where the rule might produce false positives due to function calls that may return different values each time.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-self-compare.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-self-compare: \"error\"*/\n\nfunction parseDate(dateStr) {\n  return new Date(dateStr);\n}\n\nif (parseDate('December 17, 1995 03:24:00') === parseDate('December 17, 1995 03:24:00')) {\n  // do something\n}\n\nlet counter = 0;\nfunction incrementUnlessReachedMaximum() {\n  return Math.min(counter += 1, 10);\n}\n\nif (incrementUnlessReachedMaximum() === incrementUnlessReachedMaximum()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct examples with ignoreEOLComments set to false\nDESCRIPTION: Examples of code that comply with the no-multi-spaces rule when end-of-line comments are not ignored.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-spaces: [\"error\", { ignoreEOLComments: false }]*/\n\nvar x = 5; // comment\nvar x = 5; /* multiline\n * comment\n */\n```\n\n----------------------------------------\n\nTITLE: Updated Global Variable Reference (ESLint 2.0.0)\nDESCRIPTION: New method for finding global variable references using Scope#set\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar globalScope = context.getScope();\nvar variable = globalScope.set.get(\"window\");\nif (variable) {\n\tvariable.references.forEach(checkForWindow);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-enumerable ESLint Properties\nDESCRIPTION: Example showing how to access the non-enumerable linter property in ESLint v5 using Object.getOwnPropertyNames, replacing direct property enumeration methods\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-5.0.0.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nObject.getOwnPropertyNames(eslint)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Custom Configuration\nDESCRIPTION: Examples of code that follows the custom semi-spacing configuration with spaces before semicolons\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo ;\nvar foo ;var bar ;\nthrow new Error(\"error\") ;\nwhile (a) {break ;}\nfor (i = 0 ;i < 10 ;i++) {}\n```\n\n----------------------------------------\n\nTITLE: Correct Unicode and Hexadecimal Escapes\nDESCRIPTION: Examples showing the correct way to use Unicode and hexadecimal escape sequences instead of octal escapes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-octal-escape.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-octal-escape: \"error\"*/\n\nconst foo = \"Copyright \\u00A9\";   // unicode\n\nconst buz = \"Copyright \\xA9\";     // hexadecimal\n```\n\n----------------------------------------\n\nTITLE: Configuring indent-legacy Rule with Tab Indentation\nDESCRIPTION: Demonstrates how to configure the indent-legacy rule to use tab indentation instead of spaces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"indent-legacy\": [\"error\", \"tab\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Incrementing const Variable in JavaScript\nDESCRIPTION: This snippet illustrates incorrect usage by attempting to increment a const variable using the ++ operator, which is not allowed for const variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-const-assign.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-const-assign: \"error\"*/\n\nconst a = 0;\n++a;\n```\n\n----------------------------------------\n\nTITLE: Resolving Plugins Relative to Location in ESLint CLI\nDESCRIPTION: The --resolve-plugins-relative-to flag changes the directory where plugins are resolved from. Useful when plugins are installed in a different location than the current project.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--config ~/personal-eslintrc.js --resolve-plugins-relative-to /usr/local/lib/\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Separate-Lines Option and JSDoc\nDESCRIPTION: Example of incorrect JSDoc comment formatting when using separate-lines option with checkJSDoc enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-comment-style.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * I am a JSDoc comment\n * and I'm not allowed\n */\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Valid String-based comma-dangle Rule Configuration for ESLint v8.0.0\nDESCRIPTION: A correct configuration for the comma-dangle rule using a string option in ESLint v8.0.0. This format uses only two elements in the array with the second element being a string.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"comma-dangle\": [\"error\", \"never\"]\n}\n```\n\n----------------------------------------\n\nTITLE: OnlyDeclarations Option Example\nDESCRIPTION: Example of code that is valid when the onlyDeclarations option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-match.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-match: [2, \"^[a-z]+([A-Z][a-z]+)*$\", { \"onlyDeclarations\": true }]*/\n\nfoo = __dirname;\n```\n\n----------------------------------------\n\nTITLE: Correct Alternative to Continue Statement in JavaScript\nDESCRIPTION: This snippet shows a correct way to achieve the same logic without using a continue statement, as recommended by the no-continue rule. It uses an if statement to control the flow instead.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-continue.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-continue: \"error\"*/\n\nlet sum = 0,\n    i;\n\nfor(i = 0; i < 10; i++) {\n    if(i < 5) {\n       sum += i;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Variable Initialization with 'no-undef-init' Rule\nDESCRIPTION: This snippet shows examples of code that violate the 'no-undef-init' rule by explicitly initializing variables to undefined.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef-init.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-undef-init: \"error\"*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Trailing Commas with 'never' Option\nDESCRIPTION: These JavaScript snippets demonstrate incorrect usage of trailing commas when the 'comma-dangle' rule is set to 'never'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration - Always Strict\nDESCRIPTION: ESLint configuration that requires every file to have a top-level 'use strict' statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/global-strict.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"global-strict\": [\"error\", \"always\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Callback Pattern\nDESCRIPTION: Demonstrates the recommended pattern for handling callbacks with error checking and proper return statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/callback-return.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doSomething(err, callback) {\n    if (err) {\n        return callback(err);\n    }\n    callback();\n}\n```\n\n----------------------------------------\n\nTITLE: Using ESLint with Custom File Format\nDESCRIPTION: Example of using ESLint with a local custom formatter file\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx eslint -f ./customformat.js file.js\n```\n\n----------------------------------------\n\nTITLE: Simple Rules Configuration\nDESCRIPTION: Basic configuration for no-multiple-empty-lines and func-style rules\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\",\n\t\"rules\": {\n\t\t\"no-multiple-empty-lines\": 2,\n\t\t\"func-style\": 2\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Single-line Statement Positioning with 'beside' Option\nDESCRIPTION: Examples of incorrect code for the nonblock-statement-body-position rule with the default 'beside' option, showing control structures with single-line statements placed on the line below the condition.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/nonblock-statement-body-position.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint nonblock-statement-body-position: [\"error\", \"beside\"] */\n\nif (foo)\n  bar();\nelse\n  baz();\n\nwhile (foo)\n  bar();\n\nfor (let i = 1; i < foo; i++)\n  bar();\n\ndo\n  bar();\nwhile (foo)\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: one-var with initialized:always, uninitialized:never\nDESCRIPTION: An example showing incorrect variable declarations where initialized variables are declared separately and uninitialized variables are grouped, violating the rule configuration that requires initialized variables to be grouped and uninitialized variables to be separate.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { \"initialized\": \"always\", \"uninitialized\": \"never\" }]*/\n\nfunction foo() {\n    var a, b, c;\n    var foo = true;\n    var bar = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with max:2 Option\nDESCRIPTION: Examples showing code that violates the rule when configured with a maximum of 2 statements per line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-statements-per-line.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-statements-per-line: [\"error\", { \"max\": 2 }]*/\n\nvar bar; var baz; var qux;\nif (condition) { bar = 1; } else { baz = 2; }\nfor (var i = 0; i < length; ++i) { bar = 1; baz = 2; }\nswitch (discriminant) { case 'test': break; default: break; }\nfunction foo() { bar = 1; baz = 2; }\nvar qux = function qux() { bar = 1; baz = 2; };\n(function foo() { bar = 1; baz = 2; })();\n```\n\n----------------------------------------\n\nTITLE: Examples of unary 'nonwords' operators in JavaScript\nDESCRIPTION: Shows common nonword unary operators including negation, increment/decrement, and logical not, demonstrating their typical usage patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-ops.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ([1,2,3].indexOf(1) !== -1) {};\nfoo = --foo;\nbar = bar++;\nbaz = !foo;\nqux = !!baz;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Switch Statement Example\nDESCRIPTION: Example of code that violates the no-fallthrough rule by lacking break statements or fallthrough comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-fallthrough: \"error\"*/\n\nswitch(foo) {\n    case 1:\n        doSomething();\n\n    case 2:\n        doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import With Misunderstood Negation\nDESCRIPTION: Example demonstrating a common misunderstanding with negation patterns, where a subdirectory can't be reincluded if its parent directory is already excluded.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { \"patterns\": [\"import1/*\", \"!import1/private/*\"] }]*/\n\nimport pick from 'import1/private/someModule';\n```\n\n----------------------------------------\n\nTITLE: For Loop Exception Configuration - JSON\nDESCRIPTION: ESLint configuration allowing initialization in for loops while prohibiting elsewhere.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"init-declarations\": [\"error\", \"never\", { \"ignoreForLoopInit\": true }]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage Due to Dynamic Expressions in JavaScript\nDESCRIPTION: An example of code that the no-useless-call rule incorrectly flags due to its limitation in statically analyzing dynamic expressions for 'thisArg' changes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-call.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-call: \"error\"*/\n\na[i++].foo.call(a[i++], 1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Correct comma spacing examples with reversed options\nDESCRIPTION: Examples of code that complies with the comma-spacing rule when configured to require spaces before commas and disallow spaces after commas.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo = 1 ,bar = 2 ,\n    baz = true;\nvar arr = [1 ,2];\nvar arr = [1 ,,3]\nvar obj = {\"foo\": \"bar\" ,\"baz\": \"qur\"};\nfoo(a ,b);\nnew Foo(a ,b);\nfunction qur(a ,b){}\na ,b\n```\n\n----------------------------------------\n\nTITLE: Incorrect generator yield spacing example in JavaScript\nDESCRIPTION: Example of improper spacing with the yield operator in generator functions that violates the space-unary-ops rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-ops.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-unary-ops: \"error\"*/\n\nfunction *foo() {\n    yield(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JavaScript File with Linting Issues\nDESCRIPTION: A JavaScript example file with multiple ESLint violations used to demonstrate formatter output. This file contains issues with conditional comparisons, return statements, indentation, semicolons, and spacing around unary operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addOne(i) {\n    if (i != NaN) {\n        return i ++\n    } else {\n      return\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'always' and '[]' Exception\nDESCRIPTION: Examples of code that would be considered correct when using the 'always' option with an exception for square brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo([bar, baz]);\nfoo([bar, baz], 1 );\n```\n\n----------------------------------------\n\nTITLE: Template Literal Expression Example\nDESCRIPTION: Basic example of a template literal with an embedded expression using ${} syntax.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/template-curly-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet hello = `hello, ${people.name}!`;\n```\n\n----------------------------------------\n\nTITLE: NewIsCapExceptionPattern Example\nDESCRIPTION: Shows usage of newIsCapExceptionPattern for pattern-based exceptions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-cap.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-cap: [\"error\", { \"newIsCapExceptionPattern\": \"^person\\\\..\" }]*/\n\nconst friend = new person.acquaintance();\n\nconst bestFriend = new person.friend();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage with 'ignoreImports: true' Option\nDESCRIPTION: Examples of code that violate the camelcase rule with the { \"ignoreImports\": true } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {ignoreImports: true}]*/\n\nimport default_import from 'mod';\n\nimport * as namespaced_import from 'mod';\n```\n\n----------------------------------------\n\nTITLE: Old ecmaFeatures Configuration Format\nDESCRIPTION: Example of the old configuration format for enabling ES6 features using ecmaFeatures in ESLint v1.x. This shows how arrow functions were previously enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tecmaFeatures: {\n\t\tarrowFunctions: true;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Expression Element Alignment in JavaScript\nDESCRIPTION: Example of incorrectly aligned array expression elements with the indent-legacy rule set to 'first' element alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, {\"ArrayExpression\": \"first\"}]*/\n\nvar foo = [bar,\n  baz,\n  qux\n];\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Initialization to Undefined in JavaScript\nDESCRIPTION: This snippet demonstrates the unnecessary practice of explicitly initializing a variable to undefined, which the 'no-undef-init' rule aims to prevent.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef-init.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = undefined;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with classes Option Set to False in JavaScript\nDESCRIPTION: This snippet demonstrates correct usage when the 'classes' option is set to false, allowing class usage in certain scenarios.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n\nfunction foo() {\n    return new A();\n}\n\nclass A {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ESLint Upstream Remote\nDESCRIPTION: Command to add the main ESLint repository as an upstream remote source for pulling latest changes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/development-environment.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream git@github.com:eslint/eslint.git\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: one-var with initialized:consecutive, uninitialized:never\nDESCRIPTION: An example showing incorrect variable declarations where consecutively initialized variables are not grouped and uninitialized variables are grouped together, violating the rule configuration requirements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\", \"uninitialized\": \"never\" }]*/\n\nfunction foo() {\n    var a = 1;\n    var b = 2;\n    var c,\n        d;\n    var e = 3;\n    var f = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct implementation of padded-blocks with 'switches: always' option in JavaScript\nDESCRIPTION: Examples of code that correctly implements padding inside switch statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"switches\": \"always\" }]*/\n\nswitch (a) {\n\n    case 0: foo();\n\n}\n\nif (a) {\n    b();\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Direct Default Exports - Incorrect Examples\nDESCRIPTION: Examples showing how the rule can restrict direct default export declarations when the 'direct' option is enabled in restrictDefaultExports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"direct\": true } }]*/\n\nexport default foo;\n```\n\n----------------------------------------\n\nTITLE: Allowed Bitwise NOT Operator\nDESCRIPTION: Example of using the bitwise NOT operator when explicitly allowed in the rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-bitwise.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-bitwise: [\"error\", { \"allow\": [\"~\"] }] */\n\n~[1,2,3].indexOf(1) === -1;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Newline Placement in Member Expressions (JavaScript)\nDESCRIPTION: This snippet shows two different ways of placing newlines in member expressions, illustrating the inconsistency that the 'dot-location' rule aims to address.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-location.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = universe.\n        galaxy;\n\nvar b = universe\n       .galaxy;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Trailing Commas in Functions with 'never' Option\nDESCRIPTION: These JavaScript snippets show incorrect usage of trailing commas in function declarations and calls when the 'comma-dangle' rule for functions is set to 'never'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n----------------------------------------\n\nTITLE: Configuring Environments in JSON Configuration File\nDESCRIPTION: This snippet shows how to enable the browser and Node.js environments in an ESLint JSON configuration file using the 'env' key.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"env\": {\n\t\t\"browser\": true,\n\t\t\"node\": true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Scoped Plugin Rules in ESLint v4.0.0\nDESCRIPTION: Comparison of incorrect and correct ways to reference scoped plugin rules in ESLint v4.0.0. The scope must now be included in rule references.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-4.0.0.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [\"@my-organization/foo\"],\n\t\"rules\": {\n\t\t\"@my-organization/foo/some-rule\": \"error\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Configuration for no-restricted-syntax\nDESCRIPTION: Simple configuration example showing how to restrict function expressions, with statements, and 'in' operator using AST selectors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-syntax.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-restricted-syntax\": [\"error\", \"FunctionExpression\", \"WithStatement\", \"BinaryExpression[operator='in']\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Disabling no-duplicate-case Rule\nDESCRIPTION: Example showing how to disable the no-duplicate-case rule when duplicate cases are intentionally used for side effects.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-case.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nswitch (a) {\n    case i++:\n        foo();\n        break;\n    case i++: // eslint-disable-line no-duplicate-case\n        bar();\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object-Based Schema for ESLint Rule Options (JavaScript)\nDESCRIPTION: Equivalent object-based schema for the 'yoda' rule options. It provides more precise control over the structure of the options array.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tmeta: {\n\t\tschema: {\n\t\t\ttype: \"array\",\n\t\t\tminItems: 0,\n\t\t\tmaxItems: 2,\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\tenum: [\"always\", \"never\"],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\texceptRange: { type: \"boolean\" },\n\t\t\t\t\t},\n\t\t\t\t\tadditionalProperties: false,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Expression Indentation in JavaScript\nDESCRIPTION: Example of incorrectly indented array expression with the indent-legacy rule set to 1 space indentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"ArrayExpression\": 1 }]*/\n\nvar foo = [\n    bar,\nbaz,\n      qux\n];\n```\n\n----------------------------------------\n\nTITLE: ESLint Feature Flag Check\nDESCRIPTION: Shows how to check if a specific feature flag is enabled in the Linter instance.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter({ flags: [\"x_feature\"] });\n\nconsole.log(linter.hasFlag(\"x_feature\")); // true\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Assignment\nDESCRIPTION: Example of incorrect code using magic number in variable assignment\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-magic-numbers.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-magic-numbers: \"error\"*/\n\nlet SECONDS;\n\nSECONDS = 60;\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint v1.0.0 Configuration with Recommended Rules\nDESCRIPTION: Initial ESLint configuration that extends the recommended ruleset, which is the new default approach in v1.0.0 replacing the previous default rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-1.0.0.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Processor in YAML ESLint Config\nDESCRIPTION: This YAML snippet shows how to specify a custom processor in an ESLint configuration file. It demonstrates setting up a processor for Markdown files using a plugin.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors-deprecated.md#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n    - a-plugin\noverrides:\n    - files: \"*.md\"\n      processor: a-plugin/markdown\n```\n\n----------------------------------------\n\nTITLE: Incorrect ESLint Rule Configuration\nDESCRIPTION: Shows an example of an incorrectly spelled ESLint rule configuration, which would not be properly recognized.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/bad-examples.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-restricted-syntax: [\"errorr\", \"ArrayPattern\"] */\n\nconst foo = [bar];\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Parameters Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that illustrates the release parameters for the 'eslint-js Release' job on Jenkins. It specifies the RELEASE_TYPE options for different scenarios when releasing new versions of the @eslint/js package.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/maintain/manage-releases.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **HEAD Version** | **Desired Next Version** | **`eslint-js Release`<br>`RELEASE_TYPE`** |\n| :--------------: | :----------------------: | :---------------------------------------: |\n|     `9.25.0`     |         `9.25.1`         |                  `patch`                  |\n|     `9.25.0`     |         `9.26.0`         |                  `minor`                  |\n|     `9.25.0`     |     `10.0.0-alpha.0`     |                 `alpha.0`                 |\n| `10.0.0-alpha.0` |     `10.0.0-alpha.1`     |                  `alpha`                  |\n| `10.0.0-alpha.1` |     `10.0.0-beta.0`      |                  `beta`                   |\n| `10.0.0-beta.0`  |     `10.0.0-beta.1`      |                  `beta`                   |\n| `10.0.0-beta.1`  |      `10.0.0-rc.0`       |                   `rc`                    |\n|  `10.0.0-rc.0`   |      `10.0.0-rc.1`       |                   `rc`                    |\n|  `10.0.0-rc.1`   |         `10.0.0`         |                  `major`                  |\n```\n\n----------------------------------------\n\nTITLE: ESLint Cache Location Configuration\nDESCRIPTION: Example demonstrating how to specify a custom cache location for ESLint results\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpx eslint \"src/**/*.js\" --cache --cache-location \"/Users/user/.eslintcache/\"\n```\n\n----------------------------------------\n\nTITLE: Using JSCS with a custom configuration file\nDESCRIPTION: Commands to run JSCS with a specific configuration file using --config or -c flags.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\njscs --config myconfig.json file.js\njscs -c myconfig.json file.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of reportUsedIgnorePattern Option in JavaScript\nDESCRIPTION: Illustrates incorrect code when 'reportUsedIgnorePattern' is set to true. It shows a variable matching the ignore pattern being used, which triggers an error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-vars.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-vars: [\"error\", { \"reportUsedIgnorePattern\": true, \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nconst firstVarIgnored = 1;\nconst secondVar = 2;\nconsole.log(firstVarIgnored, secondVar);\n```\n\n----------------------------------------\n\nTITLE: Invalid String Config Format in ESLint Flat Config\nDESCRIPTION: Example of a configuration format that is no longer supported in ESLint v9.0.0, showing string references to built-in configs that are now invalid.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nexport default [\"eslint:recommended\", \"eslint:all\"];\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of multiple spaces in JavaScript\nDESCRIPTION: Example showing incorrect code with multiple spaces between identifiers that should be avoided.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif(foo  === \"bar\") {}\n```\n\n----------------------------------------\n\nTITLE: Enforcing No Dangling Underscores in Method Names in JavaScript\nDESCRIPTION: Example of using the 'enforceInMethodNames' option to disallow dangling underscores in method names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: [\"error\", { \"enforceInMethodNames\": true }]*/\n\nclass Foo {\n  _bar() {}\n}\n\nclass Bar {\n  bar_() {}\n}\n\nconst o1 = {\n  _bar() {}\n};\n\nconst o2 = {\n  bar_() {}\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with var-specific Option\nDESCRIPTION: Example showing incorrect code when the one-var rule is configured specifically for 'var' declarations with the 'never' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { var: \"never\" }]*/\n\nfunction foo() {\n    var bar,\n        baz;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Indirect Eval Usage\nDESCRIPTION: Examples of allowed indirect eval usage with allowIndirect option enabled\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eval.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-eval: [\"error\", {\"allowIndirect\": true} ]*/\n\n(0, eval)(\"const a = 0\");\n\nconst foo = eval;\nfoo(\"const a = 0\");\n\nthis.eval(\"const a = 0\");\n```\n\n----------------------------------------\n\nTITLE: Correct Arrow Function Formatting - beside option\nDESCRIPTION: Examples of correctly formatted arrow functions following the 'beside' option, keeping the implicit return on the same line as the arrow.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/implicit-arrow-linebreak.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint implicit-arrow-linebreak: [\"error\", \"beside\"] */\n\n(foo) => bar;\n\n(foo) => (bar);\n\n(foo) => bar => baz;\n\n(foo) => (\n  bar()\n);\n\n// functions with block bodies allowed with this rule using any style\n// to enforce a consistent location for this case, see the rule: `brace-style`\n(foo) => {\n  return bar();\n}\n\n(foo) =>\n{\n  return bar();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Constructor without Assignment in JavaScript\nDESCRIPTION: Shows an example of using the 'new' keyword with a constructor without storing the resulting object, which is discouraged by the 'no-new' rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Person();\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage with restricted fs and cluster modules (JavaScript)\nDESCRIPTION: Example of code that violates the rule by importing restricted modules 'fs' and 'cluster', which would trigger ESLint errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-modules: [\"error\", \"fs\", \"cluster\"]*/\n\nconst fs = require('fs');\nconst cluster = require('cluster');\n```\n\n----------------------------------------\n\nTITLE: Complex Rule Configuration\nDESCRIPTION: Advanced configuration showing separate rules for line and block comments with balanced spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-comment.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"spaced-comment\": [\"error\", \"always\", {\n    \"line\": {\n        \"markers\": [\"/\"],\n        \"exceptions\": [\"-\", \"+\"]\n    },\n    \"block\": {\n        \"markers\": [\"!\"],\n        \"exceptions\": [\"*\"],\n        \"balanced\": true\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: CapIsNew False Example\nDESCRIPTION: Shows usage with capIsNew option set to false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-cap.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-cap: [\"error\", { \"capIsNew\": false }]*/\n\nconst colleague = Person();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with anonymous:never and named:always\nDESCRIPTION: Examples showing incorrect code when anonymous functions should have no space and named functions should have a space before parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"never\", \"named\": \"always\" }]*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Statement Positioning with Overrides Configuration\nDESCRIPTION: Examples of incorrect code for the nonblock-statement-body-position rule with the 'beside' option and an override for 'while' statements to appear below.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/nonblock-statement-body-position.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint nonblock-statement-body-position: [\"error\", \"beside\", { \"overrides\": { \"while\": \"below\" } }] */\n\nif (foo)\n  bar();\n\nwhile (foo) bar();\n```\n\n----------------------------------------\n\nTITLE: Providing JavaScript Code Examples for ESLint Rule Proposal\nDESCRIPTION: This code block is a placeholder for developers to insert JavaScript code examples that demonstrate the proposed ESLint rule's behavior. The examples should show code that would trigger warnings from the new rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/templates/rule-proposal.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<!-- put your code examples here -->\n```\n\n----------------------------------------\n\nTITLE: Enforcing No Dangling Underscores in Class Fields in JavaScript\nDESCRIPTION: Example of using the 'enforceInClassFields' option to disallow dangling underscores in ES2022 class field names.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: [\"error\", { \"enforceInClassFields\": true }]*/\n\nclass Foo {\n    _bar;\n}\n\nclass Bar {\n    _bar = () => {};\n}\n\nclass Baz {\n    bar_;\n}\n\nclass Qux {\n    #_bar;\n}\n\nclass FooBar {\n    #bar_;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Export Usage Example\nDESCRIPTION: Example showing incorrect usage of restricted fs module in exports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nexport { fs } from 'fs';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nexport * from 'fs';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Function.prototype.apply in JavaScript\nDESCRIPTION: Shows examples of code that violate the prefer-reflect rule by using Function.prototype.apply instead of Reflect.apply.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-reflect.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint prefer-reflect: \"error\"*/\n\nmyFunction.apply(undefined, args);\nmyFunction.apply(null, args);\nobj.myMethod.apply(obj, args);\nobj.myMethod.apply(other, args);\n\nmyFunction.call(undefined, arg);\nmyFunction.call(null, arg);\nobj.myMethod.call(obj, arg);\nobj.myMethod.call(other, arg);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Exceptions Configuration\nDESCRIPTION: Example of incorrect comma style when using exceptions for ArrayExpression and ObjectExpression.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-style.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-style: [\"error\", \"first\", { \"exceptions\": { \"ArrayExpression\": true, \"ObjectExpression\": true } }]*/\n\nvar o = {},\n    a = [];\n```\n\n----------------------------------------\n\nTITLE: Filtering Comments by Type in JavaScript\nDESCRIPTION: Demonstrates how to filter line and block comments using the sourceCode.getAllComments() method in ESLint 4.0. This replaces the previous LineComment and BlockComment events.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-4.0.0.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsourceCode.getAllComments().filter(comment => comment.type === \"Line\");\nsourceCode.getAllComments().filter(comment => comment.type === \"Block\");\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Synchronous Methods at Root Level with allowAtRootLevel Option\nDESCRIPTION: Example of code that complies with the no-sync rule when the allowAtRootLevel option is set to true. Shows synchronous methods used at the root level of a file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sync.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-sync: [\"error\", { allowAtRootLevel: true }]*/\n\nfs.readFileSync(somePath).toString();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect and Correct Accessor Pairs in JavaScript Objects\nDESCRIPTION: This snippet shows an incorrect example with only a setter, and a correct example with both a getter and setter for a property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/accessor-pairs.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nconst o = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\n\n// Good\nconst p = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Dangling Underscores in JavaScript\nDESCRIPTION: Example of using the 'allow' option to permit specific identifiers with dangling underscores.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: [\"error\", { \"allow\": [\"foo_\", \"_bar\"] }]*/\n\nlet foo_;\nfoo._bar();\n```\n\n----------------------------------------\n\nTITLE: Running All ESLint Tests with npm\nDESCRIPTION: Command to run all ESLint tests in the tests directory. This must be run after initial setup with npm install.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/tests.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Using Alert Shortcodes in HTML\nDESCRIPTION: This snippet demonstrates how to use the warning, tip, and important alert shortcodes. Each shortcode requires two parameters: the alert message text and a URL for the 'Learn more' link.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/alert.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{ % warning \"This rule has been removed in version x.xx\", \"/link/to/learn/more\"\n% } { % tip \"Kind reminder to do something maybe\", \"/link/to/learn/more\" % } { %\nimportant \"This rule has been deprecated in version x.xx\", \"/link/to/learn/more\"\n% }\n```\n\n----------------------------------------\n\nTITLE: Restricting Named Default Exports - Incorrect Examples\nDESCRIPTION: Examples showing how the rule restricts named default exports when the 'default' name is explicitly restricted. This applies to named export declarations using 'default' as an alias.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictedNamedExports\": [\"default\"] }]*/\n\nfunction foo() {}\n\nexport { foo as default };\n```\n\n----------------------------------------\n\nTITLE: Correct For Loop Exception Example - JavaScript\nDESCRIPTION: Example showing allowed initialization in for loops with ignoreForLoopInit option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/init-declarations.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint init-declarations: [\"error\", \"never\", { \"ignoreForLoopInit\": true }]*/\nfor (let i = 0; i < 1; i++) {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Assignment in Conditionals (JavaScript)\nDESCRIPTION: These examples demonstrate incorrect usage of assignments in conditional statements, which violate the no-cond-assign rule with the default 'except-parens' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-cond-assign.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-cond-assign: \"error\"*/\n\n// Unintentional assignment\nlet x;\nif (x = 0) {\n    const b = 1;\n}\n\n// Practical example that is similar to an error\nconst setHeight = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while (someNode = someNode.parentNode);\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Object-based comma-dangle Rule Configuration for ESLint v8.0.0\nDESCRIPTION: A correct configuration for the comma-dangle rule using an object option in ESLint v8.0.0. This format uses only two elements in the array with the second element being an object that specifies options for different contexts.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"comma-dangle\": [\n\t\t\"error\",\n\t\t{\n\t\t\t\"arrays\": \"never\",\n\t\t\t\"objects\": \"never\",\n\t\t\t\"imports\": \"never\",\n\t\t\t\"exports\": \"never\",\n\t\t\t\"functions\": \"never\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Standard Condition in JavaScript\nDESCRIPTION: This snippet shows the standard way of writing a condition, where the variable comes before the literal value in a comparison.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/yoda.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (color === \"red\") {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating RuleTester parser option to use absolute path\nDESCRIPTION: When using custom parsers in tests with RuleTester, update the 'parser' property to use require.resolve() to get the absolute path of the parser package.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old\nparser: 'custom-parser'\n\n// New\nparser: require.resolve('custom-parser')\n```\n\n----------------------------------------\n\nTITLE: JSCS Airbnb preset configuration\nDESCRIPTION: Example of a JSCS configuration file that uses the Airbnb preset.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"preset\": \"airbnb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Default Re-exports - Incorrect Examples\nDESCRIPTION: Examples demonstrating restriction of re-exporting default from another module when the 'defaultFrom' option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"defaultFrom\": true } }]*/\n\nexport { default } from 'foo';\n```\n\n----------------------------------------\n\nTITLE: Restricting Named To Default Re-exports - Incorrect Example\nDESCRIPTION: Example demonstrating restriction of re-exporting a named export as default from another module when the 'namedFrom' option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"namedFrom\": true } }]*/\n\nexport { foo as default } from 'foo';\n```\n\n----------------------------------------\n\nTITLE: Multiple ESLint Configuration Comments for the Same Rule\nDESCRIPTION: Example showing how multiple ESLint configuration comments for the same rule are no longer supported in v9.0.0. Previously the last one was applied; now the first one is applied and others cause lint errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint semi: [\"error\", \"always\"] */\n/* eslint semi: [\"error\", \"never\"] */ // error: Rule \"semi\" is already configured by another configuration comment in the preceding code. This configuration is ignored.\n\nfoo(); // error: Missing semicolon\n```\n\n----------------------------------------\n\nTITLE: Custom Processor Plugin Definition\nDESCRIPTION: Example of defining processors in a custom ESLint plugin. It shows both a file extension processor (.md) and a named processor.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// node_modules/eslint-plugin-someplugin/index.js\nmodule.exports = {\n\tprocessors: {\n\t\t\".md\": {\n\t\t\tpreprocess() {},\n\t\t\tpostprocess() {},\n\t\t},\n\t\tsomeProcessor: {\n\t\t\tpreprocess() {},\n\t\t\tpostprocess() {},\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Single Problem Example in Variable Sorting\nDESCRIPTION: Example showing code that produces a single sorting problem with the sort-vars rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-vars.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-vars: \"error\"*/\n\nlet c, d, a, e;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for v2.x Compatibility\nDESCRIPTION: Configuration example showing how to mimic the eslint:recommended behavior from v2.x in v3.0.0, adjusting rules that were added, removed, or modified.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-3.0.0.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\",\n\t\"rules\": {\n\t\t\"no-unsafe-finally\": \"off\",\n\t\t\"no-native-reassign\": \"off\",\n\t\t\"complexity\": [\"off\", 11],\n\t\t\"comma-dangle\": \"error\",\n\t\t\"require-yield\": \"error\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: one-var with initialized:consecutive\nDESCRIPTION: An example showing incorrect variable declarations where consecutively initialized variables are not grouped together even when they appear sequentially without interruption by other code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\" }]*/\n\nfunction foo() {\n    var a = 1;\n    var b = 2;\n\n    foo();\n\n    var c = 3;\n    var d = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the related_rules Shortcode in HTML\nDESCRIPTION: A shortcode that adds one or more related rules to a rule documentation page. It expects an array of rule names as its parameter.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/related-rules.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{ % related_rules [\"no-extra-semi\", \"no-unexpected-multiline\", \"semi-spacing\"] %\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Plugin Processor Implementation\nDESCRIPTION: Example showing how to implement and expose custom processors in an ESLint plugin for handling non-standard file types.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\tprocessors: {\n\t\t\"processor-name\": {\n\t\t\tpreprocess(text, filename) {\n\t\t\t\t/* ... */\n\t\t\t},\n\t\t\tpostprocess(messages, filename) {\n\t\t\t\t/* ... */\n\t\t\t},\n\t\t},\n\t},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\n----------------------------------------\n\nTITLE: Callback Reference Limitation Example\nDESCRIPTION: Demonstrates a limitation where the rule cannot detect callback usage when passed by reference.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/callback-return.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        setTimeout(callback, 0); // this is bad, but WILL NOT warn\n    }\n    callback();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an .eslintignore File (Text)\nDESCRIPTION: Create a .eslintignore file in your project's root directory with glob patterns indicating which paths should be omitted from linting. This example ignores all JavaScript files in the project.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore-deprecated.md#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n**/*.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Example for Default indent-legacy Rule\nDESCRIPTION: Shows an example of incorrectly indented code that would violate the default indent-legacy rule settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: \"error\"*/\n\nif (a) {\n  b=c;\n  function foo(d) {\n    e=f;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Bracket Spacing with 'always' Option in JavaScript\nDESCRIPTION: Examples of code that would be flagged as incorrect when the rule is set to 'always', demonstrating missing spaces inside array brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-spacing: [\"error\", \"always\"]*/\n\nvar arr = ['foo', 'bar'];\nvar arr = ['foo', 'bar' ];\nvar arr = [ ['foo'], 'bar' ];\nvar arr = ['foo',\n  'bar'\n];\nvar arr = [\n  'foo',\n  'bar'];\n\nvar [x, y] = z;\nvar [x,y] = z;\nvar [x, ...y] = z;\nvar [,,x,] = z;\n```\n\n----------------------------------------\n\nTITLE: Specifying Writable Global Variables using Configuration Comments\nDESCRIPTION: This snippet shows how to define writable global variables in a JavaScript file using ESLint configuration comments. It allows the specified variables to be modified in the code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/* global var1:writable, var2:writable */\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for no-restricted-syntax Rule\nDESCRIPTION: Demonstrates enabling the 'no-restricted-syntax' rule and includes a comment that ESLint doesn't allow.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/bad-examples.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-restricted-syntax: \"error\" */\n\n/* eslint doesn't allow this comment */\n```\n\n----------------------------------------\n\nTITLE: Configuring 'keyword-spacing' Rule with Before Option\nDESCRIPTION: Shows how to configure the 'keyword-spacing' rule to require spaces before keywords but not after.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/keyword-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint keyword-spacing: [\"error\", { \"before\": true }]*/\n\nif (foo) {\n    //...\n} else if (bar) {\n    //...\n} else {\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usages with 'as-needed' option\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'as-needed' option, showing when providing radix 10 is considered redundant.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/radix.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint radix: [\"error\", \"as-needed\"]*/\n\nconst num = parseInt(\"071\", 10);\n\nconst num1 = parseInt(\"071\", \"abc\");\n\nconst num2 = parseInt();\n```\n\n----------------------------------------\n\nTITLE: Correct Array Expression Indentation in JavaScript\nDESCRIPTION: Example of correctly indented array expression with the indent-legacy rule set to 1 space indentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"ArrayExpression\": 1 }]*/\n\nvar foo = [\n  bar,\n  baz,\n  qux\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring prefer-reflect with exceptions\nDESCRIPTION: Example showing how to configure the prefer-reflect rule with exceptions to allow specific operations like delete to use the traditional syntax alongside Reflect methods.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-reflect.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"delete\"] }]*/\n\ndelete bar\ndelete foo.bar\nReflect.deleteProperty(foo, 'bar');\n```\n\n----------------------------------------\n\nTITLE: Basic Line Length Violation Example (JavaScript)\nDESCRIPTION: Demonstrates code that violates the default max-len rule setting of 80 characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-len.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n----------------------------------------\n\nTITLE: Ignoring Indentation in IIFE Bodies in JavaScript\nDESCRIPTION: Demonstrates correct indentation when the 'ignoredNodes' option is used to ignore indentation in the body of IIFEs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 4, { \"ignoredNodes\": [\"CallExpression > FunctionExpression.callee > BlockStatement.body\"] }]*/\n\n(function() {\n\nfoo();\nbar();\n\n})();\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with the enforceForSequenceExpressions Exception\nDESCRIPTION: Examples showing valid code when the 'enforceForSequenceExpressions' option is set to false, allowing extra parentheses around sequence expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { \"enforceForSequenceExpressions\": false }] */\n\n(a, b);\n\nif ((val = foo(), val < 10)) {}\n\nwhile ((val = foo(), val < 10));\n```\n\n----------------------------------------\n\nTITLE: Rule Schema Format in ESLint v1.x\nDESCRIPTION: An example of the old rule schema format in ESLint v1.x that included severity validation. Rules previously needed to account for rule severity (0, 1, or 2) in their schemas.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\ttype: \"array\",\n\titems: [\n\t\t{\n\t\t\tenum: [0, 1, 2],\n\t\t},\n\t\t{\n\t\t\tenum: [\"always\", \"never\"],\n\t\t},\n\t],\n\tminItems: 1,\n\tmaxItems: 2,\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Expression Indentation in JavaScript\nDESCRIPTION: Example of incorrectly indented function expression with the indent-legacy rule set to 2 spaces for body and parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }]*/\n\nvar foo = function(bar,\n  baz,\n  qux) {\n    qux();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples with 'beforeStatementContinuationChars: never' option\nDESCRIPTION: Examples of code that would be flagged when using 'never' with 'beforeStatementContinuationChars: never', which prohibits semicolons even before continuation characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi: [\"error\", \"never\", { \"beforeStatementContinuationChars\": \"never\"}] */\nimport a from \"a\"\n\n;(function() {\n    // ...\n})()\n```\n\n----------------------------------------\n\nTITLE: Example Code Placeholder for ESLint Rule Change in JavaScript\nDESCRIPTION: A placeholder for users to insert example JavaScript code that would be affected by the proposed ESLint rule change. This allows for clear demonstration of the rule's current behavior and the expected behavior after the change.\nSOURCE: https://github.com/eslint/eslint/blob/main/templates/rule-change-proposal.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<!-- example code here -->\n```\n\n----------------------------------------\n\nTITLE: Examples with ignoreImport Option Enabled\nDESCRIPTION: JavaScript code that is considered correct when the ignoreImport option is set to true, allowing redundant renaming in import statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-rename.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-rename: [\"error\", { ignoreImport: true }]*/\n\nimport { foo as foo } from \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Invalid Empty Character Class Usage in JavaScript RegExp\nDESCRIPTION: Examples of incorrect regular expression patterns that contain empty character classes, which are flagged by the rule as they don't match anything and may indicate a typo or error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-class.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = /^abc[]/;\n\n/^abc[]/.test(foo);\n\nbar.match(/^abc[]/);\n```\n\n----------------------------------------\n\nTITLE: ESLint Environment Configuration with Comments (Legacy)\nDESCRIPTION: Example of using eslint-env comments in source files to define globals for specific environments like Mocha testing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-env mocha */\n\ndescribe(\"unit tests\", () => {\n\tit(\"should pass\", () => {\n\t\t// ...\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Example for Selector Context\nDESCRIPTION: A simple JavaScript example used to demonstrate how selectors work with the AST. Shows variable declaration and method call that will be used to explain selector matching.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/selectors.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = 1;\nbar.baz();\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with skipJSXText Option\nDESCRIPTION: Examples of code that pass the no-irregular-whitespace rule when the skipJSXText option is enabled, allowing irregular whitespace in JSX text content.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-irregular-whitespace.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n/*eslint no-irregular-whitespace: [\"error\", { \"skipJSXText\": true }]*/\n\nfunction Thing() {\n    return <div>text in JSX</div>; // <NBSP> before `JSX`\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with classes Option Set to False in JavaScript\nDESCRIPTION: This snippet shows incorrect usage patterns even when the 'classes' option is set to false, as it still disallows certain class-related issues.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n\nnew A();\nclass A {\n}\n\n{\n    class C extends C {}\n}\n\n{\n    class C extends D {}\n    class D {}\n}\n\n{\n    class C {\n        static x = \"foo\";\n        [C.x]() {}\n    }\n}\n\n{\n    class C {\n        static {\n            new D();\n        }\n    }\n    class D {}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function Expression Parentheses Usage in JavaScript\nDESCRIPTION: Example showing the distinction between IIFE (Immediately-Invoked Function Expression) syntax and unnecessarily wrapped function expressions. The first function is an IIFE with proper parentheses usage, while the second is a function expression with potentially confusing parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-wrap-func.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = (function() {\n    // IIFE\n}());\n\nvar bar = (function() {\n    // not an IIFE\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Formatting Configuration\nDESCRIPTION: Configuration setup for enabling formatting rules in ESLint\nSOURCE: https://github.com/eslint/eslint/blob/main/packages/eslint-config-eslint/README.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"eslint/config\";\nimport eslintConfigESLint from \"eslint-config-eslint\";\nimport eslintConfigESLintFormatting from \"eslint-config-eslint/formatting\";\n\nexport default defineConfig([eslintConfigESLint, eslintConfigESLintFormatting]);\n```\n\n----------------------------------------\n\nTITLE: Using CLIEngine#executeOnText() in ESLint v2.x\nDESCRIPTION: Example of how CLIEngine#executeOnText() was used in ESLint v2.x, which warned about ignored files by default.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-3.0.0.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = engine.executeOnText(text, filename);\n```\n\n----------------------------------------\n\nTITLE: Incorrect ESLint Usage Example in JavaScript\nDESCRIPTION: Shows an example marked as incorrect ESLint usage, though the code is identical to the correct example. In this context, the code is marked as incorrect to demonstrate the visual difference between correct and incorrect containers in documentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/code-blocks.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst { ESLint } = require(\"eslint\");\n\n(async function main() {\n\t// 1. Create an instance with the `fix` option.\n\tconst eslint = new ESLint({ fix: true });\n\n\t// 2. Lint files. This doesn't modify target files.\n\tconst results = await eslint.lintFiles([\"lib/**/*.js\"]);\n\n\t// 3. Modify the files with the fixed code.\n\tawait ESLint.outputFixes(results);\n\n\t// 4. Format the results.\n\tconst formatter = await eslint.loadFormatter(\"stylish\");\n\tconst resultText = formatter.format(results);\n\n\t// 5. Output it.\n\tconsole.log(resultText);\n})().catch(error => {\n\tprocess.exitCode = 1;\n\tconsole.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with 'never' and '{}' Exception\nDESCRIPTION: Examples of code that would be considered correct when using the 'never' option with an exception for curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo( {bar: 'baz'} );\nfoo(1, {bar: 'baz'} );\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import With Case-Sensitive Pattern\nDESCRIPTION: Example of code that violates the rule with case-sensitive matching enabled, where the import path matches the exact case specified in the pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"foo[A-Z]*\"],\n    caseSensitive: true\n}]}]*/\n\nimport pick from 'fooBar';\n```\n\n----------------------------------------\n\nTITLE: Debug Mode\nDESCRIPTION: Example showing how to output debugging information while running ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n--debug test.js\n```\n\n----------------------------------------\n\nTITLE: As-Needed Option Examples\nDESCRIPTION: Demonstrates the 'as-needed' option which requires function names only when they can't be automatically inferred by ES6.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-names.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-names: [\"error\", \"as-needed\"]*/\n\nconst bar = function() {};\n\nconst cat = {\n  meow: function() {}\n}\n\nclass C {\n    #bar = function() {};\n    baz = function() {};\n}\n\nquux ??= function() {};\n\n(function bar() {\n    // ...\n}())\n\nexport default function foo() {}\n```\n\n----------------------------------------\n\nTITLE: New ES6 Modules Configuration Format\nDESCRIPTION: Updated configuration format for enabling ES6 module support in ESLint v2.0.0 using the sourceType property under parserOptions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tparserOptions: {\n\t\tsourceType: \"module\";\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JSON-with-Metadata Output in ESLint\nDESCRIPTION: This snippet demonstrates the structure of the JSON output from ESLint's json-with-metadata formatter. It includes detailed linting results for a file, along with metadata about the rules applied. The output contains information such as file paths, error messages, rule IDs, and suggestions for fixes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"results\": [\n        {\n            \"filePath\": \"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\",\n            \"messages\": [\n                {\n                    \"ruleId\": \"no-unused-vars\",\n                    \"severity\": 2,\n                    \"message\": \"'addOne' is defined but never used.\",\n                    \"line\": 1,\n                    \"column\": 10,\n                    \"nodeType\": \"Identifier\",\n                    \"messageId\": \"unusedVar\",\n                    \"endLine\": 1,\n                    \"endColumn\": 16,\n                    \"suggestions\": [\n                        {\n                            \"messageId\": \"removeVar\",\n                            \"data\": {\n                                \"varName\": \"addOne\"\n                            },\n                            \"fix\": {\n                                \"range\": [\n                                    0,\n                                    94\n                                ],\n                                \"text\": \"\"\n                            },\n                            \"desc\": \"Remove unused variable 'addOne'.\"\n                        }\n                    ]\n                },\n                {\n                    \"ruleId\": \"use-isnan\",\n                    \"severity\": 2,\n                    \"message\": \"Use the isNaN function to compare with NaN.\",\n                    \"line\": 2,\n                    \"column\": 9,\n                    \"nodeType\": \"BinaryExpression\",\n                    \"messageId\": \"comparisonWithNaN\",\n                    \"endLine\": 2,\n                    \"endColumn\": 17,\n                    \"suggestions\": [\n                        {\n                            \"messageId\": \"replaceWithIsNaN\",\n                            \"fix\": {\n                                \"range\": [\n                                    29,\n                                    37\n                                ],\n                                \"text\": \"!Number.isNaN(i)\"\n                            },\n                            \"desc\": \"Replace with Number.isNaN.\"\n                        },\n                        {\n                            \"messageId\": \"replaceWithCastingAndIsNaN\",\n                            \"fix\": {\n                                \"range\": [\n                                    29,\n                                    37\n                                ],\n                                \"text\": \"!Number.isNaN(Number(i))\"\n                            },\n                            \"desc\": \"Replace with Number.isNaN and cast to a Number.\"\n                        }\n                    ]\n                },\n                {\n                    \"ruleId\": \"space-unary-ops\",\n                    \"severity\": 2,\n                    \"message\": \"Unexpected space before unary operator '++'.\",\n                    \"line\": 3,\n                    \"column\": 16,\n                    \"nodeType\": \"UpdateExpression\",\n                    \"messageId\": \"unexpectedBefore\",\n                    \"endLine\": 3,\n                    \"endColumn\": 20,\n                    \"fix\": {\n                        \"range\": [\n                            57,\n                            58\n                        ],\n                        \"text\": \"\"\n                    }\n                },\n                {\n                    \"ruleId\": \"semi\",\n                    \"severity\": 1,\n                    \"message\": \"Missing semicolon.\",\n                    \"line\": 3,\n                    \"column\": 20,\n                    \"nodeType\": \"ReturnStatement\",\n                    \"messageId\": \"missingSemi\",\n                    \"endLine\": 4,\n                    \"endColumn\": 1,\n                    \"fix\": {\n                        \"range\": [\n                            60,\n                            60\n                        ],\n                        \"text\": \";\"\n                    }\n                },\n                {\n                    \"ruleId\": \"no-else-return\",\n                    \"severity\": 1,\n                    \"message\": \"Unnecessary 'else' after 'return'.\",\n                    \"line\": 4,\n                    \"column\": 12,\n                    \"nodeType\": \"BlockStatement\",\n                    \"messageId\": \"unexpected\",\n                    \"endLine\": 6,\n                    \"endColumn\": 6,\n                    \"fix\": {\n                        \"range\": [\n                            0,\n                            94\n                        ],\n                        \"text\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } \\n      return\\n    \\n}\"\n                    }\n                },\n                {\n                    \"ruleId\": \"indent\",\n                    \"severity\": 1,\n                    \"message\": \"Expected indentation of 8 spaces but found 6.\",\n                    \"line\": 5,\n                    \"column\": 1,\n                    \"nodeType\": \"Keyword\",\n                    \"messageId\": \"wrongIndentation\",\n                    \"endLine\": 5,\n                    \"endColumn\": 7,\n                    \"fix\": {\n                        \"range\": [\n                            74,\n                            80\n                        ],\n                        \"text\": \"        \"\n                    }\n                },\n                {\n                    \"ruleId\": \"consistent-return\",\n                    \"severity\": 2,\n                    \"message\": \"Function 'addOne' expected a return value.\",\n                    \"line\": 5,\n                    \"column\": 7,\n                    \"nodeType\": \"ReturnStatement\",\n                    \"messageId\": \"missingReturnValue\",\n                    \"endLine\": 5,\n                    \"endColumn\": 13\n                },\n                {\n                    \"ruleId\": \"semi\",\n                    \"severity\": 1,\n                    \"message\": \"Missing semicolon.\",\n                    \"line\": 5,\n                    \"column\": 13,\n                    \"nodeType\": \"ReturnStatement\",\n                    \"messageId\": \"missingSemi\",\n                    \"endLine\": 6,\n                    \"endColumn\": 1,\n                    \"fix\": {\n                        \"range\": [\n                            86,\n                            86\n                        ],\n                        \"text\": \";\"\n                    }\n                }\n            ],\n            \"suppressedMessages\": [],\n            \"errorCount\": 4,\n            \"fatalErrorCount\": 0,\n            \"warningCount\": 4,\n            \"fixableErrorCount\": 1,\n            \"fixableWarningCount\": 4,\n            \"source\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } else {\\n      return\\n    }\\n};\"\n        }\n    ],\n    \"metadata\": {\n        \"rulesMeta\": {\n            \"no-else-return\": {\n                \"type\": \"suggestion\",\n                \"defaultOptions\": [\n                    {\n                        \"allowElseIf\": true\n                    }\n                ],\n                \"docs\": {\n                    \"description\": \"Disallow `else` blocks after `return` statements in `if` statements\",\n                    \"recommended\": false,\n                    \"frozen\": true,\n                    \"url\": \"https://eslint.org/docs/latest/rules/no-else-return\"\n                },\n                \"schema\": [\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"allowElseIf\": {\n                                \"type\": \"boolean\"\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"fixable\": \"code\",\n                \"messages\": {\n                    \"unexpected\": \"Unnecessary 'else' after 'return'.\"\n                }\n            },\n            \"indent\": {\n                \"deprecated\": {\n                    \"message\": \"Formatting rules are being moved out of ESLint core.\",\n                    \"url\": \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n                    \"deprecatedSince\": \"8.53.0\",\n                    \"availableUntil\": \"10.0.0\",\n                    \"replacedBy\": [\n                        {\n                            \"message\": \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                            \"url\": \"https://eslint.style/guide/migration\",\n                            \"plugin\": {\n                                \"name\": \"@stylistic/eslint-plugin-js\",\n                                \"url\": \"https://eslint.style/packages/js\"\n                            },\n                            \"rule\": {\n                                \"name\": \"indent\",\n                                \"url\": \"https://eslint.style/rules/js/indent\"\n                            }\n                        }\n                    ]\n                },\n                \"type\": \"layout\",\n                \"docs\": {\n                    \"description\": \"Enforce consistent indentation\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/indent\"\n                },\n                \"fixable\": \"whitespace\",\n                \"schema\": [\n                    {\n                        \"oneOf\": [\n                            {\n                                \"enum\": [\n                                    \"tab\"\n                                ]\n                            },\n                            {\n                                \"type\": \"integer\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Literal with Reserved Word in ECMAScript 5\nDESCRIPTION: A correct example of an object literal using a reserved word as a property name in ECMAScript 5. This snippet shows how reserved words can be used as object keys in ES5.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/good-examples.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar x = { import: 5 };\n```\n\n----------------------------------------\n\nTITLE: Restricting Named Default Re-exports - Incorrect Example\nDESCRIPTION: Example demonstrating how the rule restricts re-exporting a default export from another module when 'default' is in the restricted names list.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictedNamedExports\": [\"default\"] }]*/\n\nexport { default } from \"some_module\";\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rule Options in JSON\nDESCRIPTION: This JSON snippet shows how to configure options for an ESLint rule in the configuration file. It demonstrates setting the 'quotes' rule to use double quotes with an error severity level.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"quotes\": [\"error\", \"double\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Parser Options in ESLint CLI\nDESCRIPTION: The --parser-options flag allows specifying parser-specific options. Examples show setting ECMAScript version to properly parse newer JavaScript features like exponentiation operator.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--stdin --parser-options ecmaVersion:6\n```\n\nLANGUAGE: bash\nCODE:\n```\n--stdin --parser-options ecmaVersion:7\n```\n\n----------------------------------------\n\nTITLE: Example of incorrect applyDefaultIgnorePatterns usage in JavaScript\nDESCRIPTION: Example of incorrect code when using applyDefaultIgnorePatterns:false, where comments containing words like 'jshint' are no longer automatically ignored and require blank lines around them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"applyDefaultIgnorePatterns\": false }] */\n\nfoo();\n/* jshint mentioned in comment */\n\n```\n\n----------------------------------------\n\nTITLE: Accessing global comment information in custom ESLint rules\nDESCRIPTION: Update custom rules that use the removed 'eslintExplicitGlobalComment' property to instead use the new 'eslintExplicitGlobalComments' property, which is an array of global comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old\nif (variable.eslintExplicitGlobalComment) {\n  // ...\n}\n\n// New\nif (variable.eslintExplicitGlobalComments && variable.eslintExplicitGlobalComments.length > 0) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Flat Ternary Expressions - Enabled\nDESCRIPTION: Shows correct indentation when flatTernaryExpressions is enabled, keeping all ternary expressions at the same indentation level.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent: [\"error\", 4, { \"flatTernaryExpressions\": true }]*/\n\nvar a =\n    foo ? bar :\n    baz ? qux :\n    boop;\n```\n\n----------------------------------------\n\nTITLE: Defining ESLint Rule: space-unary-ops\nDESCRIPTION: This snippet defines the 'space-unary-ops' rule in ESLint. It enforces consistent spacing before or after unary operators. The rule is marked as deprecated with information about its replacement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"space-unary-ops\": {\n    \"deprecated\": {\n        \"message\": \"Formatting rules are being moved out of ESLint core.\",\n        \"url\": \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n        \"deprecatedSince\": \"8.53.0\",\n        \"availableUntil\": \"10.0.0\",\n        \"replacedBy\": [\n            {\n                \"message\": \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                \"url\": \"https://eslint.style/guide/migration\",\n                \"plugin\": {\n                    \"name\": \"@stylistic/eslint-plugin-js\",\n                    \"url\": \"https://eslint.style/packages/js\"\n                },\n                \"rule\": {\n                    \"name\": \"space-unary-ops\",\n                    \"url\": \"https://eslint.style/rules/js/space-unary-ops\"\n                }\n            }\n        ]\n    },\n    \"type\": \"layout\",\n    \"docs\": {\n        \"description\": \"Enforce consistent spacing before or after unary operators\",\n        \"recommended\": false,\n        \"url\": \"https://eslint.org/docs/latest/rules/space-unary-ops\"\n    },\n    \"fixable\": \"whitespace\",\n    \"schema\": [\n        {\n            \"type\": \"object\",\n            \"properties\": {\n                \"words\": {\n                    \"type\": \"boolean\",\n                    \"default\": true\n                },\n                \"nonwords\": {\n                    \"type\": \"boolean\",\n                    \"default\": false\n                },\n                \"overrides\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": {\n                        \"type\": \"boolean\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ],\n    \"messages\": {\n        \"unexpectedBefore\": \"Unexpected space before unary operator '{{operator}}'.\",\n        \"unexpectedAfter\": \"Unexpected space after unary operator '{{operator}}'.\",\n        \"unexpectedAfterWord\": \"Unexpected space after unary word operator '{{word}}'.\",\n        \"wordOperator\": \"Unary word operator '{{word}}' must be followed by whitespace.\",\n        \"operator\": \"Unary operator '{{operator}}' must be followed by whitespace.\",\n        \"beforeUnaryExpressions\": \"Space is required before unary expressions '{{token}}'.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Call Expression Argument Alignment in JavaScript\nDESCRIPTION: Example of correctly aligned call expression arguments with the indent-legacy rule set to 'first' argument alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, {\"CallExpression\": {\"arguments\": \"first\"}}]*/\n\nfoo(bar, baz,\n    baz, boop, beep);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for no-useless-assignment Rule\nDESCRIPTION: These examples show correct usage patterns that do not trigger the no-useless-assignment rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-assignment.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-useless-assignment: \"error\" */\n\nfunction fn1() {\n    let v = 'used';\n    doSomething(v);\n    v = 'used-2';\n    doSomething(v);\n}\n\nfunction fn2() {\n    let v = 'used';\n    if (condition) {\n        v = 'used-2';\n        doSomething(v);\n        return\n    }\n    doSomething(v);\n}\n\nfunction fn3() {\n    let v = 'used';\n    if (condition) {\n        doSomething(v);\n    } else {\n        v = 'used-2';\n        doSomething(v);\n    }\n}\n\nfunction fn4() {\n    let v = 'used';\n    for (let i = 0; i < 10; i++) {\n        doSomething(v);\n        v = 'used in next iteration';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Alternative Approaches to Increment/Decrement\nDESCRIPTION: Examples of compliant code that uses addition and subtraction assignment operators instead of increment/decrement operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-plusplus.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-plusplus: \"error\"*/\n\nlet foo = 0;\nfoo += 1;\n\nlet bar = 42;\nbar -= 1;\n\nfor (i = 0; i < l; i += 1) {\n    doSomething(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing padded-blocks rule with 'never' option in JavaScript\nDESCRIPTION: Examples of incorrect code when using the 'never' option, which disallows empty lines at the beginning and ending of blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", \"never\"]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n\nclass C {\n\n    static {\n\n        a();\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information\nDESCRIPTION: Example showing how to output the current ESLint version.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\n--version\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for no-undef Rule\nDESCRIPTION: Shows how to enable the 'no-undef' rule in ESLint using an inline comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/bad-examples.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-undef: error */\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Example - Correct Usage\nDESCRIPTION: Example showing the proper way to instantiate a required module while complying with the no-new-require rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-require.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new-require: \"error\"*/\n\nvar AppHeader = require('app-header');\nvar appHeader = new AppHeader();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with var-consecutive Option\nDESCRIPTION: Example showing code that violates the one-var rule when configured with the 'consecutive' option specifically for 'var' declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { var: \"consecutive\" }]*/\n\nfunction foo() {\n    var a;\n    var b;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of afterHashbangComment option in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with afterHashbangComment option enabled, requiring a blank line after hashbang comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n#!foo\n\nvar day = \"great\"\n\n/*eslint lines-around-comment: [\"error\", { \"afterHashbangComment\": true }] */\n```\n\n----------------------------------------\n\nTITLE: Running ESLint Documentation Site Locally in Shell\nDESCRIPTION: Command to start the ESLint documentation site locally. After execution, the site becomes available at http://localhost:2023.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Violating object-property-newline with multiline property and partial overlap\nDESCRIPTION: Example of code that violates the rule due to partial property specification (closing bracket) appearing on the same line as another property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst newObject = {a: [\n    'Officiële website van de Europese Unie',\n    'Официален уебсайт на Европейския съюз'\n], b: 2};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples\nDESCRIPTION: Examples of code patterns that violate the no-mixed-operators rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-operators.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-mixed-operators: \"error\"*/\n\nvar foo = a && b < 0 || c > 0 || d + 1 === 0;\nvar foo = a + b * c;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Excessive Parameters in JavaScript Function\nDESCRIPTION: This snippet shows a function with four parameters, which may be considered too many for readability and maintainability.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-params.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo (bar, baz, qux, qxx) { // four parameters, may be too many\n    doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling New ESLint Recommended Rules\nDESCRIPTION: Configuration to disable all new rules added to eslint:recommended in version 2.0.0\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\",\n\t\"rules\": {\n\t\t\"no-case-declarations\": 0,\n\t\t\"no-class-assign\": 0,\n\t\t\"no-const-assign\": 0,\n\t\t\"no-dupe-class-members\": 0,\n\t\t\"no-empty-pattern\": 0,\n\t\t\"no-new-symbol\": 0,\n\t\t\"no-self-assign\": 0,\n\t\t\"no-this-before-super\": 0,\n\t\t\"no-unexpected-multiline\": 0,\n\t\t\"no-unused-labels\": 0,\n\t\t\"constructor-super\": 0\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with variables Option Set to False in JavaScript\nDESCRIPTION: This snippet demonstrates correct usage when the 'variables' option is set to false, allowing variable usage in certain scenarios.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nfunction baz() {\n    console.log(foo);\n}\nvar foo = 1;\n\nconst a = () => f();\nfunction b() { return f(); }\nconst c = function() { return f(); }\nconst f = () => {};\n\nconst e = function() { return g(); }\nconst g = function() {}\n\n{\n    const C = class {\n        x = foo;\n    }\n    const foo = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import With Custom Message\nDESCRIPTION: Example of code that violates the rule by importing a module that matches a restricted pattern group, which has a custom error message.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"lodash/*\"],\n    message: \"Please use the default import from 'lodash' instead.\"\n}]}]*/\n\nimport pick from 'lodash/pick';\n```\n\n----------------------------------------\n\nTITLE: Final Incorrect Example with Class-Specific Configuration\nDESCRIPTION: Example showing a violation when classes are configured to require spaces but functions and keywords are not.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-blocks.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"never\", \"classes\": \"always\" }]*/\n\nclass Foo{\n  constructor(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Global Variables using Configuration Comments\nDESCRIPTION: This code snippet demonstrates how to define global variables in a JavaScript file using ESLint configuration comments. It defines two read-only global variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/* global var1, var2 */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Trailing Commas with 'always-multiline' Option\nDESCRIPTION: These JavaScript snippets show incorrect usage of trailing commas in various scenarios when the 'comma-dangle' rule is set to 'always-multiline'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n----------------------------------------\n\nTITLE: Less specific diff when properties are on the same line\nDESCRIPTION: A diff showing how changes are less specific when object properties are all on the same line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n// Less specific\n-var obj = { foo: \"foo\", bar: \"bar\", baz: \"baz\" };\n+var obj = { foo: \"foo\", bar: \"bazz\", baz: \"baz\" };\n```\n\n----------------------------------------\n\nTITLE: Unused Fallthrough Comment Examples - Incorrect\nDESCRIPTION: Examples of incorrect usage when reportUnusedFallthroughComment option is enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-fallthrough: [\"error\", { \"reportUnusedFallthroughComment\": true }] */\n\nswitch(foo){\n    case 1:\n        doSomething();\n        break;\n    // falls through\n    case 2: doSomething();\n}\n\nfunction f() {\n    switch(foo){\n        case 1:\n            if (a) {\n                throw new Error();\n            } else if (b) {\n                break;\n            } else {\n                return;\n            }\n        // falls through\n        case 2:\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Rule Change Documentation\nDESCRIPTION: YAML frontmatter configuration block defining the document's title, navigation structure, and ordering within the ESLint documentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/propose-rule-change.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Propose a Rule Change\neleventyNavigation:\n    key: propose rule change\n    parent: contribute to eslint\n    title: Propose a Rule Change\n    order: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for no-whitespace-before-property rule in JavaScript\nDESCRIPTION: Examples of code that violate the no-whitespace-before-property rule, showing incorrect whitespace around dots and before opening brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-whitespace-before-property.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-whitespace-before-property: \"error\"*/\n\nfoo [bar]\n\nfoo. bar\n\nfoo .bar\n\nfoo. bar. baz\n\nfoo. bar()\n  .baz()\n\nfoo\n  .bar(). baz()\n```\n\n----------------------------------------\n\nTITLE: Invalid Multi-line ESLint Directive Example\nDESCRIPTION: Demonstrates an invalid multi-line eslint-disable-line directive that spans multiple lines, which is no longer allowed in ESLint v5. Such directives must be contained to a single line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-5.0.0.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"foo\");\n/* eslint-disable-line\n   no-alert */ alert(\"bar\");\n\n// (which line is the rule disabled on?)\n```\n\n----------------------------------------\n\nTITLE: Correct Code Example for Default indent-legacy Rule\nDESCRIPTION: Demonstrates correctly indented code that complies with the default indent-legacy rule settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: \"error\"*/\n\nif (a) {\n    b=c;\n    function foo(d) {\n        e=f;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage When Restricting Named Imports\nDESCRIPTION: Example showing violations when importNamePattern is set to '^', which restricts all named imports from matching modules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_37\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    importNamePattern: \"^\"\n}]}]*/\n\nimport isEmpty, { hasValue } from 'utils/collection-utils';\n\nimport * as file from 'utils/file-utils';\n```\n\n----------------------------------------\n\nTITLE: Correct Custom Switch Statement Spacing Example\nDESCRIPTION: Example showing correct spacing with custom configuration requiring spaces before colons and no spaces after.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/switch-colon-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint switch-colon-spacing: [\"error\", {\"after\": false, \"before\": true}]*/\n\nswitch (a) {\n    case 0 :foo(); break;\n    case 1 :\n        bar();\n        break;\n    default :\n        baz();\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand vs. Separate Assignment Operators Reference Table\nDESCRIPTION: A reference table showing the mapping between shorthand assignment operators and their expanded equivalents in JavaScript.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-assignment.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n Shorthand | Separate\n-----------|------------\n x += y    | x = x + y\n x -= y    | x = x - y\n x *= y    | x = x * y\n x /= y    | x = x / y\n x %= y    | x = x % y\n x **= y   | x = x ** y\n x <<= y   | x = x << y\n x >>= y   | x = x >> y\n x >>>= y  | x = x >>> y\n x &= y    | x = x & y\n x ^= y    | x = x ^ y\n x |= y    | x = x | y\n```\n\n----------------------------------------\n\nTITLE: Basic ID Length Violation Example\nDESCRIPTION: Demonstrates a basic violation of the id-length rule with a single-character variable name.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-length.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = 5; // too short; difficult to understand its purpose without context\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with ignoreComments Option in JavaScript\nDESCRIPTION: Example showing code with the ignoreComments option enabled, allowing trailing whitespace in comment blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-trailing-spaces.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-trailing-spaces: [\"error\", { \"ignoreComments\": true }]*/\n\n// ↓ these comments have trailing whitespace → \n//     \n/**\n * baz\n *  \n * bar\n */\n```\n\n----------------------------------------\n\nTITLE: Example of Octal Literal in JavaScript\nDESCRIPTION: Demonstrates how an octal literal is defined in JavaScript with a leading zero. The octal value 071 is equivalent to decimal 57.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-octal.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst num = 071;      // 57\n```\n\n----------------------------------------\n\nTITLE: ESLint Circular Fixes Warning Message\nDESCRIPTION: Example of the warning message displayed when ESLint detects circular fixes during automatic code fixing. This occurs when multiple rules attempt to make conflicting changes to the same code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/troubleshooting/circular-fixes.md#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nESLintCircularFixesWarning: Circular fixes detected while fixing path/to/file. It is likely that you have conflicting rules in your configuration.\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Documentation Links in Shell\nDESCRIPTION: Command to update the links data file for the ESLint documentation. This should be executed from the root folder of the project, not from the 'docs' folder.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:docs:update-links\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of ArrayPattern with no-restricted-syntax Rule\nDESCRIPTION: Shows a correct example of using array destructuring when the 'no-restricted-syntax' rule is configured to restrict ArrayPattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/bad-examples.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-restricted-syntax: [\"error\", \"ArrayPattern\"] */\n\nconst [foo] = bar;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Object Prototype Methods in JavaScript\nDESCRIPTION: Examples of code that violate the no-prototype-builtins rule by directly calling Object.prototype methods on object instances. This approach can cause issues with objects created using Object.create(null) or objects with properties that shadow the builtin methods.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-prototype-builtins.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-prototype-builtins: \"error\"*/\n\nconst hasBarProperty = foo.hasOwnProperty(\"bar\");\n\nconst isPrototypeOfBar = foo.isPrototypeOf(bar);\n\nconst barIsEnumerable = foo.propertyIsEnumerable(\"bar\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Custom Ignore Pattern for Line Comment Position\nDESCRIPTION: This snippet shows an incorrect comment placement when using a custom ignore pattern. The comment does not match the ignore pattern and violates the position rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/line-comment-position.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\" }]*/\n1 + 1; // invalid comment\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'always' Option in JavaScript\nDESCRIPTION: Example of incorrect code when the unicode-bom rule is set to 'always', showing a file without the required Unicode BOM character at the beginning.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/unicode-bom.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint unicode-bom: [\"error\", \"always\"]*/\n\nlet abc;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Declaration Indentation in JavaScript\nDESCRIPTION: Example of incorrectly indented function declaration with the indent-legacy rule set to 2 spaces for body and parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }]*/\n\nfunction foo(bar,\n  baz,\n  qux) {\n    qux();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage When Only Side-Effect Imports Are Allowed\nDESCRIPTION: Example showing correct usage when importNamePattern is set to '^', allowing only side-effect imports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_38\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    importNamePattern: \"^\"\n}]}]*/\n\nimport 'utils/init-utils';\n```\n\n----------------------------------------\n\nTITLE: Extending Config with Overrides in ESLint v6\nDESCRIPTION: This example demonstrates the new behavior of extended configs with overrides in ESLint v6. It shows a parent config extending a shareable config with an overrides block.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// .eslintrc.js\nmodule.exports = {\n\textends: [\"foo\"],\n\trules: {\n\t\tsemi: \"off\",\n\t},\n};\n```\n\nLANGUAGE: js\nCODE:\n```\n// eslint-config-foo/index.js\nmodule.exports = {\n\toverrides: {\n\t\tfiles: [\"*.js\"],\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Multiple Classes in JavaScript\nDESCRIPTION: This snippet demonstrates code that violates the 'max-classes-per-file' rule by defining multiple classes in a single file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-classes-per-file.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-classes-per-file: \"error\"*/\n\nclass Foo {}\nclass Bar {}\n```\n\n----------------------------------------\n\nTITLE: Basic Octal Escape Example\nDESCRIPTION: Demonstrates a simple example of an octal escape sequence that should be avoided.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-octal-escape.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = \"Copyright \\251\";\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration in ECMAScript 3\nDESCRIPTION: A correct example of variable declaration in ECMAScript 3 with script source type. This snippet demonstrates basic variable declaration syntax compatible with older JavaScript versions.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/good-examples.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar x;\n```\n\n----------------------------------------\n\nTITLE: Correct Class Assignment - Anonymous Class\nDESCRIPTION: Demonstrates valid reassignment with an anonymous class expression.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-class-assign.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-class-assign: \"error\"*/\n\nlet A = class {\n    b() {\n        A = 0; // A is a variable.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Option Examples - Incorrect\nDESCRIPTION: Examples of destructuring patterns that violate the id-match rule with different configuration options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-match.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-match: [2, \"^[^_]+$\", { \"ignoreDestructuring\": false }]*/\n\nconst { category_id } = query;\n\nconst { categoryid_Default = 1 } = query;\n\nconst { category_ids: category_ids } = query;\n\nconst { category_id: category_Alias } = query;\n\nconst { category_id: category_IdRenamed, ...other_Props } = query;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-match: [2, \"^[^_]+$\", { \"ignoreDestructuring\": true }]*/\n\nconst { category_id: category_alias } = query;\n\nconst { category_id: category_Id, ...other_props } = query;\n```\n\n----------------------------------------\n\nTITLE: Correct example with BinaryExpression exception\nDESCRIPTION: Example showing how enabling the BinaryExpression exception allows multiple spaces in binary expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-spaces: [\"error\", { exceptions: { \"BinaryExpression\": true } }]*/\n\nvar a = 1  *  2;\n```\n\n----------------------------------------\n\nTITLE: Correct Function Declaration Parameter Indentation in JavaScript\nDESCRIPTION: Example of correctly indented function declaration parameters with the indent-legacy rule set to 'first' parameter alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, {\"FunctionDeclaration\": {\"parameters\": \"first\"}}]*/\n\nfunction foo(bar, baz,\n             qux, boop) {\n  qux();\n}\n```\n\n----------------------------------------\n\nTITLE: Example Pull Request Closing Comment - Inactivity\nDESCRIPTION: Template message for closing pull requests that have been inactive for 17 days.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/maintain/review-pull-requests.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nClosing because there hasn't been activity for 17 days. If you're still interested in submitting this code, please feel free to resubmit.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Arrow Function Formatting - beside option\nDESCRIPTION: Examples of incorrectly formatted arrow functions that violate the 'beside' option by placing the implicit return on a new line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/implicit-arrow-linebreak.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint implicit-arrow-linebreak: [\"error\", \"beside\"] */\n\n(foo) =>\n  bar;\n\n(foo) =>\n  (bar);\n\n(foo) =>\n  bar =>\n    baz;\n\n(foo) =>\n(\n  bar()\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example of 'no-new' Rule Violation in JavaScript\nDESCRIPTION: Demonstrates code that violates the 'no-new' rule by using the 'new' keyword without assigning the result to a variable.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new: \"error\"*/\n\nnew Thing();\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration Error Message\nDESCRIPTION: Example error message shown when ESLint cannot find a referenced configuration to extend from.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/troubleshooting/couldnt-find-the-config.md#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nESLint couldn't find the config \"${configName}\" to extend from. Please check that the name of the config is correct.\n\nThe config \"${configName}\" was referenced from the config file in \"${importerName}\".\n```\n\n----------------------------------------\n\nTITLE: ignoreClassesWithImplements Option - Incorrect Example\nDESCRIPTION: TypeScript example showing a standalone class with methods that don't use 'this', which violates the rule even when ignoreClassesWithImplements is set to 'all'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"ignoreClassesWithImplements\": \"all\" }] */\n\nclass Standalone {\n    method() {}\n    property = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Line Separated Groups Option for sort-keys Rule\nDESCRIPTION: Examples of incorrect code when using the allowLineSeparatedGroups option which allows resetting the sorting requirement after blank lines between properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"asc\", {allowLineSeparatedGroups: true}]*/\n\nconst obj1 = {\n    b: 1,\n    c () {\n\n    },\n    a: 3\n}\n\nconst obj2 = {\n    b: 1,\n    c: 2,\n\n    z () {\n\n    },\n    y: 3\n}\n\nconst obj3 = {\n    b: 1,\n    c: 2,\n\n    z () {\n\n    },\n    // comment\n    y: 3,\n}\n\nconst obj4 = {\n    b: 1\n    // comment before comma\n    , a: 2\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Custom Switch Statement Spacing Example\nDESCRIPTION: Example showing incorrect spacing with custom configuration requiring spaces before colons and no spaces after.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/switch-colon-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint switch-colon-spacing: [\"error\", {\"after\": false, \"before\": true}]*/\n\nswitch (a) {\n    case 0: break;\n    default: foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environments in YAML Configuration File\nDESCRIPTION: This snippet shows how to specify ESLint environments in a YAML configuration file using the 'env' key.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nenv:\n    browser: true\n    node: true\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage with requireReturnForObjectLiteral option (JavaScript)\nDESCRIPTION: Shows incorrect usage when 'requireReturnForObjectLiteral' is set to true. Object literals must be explicitly returned with braces and 'return' keyword.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/*eslint arrow-body-style: [\"error\", \"as-needed\", { \"requireReturnForObjectLiteral\": true }]*/\n\nconst foo = () => ({});\n\nconst bar = () => ({ bar: 0 });\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'always' Option in JavaScript\nDESCRIPTION: Example of correct code when the unicode-bom rule is set to 'always', which requires files to begin with the Unicode BOM character U+FEFF.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/unicode-bom.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n﻿// U+FEFF at the beginning\n\n/*eslint unicode-bom: [\"error\", \"always\"]*/\n\nlet abc;\n```\n\n----------------------------------------\n\nTITLE: Configuring exceptions for space-in-brackets rule in ESLint JSON\nDESCRIPTION: Examples of how to configure exceptions for the 'space-in-brackets' rule in an ESLint configuration file. These snippets show both 'always' and 'never' options with various exceptions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-brackets.md#2025-04-14_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"space-in-brackets\": [\"error\", \"always\", {\n  \"singleValue\": false,\n  \"objectsInArrays\": false,\n  \"arraysInArrays\": false,\n  \"arraysInObjects\": false,\n  \"objectsInObjects\": false,\n  \"propertyName\": false\n}]\n```\n\nLANGUAGE: JSON\nCODE:\n```\n\"space-in-brackets\": [\"error\", \"never\", {\n  \"singleValue\": true,\n  \"objectsInArrays\": true,\n  \"arraysInArrays\": true,\n  \"arraysInObjects\": true,\n  \"objectsInObjects\": true,\n  \"propertyName\": true\n}]\n```\n\n----------------------------------------\n\nTITLE: Function Call Arguments with Never Option - Incorrect Examples\nDESCRIPTION: Examples of incorrect function call argument formatting when using the 'never' option, which disallows line breaks between arguments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-call-argument-newline.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint function-call-argument-newline: [\"error\", \"never\"]*/\n\nfoo(\n    \"one\",\n    \"two\", \"three\"\n);\n\nbar(\n    \"one\",\n    \"two\", {\n        one: 1,\n        two: 2\n    }\n);\n\nbaz(\n    \"one\",\n    \"two\", (x) => {\n        console.log(x);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Old JSX Configuration Format\nDESCRIPTION: Example of the old configuration format for enabling JSX support in ESLint v1.x using the ecmaFeatures.jsx property.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tecmaFeatures: {\n\t\tjsx: true;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Examples with ignoreJSX: 'multi-line' Option\nDESCRIPTION: Examples showing invalid JSX code when the 'ignoreJSX' option is set to 'multi-line', where single-line JSX with extra parentheses is flagged.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"multi-line\" }] */\nconst ThisComponent = (<div />)\nconst ThatComponent = (<div><p /></div>)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example with ESLint Configuration\nDESCRIPTION: This code snippet shows an example that would be flagged by the no-multi-str rule when it is enabled, demonstrating a multiline string created with a backslash line continuation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-str.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-str: \"error\"*/\n\nconst x = \"some very \\\nlong text\";\n```\n\n----------------------------------------\n\nTITLE: Examples with ignoreExport Option Enabled\nDESCRIPTION: JavaScript code that is considered correct when the ignoreExport option is set to true, allowing redundant renaming in export statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-rename.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-rename: [\"error\", { ignoreExport: true }]*/\n\nconst foo = 1;\nexport { foo as foo };\nexport { bar as bar } from \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Pruning Unused ESLint Suppressions\nDESCRIPTION: Command to remove suppressions that are no longer needed after the code violations have been resolved.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/suppressions.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\neslint --prune-suppressions\n```\n\n----------------------------------------\n\nTITLE: Rule Limitations Example\nDESCRIPTION: Examples showing the limitations of the rule when dealing with dynamic expressions\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-spread.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-spread: \"error\"*/\n\n// This warns.\na[i++].foo.apply(a[i++], args);\n\n// This does not warn.\na[++i].foo.apply(a[i], args);\n```\n\n----------------------------------------\n\nTITLE: Piping code into ESLint\nDESCRIPTION: Equivalent command to pipe JavaScript code into ESLint for linting, requiring the --stdin flag.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncat file.js | eslint --stdin\n```\n\n----------------------------------------\n\nTITLE: Empty JavaScript Code Block\nDESCRIPTION: An example of an empty JavaScript code block. This snippet is marked as correct and demonstrates a valid, albeit empty, code block.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/good-examples.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Violating object-property-newline with partial properties on same line\nDESCRIPTION: Example of code that violates the rule even with allowAllPropertiesOnSameLine enabled because only some properties (not all) are on the same line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst newObject = {\n    a: 'a.m.', b: 'p.m.',\n    c: 'daylight saving time'\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Within Max Lines (JavaScript)\nDESCRIPTION: Example of code that complies with the max-lines rule with a max value of 3. The code is limited to 3 lines or fewer.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-lines.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines: [\"error\", 3]*/\nlet a,\n    b, c;\n```\n\n----------------------------------------\n\nTITLE: Incorrect CapIsNew Usage\nDESCRIPTION: Example of incorrect usage without new operator for capitalized function.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-cap.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-cap: [\"error\", { \"capIsNew\": true }]*/\n\nconst colleague = Person();\n```\n\n----------------------------------------\n\nTITLE: Example of incorrect code with spaces before semicolons in JavaScript\nDESCRIPTION: This example demonstrates code that would be flagged by the 'no-space-before-semi' rule, showing various cases where spaces are incorrectly placed before semicolons.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-space-before-semi.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar thing = function () {\n  var test = 12 ;\n}  ;\n```\n\n----------------------------------------\n\nTITLE: Specifying a Processor in ESLint Configuration\nDESCRIPTION: Example showing how to specify a processor in an ESLint configuration file using a concatenated string of plugin name and processor name separated by a slash.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins-deprecated.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [\"a-plugin\"],\n\t\"processor\": \"a-plugin/a-processor\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with Various Duplicate Conditions\nDESCRIPTION: Multiple examples of incorrect if-else-if chains containing duplicate or logically equivalent conditions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-else-if.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-dupe-else-if: \"error\"*/\n\nif (isSomething(x)) {\n    foo();\n} else if (isSomething(x)) {\n    bar();\n}\n\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (c && d) {\n    baz();\n} else if (c && d) {\n    quux();\n} else {\n    quuux();\n}\n\nif (n === 1) {\n    foo();\n} else if (n === 2) {\n    bar();\n} else if (n === 3) {\n    baz();\n} else if (n === 2) {\n    quux();\n} else if (n === 5) {\n    quuux();\n}\n```\n\n----------------------------------------\n\nTITLE: Using ESLint with the fix option\nDESCRIPTION: Equivalent ESLint command to automatically fix code issues using the --fix option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\neslint --fix file.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples for require-await rule\nDESCRIPTION: Examples of code that violate the require-await rule, showing async functions without await expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-await.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint require-await: \"error\"*/\n\nasync function foo() {\n    doSomething();\n}\n\nbar(async () => {\n    doSomething();\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Using const in for...in Loop in JavaScript\nDESCRIPTION: This snippet shows correct usage of const in a for...in loop, where 'a' is re-defined (not modified) on each loop iteration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-const-assign.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-const-assign: \"error\"*/\n\nfor (const a in [1, 2, 3]) { // `a` is re-defined (not modified) on each loop step.\n    console.log(a);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of process.env in JavaScript\nDESCRIPTION: Example of code that violates the no-process-env rule by directly accessing process.env.NODE_ENV, which the rule discourages in favor of using a configuration file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-process-env.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-process-env: \"error\"*/\n\nif(process.env.NODE_ENV === \"development\") {\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Array Expression Element Alignment in JavaScript\nDESCRIPTION: Example of correctly aligned array expression elements with the indent-legacy rule set to 'first' element alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, {\"ArrayExpression\": \"first\"}]*/\n\nvar foo = [bar,\n           baz,\n           qux\n];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Minimum Keys Option for sort-keys Rule\nDESCRIPTION: Examples of incorrect code when using the minKeys option to only enforce sorting on objects with a minimum number of properties (in this case, 4 or more).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint sort-keys: [\"error\", \"asc\", {minKeys: 4}]*/\n\n// 4 keys\nconst obj1 = {\n    b: 2,\n    a: 1, // not sorted correctly (should be 1st key)\n    c: 3,\n    d: 4,\n};\n\n// 5 keys\nconst obj2 = {\n    2: 'a',\n    1: 'b', // not sorted correctly (should be 1st key)\n    3: 'c',\n    4: 'd',\n    5: 'e',\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Ignore Patterns in Line Comment Position Rule\nDESCRIPTION: This snippet demonstrates how to disable default ignore patterns and use only a custom pattern. It shows a valid comment that matches the custom pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/line-comment-position.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\", \"applyDefaultIgnorePatterns\": false }]*/\n1 + 1; // pragma valid comment\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: one-var with initialized:never\nDESCRIPTION: An example showing incorrect variable declarations where initialized variables are grouped together in a single declaration, violating the rule configuration that requires them to be declared separately.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", { \"initialized\": \"never\" }]*/\n\nfunction foo() {\n    var foo = true,\n        bar = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExternalSpecifier Type for ESLint External Resources\nDESCRIPTION: The ExternalSpecifier type represents an external resource, such as a plugin or rule. It includes optional properties for name and URL.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/rule-deprecation.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n-   `name` (`string`)<br>\n    The package name for `plugin` and the rule id for `rule`.\n-   `url` (`string`)<br>\n    An URL pointing to documentation for the plugin / rule..\n```\n\n----------------------------------------\n\nTITLE: Converting JSCS configuration to ESLint using Polyjuice\nDESCRIPTION: This command uses Polyjuice to convert a JSCS configuration file (.jscsrc.json) to an ESLint configuration file (.eslintrc.json).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npolyjuice --jscs .jscsrc.json > .eslintrc.json\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for 'inside' Option in wrap-iife Rule\nDESCRIPTION: Shows code that violates the wrap-iife rule when configured with the 'inside' option, which requires wrapping the function expression.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-iife.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n----------------------------------------\n\nTITLE: Restricting Direct Default Value Exports - Incorrect Example\nDESCRIPTION: Example showing restriction of default exports of literal values when using the 'direct' option of restrictDefaultExports.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"direct\": true } }]*/\n\nexport default 42;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Single-line Statement Positioning with 'below' Option\nDESCRIPTION: Examples of incorrect code for the nonblock-statement-body-position rule with the 'below' option, showing control structures with single-line statements placed on the same line as the condition.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/nonblock-statement-body-position.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint nonblock-statement-body-position: [\"error\", \"below\"] */\n\nif (foo) bar();\nelse baz();\n\nwhile (foo) bar();\n\nfor (let i = 1; i < foo; i++) bar();\n\ndo bar(); while (foo)\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint Recommended Configuration\nDESCRIPTION: Simple configuration to extend ESLint's recommended ruleset\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Examples with ignoreJSX: 'single-line' Option\nDESCRIPTION: Examples showing invalid JSX code when the 'ignoreJSX' option is set to 'single-line', where multi-line JSX with extra parentheses is flagged.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"single-line\" }] */\nconst ThisComponent = (\n    <div>\n        <p />\n    </div>\n)\nconst ThatComponent = (\n    <div\n        prop={true}\n    />\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'always' and 'empty' Exception\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'always' option with an exception for empty parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo( );\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of delete operator with prefer-reflect rule\nDESCRIPTION: Example of code that violates the prefer-reflect rule by using the delete operator on an object property instead of Reflect.deleteProperty().\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-reflect.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-reflect: \"error\"*/\n\ndelete foo.bar; // deleting object property\n```\n\n----------------------------------------\n\nTITLE: Setting Root Configuration in JSON Format\nDESCRIPTION: Setting 'root: true' in a JSON configuration file to limit ESLint from looking further up the directory tree for more configuration files. This is useful to isolate project configuration from higher-level settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"root\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ESLint Release Parameters Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table showing the release parameters for the 'eslint Release' job on Jenkins. It specifies the RELEASE_TYPE options for different scenarios when releasing new versions of the eslint package.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/maintain/manage-releases.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **HEAD Version** | **Desired Next Version** | **`eslint Release`<br>`RELEASE_TYPE`** |\n| :--------------: | :----------------------: | :------------------------------------: |\n|     `9.25.0`     |   `9.25.1` or `9.26.0`   |                `latest`                |\n|     `9.25.0`     |     `10.0.0-alpha.0`     |                `alpha`                 |\n| `10.0.0-alpha.0` |     `10.0.0-alpha.1`     |                `alpha`                 |\n| `10.0.0-alpha.1` |     `10.0.0-beta.0`      |                 `beta`                 |\n| `10.0.0-beta.0`  |     `10.0.0-beta.1`      |                 `beta`                 |\n| `10.0.0-beta.1`  |      `10.0.0-rc.0`       |                  `rc`                  |\n|  `10.0.0-rc.0`   |      `10.0.0-rc.1`       |                  `rc`                  |\n|  `10.0.0-rc.1`   |         `10.0.0`         |                `latest`                |\n```\n\n----------------------------------------\n\nTITLE: Generator Expression Syntax in JavaScript\nDESCRIPTION: Examples of generator function expression syntax with different asterisk placements enforced by the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar generator = function* () {\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar generator = function * () {\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar generator = function *() {\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar generator = function*() {\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with YAML-style Comments\nDESCRIPTION: Example of YAML configuration file that includes YAML-style comments. It configures browser environment and overrides default rule settings for eqeqeq and strict rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n    browser: true\nrules:\n    # Override default settings\n    eqeqeq: warn\n    strict: off\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of JavaScript Labels\nDESCRIPTION: This example shows incorrect code that would trigger the no-empty-label rule. The label 'labeled:' is being used to mark a variable declaration, which is not an iteration or switch statement.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-label.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-empty-label: \"error\"*/\n\nlabeled:\nvar x = 10;\n```\n\n----------------------------------------\n\nTITLE: Legacy Global Variable Reference (ESLint 1.x)\nDESCRIPTION: Old method for finding global variable references using Scope#through property\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar globalScope = context.getScope();\nglobalScope.through.forEach(function (reference) {\n\tif (reference.identifier.name === \"window\") {\n\t\tcheckForWindow(reference);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Empty Case Examples\nDESCRIPTION: Examples showing allowed empty case statements with the allowEmptyCase option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-fallthrough: [\"error\", { \"allowEmptyCase\": true }] */\n\nswitch(foo){\n    case 1:\n\n    case 2: doSomething();\n}\n\nswitch(foo){\n    case 1:\n    /*\n    Put a message here \n    */\n    case 2: doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing padded-blocks with 'classes: always' option in JavaScript\nDESCRIPTION: Examples of incorrect code when using the option that requires padding inside class bodies.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"classes\": \"always\" }]*/\n\nclass  A {\n    constructor(){\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Comment Format Example\nDESCRIPTION: Shows an example of an invalid configuration comment format where the description line starts with an asterisk character, which will not be properly recognized by ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint eqeqeq: \"off\", curly: \"error\"\n * --------\n * This will not work due to the line above starting with a '*' character.\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variables in YAML Configuration File\nDESCRIPTION: This example shows how to specify global variables with different access permissions in an ESLint YAML configuration file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\nglobals:\n    var1: writable\n    var2: readonly\n```\n\n----------------------------------------\n\nTITLE: Using CLIEngine#executeOnText() in ESLint v3.0.0\nDESCRIPTION: Updated example for using CLIEngine#executeOnText() in ESLint v3.0.0, showing the new third parameter that enables warnings about ignored files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-3.0.0.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = engine.executeOnText(text, filename, true);\n```\n\n----------------------------------------\n\nTITLE: Correct generator yield spacing example in JavaScript\nDESCRIPTION: Example of proper spacing with the yield operator in generator functions that follows the space-unary-ops rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-ops.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-unary-ops: \"error\"*/\n\nfunction *foo() {\n    yield (0)\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect ID Length Usage Examples\nDESCRIPTION: Examples showing various violations of the default id-length rule which requires minimum 2 characters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-length.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-length: \"error\"*/     // default is minimum 2-chars ({ \"min\": 2 })\n\nconst x = 5;\nobj.e = document.body;\nconst foo = function (e) { };\ntry {\n    dangerousStuff();\n} catch (e) {\n    // ignore as many do\n}\nconst myObj = { a: 1 };\n(a) => { a * a };\nclass y { }\nclass Foo { x() {} }\nclass Bar { #x() {} }\nclass Baz { x = 1 }\nclass Qux { #x = 1 }\nfunction bar(...x) { }\nfunction baz([x]) { }\nconst [z] = arr;\nconst { prop: [i]} = {};\nfunction qux({x}) { }\nconst { j } = {};\nconst { prop: a} = {};\n({ prop: obj.x } = {});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Spacing Before Keywords in JavaScript\nDESCRIPTION: Examples of code that violate the 'space-before-keywords' rule with the default 'always' option. It shows improper spacing before keywords like 'else', 'let', and 'function'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-keywords.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-keywords: [\"error\", \"always\"]*/\n\nif (foo) {\n    // ...\n}else {}\n\nconst foo = 'bar';let baz = 'qux';\n\nvar qux =function bar () {}\n\nfunction bar() {\n    if (foo) {return; }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'always' and '[]' Exception\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'always' option with an exception for square brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo( [bar, baz] );\nfoo( [bar, baz], 1 );\n```\n\n----------------------------------------\n\nTITLE: Testing ESLint Rules with Legacy ESLintTester\nDESCRIPTION: Example showing the old way of testing ESLint rules using the deprecated eslint-tester module. This approach created circular dependencies and is no longer recommended.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-1.0.0.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar eslint = require(\"../../../lib/eslint\"),\n\tESLintTester = require(\"eslint-tester\");\n\nvar eslintTester = new ESLintTester(eslint);\neslintTester.addRuleTest(\"lib/rules/your-rule\", {\n\tvalid: [],\n\tinvalid: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Trailing Commas with 'only-multiline' Option\nDESCRIPTION: These JavaScript snippets show incorrect usage of trailing commas in various scenarios when the 'comma-dangle' rule is set to 'only-multiline'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated ESLint Rule using Macro\nDESCRIPTION: This example shows how to define a deprecated ESLint rule using the rule macro. It includes parameters for the rule name, deprecation status, description, and categories.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/rule.md#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{ rule({\n    name: \"array-bracket-newline\",\n    deprecated: true,\n    description: 'Enforces line breaks after opening and before closing array brackets.',\n    categories: {\n        recommended: true,\n        fixable: true,\n        hasSuggestions: false\n    }\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Override in Finally Block (JavaScript)\nDESCRIPTION: This example shows how a throw statement in a finally block overrides an error thrown in a catch block. Instead of propagating the original error, a new error from the finally block is thrown.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// We expect this function to throw Try(...) error from the catch block\n(() => {\n    try {\n        throw new Error(\"Try\")\n    } catch(err) {\n        throw err; // The error thrown from try block is caught and rethrown\n    } finally {\n        throw new Error(\"Finally\"); // Finally(...) is thrown, which we did not expect\n    }\n})();\n\n// > Uncaught Error: Finally(...)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with Multiple Decoration Characters\nDESCRIPTION: Demonstrates warning comments with multiple decorative characters (slashes and asterisks) that are ignored during matching.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-warning-comments.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-warning-comments: [\"error\", { \"decoration\": [\"/\", \"*\"] }]*/\n\n////// TODO decorative slashes and whitespace are ignored //////\n//***** todo decorative asterisks are also ignored *****//\n/**\n * TODO new lines are also ignored in block comments.\n */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Element Formatting with Combined 'multiline' and 'minItems' Options in JavaScript\nDESCRIPTION: Examples of incorrectly formatted arrays that violate both 'multiline' and 'minItems' options together.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", { \"multiline\": true, \"minItems\": 3 }]*/\n\nvar c = [1,\n2];\nvar d = [1, 2, 3];\nvar e = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Generator Function Examples\nDESCRIPTION: Shows various configurations for handling generator functions with different naming requirements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/func-names.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint func-names: [\"error\", \"always\", { \"generators\": \"never\" }]*/\n\nconst foo = bar(function *() {});\n```\n\n----------------------------------------\n\nTITLE: Basic Arrow Function Misuse Example\nDESCRIPTION: Demonstrates a common typo where an arrow function is used instead of a comparison operator in a conditional statement\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-arrow-condition.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This is probably a typo\nif (a => 1) {}\n// And should instead be\nif (a >= 1) {}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Dangling Underscores in Array Destructuring in JavaScript\nDESCRIPTION: Example of using the 'allowInArrayDestructuring' option set to false to disallow dangling underscores in variable names assigned by array destructuring.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-underscore-dangle.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-underscore-dangle: [\"error\", { \"allowInArrayDestructuring\": false }]*/\n\nconst [_foo, _bar] = list;\nconst [foo_, ..._qux] = list;\nconst [foo, [bar, _baz]] = list;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of return, throw, and case Keywords\nDESCRIPTION: Examples of code that violates the space-return-throw-case rule by not including spaces after the keywords. This includes throwing an object without a space, returning a negated value without a space, and using a case statement without a space.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-return-throw-case.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/*eslint space-return-throw-case: \"error\"*/\n\nthrow{a:0}\n\nfunction f(){ return-a; }\n\nswitch(a){ case'a': break; }\n```\n\n----------------------------------------\n\nTITLE: Suppressing Ignored File Warnings\nDESCRIPTION: Example showing how to suppress warnings for ignored files when using --max-warnings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n--no-warn-ignored --max-warnings 0 ignored-file.js\n```\n\n----------------------------------------\n\nTITLE: Correct Function Declaration Indentation in JavaScript\nDESCRIPTION: Example of correctly indented function declaration with the indent-legacy rule set to 2 spaces for body and parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }]*/\n\nfunction foo(bar,\n    baz,\n    qux) {\n  qux();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Octal Escape Usage\nDESCRIPTION: Example showing incorrect usage of octal escape sequence that will trigger the rule error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-octal-escape.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-octal-escape: \"error\"*/\n\nconst foo = \"Copyright \\251\";\n```\n\n----------------------------------------\n\nTITLE: Including Language Switcher Component\nDESCRIPTION: Demonstrates how to include a language switcher component using Jekyll include syntax\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/language-switcher.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Language Switcher\n---\n\n{% include 'components/language-switcher.html' %}\n```\n\n----------------------------------------\n\nTITLE: Using reserved words as unquoted property names (incorrect)\nDESCRIPTION: This code shows improper usage of reserved words as unquoted property names in object literals, which would cause errors in ECMAScript 3 environments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-reserved-keys.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar values = {\n    enum: [\"red\", \"blue\", \"green\"]  // throws an error in ECMAScript 3\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Object Expression Indentation in JavaScript\nDESCRIPTION: Example of incorrectly indented object expression with the indent-legacy rule set to 1 space indentation.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"ObjectExpression\": 1 }]*/\n\nvar foo = {\n    bar: 1,\nbaz: 2,\n      qux: 3\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing padded-blocks with 'blocks: always' option in JavaScript\nDESCRIPTION: Examples of incorrect code when using the object option that requires padding only in block statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"always\" }]*/\n\nif (a) {\n    b();\n}\n\nif (a) { b(); }\n\nif (a)\n{\n    b();\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n\nif (a) {\n    // comment\n    b();\n\n}\n\nclass C {\n\n    static {\n        a();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Checking ESLint Feature Flags in JavaScript\nDESCRIPTION: This snippet shows how to use the eslint.hasFlag() method to determine if a given feature flag is set in ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nif (eslint.hasFlag(\"x_feature\")) {\n\t// handle flag\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Exceeding Max Lines with Skip Comments Option (JavaScript)\nDESCRIPTION: Example of code that violates the max-lines rule with the skipComments option set to true and a max value of 2. The code exceeds 2 non-comment lines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/max-lines.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint max-lines: [\"error\", {\"max\": 2, \"skipComments\": true}]*/\n// a comment\nlet a,\n    b,\n    c;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Export Syntax in Script Context\nDESCRIPTION: An example of incorrect syntax using 'export default' in a script context, which is not allowed.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/bad-examples.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Examples with 'consecutive' Option\nDESCRIPTION: Examples of code that violates the one-var rule when configured with the 'consecutive' option, which requires consecutive variable declarations to be combined.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/one-var.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint one-var: [\"error\", \"consecutive\"]*/\n\nfunction foo1() {\n    var bar;\n    var baz;\n}\n\nfunction foo2(){\n    var bar = 1;\n    var baz = 2;\n\n    qux();\n\n    var qux = 3;\n    var quux;\n}\n\nclass C {\n    static {\n        var foo;\n        var bar;\n        let baz;\n        let qux;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Error Output\nDESCRIPTION: Example of ESLint's error output when running the custom rule on test code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n/<path-to-directory>/eslint-custom-rule-example/example.js\n  8:11  error  Value other than \"bar\" assigned to `const foo`. Unexpected value: baz  example/enforce-foo-bar\n\n✖ 1 problem (1 error, 0 warnings)\n  1 error and 0 warnings potentially fixable with the `--fix` option.\n```\n\n----------------------------------------\n\nTITLE: Exit on Fatal Parsing Errors\nDESCRIPTION: Example showing how to make ESLint exit with code 2 on fatal parsing errors.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n--exit-on-fatal-error file.js\n```\n\n----------------------------------------\n\nTITLE: Correct Code Example for Tab Indentation\nDESCRIPTION: Demonstrates correctly indented code when the indent-legacy rule is configured to use tabs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", \"tab\"]*/\n\nif (a) {\n\tb=c;\n\tfunction foo(d) {\n\t\te=f;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with allowForLoopAfterthoughts Option\nDESCRIPTION: Examples of code that violates the no-plusplus rule even with allowForLoopAfterthoughts enabled, showing improper placement of increment/decrement operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-plusplus.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }]*/\n\nfor (i = 0; i < l; j = i++) {\n    doSomething(i, j);\n}\n\nfor (i = l; i--;) {\n    doSomething(i);\n}\n\nfor (i = 0; i < l;) i++;\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of object-curly-spacing with 'never' option in JavaScript\nDESCRIPTION: Examples of code that violate the 'object-curly-spacing' rule when set to 'never', showing incorrect spacing inside curly braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint object-curly-spacing: [\"error\", \"never\"]*/\n\nvar obj = { 'foo': 'bar' };\nvar obj = {'foo': 'bar' };\nvar obj = { baz: {'foo': 'qux'}, bar};\nvar obj = {baz: { 'foo': 'qux'}, bar};\nvar {x } = y;\nimport { foo } from 'bar';\n```\n\n----------------------------------------\n\nTITLE: Running ESLint with Custom Configuration File via CLI\nDESCRIPTION: This command demonstrates how to run ESLint with a specific configuration file using the --config flag to specify the location of the configuration file to use for linting.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\neslint -c myconfig.json myfiletotest.js\n```\n\n----------------------------------------\n\nTITLE: Legacy Function-based ESLint Rule Definition\nDESCRIPTION: The deprecated function-based format for defining ESLint rules. In ESLint v8.0.0, rules written in this format cannot provide fixes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (context) {\n\t// your rule\n};\n```\n\n----------------------------------------\n\nTITLE: Creating ESLint Config File (Shell Command)\nDESCRIPTION: Shell command to create a new ESLint configuration file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ntouch eslint.config.js\n```\n\n----------------------------------------\n\nTITLE: Correct Array Bracket Spacing with 'arraysInArrays' Exception in JavaScript\nDESCRIPTION: Examples of code that would be correct when the 'arraysInArrays' exception is set to false with the 'always' option, showing nested arrays with proper spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"arraysInArrays\": false }]*/\n\nvar arr = [[ 1, 2 ], 2, 3, 4 ];\nvar arr = [[ 1, 2 ], 2, [ 3, 4 ]];\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of 'this' in TypeScript\nDESCRIPTION: Examples of TypeScript code that violate the 'no-invalid-this' rule. These snippets show invalid uses of 'this' in various contexts, including functions and class fields.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-this.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint no-invalid-this: \"error\"*/\n\nfunction foo(bar: string) {\n    this.prop;\n    console.log(bar)\n}\n\n/** @this Obj */\nfoo(function() {\n    console.log(this);\n    z(x => console.log(x, this));\n});\n\nfunction foo() {\n  class C {\n    accessor [this.a] = foo;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Allow Pattern Usage\nDESCRIPTION: Example showing incorrect usage with allowPattern option for snake case properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-notation.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint dot-notation: [\"error\", { \"allowPattern\": \"^[a-z]+(_[a-z]+)+$\" }]*/\n\nconst data = {};\ndata[\"fooBar\"] = 42;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Object Expression Property Alignment in JavaScript\nDESCRIPTION: Example of incorrectly aligned object expression properties with the indent-legacy rule set to 'first' property alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, {\"ObjectExpression\": \"first\"}]*/\n\nvar foo = { bar: 1,\n  baz: 2 };\n```\n\n----------------------------------------\n\nTITLE: Correct Function Expression Indentation in JavaScript\nDESCRIPTION: Example of correctly indented function expression with the indent-legacy rule set to 2 spaces for body and parameters.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", 2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }]*/\n\nvar foo = function(bar,\n    baz,\n    qux) {\n  qux();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Individual ESLint Test Files with Mocha CLI\nDESCRIPTION: Command to run a specific test file using the Mocha CLI through npm. This is useful for quickly testing specific functionality.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/tests.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:cli tests/lib/rules/no-undef.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of importNamePattern with Multiple Patterns\nDESCRIPTION: Example showing ESLint detecting violations when importing names that match patterns 'is' or 'has' from foo modules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_34\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"foo/*\"],\n    importNamePattern: '^(is|has)',\n    message: \"Use 'is*' and 'has*' functions from baz/bar instead\"\n}]}]*/\n\nimport { isSomething, hasSomething } from 'foo/bar';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with 'never' and 'empty' Exception\nDESCRIPTION: Examples of code that would be flagged as incorrect when using the 'never' option with an exception for empty parentheses.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Using Environment from a Plugin in JSON Configuration\nDESCRIPTION: This snippet demonstrates how to use an environment provided by a plugin in an ESLint JSON configuration file by specifying the plugin in the 'plugins' array.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [\"example\"],\n\t\"env\": {\n\t\t\"example/custom\": true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Plugin Rules on a Specific Line\nDESCRIPTION: Shows how to disable plugin rules for a specific line using the plugin name combined with the rule name. This format is required for all plugin rule references.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfoo(); // eslint-disable-line example/rule-name\nfoo(); /* eslint-disable-line example/rule-name */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Example for Tab Indentation\nDESCRIPTION: Shows an example of incorrectly indented code when the indent-legacy rule is configured to use tabs.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/indent-legacy.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint indent-legacy: [\"error\", \"tab\"]*/\n\nif (a) {\n     b=c;\nfunction foo(d) {\n           e=f;\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Replacement Rule List Macro in HTML\nDESCRIPTION: This snippet demonstrates how to import and use the replacement rule list macro in an HTML template. It shows the syntax for importing the macro and calling it with a ReplacedByInfo object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/rule-list.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- import the macro -->\n{% from 'components/rule-list.macro.html' import replacementRuleList %}\n\n<!-- use the macro -->\n{{ replacementRuleList({ specifiers: [{ rule: { name: 'global-require', url:\n'...' }, plugin: { name: '@eslint-comunnity/eslint-plugin-n', url: '...' } }] })\n}}\n```\n\n----------------------------------------\n\nTITLE: Correct usages with 'as-needed' option\nDESCRIPTION: Examples of code that would be considered correct when using the 'as-needed' option, demonstrating when omitting the radix 10 is appropriate.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/radix.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint radix: [\"error\", \"as-needed\"]*/\n\nconst num = parseInt(\"071\");\n\nconst num1 = parseInt(\"071\", 8);\n\nconst num2 = parseFloat(someValue);\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter metadata defining the rule title and type for documentation purposes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-blacklist.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: id-blacklist\nrule_type: suggestion\n---\n```\n\n----------------------------------------\n\nTITLE: Incorrect Number Precision Examples in JavaScript\nDESCRIPTION: Examples of number literals that would lose precision when converted to JavaScript Numbers due to exceeding the safe integer limits or floating-point precision limits.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-loss-of-precision.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-loss-of-precision: \"error\"*/\n\nconst a = 9007199254740993\nconst b = 5123000000000000000000000000001\nconst c = 1230000000000000000000000.0\nconst d = .1230000000000000000000000\nconst e = 0X20000000000001\nconst f = 0X2_000000000_0001;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Chained Method Calls - Single Line Example\nDESCRIPTION: Example of chained method calls written on a single line, demonstrating less readable code.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-per-chained-call.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.select(\"body\").selectAll(\"p\").data([4, 8, 15, 16, 23, 42 ]).enter().append(\"p\").text(function(d) { return \"I'm number \" + d + \"!\"; });\n```\n\n----------------------------------------\n\nTITLE: Disabling Multiple Rules on a Specific Line\nDESCRIPTION: Demonstrates how to disable multiple ESLint rules for a specific line using various comment formats. This allows for bypassing multiple rules for exceptional cases.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"foo\"); // eslint-disable-line no-alert, quotes, semi\n\n// eslint-disable-next-line no-alert, quotes, semi\nalert(\"foo\");\n\nalert(\"foo\"); /* eslint-disable-line no-alert, quotes, semi */\n\n/* eslint-disable-next-line no-alert, quotes, semi */\nalert(\"foo\");\n\n/* eslint-disable-next-line\n  no-alert,\n  quotes,\n  semi\n*/\nalert(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript Usage Examples\nDESCRIPTION: Examples of JavaScript code that would trigger the no-restricted-syntax rule violations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-syntax.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-restricted-syntax: [\"error\", \"FunctionExpression\", \"WithStatement\", \"BinaryExpression[operator='in']\"] */\n\nwith (me) {\n    dontMess();\n}\n\nconst doSomething = function () {};\n\nfoo in bar;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of JSX Inline Comments\nDESCRIPTION: Examples of JSX code that violates the no-inline-comments rule by having comments on the same line as other code or within expression braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inline-comments.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/*eslint no-inline-comments: \"error\"*/\n\nconst foo = <div>{ /* On the same line with other code */ }<h1>Some heading</h1></div>;\n\nconst bar = (\n    <div>\n    {   // These braces are not just for the comment, so it can't be on the same line\n        baz\n    }\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples for the 'functions' Option\nDESCRIPTION: Examples showing invalid code when the rule is configured with the 'functions' option, which only disallows unnecessary parentheses around function expressions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-extra-parens: [\"error\", \"functions\"] */\n\n((function foo() {}))();\n\nvar y = (function () {return 1;});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Element Formatting with 'never' Option in JavaScript\nDESCRIPTION: Examples of incorrectly formatted arrays that violate the 'never' option, which disallows line breaks between array elements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint array-element-newline: [\"error\", \"never\"]*/\n\nvar c = [\n    1,\n    2\n];\nvar d = [\n    1,\n    2,\n    3\n];\nvar e = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Integration File\nDESCRIPTION: Shell command to create the main integration file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntouch example-eslint-integration.js\n```\n\n----------------------------------------\n\nTITLE: Implementing padded-blocks with 'blocks: never' option in JavaScript\nDESCRIPTION: Examples of incorrect code when using the object option that disallows padding in block statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/padded-blocks.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"never\" }]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n\nclass C {\n    static {\n\n        a();\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Missing Line After Block Comment (JavaScript)\nDESCRIPTION: Example of incorrect code that violates the rule by not having an empty line after a block comment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"afterBlockComment\": true }]*/\n\nvar night = \"long\";\n\n/* what a great and wonderful day */\nvar day = \"great\"\n```\n\n----------------------------------------\n\nTITLE: Converting multiple JSCS configuration files using Polyjuice\nDESCRIPTION: This command combines multiple JSCS configuration files and converts them into a single ESLint configuration file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npolyjuice --jscs .jscsrc.json ./foo/.jscsrc.json > .eslintrc.json\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration - Never Strict\nDESCRIPTION: ESLint configuration that warns whenever 'use strict' is used in the global scope.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/global-strict.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"global-strict\": [\"error\", \"never\"]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Window Global Usage\nDESCRIPTION: Example of incorrect eval usage with window global variable\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eval.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-eval: \"error\"*/\n/*global window*/\n\nwindow.eval(\"const a = 0\");\n```\n\n----------------------------------------\n\nTITLE: Shell Error Output Example\nDESCRIPTION: Shows how the rule reports multiple errors for mixed operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-operators.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n1:13  Unexpected mix of '&&' and '||'. (no-mixed-operators)\n1:18  Unexpected mix of '&&' and '||'. (no-mixed-operators)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Exceptions Configuration\nDESCRIPTION: Example of correct comma style when using exceptions for ArrayExpression and ObjectExpression.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-style.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint comma-style: [\"error\", \"first\", { \"exceptions\": { \"ArrayExpression\": true, \"ObjectExpression\": true } }]*/\n\nvar o = {fst:1,\n         snd: [1,\n               2]}\n  , a = [];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage with Default 'ignoreGlobals' Option\nDESCRIPTION: Examples of code that violate the camelcase rule with the default { \"ignoreGlobals\": false } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: [\"error\", {ignoreGlobals: false}]*/\n/* global no_camelcased */\n\nconst foo = no_camelcased;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Logical Assignment Operators in JavaScript\nDESCRIPTION: Examples of code that violate the 'logical-assignment-operators' rule when set to 'always'. These expressions can be shortened using logical assignment operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/logical-assignment-operators.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint logical-assignment-operators: [\"error\", \"always\"]*/\n\na = a || b\na = a && b\na = a ?? b\na || (a = b)\na && (a = b)\na ?? (a = b)\na = a || b || c\na = a && b && c\na = a ?? b ?? c\n```\n\n----------------------------------------\n\nTITLE: Incorrect Switch Statement Examples with Duplicate Cases\nDESCRIPTION: Examples showing incorrect usage of switch statements where case clauses contain duplicate test expressions, which is likely a programming error.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-case.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-duplicate-case: \"error\"*/\n\nconst a = 1,\n    one = 1;\n\nswitch (a) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 1:         // duplicate test expression\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case one:\n        break;\n    case 2:\n        break;\n    case one:         // duplicate test expression\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case \"1\":\n        break;\n    case \"2\":\n        break;\n    case \"1\":         // duplicate test expression\n        break;\n    default:\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Rules for an Entire File\nDESCRIPTION: Demonstrates how to disable specific ESLint rules for an entire file. This is useful when certain rules need to be bypassed for legacy code or special cases.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable no-alert */\n\nalert(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git for ESLint Contribution\nDESCRIPTION: Command to create a new branch for working on an ESLint issue. The branch name should be descriptive and ideally reference the issue number.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b issue1234\n```\n\n----------------------------------------\n\nTITLE: ESLint no-path-concat Rule Examples - Correct Usage\nDESCRIPTION: Example showing correct code that would not trigger the no-path-concat ESLint rule, using a regular variable instead of __dirname or __filename.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-path-concat.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-path-concat: \"error\"*/\n\nvar fullPath = dirname + \"/foo.js\";\n```\n\n----------------------------------------\n\nTITLE: Using Feature Flags\nDESCRIPTION: Example showing how to enable specific feature flags in ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n--flag x_feature file.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Starred-Block Option\nDESCRIPTION: Examples of incorrect multiline comment formatting when using the starred-block option, which requires aligned * characters and proper spacing.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-comment-style.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// this line\n// calls foo()\nfoo();\n\n/* this line\ncalls foo() */\nfoo();\n\n/* this comment\n * is missing a newline after /*\n */\n\n/*\n * this comment\n * is missing a newline at the end */\n\n/*\n* the star in this line should have a space before it\n */\n\n/*\n * the star on the following line should have a space before it\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring lines-around-comment with beforeLineComment and allowObjectStart in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with beforeLineComment and allowObjectStart options enabled, which allows comments at the start of object literals without requiring a blank line before them.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true, \"allowObjectStart\": true }]*/\n\nvar foo = {\n    // what a great and wonderful day\n    day: \"great\"\n};\n\nconst {\n    // what a great and wonderful day\n    foo: someDay\n} = {foo: \"great\"};\n\nconst {\n    // what a great and wonderful day\n    day\n} = {day: \"great\"};\n```\n\n----------------------------------------\n\nTITLE: Complete ESLint v1.0.0 Configuration with Legacy Rules\nDESCRIPTION: Comprehensive ESLint configuration that replicates most of the default behavior from 0.x versions, including all previously enabled rules with their specific settings.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-1.0.0.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\",\n\t\"rules\": {\n\t\t\"no-alert\": 2,\n\t\t\"no-array-constructor\": 2,\n\t\t\"no-caller\": 2,\n\t\t\"no-catch-shadow\": 2,\n\t\t\"no-empty-label\": 2,\n\t\t\"no-eval\": 2,\n\t\t\"no-extend-native\": 2,\n\t\t\"no-extra-bind\": 2,\n\t\t\"no-implied-eval\": 2,\n\t\t\"no-iterator\": 2,\n\t\t\"no-label-var\": 2,\n\t\t\"no-labels\": 2,\n\t\t\"no-lone-blocks\": 2,\n\t\t\"no-loop-func\": 2,\n\t\t\"no-multi-spaces\": 2,\n\t\t\"no-multi-str\": 2,\n\t\t\"no-native-reassign\": 2,\n\t\t\"no-new\": 2,\n\t\t\"no-new-func\": 2,\n\t\t\"no-new-object\": 2,\n\t\t\"no-new-wrappers\": 2,\n\t\t\"no-octal-escape\": 2,\n\t\t\"no-process-exit\": 2,\n\t\t\"no-proto\": 2,\n\t\t\"no-return-assign\": 2,\n\t\t\"no-script-url\": 2,\n\t\t\"no-sequences\": 2,\n\t\t\"no-shadow\": 2,\n\t\t\"no-shadow-restricted-names\": 2,\n\t\t\"no-spaced-func\": 2,\n\t\t\"no-trailing-spaces\": 2,\n\t\t\"no-undef-init\": 2,\n\t\t\"no-underscore-dangle\": 2,\n\t\t\"no-unused-expressions\": 2,\n\t\t\"no-use-before-define\": 2,\n\t\t\"no-with\": 2,\n\t\t\"camelcase\": 2,\n\t\t\"comma-spacing\": 2,\n\t\t\"consistent-return\": 2,\n\t\t\"curly\": [2, \"all\"],\n\t\t\"dot-notation\": [2, { \"allowKeywords\": true }],\n\t\t\"eol-last\": 2,\n\t\t\"no-extra-parens\": [2, \"functions\"],\n\t\t\"eqeqeq\": 2,\n\t\t\"key-spacing\": [2, { \"beforeColon\": false, \"afterColon\": true }],\n\t\t\"new-cap\": 2,\n\t\t\"new-parens\": 2,\n\t\t\"quotes\": [2, \"double\"],\n\t\t\"semi\": 2,\n\t\t\"semi-spacing\": [2, { \"before\": false, \"after\": true }],\n\t\t\"space-infix-ops\": 2,\n\t\t\"space-return-throw-case\": 2,\n\t\t\"space-unary-ops\": [2, { \"words\": true, \"nonwords\": false }],\n\t\t\"strict\": [2, \"function\"],\n\t\t\"yoda\": [2, \"never\"]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Class Assignment - Variable Reference\nDESCRIPTION: Shows valid reassignment of a variable holding a class expression.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-class-assign.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-class-assign: \"error\"*/\n\nlet A = class A { }\nA = 0; // A is a variable.\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Rules in YAML Configuration\nDESCRIPTION: Shows how to configure rules from plugins in a YAML configuration file. This format allows for more readable configurations of plugin rules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\nplugins:\n    - plugin1\nrules:\n    eqeqeq: 0\n    curly: error\n    quotes:\n        - error\n        - \"double\"\n    plugin1/rule1: error\n```\n\n----------------------------------------\n\nTITLE: Enabling Statistics Output\nDESCRIPTION: Example showing how to output detailed performance statistics in JSON format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\n--stats --format json file.js\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Button Macro in HTML/Nunjucks Templates\nDESCRIPTION: This snippet demonstrates how to import the button macro from the components directory and use it to create both action buttons and link buttons. The button macro accepts parameters for behavior, type, text, and URL to customize appearance and functionality.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/buttons.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- import the macro in the page(s) you want to render the button(s) in -->\n{% from 'components/button.macro.html' import button %}\n\n<!-- use the macro -->\n\n{ { button({ behavior: \"action\", type: \"primary\", text: \"Do Something\" }) } }\n\n<!-- defaults to behavior: link -->\n{ { button({ type: \"primary\", text: \"Go somewhere\", url: \"/url/to/somewhere/\" })\n} }\n```\n\n----------------------------------------\n\nTITLE: Correct Console Usage with ESLint\nDESCRIPTION: Example of allowed console usage with a custom Console object\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-console.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-console: \"error\" */\n\n// custom console\nConsole.log(\"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Reassigning Global Objects in JavaScript\nDESCRIPTION: Examples of code that violate the no-native-reassign rule by reassigning values to read-only global variables.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-native-reassign.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-native-reassign: \"error\"*/\n\nObject = null\nundefined = 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-native-reassign: \"error\"*/\n/*global window:readonly*/\n\nwindow = {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Spacing with 'Never' Option in JavaScript\nDESCRIPTION: Examples of code that violate the 'space-before-keywords' rule with the 'never' option. It shows unwanted spaces before keywords like 'else', 'while', 'finally', and 'catch'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-keywords.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-keywords: [\"error\", \"never\"]*/\n\nif (foo) {\n    // ...\n} else {}\n\ndo {\n\n}\nwhile (foo)\n\ntry {} finally {}\n\ntry {} catch(e) {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect example with Property exception disabled\nDESCRIPTION: Example showing how disabling the Property exception causes conflicts with the key-spacing rule's alignment options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-spaces.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-multi-spaces: [\"error\", { exceptions: { \"Property\": false } }]*/\n/*eslint key-spacing: [\"error\", { align: \"value\" }]*/\n\nvar obj = {\n    first:  \"first\",\n    second: \"second\"\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of spaced-line-comment with Exceptions Configuration in JavaScript\nDESCRIPTION: Example showing incorrect code with the 'always' option and exceptions for '-' and '+' characters. The comment pattern doesn't match the exceptions, violating the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-line-comment.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// When [\"always\",{\"exceptions\":[\"-\",\"+\"]}]\n//------++++++++\n// Comment block\n//------++++++++\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint and Configuration Package\nDESCRIPTION: Commands to install ESLint and the ESLint team configuration package using npm\nSOURCE: https://github.com/eslint/eslint/blob/main/packages/eslint-config-eslint/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install eslint --save-dev\nnpm install eslint-config-eslint --save-dev\n```\n\n----------------------------------------\n\nTITLE: SourceCode Parsing with BOM Handling\nDESCRIPTION: Proper way to parse source code with BOM handling in ESLint 2.0.0\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar ast = yourParser.parse(text.replace(/^\\uFEFF/, \"\"), options);\nvar sourceCode = new SourceCode(text, ast);\n```\n\n----------------------------------------\n\nTITLE: Displaying Previous Major Line Release Parameters Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table illustrating the release parameters for releasing a new version of the previous major line. It specifies the RELEASE_TYPE options for both 'eslint-js Release' and 'eslint Release' jobs on Jenkins.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/maintain/manage-releases.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| **HEAD Version** | **Previous Major Line Version** | **Desired Next Version** | **`eslint-js Release`<br>`RELEASE_TYPE`** |\n| :--------------: | :-----------------------------: | :----------------------: | :---------------------------------------: |\n| `10.0.0-alpha.0` |            `9.25.0`             |         `9.25.1`         |                  `patch`                  |\n| `10.0.0-alpha.0` |            `9.25.0`             |         `9.26.0`         |                  `minor`                  |\n|     `10.0.0`     |            `9.25.0`             |         `9.25.1`         |            `maintenance.patch`            |\n|     `10.0.0`     |            `9.25.0`             |         `9.26.0`         |            `maintenance.minor`            |\n\n| **HEAD Version** | **Previous Major Line Version** | **Desired Next Version** | **`eslint Release`<br>`RELEASE_TYPE`** |\n| :--------------: | :-----------------------------: | :----------------------: | :------------------------------------: |\n| `10.0.0-alpha.0` |            `9.25.0`             |   `9.25.1` or `9.26.0`   |                `latest`                |\n|     `10.0.0`     |            `9.25.0`             |   `9.25.1` or `9.26.0`   |             `maintenance`              |\n```\n\n----------------------------------------\n\nTITLE: Accessing ESLint Result Properties in a Formatter\nDESCRIPTION: Sample of accessing different properties available in the ESLint results object. This shows how to examine rule violations, error counts, and other metadata provided to formatters.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/ignored-paths/ignore-pattern/subdir/ignore-me.txt#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(results, context) {\n    // results = [{\n    //     filePath: \"\",\n    //     messages: [{\n    //         ruleId: \"\",\n    //         severity: 0,\n    //         message: \"\",\n    //         line: 0,\n    //         column: 0,\n    //         nodeType: \"\",\n    //         messageId: \"\",\n    //         endLine: 0,\n    //         endColumn: 0,\n    //         fix: { range: [0, 0], text: \"\" }\n    //     }],\n    //     suppressedMessages: [{}], // Same format as messages\n    //     errorCount: 0,\n    //     fatalErrorCount: 0,\n    //     warningCount: 0,\n    //     fixableErrorCount: 0,\n    //     fixableWarningCount: 0,\n    //     source: \"\",\n    //     output: \"\"\n    // }];\n\n    // context is an object containing additional information\n    // context = {\n    //     cwd: \"\", // Current working directory\n    //     maxWarningsExceeded: { // Present if maxWarnings CLI option is used\n    //         maxWarnings: 10, // The value of maxWarnings\n    //         foundWarnings: 12 // Number of found warnings\n    //     },\n    //     rulesMeta: { // Metadata for all rules that generated messages\n    //         \"rule-id\": {\n    //             type: \"\",\n    //             docs: {\n    //                 description: \"\",\n    //                 category: \"\",\n    //                 recommended: false,\n    //                 url: \"\"\n    //             },\n    //             fixable: \"\",\n    //             messages: {}\n    //         }\n    //     }\n    // }\n\n    // Return a string in the format you'd like\n    return \"\";\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Code Examples with Default Options\nDESCRIPTION: Examples of code that pass the no-irregular-whitespace rule with default settings. These examples show that irregular whitespace is allowed within string literals by default.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-irregular-whitespace.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-irregular-whitespace: \"error\"*/\n\nconst thing = function() {\n    return ' <NBSP>thing';\n}\n\nconst foo = function() {\n    return '​<ZWSP>thing';\n}\n\nconst bar = function() {\n    return 'th <NBSP>ing';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring no-multi-spaces for ESLint v4.0.0\nDESCRIPTION: Configuration that mimics the default no-multi-spaces rule behavior from ESLint v3.x by explicitly ignoring end-of-line comments which are now checked by default.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-4.0.0.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"no-multi-spaces\": [\"error\", { \"ignoreEOLComments\": true }]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage with restricted paths configuration (JavaScript)\nDESCRIPTION: Example of code that violates the rule by importing a module restricted through the 'paths' configuration option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-modules: [\"error\", {\"paths\": [\"cluster\"] }]*/\n\nconst cluster = require('cluster');\n```\n\n----------------------------------------\n\nTITLE: Force Pushing After Rebasing an ESLint Pull Request\nDESCRIPTION: Command to force push your branch after resolving merge conflicts during a rebase, updating your pull request with the resolved changes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin issue1234 -f\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Code Examples\nDESCRIPTION: Examples of TypeScript-specific expressions that would be considered valid according to the rule's TypeScript support guidelines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint no-unused-expressions: \"error\" */\n\n// Type expressions wrapping function calls are allowed\nfunction getSet() {\n    return Set;\n}\ngetSet()<number>;\ngetSet() as Set<unknown>;\ngetSet()!;\n\n// Directives in modules and namespaces\nmodule Foo {\n    'use strict';\n    'hello world';\n}\n\nnamespace Bar {\n    'use strict';\n    export class Baz {}\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to ESLint Codebase\nDESCRIPTION: Commands to stage and commit changes made to the ESLint codebase. This is part of the pull request workflow after making code changes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit add -A\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Your ESLint Fork\nDESCRIPTION: Command to push your local branch to your fork on GitHub in preparation for creating a pull request to the main ESLint repository.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin issue1234\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Separate-Lines Option and JSDoc\nDESCRIPTION: Example of correct JSDoc comment formatting using separate-lines option with checkJSDoc enabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-comment-style.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// I am a JSDoc comment\n// and I'm not allowed\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Correct usage with imported module in JavaScript\nDESCRIPTION: Example of code that properly uses 'event' as an imported module rather than a global variable, which complies with the no-restricted-globals rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-globals.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/*global event*/\n/*eslint no-restricted-globals: [\"error\", \"event\"]*/\n\nimport event from \"event-module\";\n```\n\n----------------------------------------\n\nTITLE: Detailed Rules Configuration\nDESCRIPTION: Configuration with specific rule options for maintaining ESLint 1.x behavior\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"eslint:recommended\",\n\t\"rules\": {\n\t\t\"no-multiple-empty-lines\": [2, { \"max\": 2 }],\n\t\t\"func-style\": [2, \"declaration\"]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: ignoreClassesWithImplements Option - Incorrect Example (public-fields)\nDESCRIPTION: TypeScript example showing a class with private and protected methods that don't use 'this', which violates the rule when ignoreClassesWithImplements is 'public-fields'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"ignoreClassesWithImplements\": \"public-fields\" }] */\n\ninterface Base {\n    method(): void;\n}\n\nclass Derived implements Base {\n    method() {}\n    property = () => {};\n\n    private privateMethod() {}\n    private privateProperty = () => {};\n\n    protected protectedMethod() {}\n    protected protectedProperty = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Strict Mode Configuration Example\nDESCRIPTION: Example of incorrect code when using the 'global' option. The strict mode directive is missing from the global scope, which is required with this configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint strict: [\"error\", \"global\"]*/\n\nfunction foo() {\n}\n```\n\n----------------------------------------\n\nTITLE: Including Social Icons Component using Liquid Template\nDESCRIPTION: This snippet demonstrates how to include a social icons component in a web page using Liquid templating syntax. The component is referenced from an external file 'components/social-icons.html'.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/social-icons.md#2025-04-14_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include 'components/social-icons.html' %}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration in Rust\nDESCRIPTION: Demonstrates correct variable declaration syntax in Rust, showing multiple declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/bad-examples.md#2025-04-14_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nconst foo = \"bar\";\n\nconst foo = \"baz\";\n```\n\n----------------------------------------\n\nTITLE: Basic Ternary Operator Usage in JavaScript\nDESCRIPTION: Shows a basic example of a ternary operator being used to conditionally assign a value to a variable.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-ternary.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = isBar ? baz : qux;\n```\n\n----------------------------------------\n\nTITLE: Running ESLint Tests Before Submission\nDESCRIPTION: Command to run all ESLint tests to ensure your changes don't break existing functionality. All tests must pass before submitting a pull request.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Hero Component in Liquid Template\nDESCRIPTION: Imports a hero macro from a components directory and instantiates it with title and supporting text for the versions page.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/pages/versions.md#2025-04-14_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{%- from 'components/hero.macro.html' import hero %}\n\n{{ hero({\n    title: \"ESLint Versions\",\n    supporting_text: \"Choose the documentation version\"\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Customizing ESLint Suppressions File Location\nDESCRIPTION: Command to change the location of the suppressions file using the --suppressions-location argument. This must be provided both when suppressing violations and when running ESLint.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/suppressions.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neslint --suppressions-location .github/.eslint-suppressions\n```\n\n----------------------------------------\n\nTITLE: Force Pushing to Your ESLint Fork\nDESCRIPTION: Command to force push to your fork when references are old, typically after rebasing. This ensures your branch on GitHub reflects your local changes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit push -f origin issue1234\n```\n\n----------------------------------------\n\nTITLE: Using prefer-reflect Rule with 'call' Exception in JavaScript\nDESCRIPTION: Demonstrates the usage of prefer-reflect rule with an exception for the 'call' method, allowing both Reflect.apply and Function.prototype.call.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-reflect.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"call\"] }]*/\n\n// in addition to Reflect.apply(...):\nmyFunction.call(undefined, arg);\nmyFunction.call(null, arg);\nobj.myMethod.call(obj, arg);\nobj.myMethod.call(other, arg);\n```\n\n----------------------------------------\n\nTITLE: Global Strict Mode Usage Example\nDESCRIPTION: Example of using strict mode globally in a file with a function declaration. This pattern is valid with the 'always' option but warns with 'never' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/global-strict.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\nfunction foo() {\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Function-Level Strict Mode Examples\nDESCRIPTION: Examples of using strict mode within function scope instead of global scope. These patterns are valid with the 'never' option but are problems with the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/global-strict.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n    \"use strict\";\n\n    return true;\n}\n\n(function() {\n    \"use strict\";\n\n    // other code\n}());\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of camelcase Rule with Default 'ignoreDestructuring' Option\nDESCRIPTION: Examples of code that violate the camelcase rule with the default { \"ignoreDestructuring\": false } option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint camelcase: \"error\"*/\n\nconst { category_id } = query;\n\nconst { category_name = 1 } = query;\n\nconst { category_id: category_title } = query;\n\nconst { category_id: category_alias } = query;\n\nconst { category_id: categoryId, ...other_props } = query;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of spaced-line-comment with 'always' Configuration in JavaScript\nDESCRIPTION: Example showing incorrect code when the rule is configured with 'always' option. Line comments without whitespace after // violate the rule configuration.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/spaced-line-comment.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//When [\"always\"]\n//This is a comment with no whitespace at the beginning\nvar foo = 5;\n```\n\n----------------------------------------\n\nTITLE: Configuring Exceptions for no-native-reassign Rule in JSON\nDESCRIPTION: JSON configuration for the no-native-reassign rule, demonstrating how to specify exceptions for allowed reassignments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-native-reassign.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-native-reassign\": [\"error\", {\"exceptions\": [\"Object\"]}]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSDoc with matchDescription ESLint Rule\nDESCRIPTION: Example of code that fails the valid-jsdoc rule when the matchDescription option is set to enforce that all JSDoc descriptions match a regex pattern (.+). The function lacks a description, which violates the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-jsdoc.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint valid-jsdoc: [\"error\", { \"matchDescription\": \".+\" }]*/\n\n// missing function description\n/**\n * @param {string} name Whom to greet.\n * @returns {void}\n */\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code with 'anywhere' Location Configuration\nDESCRIPTION: Shows examples of comments that pass the rule check even with 'anywhere' location, as they don't contain the exact matching terms.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-warning-comments.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-warning-comments: [\"error\", { \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" }]*/\n\n// This is to do\n// even not any other    term\n// any other terminal\n/*\n * The same goes for block comments\n * with any other interesting term\n * or fix me this\n */\n```\n\n----------------------------------------\n\nTITLE: Cases Newly Reported by no-implicit-coercion Rule\nDESCRIPTION: Examples of code patterns that are newly reported by the 'no-implicit-coercion' rule in ESLint v9.0.0 by default, showing unary and binary negation operations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n-(-foo);\nfoo - 0;\n```\n\n----------------------------------------\n\nTITLE: Linting Nonexistent Files with ESLint CLI\nDESCRIPTION: An example of a command that would silently pass in ESLint v4 but fails in v5 because the specified files don't exist.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-5.0.0.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neslint nonexistent-file.js 'nonexistent-folder/**/*.js' # exits without any errors in ESLint v4\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of curly braces with 'multi' option in JavaScript\nDESCRIPTION: Examples of code that violate the 'curly' rule when set to the 'multi' option. This option allows single-statement blocks without braces but requires braces for multi-statement blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint curly: [\"error\", \"multi\"]*/\n\nif (foo) {\n    foo++;\n}\n\nif (foo) bar();\nelse {\n    foo++;\n}\n\nwhile (true) {\n    doSomething();\n}\n\nfor (let i=0; i < items.length; i++) {\n    doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of eol-last rule in JavaScript\nDESCRIPTION: This snippet shows code that complies with the 'eol-last' rule when set to enforce newlines at the end of files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/eol-last.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint eol-last: [\"error\", \"always\"]*/\n\nfunction doSomething() {\n  var foo = 2;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with space-after-keywords Rule Set to 'always'\nDESCRIPTION: Demonstrates code that passes the linting rule when configured to require spaces after keywords.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-after-keywords.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-after-keywords: \"error\"*/\n\nif (a) {}\n\nif (a) {} else {}\n```\n\n----------------------------------------\n\nTITLE: Cloning ESLint Repository\nDESCRIPTION: Command to clone your forked ESLint repository to your local machine. Replace <Your GitHub Username> with your actual GitHub username.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/development-environment.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<Your GitHub Username>/eslint\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Unary Word Operators in JavaScript\nDESCRIPTION: Examples of correct spacing after unary word operators that comply with the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-unary-word-ops.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndelete a.b\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew C\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvoid 0\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Code Examples\nDESCRIPTION: Examples of TypeScript-specific expressions that would be flagged as errors according to the rule's TypeScript support guidelines.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint no-unused-expressions: \"error\" */\n\n// Standalone type expressions\nSet<number>;\n1 as number;\nwindow!;\n\n// Expressions inside namespaces\nnamespace Bar {\n    123;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Theme Switcher Component in HTML\nDESCRIPTION: This code snippet includes an external HTML file containing the theme switcher component. It uses a template include directive, likely from a static site generator or templating system.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/theme-switcher.md#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% include 'components/theme-switcher.html' %}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for id-denylist Rule in JavaScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of identifiers that violate the 'id-denylist' rule. It includes examples of disallowed identifiers in various contexts such as variable declarations, function declarations, object properties, class fields, and class methods.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/id-denylist.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint id-denylist: [\"error\", \"data\", \"callback\"] */\n\nconst data = { ...values };\n\nfunction callback() {\n    // ...\n}\n\nelement.callback = function() {\n    // ...\n};\n\nconst itemSet = {\n    data: [...values]\n};\n\nclass Foo {\n    data = [];\n}\n\nclass Bar {\n    #data = [];\n}\n\nclass Baz {\n    callback() {}\n}\n\nclass Qux {\n    #callback() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Piping code into JSCS\nDESCRIPTION: Command to pipe JavaScript code into JSCS for linting.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-from-jscs.md#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncat file.js | jscs\n```\n\n----------------------------------------\n\nTITLE: Configuring space-in-brackets rule in ESLint JSON configuration\nDESCRIPTION: Example of how to configure the 'space-in-brackets' rule in an ESLint configuration file. This snippet sets the rule to error level and enforces spaces inside brackets.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-brackets.md#2025-04-14_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"space-in-brackets\": [\"error\", \"always\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring space-infix-ops Rule in ESLint\nDESCRIPTION: JSON configuration for the space-infix-ops rule in ESLint, showing the default option setting where int32Hint is set to false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-infix-ops.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"space-infix-ops\": [\"error\", { \"int32Hint\": false }]\n```\n\n----------------------------------------\n\nTITLE: Property Restriction with Allowed Objects\nDESCRIPTION: Configuration to restrict a property globally while allowing specific objects to use it.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-properties.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"property\": \"push\",\n            \"allowObjects\": [\"router\"],\n            \"message\": \"Prefer [...array, newValue] because it does not mutate the array in place.\"\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring no-confusing-arrow Rule in ESLint v6\nDESCRIPTION: This snippet shows how to configure the no-confusing-arrow rule to restore its previous default behavior in ESLint v6. It sets the allowParens option to false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rules\": {\n\t\t\"no-confusing-arrow\": [\"error\", { \"allowParens\": false }]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Semicolon Placement with 'last' Option\nDESCRIPTION: Examples of incorrect semicolon placement when the rule is configured to require semicolons at the end of statements.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/semi-style.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint semi-style: [\"error\", \"last\"]*/\n\nfoo()\n;[1, 2, 3].forEach(bar)\n\nfor (\n    var i = 0\n    ; i < 10\n    ; ++i\n) {\n    foo()\n}\n\nclass C {\n    static {\n        foo()\n        ;bar()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for no-self-assign Rule in JSON\nDESCRIPTION: JSON configuration example showing how to enable the rule with the 'props' option set to true, which makes the rule check self-assignments of properties as well.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-self-assign.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"no-self-assign\": [\"error\", {\"props\": true}]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Code Block Tabs Component in HTML\nDESCRIPTION: This snippet demonstrates how to include the code block tabs component in an HTML file using a Liquid include statement. The component is stored as a partial in the '/components/code-tabs.html' file.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/code-tabs.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% include 'components/code-tabs.html' %}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of 'newline-after-var' Rule with 'always' Option\nDESCRIPTION: Examples of code that violate the 'newline-after-var' rule when set to 'always', showing various scenarios with var, let, and const declarations.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-after-var.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint newline-after-var: [\"error\", \"always\"]*/\n\nvar greet = \"hello,\",\n    name = \"world\";\nconsole.log(greet, name);\n\nlet hello = \"hello,\",\n    world = \"world\";\nconsole.log(hello, world);\n\nvar greet = \"hello,\";\nconst NAME = \"world\";\nconsole.log(greet, NAME);\n\nvar greet = \"hello,\";\nvar name = \"world\";\n// var name = require(\"world\");\nconsole.log(greet, name);\n```\n\n----------------------------------------\n\nTITLE: Updating Code in an Existing ESLint Pull Request\nDESCRIPTION: Commands to stage, commit, and push additional changes to an existing pull request based on reviewer feedback, without creating a new pull request.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit add -A\ngit commit\ngit push origin issue1234\n```\n\n----------------------------------------\n\nTITLE: Creating the Versions Navigation Section\nDESCRIPTION: Sets up an HTML section with navigation for the versions list, including an include for the versions-list.html partial.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/pages/versions.md#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<section class=\"versions-section section\">\n    <div class=\"content-container\">\n        <nav aria-labelledby=\"versions-label\">\n            {% include 'partials/versions-list.html' %}\n        </nav>\n    </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for 'always' option\nDESCRIPTION: Examples of code that would trigger the object-curly-newline rule when configured with the 'always' option, which requires line breaks after opening and before closing braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", \"always\"]*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {foo: 1, bar: 2};\nlet d = {foo: 1,\n    bar: 2};\nlet e = {foo() {\n    dosomething();\n}};\n\nlet {} = obj;\nlet {f} = obj;\nlet {g, h} = obj;\nlet {i,\n    j} = obj;\nlet {k = function() {\n    dosomething();\n}} = obj;\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Message Format for ESLint\nDESCRIPTION: Example of an ESLint commit message following the Conventional Commits format. Includes a tag, short description, optional longer description, and issue reference.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\ntag: Short description of what you did\n\nLonger description here if necessary\n\nFixes #1234\n```\n\n----------------------------------------\n\nTITLE: Updated Rule Schema Format for ESLint v2.0.0\nDESCRIPTION: The updated rule schema format for ESLint v2.0.0 where rules no longer need to check their own severity. This requires removing severity from the schema, adjusting minItems from 1 to 0, and decreasing maxItems by 1.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\ttype: \"array\",\n\titems: [\n\t\t{\n\t\t\tenum: [\"always\", \"never\"],\n\t\t},\n\t],\n\tminItems: 0,\n\tmaxItems: 1,\n};\n```\n\n----------------------------------------\n\nTITLE: Common TypeError Messages with ESLint v9.0.0\nDESCRIPTION: Examples of error messages that occur when using plugins that haven't been updated for ESLint v9's new rule API, which moved methods from the context object to the sourceCode object.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/troubleshooting/v9-rule-api-changes.md#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTypeError: context.getScope is not a function\nTypeError: context.getAncestors is not a function\nTypeError: context.markVariableAsUsed is not a function\nTypeError: context.getDeclaredVariables is not a function\n```\n\n----------------------------------------\n\nTITLE: Correct usage with complex restriction patterns (JavaScript)\nDESCRIPTION: Example of code that complies with a complex rule configuration that restricts certain modules but allows exceptions through negative patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-modules: [\"error\", {\n    \"paths\": [\"fs\", \"cluster\"],\n    \"patterns\": [\"lodash/*\", \"!lodash/pick\"]\n}]*/\n\nconst crypto = require('crypto');\nconst pick = require('lodash/pick');\n```\n\n----------------------------------------\n\nTITLE: Correct Single-line Statement Positioning with 'beside' Option\nDESCRIPTION: Examples of correct code for the nonblock-statement-body-position rule with the default 'beside' option, showing control structures with single-line statements placed on the same line as the condition.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/nonblock-statement-body-position.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint nonblock-statement-body-position: [\"error\", \"beside\"] */\n\nif (foo) bar();\nelse baz();\n\nwhile (foo) bar();\n\nfor (let i = 1; i < foo; i++) bar();\n\ndo bar(); while (foo)\n\nif (foo) { // block statements are always allowed with this rule\n  bar();\n} else {\n  baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Violating object-property-newline with properties on same line\nDESCRIPTION: Examples of incorrect code that violate the object-property-newline rule by having multiple property specifications on the same line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-property-newline.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst newObject = {a: 1, b: [2, {a: 3, b: 4}]};\nconst newObject = {\n    a: 1, b: [2, {a: 3, b: 4}]\n};\nconst newObject = {\n    a: 1,\n    b: [2, {a: 3, b: 4}]\n};\nconst newObject = {\n    a: 1,\n    b: [\n        2,\n        {a: 3, b: 4}\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for no-else-return Rule in JavaScript\nDESCRIPTION: These examples demonstrate various cases of incorrect code that violate the 'no-else-return' rule, including nested if-else statements and unnecessary else blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-else-return.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-else-return: \"error\"*/\n\nfunction foo1() {\n    if (x) {\n        return y;\n    } else {\n        return z;\n    }\n}\n\nfunction foo2() {\n    if (x) {\n        return y;\n    } else if (z) {\n        return w;\n    } else {\n        return t;\n    }\n}\n\nfunction foo3() {\n    if (x) {\n        return y;\n    } else {\n        const t = \"foo\";\n    }\n\n    return t;\n}\n\nfunction foo4() {\n    if (error) {\n        return 'It failed';\n    } else {\n        if (loading) {\n            return \"It's still loading\";\n        }\n    }\n}\n\n// Two warnings for nested occurrences\nfunction foo5() {\n    if (x) {\n        if (y) {\n            return y;\n        } else {\n            return x;\n        }\n    } else {\n        return z;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy SpiderMonkey __iterator__ Implementation Example\nDESCRIPTION: Example showing how the __iterator__ property was historically used in SpiderMonkey to create custom iterators for use with JavaScript's for in and for each constructs. This pattern is now obsolete.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-iterator.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.prototype.__iterator__ = function() {\n    return new FooIterator(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Avoiding __iterator__ Property in JavaScript\nDESCRIPTION: Example of code that passes the no-iterator rule by not using the __iterator__ property as a method. This shows that using __iterator__ as a variable name is allowed as it doesn't conflict with the rule's intent.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-iterator.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-iterator: \"error\"*/\n\nconst __iterator__ = foo; // Not using the `__iterator__` property.\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples\nDESCRIPTION: Examples of code that correctly uses spread syntax and valid cases where apply() is acceptable\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-spread.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint prefer-spread: \"error\"*/\n\n// Using spread syntax\nfoo(...args);\nobj.foo(...args);\n\n// The `this` binding is different.\nfoo.apply(obj, args);\nobj.foo.apply(null, args);\nobj.foo.apply(otherObj, args);\n\n// The argument list is not variadic.\n// Those are warned by the `no-useless-call` rule.\nfoo.apply(undefined, [1, 2, 3]);\nfoo.apply(null, [1, 2, 3]);\nobj.foo.apply(obj, [1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Disabling default ignorePatterns with applyDefaultIgnorePatterns option in JavaScript\nDESCRIPTION: Example of correct code using the lines-around-comment rule with applyDefaultIgnorePatterns set to false, which only applies the custom ignorePattern without considering default patterns.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/lines-around-comment.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint lines-around-comment: [\"error\", { \"ignorePattern\": \"pragma\", applyDefaultIgnorePatterns: false }] */\n\nfoo();\n/* a valid comment using pragma in it */\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of eol-last rule in JavaScript\nDESCRIPTION: This snippet demonstrates code that violates the 'eol-last' rule when set to enforce newlines at the end of files.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/eol-last.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint eol-last: [\"error\", \"always\"]*/\n\nfunction doSomething() {\n  var foo = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of 'space-before-blocks' with 'never' Option\nDESCRIPTION: Examples of code that complies with the rule when configured with the 'never' option, showing blocks without preceding spaces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-blocks.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-blocks: [\"error\", \"never\"]*/\n\nif (a){\n    b();\n}\n\nfunction a(){}\n\nfor (;;){\n    b();\n}\n\ntry{} catch(a){}\n\nclass Foo{\n  constructor(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of 'new-parens' rule with 'never' option in JavaScript\nDESCRIPTION: These examples illustrate incorrect code when the 'new-parens' rule is set to 'never', which disallows parentheses after a new constructor with no arguments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/new-parens.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint new-parens: [\"error\", \"never\"]*/\n\nvar person = new Person();\nvar person = new (Person)();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of 'no-undef-init' Rule in Loop Context\nDESCRIPTION: This snippet demonstrates a case where initializing to undefined in a loop changes behavior, and the rule might need to be disabled.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef-init.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Stats Output Format\nDESCRIPTION: JSON structure showing the statistics output format including parse times, rule execution times, and fix times for multiple passes.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/stats.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"times\": {\n\t\t\"passes\": [\n\t\t\t{\n\t\t\t\t\"parse\": {\n\t\t\t\t\t\"total\": 3.975959\n\t\t\t\t},\n\t\t\t\t\"rules\": {\n\t\t\t\t\t\"no-regex-spaces\": {\n\t\t\t\t\t\t\"total\": 0.160792\n\t\t\t\t\t},\n\t\t\t\t\t\"wrap-regex\": {\n\t\t\t\t\t\t\"total\": 0.422626\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"fix\": {\n\t\t\t\t\t\"total\": 0.080208\n\t\t\t\t},\n\t\t\t\t\"total\": 12.765959\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"parse\": {\n\t\t\t\t\t\"total\": 0.623542\n\t\t\t\t},\n\t\t\t\t\"rules\": {\n\t\t\t\t\t\"no-regex-spaces\": {\n\t\t\t\t\t\t\"total\": 0.043084\n\t\t\t\t\t},\n\t\t\t\t\t\"wrap-regex\": {\n\t\t\t\t\t\t\"total\": 0.007959\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"fix\": {\n\t\t\t\t\t\"total\": 0\n\t\t\t\t},\n\t\t\t\t\"total\": 1.148875\n\t\t\t}\n\t\t]\n\t},\n\t\"fixPasses\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using Object Literal Syntax (Correct)\nDESCRIPTION: Examples of correct code that either uses object literal syntax or demonstrates valid use cases that aren't affected by the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-object.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-new-object: \"error\"*/\n\nvar myObject = new CustomObject();\n\nvar myObject = {};\n\nvar Object = function Object() {};\nnew Object();\n\nvar foo = Object(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of 'space-before-blocks' with 'never' Option\nDESCRIPTION: Examples of code that violates the rule when configured with the 'never' option, prohibiting spaces before blocks.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-blocks.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint space-before-blocks: [\"error\", \"never\"]*/\n\nif (a) {\n    b();\n}\n\nfunction a() {}\n\nfor (;;) {\n    b();\n}\n\ntry {} catch(a) {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Ternary Expression in JavaScript\nDESCRIPTION: This snippet shows an example of a nested ternary expression, which is discouraged by the no-nested-ternary rule. It demonstrates how nesting can make code harder to understand.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-nested-ternary.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = bar ? baz : qux === quxx ? bing : bam;\n```\n\n----------------------------------------\n\nTITLE: Using restrictedNamedExportsPattern Option - Incorrect Example\nDESCRIPTION: Example demonstrating how the rule can restrict exports based on a regular expression pattern, flagging exports whose names match the pattern.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-exports.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/*eslint no-restricted-exports: [\"error\", {\n    \"restrictedNamedExportsPattern\": \"bar$\"\n}]*/\n\nexport const foobar = 1;\n```\n\n----------------------------------------\n\nTITLE: Examples with ignoreDestructuring Option Enabled\nDESCRIPTION: JavaScript code that is considered correct when the ignoreDestructuring option is set to true, allowing redundant renaming in destructuring assignments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-rename.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-useless-rename: [\"error\", { ignoreDestructuring: true }]*/\n\nlet { foo: foo } = bar;\nfunction baz({ bar: bar }) {}\n({ foo: foo }) => {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Async Update Patterns\nDESCRIPTION: Examples of code patterns that violate the require-atomic-updates rule due to potential race conditions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet result;\n\nasync function foo() {\n    result += await something;\n}\n\nasync function bar() {\n    result = result + await something;\n}\n\nasync function baz() {\n    result = result + doSomething(await somethingElse);\n}\n\nasync function qux() {\n    if (!result) {\n        result = await initialize();\n    }\n}\n\nfunction* generator() {\n    result += yield;\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-line Configuration Comment with Description\nDESCRIPTION: Demonstrates how to format multi-line configuration comments with descriptions. The description must be separated from the configuration by at least two hyphens.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint eqeqeq: \"off\", curly: \"error\"\n    --------\n    Here's a description about why this configuration is necessary. */\n```\n\n----------------------------------------\n\nTITLE: Defining and Logging in JavaScript Function\nDESCRIPTION: This snippet defines a function named 'a' that logs the string \"Test\" to the console when called. It demonstrates basic function syntax and console output in JavaScript.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/processors/test/test-processor.txt#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction a() {\n    console.log(\"Test\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring prefer-reflect Rule with Exceptions in JavaScript\nDESCRIPTION: Demonstrates how to configure the prefer-reflect rule with exceptions in an ESLint configuration file. This allows specifying which methods should not be flagged by the rule.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-reflect.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"prefer-reflect\": [<enabled>, { \"exceptions\": [<...exceptions>] }]\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint JavaScript Plugin with npm\nDESCRIPTION: Command to install the @eslint/js package as a dev dependency using npm. This package provides JavaScript-specific linting functionality separated from ESLint core.\nSOURCE: https://github.com/eslint/eslint/blob/main/packages/js/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @eslint/js -D\n```\n\n----------------------------------------\n\nTITLE: Configuring module paths and patterns restrictions in ESLint (JSON)\nDESCRIPTION: Advanced configuration that restricts both specific module paths and gitignore-style patterns, including negative patterns (with !) to allow exceptions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-modules\": [\"error\", {\n    \"paths\": [\"foo-module\", \"bar-module\"],\n    \"patterns\": [\"foo-module/private/*\", \"bar-module/*\",\"!baz-module/good\"]\n}]\n```\n\n----------------------------------------\n\nTITLE: ESLint Timing Command Output\nDESCRIPTION: Example of timing statistics output when running ESLint with TIMING=all flag.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/extend/stats.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ TIMING=all npx eslint file-to-fix.js --fix --stats -f json\n...\nRule            | Time (ms) | Relative\n:---------------|----------:|--------:\nwrap-regex      |     0.431 |    67.9%\nno-regex-spaces |     0.204 |    32.1%\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Bare-Block Option\nDESCRIPTION: Examples of incorrect multiline comment formatting when using the bare-block option, which disallows starred alignment.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-comment-style.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// this line\n// calls foo()\nfoo();\n\n/*\n * this line\n * calls foo()\n */\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Diff Example - Multi Line Changes\nDESCRIPTION: Example showing how changes in multi-line chained methods appear in diffs, demonstrating clearer change visibility.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/newline-per-chained-call.md#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nd3\n    .select(\"body\")\n    .selectAll(\"p\")\n-    .style(\"color\", \"white\");\n+    .style(\"color\", \"blue\");\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter for ESLint Versions Page\nDESCRIPTION: Sets up the Jekyll front matter metadata for the ESLint versions page, including layout, title, permalink, and a hook identifier.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/pages/versions.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: main.html\ntitle: Versions\npermalink: /versions/\nhook: \"versions-page\"\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying ESLint Configuration in JavaScript\nDESCRIPTION: A placeholder for users to paste their ESLint configuration. This helps in diagnosing issues by providing context about the user's setup.\nSOURCE: https://github.com/eslint/eslint/blob/main/templates/bug-report.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n\n```\n```\n\n----------------------------------------\n\nTITLE: Nested Function Limitation Example\nDESCRIPTION: Shows a limitation where the rule cannot detect callback usage within nested functions.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/callback-return.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        process.nextTick(function() {\n            return callback(); // this is bad, but WILL NOT warn\n        });\n    }\n    callback();\n}\n```\n\n----------------------------------------\n\nTITLE: Function Call Arguments with Never Option - Correct Examples\nDESCRIPTION: Examples of correct function call argument formatting when using the 'never' option, showing arguments on the same line.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/function-call-argument-newline.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint function-call-argument-newline: [\"error\", \"never\"]*/\n\nfoo(\"one\", \"two\", \"three\");\n// or\nfoo(\n    \"one\", \"two\", \"three\"\n);\n\nbar(\"one\", \"two\", { one: 1, two: 2 });\n// or\nbar(\"one\", \"two\", {\n    one: 1,\n    two: 2\n});\n\nbaz(\"one\", \"two\", (x) => {\n    console.log(x);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Mocha Timeout for ESLint Tests\nDESCRIPTION: Shell command demonstrating how to override the default test timeout by setting the ESLINT_MOCHA_TIMEOUT environment variable. The default timeout is 10000ms.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/contribute/tests.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nESLINT_MOCHA_TIMEOUT=20000 npm test\n```\n\n----------------------------------------\n\nTITLE: ESLint Environment Configuration\nDESCRIPTION: Demonstrates how to set up ESLint environments using inline comments, including ES6 and Node.js environments.\nSOURCE: https://github.com/eslint/eslint/blob/main/tests/fixtures/bad-examples.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-restricted-syntax: [\"error\", \"ArrayPattern\"] */\n/* eslint-env es6 */\n\n/*eslint-env node */\n/*eslint-env*/\n```\n\n----------------------------------------\n\nTITLE: Using Individual Category Shortcodes\nDESCRIPTION: Demonstrates how to use individual shortcodes for each rule category type (recommended, fixable, and hasSuggestions).\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/library/rule-categories.md#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{ % recommended % } { % fixable % } { % hasSuggestions % }\n```\n\n----------------------------------------\n\nTITLE: ESLint Disable Comment Example\nDESCRIPTION: Shows how to disable the require-unicode-regexp rule for specific cases using eslint-disable comments.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/require-unicode-regexp.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable require-unicode-regexp */\nconst regex = /^\\w+$/i;\n/* eslint-enable require-unicode-regexp */\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Configuration Files in JSON\nDESCRIPTION: Example of extending multiple configuration files using relative paths in JSON format.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": [\n\t\t\"./node_modules/coding-standard/eslintDefaults.js\",\n\t\t\"./node_modules/coding-standard/.eslintrc-es6\",\n\t\t\"./node_modules/coding-standard/.eslintrc-jsx\"\n\t],\n\t\"rules\": {\n\t\t\"eqeqeq\": \"warn\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Import Names Configuration\nDESCRIPTION: Advanced configuration example showing how to restrict specific named imports from modules.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": [\"error\", {\n  \"paths\": [{\n    \"name\": \"import-foo\",\n    \"importNames\": [\"Bar\"],\n    \"message\": \"Please use Bar from /import-bar/baz/ instead.\"\n  }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Parser Configuration Example\nDESCRIPTION: JSON configuration for enabling ES2018 parser options to support object rest/spread properties.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/rest-spread-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"parserOptions\": {\n        \"ecmaVersion\": 2018\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'exported' Comment for Global Variables in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the /* exported variableName */ comment to indicate that a global variable is being exported and should not be considered unused.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-vars.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*eslint no-unused-vars: \"error\"*/\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags with ESLint API\nDESCRIPTION: Demonstrates how to enable feature flags when using ESLint's JavaScript API with both the ESLint and Linter classes. The example shows how to pass multiple flags in an array to the constructor options.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/pages/flags.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ESLint, Linter } = require(\"eslint\");\n\nconst eslint = new ESLint({\n\tflags: [\"flag_one\", \"flag_two\"],\n});\n\nconst linter = new Linter({\n\tflags: [\"flag_one\", \"flag_two\"],\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration File\nDESCRIPTION: An ESLint configuration file in JSON format that extends the recommended ruleset and adds custom rules for consistent returns, indentation, no-else-return, semicolons, and space around unary operators.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": \"eslint:recommended\",\n    \"rules\": {\n        \"consistent-return\": 2,\n        \"indent\"           : [1, 4],\n        \"no-else-return\"   : 1,\n        \"semi\"             : [1, \"always\"],\n        \"space-unary-ops\"  : 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Ternary Expression - Alternative Formats\nDESCRIPTION: Examples of how a ternary expression can be written across multiple lines for improved readability.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/multiline-ternary.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = bar > baz ?\n    value1 :\n    value2;\n\nvar foo = bar > baz\n    ? value1\n    : value2;\n```\n\n----------------------------------------\n\nTITLE: ignoreOverrideMethods Option - Correct Example (False)\nDESCRIPTION: TypeScript example showing methods with 'override' modifier that use 'this', complying with the rule when ignoreOverrideMethods is false.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/*eslint class-methods-use-this: [\"error\", { \"ignoreOverrideMethods\": false }] */\n\nabstract class Base {\n    abstract method(): void;\n    abstract property: () => void;\n}\n\nclass Derived extends Base {\n    override method() {\n        this.foo = \"Hello World\";\n    };\n    override property = () => {\n        this;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Correct code examples for 'never' option\nDESCRIPTION: Examples of code that correctly follows the object-curly-newline rule when configured with the 'never' option, showing proper formatting without line breaks at braces.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-newline.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint object-curly-newline: [\"error\", \"never\"]*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {foo: 1, bar: 2};\nlet d = {foo: 1,\n    bar: 2};\nlet e = {foo: function() {\n    dosomething();\n}};\n\nlet {} = obj;\nlet {f} = obj;\nlet {g, h} = obj;\nlet {i,\n    j} = obj;\nlet {k = function() {\n    dosomething();\n}} = obj;\n```\n\n----------------------------------------\n\nTITLE: Correct Function Spacing Examples\nDESCRIPTION: Examples of function declarations that comply with the rule. Shows correct spacing for the default 'never' option and for the 'always' option.\nSOURCE: https://github.com/eslint/eslint/blob/main/docs/src/rules/space-after-function-name.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo(x) {\n    // ...\n}\n\nvar x = function named(x) {};\n\n// When [\"error\", \"always\"]\nfunction bar (x) {\n    // ...\n}\n```"
  }
]