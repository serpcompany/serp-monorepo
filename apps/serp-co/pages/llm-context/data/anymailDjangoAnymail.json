[
  {
    "owner": "anymail",
    "repo": "django-anymail",
    "content": "TITLE: Configuring Anymail settings dictionary in Django\nDESCRIPTION: Example of the ANYMAIL settings dictionary in Django settings.py, showing how to configure API keys for an ESP (Mailgun in this example).\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    \"MAILGUN_API_KEY\": \"<your Mailgun key>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Email with Inline Images and Anymail Extensions\nDESCRIPTION: Advanced email example using Anymail's extended features. This includes sending HTML content with inline images, setting metadata and tags, and enabling click tracking - demonstrating Anymail's ESP-specific features with a portable API.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import EmailMultiAlternatives\nfrom anymail.message import attach_inline_image_file\n\nmsg = EmailMultiAlternatives(\n    subject=\"Please activate your account\",\n    body=\"Click to activate your account: https://example.com/activate\",\n    from_email=\"Example <admin@example.com>\",\n    to=[\"New User <user1@example.com>\", \"account.manager@example.com\"],\n    reply_to=[\"Helpdesk <support@example.com>\"])\n\n# Include an inline image in the html:\nlogo_cid = attach_inline_image_file(msg, \"/path/to/logo.jpg\")\nhtml = \"\"\"<img alt=\"Logo\" src=\"cid:{logo_cid}\">\n          <p>Please <a href=\"https://example.com/activate\">activate</a>\n          your account</p>\"\"\".format(logo_cid=logo_cid)\nmsg.attach_alternative(html, \"text/html\")\n\n# Optional Anymail extensions:\nmsg.metadata = {\"user_id\": \"8675309\", \"experiment_variation\": 1}\nmsg.tags = [\"activation\", \"onboarding\"]\nmsg.track_clicks = True\n\n# Send it:\nmsg.send()\n```\n\n----------------------------------------\n\nTITLE: Installing Django-Anymail with ESP-specific dependencies using pip\nDESCRIPTION: Command to install Django-Anymail package with optional ESP-specific dependencies. The example includes SendGrid and SparkPost, but users can specify other ESPs as needed.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"django-anymail[sendgrid,sparkpost]\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Anymail Debug API Requests in Django\nDESCRIPTION: When set to True, this setting enables output of raw API communication with the ESP for debugging purposes. It dumps each HTTP request and ESP response to sys.stdout once the response is received. This should not be enabled in production due to security risks.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL_DEBUG_API_REQUESTS = True\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for Anymail with Mailgun\nDESCRIPTION: Django settings configuration for Anymail integration. This includes adding 'anymail' to INSTALLED_APPS, configuring Mailgun-specific settings, setting the email backend, and defining default email addresses.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    # ...\n    \"anymail\",\n    # ...\n]\n\nANYMAIL = {\n    # (exact settings here depend on your ESP...)\n    \"MAILGUN_API_KEY\": \"<your Mailgun key>\",\n    \"MAILGUN_SENDER_DOMAIN\": 'mg.example.com',  # your Mailgun domain, if needed\n}\nEMAIL_BACKEND = \"anymail.backends.mailgun.EmailBackend\"  # or sendgrid.EmailBackend, or...\nDEFAULT_FROM_EMAIL = \"you@example.com\"  # if you don't already have this in settings\nSERVER_EMAIL = \"your-server@example.com\"  # ditto (default from-email for Django errors)\n```\n\n----------------------------------------\n\nTITLE: Sending a Basic Email with Django and Anymail\nDESCRIPTION: A simple example of sending an email using Django's send_mail function with Anymail. This demonstrates how Anymail integrates seamlessly with Django's standard email functionality.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import send_mail\n\nsend_mail(\"It works!\", \"This will get sent through Mailgun\",\n          \"Anymail Sender <from@example.com>\", [\"to@example.com\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP-specific Global Defaults in Django Settings (Python)\nDESCRIPTION: This snippet demonstrates how to set ESP-specific global defaults in the Django settings. It shows how to override general defaults for specific ESPs like Postmark and Mailgun.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"SEND_DEFAULTS\": {\n        \"tags\": [\"myapp\", \"version3\"],\n    },\n    \"POSTMARK_SEND_DEFAULTS\": {\n        # Postmark only supports a single tag\n        \"tags\": [\"version3\"],  # overrides SEND_DEFAULTS['tags'] (not merged!)\n    },\n    \"MAILGUN_SEND_DEFAULTS\": {\n        \"esp_extra\": {\"o:dkim\": \"no\"},  # Disable Mailgun DKIM signatures\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Django EMAIL_BACKEND for Anymail\nDESCRIPTION: Configuration for Django's EMAIL_BACKEND setting to use Anymail's Mailgun backend for sending emails.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.mailgun.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Using ESP Templates with Merge Data in Django-Anymail\nDESCRIPTION: Example demonstrating how to send an email using an ESP stored template with per-recipient merge data and global merge data. This code sets up a batch send where each recipient receives a personalized message.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/templates.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import EmailMessage\n\nmessage = EmailMessage(\n    subject=None,  # use the subject in our stored template\n    from_email=\"marketing@example.com\",\n    to=[\"Wile E. <wile@example.com>\", \"rr@example.com\"])\nmessage.template_id = \"after_sale_followup_offer\"  # use this ESP stored template\nmessage.merge_data = {  # per-recipient data to merge into the template\n    'wile@example.com': {'NAME': \"Wile E.\",\n                         'OFFER': \"15% off anvils\"},\n    'rr@example.com':   {'NAME': \"Mr. Runner\"},\n}\nmessage.merge_global_data = {  # merge data for all recipients\n    'PARTNER': \"Acme, Inc.\",\n    'OFFER': \"5% off any Acme product\",  # a default if OFFER missing for recipient\n}\nmessage.send()\n```\n\n----------------------------------------\n\nTITLE: Generating random webhook secret using Django's crypto utilities\nDESCRIPTION: Command to generate a secure random string for use as an Anymail webhook secret. This creates two 16-character random strings separated by a colon.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ python -c \"from django.utils import crypto; print(':'.join(crypto.get_random_string(16) for _ in range(2)))\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MailerSend Advanced Personalization with Django Anymail\nDESCRIPTION: This example demonstrates how to create an on-the-fly email template using MailerSend's advanced personalization variables. It shows how to set up merge data for individual recipients and global merge data for all recipients.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailersend.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    from_email=\"shipping@example.com\",\n    subject=\"Your order {{ order_no }} has shipped\",\n    body=\"\"\"Hi {{ name }},\n            We shipped your order {{ order_no }}\n            on {{ ship_date }}.\"\"\",\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\n# (you'd probably also set a similar html body with variables)\nmessage.merge_data = {\n    \"alice@example.com\": {\"name\": \"Alice\", \"order_no\": \"12345\"},\n    \"bob@example.com\": {\"name\": \"Bob\", \"order_no\": \"54321\"},\n}\nmessage.merge_global_data = {\n    \"ship_date\": \"May 15\"  # Anymail maps globals to all recipients\n}\n# (see discussion of batch-send-mode below)\nmessage.esp_extra = {\n    \"batch-send-mode\": \"use-bulk-email\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbound Email Handler in Django Anymail\nDESCRIPTION: Example of implementing an inbound email signal receiver that processes incoming messages. The handler prints the sender's email, envelope sender, and subject of each received message.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/inbound.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom anymail.signals import inbound\nfrom django.dispatch import receiver\n\n@receiver(inbound)  # add weak=False if inside some other function/class\ndef handle_inbound(sender, event, esp_name, **kwargs):\n    message = event.message\n    print(\"Received message from %s (envelope sender %s) with subject '%s'\" % (\n          message.from_email, message.envelope_sender, message.subject))\n```\n\n----------------------------------------\n\nTITLE: Initializing AnymailMessage with ESP Features in Python\nDESCRIPTION: Demonstrates creating an AnymailMessage object with additional ESP-specific attributes like tags and metadata. Shows how to access the send status after sending the message.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom anymail.message import AnymailMessage\n\nmessage = AnymailMessage(\n    subject=\"Welcome\",\n    body=\"Welcome to our site\",\n    to=[\"New User <user1@example.com>\"],\n    tags=[\"Onboarding\"],  # Anymail extra in constructor\n)\n# Anymail extra attributes:\nmessage.metadata = {\"onboarding_experiment\": \"variation 1\"}\nmessage.track_clicks = True\n\nmessage.send()\nstatus = message.anymail_status  # available after sending\nstatus.message_id  # e.g., '<12345.67890@example.com>'\nstatus.recipients[\"user1@example.com\"].status  # e.g., 'queued'\n```\n\n----------------------------------------\n\nTITLE: Configuring additional Anymail settings\nDESCRIPTION: Examples of various Anymail configuration options, including IGNORE_RECIPIENT_STATUS which controls exception behavior for invalid recipients.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"IGNORE_RECIPIENT_STATUS\": True,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Recipient Merge Metadata in Python\nDESCRIPTION: Shows how to set per-recipient metadata for batch sending. Each recipient gets individualized metadata, which can be used for tracking and later retrieval.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage.to = [\"wile@example.com\", \"Mr. Runner <rr@example.com>\"]\nmessage.merge_metadata = {\n    \"wile@example.com\": {\"customer\": 123, \"order\": \"acme-zxyw\"},\n    \"rr@example.com\": {\"customer\": 45678, \"order\": \"acme-wblt\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Send Defaults with AnymailMessage (Python)\nDESCRIPTION: This code snippet shows how to use AnymailMessage with global send defaults. It demonstrates how message-specific attributes are merged with the global defaults, and how to override or ignore specific default values.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmessage = AnymailMessage(...)\nmessage.tags = [\"welcome\"]\nmessage.metadata = {\"source\": \"Ads\", \"user_id\": 12345}\nmessage.track_clicks = False\n\nmessage.send()\n# will send with:\n#   tags: [\"myapp\", \"version3\", \"welcome\"] (merged with defaults)\n#   metadata: {\"district\": \"North\", \"source\": \"Ads\", \"user_id\": 12345} (merged)\n#   track_clicks: False (message overrides defaults)\n#   track_opens: True (from the defaults)\n```\n\n----------------------------------------\n\nTITLE: Testing Email Sending with Anymail Test Backend in Django\nDESCRIPTION: This example demonstrates how to test email sending in Django using Anymail's test EmailBackend. It shows how to verify that emails are sent correctly, check email attributes, and inspect Anymail-specific parameters that would be sent to the ESP.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/tips/testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import mail\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\n@override_settings(EMAIL_BACKEND='anymail.backends.test.EmailBackend')\nclass SignupTestCase(TestCase):\n    # Assume our app has a signup view that accepts an email address...\n    def test_sends_confirmation_email(self):\n        self.client.post(\"/account/signup/\", {\"email\": \"user@example.com\"})\n\n        # Test that one message was sent:\n        self.assertEqual(len(mail.outbox), 1)\n\n        # Verify attributes of the EmailMessage that was sent:\n        self.assertEqual(mail.outbox[0].to, [\"user@example.com\"])\n        self.assertEqual(mail.outbox[0].tags, [\"confirmation\"])  # an Anymail custom attr\n\n        # Or verify the Anymail params, including any merged settings defaults:\n        self.assertTrue(mail.outbox[0].anymail_test_params[\"track_clicks\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Tracking Event Handlers with Anymail\nDESCRIPTION: Example of setting up Django signal receivers to handle email tracking events. Shows how to implement separate handlers for bounced emails and clicked links using the Anymail tracking signal.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/tracking.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom anymail.signals import tracking\nfrom django.dispatch import receiver\n\n@receiver(tracking)  # add weak=False if inside some other function/class\ndef handle_bounce(sender, event, esp_name, **kwargs):\n    if event.event_type == 'bounced':\n        print(\"Message %s to %s bounced\" % (\n              event.message_id, event.recipient))\n\n@receiver(tracking)\ndef handle_click(sender, event, esp_name, **kwargs):\n    if event.event_type == 'clicked':\n        print(\"Recipient %s clicked url %s\" % (\n              event.recipient, event.click_url))\n```\n\n----------------------------------------\n\nTITLE: Using Brevo Templates with Merge Data in Django Anymail\nDESCRIPTION: Demonstrates how to use Brevo templates with Django Anymail, including setting the template ID and providing merge data for personalization.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/brevo.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    # (subject and body come from the template, so don't include those)\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\nmessage.template_id = 3   # use this Brevo template\nmessage.from_email = None  # to use the template's default sender\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"},\n}\nmessage.merge_global_data = {\n    'ship_date': \"May 15\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Email Backend in Django\nDESCRIPTION: Sets up Anymail's Mailgun backend as the Django email backend handler\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.mailgun.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Blocklist with Pre-send Signal in Python\nDESCRIPTION: Example of using Anymail's pre_send signal to filter blocked email recipients before sending. The code checks both the from_email and recipient addresses against a blocklist, canceling sends or removing blocked recipients as needed.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/signals.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom anymail.exceptions import AnymailCancelSend\nfrom anymail.signals import pre_send\nfrom django.dispatch import receiver\nfrom email.utils import parseaddr\n\nfrom your_app.models import EmailBlockList\n\n@receiver(pre_send)\ndef filter_blocked_recipients(sender, message, **kwargs):\n    # Cancel the entire send if the from_email is blocked:\n    if not ok_to_send(message.from_email):\n        raise AnymailCancelSend(\"Blocked from_email\")\n    # Otherwise filter the recipients before sending:\n    message.to = [addr for addr in message.to if ok_to_send(addr)]\n    message.cc = [addr for addr in message.cc if ok_to_send(addr)]\n\ndef ok_to_send(addr):\n    # This assumes you've implemented an EmailBlockList model\n    # that holds emails you want to reject...\n    name, email = parseaddr(addr)  # just want the <email> part\n    try:\n        EmailBlockList.objects.get(email=email)\n        return False  # in the blocklist, so *not* OK to send\n    except EmailBlockList.DoesNotExist:\n        return True  # *not* in the blocklist, so OK to send\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Send Defaults in Django Settings (Python)\nDESCRIPTION: This snippet demonstrates how to set up global send defaults for Anymail in the Django settings file. It includes examples of setting metadata, tags, and tracking options that will apply to all messages sent through Anymail.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"SEND_DEFAULTS\": {\n        \"metadata\": {\"district\": \"North\", \"source\": \"unknown\"},\n        \"tags\": [\"myapp\", \"version3\"],\n        \"track_clicks\": True,\n        \"track_opens\": True,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using MailerSend Stored Templates with Django Anymail\nDESCRIPTION: This example shows how to use a pre-existing MailerSend template stored in your account. It demonstrates setting the template_id and how template defaults can override message attributes.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailersend.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    from_email=\"shipping@example.com\",\n    # (subject and body from template)\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\nmessage.template_id = \"vzq12345678\"  # id of template in our account\n# ... set merge_data and merge_global_data as above\n```\n\n----------------------------------------\n\nTITLE: Accessing Message ID from Anymail Status Response\nDESCRIPTION: Shows how to access the message_id property from the anymail_status attribute after sending a message. This example demonstrates accessing an RFC 2822 style message ID.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmessage.anymail_status.message_id\n# '<20160306015544.116301.25145@example.org>'\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with Multiple Backends in Django-Anymail\nDESCRIPTION: This code snippet demonstrates how to send emails using different email backends in a Django application with Anymail. It shows sending via the default Mailgun backend, an SMTP backend, a SendGrid backend, and a Mailgun backend with custom credentials.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/tips/multiple_backends.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import send_mail, get_connection\n\n# send_mail connection defaults to the settings EMAIL_BACKEND, which\n# we've set to Anymail's Mailgun EmailBackend. This will be sent using Mailgun:\nsend_mail(\"Thanks\", \"We sent your order\", \"sales@example.com\", [\"customer@example.com\"])\n\n# Get a connection to an SMTP backend, and send using that instead:\nsmtp_backend = get_connection('django.core.mail.backends.smtp.EmailBackend')\nsend_mail(\"Uh-Oh\", \"Need your attention\", \"admin@example.com\", [\"alert@example.com\"],\n          connection=smtp_backend)\n\n# You can even use multiple Anymail backends in the same app:\nsendgrid_backend = get_connection('anymail.backends.sendgrid.EmailBackend')\nsend_mail(\"Password reset\", \"Here you go\", \"noreply@example.com\", [\"user@example.com\"],\n          connection=sendgrid_backend)\n\n# You can override settings.py settings with kwargs to get_connection.\n# This example supplies credentials for a different Mailgun sub-acccount:\nalt_mailgun_backend = get_connection('anymail.backends.mailgun.EmailBackend',\n                                     api_key=MAILGUN_API_KEY_FOR_MARKETING)\nsend_mail(\"Here's that info\", \"you wanted\", \"info@marketing.example.com\", [\"prospect@example.org\"],\n          connection=alt_mailgun_backend)\n```\n\n----------------------------------------\n\nTITLE: Sending AMP Email with Django's EmailMultiAlternatives\nDESCRIPTION: Demonstrates how to send an AMP email along with plain text and HTML alternatives using Django's EmailMultiAlternatives class.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/django_email.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import EmailMultiAlternatives\n\nmsg = EmailMultiAlternatives(\"Subject\", \"text body\",\n                             \"from@example.com\", [\"to@example.com\"])\nmsg.attach_alternative(\"<!doctype html><html amp4email data-css-strict>...\",\n                       \"text/x-amp-html\")\nmsg.attach_alternative(\"<!doctype html><html>...\", \"text/html\")\nmsg.send()\n```\n\n----------------------------------------\n\nTITLE: Updating Django Settings from SendinBlue to Brevo\nDESCRIPTION: Diff showing how to update Django settings from SendinBlue to Brevo branding, including changing the email backend path and renaming configuration settings.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/brevo.rst#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- EMAIL_BACKEND = \"anymail.backends.sendinblue.EmailBackend\"  # old\n+ EMAIL_BACKEND = \"anymail.backends.brevo.EmailBackend\"       # new\n\n  ANYMAIL = {\n      ...\n-     \"SENDINBLUE_API_KEY\": \"<your v3 API key>\",  # old\n+     \"BREVO_API_KEY\": \"<your v3 API key>\",       # new\n      # (Also change \"SENDINBLUE_API_URL\" to \"BREVO_API_URL\" if present)\n\n      # If you are using Brevo-specific global send defaults, change:\n-     \"SENDINBLUE_SEND_DEFAULTS\" = {...},  # old\n+     \"BREVO_SEND_DEFAULTS\" = {...},       # new\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Backend for Django Anymail\nDESCRIPTION: Sets the EmailBackend in Django settings to use Anymail's SendGrid integration. This is the first required configuration step to start using SendGrid with Anymail.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sendgrid.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.sendgrid.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Composing Email with Django Templates in Python\nDESCRIPTION: This snippet demonstrates how to build an email message using Django's render_to_string function to generate the subject, text body, and HTML body from separate template files. It uses a merge_data dictionary for template context and creates a multipart email with both text and HTML versions.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/tips/django_templates.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.template.loader import render_to_string\n\nmerge_data = {\n    'ORDERNO': \"12345\", 'TRACKINGNO': \"1Z987\"\n}\n\nsubject = render_to_string(\"message_subject.txt\", merge_data).strip()\ntext_body = render_to_string(\"message_body.txt\", merge_data)\nhtml_body = render_to_string(\"message_body.html\", merge_data)\n\nmsg = EmailMultiAlternatives(subject=subject, from_email=\"store@example.com\",\n                             to=[\"customer@example.com\"], body=text_body)\nmsg.attach_alternative(html_body, \"text/html\")\nmsg.send()\n```\n\n----------------------------------------\n\nTITLE: Setting Mailgun API Key\nDESCRIPTION: Configures the required API key for sending emails through Mailgun\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"MAILGUN_API_KEY\": \"<your API key>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Amazon SES Options with esp_extra\nDESCRIPTION: Python example demonstrating how to use esp_extra to access advanced Amazon SES features like configuration sets and custom email tags.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage.esp_extra = {\n    # Override AMAZON_SES_CONFIGURATION_SET_NAME for this message:\n    'ConfigurationSetName': 'NoOpenOrClickTrackingConfigSet',\n    # Authorize a custom sender:\n    'FromEmailAddressIdentityArn': 'arn:aws:ses:us-east-1:123456789012:identity/example.com',\n    # Set SES Message Tags (change to 'DefaultEmailTags' for template sends):\n    'EmailTags': [\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Template Message in Python\nDESCRIPTION: Demonstrates how to set up a templated email message using Amazon SES with Django-Anymail. It shows setting the template ID, merge data, and global merge data.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    from_email=\"shipping@example.com\",\n    # you must omit subject and body (or set to None) with Amazon SES templates\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\nmessage.template_id = \"MyTemplateName\"  # Amazon SES TemplateName\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"},\n}\nmessage.merge_global_data = {\n    'ship_date': \"May 15\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Logging with Post-send Signal in Python\nDESCRIPTION: Example of using Anymail's post_send signal to log sent messages. The code creates database records for each recipient with details about the message status and delivery.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/signals.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom anymail.signals import post_send\nfrom django.dispatch import receiver\n\nfrom your_app.models import SentMessage\n\n@receiver(post_send)\ndef log_sent_message(sender, message, status, esp_name, **kwargs):\n    # This assumes you've implemented a SentMessage model for tracking sends.\n    # status.recipients is a dict of email: status for each recipient\n    for email, recipient_status in status.recipients.items():\n        SentMessage.objects.create(\n            esp=esp_name,\n            message_id=recipient_status.message_id,  # might be None if send failed\n            email=email,\n            subject=message.subject,\n            status=recipient_status.status,  # 'sent' or 'rejected' or ...\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailjet API Credentials\nDESCRIPTION: Configures the Mailjet API key and secret key in Django settings. These credentials are required for authentication with Mailjet's API.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailjet.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    \"MAILJET_API_KEY\": \"<your API key>\",\n    \"MAILJET_SECRET_KEY\": \"<your API secret>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Double Quotes for Display-Names in Email Addresses in Python\nDESCRIPTION: Demonstrates how to properly format email addresses containing commas or parentheses in the display-name portion. Per RFC 5322, double quotes must be used around display-names that contain special characters like commas.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/exceptions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# won't work:\nsend_mail(from_email='Widgets, Inc. <widgets@example.com>', ...)\n# must use double quotes around display-name containing comma:\nsend_mail(from_email='\"Widgets, Inc.\" <widgets@example.com>', ...)\n```\n\n----------------------------------------\n\nTITLE: Using Mailgun Stored Templates\nDESCRIPTION: Example demonstrating the use of Mailgun stored templates with handlebars syntax ({{ }}). Shows template_id usage with merge data and global merge data.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    from_email=\"shipping@example.com\",\n    # The message body and html_body come from from the stored template.\n    # (You can still use %recipient.___% fields in the subject:)\n    subject=\"Your order %recipient.order_no% has shipped\",\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\nmessage.template_id = 'shipping-notification'  # name of template in our account\n# The substitution data is exactly the same as in the previous example:\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"},\n}\nmessage.merge_global_data = {\n    'ship_date': \"May 15\"  # Anymail maps globals to all recipients\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Sending with SparkPost Templates in Python\nDESCRIPTION: This snippet demonstrates how to set up a message for batch sending using SparkPost templates and merge data. It shows how to use template_id, set merge_data for individual recipients, and use merge_global_data for shared values across all recipients.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sparkpost.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    ...\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\nmessage.template_id = \"11806290401558530\"  # SparkPost id\nmessage.from_email = None  # must set after constructor (see below)\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"},\n}\nmessage.merge_global_data = {\n    'ship_date': \"May 15\",\n    # Can use SparkPost's special \"dynamic\" keys for nested substitutions (see notes):\n    'dynamic_html': {\n        'status_html': \"<a href='https://example.com/order/{{order_no}}'>Status</a>\",\n    },\n    'dynamic_plain': {\n        'status_plain': \"Status: https://example.com/order/{{order_no}}\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using SendGrid-specific Features with esp_extra\nDESCRIPTION: Example showing how to use SendGrid features not directly supported by Anymail by setting the esp_extra attribute. This example configures subscription management and custom tracking settings.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sendgrid.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage.open_tracking = True\nmessage.esp_extra = {\n    \"asm\": {  # SendGrid subscription management\n        \"group_id\": 1,\n        \"groups_to_display\": [1, 2, 3],\n    },\n    \"tracking_settings\": {\n        \"open_tracking\": {\n            # Anymail will automatically set `\"enable\": True` here,\n            # based on message.open_tracking.\n            \"substitution_tag\": \"%%OPEN_TRACKING_PIXEL%%\",\n        },\n    },\n    # Because \"personalizations\" is a dict, Anymail will merge \"future_feature\"\n    # into the SendGrid personalizations array for each message recipient\n    \"personalizations\": {\n        \"future_feature\": {\"future\": \"data\"},\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Brevo-specific Parameters with esp_extra\nDESCRIPTION: Demonstrates how to use the esp_extra attribute to set Brevo-specific parameters, such as batchId for scheduled sending.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/brevo.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmessage.esp_extra = {\n    'batchId': '275d3289-d5cb-4768-9460-a990054b6c81',  # merged into send params\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JPEG Attachments in Django with Anymail\nDESCRIPTION: Demonstrates how to process a JPEG image attachment from an inbound email and assign it to a user's profile avatar in Django. It includes content type checking and security validation.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/inbound.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# allow users to mail in jpeg attachments to set their profile avatars...\nif attachment.get_content_type() == \"image/jpeg\":\n    # for security, you must verify the content is really a jpeg\n    # (you'll need to supply the is_valid_jpeg function)\n    if is_valid_jpeg(attachment.get_content_bytes()):\n        user.profile.avatar_image = attachment.as_uploaded_file()\n```\n\n----------------------------------------\n\nTITLE: Creating On-the-Fly Template with Merge Fields in Python\nDESCRIPTION: This snippet illustrates how to create an on-the-fly template using merge fields directly in the EmailMessage's subject and body. It also shows how to set the merge field format for Handlebars-style fields.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sendgrid.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# on-the-fly template using merge fields in subject and body:\nmessage = EmailMessage(\n    subject=\"Your order {{order_no}} has shipped\",\n    body=\"Dear {{name}}:\\nWe've shipped order {{order_no}}.\",\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\n# note: no template_id specified\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"},\n}\nmessage.esp_extra = {\n    # here's how to get Handlebars-style {{merge}} fields with Python's str.format:\n    'merge_field_format': \"{{{{{}}}}\"  # \"{{ {{ {} }} }}\" without the spaces\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Webhook Signing Secret in Django Settings\nDESCRIPTION: This snippet shows how to add the Resend webhook signing secret to the Django settings.py file. The secret is used for validating webhook signatures from Resend.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/resend.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    # ...\n    \"RESEND_SIGNING_SECRET\": \"whsec_...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Mailgun Event Data in Python\nDESCRIPTION: This snippet demonstrates how to access the Mailgun event-data ID from an Anymail tracking event. It's useful for integrating with Mailgun's other event APIs.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nevent.esp_event[\"event-data\"][\"id\"]\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Unisender Go Template and Merge Data in Python\nDESCRIPTION: This snippet demonstrates how to send an email using a Unisender Go template with merge data. It sets the template ID, recipient-specific merge data, and global merge data.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/unisender_go.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"],\n)\nmessage.from_email = None  # Use template From email and name\nmessage.template_id = \"0000aaaa-1111-2222-3333-4444bbbbcccc\"\nmessage.merge_data = {\n    \"alice@example.com\": {\"name\": \"Alice\", \"order_no\": \"12345\"},\n    \"bob@example.com\": {\"name\": \"Bob\", \"order_no\": \"54321\"},\n}\nmessage.merge_global_data = {\n    \"ship_date\": \"15-May\",\n}\nmessage.send()\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Unisender Go Inline Template in Python\nDESCRIPTION: This example shows how to send an email using an inline Unisender Go template. It includes subject and body templates with merge variables, and sets up recipient-specific and global merge data.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/unisender_go.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    from_email=\"shipping@example.com\",\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"],\n    # Use {{substitution}} variables in subject and body:\n    subject=\"Your order {{order_no}} has shipped\",\n    body=\"\"\"Hi {{name}},\n            We shipped your order {{order_no}}\n            on {{ship_date}}.\"\"\",\n)\n# (You'd probably also want to add an HTML body here.)\n# The substitution data is exactly the same as in the previous example:\nmessage.merge_data = {\n    \"alice@example.com\": {\"name\": \"Alice\", \"order_no\": \"12345\"},\n    \"bob@example.com\": {\"name\": \"Bob\", \"order_no\": \"54321\"},\n}\nmessage.merge_global_data = {\n    \"ship_date\": \"May 15\",\n}\nmessage.send()\n```\n\n----------------------------------------\n\nTITLE: Setting MailerSend API Token in Django Settings\nDESCRIPTION: Configures the required API token for authenticating with MailerSend's email service. This token should have full access to email features but no access to other features.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailersend.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"MAILERSEND_API_TOKEN\": \"<your API token>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postmark Email Backend in Django\nDESCRIPTION: Sets up the Postmark email backend in Django settings.py\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/postmark.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.postmark.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Brevo Email Backend in Django Settings\nDESCRIPTION: Sets up the Brevo email backend in Django's settings.py file. This includes specifying the backend class and the API key required for authentication.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/brevo.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.brevo.EmailBackend\"\n\nANYMAIL = {\n    ...\n    \"BREVO_API_KEY\": \"<your v3 API key>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailgun Recipient Variables Template\nDESCRIPTION: Example showing how to use Mailgun's recipient variables (%recipient.___%) syntax for on-the-fly email templating with merge data and global merge data.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    from_email=\"shipping@example.com\",\n    # Use %recipient.___% syntax in subject and body:\n    subject=\"Your order %recipient.order_no% has shipped\",\n    body=\"\"\"Hi %recipient.name%,\n            We shipped your order %recipient.order_no%\n            on %recipient.ship_date%.\"\"\",\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\n# (you'd probably also set a similar html body with %recipient.___% variables)\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"},\n}\nmessage.merge_global_data = {\n    'ship_date': \"May 15\"  # Anymail maps globals to all recipients\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Policy for Amazon SES Operations\nDESCRIPTION: IAM policy JSON that grants permissions for sending emails via SES, confirming SNS subscriptions, and accessing S3 for inbound mail. Includes permissions for both templated and non-templated sends.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"ses:SendEmail\",\n      \"ses:SendRawEmail\",\n      \"ses:SendBulkEmail\",\n      \"ses:SendBulkTemplatedEmail\"\n    ],\n    \"Resource\": \"*\"\n  }, {\n    \"Effect\": \"Allow\",\n    \"Action\": [\"sns:ConfirmSubscription\"],\n    \"Resource\": [\"arn:aws:sns:*:*:*\"]\n  }, {\n    \"Effect\": \"Allow\",\n    \"Action\": [\"s3:GetObject\"],\n    \"Resource\": [\"arn:aws:s3:::MY-PRIVATE-BUCKET-NAME/MY-INBOUND-PREFIX/*\"]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Using On-the-fly Templates with Merge Fields\nDESCRIPTION: Shows how to use merge fields directly in the email message body without creating a stored template in Mailjet.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailjet.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    from_email=\"orders@example.com\",\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"],\n    subject=\"Your order has shipped\",\n    body=\"Dear [[var:name]]: Your order [[var:order_no]] shipped on [[var:ship_date]].\"\n)\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"}\n}\nmessage.merge_global_data = {\n    'ship_date': \"May 15\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mandrill Email Backend in Django Settings\nDESCRIPTION: Sets the Django EMAIL_BACKEND setting to use Anymail's Mandrill backend for sending emails.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mandrill.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.mandrill.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Checking Message Status in Anymail\nDESCRIPTION: Examples showing how to check the status of a sent message using the status attribute of anymail_status. Demonstrates different status responses and checking for successful delivery.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmessage1.anymail_status.status\n# set(['queued'])  # all recipients were queued\nmessage2.anymail_status.status\n# set(['rejected', 'sent'])  # at least one recipient was sent,\n                             # and at least one rejected\n\n# This is an easy way to check there weren't any problems:\nif message3.anymail_status.status.issubset({'queued', 'sent'}):\n    print(\"ok!\")\n```\n\n----------------------------------------\n\nTITLE: Testing Email Tracking Webhooks in Django-Anymail\nDESCRIPTION: This example shows how to test Anymail's event tracking webhooks by creating simulated AnymailTrackingEvent objects and sending them to your signal receivers. It includes verification of how your code processes delivery and bounce events.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/tips/testing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom anymail.signals import AnymailTrackingEvent, tracking\nfrom django.test import TestCase\n\nclass EmailTrackingTests(TestCase):\n    def test_delivered_event(self):\n        # Build an AnymailTrackingEvent with event_type (required)\n        # and any other attributes your receiver cares about. E.g.:\n        event = AnymailTrackingEvent(\n            event_type=\"delivered\",\n            recipient=\"to@example.com\",\n            message_id=\"test-message-id\",\n        )\n\n        # Invoke all registered Anymail tracking signal receivers:\n        tracking.send(sender=object(), event=event, esp_name=\"TestESP\")\n\n        # Verify expected behavior of your receiver. What to test here\n        # depends on how your code handles the tracking events. E.g., if\n        # you create a Django model to store the event, you might check:\n        from myapp.models import MyTrackingModel\n        self.assertTrue(MyTrackingModel.objects.filter(\n            email=\"to@example.com\", event=\"delivered\",\n            message_id=\"test-message-id\",\n        ).exists())\n\n    def test_bounced_event(self):\n        # ... as above, but with `event_type=\"bounced\"`\n        # etc.\n```\n\n----------------------------------------\n\nTITLE: Setting Mandrill API Key in Django Settings\nDESCRIPTION: Configures the Mandrill API key in the Django settings file, which is required for authenticating with the Mandrill service.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mandrill.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"MANDRILL_API_KEY\": \"<your API key>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Open Tracking for Individual Messages in Python\nDESCRIPTION: Shows how to enable open tracking for a specific email message, overriding the ESP's default settings.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage.track_opens = True\n```\n\n----------------------------------------\n\nTITLE: Configuring Mandrill Template with Merge Data\nDESCRIPTION: Shows how to use a Mandrill template with merge fields and provide per-recipient merge data for batch sending.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mandrill.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    ...\n    subject=\"Your order *|order_no|* has shipped\",\n    body=\"\"\"Hi *|name|*,\n            We shipped your order *|order_no|*\n            on *|ship_date|*.\"\"\",\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\n# (you'd probably also set a similar html body with merge fields)\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"},\n}\nmessage.merge_global_data = {\n    'ship_date': \"May 15\",\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Inbound Email Processing in Django-Anymail\nDESCRIPTION: This example demonstrates how to test inbound email processing by creating simulated AnymailInboundMessage and AnymailInboundEvent objects. It shows how to construct test messages and verify that your code correctly processes received emails.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/tips/testing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom anymail.inbound import AnymailInboundMessage\nfrom anymail.signals import AnymailInboundEvent, inbound\nfrom django.test import TestCase\n\nclass EmailReceivingTests(TestCase):\n    def test_inbound_event(self):\n        # Build a simple AnymailInboundMessage and AnymailInboundEvent\n        # (see tips for more complex messages after the example):\n        message = AnymailInboundMessage.construct(\n            from_email=\"user@example.com\", to=\"comments@example.net\",\n            subject=\"subject\", text=\"text body\", html=\"html body\")\n        event = AnymailInboundEvent(message=message)\n\n        # Invoke all registered Anymail inbound signal receivers:\n        inbound.send(sender=object(), event=event, esp_name=\"TestESP\")\n\n        # Verify expected behavior of your receiver. What to test here\n        # depends on how your code handles the inbound message. E.g., if\n        # you create a user comment from the message, you might check:\n        from myapp.models import MyCommentModel\n        comment = MyCommentModel.objects.get(poster=\"user@example.com\")\n        self.assertEqual(comment.text, \"text body\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MailerSend Inbound Secret in Django Settings\nDESCRIPTION: This snippet shows how to set up the MAILERSEND_INBOUND_SECRET in the Django settings.py file. This secret is used by Anymail to verify calls to the inbound endpoint.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailersend.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    # ...\n    \"MAILERSEND_INBOUND_SECRET\": \"<secret you copied>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Batch Send Message IDs in Python\nDESCRIPTION: Example of how to access individual message IDs for batch sends using Anymail. This snippet shows how to get the message ID for a specific recipient email address from the anymail_status object.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/CHANGELOG.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nmessage.anymail_status.recipients[to_email].message_id\n```\n\n----------------------------------------\n\nTITLE: Using Mailjet Templates with Merge Data\nDESCRIPTION: Demonstrates how to use Mailjet templates with merge data for personalized emails. Includes setting template ID and providing recipient-specific merge data.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailjet.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\nmessage.template_id = \"176375\"\nmessage.from_email = None\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"}\n}\nmessage.merge_global_data = {\n    'ship_date': \"May 15\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with SendGrid Dynamic Template in Python\nDESCRIPTION: This snippet demonstrates how to send an email using a SendGrid dynamic template with Django-Anymail. It shows how to set the template ID, provide merge data for personalization, and include global merge data.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sendgrid.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    ...\n    # omit subject and body (or set to None) to use template content\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\nmessage.template_id = \"d-5a963add2ec84305813ff860db277d7a\"  # SendGrid dynamic id\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"},\n}\nmessage.merge_global_data = {\n    'ship_date': \"May 15\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MailerSend Inbound Email Secret for Inbound Routing\nDESCRIPTION: Sets the inbound route secret needed to verify inbound email notifications from MailerSend, required only when using inbound email routing.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailersend.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"MAILERSEND_INBOUND_SECRET\": \"<secret from inbound management page>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Sending with Resend using Anymail\nDESCRIPTION: This code snippet shows how to use Anymail's merge_metadata for batch sending with Resend, including per-recipient metadata.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/resend.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"],\n    from_email=\"...\", subject=\"...\", body=\"...\"\n)\nmessage.merge_metadata = {\n    'alice@example.com': {'user_id': \"12345\"},\n    'bob@example.com': {'user_id': \"54321\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Legacy Template with Merge Field Format in Python\nDESCRIPTION: This example shows how to use a SendGrid legacy template with Django-Anymail. It demonstrates setting the template ID, providing merge data, and specifying the merge field format in the esp_extra attribute.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sendgrid.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ...\nmessage.template_id = \"5997fcf6-2b9f-484d-acd5-7e9a99f0dc1f\"  # SendGrid legacy id\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"},\n}\nmessage.esp_extra = {\n    # Tell Anymail this SendGrid legacy template uses \"-field-\" for merge fields.\n    # (You could instead set SENDGRID_MERGE_FIELD_FORMAT in your ANYMAIL settings.)\n    'merge_field_format': \"-{}-\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using SparkPost Advanced Features with esp_extra\nDESCRIPTION: Example of using esp_extra to access SparkPost-specific features not directly supported by Anymail, such as setting transactional options, IP pools, templates, and recipient lists.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sparkpost.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage.esp_extra = {\n    \"options\": {\n        # Treat as transactional for unsubscribe and suppression:\n        \"transactional\": True,\n        # Override your default dedicated IP pool:\n        \"ip_pool\": \"transactional_pool\",\n    },\n    # Add a description:\n    \"description\": \"Test-run for new templates\",\n    \"content\": {\n        # Use draft rather than published template:\n        \"use_draft_template\": True,\n        # Use an A/B test:\n        \"ab_test_id\": \"highlight_support_links\",\n    },\n    # Use a stored recipients list (overrides message to/cc/bcc):\n    \"recipients\": {\n        \"list_id\": \"design_team\"\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default esp_extra Options for All Messages\nDESCRIPTION: Configuration to set default esp_extra options for all messages sent through Unisender Go using Anymail's global send defaults in settings.py, such as skipping the unsubscribe link.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/unisender_go.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...,\n    \"UNISENDER_GO_SEND_DEFAULTS\": {\n        \"esp_extra\": {\n            # Omit the unsubscribe link for all sent messages:\n            \"skip_unsubscribe\": 1\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Resend-specific Features with Anymail's esp_extra\nDESCRIPTION: This example demonstrates how to use Resend's native tags feature through Anymail's esp_extra attribute.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/resend.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage = AnymailMessage(...)\nmessage.esp_extra = {\n    \"tags\": [\n        {\"name\": \"Co_Brand\", \"value\": \"Acme_Inc\"},\n        {\"name\": \"Feature_Flag_1\", \"value\": \"test_22_a\"},\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Recipient Merge Data in Django-Anymail\nDESCRIPTION: Example of defining merge_data for a batch send. Each key is a recipient email address with a dictionary of merge field values specific to that recipient. This enables personalized emails for each recipient.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/templates.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage.merge_data = {\n    'wile@example.com': {'NAME': \"Wile E.\",\n                         'OFFER': \"15% off anvils\"},\n    'rr@example.com':   {'NAME': \"Mr. Runner\",\n                         'OFFER': \"instant tunnel paint\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Using Different API Keys for Multiple Domains\nDESCRIPTION: Demonstrates how to use different Mailgun API keys for sending from multiple domains\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import EmailMessage, get_connection\n# By default, use the settings.py MAILGUN_API_KEY:\nmessage1 = EmailMessage(from_email=\"support@default-domain.example.com\", ...)\nmessage1.send()\n\n# Use a different sending API key for this message:\nconnection = get_connection(api_key=SENDING_API_KEY_FOR_OTHER_DOMAIN)\nmessage2 = EmailMessage(from_email=\"support@other-domain.example.com\", ...,\n                        connection=connection)\nmessage2.send()\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Webhook Signing Key\nDESCRIPTION: Sets up webhook signing key for tracking and inbound webhooks\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"MAILGUN_WEBHOOK_SIGNING_KEY\": \"<your webhook signing key>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Including Anymail URLs in Django project URLconf\nDESCRIPTION: URL configuration to add Anymail webhook endpoints to a Django project's urls.py file. This is required for tracking and inbound webhook functionality.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import include, path\n\nurlpatterns = [\n    ...\n    path(\"anymail/\", include(\"anymail.urls\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Global Merge Data in Django-Anymail\nDESCRIPTION: Shows how to set merge_global_data which applies to all recipients in a batch send. This provides default values that can be overridden by recipient-specific merge data.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/templates.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage.merge_global_data = {\n    'PARTNER': \"Acme, Inc.\",\n    'OFFER': \"5% off any Acme product\",  # a default OFFER\n}\n```\n\n----------------------------------------\n\nTITLE: Using Postmark ESP Extra Features\nDESCRIPTION: Example of using additional Postmark features via esp_extra parameter\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/postmark.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessage.esp_extra = {\n    'MessageStream': 'marketing',  # send using specific message stream ID\n    'server_token': '<API server token for just this message>'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tags for Amazon SES Email\nDESCRIPTION: Python code showing how to set tags on an EmailMessage for use with Amazon SES.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(...)\nmessage.tags = [\"Marketing\"]\nmessage.send()\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkPost API Key in Django Settings\nDESCRIPTION: Sets the SparkPost API key in the Anymail settings dictionary. This key requires 'Transmissions: Read/Write' permission.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sparkpost.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"SPARKPOST_API_KEY\": \"<your API key>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Amazon SES Tracking Events in Python\nDESCRIPTION: Demonstrates how to create a signal receiver to handle tracking events from Amazon SES, including extracting Message Tags from the event data.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom anymail.signals import tracking\nfrom django.dispatch import receiver\n\n@receiver(tracking)  # add weak=False if inside some other function/class\ndef handle_tracking(sender, event, esp_name, **kwargs):\n    if esp_name == \"Amazon SES\":\n        try:\n            message_tags = {\n                name: values[0]\n                for name, values in event.esp_event[\"mail\"][\"tags\"].items()}\n        except KeyError:\n            message_tags = None  # SES Notification (not Event Publishing) event\n        print(\"Message %s to %s event %s: Message Tags %r\" % (\n              event.message_id, event.recipient, event.event_type, message_tags))\n```\n\n----------------------------------------\n\nTITLE: Accessing Per-Recipient Message Status in Anymail\nDESCRIPTION: Shows how to access recipient-specific status and message IDs from the recipients dictionary of anymail_status after sending a message to multiple recipients.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMultiAlternatives(\n    to=[\"you@example.com\", \"Me <me@example.com>\"],\n    subject=\"Re: The apocalypse\")\nmessage.send()\n\nmessage.anymail_status.recipients[\"you@example.com\"].status\n# 'sent'\nmessage.anymail_status.recipients[\"me@example.com\"].status\n# 'queued'\nmessage.anymail_status.recipients[\"me@example.com\"].message_id\n# '886313e1-3b8a-5372-9b90-0c9aee199e5d'\n```\n\n----------------------------------------\n\nTITLE: Using ESP Template Subject in Django-Anymail\nDESCRIPTION: Demonstrates how to use the subject defined in your ESP template instead of setting it in the message object. Setting subject to None allows the template's subject to be used.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/templates.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessage.subject = None  # use subject from template (if supported)\n```\n\n----------------------------------------\n\nTITLE: Formatting Complex Data Types for Merge Fields in Django-Anymail\nDESCRIPTION: Example showing how to properly format non-string data types (like dates, decimals, and model instances) as strings for use in merge fields. Without proper formatting, these would cause serialization errors.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/templates.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nproduct = Product.objects.get(123)  # A Django model\ntotal_cost = Decimal('19.99')\nship_date = date(2015, 11, 18)\n\n# Won't work -- you'll get \"not JSON serializable\" errors at send time:\nmessage.merge_global_data = {\n    'PRODUCT': product,\n    'TOTAL_COST': total_cost,\n    'SHIP_DATE': ship_date\n}\n\n# Do something this instead:\nmessage.merge_global_data = {\n    'PRODUCT': product.name,  # assuming name is a CharField\n    'TOTAL_COST': \"{cost:0.2f}\".format(cost=total_cost),\n    'SHIP_DATE': ship_date.strftime('%B %d, %Y')  # US-style \"March 15, 2015\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Email Messages in Python\nDESCRIPTION: Demonstrates how to add tags to an email message. Tags can be used for segmenting ESP reports and are often used with Anymail's status tracking webhooks.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage.tags = [\"Order Confirmation\", \"Test Variant A\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw ESP Response in Anymail\nDESCRIPTION: Demonstrates how to access the raw ESP API response through the esp_response attribute. This example shows accessing JSON data from a requests-based backend.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# This will work with a requests-based backend,\n# for an ESP whose send API provides a JSON response:\nmessage.anymail_status.esp_response.json()\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Merge Field Format\nDESCRIPTION: Sets the format string for SendGrid's legacy template merge fields. This example configures hyphen-delimited fields such as '-field-' in templates.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sendgrid.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"SENDGRID_MERGE_FIELD_FORMAT\": \"-{}-\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Retries for Mandrill EmailBackend in Python\nDESCRIPTION: This code snippet demonstrates how to create a custom EmailBackend that implements automatic retries for the Mandrill ESP using the requests library. It configures retry settings and mounts a custom HTTPAdapter to the session.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/tips/transient_errors.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport anymail.backends.mandrill\nfrom django.conf import settings\nimport requests.adapters\n\n\nclass RetryableMandrillEmailBackend(anymail.backends.mandrill.EmailBackend):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        retry = requests.adapters.Retry(\n            total=settings.EMAIL_TOTAL_RETRIES,\n            connect=settings.EMAIL_CONNECT_RETRIES,\n            read=settings.EMAIL_READ_RETRIES,\n            status=settings.EMAIL_HTTP_STATUS_RETRIES,\n            other=settings.EMAIL_OTHER_RETRIES,\n            allowed_methods=False,  # Retry all HTTP verbs\n            status_forcelist=settings.EMAIL_HTTP_STATUS_RETRYABLE,\n            backoff_factor=settings.EMAIL_RETRY_BACKOFF_FACTOR,\n        )\n        self.retryable_adapter = requests.adapters.HTTPAdapter(max_retries=retry)\n\n    def create_session(self):\n        session = super().create_session()\n        session.mount(\"https://\", self.retryable_adapter)\n        return session\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Email Tracking in Python\nDESCRIPTION: Demonstrates how to add metadata to an email message for later tracking and retrieval. This can be useful for integrating with Anymail's status tracking webhooks.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessage.metadata = {\"customer\": customer.id,\n                \"order\": order.reference_number}\n```\n\n----------------------------------------\n\nTITLE: Attaching Inline Images in Django Email with Anymail\nDESCRIPTION: Example showing how to attach an inline image to an email and reference it in the HTML body. Uses attach_inline_image_file function to generate a Content-ID for the image.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import EmailMultiAlternatives\nfrom anymail.message import attach_inline_image_file\n\nmessage = EmailMultiAlternatives( ... )\ncid = attach_inline_image_file(message, 'path/to/picture.jpg')\nhtml = '... <img alt=\"Picture\" src=\"cid:%s\"> ...' % cid\nmessage.attach_alternative(html, 'text/html')\n\nmessage.send()\n```\n\n----------------------------------------\n\nTITLE: Brevo Inbound Webhook URL Format\nDESCRIPTION: The URL format for configuring Brevo's inbound email parsing webhook. Includes placeholders for the webhook secret and your domain.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/brevo.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhttps://{random}:{random}@{yoursite.example.com}/anymail/brevo/inbound/\n```\n\n----------------------------------------\n\nTITLE: Manual Batch Sending with MailerSend and Django Anymail\nDESCRIPTION: This code demonstrates an alternative approach to batch sending by sending individual messages in a loop. This avoids batch-send-mode limitations while still using personalization variables.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailersend.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# How to \"manually\" send a batch of emails to one recipient at a time.\n# (There's no need to specify a MailerSend \"batch-send-mode\".)\nto_list = [\"alice@example.com\", \"bob@example.com\"]\nmerge_data = {\n    \"alice@example.com\": {\"name\": \"Alice\", \"order_no\": \"12345\"},\n    \"bob@example.com\": {\"name\": \"Bob\", \"order_no\": \"54321\"},\n}\nmerge_global_data = {\n    \"ship_date\": \"May 15\",\n}\nfor to_email in to_list:\n    message = AnymailMessage(\n        # just one recipient per message:\n        to=[to_email],\n        # provide template variables for this one recipient:\n        merge_global_data = merge_global_data | merge_data[to_email],\n        # any other attributes you want:\n        template_id = \"vzq12345678\",\n        from_email=\"shipping@example.com\",\n    )\n    try:\n        message.send()\n    except AnymailAPIError:\n        # Handle error -- e.g., schedule for retry later.\n    else:\n        # Either successful send or to_email is rejected.\n        # message.anymail_status will be {\"queued\"} or {\"rejected\"}.\n        # message.anymail_status.message_id can be stored to match\n        # with event.message_id in a status tracking signal receiver.\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Recipient Merge Headers in Python\nDESCRIPTION: Shows how to set per-recipient custom email headers using the merge_headers attribute. This enables batch sending where each recipient receives an individualized message.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmessage.to = [\"wile@example.com\", \"R. Runner <rr@example.com>\"]\nmessage.extra_headers = {\n    # Headers for all recipients\n    \"List-Unsubscribe-Post\": \"List-Unsubscribe=One-Click\",\n}\nmessage.merge_headers = {\n    # Per-recipient headers\n    \"wile@example.com\": {\n        \"List-Unsubscribe\": \"<https://example.com/unsubscribe/12345>\",\n    },\n    \"rr@example.com\": {\n        \"List-Unsubscribe\": \"<https://example.com/unsubscribe/98765>\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Signal Receivers in Django-Anymail\nDESCRIPTION: Documentation explaining how to properly implement signal receivers for webhook events in Django-Anymail. It covers error handling behavior, timeout considerations, and the proper way to connect signals, especially when defining receiver functions within other functions or methods.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/inbound.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# When connecting a signal receiver defined within another function or method:\nfrom django.dispatch import receiver\n\n# Example of correct signal connection with weak=False\n@receiver(anymail_webhook_event, weak=False)\ndef your_signal_handler(sender, event, **kwargs):\n    # your processing code here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple DKIM-Signature Headers in Python\nDESCRIPTION: Shows how to get all DKIM-Signature headers from an email message using the get_all() method of EmailMessage. This is useful for messages with multiple DKIM signatures.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/inbound.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessage.get_all('DKIM-Signature')  # list of all DKIM-Signature headers\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Backend in Django Settings\nDESCRIPTION: Python code to set the Django email backend to use Anymail's Amazon SES implementation.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.amazon_ses.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Email with Django's EmailMultiAlternatives\nDESCRIPTION: Shows how to send an HTML email using Django's EmailMultiAlternatives class, which offers more flexibility and features.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/django_email.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import EmailMultiAlternatives\n\nmsg = EmailMultiAlternatives(\"Subject\", \"text body\",\n                             \"from@example.com\", [\"to@example.com\"])\nmsg.attach_alternative(\"<html>html body</html>\", \"text/html\")\n# you can set any other options on msg here, then...\nmsg.send()\n```\n\n----------------------------------------\n\nTITLE: Setting Special Brevo Headers in Django EmailMessage\nDESCRIPTION: Shows how to set special Brevo headers using Django's EmailMessage class, including sender IP and idempotency key.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/brevo.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    ...,\n    headers = {\n        \"sender.ip\": \"10.10.1.150\",  # use a dedicated IP\n        \"idempotencyKey\": \"...uuid...\",  # batch send deduplication\n    }\n)\n\n# Note the constructor param is called `headers`, but the\n# corresponding attribute is named `extra_headers`:\nmessage.extra_headers = {\n    \"sender.ip\": \"10.10.1.222\",\n    \"idempotencyKey\": \"...uuid...\",\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Mandrill Response in Anymail\nDESCRIPTION: Code snippet showing how to access the raw Mandrill API response from an Anymail message status object, which replaces the Djrill message.mandrill_response approach.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mandrill.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmandrill_response = message.anymail_status.esp_response.json()\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Authentication Secret with Multiple Credentials in Django-Anymail\nDESCRIPTION: This snippet demonstrates how to configure the ANYMAIL_WEBHOOK_SECRET setting with multiple authentication strings to facilitate credential rotation. It allows webhook calls that match any of the authentication strings in the list.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/tips/securing_webhooks.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    'WEBHOOK_SECRET': [\n        'abcdefghijklmnop:qrstuvwxyz0123456789',\n        'ZYXWVUTSRQPONMLK:JIHGFEDCBA9876543210',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Email with Django's send_mail Function\nDESCRIPTION: Demonstrates how to send an HTML email using Django's send_mail function with the html_message parameter.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/django_email.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import send_mail\n\nsend_mail(\"Subject\", \"text body\", \"from@example.com\",\n          [\"to@example.com\"], html_message=\"<html>html body</html>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Mailgun Sender Domain\nDESCRIPTION: Configures a custom Mailgun sender domain different from the from_email domain\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"MAILGUN_API_KEY\": \"<your API key>\",\n    \"MAILGUN_SENDER_DOMAIN\": \"mail1.example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tox\nDESCRIPTION: Commands to run tests against different combinations of Python and Django versions using tox, including options for running specific test cases.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/contributing.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n## test a representative combination of Python and Django versions:\n$ tox -e lint,django51-py312-all,django40-py38-all,docs\n\n## you can also run just some test cases, e.g.:\n$ tox -e django42-py311-all tests.test_mailgun_backend tests.test_utils\n\n## to test more Python/Django versions:\n$ tox --parallel auto  # ALL 20+ envs! (in parallel if possible)\n```\n\n----------------------------------------\n\nTITLE: Alternative formats for Anymail settings in Django\nDESCRIPTION: Different ways to specify Anymail settings in Django - either as a consolidated ANYMAIL dictionary or as individual prefixed settings.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    \"MAILGUN_API_KEY\": \"12345\",\n    \"SEND_DEFAULTS\": {\n        \"tags\": [\"myapp\"]\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mandrill-specific Features with esp_extra\nDESCRIPTION: Demonstrates how to use Mandrill-specific features not directly supported by Anymail by setting the esp_extra attribute on a message.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mandrill.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessage.esp_extra = {\n    # Mandrill expects 'ip_pool' at top level...\n    'ip_pool': 'Bulk Pool',\n    # ... but 'subaccount' must be within a 'message' dict:\n    'message': {\n        'subaccount': 'Marketing Dept.'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailjet Inbound Webhook URL in Django Anymail\nDESCRIPTION: Demonstrates the format for the Mailjet Parse API inbound webhook URL. It includes placeholders for the webhook secret and your Django site's domain.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailjet.rst#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://{random}:{random}@{yoursite.example.com}/anymail/mailjet/inbound/\n```\n\n----------------------------------------\n\nTITLE: Creating a CSV-based Feature Comparison Table in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a feature comparison table using a CSV file in reStructuredText. It includes directives for file inclusion, header rows, and styling.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. csv-table::\n    :file: esp-feature-matrix.csv\n    :header-rows: 1\n    :widths: auto\n    :class: sticky-left\n```\n\n----------------------------------------\n\nTITLE: Accessing Resend Tags in Django-Anymail Tracking Signal Receiver\nDESCRIPTION: This code demonstrates how to retrieve Resend-specific tags from the esp_event field in a Django-Anymail tracking signal receiver. It shows how to handle the flattened dict format of Resend tags.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/resend.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@receiver(tracking)\ndef handle_tracking(sender, event, esp_name, **kwargs):\n    ...\n    resend_tags = event.esp_event.get(\"tags\", {})\n    # resend_tags will be a flattened dict (not\n    # the name/value list used when sending). E.g.:\n    # {\"Co_Brand\": \"Acme_Inc\", \"Feature_Flag_1\": \"test_22_a\"}\n```\n\n----------------------------------------\n\nTITLE: Using Postal-specific Features with esp_extra Parameter\nDESCRIPTION: Demonstrates how to use Postal features not directly supported by Anymail by setting the esp_extra attribute on a message to access Postal-specific API parameters.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/postal.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage.esp_extra = {\n    'HypotheticalFuturePostalParam': '2022',  # merged into send params\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Anymail Request Timeout in Django\nDESCRIPTION: Configures the timeout value for API calls to the ESP in Requests-based Anymail backends. The default is 30 seconds, but it can be customized to a single float, a 2-tuple of floats, or None to disable timeouts.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL_REQUESTS_TIMEOUT = 30  # Default value\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Django-Anymail\nDESCRIPTION: Lists the core development dependencies required for working on Django-Anymail. Includes hatch for build management, pre-commit for git hooks and code quality, and tox (version less than 4) for test automation.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/requirements-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nhatch\npre-commit\ntox<4\n```\n\n----------------------------------------\n\nTITLE: Setting ESP Template ID in Django-Anymail\nDESCRIPTION: Shows how to set the template_id attribute on an EmailMessage to use an ESP-stored template. This identifier refers to a template stored in your Email Service Provider account.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/templates.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmessage.template_id = \"after_sale_followup_offer\"\n```\n\n----------------------------------------\n\nTITLE: Using Postmark Templates with Merge Data\nDESCRIPTION: Demonstrates sending an email using a Postmark template with recipient-specific merge data\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/postmark.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"]\n)\nmessage.template_id = 80801  # Postmark template id or alias\nmessage.merge_data = {\n    'alice@example.com': {'name': \"Alice\", 'order_no': \"12345\"},\n    'bob@example.com': {'name': \"Bob\", 'order_no': \"54321\"}\n}\nmessage.merge_global_data = {\n    'ship_date': \"May 15\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Anymail with Resend Support in Python\nDESCRIPTION: This command installs Anymail with the Resend option, which includes the svix package for webhook signature validation.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/resend.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install 'django-anymail[resend]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Postal API URL in Django Settings\nDESCRIPTION: Sets the base URL of your Postal server in the Django settings ANYMAIL dictionary. Anymail will automatically append the required API paths.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/postal.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"POSTAL_API_URL\": \"https://yourpostal.example.com\",\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Unisender Go Template Engine in Python\nDESCRIPTION: This snippet demonstrates how to specify the Velocity template engine for Unisender Go inline templates using the esp_extra parameter.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/unisender_go.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmessage.esp_extra = {\n    \"template_engine\": \"velocity\",\n}\nmessage.subject = \"Your order $order_no has shipped\"  # Velocity syntax\n```\n\n----------------------------------------\n\nTITLE: Using esp_extra Parameters with MailerSend Backend\nDESCRIPTION: Example of using the esp_extra attribute to pass MailerSend-specific parameters, override API tokens, and set batch sending mode for individual messages.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailersend.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage = AnymailMessage(...)\nmessage.esp_extra = {\n    # override your MailerSend domain's content tracking default:\n    \"settings\": {\"track_content\": False},\n\n    # use a different MAILERSEND_API_TOKEN for this message:\n    \"api_token\": MAILERSEND_API_TOKEN_FOR_MARKETING_DOMAIN,\n\n    # override the MAILERSEND_BATCH_SEND_MODE setting\n    # just for this message:\n    \"batch_send_mode\": \"use-bulk-email\",\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Message IDs in Anymail Status Response\nDESCRIPTION: Shows how to access multiple message IDs from the anymail_status attribute when an ESP assigns unique IDs per recipient. Returns a set of all message IDs.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmessage.anymail_status.message_id\n# set(['16fd2706-8baf-433b-82eb-8c7fada847da',\n#      '886313e1-3b8a-5372-9b90-0c9aee199e5d'])\n```\n\n----------------------------------------\n\nTITLE: Disabling Click Tracking in Anymail Django Email\nDESCRIPTION: Example showing how to disable click tracking for a single message using the track_clicks attribute, which overrides the ESP's default tracking behavior.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmessage.track_clicks = False\n```\n\n----------------------------------------\n\nTITLE: Using individual prefixed settings for Anymail configuration\nDESCRIPTION: Alternative approach for configuring Anymail using individual settings with the ANYMAIL_ prefix instead of a consolidated dictionary.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL_MAILGUN_API_KEY = \"12345\"\nANYMAIL_SEND_DEFAULTS = {\"tags\": [\"myapp\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP-specific settings without Anymail prefix\nDESCRIPTION: Example showing how Anymail can use ESP-specific settings without the ANYMAIL_ prefix as a fallback if Anymail-specific settings aren't found.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nMAILGUN_API_KEY = \"12345\"  # used only if neither ANYMAIL[\"MAILGUN_API_KEY\"]\n                           # nor ANYMAIL_MAILGUN_API_KEY have been set\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Django EmailMessage\nDESCRIPTION: Shows how to add custom headers to a Django EmailMessage, either during creation or later using the extra_headers attribute.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/django_email.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Use `headers` when creating an EmailMessage\nmsg = EmailMessage( ...\n    headers={\n        \"List-Unsubscribe\": unsubscribe_url,\n        \"X-Example-Header\": \"myapp\",\n    }\n)\n\n# Or use the `extra_headers` attribute later\nmsg.extra_headers[\"In-Reply-To\"] = inbound_msg[\"Message-ID\"]\n```\n\n----------------------------------------\n\nTITLE: Using Merge Metadata for Custom Tracking in Brevo\nDESCRIPTION: Shows how to use Anymail's merge_metadata feature to supply custom tracking data for each recipient when sending with Brevo.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/brevo.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(\n    to=[\"alice@example.com\", \"Bob <bob@example.com>\"],\n    from_email=\"...\", subject=\"...\", body=\"...\"\n)\nmessage.merge_metadata = {\n    'alice@example.com': {'user_id': \"12345\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Email Backend in Django Settings\nDESCRIPTION: This snippet shows how to set up the Resend email backend in Django's settings.py file.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/resend.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.resend.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Setting Mailjet ESP Extra Options\nDESCRIPTION: Example of using esp_extra to set Mailjet-specific options like priority and sandbox mode. These options are merged into the Mailjet API payload.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailjet.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessage.esp_extra = {\n    \"Globals\": {\n      \"Priority\": 3,\n      \"TemplateErrorReporting\": {\"Email\": \"dev+mailtemplatebug@example.com\"}\n    },\n    \"SandboxMode\": True,\n    \"AdvanceErrorHandling\": True\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MailerSend Batch Send Mode for Multiple Recipients\nDESCRIPTION: Sets the batch sending mode for handling multiple recipients with merge data. Options are 'use-bulk-email' or 'expose-to-list' to determine how to process multiple recipients.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailersend.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"MAILERSEND_BATCH_SEND_MODE\": \"use-bulk-email\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG_API_REQUESTS in Django Settings\nDESCRIPTION: Undocumented Anymail setting to enable debug logging of API requests and responses during email sending. This should not be used in production as it may expose sensitive information.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/CHANGELOG.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nDEBUG_API_REQUESTS = True\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Disposition for Inline Images\nDESCRIPTION: Code snippet showing how to properly configure an inline image attachment by setting the Content-Disposition header to 'inline', which is required by Anymail.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mandrill.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimage.add_header('Content-Disposition', 'inline')\n```\n\n----------------------------------------\n\nTITLE: Installing Django-Anymail with Amazon SES Support in Console\nDESCRIPTION: Command to install Django-Anymail with the Amazon SES option, which ensures the boto3 package is included as a dependency.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"django-anymail[amazon-ses]\"\n```\n\n----------------------------------------\n\nTITLE: Scheduling Delayed Email Sending in Anymail\nDESCRIPTION: Demonstrates how to schedule a message to be sent at a future time using send_at attribute with a datetime object. The example shows scheduling a message to be sent one hour in the future.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta, timezone\n\nmessage.send_at = datetime.now(timezone.utc) + timedelta(hours=1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mandrill Subaccount in ANYMAIL_SEND_DEFAULTS\nDESCRIPTION: Example of setting up a Mandrill subaccount in Django's Anymail configuration using the esp_extra parameter within ANYMAIL_SEND_DEFAULTS.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mandrill.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"MANDRILL_SEND_DEFAULTS\": {\n        \"esp_extra\": {\n            \"message\": {\n                \"subaccount\": \"<your subaccount>\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unisender Go API Key and API URL in Django Settings\nDESCRIPTION: Configures the required API key and API endpoint URL for the Unisender Go service in Django's settings.py file. You must specify the full versioned API endpoint based on your account's data center.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/unisender_go.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    \"UNISENDER_GO_API_KEY\": \"<your API key>\",\n    # Pick ONE of these, depending on your account (go1 vs. go2):\n    \"UNISENDER_GO_API_URL\": \"https://go1.unisender.ru/ru/transactional/api/v1/\",\n    \"UNISENDER_GO_API_URL\": \"https://go2.unisender.ru/ru/transactional/api/v1/\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Resend API Key in Django Settings\nDESCRIPTION: This code demonstrates how to configure the Resend API key in the Django settings file.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/resend.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"RESEND_API_KEY\": \"re_...\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Anymail webhook security configuration\nDESCRIPTION: ANYMAIL configuration with WEBHOOK_SECRET for securing webhook endpoints against unauthorized access. This is essential for both tracking and inbound webhooks.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    'WEBHOOK_SECRET': '<a random string>:<another random string>',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom EmailMessage with AnymailMessageMixin (Python)\nDESCRIPTION: This code snippet shows how to create a custom EmailMessage class that combines features from both the django-mail-templated package and Anymail. It demonstrates the use of AnymailMessageMixin to add Anymail's ESP extra attributes and convenience methods.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/sending/anymail_additions.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom anymail.message import AnymailMessageMixin\nfrom mail_templated import EmailMessage\n\nclass TemplatedAnymailMessage(AnymailMessageMixin, EmailMessage):\n    \"\"\"\n    An EmailMessage that supports both Mail-Templated\n    and Anymail features\n    \"\"\"\n    pass\n\nmsg = TemplatedAnymailMessage(\n    template_name=\"order_confirmation.tpl\",  # Mail-Templated arg\n    track_opens=True,  # Anymail arg\n    ...\n)\nmsg.context = {\"order_num\": \"12345\"}  # Mail-Templated attribute\nmsg.tags = [\"templated\"]  # Anymail attribute\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Message Tag Name in Django Settings\nDESCRIPTION: Python configuration for specifying a message tag name in Anymail settings that will be used as an SES Message Tag.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"AMAZON_SES_MESSAGE_TAG_NAME\": \"Type\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Default Configuration Set in Django Settings\nDESCRIPTION: Shows how to set the default Amazon SES Configuration Set name in Django settings for use with Anymail.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    # ... other settings ...\n    # Use the name from step 5a above:\n    \"AMAZON_SES_CONFIGURATION_SET_NAME\": \"TrackingConfigSet\",\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Email Backend Configuration for Django Anymail\nDESCRIPTION: Example showing how to change the EMAIL_BACKEND setting from the deprecated format to the new format introduced in v0.8. The backend naming convention was changed to match Django's naming convention.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/CHANGELOG.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.mailgun.MailgunBackend\" # old\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Session Parameters in Django Settings\nDESCRIPTION: Example configuration for customizing the boto3 Session parameters with a specific profile name.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    \"AMAZON_SES_SESSION_PARAMS\": {\n        \"profile_name\": \"anymail-testing\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MailerSend Webhook Signing Secret for Activity Tracking\nDESCRIPTION: Configures the webhook signing secret required to verify incoming webhook posts from MailerSend for email activity tracking.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailersend.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"MAILERSEND_SIGNING_SECRET\": \"<secret from webhook management page>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Anymail with Mailgun Integration using pip\nDESCRIPTION: Command to install the django-anymail package from PyPI with Mailgun-specific dependencies. The [mailgun] extra ensures any Mailgun-specific dependencies are installed alongside the main package.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"django-anymail[mailgun]\"\n```\n\n----------------------------------------\n\nTITLE: Anymail Inbound Signal Receiver Function Signature\nDESCRIPTION: Defines the required function signature for an Anymail inbound signal receiver. This function handles incoming email events and provides access to the normalized event data.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/inbound.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef my_handler(sender, event, esp_name, **kwargs):\n   (You can name it anything you want.)\n\n   :param class sender: The source of the event. (One of the\n                        :mod:`anymail.webhook.*` View classes, but you\n                        generally won't examine this parameter; it's\n                        required by Django's signal mechanism.)\n   :param AnymailInboundEvent event: The normalized inbound event.\n                                     Almost anything you'd be interested in\n                                     will be in here---usually in the\n                                     :class:`~anymail.inbound.AnymailInboundMessage`\n                                     found in `event.message`.\n   :param str esp_name: e.g., \"SendMail\" or \"Postmark\". If you are working\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Send Defaults for Open Tracking\nDESCRIPTION: Sets default open tracking behavior for all messages using settings.py\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/postmark.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    \"SEND_DEFAULTS\": { \"track_opens\": True }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching AMP HTML in Django-Anymail\nDESCRIPTION: This code snippet demonstrates how to attach AMP HTML content to an email message using Django-Anymail.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/CHANGELOG.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmessage.attach_alternative(..., \"text/x-amp-html\")\n```\n\n----------------------------------------\n\nTITLE: Setting Idempotency Key for Brevo Batch Sends\nDESCRIPTION: Example of how to set Brevo's idempotencyKey in a message's headers for batch email sending. This ensures duplicate requests are detected by Brevo.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/brevo.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage.extra_headers = {\"idempotencyKey\": \"...uuid...\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling Generated Message IDs for Unisender Go\nDESCRIPTION: Configuration to disable Anymail's automatic generation of UUIDs for message tracking. When disabled, Unisender Go's job_id will be used as the message_id for all recipients.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/unisender_go.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...,\n    \"UNISENDER_GO_GENERATE_MESSAGE_ID\": False\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Mailgun Template Substitutions\nDESCRIPTION: Workaround for using complex data types with Mailgun handlebars templates. Only works for single recipient sends and is not portable between ESPs.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Using complex substitutions with Mailgun handlebars templates.\n# This works only for a single recipient, and is not at all portable between ESPs.\nmessage = EmailMessage(\n    from_email=\"shipping@example.com\",\n    to=[\"alice@example.com\"],  # single recipient *only* (no batch send)\n    subject=\"Your order has shipped\",  # recipient variables *not* available\n)\nmessage.template_id = 'shipping-notification'  # name of template in our account\nsubstitutions = {\n    'items': [  # complex substitution data\n        {'product': \"Anvil\", 'quantity': 1},\n        {'product': \"Tacks\", 'quantity': 100},\n    ],\n    'ship_date': \"May 15\",\n}\n# Do *not* set Anymail's message.merge_data, merge_global_data, or merge_metadata.\n# Instead add Mailgun custom variables directly:\nmessage.extra_headers['X-Mailgun-Variables'] = json.dumps(substitutions)\n```\n\n----------------------------------------\n\nTITLE: Using ESP Extra Features with Mailgun\nDESCRIPTION: Demonstrates using Mailgun-specific features via esp_extra parameter\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmessage = AnymailMessage(...)\nmessage.esp_extra = {\n    'o:deliverytime-optimize-period': '24h',  # use Mailgun Send Time Optimization\n    'o:time-zone-localize': '16:00',  # use Mailgun Timezone Optimization\n    'o:testmode': 'yes',  # use Mailgun's test mode\n}\n```\n\n----------------------------------------\n\nTITLE: Brevo Transactional Webhook URL Format\nDESCRIPTION: The URL format for configuring Brevo's transactional email tracking webhook. Includes placeholders for the webhook secret and your domain.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/brevo.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhttps://{random}:{random}@{yoursite.example.com}/anymail/brevo/tracking/\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun EU Region API URL\nDESCRIPTION: Sets the API URL for Mailgun's European region servers\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n  \"MAILGUN_API_KEY\": \"...\",\n  \"MAILGUN_API_URL\": \"https://api.eu.mailgun.net/v3\",\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Reply-To Header in Python with EmailMessage\nDESCRIPTION: Demonstrates how to access the Reply-To header of an email message using Python's EmailMessage interface. This snippet shows that AnymailInboundMessage inherits from EmailMessage and supports its mapping interface for header access.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/inbound.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmessage['reply-to']  # the Reply-To header (header keys are case-insensitive)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Postal API Key in Django Settings\nDESCRIPTION: Configures the required Postal API key in the Django settings ANYMAIL dictionary. This key authenticates requests to the Postal API.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/postal.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"POSTAL_API_KEY\": \"<your api key>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Inbound Webhook URL\nDESCRIPTION: This snippet shows the format for the Mailgun inbound webhook URL. It includes placeholders for the webhook secret, your domain, and specifies the use of raw MIME format for message forwarding.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailgun.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhttps://{random}:{random}@{yoursite.example.com}/anymail/mailgun/inbound_mime/\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Client Parameters in Django Settings\nDESCRIPTION: Example configuration for customizing the boto3 session client parameters including AWS credentials and timeouts.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    \"AMAZON_SES_CLIENT_PARAMS\": {\n        \"aws_access_key_id\": os.getenv(\"AWS_ACCESS_KEY_FOR_ANYMAIL_SES\"),\n        \"aws_secret_access_key\": os.getenv(\"AWS_SECRET_KEY_FOR_ANYMAIL_SES\"),\n        \"region_name\": \"us-west-2\",\n        \"config\": {\n            \"connect_timeout\": 30,\n            \"read_timeout\": 30,\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SendGrid API Key in Django Settings\nDESCRIPTION: Configures the SendGrid API key in Django settings. This key requires 'Mail Send' permission and is required for authentication with SendGrid's API.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sendgrid.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"SENDGRID_API_KEY\": \"<your API key>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postal Email Backend in Django Settings\nDESCRIPTION: Sets the Django EMAIL_BACKEND setting to use Anymail's Postal backend for sending emails.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/postal.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.postal.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Webhook Signing Secret in Django Settings\nDESCRIPTION: This snippet shows how to set up the Resend webhook signing secret for verifying webhook posts in Django settings.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/resend.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"RESEND_SIGNING_SECRET\": \"whsec_...\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkPost Email Backend in Django Settings\nDESCRIPTION: Sets the Django EMAIL_BACKEND setting to use Anymail's SparkPost backend.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sparkpost.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.sparkpost.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkPost EU API Endpoint\nDESCRIPTION: Sets a custom SparkPost API endpoint URL in the Anymail settings, such as for EU accounts or SparkPost Enterprise API.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/sparkpost.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    ...\n    \"SPARKPOST_API_URL\": \"https://api.eu.sparkpost.com/api/v1\",  # use SparkPost EU\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Anymail Version Requirement\nDESCRIPTION: Example of how to specify a compatible release requirement for Anymail version 3.0 in Python package dependencies.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/CHANGELOG.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndjango-anymail~=3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailjet Email Backend in Django Settings\nDESCRIPTION: Sets up the Mailjet email backend in Django settings.py. This is the basic configuration needed to use Mailjet with Anymail.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailjet.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.mailjet.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Sending Options with esp_extra for Unisender Go\nDESCRIPTION: Example of using esp_extra to set additional Unisender Go-specific options for an individual message, such as language settings, bypass flags, and custom unsubscribe URLs.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/unisender_go.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage = EmailMessage(...)\nmessage.esp_extra = {\n    \"global_language\": \"en\",  # Use English text for unsubscribe link\n    \"bypass_global\": 1,  # Ignore system level blocked address list\n    \"bypass_unavailable\": 1,  # Ignore account level blocked address list\n    \"options\": {\n        # Custom unsubscribe link (can use merge_data {{substitutions}}):\n        \"unsubscribe_url\": \"https://example.com/unsub?u={{subscription_id}}\",\n        \"custom_backend_id\": 22,  # ID of dedicated IP address\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests Without Tox\nDESCRIPTION: Commands to run the Anymail test suite without using tox, directly in the current Python environment.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/contributing.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n## install the testing requirements:\n$ python -m pip install -r tests/requirements.txt\n\n## run the tests:\n$ python runtests.py\n\n## this command can also run just a few test cases, e.g.:\n$ python runtests.py tests.test_mailgun_backend tests.test_mailgun_webhooks\n```\n\n----------------------------------------\n\nTITLE: Configuring Unisender Go Backend in Django Settings\nDESCRIPTION: Sets up the Unisender Go email backend in Django's settings.py file by configuring the EMAIL_BACKEND setting to use Anymail's Unisender Go backend.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/unisender_go.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.unisender_go.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Including Changelog in reStructuredText Documentation\nDESCRIPTION: This snippet shows how to set reference labels and include an external RST file in a documentation page. It creates two reference points (changelog and release_notes) and then includes the CHANGELOG.rst file from the parent directory.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/changelog.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _changelog:\n.. _release_notes:\n\n.. include:: ../CHANGELOG.rst\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements with pip\nDESCRIPTION: Command to install tox and other development dependencies needed for testing and contributing to Anymail.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n## install tox and other development requirements:\n$ python -m pip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Postmark Server Token\nDESCRIPTION: Configures the required Postmark server token in Django settings\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/postmark.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nANYMAIL = {\n    \"POSTMARK_SERVER_TOKEN\": \"<your server token>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing inline search form in HTML for Anymail documentation\nDESCRIPTION: An HTML form for searching the Anymail documentation. This raw HTML snippet is embedded in the documentation to allow users to search for answers to their questions without leaving the help page.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/help.rst#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"anymail-inline-search-form\" role=\"search\">\n  <form class=\"wy-form\" action=\"../search/\" method=\"get\">\n    <input type=\"search\" name=\"q\" placeholder=\"Search docs\">\n    <input type=\"hidden\" name=\"check_keywords\" value=\"yes\">\n    <input type=\"hidden\" name=\"area\" value=\"default\">\n  </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Python Script to Update Brevo Webhook URLs\nDESCRIPTION: A Python script that uses Brevo's API to automatically update webhook URLs from the 'sendinblue' path to 'brevo'. Requires the Brevo API key and uses the requests library.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/brevo.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Update Brevo webhook URLs to replace \"anymail/sendinblue\" with \"anymail/brevo\".\nimport requests\nBREVO_API_KEY = \"<your API key>\"\n\nheaders = {\n    \"accept\": \"application/json\",\n    \"api-key\": BREVO_API_KEY,\n}\n\nresponse = requests.get(\"https://api.brevo.com/v3/webhooks\", headers=headers)\nresponse.raise_for_status()\nwebhooks = response.json()\n\nfor webhook in webhooks:\n    if \"anymail/sendinblue\" in webhook[\"url\"]:\n        response = requests.put(\n            f\"https://api.brevo.com/v3/webhooks/{webhook['id']}\",\n            headers=headers,\n            json={\n                \"url\": webhook[\"url\"].replace(\"anymail/sendinblue\", \"anymail/brevo\")\n            }\n        )\n        response.raise_for_status()\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Email Backend for Amazon SES\nDESCRIPTION: Python code snippet showing how to configure the Django email backend setting to use Amazon SES via Anymail.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/amazon_ses.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.amazon_ses.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Supported ESPs in reStructuredText\nDESCRIPTION: This snippet creates a table of contents listing the supported Email Service Providers in Django-Anymail. It uses reStructuredText directives to generate a maxdepth-1 toctree.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   amazon_ses\n   brevo\n   mailersend\n   mailgun\n   mailjet\n   mandrill\n   postal\n   postmark\n   resend\n   sendgrid\n   sparkpost\n   unisender_go\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Dependency for Django-Anymail\nDESCRIPTION: This snippet lists 'responses' as an additional package needed for running tests in the Django-Anymail project. The 'responses' package is likely used for mocking HTTP responses during testing.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/tests/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nresponses\n```\n\n----------------------------------------\n\nTITLE: Adding Anymail to Django INSTALLED_APPS\nDESCRIPTION: Python configuration to add the Anymail app to Django's INSTALLED_APPS setting in settings.py.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    # ...\n    \"anymail\",\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Structuring PyPI Project Page HTML for Django-Anymail\nDESCRIPTION: This HTML snippet provides the structure for a PyPI project page, specifically for Django-Anymail. It includes meta tags, CSS links, and placeholders for project information and description. The template is designed to closely match PyPI.org's styling as of August 2023.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/_readme/template.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n%(head_prefix)s\n<!--\n  This approximates PyPI.org project page styling as of 8/2023,\n  and loads their compiled CSS that was in use at that time.\n\n  (Styling seems to change more often than basic page structure,\n  so to update, it may be sufficient to copy in the current\n  <link rel=\"stylesheet\" ...> tags from any live package page.\n  Be sure to convert or escape any percent chars in copied urls,\n  to avoid \"not enough arguments for format string\" errors.)\n\n  This extends the docutils base template found at\n  ${SITE_PACKAGES}/docutils/writers/html5_polyglot/template.txt\n-->\n\n<base href=\"https://pypi.org/\">\n%(head)s\n<!-- template (stylesheet) omitted -->\n\n<link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.1dcaa944.css\">\n<link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic|Source+Code+Pro:500\">\n<noscript>\n  <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">\n</noscript>\n<link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">\n\n%(body_prefix)s\n\n<main id=\"#content\">\n\n  <div class=\"banner\">\n    <div class=\"package-header\">\n    <div class=\"package-header__left\">\n      %(body_pre_docinfo)s\n      %(docinfo)s\n    </div>\n    </div>\n  </div>\n\n  <div>\n    <div class=\"tabs-container\">\n    <div class=\"vertical-tabs\">\n    <div class=\"vertical-tabs__panel\">\n    <div id=\"description\" class=\"vertical-tabs__content\">\n    <h2 class=\"page-title\">Project description</h2>\n\n    <div class=\"project-description\">\n      %(body)s\n    </div>\n    </div>\n    </div>\n    </div>\n    </div>\n  </div>\n\n</main>\n%(body_suffix)s\n```\n\n----------------------------------------\n\nTITLE: Specifying Documentation Build Dependencies for Django-Anymail\nDESCRIPTION: This snippet lists the Python packages and their versions required to build the documentation for the Django-Anymail project. It includes Pygments for syntax highlighting, readme-renderer for README parsing, Sphinx for documentation generation, sphinx-rtd-theme for the ReadTheDocs theme, and sphinxcontrib-googleanalytics for Google Analytics integration.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nPygments~=2.18.0\nreadme-renderer~=41.0\nsphinx~=7.4\nsphinx-rtd-theme~=2.0.0\nsphinxcontrib-googleanalytics~=0.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Email Backend in Django Settings\nDESCRIPTION: Sets the Django EMAIL_BACKEND setting to use Anymail's Mailgun backend. This is part of the standard configuration needed to send emails through Mailgun with Django-Anymail.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/CHANGELOG.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.mailgun.EmailBackend\" # new\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Live ESP APIs\nDESCRIPTION: Example showing how to run integration tests that make actual API calls to an ESP (Mailgun), requiring API keys set via environment variables.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/contributing.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ export ANYMAIL_TEST_MAILGUN_API_KEY='your-Mailgun-API-key'\n$ export ANYMAIL_TEST_MAILGUN_DOMAIN='mail.example.com'  # sending domain for that API key\n$ tox -e django42-py311-all tests.test_mailgun_integration\n```\n\n----------------------------------------\n\nTITLE: HTML Email Content in Multipart Message\nDESCRIPTION: HTML portion of the multipart email message showing basic formatting. This represents the HTML alternative content that would be displayed in email clients that support HTML rendering.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/tests/test_files/sample_email.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n                            <body>Hi Bob, This is a message. Thanks!\n                            <br>\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Setting Anymail Requirements in Python\nDESCRIPTION: This snippet shows how to set Django-Anymail version requirements in a Python project's dependencies.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/CHANGELOG.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango-anymail~=7.2\n```\n\n----------------------------------------\n\nTITLE: Configuring MailerSend Email Backend in Django Settings\nDESCRIPTION: Sets the Django EMAIL_BACKEND setting to use Anymail's MailerSend backend for sending emails through the MailerSend API.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/esps/mailersend.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"anymail.backends.mailersend.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Sphinx\nDESCRIPTION: Commands to build Anymail's documentation using Sphinx via tox and serve it locally for preview.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/contributing.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install -r requirements-dev.txt\n$ tox -e docs  # build the docs using Sphinx\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally\nDESCRIPTION: Command to run Python's built-in HTTP server to locally preview the built documentation.\nSOURCE: https://github.com/anymail/django-anymail/blob/main/docs/contributing.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ (cd .tox/docs/_html; python -m http.server 8123 --bind 127.0.0.1)\n```"
  }
]