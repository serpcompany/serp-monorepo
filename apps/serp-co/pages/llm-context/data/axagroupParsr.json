[
  {
    "owner": "axa-group",
    "repo": "parsr",
    "content": "TITLE: Starting Parsr API Server\nDESCRIPTION: Command to start the Parsr API server which will listen on localhost:3001.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/usage.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start:api\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for Parsr\nDESCRIPTION: Command to install required npm packages for Parsr in the installation directory.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/usage.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Parsr Web Viewer on Linux/MacOS\nDESCRIPTION: Command to launch the web viewer demo interface on Linux/MacOS systems.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/usage.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start:web:vue\n```\n\n----------------------------------------\n\nTITLE: Installing Vue.js Project Dependencies\nDESCRIPTION: Installs all required node modules and dependencies for the Vue.js project as specified in package.json\nSOURCE: https://github.com/axa-group/parsr/blob/master/demo/vue-viewer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Parsr API Server\nDESCRIPTION: Command to install the Parsr API server dependencies.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/usage.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run install:api\n```\n\n----------------------------------------\n\nTITLE: Running Jupyter Notebook for Parsr Demo\nDESCRIPTION: This command starts the Jupyter notebook for the Parsr demo. It launches Jupyter Lab with the specified notebook file using pipenv to ensure the correct environment is used.\nSOURCE: https://github.com/axa-group/parsr/blob/master/demo/parsr-jupyter-demo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npipenv run jupyter lab notebook.ipynb\n```\n\n----------------------------------------\n\nTITLE: Running Parsr via Command Line on Linux/MacOS\nDESCRIPTION: Example command for processing a document through Parsr CLI on Linux/MacOS with various parameters including input file, output folder, document name, and configuration.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/usage.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run run:debug -- --input-file samples/t1.pdf --output-folder dist/ --document-name example --config server/defaultConfig.json --pretty-logs\n```\n\n----------------------------------------\n\nTITLE: Document Upload using curl\nDESCRIPTION: POST request to upload a document with optional configuration file to the Parsr API. Uses multipart/form-data to send both the document and configuration.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/api-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST \\\n  http://localhost:3001/api/v1/document \\\n  -H 'Content-Type: multipart/form-data' \\\n  -F 'file=@/path/to/file.pdf;type=application/pdf' \\\n  -F 'config=@/path/to/config.json;type=application/json'\n```\n\n----------------------------------------\n\nTITLE: Queue Status Check using curl\nDESCRIPTION: GET request to check the status of a document processing queue using the queue ID.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/api-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X GET \\\n  http://localhost:3001/api/v1/queue/00cafe4463b9c12aac145b3ee8f00d\n```\n\n----------------------------------------\n\nTITLE: Running Parsr Docker Containers\nDESCRIPTION: Command to start Parsr using Docker Compose. Launches two containers - an API server on port 3001 and a demo UI on port 8080. Creates a persistent Docker volume for data storage.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for ABBYY FineReader\nDESCRIPTION: Required environment variables that must be configured on the host running Parsr to enable ABBYY FineReader Server integration.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/abbyy-finereader.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nABBYY_SERVER_URL : The network address of the ABBYY FineReader Server.\nABBYY_SERVER_VER : The major version number of the ABBYY FineReader Server. For example: 14 for ABBYY FineReader Server 14.01.\nABBYY_WORKFLOW : The name of the server's workflow to be called to process the file.\n```\n\n----------------------------------------\n\nTITLE: Checking the Complete Installation of Parsr\nDESCRIPTION: Verifies the successful installation of Parsr by running its test suite and starting the API, allowing local testing via accessing the specified URL.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/installation.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test\nnpm run start:api\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian-based Linux\nDESCRIPTION: This snippet involves adding a PPA repository, updating the package list, and installing Node.js, qpdf, imagemagick, tesseract, and various Python packages including camelot-py and pdfminer.six.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo add-apt-repository ppa:ubuntuhandbook1/apps\nsudo apt-get update\nsudo apt-get install nodejs npm qpdf imagemagick tesseract-ocr libtesseract-dev python3-tk ghostscript python3-pip\npip install camelot-py[cv] numpy pillow scikit-image PyPDF2 pdfminer.six sklearn\n```\n\n----------------------------------------\n\nTITLE: Building Dataset Script Usage\nDESCRIPTION: This snippet shows the usage instructions for the `build_dataset.py` script, including positional arguments for specifying the input markdown directory, the input JSON directory, and the output directory for the generated CSV files. It also lists the optional help argument.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/processing/MlHeadingDetectionModule/train_model/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nusage: build_dataset.py [-h] md_dir json_dir out_dir\n\nExtracts features to csv from .json files using .md files as labels\n\npositional arguments:\n  md_dir      folder containing the .md files (labels)\n  json_dir    folder containing the .json files (data)\n  out_dir     folder in which to save the .csv files\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Arch Linux\nDESCRIPTION: This snippet installs various packages required for Parsr on Arch Linux, including Node.js, qpdf, imagemagick, and pip. It also installs Python packages like camelot-py and pdfminer.six.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npacman -S nodejs npm qpdf imagemagick python-pdfminer tesseract python-pip\npip install camelot-py[cv] numpy pillow scikit-image PyPDF2 pdfminer.six sklearn\n```\n\n----------------------------------------\n\nTITLE: Installing Parsr Dependencies on MacOS\nDESCRIPTION: Install necessary packages using Homebrew, including Node.js, Python, qpdf, imagemagick, and tesseract. The snippet also includes upgrading Python and setting up pip for Python package installation.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbrew install node python qpdf imagemagick tesseract tesseract-lang tcl-tk ghostscript\nbrew upgrade python\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py\npip3 install pdfminer.six\npip3 install camelot-py[cv]\npip3 install numpy pillow scikit-image\npython2.7 -m pip install PyPDF2\n```\n\n----------------------------------------\n\nTITLE: Running Vue.js Project Tests\nDESCRIPTION: Executes the test suite configured for the Vue.js project\nSOURCE: https://github.com/axa-group/parsr/blob/master/demo/vue-viewer/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Parsr via Command Line on Windows\nDESCRIPTION: Example command for processing a document through Parsr CLI on Windows with various parameters including input file, output folder, document name, and configuration.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/usage.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncmd /C \"npm run run:debug -- --input-file samples/t1.pdf --output-folder samples --document-name example --config server/defaultConfig.json --pretty-logs\"\n```\n\n----------------------------------------\n\nTITLE: Building Parsr Docker Image\nDESCRIPTION: Command to build Parsr and its dependencies using a custom Docker Compose configuration file. This creates a local Docker image of the Parsr application.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose-build.yml build\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Element Structure\nDESCRIPTION: Example of a table of contents element with an array of content items including page numbers.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/simple-json-output.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"tableOfContent\",\n    \"content\": [\n      \"Introduction - 3\",\n      \"Get Sarted - 5\",\n      \"First Use - 7\",\n      \"Settings - 25\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Vue.js Development Server\nDESCRIPTION: Starts the development server with hot-reload capability for local development and testing\nSOURCE: https://github.com/axa-group/parsr/blob/master/demo/vue-viewer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Building Vue.js Project for Production\nDESCRIPTION: Compiles and minifies the Vue.js project for production deployment, creating optimized static assets\nSOURCE: https://github.com/axa-group/parsr/blob/master/demo/vue-viewer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Example\nDESCRIPTION: This snippet shows an example of a table rendered in markdown format. It demonstrates how the module can export tabular data.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/output/markdown/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"## Table 2-1. Simulated fuel savings from isolated cycle improvements\n\n| **Cycle Name** | **KI (1/km)** | **Distance (mi)** | **Percent Fuel Savings** |<|<|<|  \n|---|---|---|---|---|---|---|  \n|^|^|^| **Improved Speed** | **Decreased Accel** | **Eliminate Stops** | **Decreased Idle** |  \n| 2012\\_2 | 3.30 | 1.3 | 5.9% | 9.5% | 29.2% | 17.4% |  \n| 2145\\_1 | 0.68 | 11.2 | 2.4% | 0.1% | 9.5% | 2.7% |  \n| 4234\\_1 | 0.59 | 58.7 | 8.5% | 1.3% | 8.5% | 3.3% |  \n| 2032\\_2 | 0.17 | 57.8 | 21.7% | 0.3% | 2.7% | 1.2% |  \n| 4171\\_1 | 0.07 | 173.9 | 58.1% | 1.6% | 2.1% | 0.5% |  \n\"\n```\n\n----------------------------------------\n\nTITLE: Running Parsr Tests\nDESCRIPTION: Command to execute the test suite for Parsr.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/usage.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies for Parsr\nDESCRIPTION: To install Node.js dependencies, navigate to the Parsr root directory and run npm install which configures the necessary packages for the application.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/installation.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Matcher Module in Parsr\nDESCRIPTION: Example configuration for the Regex Matcher Module that defines case sensitivity, global matching, and query patterns with labels for numbers and units.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/processing/RegexMatcherModule/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"isCaseSensitive\": true,\n  \"isGlobal\": true,\n  \"queries\": [\n    {\n      \"label\": \"Number\",\n      \"regex\": \"[0-9]+\"\n    },\n    {\n      \"label\": \"unit\",\n      \"regex\": \"second|seconds|mph|kilometers|km\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Cognitive Services OCR Extractor in JSON\nDESCRIPTION: This JSON snippet shows how to configure the Microsoft Cognitive Services OCR extractor in the project's configuration file. It includes settings for the API key and endpoint.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/input/ms-cognitive-services/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"extractor\": {\n  \"pdf\": \"...\",\n  \"ocr\": \"ms-cognitive-services\",\n  \"credentials\": {\n    \"OCP_APIM_SUBSCRIPTION_KEY\": \"...\",\n    \"OCP_APIM_ENDPOINT\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Vision API Credentials JSON\nDESCRIPTION: JSON configuration structure for setting up Google Vision API credentials in the extractor module. Includes fields for API authentication and project identification required for OCR functionality.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/input/google-vision/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extractor\": {\n    \"pdf\": \"...\",\n    \"ocr\": \"google-vision\",\n    \"credentials\": {\n      \"type\": \"...\",\n      \"project_id\": \"...\",\n      \"private_key_id\": \"...\",\n      \"private_key\": \"...\",\n      \"client_email\": \"...\",\n      \"client_id\": \"...\",\n      \"auth_uri\": \"...\",\n      \"token_uri\": \"...\",\n      \"auth_provider_x509_cert_url\": \"...\",\n      \"client_x509_cert_url\": \"...\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon Textract Credentials in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the Amazon Textract input module with AWS credentials.  It requires the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` to be properly set within the `credentials` section. These keys grant the application access to Amazon Textract services.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/input/amazon-textract/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n  \"extractor\": {\n    \"pdf\": \"...\",\n    \"ocr\": \"amazon-textract\",\n    \"credentials\": {\n      \"AWS_ACCESS_KEY_ID\": \"...\",\n      \"AWS_SECRET_ACCESS_KEY\": \"...\"\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring ABBYY FineReader Credentials in Parsr\nDESCRIPTION: JSON configuration block for setting up ABBYY FineReader Server credentials in Parsr. Includes server URL, version number, and workflow name settings.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/input/abbyy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extractor\": {\n    \"pdf\": \"abbyy\",\n    \"ocr\": \"abbyy\",\n    \"credentials\": {\n      \"ABBYY_SERVER_URL\": \"...\",\n      \"ABBYY_SERVER_VER\": \"...\",\n      \"ABBYY_WORKFLOW\": \"...\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Parsr-fix-pdf-font with parameters\nDESCRIPTION: This command line instruction shows how to execute the Parsr-fix-pdf-font utility. It uses node to run the javascript file and specifies the input PDF file, the desired output file name, and the OCR language to use.  It requires nodejs installed in the environment.\nSOURCE: https://github.com/axa-group/parsr/blob/master/parsr-fix-pdf-font/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\ncd parsr-fix-pdf-font\nnode parsr-fix-pdf-font.js --input ./test/testPage.pdf --output pdf.pdf --lang eng\n```\n```\n\n----------------------------------------\n\nTITLE: Running Doc Versioning Application in Shell\nDESCRIPTION: Command to start the document versioning application after installing all required dependencies including Flask, PyWebview, Parsr-Client, and markdown packages.\nSOURCE: https://github.com/axa-group/parsr/blob/master/demo/doc-versioning/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./run.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Parsr Jupyter Demo\nDESCRIPTION: This command installs the necessary dependencies for the Parsr Jupyter notebook demo using pipenv. It should be run in the 'demo/parsr-jupyter-demo' folder after installing pipenv.\nSOURCE: https://github.com/axa-group/parsr/blob/master/demo/parsr-jupyter-demo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npipenv install\n```\n\n----------------------------------------\n\nTITLE: Starting Parsr API Server on Windows\nDESCRIPTION: First command in the two-step process to start the web viewer on Windows - launches the API server.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/usage.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start:api\n```\n\n----------------------------------------\n\nTITLE: Starting Parsr Vue Viewer on Windows\nDESCRIPTION: Second command in the two-step process to start the web viewer on Windows - installs and launches the Vue frontend.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/usage.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd demo/vue-viewer && npm install && npm run serve\n```\n\n----------------------------------------\n\nTITLE: Cloning Parsr Repository in Bash\nDESCRIPTION: This command clones the forked Parsr repository to the contributor's local machine. It uses SSH for authentication.\nSOURCE: https://github.com/axa-group/parsr/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:YOUR-GITHUB-USERNAME/Parsr.git\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Issue in Bash\nDESCRIPTION: These commands navigate to the Parsr directory, checkout the develop branch, and create a new branch for working on an issue. The branch name follows the convention 'issue/[issue-number]-[description]'.\nSOURCE: https://github.com/axa-group/parsr/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd Parsr/\n$ git checkout develop\n$ git checkout -b issue/123-solve-the-issue # pick a better title\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific Version in Git\nDESCRIPTION: This command demonstrates how to checkout a specific version of the project using Git. In this example, it checks out version 1.0.2.\nSOURCE: https://github.com/axa-group/parsr/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout 1.0.2\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on MacOS\nDESCRIPTION: Install Homebrew on MacOS for managing packages needed by Parsr, through a terminal command that retrieves and executes Homebrew's installation script.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Path for Windows Command Prompt\nDESCRIPTION: This snippet adjusts the system PATH variable to include where.exe, needed for Parsr installation, by using the setx command in PowerShell.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsetx PATH \"$env:PATH;C:\\Windows\\System32\" -m\n```\n\n----------------------------------------\n\nTITLE: Training Model Script Usage\nDESCRIPTION: This snippet shows the usage instructions for the `train.py` script, including positional arguments for specifying the dataset directory containing the CSV files and the output directory for saving the trained models. It also lists the optional help argument.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/processing/MlHeadingDetectionModule/train_model/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nusage: train.py [-h] dataset_dir out_dir\n\nTrain a random forest model to recognize headings and a decision tree model to compute their levels.\n\npositional arguments:\n  dataset_dir  folder containing the .csv files generated by build_dataset.py\n  output_dir      folder in which to save the trained models\n\noptional arguments:\n  -h, --help   show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Installing MuPDF across Different Platforms\nDESCRIPTION: Provides commands for installing MuPDF on various platforms including Debian-based Linux, Arch Linux, MacOS, and Windows using respective package managers.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install mupdf mupdf-tools\npacman -S mupdf-tools\nbrew install mupdf-tools\nchoco install mupdf\n```\n\n----------------------------------------\n\nTITLE: Installing Pandoc across Different Platforms\nDESCRIPTION: Detailed instructions to install Pandoc using different package managers appropriate for each platform: Debian-based Linux, Arch Linux, MacOS, and Windows.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/installation.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install pandoc\npacman -S pandoc\nbrew install pandoc\nchoco install pandoc\n```\n\n----------------------------------------\n\nTITLE: Installing Chocolatey on Windows\nDESCRIPTION: To simplify package management on Windows, install Chocolatey following the instructions provided in its installation guide.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nchoco install qpdf imagemagick\n```\n\n----------------------------------------\n\nTITLE: Linting Vue.js Project Files\nDESCRIPTION: Runs the linter to check and fix code style issues in the project files\nSOURCE: https://github.com/axa-group/parsr/blob/master/demo/vue-viewer/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Windows Document Upload using curl\nDESCRIPTION: Windows-specific version of the document upload command using double quotes instead of single quotes.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/api-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST \\\n  http://localhost:3001/api/v1/document \\\n  -H \"Content-Type: multipart/form-data\" \\\n  -F \"file=@/path/to/file.pdf;type=application/pdf\" \\\n  -F \"config=@/path/to/config.json;type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Queue Status Response\nDESCRIPTION: JSON response format for a processing queue status showing estimated time, progress percentage, and current status.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/api-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"estimated-remaining-time\": 30,\n  \"progress-percentage\": 10,\n  \"start-date\": \"2018-12-31T12:34:56.789Z\",\n  \"status\": \"Detecting reading order...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Complete Response\nDESCRIPTION: JSON response returned when document processing is complete, containing links to various output formats.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/api-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"00cafe4463b9c12aac145b3ee8f00d\",\n  \"json\": \"/api/v1/json/00cafe4463b9c12aac145b3ee8f00d\",\n  \"csv\": \"/api/v1/csv/00cafe4463b9c12aac145b3ee8f00d\",\n  \"text\": \"/api/v1/text/00cafe4463b9c12aac145b3ee8f00d\",\n  \"markdown\": \"/api/v1/markdown/00cafe4463b9c12aac145b3ee8f00d\"\n}\n```\n\n----------------------------------------\n\nTITLE: CSV File Example\nDESCRIPTION: Example of CSV output format showing table data with multiline cells and empty columns.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/api-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\n3x4 table;Empty column;Numbers\n;;\nItem A;;3.14\n\"Item B\non two lines\";;1,234.56\n```\n\n----------------------------------------\n\nTITLE: ML Heading Detection Module Documentation\nDESCRIPTION: Primary documentation explaining the purpose, functionality, and dependencies of the ML heading detection module. The module analyzes text characteristics using machine learning to identify headings and determine their hierarchy levels.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/processing/MLHeadingDetectionModule/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ML Heading Detection Module\n\n## Purpose\n\nCreate headings from a collection of paragraphs.\n\n## What it does\n\nIt creates new heading elements by detecting headings lines from all lines contained in paragraphs.\n\n## Dependencies\n\n- [Lines to paragraph Module](../LinesToParagraphModule/README.md)\n\n## How it works\n\nIt uses a series of Machine Learning methods to determine if a block of text is a Heading, based on properties like font styles, text color, number of words, etc.\nAlso, for all the detected Headings it calculates its level property based on font size, font weight, color, etc.\n\n## Accuracy\n\nAccuracy depends on the quality of the trained models.\n\nBetter trained models can be easily imported into this module by following the instruction in the [Training Module Guide](./train_model/README.md).\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Page Number Detection Module\nDESCRIPTION: Module documentation explaining the purpose, functionality, dependencies and limitations of the page number detection system. Relies on the Header Footer Detection module for accurate page margin information.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/processing/PageNumberDetectionModule/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Page Number Detection Module\n\n## Purpose\n\nDetects the page number for each page in a document.\n\n## What it does\n\nSearches for \"number\" paragraphs outside the page margins, and sets the 'isPageNumber' property to each matched paragraph in the document.\n\n## Dependencies\n\n- [Header Footer Detection](../HeaderFooterDetectionModule/README.md)\n\n## Limitations\n\nThis module relies on *accurate page margins* set by the Header Footer Detection Module.\n```\n\n----------------------------------------\n\nTITLE: Parsing PdfMiner Figure XML Output\nDESCRIPTION: Example of XML output from PdfMiner showing how figure names are used to match image XObjects. The figure name 'Image17' is used for matching with image identifiers.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/processing/ImageDetectionModule/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<figure name=\"Image17\" bbox=\"72.000,244.190,373.280,506.640\">\n<image width=\"301\" height=\"262\" />\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Parsing PDF XObject Dictionary XML\nDESCRIPTION: Example of dumppdf XML output showing the internal PDF XObject dictionary structure. The Image17 key is linked to reference ID 17, which corresponds to the extracted image file 'img-0017'.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/processing/ImageDetectionModule/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>XObject</key>\n<value><dict size=\"1\">\n<key>Image17</key>\n<value><ref id=\"17\" /></value>\n</dict></value>\n```\n\n----------------------------------------\n\nTITLE: Output Metadata Structure from Regex Matcher Module\nDESCRIPTION: Example output showing the document.metadata property after execution of the Regex Matcher Module. It shows matches for a number and a unit with their element IDs and match details.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/processing/RegexMatcherModule/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"elements\": [\n      561\n    ],\n    \"type\": \"regex\",\n    \"data\": {\n      \"name\": \"Number\",\n      \"regex\": \"[0-9]+\",\n      \"fullMatch\": \"2008\",\n      \"groups\": []\n    }\n  },\n    {\n    \"id\": 2,\n    \"elements\": [\n      684\n    ],\n    \"type\": \"regex\",\n    \"data\": {\n      \"name\": \"unit\",\n      \"regex\": \"second|seconds|mph|kilometers|km\",\n      \"fullMatch\": \"mph\",\n      \"groups\": []\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Exporting Document Content as Simplified JSON\nDESCRIPTION: Example of how the Simple JSON module exports document content from a PDF file. The JSON structure organizes content by type (headings, paragraphs) with relevant attributes like heading level and text content.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/output/simpleJson/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"heading\",\n    \"level\": 2,\n    \"content\": \"2 Quantifying Fuel-Saving Opportunities from Specific Driving Behavior Changes\"\n  },\n  {\n    \"type\": \"paragraph\",\n    \"content\": \"2.1 Savings from Improving Individual Driving Profiles\"\n  },\n  {\n    \"type\": \"heading\",\n    \"level\": 5,\n    \"content\": \"2.1.1 Drive Profile Subsample from Real-World Travel Survey\"\n  },\n  {\n    \"type\": \"paragraph\",\n    \"content\": \"The interim report (Gonder et al. 2010) included results from detailed analyses on five cycles selected from a large set of real-world global positioning system (GPS) travel data collected in 2006 as part of a study by the Texas Transportation Institute and the Texas Department of Transportation (Ojah and Pearson 2008). The cycles were selected to reflect a range of kinetic intensity (KI) values. (KI represents a ratio of characteristic acceleration to aerodynamic speed and has been shown to be a useful drive cycle classification parameter [O'Keefe et al. 2007].) To determine the maximum possible cycle improvement fuel savings, the real-world cycles were converted into equivalent \\\"ideal\\\" cycles using the following steps:\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Document Structure JSON Example\nDESCRIPTION: Example JSON output showing the hierarchical document structure including metadata, pages, margins, boxes, rotations, and nested elements down to word level. The example demonstrates how document content is organized with properties like position, dimensions, and text content.\nSOURCE: https://github.com/axa-group/parsr/blob/master/server/src/output/json/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": [],\n  \"pages\": [\n    {\n      \"margins\": {\n        \"top\": -1,\n        \"left\": -1,\n        \"bottom\": -1,\n        \"right\": -1\n      },\n      \"box\": {\n        \"l\": 0,\n        \"t\": 0,\n        \"w\": 612,\n        \"h\": 792\n      },\n      \"rotation\": {\n        \"degrees\": 0,\n        \"origin\": { \"x\": 0, \"y\": 0 },\n        \"translation\": { \"x\": 0, \"y\": 0 }\n      },\n      \"pageNumber\": 1,\n      \"elements\": [\n        {\n          \"id\": 3555,\n          \"type\": \"heading\",\n          \"properties\": { \"order\": 0 },\n          \"metadata\": [],\n          \"box\": { \"l\": 72, \"t\": 74.13, \"w\": 451.37, \"h\": 32.22 },\n          \"content\": [\n            {\n              \"id\": 3466,\n              \"type\": \"line\",\n              \"properties\": { \"order\": 0 },\n              \"metadata\": [],\n              \"box\": { \"l\": 72, \"t\": 74.13, \"w\": 451.37, \"h\": 15 },\n              \"content\": [\n                {\n                  \"id\": 56,\n                  \"type\": \"word\",\n                  \"properties\": { \"order\": 0 },\n                  \"metadata\": [],\n                  \"box\": { \"l\": 72, \"t\": 74.13, \"w\": 8.34, \"h\": 15 },\n                  \"content\": \"2\",\n                  \"font\": 1,\n                  \"fontSize\": 15\n                },\n                {\n                  \"id\": 57,\n                  \"type\": \"word\",\n                  \"properties\": { \"order\": 1 },\n                  \"metadata\": [],\n                  \"box\": { \"l\": 93.6, \"t\": 74.13, \"w\": 83.34, \"h\": 15 },\n                  \"content\": \"Quantifying\",\n                  \"font\": 1,\n                  \"fontSize\": 15\n                },\n                {\n                  \"id\": 58,\n                  \"type\": \"word\",\n                  \"properties\": { \"order\": 2 },\n                  \"metadata\": [],\n                  \"box\": { \"l\": 181.1, \"t\": 74.13, \"w\": 84.99, \"h\": 15 },\n                  \"content\": \"Fuel-Saving\",\n                  \"font\": 1,\n                  \"fontSize\": 15\n                },\n                {\n                  \"id\": 59,\n                  \"type\": \"word\",\n                  \"properties\": { \"order\": 3 },\n                  \"metadata\": [],\n                  \"box\": { \"l\": 270.25, \"t\": 74.13, \"w\": 98.27, \"h\": 15 },\n                  \"content\": \"Opportunities\",\n                  \"font\": 1,\n                  \"fontSize\": 15\n                }\n              ]\n            }\n          ],\n          \"level\": 1\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Base JSON Output Structure\nDESCRIPTION: The root structure of the simple JSON output file, showing the basic element format with type, level and content fields.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/simple-json-output.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"heading\" | \"paragraph\" | \"list\" | \"table\" | \"tableOfContent\",\n    \"level\": 1,\n    \"content\": \"...\"\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Paragraph Element Structure\nDESCRIPTION: Example of a paragraph element structure containing text content.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/simple-json-output.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"type\": \"paragraph\",\n    \"content\": \"Figure 2-1 extends the analysis from eliminating stops for the five example cycles and examines the additional benefit from avoiding slow-and-go driving below various speed thresholds.\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Heading Element Structure\nDESCRIPTION: Example of a heading element structure with level and content fields.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/simple-json-output.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"type\": \"heading\",\n    \"level\": 2,\n    \"content\": \"2 Quantifying Fuel-Saving Opportunities from Specific Driving Behavior Changes\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Table Element Structure\nDESCRIPTION: Example of a table element with multiple rows, columns and cell spans using special characters for formatting.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/simple-json-output.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"table\",\n    \"content\": [\n      [\n        \"**Cycle Name**\",\n        \"**KI (1/km)**\",\n        \"**Distance (mi)**\",\n        \"**Percent Fuel Savings**\",\n        \"<\",\n        \"<\",\n        \"<\"\n      ],\n      [\n        \"^\",\n        \"^\",\n        \"^\",\n        \"**Improved Speed**\",\n        \"**Decreased Accel**\",\n        \"**Eliminate Stops**\",\n        \"**Decreased Idle**\"\n      ],\n      [\n        \"4171\\_1\",\n        \"0.07\",\n        \"173.9\",\n        \"58.1%\",\n        \"1.6%\",\n        \"2.1%\",\n        \"0.5%\"\n      ]\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: List Element Structure\nDESCRIPTION: Example of a list element with numbered items separated by newlines.\nSOURCE: https://github.com/axa-group/parsr/blob/master/docs/simple-json-output.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"list\",\n    \"content\": \"1. Calculate the trip distance of each sample trip.\\n2. Eliminate stop-and-go and idling within each trip.\\n3. Set the acceleration rate to 3 mph/s.\\n4. Set the cruising speed to 40 mph.\\n5. Continue cruising at 40 mph until the trip distance is reached.\"\n  }\n```"
  }
]