[
  {
    "owner": "input-output-hk",
    "repo": "nami",
    "content": "TITLE: Verify Cardano Message with COSE Signature\nDESCRIPTION: This function verifies a Cardano message by checking the address, payload, and signature against a provided COSE Sign1 structure. It extracts the address and public key from the COSE headers, verifies the payload, and then validates the signature using the public key.  It relies on `cardano-serialization-lib` and `emurgo-message-signing` libraries.  The function throws an error if any verification step fails and returns a boolean indicating whether the signature is valid.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/MessageSigning.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst verify = (address, payload, coseSign1Hex) => {\n  const coseSign1 = MS.COSESign1.from_bytes(Buffer.from(coseSign1Hex, 'hex'));\n  const payloadCose = coseSign1.payload();\n\n  if (verifyPayload(payload, payloadCose))\n    throw new Error('Payload does not match');\n\n  const protectedHeaders = coseSign1\n    .headers()\n    .protected()\n    .deserialized_headers();\n  const addressCose = S.Address.from_bytes(\n    protectedHeaders.header(MS.Label.new_text('address')).as_bytes()\n  );\n\n  // Commented out the below line in favor of CIP-30, only use if you are using the deprecated window.cardano.signedData(address, payload)\n  //const publicKeyCose = S.PublicKey.from_bytes(protectedHeaders.key_id());\n  const key = MS.COSEKey.from_bytes(\n          Buffer.from(coseKey, 'hex')\n      );\n  const publicKeyBytes = key\n      .header(\n          MS.Label.new_int(\n              MS.Int.new_negative(\n                  MS.BigNum.from_str('2')\n              )\n          )\n      )\n      .as_bytes();\n  const publicKeyCose =\n      APILoader.Cardano.PublicKey.from_bytes(publicKeyBytes);\n\n  if (!verifyAddress(address, addressCose, publicKeyCose))\n    throw new Error('Could not verify because of address mismatch');\n\n  const signature = S.Ed25519Signature.from_bytes(coseSign1.signature());\n  const data = coseSign1.signed_data().to_bytes();\n  return publicKeyCose.verify(data, signature);\n};\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Verify Cardano Message\nDESCRIPTION: This is an example of how to use the `verify` function.  It takes the address, payload, and COSE signature (all hex encoded) as input and returns a boolean indicating whether the signature is valid.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/MessageSigning.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nverify(<address>, <payload>, <cose>) //: true or false\n```\n\n----------------------------------------\n\nTITLE: Register Network Change Event - Nami Experimental API - JavaScript\nDESCRIPTION: This code demonstrates how to register an event listener for network changes within the Nami wallet. The event listener is triggered when the user switches between Cardano networks. The callback function receives the network ID (0 for testnet, 1 for mainnet). The `eventName` parameter should be \"networkChange\" and the callback should accept a number representing the network ID.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnetworkChange: ((network : number) => void)\n```\n\n----------------------------------------\n\nTITLE: Register Account Change Event - Nami Experimental API - JavaScript\nDESCRIPTION: This snippet shows how to register a callback function to be executed when the user's account changes in the Nami wallet.  The callback receives an array of base addresses. The `eventName` parameter should be \"accountChange\" and the callback should accept an array of BaseAddress objects.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naccountChange: ((addresses : [BaseAddress]) => void)\n```\n\n----------------------------------------\n\nTITLE: Verify Address Integrity\nDESCRIPTION: This function verifies if the provided address matches the address extracted from the COSE structure and validates it against a public key. It first checks if the Bech32 encoded addresses match. Then, it attempts to reconstruct the address as a BaseAddress or RewardAddress and compares the reconstructed address with the original. It uses the `cardano-serialization-lib` library for address handling.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/MessageSigning.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst verifyAddress = (address, addressCose, publicKeyCose) => {\n  const checkAddress = S.Address.from_bytes(Buffer.from(address, 'hex'));\n  if (addressCose.to_bech32() !== checkAddress.to_bech32()) return false;\n  // check if BaseAddress\n  try {\n    const baseAddress = S.BaseAddress.from_address(addressCose);\n    //reconstruct address\n    const paymentKeyHash = publicKeyCose.hash();\n    const stakeKeyHash = baseAddress.stake().as_pub_key();\n    const reconstructedAddress = S.BaseAddress.new(\n      checkAddress.network_id(),\n      S.Credential.new_pub_key(paymentKeyHash),\n      S.Credential.new_pub_key(stakeKeyHash)\n    );\n    if (\n      checkAddress.to_bech32() !== reconstructedAddress.to_address().to_bech32()\n    )\n      return false;\n\n    return true;\n  } catch (e) {}\n  // check if RewardAddress\n  try {\n    //reconstruct address\n    const stakeKeyHash = publicKeyCose.hash();\n    const reconstructedAddress = S.RewardAddress.new(\n      checkAddress.network_id(),\n      S.Credential.new_pub_key(stakeKeyHash)\n    );\n    if (\n      checkAddress.to_bech32() !== reconstructedAddress.to_address().to_bech32()\n    )\n      return false;\n\n    return true;\n  } catch (e) {}\n  return false;\n};\n```\n\n----------------------------------------\n\nTITLE: Get Collateral Example - Nami Experimental API - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the collateral utxos using the experimental API of the Nami wallet. It assumes that the `cardano` object is available in the global scope and that the Nami wallet is enabled. The method returns an array of transaction unspent outputs.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.getCollateral() : [TransactionUnspentOutput]\n```\n\n----------------------------------------\n\nTITLE: Deregister Event - Nami Experimental API - JavaScript\nDESCRIPTION: This is to deregister the events in Nami (works also with anonymous functions).\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Verify Payload Match\nDESCRIPTION: This function verifies if the provided payload matches the payload within the COSE structure. It converts both payloads from hex to Buffer objects and compares them using the `compare` method. It returns a boolean indicating whether the payloads match.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/MessageSigning.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst verifyPayload = (payload, payloadCose) => {\n  return Buffer.from(payloadCose, 'hex').compare(Buffer.from(payload, 'hex'));\n};\n```\n\n----------------------------------------\n\nTITLE: Sign Transaction Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This snippet demonstrates how to sign a transaction using the Nami wallet's deprecated API. `Transaction` is a hex encoded cbor string. `TransactionWitnessSet` is a hex encoded cbor string. `partialSign` is a boolean indicating whether partial signing is allowed.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.signTx(tx: Transaction, partialSign?: boolean) : TransactionWitnessSet\n```\n\n----------------------------------------\n\nTITLE: Submit Transaction Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This code snippet illustrates how to submit a transaction to the Cardano blockchain using the Nami wallet's deprecated API. The `tx` parameter is the transaction as a hex-encoded cbor string. The function returns the transaction hash if successful, otherwise it throws an error.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.submitTx(tx : Transaction) : hash32\n```\n\n----------------------------------------\n\nTITLE: Get UTXOs Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This snippet shows how to retrieve UTXOs (Unspent Transaction Outputs) from the Nami wallet using the deprecated API. It retrieves UTXOs based on optional `amount` and `paginate` parameters which are meant to filter the overall utxo set of a user's wallet. TransactionUnspentOutput is a hex encoded bytes string.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.getUtxos(amount?: Value, paginate?: {page: number, limit: number}) : [TransactionUnspentOutput]\n```\n\n----------------------------------------\n\nTITLE: Get Collateral Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This code retrieves the collateral UTXOs from the Nami wallet using the deprecated API. The return type is an array of TransactionUnspentOutput, where TransactionUnspentOutput is a hex encoded bytes string.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.getCollateral() : [TransactionUnspentOutput]\n```\n\n----------------------------------------\n\nTITLE: Sign Data Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This snippet shows how to sign data using the Nami wallet's deprecated API. The `payload` is a hex encoded utf8 string. `CoseSign1` is a hex encoded bytes string. The signature is returned with either the Payment Credential (if the address is BaseAddress) or the Stake Credential (if the address is RewardAddress).\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.signData(address: BaseAddress|RewardAddress, payload: string) : CoseSign1\n```\n\n----------------------------------------\n\nTITLE: Get Balance Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the user's balance using the Nami wallet's deprecated API. The balance is returned as a hex-encoded CBOR string representing a `Value` object.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.getBalance() : Value\n```\n\n----------------------------------------\n\nTITLE: Network Change Event Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This snippet illustrates how to listen for network change events using the Nami wallet's deprecated API. The callback function receives the network ID, where 0 represents testnet and 1 represents mainnet.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.onNetworkChange((network : number) => void)\n```\n\n----------------------------------------\n\nTITLE: Account Change Event Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This code snippet demonstrates how to listen for account change events in the Nami wallet using the deprecated API. The callback will return an array with a single address, which is the same as `cardano.getUsedAddresses()`.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.onAccountChange((addresses : [BaseAddress]) => void)\n```\n\n----------------------------------------\n\nTITLE: Check Wallet Access - Deprecated Nami API - JavaScript\nDESCRIPTION: This snippet illustrates how to check if the Nami wallet has access to the requesting website.  It returns `true` if access is granted, and `false` otherwise. It uses the deprecated API.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.isEnabled() : boolean\n```\n\n----------------------------------------\n\nTITLE: Get Used Addresses Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the user's used addresses from the Nami wallet using the deprecated API.  The function returns an array containing a single BaseAddress, represented as a hex-encoded bytes string.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.getUsedAddresses() : [BaseAddress]\n```\n\n----------------------------------------\n\nTITLE: Get Network ID Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This code demonstrates how to retrieve the network ID from the Nami wallet using the deprecated API. It returns 0 for testnet and 1 for mainnet.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.getNetworkId() : number\n```\n\n----------------------------------------\n\nTITLE: Get Reward Address Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the reward address from the Nami wallet using the deprecated API. It returns an array of length 1 containing the RewardAddress. The RewardAddress is a hex-encoded bytes string.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.getRewardAddress() : [RewardAddress]\n```\n\n----------------------------------------\n\nTITLE: Get Change Address Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This snippet retrieves the change address from the Nami wallet using the deprecated API. It returns the same address as `cardano.getUsedAddresses()`.  The address is a BaseAddress represented as a hex-encoded bytes string.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.getChangeAddress() : BaseAddress\n```\n\n----------------------------------------\n\nTITLE: Get Unused Addresses Example - Deprecated Nami API - JavaScript\nDESCRIPTION: This code illustrates how to retrieve unused addresses from the Nami wallet using the deprecated API.  It always returns an empty array because Nami doesn't utilize multiple addresses per wallet. It is implemented to follow the CIP standards.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncardano.getUnusedAddresses() : [BaseAddress]\n```\n\n----------------------------------------\n\nTITLE: Start Development Server - Shell Script\nDESCRIPTION: This snippet shows the commands to copy the secrets file and start the development server for the Nami wallet extension. It first copies the testing secrets to development secrets and then uses npm start to run the development server.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n# Update secrets file with your own keys\ncp secrets.testing.js secrets.development.js\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Create Production Build - Shell Script\nDESCRIPTION: This snippet shows the commands to copy the secrets file and create the production build for the Nami wallet extension. It first copies the testing secrets to production secrets and then uses npm run build to create the production build.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n# Update secrets file with your own keys\ncp secrets.testing.js secrets.production.js\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Secrets File Copy - Shell Script\nDESCRIPTION: This code copies a secrets file to another file. This is used in development to create a development or production secrets file from a testing secrets file.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n# Update secrets file with your own keys\ncp secrets.testing.js secrets.development.js\n```\n\n----------------------------------------\n\nTITLE: Run Tests - Shell Script\nDESCRIPTION: This snippet shows the command to run the tests for the Nami wallet extension using npm.\nSOURCE: https://github.com/input-output-hk/nami/blob/main/README.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```"
  }
]