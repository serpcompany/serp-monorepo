[
  {
    "owner": "graphprotocol",
    "repo": "graph-node",
    "content": "TITLE: Running Graph Node with Docker Basic Usage\nDESCRIPTION: Basic Docker command to run a Graph Node with environment variables for Postgres, IPFS, and Ethereum configuration. This shows the required parameters that need to be set for a successful deployment.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it \\\n  -e postgres_host=<HOST> \\\n  -e postgres_port=<PORT> \\\n  -e postgres_user=<USER> \\\n  -e postgres_pass=<PASSWORD> \\\n  -e postgres_db=<DBNAME> \\\n  -e ipfs=<HOST>:<PORT> \\\n  -e ethereum=<NETWORK_NAME>:<ETHEREUM_RPC_URL> \\\n  graphprotocol/graph-node:latest\n```\n\n----------------------------------------\n\nTITLE: Running Graph Node with Postgres Connection\nDESCRIPTION: Command to start Graph Node with configuration for Postgres database, Ethereum RPC, and IPFS connections\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p graph-node --release -- \\\n  --postgres-url postgresql://USERNAME[:PASSWORD]@localhost:5432/graph-node \\\n  --ethereum-rpc NETWORK_NAME:[CAPABILITIES]:URL \\\n  --ipfs 127.0.0.1:5001\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Transfer Event Handler\nDESCRIPTION: A complete implementation of an ERC721 Transfer event handler that tracks token ownership. The function extracts the token ID and new owner from the event parameters, creates a Token entity with this data, and saves it to the database.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// This is an example event type generated by `graph-cli`\n// from an Ethereum smart contract ABI\nimport { Transfer } from './types/abis/SomeContract'\n\n// This is an example of an entity type generated from a\n// subgraph's GraphQL schema\nimport { Token } from './types/schema'\n\nexport function handleTransfer(event: Transfer): void {\n    let tokenID = event.params.tokenID.toHex()\n    let token = new Token(tokenID)\n    token.currentOwner = event.params.to\n\n    token.save()\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Node Docker Example with Sample Values\nDESCRIPTION: Example Docker command to run a Graph Node with sample values for all required environment variables. It demonstrates connecting to local PostgreSQL database and IPFS node while using the Ethereum mainnet.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it \\\n  -e postgres_host=host.docker.internal \\\n  -e postgres_port=5432 \\\n  -e postgres_user=graph-node \\\n  -e postgres_pass=oh-hello \\\n  -e postgres_db=graph-node \\\n  -e ipfs=host.docker.internal:5001 \\\n  -e ethereum=mainnet:http://localhost:8545/ \\\n  graphprotocol/graph-node:latest\n```\n\n----------------------------------------\n\nTITLE: Starting Graph Node with Docker Compose\nDESCRIPTION: Command to start the Graph Node using Docker Compose, which will initialize IPFS, Postgres, and Graph Node services as defined in the docker-compose.yaml file.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Writing a Transfer Event Handler in AssemblyScript\nDESCRIPTION: An AssemblyScript mapping function that handles ERC721 Transfer events. This function creates or updates a Token entity when a token transfer occurs, saving the new owner address to the Graph Node database.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function handleTransfer(event: Transfer): void {\n  // Event handler logic goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Timeseries and Aggregation in GraphQL Schema\nDESCRIPTION: A simple schema definition showing a timeseries entity for storing raw data points and an aggregation entity that calculates statistics across hourly and daily intervals. The example demonstrates basic sum aggregation of price data.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/aggregations.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Data @entity(timeseries: true) {\n  id: Int8!\n  timestamp: Timestamp!\n  price: BigDecimal!\n}\n\ntype Stats @aggregation(intervals: [\"hour\", \"day\"], source: \"Data\") {\n  id: Int8!\n  timestamp: Timestamp!\n  sum: BigDecimal! @aggregate(fn: \"sum\", arg: \"price\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ERC-721 Subgraph Manifest in YAML\nDESCRIPTION: YAML configuration file (subgraph.yaml) that defines a subgraph for indexing an ERC-721 contract. Specifies the data source, network, contract address, event handlers, and mapping configurations.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: 0.0.1\ndescription: ERC-721 Example\nrepository: https://github.com/<YOUR_GITHUB_NAME>/erc721-example\nschema:\n  file: ./schema.graphql\ndataSources:\n- kind: ethereum/contract\n  name: MyERC721Contract\n  network: mainnet\n  source:\n    address: \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\"\n    abi: ERC721\n  mapping:\n    kind: ethereum/events\n    apiVersion: 0.0.1\n    language: wasm/assemblyscript\n    entities:\n    - Token\n    abis:\n    - name: ERC721\n      file: ./abis/ERC721ABI.json\n    eventHandlers:\n    - event: Transfer(address,address,uint256)\n      handler: handleTransfer\n    file: ./mapping.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Up Postgres Extensions\nDESCRIPTION: SQL commands to create required Postgres extensions for Graph Node operation\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\npsql -q -X -U <SUPERUSER> graph-node <<EOF\ncreate extension pg_trgm;\ncreate extension pg_stat_statements;\ncreate extension btree_gist;\ncreate extension postgres_fdw;\ngrant usage on foreign data wrapper postgres_fdw to <USERNAME>;\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining a Token Entity in GraphQL Schema\nDESCRIPTION: A GraphQL schema definition for a Token entity that represents an ERC721 token. The entity has a unique ID field and tracks the current owner address. The @entity directive is required to mark this as a storable entity type.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Token @entity {\n  id: ID!\n  currentOwner: Address!\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Local Subgraph\nDESCRIPTION: Commands to create and deploy a subgraph locally to the Graph Node\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn create-local\nyarn deploy-local\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source Templates in YAML for Ethereum Subgraphs\nDESCRIPTION: This YAML snippet demonstrates how to define a data source template for an Ethereum contract in a subgraph manifest. It includes configuration for network, source, mapping, entities, and event handlers.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/subgraph-manifest.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\ntemplates:\n  - name: Exchange\n    kind: ethereum/contract\n    network: mainnet\n    source:\n      abi: Exchange\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.1\n      language: wasm/assemblyscript\n      file: ./src/mappings/exchange.ts\n      entities:\n        - Exchange\n      abis:\n        - name: Exchange\n          file: ./abis/exchange.json\n      eventHandlers:\n        - event: TokenPurchase(address,uint256,uint256)\n          handler: handleTokenPurchase\n```\n\n----------------------------------------\n\nTITLE: Multi-Chain Provider Configuration\nDESCRIPTION: Example of configuring multiple blockchain providers including Ethereum mainnet, Sepolia, and NEAR mainnet, with different features and authentication methods for each chain.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/config.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[chains]\ningestor = \"block_ingestor_node\"\n[chains.mainnet]\nshard = \"vip\"\nprovider = [\n  { label = \"mainnet1\", url = \"http://..\", features = [], headers = { Authorization = \"Bearer foo\" } },\n  { label = \"mainnet2\", url = \"http://..\", features = [ \"archive\", \"traces\" ] }\n]\n[chains.sepolia]\nshard = \"primary\"\nprovider = [ { label = \"sepolia\", url = \"http://..\", features = [] } ]\n\n[chains.near-mainnet]\nshard = \"blocks_b\"\nprotocol = \"near\"\nprovider = [ { label = \"near\", details = { type = \"firehose\", url = \"https://..\", key = \"\", features = [\"compression\", \"filters\"] } } ]\n```\n\n----------------------------------------\n\nTITLE: Loading and Accessing Token Data in Graph Protocol (TypeScript)\nDESCRIPTION: Example of using token.load() to retrieve a token by ID, checking if it exists, and accessing its currentOwner property. This pattern is commonly used within event handlers.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n  let token = token.load(tokenID.toHex())\n  if (token !== null) {\n    let owner = token.currentOwner\n  }\n```\n\n----------------------------------------\n\nTITLE: Sorting and Filtering Token Queries in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to sort and filter query results, organizing all tokens by their ID and returning the current owner of each token.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tokens(first: 100, orderBy: id) {\n    currentOwner\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Database Table with Block Range Support in SQL\nDESCRIPTION: SQL create table statement for the account entity that includes a block_range column to track entity versions across blocks. The exclusion constraint ensures block ranges for a given entity ID don't overlap.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/time-travel.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table account(\n    vid     int8 primary key,\n    id      text not null,\n    balance numeric,\n    block_range int4range not null,\n    exclude using gist(id with =, block_range with &&)\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Entity Data in Graph Protocol (TypeScript)\nDESCRIPTION: The entity.load() method retrieves entity information previously added with entity.save(). It expects the entity type and ID of the entity being retrieved.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nentity.load() // Entity is representative of the entity type being updated. In our example above, it is Token.\n```\n\n----------------------------------------\n\nTITLE: Accessing Contract Storage Data in Graph Protocol (TypeScript)\nDESCRIPTION: Example of obtaining data stored in a contract by binding to an ERC721 contract address and calling a public method. This allows access to any public state variable or view function from the contract.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n  let tokenContract = ERC721.bind(event.address);\n  let tokenSymbol = tokenContract.symbol();\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Type A Relationship (Multiple Children per Parent)\nDESCRIPTION: SQL query for fetching children when the child stores a list of parents, supporting multiple children per parent with pagination.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect c.*, p.id as parent_id\n  from unnest({parent_ids}) as p(id)\n       cross join lateral\n       (select *\n          from children c\n         where p.id = any(c.{parent_field})\n           and .. other conditions on c ..\n         order by c.{sort_key}\n         limit {first} offset {skip}) c\n order by c.{sort_key}\n```\n\n----------------------------------------\n\nTITLE: Starting Graph Node with Local Ethereum Node (Shell)\nDESCRIPTION: Command to run a Graph Node connected to a local Ethereum node on the default port 8545. This configuration provides faster indexing compared to using Infura.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -p graph-node --release -- \\\n  --postgres-url postgresql://<USERNAME><:PASSWORD>@localhost:5432/<POSTGRES_DB_NAME> \\\n  --ethereum-rpc <ETHEREUM_NETWORK_NAME>:127.0.0.1:8545 \\\n  --ipfs 127.0.0.1:5001 \\\n  --debug\n```\n\n----------------------------------------\n\nTITLE: Error Handling for JSON Parsing in TypeScript\nDESCRIPTION: Demonstrates safe JSON parsing with error handling using the new json.try_fromBytes function, which returns a Result object that can be checked for success or failure without causing the subgraph to fail.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { json } from '@graphprotocol/graph-ts'\n\nexport function handleSomeEvent(event: SomeEvent): void {\n  // JSON data as bytes, e.g. retrieved from IPFS\n  let data = ...\n\n  // This returns a `Result<JSONValue, boolean>`, meaning that the error type is\n  // just a boolean (true if there was an error, false if parsing succeeded).\n  // The actual error message is logged automatically.\n  let result = json.try_fromBytes(data)\n\n  if (result.isOk) { // or !result.isError\n    // Do something with the JSON value\n    let value = result.value\n    ...\n  } else {\n    // Handle the error\n    let error = result.error\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Entity Data in Graph Protocol (TypeScript)\nDESCRIPTION: The entity.save() method is used to add or update entities in The Graph. This function only sets the entity attributes that have been explicitly set, preserving other fields not referenced in the mapping.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nentity.save() // Entity is representative of the entity type being updated. In our example above, it is Token.\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Top-level Interface Query\nDESCRIPTION: SQL query for top-level queries of interface types with multiple implementations. This query first collects matches across all implementing types, then joins to get complete entity data.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nwith matches as (\n  -- Get uniform info for all matching children\n  select '{entity_type}' as entity, id, vid, {sort_key}\n    from {entity_table} c\n   where {query_filter}\n   union all\n     ... range over all entity types\n   order by {sort_key} offset {query.skip} limit {query.first})\n-- Get the full entity for each match\nselect m.entity, to_jsonb(c.*) as data, c.id, c.{sort_key}\n  from matches m, {entity_table} c\n where c.vid = m.vid and m.entity = '{entity_type}'\n union all\n       ... range over all entity types\n -- Make sure we return the children for each parent in the correct order\n     order by c.{sort_key}, c.id\n```\n\n----------------------------------------\n\nTITLE: Starting Graph Node with Infura Connection (Shell)\nDESCRIPTION: Command to start a Graph Node connected to Ethereum Mainnet via Infura. The command specifies Postgres connection details, Ethereum RPC endpoint, IPFS connection, and enables debug mode.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -p graph-node --release -- \\\n  --postgres-url postgresql://<USERNAME><:PASSWORD>@localhost:5432/<POSTGRES_DB_NAME> \\\n  --ethereum-rpc <ETHEREUM_NETWORK_NAME>:https://mainnet.infura.io \\\n  --ipfs 127.0.0.1:5001 \\\n  --debug\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Source with Context in Event Handler\nDESCRIPTION: Demonstrates how to pass configuration data when creating a data source from a template by setting values in a DataSourceContext object. This allows sharing data between event handlers.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSourceContext } from \"@graphprotocol/graph-ts\";\nimport { Exchange } from \"../generated/templates\";\n\nexport function handleNewExchange(event: NewExchange): void {\n  let context = new DataSourceContext();\n  context.setString(\"tradingPair\", event.params.tradingPair);\n  Exchange.createWithContext(event.params.exchange, context);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Entity Data in Graph Protocol (TypeScript)\nDESCRIPTION: The entity.remove() method erases an entry from the store. It requires passing the entity type and ID of the entity to be removed.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nentity.remove(ID)\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment Rules in TOML\nDESCRIPTION: Configuration example showing how to set up deployment rules for different subgraph types and networks. Demonstrates shard allocation and indexer assignment based on matching criteria.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/config.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[deployment]\n[[deployment.rule]]\nmatch = { name = \"(vip|important)/.*\" }\nshard = \"vip\"\nindexers = [ \"index_node_vip_0\", \"index_node_vip_1\" ]\n[[deployment.rule]]\nmatch = { network = \"kovan\" }\n# No shard, so we use the default shard called 'primary'\nindexers = [ \"index_node_kovan_0\" ]\n[[deployment.rule]]\nmatch = { network = [ \"xdai\", \"poa-core\" ] }\nindexers = [ \"index_node_other_0\" ]\n[[deployment.rule]]\n# There's no 'match', so any subgraph matches\nshards = [ \"sharda\", \"shardb\" ]\nindexers = [\n    \"index_node_community_0\",\n    \"index_node_community_1\",\n    \"index_node_community_2\",\n    \"index_node_community_3\",\n    \"index_node_community_4\",\n    \"index_node_community_5\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Accessing Arweave Transaction Data in TypeScript\nDESCRIPTION: Shows how to access Arweave transaction data using transaction IDs in subgraph mappings, enabling integration with data stored on the Arweave network.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { arweave, json } from '@graphprotocol/graph-ts'\n\nlet data = arweave.transactionData(\n  \"W2czhcswOAe4TgL4Q8kHHqoZ1jbFBntUCrtamYX_rOU\"\n)\n\nif (data !== null) {\n  let data = json.fromBytes(data)\n  ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Path in Subgraph Manifest\nDESCRIPTION: YAML configuration for specifying the schema file path in the subgraph manifest. This example shows how to reference the GraphQL schema file in the project structure.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: 0.0.1\nschema:\n  file: ./schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Setting up Postgres Database for Graph Node (Shell)\nDESCRIPTION: Commands to initialize and start a Postgres database for use with Graph Node. This includes creating the database directory, starting the server, and creating a named database.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ninitdb -D .postgres\npg_ctl -D .postgres -l logfile start\ncreatedb <POSTGRES_DB_NAME>\n```\n\n----------------------------------------\n\nTITLE: Defining Fulltext Search in GraphQL Schema\nDESCRIPTION: Example of defining a fulltext search API in a subgraph schema using the @fulltext directive on the _Schema_ type. This enables advanced text-based search across specified entity fields using Postgres tsvector and tsquery features.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ntype _Schema_\n  @fulltext(\n    name: \"artistSearch\"\n    language: en\n    algorithm: rank\n    include: [\n      {\n        entity: \"Artist\"\n        fields: [\n          { name: \"name\" }\n          { name: \"bio\" }\n          { name: \"genre\" }\n          { name: \"promoCopy\" }\n        ]\n      }\n    ]\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Shards in TOML\nDESCRIPTION: Example configuration for setting up multiple PostgreSQL database shards with read replicas and connection pool settings. Demonstrates primary and VIP shard configuration with weight distribution for query traffic.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/config.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[store]\n[store.primary]\nconnection = \"postgresql://graph:${PGPASSWORD}@primary/graph\"\nweight = 0\npool_size = 10\n[store.primary.replicas.repl1]\nconnection = \"postgresql://graph:${PGPASSWORD}@primary-repl1/graph\"\nweight = 1\n[store.primary.replicas.repl2]\nconnection = \"postgresql://graph:${PGPASSWORD}@primary-repl2/graph\"\nweight = 1\n\n[store.vip]\nconnection = \"postgresql://graph:${PGPASSWORD}@${VIP_MAIN}/graph\"\nweight = 1\npool_size = 10\n[store.vip.replicas.repl1]\nconnection = \"postgresql://graph:${PGPASSWORD}@${VIP_REPL1}/graph\"\nweight = 1\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Entity Changes in SQL\nDESCRIPTION: SQL operations to revert entity changes that occurred after block B. This includes deleting future-only entities and reopening the block range for the version valid at block B to make it current again.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/time-travel.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ndelete from account lower(block_range) >= $B;\n\nupdate account\n   set block_range = int4range(lower(block_range), NULL)\n where block_range @> $B;\n```\n\n----------------------------------------\n\nTITLE: Setting Graph Node ID Environment Variable\nDESCRIPTION: Sets a unique node ID to allow running multiple Graph Nodes in parallel. Each ID must be unique, and a node should maintain the same ID between restarts. Subgraphs are assigned to specific node IDs.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_NODE_ID\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query to Check for Indexing Errors\nDESCRIPTION: A GraphQL query using the _meta field to check if the subgraph has encountered and skipped over any indexing errors. This can be used alongside the non-fatal errors feature.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\n_meta {\n  hasIndexingErrors\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Non-Fatal Errors Option\nDESCRIPTION: Example GraphQL query that opts-in to receiving data that may have potential inconsistencies due to non-fatal errors during indexing. The query uses the subgraphError parameter set to 'allow'.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nfoos(first: 100, subgraphError: allow) {\n  id\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Limit Configuration\nDESCRIPTION: Configuration example for setting provider limits based on node name patterns, demonstrating how to control the number of subgraphs that can use specific providers.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/config.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[chains.mainnet]\nshard = \"vip\"\nprovider = [\n  { label = \"mainnet-0\", url = \"http://..\", features = [] },\n  { label = \"mainnet-1\", url = \"http://..\", features = [],\n    match = [\n      { name = \"some_node_.*\", limit = 10 },\n      { name = \"other_node_.*\", limit = 0 } ] } ]\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools for Graph Node\nDESCRIPTION: Commands to install required development tools including cargo-watch for continuous development and rustfmt for code formatting.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install cargo-watch\nrustup component add rustfmt\n```\n\n----------------------------------------\n\nTITLE: Querying Aggregated Timeseries Data in GraphQL\nDESCRIPTION: Example of how to query aggregated timeseries data with filtering options. Shows filtering by dimension (token), time range constraints, interval specification, and selection of aggregated fields in the results.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/aggregations.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntoken_stats(interval: \"hour\",\n      current: ignore,\n      where: {\n        token: \"0x1234\",\n        timestamp_gte: 1234567890,\n        timestamp_lt: 1234567890 }) {\n  id\n  timestamp\n  token\n  totalVolume\n  avgVolume\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Store Configuration in TOML\nDESCRIPTION: Minimal configuration example showing how to set up the primary store connection and deployment rules.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/config.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[store]\n[store.primary]\nconnection=\"<.. postgres-url argument ..>\"\n[deployment]\n[[deployment.rule]]\nindexers = [ \"<.. list of all indexing nodes ..>\" ]\n```\n\n----------------------------------------\n\nTITLE: Querying Token Entities in GraphQL\nDESCRIPTION: This GraphQL query retrieves the first 100 token entities, including their ID and current owner. It demonstrates basic querying of the subgraph's entities.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tokens(first: 100) {\n    id\n    currentOwner\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Deployment Placement using Shell\nDESCRIPTION: Command for simulating where a new subgraph deployment would be placed based on the configuration rules.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/config.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngraphman --config $CONFIG_FILE config place some/subgraph mainnet\n```\n\n----------------------------------------\n\nTITLE: Using Fulltext Search in GraphQL Queries\nDESCRIPTION: Example of how to use the fulltext search API in a GraphQL query to search for artists matching specific text criteria across the indexed fields.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  artistSearch(text: \"breaks & electro & detroit\") {\n    id\n    name\n    bio\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Data Source Context in Template Mappings\nDESCRIPTION: Shows how to access context data that was passed when creating a data source from a template using the dataSource.context() API and getter methods for specific data types.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dataSource } from '@graphprotocol/graph-ts'\n\n...\n\nlet context = dataSource.context()\nlet tradingPair = context.getString('tradingPair')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deployment Information with Graphman Info\nDESCRIPTION: Command for fetching details about a deployment from the database. Displays attributes like name, status, ID, namespace, and can show additional status information when using the --status flag.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml info subgraph-name\ngraphman --config config.toml info QmfWRZCjT8pri4Amey3e3mb2Bga75Vuh2fPYyNVnmPYL66\ngraphman --config config.toml info QmfWRZCjT8pri4Amey3e3mb2Bga75Vuh2fPYyNVnmPYL66 --status\n```\n\n----------------------------------------\n\nTITLE: Recording Unused Deployments with graphman\nDESCRIPTION: Identifies and records a list of unused subgraph deployments that are candidates for removal from the database.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/maintenance.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngraphman unused record\n```\n\n----------------------------------------\n\nTITLE: Starting Geth Node for Graph Node Connection (Shell)\nDESCRIPTION: Command to start a Geth Ethereum node in fast sync mode with RPC and WebSocket interfaces enabled. This configuration allows the Graph Node to connect to it for data indexing.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ngeth --syncmode \"fast\" --rpc --ws --wsorigins=\"*\" --rpcvhosts=\"*\" --cache 1024\n```\n\n----------------------------------------\n\nTITLE: Removing a Named Subgraph\nDESCRIPTION: Removes the mapping from a subgraph name to its underlying deployment, making the deployment eligible for removal if no other subgraph names reference it.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/maintenance.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngraphman remove some/subgraph\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain and Related Types\nDESCRIPTION: This code defines the Chain struct and implements the Blockchain trait for it. It also includes implementations for TriggersAdapter and FirehoseMapper.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/add-chain.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub struct Chain { /*...*/ }\n\n#[async_trait]\nimpl Blockchain for Chain {\n    const KIND: BlockchainKind = BlockchainKind::CoolChain;\n\n    type Block = codec::...;\n\n    type DataSource = DataSource;\n\n    // ...\n\n    type TriggerFilter = TriggerFilter;\n\n    type NodeCapabilities = NodeCapabilities;\n\n    type RuntimeAdapter = RuntimeAdapter;\n}\n\npub struct TriggersAdapter { /*...*/ }\n\n#[async_trait]\nimpl TriggersAdapterTrait<Chain> for TriggersAdapter { /*...*/ }\n\npub struct FirehoseMapper {\n    endpoint: Arc<FirehoseEndpoint>,\n}\n\n#[async_trait]\nimpl FirehoseMapperTrait<Chain> for FirehoseMapper { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Removing Recorded Unused Deployments\nDESCRIPTION: Permanently removes data for deployments that were previously marked as unused by the record command.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/maintenance.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngraphman unused remove\n```\n\n----------------------------------------\n\nTITLE: GraphQL Parent-Child Relationship Patterns\nDESCRIPTION: Comprehensive list of eight possible patterns for modeling parent-child relationships in GraphQL schemas. These patterns cover various combinations of one-to-many and one-to-one relationships with different directive configurations.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\n# Case 1\ntype Parent {\n  children: [Child] @derived\n}\n\ntype Child {\n  parents: [Parent]\n}\n\n# Case 2\ntype Parent {\n  child: Child @derived\n}\n\ntype Child {\n  parents: [Parent]\n}\n\n# Case 3\ntype Parent {\n  children: [Child] @derived\n}\n\ntype Child {\n  parent: Parent\n}\n\n# Case 4\ntype Parent {\n  child: Child @derived\n}\n\ntype Child {\n  parent: Parent\n}\n\n# Case 5\ntype Parent {\n  children: [Child]\n}\n\ntype Child {\n  # doesn't matter\n}\n\n# Case 6\ntype Parent {\n  children: [Child]\n}\n\ntype Child {\n  # doesn't matter\n}\n\n# Case 7\ntype Parent {\n  child: Child\n}\n\ntype Child {\n  # doesn't matter\n}\n\n# Case 8\ntype Parent {\n  child: Child\n}\n\ntype Child {\n  # doesn't matter\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific Token by ID in GraphQL\nDESCRIPTION: This GraphQL query retrieves a specific token entity by its ID, demonstrating how to query for a particular value once the subgraph is deployed with this entity.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  token(first: 100, id: \"c2dac230ed4ced84ad0ca5dfb3ff8592d59cef7ff2983450113d74a47a12\") {\n    currentOwner\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reassigning a Deployment to a Different Node\nDESCRIPTION: Changes which Graph Node instance is responsible for indexing a particular subgraph deployment.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/maintenance.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngraphman reassign\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Timing Logs\nDESCRIPTION: Controls whether the process logs details of GraphQL and SQL query processing. Value is a comma-separated list of 'sql', 'gql', and 'cache'. Enables detailed logging for debugging query performance.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_LOG_QUERY_TIMING\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Chain Head Number in Protobuf\nDESCRIPTION: This snippet shows the format of the 'ethereum_chain_head_number' metric, which represents the block number of the most recent block synced from Ethereum. It includes a label for the network.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/metrics.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nethereum_chain_head_number{network=\"mumbai\"} 20045294\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph Version Switching Mode\nDESCRIPTION: Controls how named subgraphs switch to new deployments. Default is 'instant', can be set to 'synced' to make new deployments the 'Pending' version until they've fully synced.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nEXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Parent-Child Relationship\nDESCRIPTION: Demonstrates a sample GraphQL query structure for fetching parents and their children with filtering.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  parents(filter) {\n    id\n    children(filter) {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Nodes in TOML\nDESCRIPTION: Configuration for setting up dedicated query nodes using regular expressions to match node IDs.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/config.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[general]\nquery = \"<regular expression>\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Blockchain Data Integrity with Graphman Chain Check-Blocks\nDESCRIPTION: Command for comparing cached blocks with blocks from a JSON RPC provider and removing any blocks from the cache that differ. Useful for diagnosing and fixing block cache integrity issues.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config <config> chain check-blocks <chain-name> by-hash <hash>\ngraphman --config <config> chain check-blocks <chain-name> by-number <number> [--delete-duplicates]\ngraphman --config <config> chain check-blocks <chain-name> by-range [-f|--from <block-number>] [-t|--to <block-number>] [--delete-duplicates]\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Paginated Child Fetching with Lateral Join\nDESCRIPTION: SQL query using a lateral join to fetch paginated children for multiple parents, applying first/skip arguments and maintaining order.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect c.*, p.id\n  from unnest({parent_ids}) as p(id)\n        cross join lateral\n         (select *\n            from children c\n           where c.parent_id = p.id\n             and .. other conditions on c ..\n           order by c.{sort_key}, c.id\n           limit {first}\n          offset {skip}) c\n order by p.id, c.{sort_key}, c.id\n```\n\n----------------------------------------\n\nTITLE: Enabling Load Management Simulation Mode\nDESCRIPTION: When set to 'true', performs all load management steps but never actually declines to run a query, instead just logging decisions. Defaults to 'false'.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_LOAD_SIMULATE\n```\n\n----------------------------------------\n\nTITLE: Configuring Store Connection Pool Size\nDESCRIPTION: Sets how many simultaneous connections to allow to the store. May not be strictly adhered to due to implementation details. Defaults to 10.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSTORE_CONNECTION_POOL_SIZE\n```\n\n----------------------------------------\n\nTITLE: Defining an ERC721 Transfer Event ABI in JSON\nDESCRIPTION: An example of an ABI definition for an ERC721 Transfer event, which would be stored in the /abi folder as ERC721ABI.json. This ABI defines the event structure with three indexed parameters: _from, _to, and _tokenId.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  [{\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"_from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"_tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  }]\n```\n\n----------------------------------------\n\nTITLE: Querying Entities at a Specific Block Height in SQL\nDESCRIPTION: SQL query pattern that filters entities based on block range to retrieve the state at a specific block height B. The block_range @> $B condition ensures only entity versions valid at block B are returned.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/time-travel.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect .. from account\n where ..\n   and block_range @> $B\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Operation Workers\nDESCRIPTION: Sets the number of workers to use for batch operations. Each subgraph copy operation can use up to this many workers in parallel. Defaults to 1 and must be at least 1.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_STORE_BATCH_WORKERS\n```\n\n----------------------------------------\n\nTITLE: Setting Graph Node Logging Levels\nDESCRIPTION: Controls log levels for Graph Node, using the same format as RUST_LOG as described in the env_logger documentation.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_LOG\n```\n\n----------------------------------------\n\nTITLE: Setting Batch Operation Duration Target\nDESCRIPTION: Controls how long batch operations during copying or grafting should take, limiting transaction duration to help control table bloat. Value is in seconds, defaults to 180s.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_STORE_BATCH_TARGET_DURATION\n```\n\n----------------------------------------\n\nTITLE: Simplified SQL Query for Top-level Concrete Type\nDESCRIPTION: Optimized SQL query for the common case of querying a top-level concrete type (not an interface). This query is significantly simpler as it doesn't need to handle multiple implementing types.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nselect '{entity_type}' as entity, to_jsonb(c.*) as data\n  from {entity_table} c\n where query.filter()\n order by {query.order} offset {query.skip} limit {query.first}\n```\n\n----------------------------------------\n\nTITLE: Completely Deleting Deployments with Graphman Drop\nDESCRIPTION: Command for stopping, unassigning, and removing all data from deployments matching a search term. This is an irreversible operation that combines multiple graphman commands in sequence.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml drop QmfWRZCjT8pri4Amey3e3mb2Bga75Vuh2fPYyNVnmPYL66\ngraphman --config config.toml drop author/subgraph-name\n```\n\n----------------------------------------\n\nTITLE: Creating Table Structure for Entity Type in PostgreSQL\nDESCRIPTION: Example SQL showing the standard table structure created for entity types, including the vid serial primary key, id field, attributes, and block_range for time-travel queries.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/schema-generation.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table sgd42.account(\n    vid int8    serial primary key,\n    id          text not null, -- or bytea\n    .. attributes ..\n    block_range int4range not null\n)\n```\n\n----------------------------------------\n\nTITLE: Complete SQL Query Structure for Interface Children\nDESCRIPTION: Full SQL query structure using a CTE to first collect matches across all implementing types of an interface, then joining with entity tables to get complete data. This approach optimizes performance by deferring JSON conversion until necessary.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nwith matches as (\n    select '{children.object}' as entity, c.vid, c.id,\n           c.{sort_key}, p.id as parent_id\n      from .. type_query(children) ..\n     union all\n       .. range over all child types ..\n     order by {sort_key}\n     limit {first} offset {skip})\nselect m.*, to_jsonb(c.*) as data\n  from matches m, {children.table} c\n where c.vid = m.vid and m.entity = '{children.object}'\n union all\n       .. range over all child tables ..\n order by {sort_key}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Jailing Threshold\nDESCRIPTION: Sets a fraction threshold that, when exceeded during system overload, causes a query to be permanently rejected (jailed). If not set, no queries will be jailed, but they'll still be subject to normal load management.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_LOAD_JAIL_THRESHOLD\n```\n\n----------------------------------------\n\nTITLE: Defining Account Entity Schema in GraphQL for Graph Node\nDESCRIPTION: A GraphQL schema definition for an Account entity that will be used to demonstrate time-travel queries. The entity has an ID and balance field.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/time-travel.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Account @entity {\n    id ID!\n    balance BigInt\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Interface Children Selection\nDESCRIPTION: SQL query that selects basic information from concrete implementations of an interface child type. This query extracts only essential columns (entity type, vid, id, sort key, parent_id) to be used in a subsequent join operation.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect '{__typename}' as entity, c.vid, c.id, c.{sort_key}, p.id as parent_id\n```\n\n----------------------------------------\n\nTITLE: Setting Fork Starting Block\nDESCRIPTION: Specifies the block hash and number where a forked subgraph will start indexing in the format 'block_hash:block_number'.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_START_BLOCK\n```\n\n----------------------------------------\n\nTITLE: Subgraph Manifest Configuration for Contract Binding (YAML)\nDESCRIPTION: YAML configuration that specifies the contract address and ABI to be used for binding. This is placed in the subgraph manifest file and referenced when generating TypeScript code.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n  source:\n    address: \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\"\n    abi: ERC721\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity with Block Range in SQL\nDESCRIPTION: SQL insert statement for creating a new entity with a block range starting at the current block B and extending to infinity, marking when this entity version becomes valid.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/time-travel.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsert into account(id, block_range, ...)\nvalues ($ID, '[$B,]', ...);\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Type D Relationship (Single Child per Parent)\nDESCRIPTION: SQL query for fetching children when the parent is not a list and not derived, optimized for the case where each parent has exactly one child.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect c.*, p.id as parent_id\n  from rows from (unnest({parent_ids}), unnest({child_ids})) as p(id, child_id),\n       children c\n where c.id = p.child_id\n   and .. other conditions on c ..\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Subgraph Features Query\nDESCRIPTION: Example JSON response from the subgraphFeatures GraphQL query, showing the features used by a subgraph.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"subgraphFeatures\": {\n      \"errors\": [],\n      \"features\": [\"nonFatalErrors\", \"ipfsOnEthereumContracts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token-Based Timeseries with Multiple Aggregation Types in GraphQL Schema\nDESCRIPTION: A more complex schema showing timeseries data for tokens with multiple aggregation functions. Demonstrates dimensions for grouping (token), different aggregation types (sum, last, count), and cumulative aggregation across time periods.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/aggregations.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# Normal entity\ntype Token @entity { .. }\n\n# Raw data points\ntype TokenData @entity(timeseries: true) {\n    id: Bytes!\n    timestamp: Timestamp!\n    token: Token!\n    amount: BigDecimal!\n    priceUSD: BigDecimal!\n}\n\n# Aggregations over TokenData\ntype TokenStats @aggregation(intervals: [\"hour\", \"day\"], source: \"TokenData\") {\n  id: Int8!\n  timestamp: Timestamp!\n  token: Token!\n  totalVolume: BigDecimal! @aggregate(fn: \"sum\", arg: \"amount\")\n  priceUSD: BigDecimal! @aggregate(fn: \"last\", arg: \"priceUSD\")\n  count: Int8! @aggregate(fn: \"count\", cumulative: true)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unresponsive Timeout Duration\nDESCRIPTION: Specifies the timeout in seconds before killing the node if GRAPH_KILL_IF_UNRESPONSIVE is true. Defaults to 10 seconds.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_KILL_IF_UNRESPONSIVE_TIMEOUT_SECS\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Type B Relationship (Multiple Children per Parent)\nDESCRIPTION: SQL query for fetching children when the child stores a single parent, supporting multiple children per parent with pagination.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect c.*, p.id as parent_id\n  from unnest({parent_ids}) as p(id)\n       cross join lateral\n       (select *\n          from children c\n         where p.id = c.{parent_field}\n           and .. other conditions on c ..\n         order by c.{sort_key}\n         limit {first} offset {skip}) c\n order by c.{sort_key}\n```\n\n----------------------------------------\n\nTITLE: Implementing TriggerFilter for New Chain\nDESCRIPTION: This code defines a TriggerFilter struct and implements the TriggerFilter trait for the new chain. It handles extending filters and converting them to Firehose filters.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/add-chain.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::capabilities::NodeCapabilities;\nuse crate::{data_source::DataSource, Chain};\nuse graph::blockchain as bc;\nuse graph::prelude::*;\n\n#[derive(Clone, Debug, Default)]\npub struct TriggerFilter {}\n\nimpl bc::TriggerFilter<Chain> for TriggerFilter {\n    fn extend<'a>(&mut self, _data_sources: impl Iterator<Item = &'a DataSource> + Clone) {}\n\n    fn node_capabilities(&self) -> NodeCapabilities {\n        NodeCapabilities {}\n    }\n\n    fn extend_with_template(\n        &mut self,\n        _data_source: impl Iterator<Item = <Chain as bc::Blockchain>::DataSourceTemplate>,\n    ) {\n    }\n\n    fn to_firehose_filter(self) -> Vec<prost_types::Any> {\n        vec![]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Process Termination\nDESCRIPTION: When set, this option will kill the graph-node process if it becomes unresponsive.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_KILL_IF_UNRESPONSIVE\n```\n\n----------------------------------------\n\nTITLE: Deleting an Entity by Clamping Block Range in SQL\nDESCRIPTION: SQL update statement that implements entity deletion by clamping the block range's upper bound to the current block B, indicating the entity is no longer valid after this block.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/time-travel.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nupdate account\n   set block_range = int4range(lower(block_range), $B)\n where id = $ID and block_range @> $INTMAX;\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting Parity Dev Chain for Testing (Shell)\nDESCRIPTION: Commands to set up and run a local Parity development testnet for rapid testing. This includes creating an account, setting up a password file, and running the node with specific parameters.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nparity account new --chain dev\n```\n\n----------------------------------------\n\nTITLE: Defining DataSource Types for New Chain\nDESCRIPTION: This code defines the DataSource, UnresolvedDataSource, and DataSourceTemplate structs for the new chain. It also implements the necessary traits for these types.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/add-chain.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Clone, Debug)]\npub struct DataSource {\n    // example fields:\n    pub kind: String,\n    pub network: Option<String>,\n    pub name: String,\n    pub source: Source,\n    pub mapping: Mapping,\n    pub context: Arc<Option<DataSourceContext>>,\n    pub creation_block: Option<BlockNumber>,\n    /*...*/\n}\n\nimpl blockchain::DataSource<Chain> for DataSource { /*...*/ }\n\n#[derive(Clone, Debug, Eq, PartialEq, Deserialize)]\npub struct UnresolvedDataSource {\n    pub kind: String,\n    pub network: Option<String>,\n    pub name: String,\n    pub source: Source,\n    pub mapping: UnresolvedMapping,\n    pub context: Option<DataSourceContext>,\n}\n\n#[async_trait]\nimpl blockchain::UnresolvedDataSource<Chain> for UnresolvedDataSource { /*...*/ }\n\n#[derive(Clone, Debug, Default, Hash, Eq, PartialEq, Deserialize)]\npub struct BaseDataSourceTemplate<M> {\n    pub kind: String,\n    pub network: Option<String>,\n    pub name: String,\n    pub mapping: M,\n}\n\npub type UnresolvedDataSourceTemplate = BaseDataSourceTemplate<UnresolvedMapping>;\npub type DataSourceTemplate = BaseDataSourceTemplate<Mapping>;\n\n#[async_trait]\nimpl blockchain::UnresolvedDataSourceTemplate<Chain> for UnresolvedDataSourceTemplate { /*...*/ }\n\nimpl blockchain::DataSourceTemplate<Chain> for DataSourceTemplate { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Compiling Protobuf Definitions in Rust\nDESCRIPTION: This code snippet shows how to compile Protobuf definitions for a new chain using tonic in a build.rs file. It generates Rust code from the Protobuf files in the proto directory.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/add-chain.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    println!(\"cargo:rerun-if-changed=proto\");\n    tonic_build::configure()\n        .out_dir(\"src/protobuf\")\n        .compile_protos(&[\"proto/codec.proto\"], &[\"proto\"])\n        .expect(\"Failed to compile Firehose CoolChain proto(s)\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NodeCapabilities for New Chain\nDESCRIPTION: This code defines and implements the NodeCapabilities struct for the new chain. It includes methods for parsing from strings and formatting for display.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/add-chain.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse std::cmp::PartialOrd;\nuse std::fmt;\nuse std::str::FromStr;\n\nuse anyhow::Error;\nuse graph::impl_slog_value;\n\nuse crate::DataSource;\n\n#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd)]\npub struct NodeCapabilities {}\n\nimpl FromStr for NodeCapabilities {\n    type Err = Error;\n\n    fn from_str(_s: &str) -> Result<Self, Self::Err> {\n        Ok(NodeCapabilities {})\n    }\n}\n\nimpl fmt::Display for NodeCapabilities {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.write_str(\"{{CHAIN_NAME}}\")\n    }\n}\n\nimpl_slog_value!(NodeCapabilities, \"{}\");\n\nimpl graph::blockchain::NodeCapabilities<crate::Chain> for NodeCapabilities {\n    fn from_data_sources(_data_sources: &[DataSource]) -> Self {\n        NodeCapabilities {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RuntimeAdapter for New Chain\nDESCRIPTION: This code defines the RuntimeAdapter struct and implements the RuntimeAdapter trait for the new chain. It provides methods for retrieving host functions for a given data source.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/add-chain.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::{Chain, DataSource};\nuse anyhow::Result;\nuse blockchain::HostFn;\nuse graph::blockchain;\n\npub struct RuntimeAdapter {}\n\nimpl blockchain::RuntimeAdapter<Chain> for RuntimeAdapter {\n    fn host_fns(&self, _ds: &DataSource) -> Result<Vec<HostFn>> {\n        Ok(vec![])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OffchainMonitor in Rust\nDESCRIPTION: Describes the OffchainMonitor component responsible for tracking and fetching offchain data. It mentions key functions and the process of handling offchain events in the subgraph runner.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/offchain.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThe `OffchainMonitor` is responsible for tracking and fetching the offchain data. It currently lives in `subgraph/context.rs`. When an offchain data source is created from a template, `fn add_source` is called. It is expected that a background task will monitor the source for relevant events, in the case of a file that means the file becoming available and the event is the file content. To process these events, the subgraph runner calls `fn ready_offchain_events`  periodically.\n```\n\n----------------------------------------\n\nTITLE: Configuring Database URL for Tests\nDESCRIPTION: Specifies the PostgreSQL instance URL used when running tests in the format postgresql://<DBUSER>:<DBPASSWORD>@<DBHOST>:<DBPORT>/<DBNAME>.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTHEGRAPH_STORE_POSTGRES_DIESEL_URL\n```\n\n----------------------------------------\n\nTITLE: Configuring History Pruning Thresholds\nDESCRIPTION: Controls when to use table rebuilding vs deletion for pruning. REBUILD_THRESHOLD (default 0.5) and DELETE_THRESHOLD (default 0.05) determine the pruning strategy based on the proportion of history being removed.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_STORE_HISTORY_REBUILD_THRESHOLD, GRAPH_STORE_HISTORY_DELETE_THRESHOLD\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Type A Relationship (Single Child per Parent)\nDESCRIPTION: SQL query for fetching children when the child stores a list of parents, optimized for the case where each parent has at most one child.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect c.*, p.id as parent_id\n  from unnest({parent_ids}) as p(id),\n       children c\n where c.{parent_field} @> array[p.id]\n   and .. other conditions on c ..\n limit {parent_ids.len} + 1\n```\n\n----------------------------------------\n\nTITLE: Updated proofOfIndexing GraphQL API Definition\nDESCRIPTION: The updated schema for the proofOfIndexing GraphQL API, which now requires a blockNumber parameter in addition to the existing parameters. This change allows indexer agents to obtain a POI even when a block is not cached in the Ethereum blocks cache.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  proofOfIndexing(\n    subgraph: String!\n    blockNumber: Int!\n    blockHash: Bytes!\n    indexer: Bytes\n  ): Bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Deploying Substreams-powered Subgraph\nDESCRIPTION: A sequence of commands to prepare, build, and deploy the Substreams-powered subgraph. The workflow involves installing dependencies, preparing the Substreams module, building the subgraph, and finally deploying it.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/tests/runner-tests/substreams/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install # install graph-cli\nyarn substreams:prepare # build and package the substreams module\nyarn subgraph:build # build the subgraph\nyarn subgraph:deploy # deploy the subgraph\n```\n\n----------------------------------------\n\nTITLE: Unassigning Deployments with Graphman Unassign\nDESCRIPTION: Command for permanently stopping the indexing of a deployment. This makes graph-node stop indexing without losing any indexed data.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml unassign subgraph-name\ngraphman --config config.toml unassign QmfWRZCjT8pri4Amey3e3mb2Bga75Vuh2fPYyNVnmPYL66\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Type B Relationship (Single Child per Parent)\nDESCRIPTION: SQL query for fetching children when the child stores a single parent, optimized for the case where each parent has at most one child.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect c.*, c.{parent_field} as parent_id\n  from children c\n where c.{parent_field} = any({parent_ids})\n   and .. other conditions on c ..\n limit {parent_ids.len} + 1\n```\n\n----------------------------------------\n\nTITLE: Querying Subgraph Features in GraphQL\nDESCRIPTION: Example of using the new subgraphFeatures GraphQL query to retrieve features used by a subgraph given its Qm-hash ID.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  subgraphFeatures(\n    subgraphId: \"QmW9ajg2oTyPfdWKyUkxc7cTJejwdyCbRrSivfryTfFe5D\"\n  ) {\n    features\n    errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting History Slack Factor\nDESCRIPTION: Controls how much history a subgraph with limited history can accumulate before pruning. Default is 1.2 (20% extra history), and must be at least 1.01.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_STORE_HISTORY_SLACK_FACTOR\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Type C Relationship (Multiple Children per Parent)\nDESCRIPTION: SQL query for fetching children when the parent stores a list of its children, supporting multiple children per parent with pagination.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect c.*, p.id as parent_id\n  from rows from (unnest({parent_ids}), reduce_dim({child_id_matrix}))\n              as p(id, child_ids)\n       cross join lateral\n       (select *\n          from children c\n         where c.id = any(p.child_ids)\n           and .. other conditions on c ..\n         order by c.{sort_key}\n         limit {first} offset {skip}) c\n order by c.{sort_key}\n```\n\n----------------------------------------\n\nTITLE: GraphQL _meta Field Query Example\nDESCRIPTION: An example GraphQL query using the _meta field, which allows applications to determine against which block the query was executed. This helps identify if data becomes stale when subgraphs fall behind.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n_meta {\n  block {\n    number\n    hash\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Execution Status\nDESCRIPTION: GraphQL query to check the status of a long-running operation using its execution ID.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nquery {\n  execution {\n      info(id: \"UNIQUE_EXECUTION_ID\") {\n          status\n          errorMessage\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Configuration Files using Shell\nDESCRIPTION: Command for validating a graph-node configuration file.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/config.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngraph-node --config $CONFIG_FILE config check\n```\n\n----------------------------------------\n\nTITLE: Querying Deployment Head Block Number in Protobuf\nDESCRIPTION: This snippet demonstrates the format of the 'deployment_head' metric, which tracks the head block number for a deployment. It includes labels for deployment ID, network, and shard.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ndeployment_head{deployment=\"QmaeWFYbPwmXEk7UuACmkqgPq2Pba5t2RYdJtEyvAUmrxg\",network=\"mumbai\",shard=\"primary\"} 19509077\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Batch Operation Timeout\nDESCRIPTION: Sets the maximum time a batch operation can take during copying or grafting. Should be a multiple of GRAPH_STORE_BATCH_TARGET_DURATION. If exceeded, batch size resets to 1. Value is in seconds.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_STORE_BATCH_TIMEOUT\n```\n\n----------------------------------------\n\nTITLE: Listing Unused Deployments with Extended Information\nDESCRIPTION: Displays detailed information about previously recorded unused deployments that are eligible for removal.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/maintenance.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngraphman unused list -e\n```\n\n----------------------------------------\n\nTITLE: Setting Fork Base API URL\nDESCRIPTION: Specifies the API URL from which the graph node will fork. Use 'https://api.thegraph.com/subgraphs/id/' for the hosted service.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_FORK_BASE\n```\n\n----------------------------------------\n\nTITLE: Installing Subgraph Dependencies\nDESCRIPTION: Commands to install dependencies and generate types for contract ABIs in the example subgraph\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn codegen\n```\n\n----------------------------------------\n\nTITLE: Removing Named Subgraph with Graphman Remove\nDESCRIPTION: Command for removing the association between a subgraph name and a deployment. This releases the name for reuse without deleting any indexed data.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml remove subgraph-name\n```\n\n----------------------------------------\n\nTITLE: Unassigning a Deployment to Stop Indexing\nDESCRIPTION: Permanently stops indexing a deployment by removing its assignment to any Graph Node instance.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/maintenance.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngraphman unassign\n```\n\n----------------------------------------\n\nTITLE: Setting Write Batch Size\nDESCRIPTION: Specifies how many changes to accumulate during syncing in kilobytes before a write must happen. Default is 10,000 (10MB). Setting to 0 disables write batching.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_STORE_WRITE_BATCH_SIZE\n```\n\n----------------------------------------\n\nTITLE: Pool Size Configuration with Node Rules\nDESCRIPTION: Configuration example showing how to set database connection pool sizes using node-specific rules with regular expressions for different Graph Node instances.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/config.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\npool_size = [\n  { node = \"index_node_general_.*\", size = 20 },\n  { node = \"index_node_special_.*\", size = 30 },\n  { node = \"query_node_.*\", size = 80 }\n]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Ethereum Blocks with Graphman\nDESCRIPTION: Examples of using graphman to inspect Ethereum blocks by hash, number, and range. Includes options for deleting duplicate blocks and inspecting all blocks after a certain number.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml chain check-blocks mainnet by-hash 0xd56a9f64c7e696cfeb337791a7f4a9e81841aaf4fcad69f9bf2b2e50ad72b972\n```\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml chain check-blocks mainnet by-number 15626962\n```\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml chain check-blocks mainnet by-range --from 15626900 --to 15626962 --delete-duplicates\n```\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml chain check-blocks mainnet by-range --from 13000000\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection Timeout\nDESCRIPTION: Specifies how long to wait (in milliseconds) to connect to a database before assuming it's down. Defaults to 5000ms.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_STORE_CONNECTION_TIMEOUT\n```\n\n----------------------------------------\n\nTITLE: Setting Write Batch Duration\nDESCRIPTION: Specifies how long to accumulate changes during syncing into a batch before a write must happen, in seconds. Default is 300s. Setting to 0 disables write batching.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_STORE_WRITE_BATCH_DURATION\n```\n\n----------------------------------------\n\nTITLE: Removing Chain Call Cache with Graphman\nDESCRIPTION: Examples of using graphman to remove call caches for a specified chain. Demonstrates removing call cache for a specific block range and removing all call cache for a chain.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml chain call-cache ethereum remove --from 10 --to 20\n```\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml chain call-cache ethereum remove\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Timestamp Format\nDESCRIPTION: Specifies a custom time format for logs. Defaults to '%b %d %H:%M:%S%.3f'. Uses chrono formatting patterns.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_LOG_TIME_FORMAT\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests Command\nDESCRIPTION: Command to run integration tests for graph-node after setting up prerequisites including IPFS, Postgres, and Ethereum RPC client.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -p graph-tests --test integration_tests -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Resuming Deployment Operation\nDESCRIPTION: GraphQL mutation to resume a paused deployment using its hash identifier.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nmutation {\n    deployment {\n        resume(deployment: { hash: \"Qm...\" }) {\n            success\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Unused Deployments with Graphman Unused Record\nDESCRIPTION: Command for inspecting every shard for unused deployments and registering them in the unused_deployments table. This is a preparatory step before removing data from unused subgraphs.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml unused record\n```\n\n----------------------------------------\n\nTITLE: Checking graphman Setup with Subgraph Info Command\nDESCRIPTION: Verifies proper graphman configuration by displaying basic information about a specified subgraph, including its Postgres namespace.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/maintenance.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngraphman info some/subgraph\n```\n\n----------------------------------------\n\nTITLE: Pausing Deployment Operation\nDESCRIPTION: GraphQL mutation to pause an active deployment using its hash identifier.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmutation {\n    deployment {\n        pause(deployment: { hash: \"Qm...\" }) {\n            success\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Graph Node\nDESCRIPTION: Configuration of environment variables required for testing the Diesel/Postgres store functionality.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport THEGRAPH_STORE_POSTGRES_DIESEL_URL=<Postgres database URL>\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Playground Authentication Headers\nDESCRIPTION: Example of the required authorization header format for authenticating with the Graphman GraphQL API using a bearer token.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Authorization\": \"Bearer GRAPHMAN_SERVER_AUTH_TOKEN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Continuous Development Watch Command for Graph Node\nDESCRIPTION: Command to watch source directory and automatically run formatting, checks, tests, and documentation generation on changes.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo watch                       \\\n    -x \"fmt --all\"                 \\\n    -x check                      \\\n    -x \"test -- --test-threads=1\" \\\n    -x \"doc --no-deps\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Deployment Operation\nDESCRIPTION: GraphQL mutation to restart a deployment with a delay period before resuming.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nmutation {\n    deployment {\n        restart(deployment: { hash: \"Qm...\" }) {\n            id\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Identity Mapping\nDESCRIPTION: Configuration lines to add to pg_ident.conf for mapping the local user to postgres, enabling automatic authentication for database operations.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/store/test-store/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadmin           postgres                postgres\nadmin           <your username>         postgres\n```\n\n----------------------------------------\n\nTITLE: Pause Operation Response\nDESCRIPTION: Example response format for a successful deployment pause operation.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"deployment\": {\n      \"pause\": {\n        \"success\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Offchain Data Source Structure in Rust\nDESCRIPTION: Defines the location of offchain data source structures and parsing logic in the Graph Node codebase. It highlights the need for adding new enum variants and updating constants when implementing new file types.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/offchain.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe data structures that represent an offchain data source, along with the code that parses it from the manifest or creates it as a dynamic data source, lives in the `graph` crate, in `data_source/offchain.rs`.  A new file kind would probably only need a new `enum Source` variant, and the kind would need to be added to `const OFFCHAIN_KINDS`.\n```\n\n----------------------------------------\n\nTITLE: Setting Unused Deployment Removal Interval\nDESCRIPTION: Specifies how long to wait before removing an unused deployment after it's been identified as unused. Value is in minutes and defaults to 360 (6 hours).\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_REMOVE_UNUSED_INTERVAL\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Locale Configuration\nDESCRIPTION: Command to initialize PostgreSQL database with required C locale and UTF-8 encoding settings for new Graph Node installations.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ninitdb -E UTF8 --locale=C\n```\n\n----------------------------------------\n\nTITLE: Using PollingMonitor for New Data Source Types in Rust\nDESCRIPTION: Explains how to use the PollingMonitor component for implementing new data source types that rely on polling. It references the IpfsService as an example implementation.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/offchain.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nIf the data source kind being added relies on polling to check the availability of the monitored object, the generic `PollingMonitor` component can be used. Then the only implementation work is implementing the polling logic itself, as a `tower` service. The `IpfsService` serves as an example of how to do that.\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum History Block Retention\nDESCRIPTION: Specifies the minimum number of blocks to retain for subgraphs with historyBlocks set to auto. Default is twice the reorg threshold.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_MIN_HISTORY_BLOCKS\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Updates\nDESCRIPTION: List of environment variables that have been removed or renamed in the Graph Node configuration.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_1\n\nLANGUAGE: Environment Variables\nCODE:\n```\nGRAPH_ETHEREUM_IS_FIREHOSE_PREFERRED=removed\nREVERSIBLE_ORDER_BY_OFF=removed\nGRAPH_STORE_CONNECTION_TRY_ALWAYS=removed\nGRAPH_STORE_HISTORY_COPY_THRESHOLD=renamed to GRAPH_STORE_HISTORY_REBUILD_THRESHOLD\n```\n\n----------------------------------------\n\nTITLE: Deployment Info Response Format\nDESCRIPTION: Example response showing the structure of deployment information returned by the API.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"deployment\": {\n      \"info\": [\n        {\n          \"status\": {\n            \"isPaused\": false\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Ethereum Block Receipts Check Timeout\nDESCRIPTION: Sets the timeout for checking eth_getBlockReceipts support during chain startup. If this times out, individual transaction receipts will be fetched. Defaults to 10s.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_ETHEREUM_BLOCK_RECEIPTS_CHECK_TIMEOUT\n```\n\n----------------------------------------\n\nTITLE: Affected Subgraph Deployment IDs\nDESCRIPTION: IPFS hashes of subgraph deployments affected by the determinism fix for duplicate event handling.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nQmccst5mbV5a6vT6VvJMLPKMAA1VRgT6NGbxkLL8eDRsE7\nQmd9nZKCH8UZU1pBzk7G8ECJr3jX3a2vAf3vowuTwFvrQg\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Reference for Store Schema Version\nDESCRIPTION: A reference to a SQL migration script that needs to be applied when upgrading Graph Node with custom SQL. The script alters the deployment schemas version in the database.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/graphprotocol/graph-node/blob/master/store/postgres/migrations/2022-04-26-125552_alter_deployment_schemas_version/up.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Extra Column Insertion Parameter\nDESCRIPTION: Workaround for bugs in subgraph writing code that manifest as Postgres errors about parameter limits. Setting this to a value like 10 can work around such bugs while they're being fixed. Default is 0.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_STORE_INSERT_EXTRA_COLS\n```\n\n----------------------------------------\n\nTITLE: Enabling Delayed Attribute Index Creation\nDESCRIPTION: When enabled, postpones creation of certain indexes (btree, attribute-based) during subgraph copying to speed up syncing.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_POSTPONE_ATTRIBUTE_INDEX_CREATION\n```\n\n----------------------------------------\n\nTITLE: Previous proofOfIndexing GraphQL API Definition\nDESCRIPTION: The previous schema for the proofOfIndexing GraphQL API before the breaking change, which did not require a blockNumber parameter.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  proofOfIndexing(subgraph: String!, blockHash: Bytes!, indexer: Bytes): Bytes\n}\n```\n\n----------------------------------------\n\nTITLE: In-Progress Execution Status Response\nDESCRIPTION: Example response showing the status of a running execution.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"execution\": {\n      \"info\": {\n        \"status\": \"RUNNING\",\n        \"errorMessage\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Proof of Indexing Event Logging\nDESCRIPTION: Logs Proof of Indexing events deterministically, which may be useful for debugging.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_LOG_POI_EVENTS\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GraphQL Block Constraint in Markdown\nDESCRIPTION: Shows an example of a GraphQL query constraint for specifying a block number, which is relevant to the pruning process.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/pruning.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```graphql\nblock { number: <n> }\n```\n```\n\n----------------------------------------\n\nTITLE: Completed Execution Status Response\nDESCRIPTION: Example response showing the status of a completed execution.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"execution\": {\n      \"info\": {\n        \"status\": \"SUCCEEDED\",\n        \"errorMessage\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Load Management Window Parameters\nDESCRIPTION: Configure load measurement windows for automatic throttling. GRAPH_LOAD_WINDOW_SIZE sets the time period in seconds, and GRAPH_LOAD_BIN_SIZE sets the bin size in seconds. Defaults to 300s and 1s respectively.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_LOAD_WINDOW_SIZE, GRAPH_LOAD_BIN_SIZE\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Authentication\nDESCRIPTION: Configuration line to add to pg_hba.conf for setting up peer authentication for the postgres user, which is required for test setup.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/store/test-store/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nlocal   all             postgres                                peer map=admin\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Deployments with Graphman Unused Remove\nDESCRIPTION: Command for removing indexed data from deployments previously marked as unused. Provides options to remove specific deployments, a limited count, or deployments recorded as unused a certain time ago.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngraphman --config config.toml unused remove\ngraphman --config config.toml unused remove --older 720\ngraphman --config config.toml unused remove --deployment QmfWRZCjT8pri4Amey3e3mb2Bga75Vuh2fPYyNVnmPYL66\n```\n\n----------------------------------------\n\nTITLE: Setting Load Throttling Threshold\nDESCRIPTION: Sets the threshold in milliseconds for database connection wait times, above which queries will be throttled. Defaults to 0, which disables throttling and associated statistics collection.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_LOAD_THRESHOLD\n```\n\n----------------------------------------\n\nTITLE: Running Graph Node Tests with Environment Configuration\nDESCRIPTION: Command to run all unit and integration tests while specifying the test configuration file path. The command excludes the graph-tests crate which requires additional docker setup.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/store/test-store/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nGRAPH_NODE_TEST_CONFIG=`pwd`/store/test-store/config.simple.toml cargo test --workspace --exclude graph-tests\n```\n\n----------------------------------------\n\nTITLE: Compiling Test Contracts with Foundry\nDESCRIPTION: Command to recompile test contracts using Foundry when changes are made to the contracts in the tests/contracts/src directory.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfoundry build\n```\n\n----------------------------------------\n\nTITLE: Fetching 3Box Profiles in TypeScript Mappings\nDESCRIPTION: Demonstrates how to fetch 3Box profile data for Ethereum addresses and DIDs using the new box.profile API in subgraph mappings. This enables integration of user profiles into dApps.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { box } from '@graphprotocol/graph-ts'\n\nlet profile = box.profile(\"0xc8d807011058fcc0FB717dcd549b9ced09b53404\")\nif (profile !== null) {\n  let name = profile.get(\"name\")\n  ...\n}\n\nlet profileFromDid = box.profile(\n  \"id:3:bafyreia7db37k7epoc4qaifound6hk7swpwfkhudvdug4bgccjw6dh77ue\"\n)\n...\n```\n\n----------------------------------------\n\nTITLE: Enabling Non-Deterministic IPFS\nDESCRIPTION: Enables indexing of subgraphs that use ipfs.cat in mappings. This is an experimental, non-deterministic feature that will be removed in the future.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_ALLOW_NON_DETERMINISTIC_IPFS\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Graph Node Docker Image for M1 Macs\nDESCRIPTION: Series of commands to rebuild the Graph Node Docker image for Macbook M1 architecture. This process involves removing the original image, building a new one with the provided script, and tagging it appropriately.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docker/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Remove the original image\ndocker rmi graphprotocol/graph-node:latest\n\n# Build the image\n./docker/build.sh\n\n# Tag the newly created image\ndocker tag graph-node graphprotocol/graph-node:latest\n```\n\n----------------------------------------\n\nTITLE: Running Configured Parity Dev Chain (Shell)\nDESCRIPTION: Command to run a Parity development chain with specific parameters, including unlocking an account for transactions and enabling CORS for browser integration. This provides a zero block time chain for fast testing.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/getting-started.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nparity --config dev --unsafe-expose --jsonrpc-cors=\"all\" --unlock <ACCOUNT_ADDRESS> --password ~/Desktop/password.txt\n```\n\n----------------------------------------\n\nTITLE: Running Substreams Example with Cargo\nDESCRIPTION: Executes the Substreams example using cargo. For graph entities, the 'graph_out' module name should be used.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/chain/substreams/examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p graph-chain-substreams --example substreams [module_name] # for graph entities run `graph_out`\n```\n\n----------------------------------------\n\nTITLE: Common Exports for API 0.0.5\nDESCRIPTION: Export statement for API version 0.0.5 to include common global definitions and type information.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/runtime/test/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './common/global'\n```\n\n----------------------------------------\n\nTITLE: Specifying Debug Fork Subgraph ID\nDESCRIPTION: Sets the IPFS hash ID of the subgraph to fork for debugging purposes.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_DEBUG_FORK\n```\n\n----------------------------------------\n\nTITLE: Compiling WASM for API Version 0.0.4\nDESCRIPTION: Command to compile TypeScript files to WASM for API version 0.0.4 using AssemblyScript v0.6.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/runtime/test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nasc wasm_test/api_version_0_0_4/abi_classes.ts -b wasm_test/api_version_0_0_4/abi_classes.wasm\n```\n\n----------------------------------------\n\nTITLE: Compiling WASM for API Version 0.0.5\nDESCRIPTION: Command to compile TypeScript files to WASM for API version 0.0.5 with explicit start and runtime export flags.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/runtime/test/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nasc --explicitStart --exportRuntime --runtime stub wasm_test/api_version_0_0_5/abi_classes.ts -b wasm_test/api_version_0_0_5/abi_classes.wasm\n```\n\n----------------------------------------\n\nTITLE: Resume Operation Response\nDESCRIPTION: Example response format for a successful deployment resume operation.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"deployment\": {\n      \"resume\": {\n        \"success\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restart Operation Response\nDESCRIPTION: Example response showing the unique execution ID for a restart operation.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"deployment\": {\n      \"restart\": {\n        \"id\": \"UNIQUE_EXECUTION_ID\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AssemblyScript v0.19.10\nDESCRIPTION: Commands to install either the specific v0.19.10 or latest version of AssemblyScript compiler globally.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/runtime/test/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# for the precise one\nnpm install -g assemblyscript@0.19.10\n\n# for the latest one, it should work as well\nnpm install -g assemblyscript\n```\n\n----------------------------------------\n\nTITLE: Enabling Non-Fatal Errors Feature in Subgraph Manifest\nDESCRIPTION: YAML configuration to enable the non-fatal errors feature in a subgraph manifest. This allows subgraphs to continue syncing even when encountering errors by skipping problematic handlers.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfeatures:\n  - nonFatalErrors\n```\n\n----------------------------------------\n\nTITLE: Call Handler Bug Affected Deployments\nDESCRIPTION: IPFS hashes of subgraph deployments affected by the call handler determinism bug for apiVersion < 0.0.5.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/NEWS.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nQmNY7gDNXHECV8SXoEY7hbfg4BX1aDMxTBDiFuG4huaSGA\nQmYzsCjrVwwXtdsNm3PZVNziLGmb9o513GUzkq5wwhgXDT\nQmccAwofKfT9t4XKieDqwZre1UUZxuHw5ynB35BHwHAJDT\nQmYUcrn9S1cuSZQGomLRyn8GbNHmX8viqxMykP8kKpghz6\nQmecPw1iYuu85rtdYL2J2W9qcr6p8ijich9P5GbEAmmbW5\nQmaz1R8vcv9v3gUfksqiS9JUz7K9G8S5By3JYn8kTiiP5K\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Test Dependencies\nDESCRIPTION: Command to launch Postgres and IPFS server using the provided script in the devel directory. This creates necessary data folders and starts the containerized dependencies.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/store/test-store/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./store/test-store/devel/up.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Node ID Literal Value Option\nDESCRIPTION: Docker-only setting that uses the literal node_id provided to the docker start script instead of replacing hyphens with underscores. Changing this for existing installations requires updating assigned node IDs in the database.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_NODE_ID_USE_LITERAL_VALUE\n```\n\n----------------------------------------\n\nTITLE: Required TypeScript Imports for API 0.0.4\nDESCRIPTION: Required import statements for API version 0.0.4 to properly use the allocator.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/runtime/test/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"allocator/arena\";\n\nexport { memory };\n```\n\n----------------------------------------\n\nTITLE: Git Merge Commands for Pull Request\nDESCRIPTION: Series of git commands to properly merge a pull request while maintaining a linear history and avoiding merge commits.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout master\ngit pull master\ngit rebase master my/branch\ngit push -f\ngit checkout master\ngit merge my/branch\ngit push\n```\n\n----------------------------------------\n\nTITLE: Installing AssemblyScript v0.6 Compiler\nDESCRIPTION: Command to install the AssemblyScript compiler version 0.6 globally using npm.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/runtime/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g AssemblyScript/assemblyscript#v0.6\n```\n\n----------------------------------------\n\nTITLE: Optimized SQL Query for Single Child Type\nDESCRIPTION: Simplified SQL query for the case when children are not an interface type. This optimization inlines the CTE to avoid performance penalties in PostgreSQL versions before 12.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/implementation/sql-query-generation.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect '..' as entity, to_jsonb(e.*) as data, p.id as parent_id\n  from {expand_parents}\n       cross join lateral\n       (select *\n          from children c\n         where {linked_children}\n           and .. other conditions on c ..\n         order by c.{sort_key}\n         limit {first} offset {skip}) c\n order by c.{sort_key}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Substreams\nDESCRIPTION: Sets the necessary environment variables for Substreams including the API token, endpoint, and package path.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/chain/substreams/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$> export SUBSTREAMS_API_TOKEN=your_sf_token\n$> export SUBSTREAMS_ENDPOINT=your_sf_endpoint # you can also not define this one and use the default specified endpoint\n$> export SUBSTREAMS_PACKAGE=path_to_your_spkg\n```\n\n----------------------------------------\n\nTITLE: Querying Deployment Information\nDESCRIPTION: GraphQL query to retrieve status information about a specific deployment using its hash.\nSOURCE: https://github.com/graphprotocol/graph-node/blob/master/docs/graphman-graphql-api.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nquery {\n    deployment {\n        info(deployment: { hash: \"Qm...\" }) {\n            status {\n                isPaused\n            }\n        }\n    }\n}\n```"
  }
]