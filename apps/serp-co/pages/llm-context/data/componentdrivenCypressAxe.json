[
  {
    "owner": "component-driven",
    "repo": "cypress-axe",
    "content": "TITLE: Installing Cypress-Axe Dependencies\nDESCRIPTION: Commands for installing cypress-axe and its dependencies for different Cypress versions.\nSOURCE: https://github.com/component-driven/cypress-axe/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev axe-core cypress cypress-axe\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev axe-core cypress@9.6.0 cypress-axe@0.14.0\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress-Axe Test Setup\nDESCRIPTION: Example of injecting axe-core into the test page using beforeEach hook.\nSOURCE: https://github.com/component-driven/cypress-axe/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  cy.visit('http://localhost:9000')\n  cy.injectAxe()\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  cy.visit('http://localhost:9000')\n  cy.injectAxe({ axeCorePath: '<path-to-axe-core>' })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Accessibility Testing Examples\nDESCRIPTION: Various examples of using checkA11y command for accessibility testing.\nSOURCE: https://github.com/component-driven/cypress-axe/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Basic usage\nit('Has no detectable a11y violations on load', () => {\n  cy.checkA11y()\n})\n\n// Applying a context and run parameters\nit('Has no detectable a11y violations on load (with custom parameters)', () => {\n  cy.checkA11y('.example-class', {\n    runOnly: {\n      type: 'tag',\n      values: ['wcag2a']\n    }\n  })\n})\n\nit('Has no detectable a11y violations on load (filtering to only include critical impact violations)', () => {\n  cy.checkA11y(null, {\n    includedImpacts: ['critical']\n  })\n})\n\nit('Has no a11y violations after button click', () => {\n  cy.get('button').click()\n  cy.checkA11y()\n})\n\nit('Only logs a11y violations while allowing the test to pass', () => {\n  cy.checkA11y(null, null, null, true)\n})\n\nit('Has no a11y violations after asynchronous load', () => {\n  cy.checkA11y(null, {\n    retries: 3,\n    interval: 100\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Cypress-Axe\nDESCRIPTION: TSConfig setup for using cypress-axe with TypeScript, including necessary type definitions.\nSOURCE: https://github.com/component-driven/cypress-axe/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"target\": \"es5\",\n    \"lib\": [\"esnext\", \"dom\"],\n    \"types\": [\"cypress\", \"cypress-axe\"]\n  },\n  \"include\": [\".\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Axe Settings\nDESCRIPTION: Example of configuring axe-core settings using configureAxe command.\nSOURCE: https://github.com/component-driven/cypress-axe/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('Has no detectable a11y violations on load (custom configuration)', () => {\n  cy.configureAxe({\n    branding: {\n      brand: String,\n      application: String\n    },\n    reporter: 'option',\n    checks: [Object],\n    rules: [Object],\n    locale: Object\n  })\n  cy.checkA11y()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Cypress-Axe Commands\nDESCRIPTION: JavaScript import statement to include cypress-axe commands in Cypress support file.\nSOURCE: https://github.com/component-driven/cypress-axe/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'cypress-axe'\n```\n\n----------------------------------------\n\nTITLE: Custom Violation Logging Implementation\nDESCRIPTION: Example of implementing custom violation logging using the violationCallback parameter.\nSOURCE: https://github.com/component-driven/cypress-axe/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction terminalLog(violations) {\n  cy.task(\n    'log',\n    `${violations.length} accessibility violation${\n      violations.length === 1 ? '' : 's'\n    } ${violations.length === 1 ? 'was' : 'were'} detected`\n  )\n  const violationData = violations.map(\n    ({ id, impact, description, nodes }) => ({\n      id,\n      impact,\n      description,\n      nodes: nodes.length\n    })\n  )\n\n  cy.task('table', violationData)\n}\n\nit('Logs violations to the terminal', () => {\n  cy.checkA11y(null, null, terminalLog)\n})\n```\n\n----------------------------------------\n\nTITLE: Cypress Plugin Configuration\nDESCRIPTION: Plugin configuration for custom logging tasks in Cypress.\nSOURCE: https://github.com/component-driven/cypress-axe/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (on, config) => {\n  on('task', {\n    log(message) {\n      console.log(message)\n\n      return null\n    },\n    table(message) {\n      console.table(message)\n\n      return null\n    }\n  })\n}\n```"
  }
]