[
  {
    "owner": "shopify",
    "repo": "remote-dom",
    "content": "TITLE: Installing @remote-dom/core package\nDESCRIPTION: Commands for installing the @remote-dom/core package using different package managers. This package is required to create the connection between host and remote environments.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install @remote-dom/core --save\n# pnpm\npnpm install @remote-dom/core --save\n# yarn\nyarn add @remote-dom/core\n```\n\n----------------------------------------\n\nTITLE: Creating and Connecting RemoteRootElement in TypeScript\nDESCRIPTION: This code snippet shows how to define and use a RemoteRootElement, which is a custom HTMLElement subclass for synchronizing a tree of custom elements with the host environment. It demonstrates how to define the custom element and connect it to a remote connection.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteRootElement} from '@remote-dom/core/elements';\n\n// Remote DOM does not define this element, so you can give it a\n// name of your choice. We recommend using `remote-root`.\n\ncustomElements.define('remote-root', RemoteRootElement);\n\nconst root = document.createElement('remote-root');\n\n// Now, any changes to this elements descendants will be communicated\n// to the host environment.\nroot.connect(connection);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Remote Element in TypeScript\nDESCRIPTION: Creates a simple custom element by extending the RemoteElement base class and registering it with the customElements registry.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Defining RemoteFragmentElement as a Generic Container in TypeScript\nDESCRIPTION: This code snippet shows how to define a RemoteFragmentElement, which is used as a generic container for certain APIs in @remote-dom/preact and @remote-dom/react. It demonstrates how to import and define the custom element.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteFragmentElement} from '@remote-dom/core/elements';\n\ncustomElements.define('remote-fragment', RemoteFragmentElement);\n```\n\n----------------------------------------\n\nTITLE: Manually Synchronizing Remote Attributes\nDESCRIPTION: Demonstrates how to manually observe and synchronize attributes between remote and host environments by implementing the attributeChangedCallback method.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get observedAttributes() {\n    return ['label'];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'label') {\n      this.updateRemoteAttribute('label', newValue);\n    }\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoteMutationObserver in the iframe\nDESCRIPTION: HTML setup for the remote environment (iframe) that creates a RemoteMutationObserver to track DOM changes. This observer sends mutations to the parent window through postMessage to synchronize DOM elements.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <body>\n    <div id=\"root\"></div>\n\n    <script type=\"module\">\n      import {RemoteMutationObserver} from '@remote-dom/core/elements';\n\n      // We will synchronize everything inside this element to the host.\n      const root = document.querySelector('#root');\n\n      // Send the mutations to the host via `postMessage`, which we just finished\n      // adding a listener for in the previous step.\n      const observer = new RemoteMutationObserver({\n        mutate(mutations) {\n          window.parent.postMessage(mutations, '*');\n        },\n      });\n\n      observer.observe(root);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Events with remoteEvents\nDESCRIPTION: Demonstrates how to define events that can be listened for in the remote environment but are dispatched by the host environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteEvents() {\n    return ['change'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Configuring DOMRemoteReceiver with Memory Management in TypeScript\nDESCRIPTION: Initializes a DOMRemoteReceiver with custom retain and release functions for manual memory management of remote properties. This example uses an external library for memory management.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// This library is not included with Remote DOM, but it pairs\n// well with it in allowing you to pass functions between\n// JavaScript environments without leaking memory, by manually\n// managing the memory for those functions.\nimport {retain, release} from '@quilted/threads';\nimport {DOMRemoteReceiver} from '@remote-dom/core/receivers';\n\nconst receiver = new DOMRemoteReceiver({retain, release});\n```\n\n----------------------------------------\n\nTITLE: Creating a Remote Component wrapper for React\nDESCRIPTION: Creates a React wrapper component around a custom element using createRemoteComponent(). This wrapper provides proper TypeScript type support and correctly maps props to attributes, properties, or event listeners.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRoot} from 'react-dom/client';\nimport {createRemoteComponent} from '@remote-dom/react';\n\nconst MyElementComponent = createRemoteComponent('my-element', MyElement);\n\ncreateRoot(document.querySelector('#root')).render(\n  <MyElementComponent label=\"Hello, world!\" />,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to Remote Elements\nDESCRIPTION: Shows how to add event listeners to a remote element that will respond to events dispatched by the host environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst element = document.createElement('my-element');\nelement.addEventListener('change', () => console.log('Changed!'));\n```\n\n----------------------------------------\n\nTITLE: Initializing DOMRemoteReceiver in TypeScript\nDESCRIPTION: Creates a DOMRemoteReceiver instance and connects it to the document body. This allows custom elements created in the remote environment to be attached to the body element.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DOMRemoteReceiver} from '@remote-dom/core/receivers';\n\nconst receiver = new DOMRemoteReceiver();\n\n// Any custom elements created in the remote environment will\n// be attached to the `body` element.\nreceiver.connect(document.body);\n```\n\n----------------------------------------\n\nTITLE: Simplified Remote Properties Definition\nDESCRIPTION: Shows how to define remote properties using the static remoteProperties getter for automatic attribute/property handling.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteProperties() {\n    return ['label'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Custom Button Element\nDESCRIPTION: Demonstrates setting up a remote environment with a custom ui-button element using RemoteElement class. Includes button initialization, click event handling, and thread communication setup.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <body>\n    <div id=\"root\">\n      <ui-button primary=\"\">Clicked 0 times</ui-button>\n    </div>\n\n    <script type=\"module\">\n      import {RemoteElement} from '@remote-dom/core/elements';\n\n      // For full details on defining remote elements, see the documentation\n      // for `@remote-dom/core/elements`:\n      // https://github.com/Shopify/remote-dom/tree/main/packages/core#elements\n      class UIButton extends RemoteElement {\n        static get remoteAttributes() {\n          return ['primary'];\n        }\n\n        static get remoteEvents() {\n          return ['click'];\n        }\n      }\n\n      customElements.define('ui-button', UIButton);\n    </script>\n\n    <script type=\"module\">\n      // Now, we'll render an instance of this button in the remote environment,\n      // with its updates synchronized to the host based on the properties\n      // we defined above.\n\n      let count = 0;\n      const button = document.querySelector('ui-button');\n\n      button.addEventListener('click', () => {\n        count += 1;\n\n        button.textContent = `Clicked ${count} ${\n          count === 1 ? 'time' : 'times'\n        }`;\n      });\n    </script>\n\n    <script type=\"module\">\n      // In order to proxy function properties and methods between environments,\n      // we need a library that can serialize functions over `postMessage`. You can\n      // use any library you wish, but this example will use [`@quilted/threads`](https://github.com/lemonmade/quilt/tree/main/packages/threads),\n      // which is a small library that was designed to work well with Remote DOM.\n\n      import {RemoteMutationObserver} from '@remote-dom/core/elements';\n      import {ThreadNestedWindow} from '@quilted/threads';\n\n      const root = document.querySelector('#root');\n\n      new ThreadNestedWindow({\n        exports: {\n          // This `render()` method will kick off the process of synchronizing\n          // changes between environments. It will be called on the host with a\n          // `RemoteConnection` object, which you'll generally get from one of\n          // Remote DOM's `Receiver` classes.\n          async render(connection) {\n            const observer = new RemoteMutationObserver(connection);\n            observer.observe(root);\n          },\n        },\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Element with TypeScript Types\nDESCRIPTION: Demonstrates how to create a remote element with full TypeScript type support using createRemoteElement function.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createRemoteElement} from '@remote-dom/core/elements';\n\ninterface MyElementAttributes {\n  label?: string;\n}\n\ninterface MyElementProperties {\n  emphasized?: boolean;\n}\n\ninterface MyElementEvents {\n  change(event: CustomEvent): void;\n}\n\ninterface MyElementMethods {\n  focus(): void;\n}\n\nconst MyElement = createRemoteElement<\n  MyElementProperties,\n  MyElementMethods,\n  {},\n  MyElementEvents\n>({\n  attributes: ['label'],\n  events: ['change'],\n  properties: {\n    emphasized: {type: Boolean},\n  },\n  methods: ['focus'],\n});\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing Host Custom Button Element\nDESCRIPTION: Shows how to implement the host-side ui-button element using native Custom Elements API, including attribute observation and DOM rendering. Also demonstrates Remote DOM receiver setup and thread communication.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <body>\n    <div id=\"root\"></div>\n\n    <iframe id=\"remote-iframe\" src=\"/remote\" hidden></iframe>\n\n    <script type=\"module\">\n      class UIButton extends HTMLElement {\n        // By default, `DOMRemoteReceiver` will assign remote properties as properties,\n        // but only if the element has a matching property defined. Otherwise, the remote\n        // properties will be set as attributes. We'll observe the `primary` attribute\n        // in order to update our rendered content when that attribute changes. We'll\n        // define an `onClick` method, though, which will be set to the value of the `onClick`\n        // remote property.\n        static get observedAttributes() {\n          return ['primary'];\n        }\n\n        connectedCallback() {\n          const primary = this.hasAttribute('primary') ?? false;\n\n          const root = this.attachShadow({mode: 'open'});\n\n          // We render a <slot> where we want the element's children to go.\n          root.innerHTML = `<button class=\"Button\"><slot></slot></button>`;\n\n          if (primary) {\n            root.querySelector('.Button').classList.add('Button--primary');\n          }\n        }\n\n        attributeChangedCallback(name, oldValue, newValue) {\n          if (name === 'primary') {\n            const button = this.shadowRoot?.querySelector('.Button');\n\n            if (button == null) return;\n\n            if (newValue == null) {\n              button.classList.remove('Button--primary');\n            } else {\n              button.classList.add('Button--primary');\n            }\n          }\n        }\n      }\n\n      customElements.define('ui-button', UIButton);\n    </script>\n\n    <script type=\"module\">\n      import {DOMRemoteReceiver} from '@remote-dom/core/receivers';\n      import {ThreadIframe} from '@quilted/threads';\n\n      const root = document.querySelector('#root');\n      const iframe = document.querySelector('#remote-iframe');\n\n      // In earlier examples, we did not pass any arguments, which allows the DOM\n      // receiver to mirror any element it receives. By passing the `elements` option,\n      // we are restricting the allowed elements to only the ones we list, which in this\n      // case means only our `ui-button` element can be rendered.\n      const receiver = new DOMRemoteReceiver({\n        retain,\n        release,\n        elements: ['ui-button'],\n      });\n      receiver.connect(root);\n\n      // Like our previous example, we need to use a library that can serialize\n      // function properties over `postMessage`.\n      const thread = new ThreadIframe(iframe);\n      thread.imports.render(receiver.connection);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Observing Remote DOM Changes with RemoteMutationObserver in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and use a RemoteMutationObserver to detect changes in a remote element and communicate them to the host environment. It imports the necessary class and sets up an observer on the document body.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteMutationObserver} from '@remote-dom/core/elements';\n\nconst observer = new RemoteMutationObserver(connection);\n\n// Now, any changes to the `body` element will be communicated\n// to the host environment.\nobserver.observe(document.body);\n```\n\n----------------------------------------\n\nTITLE: Using RemoteReceiver.subscribe() for Element Change Notifications in TypeScript\nDESCRIPTION: This code snippet illustrates how to use the subscribe() method of RemoteReceiver to listen for changes in a remote element. It demonstrates subscribing to root element changes and shows how to use an AbortSignal to cancel the subscription.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteReceiver} from '@remote-dom/core/receivers';\n\nconst receiver = new RemoteReceiver();\n\n// Subscribe to all changes in the top-level children, attached\n// directly to the remote \"root\".\nreceiver.subscribe(receiver.root, (root) => {\n  console.log('Root changed!', root);\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteReceiver} from '@remote-dom/core/receivers';\n\nconst abort = new AbortController();\nconst receiver = new RemoteReceiver();\n\n// Subscribe to all changes in the top-level children, attached\n// directly to the remote \"root\".\nreceiver.subscribe(\n  receiver.root,\n  (root) => {\n    console.log('Root changed!', root);\n  },\n  {signal: abort.signal},\n);\n\n// Stop listening in 10 seconds\nsetTimeout(() => {\n  abort.abort();\n}, 10_000);\n```\n\n----------------------------------------\n\nTITLE: Implementing BatchingRemoteConnection for Performance Optimization in TypeScript\nDESCRIPTION: This snippet demonstrates how to use BatchingRemoteConnection to improve performance by batching updates from the remote environment. It shows how to create and connect a RemoteRootElement using BatchingRemoteConnection instead of the original connection object.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BatchingRemoteConnection,\n  RemoteRootElement,\n} from '@remote-dom/core/elements';\n\ncustomElements.define('remote-root', RemoteRootElement);\n\nconst root = document.createElement('remote-root');\n\nroot.connect(new BatchingRemoteConnection(connection));\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote Element State with RemoteReceiver.get() in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use RemoteReceiver.get() to fetch the latest state of a remote element that has been received from the remote environment. It shows that calling get() on the root element returns the root itself.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteReceiver} from '@remote-dom/core/receivers';\n\nconst receiver = new RemoteReceiver();\n\nreceiver.get(receiver.root) === receiver.root; // true\n```\n\n----------------------------------------\n\nTITLE: Mapping custom element events to React props\nDESCRIPTION: Creates a React wrapper component that maps the 'expand' event from a custom element to an 'onExpand' prop in React using the createRemoteComponent() helper.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponent} from '@remote-dom/preact';\n\nconst Card = createRemoteComponent('ui-card', CardElement, {\n  eventProps: {\n    onExpand: {event: 'expand'},\n  },\n});\n\nrender(\n  <Card\n    onExpand={() => {\n      console.log('Card expanded!');\n    }}\n  >\n    This is the body of the card.\n  </Card>,\n  document.querySelector('#root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Remote Element with slots\nDESCRIPTION: Defines custom elements that support slots, allowing child elements to be positioned in specific locations. The Card element supports a 'header' slot.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass Card extends RemoteElement {\n  static get remoteSlots() {\n    return ['header'];\n  }\n}\n\nclass Text extends RemoteElement {}\n\ncustomElements.define('ui-card', Card);\ncustomElements.define('ui-text', Text);\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Methods with RemoteReceiver.implement() in TypeScript\nDESCRIPTION: This snippet shows how to use RemoteReceiver.implement() to define implementations for remote methods on a particular element. It demonstrates implementing an 'alert' method on the root element that can be called from the remote environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// In the host environment:\nimport {RemoteReceiver} from '@remote-dom/core/receivers';\n\nconst receiver = new RemoteReceiver();\n\nreceiver.implement(receiver.root, {\n  alert(message) {\n    window.alert(message);\n  },\n});\n\n// In the remote environment:\nimport {RemoteRootElement} from '@remote-dom/core/elements';\n\ncustomElements.define('remote-root', RemoteRootElement);\n\nconst root = document.createElement('remote-root');\nroot.connect(receiver.connection);\n\nroot.callRemoteMethod('alert', 'Hello, world!');\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Components with createRemoteComponent()\nDESCRIPTION: Example of using createRemoteComponent() to create a wrapper Preact component with automatic TypeScript prop types. This function improves the integration between Preact and custom elements.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render} from 'preact';\n\nconst MyElementComponent = createRemoteComponent('my-element', MyElement);\n\nrender(\n  <MyElementComponent label=\"Hello, world!\" />,\n  document.querySelector('#root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Using slotted children in React components\nDESCRIPTION: Uses createRemoteComponent() to map slotted children to React element props, allowing for cleaner composition of custom elements in React.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRoot} from 'react-dom/client';\nimport {createRemoteComponent} from '@remote-dom/react';\n\nconst Card = createRemoteComponent('ui-card', CardElement);\nconst Text = createRemoteComponent('ui-text', TextElement);\n\ncreateRoot(document.querySelector('#root')).render(\n  <Card header={<Text>Hello, world!</Text>}>\n    This is the body of the card.\n  </Card>,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Properties in a RemoteElement\nDESCRIPTION: Example showing how to define remote properties on a custom element that extends RemoteElement, which will be synchronized between host and remote environments.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteProperties() {\n    return ['label'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\nmyElement.label = 'Hello, World!';\n```\n\n----------------------------------------\n\nTITLE: Creating a Remote Component Renderer for host environments\nDESCRIPTION: Creates a React component renderer for a host environment that handles remote element properties, attributes, event listeners, and slotted children, with a Card component example.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/react/host';\n\n// Imagine we are implementing the host version of our `ui-card` custom element above,\n// which allows a `header` slot. We'll also have it accept a `subdued` property to\n// customize its appearance.\n\nconst Card = createRemoteComponentRenderer(function Card({\n  header,\n  subdued,\n  onExpand,\n  children,\n}) {\n  const [isExpanded, setIsExpanded] = useIsExpanded();\n\n  return (\n    <div\n      class={[\n        'Card',\n        isExpanded && 'Card--expanded',\n        subdued && 'Card--subdued',\n      ]\n        .filter(Boolean)\n        .join(' ')}\n    >\n      {header && (\n        <button\n          class=\"Card__Header\"\n          onClick={() => {\n            const isExpanded = !isExpanded;\n            setIsExpanded(isExpanded);\n            if (isExpanded && onExpand) onExpand();\n          }}\n        >\n          {header}\n        </button>\n      )}\n      {children}\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes on Remote Elements\nDESCRIPTION: Shows how to create a remote element instance and set an attribute that will be synchronized with the host environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst element = document.createElement('my-element');\nelement.setAttribute('label', 'Hello, world!');\n```\n\n----------------------------------------\n\nTITLE: Creating Host-Side Component Renderers\nDESCRIPTION: Example of using createRemoteComponentRenderer() to create host-side Preact components that render remote elements. Shows how to handle attributes, properties, events, and slotted content.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/preact/host';\n\n// Imagine we are implementing the host version of our `ui-card` custom element above,\n// which allows a `header` slot and `expand` event. We'll also have it accept a `subdued` property to\n// customize its appearance.\n\nconst Card = createRemoteComponentRenderer(function Card({\n  header,\n  subdued,\n  onExpand,\n  children,\n}) {\n  const isExpanded = useIsExpanded();\n\n  return (\n    <div\n      class={[\n        'Card',\n        isExpanded.value && 'Card--expanded',\n        subdued && 'Card--subdued',\n      ]\n        .filter(Boolean)\n        .join(' ')}\n    >\n      {header && (\n        <button\n          class=\"Card__Header\"\n          onClick={() => {\n            isExpanded.value = !isExpanded.value;\n            if (isExpanded.value && onExpand) onExpand();\n          }}\n        >\n          {header}\n        </button>\n      )}\n      {children}\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Event Props Mapping in Remote Component Renderer\nDESCRIPTION: This snippet shows how to customize the mapping of event listeners to React props using the eventProps option in createRemoteComponentRenderer.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/preact/host';\n\nconst Card = createRemoteComponentRenderer(\n  function Card({children, onexpand}) {\n    return <ui-card onexpand={onexpand}>{children}</ui-card>;\n  },\n  {\n    eventProps: {\n      // Convert the `expand` event listener into an all-lowercase `onexpand` prop, which allows the prop to be passed\n      // directly as a web component event listener (in React 19+).\n      onexpand: {event: 'expand'},\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Remote Property Implementation in TypeScript\nDESCRIPTION: Shows how to manually implement a remote property using updateRemoteProperty() method in a RemoteElement subclass.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  #label;\n\n  get label() {\n    return this.#label;\n  }\n\n  set label(value) {\n    this.#label = value;\n    this.updateRemoteProperty('label', value);\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Handling Bubbling Events in Remote Components\nDESCRIPTION: This example demonstrates how to properly handle bubbling events in remote components to prevent unintended event propagation.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/react/host';\n\nconst Card = createRemoteComponentRenderer(function Card({children, onClick}) {\n  return (\n    <ui-card\n      onClick={(event) => {\n        if (event.target === event.currentTarget) {\n          onClick?.();\n        }\n      }}\n    >\n      {children}\n    </ui-card>\n  );\n});\n\nconst Button = createRemoteComponentRenderer(function Button({\n  children,\n  onClick,\n}) {\n  return (\n    <ui-button\n      onClick={(event) => {\n        if (event.target === event.currentTarget) {\n          onClick?.();\n        }\n      }}\n    >\n      {children}\n    </ui-button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using Remote Properties\nDESCRIPTION: Demonstrates how to use a remote property after it has been defined.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst element = document.createElement('my-element');\nelement.label = 'Hello, world!';\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Element with Event Listeners in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a custom element 'ui-card' that extends RemoteElement and implements a remote 'expand' event.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass Card extends RemoteElement {\n  static get remoteEvents() {\n    return ['expand'];\n  }\n}\n\ncustomElements.define('ui-card', Card);\n\nconst card = document.createElement('ui-card');\ncard.textContent = 'This is the body of the card.';\n\ncard.addEventListener('expand', (event) => {\n  console.log('Card expanded!', event.detail);\n});\n```\n\n----------------------------------------\n\nTITLE: Using RemoteRootRenderer for Rendering Remote Elements\nDESCRIPTION: This snippet demonstrates how to use the RemoteRootRenderer component to render a tree of remote elements in a React host environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRoot} from 'react-dom/client';\nimport {\n  createRemoteComponentRenderer,\n  RemoteRootRenderer,\n  RemoteReceiver,\n} from '@remote-dom/react/host';\n\n// Create wrapper elements to render our actual UI components in response\n// to remote elements. See the `createRemoteComponentRenderer()` section above.\nconst Card = createRemoteComponentRenderer(UICard);\n\nconst receiver = new RemoteReceiver();\n// TODO: send the `receiver.connection` object to the remote environment,\n// so it can send us updates about the tree of remote elements.\n\ncreateRoot(document.querySelector('#root')).render(\n  <RemoteRootRenderer\n    receiver={receiver}\n    components={new Map([['ui-card', Card]])}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Remote Methods Implementation\nDESCRIPTION: Shows how to implement remote methods using callRemoteMethod() function.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  focus() {\n    return this.callRemoteMethod('focus');\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst element = document.createElement('my-element');\nelement.focus();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Elements with Remote Events\nDESCRIPTION: Example of defining a custom RemoteElement class with remote events. This shows how to create a Card element that emits an 'expand' event to the remote environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass Card extends RemoteElement {\n  static get remoteEvents() {\n    return ['expand'];\n  }\n}\n\ncustomElements.define('ui-card', Card);\n```\n\n----------------------------------------\n\nTITLE: Using remoteAttributes for Simplified Attribute Synchronization\nDESCRIPTION: Shows how to use the remoteAttributes static getter as a convenience method to automatically synchronize specified attributes between environments.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteAttributes() {\n    return ['label'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring RemoteReceiver in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a RemoteReceiver, which stores remote elements in a basic JavaScript representation. It shows both a simple creation and an advanced setup with memory management for remote properties using retain and release functions.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteReceiver} from '@remote-dom/core/receivers';\n\nconst receiver = new RemoteReceiver();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// This library is not included with Remote DOM, but it pairs\n// well with it in allowing you to pass functions between\n// JavaScript environments without leaking memory, by manually\n// managing the memory for those functions.\nimport {retain, release} from '@quilted/threads';\nimport {RemoteReceiver} from '@remote-dom/core/receivers';\n\nconst receiver = new RemoteReceiver({retain, release});\n```\n\n----------------------------------------\n\nTITLE: Mapping Event Listeners with createRemoteComponent()\nDESCRIPTION: Example of using createRemoteComponent() to map event listener props to custom element events. Shows how to handle the 'expand' event from a Card element using an onExpand prop.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponent} from '@remote-dom/preact';\n\nconst Card = createRemoteComponent('ui-card', CardElement, {\n  eventProps: {\n    onExpand: {event: 'expand'},\n  },\n});\n\nrender(\n  <Card\n    onExpand={() => {\n      console.log('Card expanded!');\n    }}\n  >\n    This is the body of the card.\n  </Card>,\n  document.querySelector('#root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Remote Event Objects\nDESCRIPTION: Shows how to use the object form of remoteEvents to customize the event object that gets dispatched to event listeners in the remote environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass ChangeEvent extends CustomEvent {\n  constructor(value) {\n    super('change', {detail: value});\n  }\n}\n\nclass MyElement extends RemoteElement {\n  static get remoteEvents() {\n    return {\n      change: {\n        dispatchEvent(value) {\n          // Before calling event listeners, update some properties on the element,\n          // so they can be read in event listeners.\n          Object.assign(this, {value});\n          return new ChangeEvent(value);\n        },\n      },\n    };\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst element = document.createElement('my-element');\nelement.addEventListener('change', (event) => {\n  console.log('Changed!', element.value, element.value === event.detail);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Element with Custom Events in TypeScript\nDESCRIPTION: Example showing how to define a custom element in the remote environment that emits events to be handled by the host. The Card element emits an 'expand' event that can be listened to.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass Card extends RemoteElement {\n  static get remoteEvents() {\n    return ['expand'];\n  }\n}\n\ncustomElements.define('ui-card', Card);\n\nconst card = document.createElement('ui-card');\ncard.textContent = 'This is the body of the card.';\n\ncard.addEventListener('expand', (event) => {\n  console.log('Card expanded!', event.detail);\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Remote Properties Configuration\nDESCRIPTION: Demonstrates advanced remote properties configuration with different types and event handling.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteProperties() {\n    return {\n      label: {type: String},\n      emphasized: {type: Boolean},\n      onPress: {event: true},\n    };\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst element = document.createElement('my-element');\nelement.setAttribute('label', 'Hello, world!');\nelement.emphasized = true;\nelement.addEventListener('press', () => console.log('Pressed!'));\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Component Renderer with Event Listener Props in TSX\nDESCRIPTION: Demonstrates how to create a host-side Preact component that maps to a remote element. The component uses conventional Preact props like 'onExpand' that automatically emit corresponding remote events.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/preact/host';\n\nconst Card = createRemoteComponentRenderer(function Card({children, onExpand}) {\n  return (\n    <div>\n      {/* when clicked, will emit the `expand` remote event with this object as the `detail` field */}\n      <button onClick={() => onExpand({timestamp: Date.now()})}>Expand</button>\n      {children}\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using remoteEvents for Event Listener Synchronization\nDESCRIPTION: Example of defining remote events using the remoteEvents configuration, which synchronizes event listeners directly with the host environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteEvents() {\n    return ['change'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\n\n// And so does this, but using the `addEventListener` method instead\nmyElement.addEventListener('change', () => console.log('Changed!'));\n\n// No `myElement.onChange` property is created\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Remote DOM with Preact\nDESCRIPTION: Basic example of using @remote-dom/core with Preact without additional setup. Shows how to define a remote element extending RemoteElement and rendering it with Preact's h function.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {h, render} from 'preact';\nimport {RemoteElement} from '@remote-dom/core/elements';\n\n// Define your remote element...\n// @see https://github.com/Shopify/remote-dom/tree/main/packages/core/README.md#remoteelement\nclass MyElement extends RemoteElement {\n  static get remoteAttributes() {\n    return ['label'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\n// ...and render it using Preact components\n\nrender(\n  h('my-element', {label: 'Hello, world!'}),\n  document.querySelector('#root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Event Prop Mapping in Remote Components\nDESCRIPTION: Demonstrates how to customize which events get mapped to which property names in the Preact component. This example maps the 'expand' event to an all-lowercase 'onexpand' prop.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/preact/host';\n\nconst Card = createRemoteComponentRenderer(\n  function Card({children, onexpand}) {\n    return <ui-card onexpand={onexpand}>{children}</ui-card>;\n  },\n  {\n    eventProps: {\n      // Convert the `expand` event listener into an all-lowercase `onexpand` prop, which allows the prop to be passed\n      // directly as a web component event listener.\n      onexpand: {event: 'expand'},\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Remote-Host Event Communication Example\nDESCRIPTION: Example demonstrating how events are synchronized between remote and host environments, showing both the remote element definition and the host environment implementation.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Remote environment:\n\nclass MyElement extends RemoteElement {\n  static get remoteEvents() {\n    return ['change'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\n\nmyElement.addEventListener('change', (event) => {\n  console.log('Changed! New value: ', event.detail);\n});\n\n// Host environment:\n\nclass MyElement extends HTMLElement {\n  connectedCallback() {\n    // Emit a change event on this element, with detail that will be passed\n    // to the remote environment\n    this.addEventListener('change', (event) => {\n      event.stopImmediatePropagation();\n\n      this.dispatchEvent(\n        new CustomEvent('change', {\n          detail: this.value,\n        }),\n      );\n    });\n  }\n\n  // Additional implementation details of the host custom element...\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Simplified Event Handling with Direct Event Passing\nDESCRIPTION: Shows how to simplify event handling by directly passing event callbacks to the remote components. Remote DOM automatically applies target checking protection in this case.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/preact/host';\n\nconst Card = createRemoteComponentRenderer(function Card({children, onClick}) {\n  // Pass the callback directly through as an event listener.\n  return <ui-card onClick={onClick}>{children}</ui-card>;\n});\n\nconst Button = createRemoteComponentRenderer(function Button({\n  children,\n  onClick,\n}) {\n  return <ui-button onClick={onClick}>{children}</ui-button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Using remoteAttributes for Attribute Synchronization\nDESCRIPTION: Example of defining remote attributes using the remoteAttributes configuration, which synchronizes attributes directly with the host environment instead of as instance properties.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteAttributes() {\n    return ['label'];\n  }\n\n  // If you want to add instance properties, you can do it with getters and\n  // setters that manipulate the attribute value:\n  //\n  // get label() {\n  //   return this.getAttribute('label');\n  // }\n  //\n  // set label(value) {\n  //   this.setAttribute('label', value);\n  // }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\nmyElement.setAttribute('label', 'Hello, World!');\n```\n\n----------------------------------------\n\nTITLE: Importing React DOM polyfills for Web Worker environments\nDESCRIPTION: Imports required polyfills before importing React DOM to ensure necessary browser globals are available when using React in a Web Worker.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@remote-dom/core/polyfill';\nimport '@remote-dom/react/polyfill';\n\nimport {createRoot} from 'react-dom/client';\n\n// Render your React app, as shown in the following examples.\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoteRootRenderer with Preact\nDESCRIPTION: Example of how to set up a RemoteRootRenderer component with Preact to render a tree of remote elements. This component maps remote element types to their corresponding Preact components.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// If you don't already have this import somewhere in your project, you need\n// to add it — this import adds the Preact hooks that auto-subscribe components\n// to signals.\nimport '@preact/signals';\n\nimport {render} from 'preact';\nimport {\n  createRemoteComponentRenderer,\n  RemoteRootRenderer,\n  SignalRemoteReceiver,\n} from '@remote-dom/preact/host';\n\n// Create wrapper elements to render our actual UI components in response\n// to remote elements. See the `createRemoteComponentRenderer()` section above.\nconst Card = createRemoteComponentRenderer(UICard);\n\nconst receiver = new SignalRemoteReceiver();\n// TODO: send the `receiver.connection` object to the remote environment,\n// so it can send us updates about the tree of remote elements.\n\nrender(\n  <RemoteRootRenderer\n    receiver={receiver}\n    components={new Map([['ui-card', Card]])}\n  />,\n  document.querySelector('#root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Handlers as Remote Properties\nDESCRIPTION: Example showing how to define event handling remote properties using the event: true configuration, allowing both property assignment and addEventListener for event handling.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteProperties() {\n    return {\n      onChange: {\n        event: true,\n      },\n    };\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\n\n// This adds a callback property that is synchronized with the host environment\nmyElement.onChange = () => console.log('Changed!');\n\n// And so does this, but using the `addEventListener` method instead\nmyElement.addEventListener('change', () => console.log('Changed!'));\n```\n\n----------------------------------------\n\nTITLE: Adapting RemoteConnection to RemoteChannel using Remote DOM in TypeScript\nDESCRIPTION: This snippet shows how to use the adaptToLegacyRemoteChannel() function from @remote-dom/compat to adapt a RemoteConnection to a RemoteChannel. It demonstrates creating a DOMRemoteReceiver and converting its connection to a legacy channel, allowing use of Remote DOM receiver classes while supporting remote-ui.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/compat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DOMRemoteReceiver} from '@remote-dom/core/receivers';\nimport {adaptToLegacyRemoteChannel} from '@remote-dom/compat';\n\nconst receiver = new DOMRemoteReceiver();\nconst channel = adaptToLegacyRemoteChannel(receiver.connection);\n\n// Same as before: do something with the channel\nsendChannelToRemoteEnvironment(channel);\n```\n\n----------------------------------------\n\nTITLE: Migrating from RemoteRoot to DOM Elements in Remote DOM\nDESCRIPTION: Demonstrates how to replace `createRemoteRoot()` and its component creation API with native DOM APIs using the RemoteRootElement and custom elements.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/documentation/migrations/remote-ui-to-remote-dom.md#2025-04-17_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// Replace this:\n\nimport {createRemoteRoot} from '@remote-ui/core';\n\nexport function receiveChannelFromHostEnvironment(channel) {\n  const root = createRemoteRoot(channel);\n  const button = root.createComponent(\n    'Button',\n    {\n      primary: true,\n      onPress: () => console.log('Pressed!'),\n    },\n    ['Press me!'],\n  );\n  root.appendChild(button);\n}\n\n// With this:\n\nimport {RemoteRootElement} from '@remote-dom/core/elements';\n\n// Define our `Button` custom element, from earlier.\ncustomElements.define('ui-button', Button);\n\n// If you're using an `<iframe>` sandbox, you should use the `RemoteMutationObserver`\n// and an empty `div` element instead.\ncustomElements.define('remote-root', RemoteRootElement);\n\nexport function receiveConnectionFromHostEnvironment(connection) {\n  const root = document.createElement('remote-root');\n  document.body.appendChild(root);\n\n  const button = document.createElement('ui-button');\n  button.primary = true;\n  button.addEventListener('press', () => console.log('Pressed!'));\n  button.textContent = 'Press me!';\n  root.appendChild(button);\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Helper for DOM Creation in TypeScript\nDESCRIPTION: Demonstrates the use of the html helper function from @remote-dom/core/html for creating DOM elements using tagged template literals. This example shows how to create a custom button component and use it within a larger HTML structure.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html} from '@remote-dom/core/html';\n\nfunction MyButton() {\n  return html`<ui-button\n    onClick=${() => {\n      console.log('Pressed!');\n    }}\n    >Click me!</ui-button\n  >`;\n}\n\nconst html = html`\n  <ui-stack spacing>\n    <ui-text>Hello, world!</ui-text>\n    <${MyButton} />\n  </ui-stack>\n` satisfies HTMLElement;\n```\n\n----------------------------------------\n\nTITLE: Initializing Window Polyfill\nDESCRIPTION: Example of creating and setting up a Window instance to enable DOM APIs in non-browser environments. Shows basic usage with document.createElement().\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/polyfill/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Window} from '@remote-dom/polyfill';\n\nconst window = new Window();\nWindow.setGlobal(window);\n\n// Now you can use many important DOM APIs, like `document` and `Element`:\nconst div = document.createElement('div');\n```\n\n----------------------------------------\n\nTITLE: Updating React wrapper components in remote environment\nDESCRIPTION: Demonstrates how to migrate from createRemoteReactComponent to createRemoteComponent. The new approach leverages custom HTML elements for strong typing instead of the previous generic typing system.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/documentation/migrations/remote-ui-to-remote-dom.md#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// Replace this:\n\nimport {createRemoteReactComponent} from '@remote-ui/react';\n\nconst Button = createRemoteReactComponent<'Button', {onPress(): void}>(\n  'Button',\n);\n\n// With this:\n\nimport {createRemoteComponent} from '@remote-dom/react';\n\n// Define our custom `Button` element, as shown above.\ncustomElements.define('ui-button', Button);\n\nconst ReactButton = createRemoteComponent('ui-button', Button);\n```\n\n----------------------------------------\n\nTITLE: Using SignalRemoteReceiver.connection with RemoteMutationObserver\nDESCRIPTION: Demonstrates how to use the connection property from a SignalRemoteReceiver with a RemoteMutationObserver in the remote environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/signals/README.md#2025-04-17_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// In the host environment:\nimport {SignalRemoteReceiver} from '@remote-dom/signals';\n\nconst receiver = new SignalRemoteReceiver();\n\n// In the remote environment:\nimport {RemoteMutationObserver} from '@remote-dom/core/elements';\n\nconst observer = new RemoteMutationObserver(receiver.connection);\n```\n\n----------------------------------------\n\nTITLE: Updating React render call in remote environment\nDESCRIPTION: Shows how to replace the custom reconciler from @remote-ui/react with standard react-dom rendering. This change reflects the shift from custom reconciliation to direct DOM rendering.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/documentation/migrations/remote-ui-to-remote-dom.md#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Replace this:\n\nimport {createRemoteRoot} from '@remote-ui/core';\nimport {createRoot} from '@remote-ui/react';\n\nconst root = createRemoteRoot(/* ... */);\ncreateRoot(remoteRoot).render(<App />);\n\n// With this:\n\nimport {createRoot} from 'react-dom/client';\n\nconst root = document.createElement('remote-root');\ndocument.body.append(root);\ncreateRoot(root).render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Passing Event Object Directly to Remote Event in React\nDESCRIPTION: This example demonstrates how to pass an Event object directly to a React callback, which will be used as the detail field of the remote event.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/react/host';\n\nconst Card = createRemoteComponentRenderer(function Card({children, onExpand}) {\n  return (\n    // Can pass the callback directly as an event listener to create a corresponding remote event automatically.\n    <ui-card onexpand={onExpand}>{children}</ui-card>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Methods with SignalRemoteReceiver\nDESCRIPTION: Demonstrates how to implement custom remote methods on elements using SignalRemoteReceiver.implement() and call them from the remote environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/signals/README.md#2025-04-17_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// In the host environment:\nimport {SignalRemoteReceiver} from '@remote-dom/signals';\n\nconst receiver = new SignalRemoteReceiver();\n\nreceiver.implement(receiver.root, {\n  alert(message) {\n    window.alert(message);\n  },\n});\n\n// In the remote environment:\nimport {RemoteRootElement} from '@remote-dom/core/elements';\n\ncustomElements.define('remote-root', RemoteRootElement);\n\nconst root = document.createElement('remote-root');\nroot.connect(receiver.connection);\n\nroot.callRemoteMethod('alert', 'Hello, world!');\n```\n\n----------------------------------------\n\nTITLE: Updating Host Code to Use New Receiver Classes\nDESCRIPTION: Shows how to migrate from `createRemoteReceiver()` to the new `RemoteReceiver` class, including handling of memory management for functions with retain and release.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/documentation/migrations/remote-ui-to-remote-dom.md#2025-04-17_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// Replace this:\n\nimport {createRemoteReceiver} from '@remote-ui/core';\n\nconst receiver = createRemoteReceiver();\nsendToRemoteEnvironment(receiver.receive);\n\n// With this:\n\nimport {RemoteReceiver} from '@remote-dom/core';\nimport {retain, release} from '@quilted/threads';\n\n// You now need to pass in functions to manage the memory for functions manually,\n// where this was previously done automatically in `@remote-ui/rpc`. If you are\n// using the automatic memory management provided by `@quilted/threads`, you can\n// omit the `retain` and `release` functions.\nconst receiver = new RemoteReceiver({retain, release});\nsendToRemoteEnvironment(receiver.connection);\n```\n\n----------------------------------------\n\nTITLE: Passing Event Objects Directly to Remote Components in TSX\nDESCRIPTION: Shows how to pass event objects directly to remote components, allowing the detail field to be passed to the remote environment. Useful when working with existing web components that emit custom events.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/preact/host';\n\nconst Card = createRemoteComponentRenderer(function Card({children, onExpand}) {\n  return (\n    // Can pass the callback directly as an event listener to create a corresponding remote event automatically.\n    <ui-card onexpand={onExpand}>{children}</ui-card>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Components as Custom Elements in Remote DOM\nDESCRIPTION: Demonstrates how to define components as custom elements with the RemoteElement class, specifying properties and event handlers that the component accepts.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/documentation/migrations/remote-ui-to-remote-dom.md#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Define each component that your\nclass Button extends RemoteElement {\n  static get remoteProperties() {\n    return {\n      tooltip: {type: String},\n      primary: {type: Boolean},\n      onPress: {event: true},\n    };\n  }\n}\n\ncustomElements.define('ui-button', Button);\n```\n\n----------------------------------------\n\nTITLE: Setting up iframe communication with the host page\nDESCRIPTION: Enhanced host HTML page that includes an iframe for the remote environment and sets up message event listeners. This implementation forwards remote DOM mutations to the receiver to update the visible DOM.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <body>\n    <div id=\"root\"></div>\n\n    <iframe id=\"remote-iframe\" src=\"/remote\" hidden></iframe>\n\n    <script type=\"module\">\n      import {DOMRemoteReceiver} from '@remote-dom/core/receivers';\n\n      const root = document.querySelector('#root');\n      const iframe = document.querySelector('#remote-iframe');\n\n      const receiver = new DOMRemoteReceiver();\n      receiver.connect(root);\n\n      // We will send this message in the next step.\n      window.addEventListener('message', ({source, data}) => {\n        if (source !== iframe.contentWindow) return;\n        receiver.connection.mutate(data);\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Replacing RemoteFragment with Slot Attributes in Remote DOM\nDESCRIPTION: Shows how to replace the `RemoteFragment` concept from `remote-ui` with standard HTML slot attributes for component composition.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/documentation/migrations/remote-ui-to-remote-dom.md#2025-04-17_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// Replace this:\n\nconst root = createRemoteRoot(/* ... */);\nconst fragment = root.createFragment();\nconst icon = root.createComponent('Icon', {type: 'archive'});\nfragment.append(icon);\nconst button = root.createComponent('Button', {icon: fragment}, ['Archive']);\nroot.append(button);\n\n// With this:\n\nconst root = document.createElement('remote-root');\nconst button = document.createElement('ui-button');\nbutton.textContent = 'Archive';\nconst icon = document.createElement('ui-icon');\nicon.setAttribute('type', 'archive');\nicon.setAttribute('slot', 'icon');\nbutton.append(icon);\nroot.append(button);\ndocument.body.append(root);\n```\n\n----------------------------------------\n\nTITLE: Creating a DOMRemoteReceiver in the host page\nDESCRIPTION: Initial HTML setup for the host page that creates a DOMRemoteReceiver and connects it to a root element. This establishes the host environment that will receive and render DOM elements from the remote environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <body>\n    <div id=\"root\"></div>\n\n    <script type=\"module\">\n      import {DOMRemoteReceiver} from '@remote-dom/core/receivers';\n\n      const root = document.querySelector('#root');\n\n      const receiver = new DOMRemoteReceiver();\n      receiver.connect(root);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating host environment rendering for remote elements\nDESCRIPTION: Shows the changes needed in the host environment to render remote elements as React components. This includes using createRemoteComponentRenderer and handling fragment rendering for nested React elements.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/documentation/migrations/remote-ui-to-remote-dom.md#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Replace this:\n\nimport {useMemo, useEffect} from 'react';\nimport {\n  createController,\n  createRemoteReceiver,\n  RemoteRenderer,\n} from '@remote-ui/react/host';\n\nimport {Button} from './Button';\n\nfunction MyRemoteRenderer() {\n  const controller = useMemo(() => createController({Button}), []);\n  const receiver = useMemo(() => createRemoteReceiver(), []);\n\n  useEffect(() => {\n    sendReceiverToRemoteContext(receiver.receive);\n  }, [receiver]);\n\n  return <RemoteRenderer receiver={receiver} controller={controller} />;\n}\n\n// With this:\n\nimport {useMemo, useEffect} from 'react';\nimport {\n  createRemoteComponentRenderer,\n  RemoteRootRenderer,\n  RemoteFragmentRenderer,\n  RemoteReceiver,\n} from '@remote-dom/react/host';\n\nimport {Button} from './Button';\n\nfunction MyRemoteRenderer() {\n  const components = useMemo(\n    () =>\n      new Map([\n        ['ui-button', createRemoteComponentRenderer(Button)],\n        // If you want to allow React elements to be passed as props in the remote\n        // environment, `@remote-dom/react` will render a `remote-fragment` element\n        // in some cases. You need to provide a renderer for this element.\n        ['remote-fragment', RemoteFragmentRenderer],\n      ]),\n    [],\n  );\n  const receiver = useMemo(() => new RemoteReceiver(), []);\n\n  useEffect(() => {\n    sendReceiverToRemoteContext(receiver.connection);\n  }, [receiver]);\n\n  return <RemoteRootRenderer receiver={receiver} components={components} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RemoteChannel using remote-ui in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a RemoteChannel using the createRemoteReceiver function from @remote-ui/core. It shows the typical pattern of accessing the receiver property on a RemoteReceiver to obtain the channel function.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/compat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createRemoteReceiver} from '@remote-ui/core';\n\nconst receiver = createRemoteReceiver();\nconst channel = receiver.receive;\n\n// Do something with the channel, typically by sending it to a remote environment:\nsendChannelToRemoteEnvironment(channel);\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoteFragmentRenderer for Remote Fragments\nDESCRIPTION: This example shows how to use RemoteFragmentRenderer to handle remote-fragment elements in a React host environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRoot} from 'react-dom/client';\nimport {\n  createRemoteComponentRenderer,\n  RemoteRootRenderer,\n  RemoteFragmentRenderer,\n  SignalRemoteReceiver,\n} from '@remote-dom/react/host';\n\n// Same setup as above...\n\ncreateRoot(document.querySelector('#root')).render(\n  <RemoteRootRenderer\n    receiver={receiver}\n    components={\n      new Map([\n        ['ui-card', Card],\n        // We allow `remote-fragment` elements to be rendered, which is the\n        // name Remote DOM gives these wrapper elements by default. If you changed\n        // the name using the `slotProps.wrapper` option, match that name here.\n        ['remote-fragment', RemoteFragmentRenderer],\n      ])\n    }\n  />,\n  document.querySelector('#root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding dynamic content to the remote environment\nDESCRIPTION: Extension of the iframe HTML that adds dynamic content updating every second. This demonstrates how changes in the remote environment's DOM are automatically synchronized to the host environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <body>\n    <div id=\"root\"></div>\n\n    <script type=\"module\">\n      // Previous script's contents, excluded for brevity.\n      // ...\n    </script>\n\n    <script type=\"module\">\n      const root = document.querySelector('#root');\n\n      let count = 0;\n\n      setInterval(() => {\n        count += 1;\n        render();\n      }, 1_000);\n\n      function render() {\n        root.textContent = `Rendered ${count} ${\n          count === 1 ? 'second' : 'seconds'\n        } ago`;\n      }\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Elements with Slotted Content\nDESCRIPTION: Example of defining RemoteElement classes with slots. Shows a Card element that supports a 'header' slot and a Text element for content.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass Card extends RemoteElement {\n  static get remoteSlots() {\n    return ['header'];\n  }\n}\n\nclass Text extends RemoteElement {}\n\ncustomElements.define('ui-card', Card);\ncustomElements.define('ui-text', Text);\n```\n\n----------------------------------------\n\nTITLE: Correctly Handling Event Bubbling in Remote Components\nDESCRIPTION: Demonstrates how to properly check event targets to prevent duplicate event dispatching in a component hierarchy. Ensures events only trigger for their intended targets.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/preact/host';\n\nconst Card = createRemoteComponentRenderer(function Card({children, onClick}) {\n  // This `onclick` will be called, even if the `Button` was the actual target\n  return (\n    <ui-card\n      onClick={(event) => {\n        if (event.target === event.currentTarget) {\n          onClick?.();\n        }\n      }}\n    >\n      {children}\n    </ui-card>\n  );\n});\n\nconst Button = createRemoteComponentRenderer(function Button({\n  children,\n  onClick,\n}) {\n  return (\n    <ui-button\n      onClick={(event) => {\n        if (event.target === event.currentTarget) {\n          onClick?.();\n        }\n      }}\n    >\n      {children}\n    </ui-button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Bubbling for Remote Events\nDESCRIPTION: Demonstrates how to configure a remote event to bubble up through the DOM tree in the host environment, allowing parent elements to listen for events from child elements.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteEvents() {\n    return {\n      change: {\n        bubbles: true,\n      },\n    };\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst parent = document.createElement('parent-element');\nconst element = document.createElement('my-element');\nparent.append(element);\n\nparent.addEventListener('change', (event) => {\n  console.log('Nested element changed!', event.target, event.bubbles);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Slotted Elements as Props with createRemoteComponent()\nDESCRIPTION: Example of using createRemoteComponent() to map slotted children to Preact element props. Shows how to pass a 'header' prop to a Card component.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render} from 'preact';\nimport {createRemoteComponent} from '@remote-dom/preact';\n\nconst Card = createRemoteComponent('ui-card', CardElement);\nconst Text = createRemoteComponent('ui-text', TextElement);\n\nrender(\n  <Card header={<Text>Hello, world!</Text>}>\n    This is the body of the card.\n  </Card>,\n  document.querySelector('#root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring DOMRemoteReceiver with Caching in TypeScript\nDESCRIPTION: Creates a DOMRemoteReceiver with caching enabled to optimize for frequent re-parenting of elements. The cache.maxAge option specifies how long detached elements should be preserved for potential reuse.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DOMRemoteReceiver} from '@remote-dom/core/receivers';\n\nconst receiver = new DOMRemoteReceiver({\n  // Preserve host elements for 1 second after they are\n  // detached from the tree\n  cache: {maxAge: 1_000},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Operation Hooks\nDESCRIPTION: Demonstrates how to intercept DOM operations by implementing hooks provided by the polyfill library.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/polyfill/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {hooks} from '@remote-dom/polyfill';\n\nhooks.createElement = (element) => {\n  console.log('Creating element:', element);\n};\n```\n\n----------------------------------------\n\nTITLE: Using DOMRemoteReceiver Connection in Remote Environment\nDESCRIPTION: Demonstrates how to use the connection property of a DOMRemoteReceiver in a remote environment, specifically with a RemoteMutationObserver. This allows for observing mutations in the remote DOM.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// In the host environment:\nimport {DOMRemoteReceiver} from '@remote-dom/core/receivers';\n\nconst receiver = new DOMRemoteReceiver();\n\n// In the remote environment:\nimport {RemoteMutationObserver} from '@remote-dom/core/elements';\n\nconst observer = new RemoteMutationObserver(receiver.connection);\n```\n\n----------------------------------------\n\nTITLE: Installing Window Polyfill in JavaScript\nDESCRIPTION: Demonstrates how to install the Window polyfill to replicate DOM globals in a sandboxed environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/polyfill/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {window, Window} from '@remote-dom/core/polyfill';\n\nWindow.setGlobalThis(window);\n```\n\n----------------------------------------\n\nTITLE: Manual implementation of slotted children in React\nDESCRIPTION: Shows how the slotted children would be implemented manually without the wrapper provided by createRemoteComponent(), using a remote-fragment element.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRoot} from 'react-dom/client';\n\ncreateRoot(document.querySelector('#root')).render(\n  <ui-card>\n    This is the body of the card.\n    <remote-fragment slot=\"header\">\n      <ui-text>Hello, world!</ui-text>\n    </remote-fragment>\n  </ui-card>,\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Remote DOM Polyfill in TypeScript\nDESCRIPTION: Shows how to import the Remote DOM polyfill, which provides a minimal DOM implementation for web workers. This should be imported before any other code that depends on DOM globals.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@remote-dom/core/polyfill';\nimport {RemoteElement} from '@remote-dom/core/elements';\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing @remote-dom/core Package\nDESCRIPTION: Commands for installing the @remote-dom/core package using different package managers including npm, pnpm, and yarn.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @remote-dom/core --save # npm\npnpm install @remote-dom/core --save # pnpm\nyarn add @remote-dom/core # yarn\n```\n\n----------------------------------------\n\nTITLE: Manual Slotting with Remote Fragment\nDESCRIPTION: Example of manually implementing the slotting behavior that createRemoteComponent() provides. Shows how to wrap slotted content in a remote-fragment element.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render} from 'preact';\n\nrender(\n  <ui-card>\n    This is the body of the card.\n    <remote-fragment slot=\"header\">\n      <ui-text>Hello, world!</ui-text>\n    </remote-fragment>\n  </ui-card>,\n  document.querySelector('#root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Remote DOM React packages\nDESCRIPTION: Commands for installing Remote DOM core and React integration packages using different package managers.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @remote-dom/core @remote-dom/react --save # npm\npnpm install @remote-dom/core @remote-dom/react --save # pnpm\nyarn add @remote-dom/core @remote-dom/react # yarn\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Properties for Custom Element in JavaScript\nDESCRIPTION: Shows how to define remote properties for a custom element extending RemoteElement, which will be synchronized between host and remote environments.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/polyfill/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteProperties() {\n    return ['label'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\nmyElement.label = 'Hello, World!';\n```\n\n----------------------------------------\n\nTITLE: Disabling fragment wrapper for slotted children\nDESCRIPTION: Configures createRemoteComponent() to avoid wrapping slotted children in remote-fragment elements, instead directly applying the slot attribute to the children.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRoot} from 'react-dom/client';\nimport {createRemoteComponent} from '@remote-dom/react';\n\nconst Card = createRemoteComponent('ui-card', CardElement, {\n  slotProps: {\n    wrapper: false,\n  },\n});\n\nconst Text = createRemoteComponent('ui-text', TextElement);\n\ncreateRoot(document.querySelector('#root')).render(\n  <Card header={<Text>Hello, world!</Text>}>\n    This is the body of the card.\n  </Card>,\n);\n\n// Now, renders this tree of HTML elements:\n// <ui-card>\n//   This is the body of the card.\n//   <ui-text slot=\"header\">Hello, world!</ui-text>\n// </ui-card>\n```\n\n----------------------------------------\n\nTITLE: Installing Remote DOM Preact Package\nDESCRIPTION: Installation commands for adding @remote-dom/core and @remote-dom/preact packages using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @remote-dom/core @remote-dom/preact --save # npm\npnpm install @remote-dom/core @remote-dom/preact --save # pnpm\nyarn add @remote-dom/core @remote-dom/preact # yarn\n```\n\n----------------------------------------\n\nTITLE: Host-Remote Communication with Custom Events\nDESCRIPTION: Example demonstrating how host and remote environments can communicate through events, with the host environment dispatching events that will be handled in the remote environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Remote environment:\n\nclass MyElement extends RemoteElement {\n  static get remoteEvents() {\n    return ['change'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\n\nmyElement.addEventListener('change', (event) => {\n  console.log('Changed! New value: ', event.detail);\n});\n\n// Host environment:\n\nclass MyElement extends HTMLElement {\n  connectedCallback() {\n    // Emit a change event on this element, with detail that will be passed\n    // to the remote environment\n    this.addEventListener('change', (event) => {\n      event.stopImmediatePropagation();\n\n      this.dispatchEvent(\n        new CustomEvent('change', {\n          detail: this.value,\n        }),\n      );\n    });\n  }\n\n  // Additional implementation details of the host custom element...\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoteFragmentRenderer with Preact\nDESCRIPTION: Shows how to use RemoteFragmentRenderer to handle remote-fragment elements, which wrap Preact elements passed as props to remote elements. This prevents unnecessary wrapper elements in the DOM.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render} from 'preact';\nimport {\n  createRemoteComponentRenderer,\n  RemoteRootRenderer,\n  RemoteFragmentRenderer,\n  SignalRemoteReceiver,\n} from '@remote-dom/preact/host';\n\n// Same setup as above...\n\nrender(\n  <RemoteRootRenderer\n    receiver={receiver}\n    components={\n      new Map([\n        ['ui-card', Card],\n        // We allow `remote-fragment` elements to be rendered, which is the\n        // name Remote DOM gives these wrapper elements by default. If you changed\n        // the name using the `slotProps.wrapper` option, match that name here.\n        ['remote-fragment', RemoteFragmentRenderer],\n      ])\n    }\n  />,\n  document.querySelector('#root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Slot Wrapper in createRemoteComponent()\nDESCRIPTION: Example of configuring createRemoteComponent() to disable the remote-fragment wrapper for slotted content. This causes the slot attribute to be added directly to child elements.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render} from 'preact';\nimport {createRemoteComponent} from '@remote-dom/preact';\n\nconst Card = createRemoteComponent('ui-card', CardElement, {\n  slotProps: {\n    wrapper: false,\n  },\n});\n\nconst Text = createRemoteComponent('ui-text', TextElement);\n\nrender(\n  <Card header={<Text>Hello, world!</Text>}>\n    This is the body of the card.\n  </Card>,\n  document.querySelector('#root'),\n);\n\n// Now, renders this tree of HTML elements:\n// <ui-card>\n//   This is the body of the card.\n//   <ui-text slot=\"header\">Hello, world!</ui-text>\n// </ui-card>\n```\n\n----------------------------------------\n\nTITLE: Importing DOM Polyfill for Remote DOM in Web Workers\nDESCRIPTION: Shows how to import the DOM polyfill needed for Remote DOM to work in Web Worker environments.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/documentation/migrations/remote-ui-to-remote-dom.md#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport '@remote-dom/core/polyfill';\n```\n\n----------------------------------------\n\nTITLE: Problematic Implementation of Event Listeners in Remote Components\nDESCRIPTION: Shows a problematic implementation of event listeners that can cause duplicate events when used with bubbling events across multiple nested remote components.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/preact/host';\n\nconst Card = createRemoteComponentRenderer(function Card({children, onClick}) {\n  // This `onclick` will be called, even if the `Button` was the actual target\n  return <ui-card onClick={() => onClick?.()}>{children}</ui-card>;\n});\n\nconst Button = createRemoteComponentRenderer(function Button({\n  children,\n  onClick,\n}) {\n  return <ui-button onClick={() => onClick?.()}>{children}</ui-button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Remote Element with custom events\nDESCRIPTION: Defines a Card custom element that extends RemoteElement and exposes an 'expand' event that can be listened to in the remote environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass Card extends RemoteElement {\n  static get remoteEvents() {\n    return ['expand'];\n  }\n}\n\ncustomElements.define('ui-card', Card);\n```\n\n----------------------------------------\n\nTITLE: Installing @remote-dom/signals Package\nDESCRIPTION: Shows different package manager commands to install the @remote-dom/signals library.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/signals/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @remote-dom/signals --save\npnpm install @remote-dom/signals --save\nyarn add @remote-dom/signals\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Remote Elements with Bubbling Events\nDESCRIPTION: Code showing how to define multiple remote elements that support the same bubbling event. This example demonstrates Card and Button elements both supporting a bubbling 'click' event.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/preact/README.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass Card extends RemoteElement {\n  static get remoteEvents() {\n    return {\n      click: {\n        bubbles: true,\n      },\n    };\n  }\n}\n\nclass Button extends RemoteElement {\n  static get remoteEvents() {\n    return {\n      click: {\n        bubbles: true,\n      },\n    };\n  }\n}\n\ncustomElements.define('ui-card', Card);\ncustomElements.define('ui-button', Button);\n\nconst card = document.createElement('ui-card');\ncard.addEventListener('click', (event) => {\n  console.log('Click event in card', event.target);\n});\n\nconst button = document.createElement('ui-button');\nbutton.textContent = 'Click me!';\nbutton.addEventListener('click', (event) => {\n  console.log('Click event in button', event.target);\n});\n\ncard.append(button);\n```\n\n----------------------------------------\n\nTITLE: Installing Remote DOM Polyfill Package\nDESCRIPTION: Commands for installing the @remote-dom/polyfill package using different package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/polyfill/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @remote-dom/polyfill --save # npm\npnpm install @remote-dom/polyfill --save # pnpm\nyarn add @remote-dom/polyfill # yarn\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Component Renderer with Event Props in React\nDESCRIPTION: This snippet shows how to use createRemoteComponentRenderer to create a React component that can emit remote events using conventional React props.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/README.md#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRemoteComponentRenderer} from '@remote-dom/react/host';\n\nconst Card = createRemoteComponentRenderer(function Card({children, onExpand}) {\n  return (\n    <div>\n      {/* when clicked, will emit the `expand` remote event with this object as the `detail` field */}\n      <button onClick={() => onExpand({timestamp: Date.now()})}>Expand</button>\n      {children}\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Getting Started Example for Remote DOM using pnpm\nDESCRIPTION: This command runs the getting started example for Remote DOM using pnpm. It filters the execution to the 'example-getting-started' package and starts the example.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/examples/getting-started/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter example-getting-started start\n```\n\n----------------------------------------\n\nTITLE: Installing Window Polyfill in Remote DOM\nDESCRIPTION: Example of using the Window.setGlobalThis() method to install the Window polyfill and make it available as globalThis, restoring behavior introduced in a previous PR.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {window, Window} from '@remote-dom/core/polyfill';\n\nWindow.setGlobalThis(window);\n```\n\n----------------------------------------\n\nTITLE: Remote DOM Element with Synchronized Attributes\nDESCRIPTION: Example of using the remoteAttributes configuration to synchronize HTML attributes directly with the host environment instead of using instance properties.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteAttributes() {\n    return ['label'];\n  }\n\n  // If you want to add instance properties, you can do it with getters and\n  // setters that manipulate the attribute value:\n  //\n  // get label() {\n  //   return this.getAttribute('label');\n  // }\n  //\n  // set label(value) {\n  //   this.setAttribute('label', value);\n  // }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\nmyElement.setAttribute('label', 'Hello, World!');\n```\n\n----------------------------------------\n\nTITLE: Running the Custom Element Example with pnpm\nDESCRIPTION: Command to start the custom element example using pnpm from the root of the repository. This command filters and runs the start script for the example-custom-element package.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/examples/custom-element/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter example-custom-element start\n```\n\n----------------------------------------\n\nTITLE: Updating Package Dependencies from `remote-ui` to Remote DOM\nDESCRIPTION: Shows how to update package.json dependencies by removing `@remote-ui/core` and adding `@remote-dom/core`.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/documentation/migrations/remote-ui-to-remote-dom.md#2025-04-17_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"dependencies\": {\n-    \"@remote-ui/core\": \"^2.2.0\",\n+    \"@remote-dom/core\": \"^1.0.0\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kitchen Sink Example with pnpm\nDESCRIPTION: Command to run the Kitchen Sink example from the root of the repository using pnpm. This command filters and starts the example-kitchen-sink project.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/examples/kitchen-sink/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter example-kitchen-sink start\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using pnpm package manager\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Events for Custom Element in JavaScript\nDESCRIPTION: Illustrates how to define remote events for a custom element, which will be synchronized with the host environment.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/polyfill/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteEvents() {\n    return ['change'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\n\nmyElement.addEventListener('change', () => console.log('Changed!'));\n```\n\n----------------------------------------\n\nTITLE: Remote DOM Element Definition with Remote Properties in TypeScript\nDESCRIPTION: Example of defining a custom element that extends RemoteElement with synchronizable remote properties that will be shared between host and remote environments.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteProperties() {\n    return ['label'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\nmyElement.label = 'Hello, World!';\n```\n\n----------------------------------------\n\nTITLE: Building Project\nDESCRIPTION: Command to build all package outputs using Rollup\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Remote DOM Element with Event Handling Properties\nDESCRIPTION: Example showing how to define a custom element with event-based remote properties that can synchronize callbacks between environments.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteProperties() {\n    return {\n      onChange: {\n        event: true,\n      },\n    };\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\n\n// This adds a callback property that is synchronized with the host environment\nmyElement.onChange = () => console.log('Changed!');\n\n// And so does this, but using the `addEventListener` method instead\nmyElement.addEventListener('change', () => console.log('Changed!'));\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to run Vitest tests in watch mode\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Remote DOM Element with Event Listeners Configuration\nDESCRIPTION: Example of using the remoteEvents configuration to define event listeners that will be synchronized with the host environment using addEventListener.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RemoteElement} from '@remote-dom/core/elements';\n\nclass MyElement extends RemoteElement {\n  static get remoteEvents() {\n    return ['change'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\n\n// And so does this, but using the `addEventListener` method instead\nmyElement.addEventListener('change', () => console.log('Changed!'));\n\n// No `myElement.onChange` property is created\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting\nDESCRIPTION: Command to run Prettier code formatting check\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Properties via Attributes\nDESCRIPTION: Example of how remote properties can be automatically updated when setting an attribute of the same name, showing property-attribute synchronization.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/core/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst myElement = document.createElement('my-element');\nmyElement.setAttribute('label', 'Hello, World!');\n\n// myElement.label === 'Hello, World!', and this value is synchronized\n// with the host environment as a \"remote property\"\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Type Checking\nDESCRIPTION: Command to perform type checking using TypeScript compiler\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm type-check\n```\n\n----------------------------------------\n\nTITLE: Remote DOM Changelog Entry\nDESCRIPTION: Markdown changelog detailing version changes for @remote-dom/compat package, including version numbers, PR references, commit hashes, and change descriptions.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/compat/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @remote-dom/compat\n\n## 1.0.2\n\n### Patch Changes\n\n- [#547](https://github.com/Shopify/remote-dom/pull/547) [`ca6a668`](https://github.com/Shopify/remote-dom/commit/ca6a66893f02eb4e7881a7117de5a461c7ae3708) Thanks [@igor10k](https://github.com/igor10k)! - Handle reordering in adapter\n\n- [#545](https://github.com/Shopify/remote-dom/pull/545) [`fe94f9b`](https://github.com/Shopify/remote-dom/commit/fe94f9b6e7087e1146fa2301b3d339c760c9d9a9) Thanks [@igor10k](https://github.com/igor10k)! - Handle fragments in adapter\n\n## 1.0.1\n\n### Patch Changes\n\n- [#536](https://github.com/Shopify/remote-dom/pull/536) [`9abf5be`](https://github.com/Shopify/remote-dom/commit/9abf5bee323dfa522f9061ba61ce2f433a36cb4e) Thanks [@igor10k](https://github.com/igor10k)! - Use the same core dependency version for all packages\n\n## 1.0.0\n\n### Major Changes\n\n- [#511](https://github.com/Shopify/remote-dom/pull/511) [`1a42bf6`](https://github.com/Shopify/remote-dom/commit/1a42bf6d72a1dcfe5403c097dfd406b116a3455b) Thanks [@robin-drexler](https://github.com/robin-drexler)! - Add a `adaptToLegacyRemoteChannel` helper that adapts a Remote DOM `RemoteConnection` object into a `remote-ui` `RemoteChannel`.\n\n  It allows to use a Remote DOM receiver class on the host, even if the remote environment is using `remote-ui`.\n\n### Patch Changes\n\n- Updated dependencies [[`8cbf2c2`](https://github.com/Shopify/remote-dom/commit/8cbf2c2a6130dd0a19088a2adf18b506f468be8b)]:\n  - @remote-dom/core@1.6.0\n```\n\n----------------------------------------\n\nTITLE: Creating Changeset\nDESCRIPTION: Command to create a new changeset for version management\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm changeset add\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Element with Remote Events in JavaScript\nDESCRIPTION: Demonstrates the implementation of a custom element with remote events in both remote and host environments, showing how events are handled and propagated.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/polyfill/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Remote environment:\n\nclass MyElement extends RemoteElement {\n  static get remoteEvents() {\n    return ['change'];\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\nconst myElement = document.createElement('my-element');\n\nmyElement.addEventListener('change', (event) => {\n  console.log('Changed! New value: ', event.detail);\n});\n\n// Host environment:\n\nclass MyElement extends HTMLElement {\n  connectedCallback() {\n    // Emit a change event on this element, with detail that will be passed\n    // to the remote environment\n    this.addEventListener('change', (event) => {\n      event.stopImmediatePropagation();\n\n      this.dispatchEvent(\n        new CustomEvent('change', {\n          detail: this.value,\n        }),\n      );\n    });\n  }\n\n  // Additional implementation details of the host custom element...\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Changes in Markdown\nDESCRIPTION: This code snippet shows the structure used to document patch changes for a specific version. It includes the version number, change type, and links to the relevant commit hashes.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/examples/kitchen-sink/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.25\n\n### Patch Changes\n\n- Updated dependencies [[`ca6a668`](https://github.com/Shopify/remote-dom/commit/ca6a66893f02eb4e7881a7117de5a461c7ae3708), [`fe94f9b`](https://github.com/Shopify/remote-dom/commit/fe94f9b6e7087e1146fa2301b3d339c760c9d9a9)]:\n  - @remote-dom/compat@1.0.2\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using the SignalRemoteReceiver Root Object\nDESCRIPTION: Shows how to access the root object of a SignalRemoteReceiver and use signal effects to react to changes in the children collection.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/signals/README.md#2025-04-17_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {SignalRemoteReceiver} from '@remote-dom/signals';\n\nconst receiver = new SignalRemoteReceiver();\nconst root = receiver.root;\n// {\n//   children: signal([]),\n//   ...\n// }\n\n// You can use the signals in the root object to compute other signals,\n// or use any of the standard signal APIs to interact with them:\n\nimport {effect} from '@preact/signals';\n\n// @preact/signals will re-run this function whenever the `root.children.value`\n// signal changes; this is, whenever children are added or removed from\n// the root node of the remote tree.\neffect(() => {\n  console.log(`Receiver has ${root.children.value.length} children`);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Element State with SignalRemoteReceiver.get()\nDESCRIPTION: Shows how to fetch the latest state of a remote element using the get() method.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/signals/README.md#2025-04-17_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {SignalRemoteReceiver} from '@remote-dom/signals';\n\nconst receiver = new SignalRemoteReceiver();\n\nreceiver.get(receiver.root) === receiver.root; // true\n```\n\n----------------------------------------\n\nTITLE: Creating a SignalRemoteReceiver with Memory Management\nDESCRIPTION: Shows how to create a SignalRemoteReceiver with manual memory management for remote properties using retain and release functions.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/signals/README.md#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// This library is not included with Remote DOM, but it pairs\n// well with it in allowing you to pass functions between\n// JavaScript environments without leaking memory, by manually\n// managing the memory for those functions.\nimport {retain, release} from '@quilted/threads';\nimport {SignalRemoteReceiver} from '@remote-dom/signals';\n\nconst receiver = new SignalRemoteReceiver({retain, release});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic SignalRemoteReceiver\nDESCRIPTION: Demonstrates how to create an empty SignalRemoteReceiver instance.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/signals/README.md#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {SignalRemoteReceiver} from '@remote-dom/signals';\n\nconst receiver = new SignalRemoteReceiver();\n```\n\n----------------------------------------\n\nTITLE: Version Updates in Markdown\nDESCRIPTION: Changelog entries detailing version updates, changes and dependencies for @remote-dom/signals package\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/packages/signals/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @remote-dom/signals\n\n## 2.1.0\n\n### Minor Changes\n\n- [#533](https://github.com/Shopify/remote-dom/pull/533) [`a9a88ab`](https://github.com/Shopify/remote-dom/commit/a9a88abe4ba81b253f0cc6cdd5e82a25bbe908c1) Thanks [@igor10k](https://github.com/igor10k)! - Make `removeChild` less strict in receivers\n\n### Patch Changes\n\n- [#535](https://github.com/Shopify/remote-dom/pull/535) [`79419d9`](https://github.com/Shopify/remote-dom/commit/79419d9377013a979ebc4ece53f59d9a9a893094) Thanks [@igor10k](https://github.com/igor10k)! - Move internal peer dependencies to dependencies\n\n- Updated dependencies [[`a9a88ab`](https://github.com/Shopify/remote-dom/commit/a9a88abe4ba81b253f0cc6cdd5e82a25bbe908c1)]:\n  - @remote-dom/core@1.7.0\n```\n\n----------------------------------------\n\nTITLE: Updating package dependencies for @remote-dom/react migration\nDESCRIPTION: Shows the necessary changes to package.json dependencies, removing @remote-ui/react and adding @remote-dom/react. Also shows modifications for react-dom and removing react-reconciler.\nSOURCE: https://github.com/Shopify/remote-dom/blob/main/documentation/migrations/remote-ui-to-remote-dom.md#2025-04-17_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"dependencies\": {\n-    \"@remote-ui/react\": \"^5.0.0\",\n+    \"@remote-dom/react\": \"^1.0.0\",\n  }\n}\n```\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@remote-dom/react\": \"^1.0.0\",\n    \"react\": \"^18.2.0\",\n+    \"react-dom\": \"^18.2.0\",\n-    \"react-reconciler\": \"*\",\n  }\n}\n```"
  }
]