[
  {
    "owner": "knownsec",
    "repo": "aipyapp",
    "content": "TITLE: Using AIPy in Task Mode\nDESCRIPTION: Example of using AIPy in Task mode to get Reddit posts by simply describing the task in natural language.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> Get the latest posts from Reddit r/LocalLLaMA\n......\n......\n>>> /done\n```\n\n----------------------------------------\n\nTITLE: Using AIPy in Python Mode\nDESCRIPTION: Demonstrates Python mode where the 'ai' function can be called with natural language instructions while working in a standard Python environment.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> ai(\"Get the title of Google's homepage\")\n```\n\n----------------------------------------\n\nTITLE: Detailed LLM Configuration for DeepSeek API\nDESCRIPTION: A comprehensive example of configuring the DeepSeek LLM with all available options, including model selection, API key, timeout settings, and token limits.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/CONFIG.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[llm.deepseek]\ntype = \"deepseek\"\nmodel = \"deepseek-chat\"\napi_key = \"你的 DeepSeek API Key\"\nenable = true\ndefault = false\ntimeout = 10\nmax_tokens = 8192\n```\n\n----------------------------------------\n\nTITLE: Executing AI-Assisted Task in Python Mode\nDESCRIPTION: Demonstrates how to use the 'ai' object to process a natural language task in Python mode. This snippet shows how to retrieve the title of Google's homepage using AI assistance.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/README.zh.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> ai(\"获取Google官网首页标题\")\n```\n\n----------------------------------------\n\nTITLE: Configuring AIPy with DeepSeek API\nDESCRIPTION: Basic configuration file (aipy.toml) that sets up DeepSeek as the LLM provider with your API key.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[llm.deepseek]\ntype = \"deepseek\"\napi_key = \"Your DeepSeek API Key\"\nenable = true\ndefault = true\n```\n\n----------------------------------------\n\nTITLE: Minimal Configuration for AIPY using Trustoken\nDESCRIPTION: The simplest configuration required to get started with AIPY, using Trustoken as the LLM provider. This sets up just the API key needed for basic functionality.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/CONFIG.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[llm.trustoken]\napi_key = \"你的Trustoken API Key\"\n```\n\n----------------------------------------\n\nTITLE: Using AIPy with pip Installation\nDESCRIPTION: Example of installing AIPy via pip and running it to process natural language tasks.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n-> % aipy\n🚀 Python use - AIPython (0.1.22) [https://aipy.app]\n>> Get the latest posts from Reddit r/LocalLLaMA\n......\n>>\n```\n\n----------------------------------------\n\nTITLE: Requesting Third-Party Package Installation in AIPython\nDESCRIPTION: Shows the interaction when an LLM requests installation of a third-party package (psutil) to list all processes on MacOS. The user is prompted to approve the installation.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/README.zh.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPython use - AIPython (Quit with 'exit()')\n>>> ai(\"使用psutil列出当前MacOS所有进程列表\")\n\n📦 LLM 申请安装第三方包: ['psutil']\n如果同意且已安装，请输入 'y [y/n] (n): y\n```\n\n----------------------------------------\n\nTITLE: Installing Third-Party Libraries with AIPy\nDESCRIPTION: Shows how AIPy handles requests to install third-party packages when needed for task execution.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPython use - AIPython (Quit with 'exit()')\n>>> ai(\"Use psutil to list all processes on MacOS\")\n\n📦 LLM requests to install third-party packages: ['psutil']\nIf you agree and have installed, please enter 'y [y/n] (n): y\n\n```\n\n----------------------------------------\n\nTITLE: API Configuration for Google Custom Search\nDESCRIPTION: Example configuration for setting up Google Custom Search API for use by the LLM, including environment variables for API keys and search engine ID, along with a descriptive comment.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/CONFIG.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nenv.GOOGLE_API_KEY = ['AIxxxxxx', '用于Google Custom Search的API Key']\nenv.SEARCH_ENGINE_ID = ['400xxxxxxx', 'Google Custom Search Engine ID']\ndesc = \"Google Custom Search API\"\n```\n\n----------------------------------------\n\nTITLE: Defining Event Types in Markdown\nDESCRIPTION: This snippet defines four event types (task_start, exec, result, and response_complete) used in the aipyapp project. It specifies the calling method and parameters for each event type.\nSOURCE: https://github.com/knownsec/aipyapp/blob/main/dev/Event.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Event 类型\n## task_start\n- 调用方式：pipeline\n- 参数：prompt dict\n\n`promot['task']` 为用户输入的任务。\n\n## exec\n- 调用方式：pipeline\n- 参数：blocks dict\n\n`blocks['main']` 为即将执行的代码块。\n\n## result\n- 调用方式：pipeline\n- 参数：result dict\n\n## response_complete\n- 调用方式：broadcast\n- 参数：response dict\n  - llm: LLM 名称\n  - content: LLM 返回消息的完整内容\n```"
  }
]