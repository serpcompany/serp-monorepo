[
  {
    "owner": "ymichael",
    "repo": "open-codex",
    "content": "TITLE: Running Open Codex CLI Interactively\nDESCRIPTION: Basic command to start Open Codex CLI in interactive mode, which opens the REPL interface for prompting the AI agent.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopen-codex\n```\n\n----------------------------------------\n\nTITLE: Installing Open Codex CLI Globally with NPM\nDESCRIPTION: Command to install the Open Codex CLI package globally using npm, making it available system-wide for terminal usage.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g open-codex\n```\n\n----------------------------------------\n\nTITLE: Installing Open Codex CLI via npm\nDESCRIPTION: Commands to install the Open Codex CLI globally using npm or yarn package managers.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g open-codex\n# or\nyarn global add open-codex\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Environment Variable\nDESCRIPTION: Command to set the OpenAI API key as an environment variable for the current terminal session. This is required for Open Codex CLI to authenticate with the AI provider.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=\"your-api-key-here\"\n```\n\n----------------------------------------\n\nTITLE: Running Open Codex with Initial Prompt\nDESCRIPTION: Command to run Open Codex with a specific initial prompt, starting the interactive session with a directed query.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopen-codex \"explain this codebase to me\"\n```\n\n----------------------------------------\n\nTITLE: Basic Codex CLI Commands\nDESCRIPTION: Basic commands to get started with Codex CLI, including help and direct prompting.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompting_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncodex --help\n```\n\nLANGUAGE: bash\nCODE:\n```\ncodex \"write 2-3 sentences on what you can do\"\n```\n\n----------------------------------------\n\nTITLE: Running Open Codex in Full Auto Mode\nDESCRIPTION: Command to run Open Codex with a specific prompt in full auto mode, which allows the agent to read/write files and execute shell commands without explicit approval.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopen-codex --approval-mode full-auto \"create the fanciest todo-list app\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Open Codex CLI\nDESCRIPTION: Example of a configuration file for Open Codex CLI, specifying the default model, provider, and error handling mode.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n// ~/.codex/config.json\n{\n  \"model\": \"o4-mini\", // Default model\n  \"provider\": \"openai\", // Default provider\n  \"fullAutoErrorMode\": \"ask-user\" // or ignore-and-continue\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Verbose Logging\nDESCRIPTION: Command to run Open Codex with debugging enabled, which prints full API request and response details for troubleshooting purposes.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=true open-codex\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Page with Codex\nDESCRIPTION: Commands to create a new directory and generate an HTML page with a poem using Codex.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompting_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir first-task && cd first-task\ngit init\ncodex \"Create a file poem.html that renders a poem about the nature of intelligence and programming by you, Codex. Add some nice CSS and make it look like it's framed on a wall\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Instructions for Open Codex CLI\nDESCRIPTION: Example of custom instructions for Open Codex CLI, specifying behavior guidelines for the AI.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n# ~/.codex/instructions.md\n\n- Always respond with emojis\n- Only use git commands if I explicitly mention you should\n```\n\n----------------------------------------\n\nTITLE: Building Open Codex CLI from Source\nDESCRIPTION: Steps to clone the repository, build the project from source, and run or link the CLI globally.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repository and navigate to the CLI package\ngit clone https://github.com/ymichael/open-codex.git\ncd open-codex/codex-cli\n\n# Install dependencies and build\nnpm install\nnpm run build\n\n# Get the usage and the options\nnode ./dist/cli.js --help\n\n# Run the locally‑built CLI directly\nnode ./dist/cli.js\n\n# Or link the command globally for convenience\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternative AI Provider for Open Codex CLI\nDESCRIPTION: Example of configuring an alternative AI provider (Gemini) in the Open Codex CLI configuration file.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"provider\": \"gemini\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for AI Providers\nDESCRIPTION: Example of setting the required environment variable for using the Gemini AI provider with Open Codex CLI.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_GENERATIVE_AI_API_KEY=\"your-gemini-api-key-here\"\n```\n\n----------------------------------------\n\nTITLE: Running Codex CLI Example with Bash Script\nDESCRIPTION: This bash command demonstrates how to run a Codex CLI example. It changes to the 'camerascii' directory and executes the 'run.sh' script, which sets up the environment and launches the Codex CLI with a specific task.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd camerascii\n./run.sh\n```\n\n----------------------------------------\n\nTITLE: Medium Task Description Example\nDESCRIPTION: Example of a medium-complexity task description file for Codex to process documentation refactoring.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompting_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nRefactor: simplify model names across static documentation\n\nCan you update docs_site to use a better model naming convention on the site.\n\nRead files like:\n- docs_site/content/models.md\n- docs_site/components/ModelCard.tsx\n- docs_site/utils/modelList.ts\n- docs_site/config/sidebar.ts\n\nReplace confusing model identifiers with a simplified version wherever they're user-facing.\n\nWrite what you changed or tried to do to final_output.md\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to export the OpenAI API key as an environment variable for authentication\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompt-analyzer/template/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"sk‑...\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Commands to install required Python packages for the clustering utility using pip package manager\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompt-analyzer/template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pandas numpy scikit-learn matplotlib openai\n```\n\n----------------------------------------\n\nTITLE: Basic Script Usage\nDESCRIPTION: Basic command to run the clustering script with default parameters using prompts.csv as input\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompt-analyzer/template/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Minimal command – runs on prompts.csv and writes analysis.md + plots/\npython cluster_prompts.py\n```\n\n----------------------------------------\n\nTITLE: Example Project Structure in YAML\nDESCRIPTION: This YAML-like structure outlines the typical file and directory layout for a Codex CLI example project. It includes the run script, task specification, optional template directory, and runs directory for work outputs.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexample‑name/\n├── run.sh           # helper script that launches a new Codex session for the task\n├── task.yaml        # task spec containing a prompt passed to Codex\n├── template/        # (optional) starter files copied into each run\n└── runs/            # work directories created by run.sh\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Example for Non-interactive Codex Usage\nDESCRIPTION: YAML configuration for using Open Codex in a GitHub Actions workflow to automate tasks like updating a changelog without user interaction.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Update changelog via Codex\n  run: |\n    npm install -g open-codex\n    export OPENAI_API_KEY=\"${{ secrets.OPENAI_KEY }}\"\n    open-codex -a auto-edit --quiet \"update CHANGELOG for next release\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Script Usage with Custom Options\nDESCRIPTION: Example command demonstrating usage of various optional parameters for customizing the clustering process\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompt-analyzer/template/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython cluster_prompts.py \\\n  --csv my_prompts.csv \\\n  --cache .cache/embeddings.json \\\n  --cluster-method dbscan \\\n  --embedding-model text-embedding-3-large \\\n  --chat-model gpt-4o \\\n  --output-md my_analysis.md \\\n  --plots-dir my_plots\n```\n\n----------------------------------------\n\nTITLE: Committing Version Bump for Codex CLI Release\nDESCRIPTION: Git commands for adding modified files and creating a signed commit with the new version number. Uses Node.js to dynamically insert the new version from package.json into the commit message.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit add codex-cli/src/utils/session.ts codex-cli/package.json\ngit commit -s -m \"chore(release): codex-cli v$(node -p \\\"require('./codex-cli/package.json').version\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing Embedding Data in Python\nDESCRIPTION: This snippet loads a CSV file containing text data with embeddings, converts the embedding strings to numpy arrays, and creates a matrix of embeddings for clustering. It uses pandas for data manipulation and numpy for array operations.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompt-analyzer/template/Clustering.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# imports\nimport numpy as np\nimport pandas as pd\nfrom ast import literal_eval\n\n# load data\ndatafile_path = \"./data/fine_food_reviews_with_embeddings_1k.csv\"\n\ndf = pd.read_csv(datafile_path)\ndf[\"embedding\"] = df.embedding.apply(literal_eval).apply(np.array)  # convert string to numpy array\nmatrix = np.vstack(df.embedding.values)\nmatrix.shape\n```\n\n----------------------------------------\n\nTITLE: Contributor License Agreement Comment Format in Markdown\nDESCRIPTION: The exact comment format contributors must post on Pull Requests to agree to the CLA terms.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/docs/CLA.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nI have read the CLA Document and I hereby sign the CLA\n```\n\n----------------------------------------\n\nTITLE: Implementing K-means Clustering on Embeddings in Python\nDESCRIPTION: This code performs K-means clustering on embedding vectors using scikit-learn. It initializes a K-means model with 4 clusters, fits it to the embedding matrix, and assigns cluster labels to each data point. It then calculates the mean score for each cluster.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompt-analyzer/template/Clustering.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.cluster import KMeans\n\nn_clusters = 4\n\nkmeans = KMeans(n_clusters=n_clusters, init=\"k-means++\", random_state=42)\nkmeans.fit(matrix)\nlabels = kmeans.labels_\ndf[\"Cluster\"] = labels\n\ndf.groupby(\"Cluster\").Score.mean().sort_values()\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatted Clustering Analysis Results\nDESCRIPTION: A structured markdown document showing the results of a prompt clustering analysis, including metrics like total prompts (213), clustering method (kmeans), k value (2), and silhouette score (0.042), along with detailed cluster descriptions.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompt-analyzer/template/analysis.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Prompt Clustering Report\n\nGenerated by `cluster_prompts.py` – 2025-04-16\n\n\n## Overview\n\n* Total prompts: **213**\n* Clustering method: **kmeans**\n* k (K‑Means): **2**\n* Silhouette score: **0.042**\n* Final clusters (excluding noise): **2**\n\n\n| label | name | #prompts | description |\n|-------|------|---------:|-------------|\n| 0 | Creative Guidance Roles | 121 | This cluster encompasses a variety of roles where individuals provide expert advice, suggestions, and creative ideas across different fields. Each role, be it interior decorator, comedian, IT architect, or artist advisor, focuses on enhancing the expertise and creativity of others by tailoring advice to specific requests and contexts. |\n| 1 | Role Customization Requests | 92 | This cluster contains various requests for role-specific assistance across different domains, including web development, language processing, IT troubleshooting, and creative endeavors. Each snippet illustrates a unique role that a user wishes to engage with, focusing on specific tasks without requiring explanations. |\n\n---\n## Plots\n\nThe directory `plots/` contains a bar chart of the cluster sizes and a t‑SNE scatter plot coloured by cluster.\n```\n\n----------------------------------------\n\nTITLE: Visualizing Clusters using t-SNE in Python\nDESCRIPTION: This snippet uses t-SNE to visualize high-dimensional embeddings in a 2D space. It creates a scatter plot where each point represents a text sample, colored by its cluster assignment, and marks the cluster centers with X markers. This helps in qualitatively evaluating the clustering results.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompt-analyzer/template/Clustering.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.manifold import TSNE\nimport matplotlib\nimport matplotlib.pyplot as plt\n\ntsne = TSNE(n_components=2, perplexity=15, random_state=42, init=\"random\", learning_rate=200)\nvis_dims2 = tsne.fit_transform(matrix)\n\nx = [x for x, y in vis_dims2]\ny = [y for x, y in vis_dims2]\n\nfor category, color in enumerate([\"purple\", \"green\", \"red\", \"blue\"]):\n    xs = np.array(x)[df.Cluster == category]\n    ys = np.array(y)[df.Cluster == category]\n    plt.scatter(xs, ys, color=color, alpha=0.3)\n\n    avg_x = xs.mean()\n    avg_y = ys.mean()\n\n    plt.scatter(avg_x, avg_y, marker=\"x\", color=color, s=100)\nplt.title(\"Clusters identified visualized in language 2d using t-SNE\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing and Naming Clusters with GPT-4 in Python\nDESCRIPTION: This code uses OpenAI's GPT-4 to analyze and name clusters based on text samples. For each cluster, it selects random review samples, sends them to the GPT-4 API to identify common themes, and displays the theme along with sample reviews and their scores. This helps in interpreting what each cluster represents.\nSOURCE: https://github.com/ymichael/open-codex/blob/main/codex-cli/examples/prompt-analyzer/template/Clustering.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport os\n\nclient = OpenAI(api_key=os.environ.get(\"OPENAI_API_KEY\", \"<your OpenAI API key if not set as env var>\"))\n\n# Reading a review which belong to each group.\nrev_per_cluster = 5\n\nfor i in range(n_clusters):\n    print(f\"Cluster {i} Theme:\", end=\" \")\n\n    reviews = \"\\n\".join(\n        df[df.Cluster == i]\n        .combined.str.replace(\"Title: \", \"\")\n        .str.replace(\"\\n\\nContent: \", \":  \")\n        .sample(rev_per_cluster, random_state=42)\n        .values\n    )\n\n    messages = [\n        {\"role\": \"user\", \"content\": f'What do the following customer reviews have in common?\\n\\nCustomer reviews:\\n\"\"\"\\n{reviews}\\n\"\"\"\\n\\nTheme:'}\n    ]\n\n    response = client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=messages,\n        temperature=0,\n        max_tokens=64,\n        top_p=1,\n        frequency_penalty=0,\n        presence_penalty=0)\n    print(response.choices[0].message.content.replace(\"\\n\", \"\"))\n\n    sample_cluster_rows = df[df.Cluster == i].sample(rev_per_cluster, random_state=42)\n    for j in range(rev_per_cluster):\n        print(sample_cluster_rows.Score.values[j], end=\", \")\n        print(sample_cluster_rows.Summary.values[j], end=\":   \")\n        print(sample_cluster_rows.Text.str[:70].values[j])\n\n    print(\"-\" * 100)\n```"
  }
]