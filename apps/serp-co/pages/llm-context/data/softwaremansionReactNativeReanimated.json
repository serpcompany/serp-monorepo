[
  {
    "owner": "software-mansion",
    "repo": "react-native-reanimated",
    "content": "TITLE: Configuring Babel for React Native Reanimated\nDESCRIPTION: Add the 'react-native-reanimated/plugin' to the babel.config.js file. This plugin is crucial for converting special JavaScript functions (worklets) to run on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/getting-started.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  module.exports = {\n    presets: [\n      ... // don't add it here :)\n    ],\n    plugins: [\n      ...\n      'react-native-reanimated/plugin',\n    ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing a Shared Value in an Animated Component\nDESCRIPTION: Shows how to define a shared value with useSharedValue and directly use it in an Animated.View's style. The width property is now dynamically bound to the shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/your-first-animation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  return (\n    <Animated.View\n      style={{\n        width,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running JS Thread Functions from UI Thread with runOnJS in React Native Reanimated\nDESCRIPTION: Shows how to use runOnJS to execute JavaScript thread functions from within a UI thread worklet, often used for third-party libraries or updating React state.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/worklets.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from 'expo-router';\nimport { Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  const tap = Gesture.Tap().onEnd(() => {\n    // i'm a worklet too!\n    runOnJS(router.back)();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Variables in Worklets in JavaScript\nDESCRIPTION: This snippet illustrates how worklets can capture variables from their outer scope. The worklet uses a variable defined outside its scope, which is automatically copied to the UI thread context.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/worklets.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst width = 135.5;\n\nfunction otherWorklet() {\n  'worklet';\n  console.log('Captured width is', width);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Worklet in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a simple worklet function using the 'worklet' directive. The function logs a message to the console when executed on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/worklets.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction someWorklet(greeting) {\n  'worklet';\n  console.log(\"Hey I'm running on the UI thread\");\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Box Animation with React Native Reanimated\nDESCRIPTION: Illustrates a simple animation where a box moves to the right on button press using shared values and withSpring.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/animating-styles-and-props.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nfunction App() {\n  const translateX = useSharedValue(0);\n\n  const handlePress = () => {\n    translateX.value = withSpring(translateX.value + 50);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, { transform: [{ translateX }] }]} />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Executing Worklet on UI Thread with runOnUI in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the runOnUI function to manually schedule a worklet for execution on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/worklets.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myWorklet() {\n  'worklet';\n  console.log('Hello from the UI thread');\n}\n\nfunction onPress() {\n  runOnUI(myWorklet)();\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Metro Config for React Native Reanimated\nDESCRIPTION: Wrap the existing Metro configuration with the Reanimated Metro config wrapper in metro.config.js. This improves error and warning displays with more accurate call stacks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/getting-started.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// metro.config.js\nconst {\n  wrapWithReanimatedMetroConfig,\n} = require('react-native-reanimated/metro-config');\n\nconst config = {\n  // Your existing Metro configuration options\n};\n\nmodule.exports = wrapWithReanimatedMetroConfig(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring withTiming Animation in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to customize the withTiming animation function by setting duration and easing properties in the config object.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/customizing-animation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withTiming, Easing } from 'react-native-reanimated';\n\nwithTiming(sv.value, {\n  duration: 300,\n  easing: Easing.inOut(Easing.quad),\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSharedValue Hook for Animation\nDESCRIPTION: Demonstrates importing and using the useSharedValue hook to create a shared value for animation. The width property is connected to a shared value that can be modified for animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/your-first-animation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Basic Inline Style Animation in React Native Reanimated\nDESCRIPTION: Simple example showing how to animate a view's width using a shared value with inline styling.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/animating-styles-and-props.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const width = useSharedValue(100);\n\n  return <Animated.View style={{ width }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useSharedValue\nDESCRIPTION: TypeScript interface and function definitions for the SharedValue type and useSharedValue hook.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useSharedValue.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SharedValue<Value = unknown> {\n  value: Value;\n  get(): Value;\n  set(value: Value | ((value: Value) => Value)): void;\n  addListener: (listenerID: number, listener: (value: Value) => void) => void;\n  removeListener: (listenerID: number) => void;\n  modify: (\n    modifier?: <T extends Value>(value: T) => T,\n    forceUpdate?: boolean\n  ) => void;\n}\n\nfunction useSharedValue<Value>(initialValue: Value): SharedValue<Value>;\n```\n\n----------------------------------------\n\nTITLE: Pan Gesture Handler Implementation with Animation\nDESCRIPTION: Complete example demonstrating pan gesture handling with animation using useAnimatedGestureHandler. Shows implementation of gesture tracking, state management, and spring animation for a draggable box.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedGestureHandler.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withSpring,\n  useAnimatedStyle,\n  useAnimatedGestureHandler,\n} from 'react-native-reanimated';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\nfunction App() {\n  const x = useSharedValue(0);\n\n  const gestureHandler = useAnimatedGestureHandler({\n    onStart: (_, ctx) => {\n      ctx.startX = x.value;\n    },\n    onActive: (event, ctx) => {\n      x.value = ctx.startX + event.translationX;\n    },\n    onEnd: (_) => {\n      x.value = withSpring(0);\n    },\n  });\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: x.value,\n        },\n      ],\n    };\n  });\n\n  return (\n    <PanGestureHandler onGestureEvent={gestureHandler}>\n      <Animated.View style={[styles.box, animatedStyle]} />\n    </PanGestureHandler>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bounce Animations in React Native Reanimated\nDESCRIPTION: Demonstrates how to use BounceIn and BounceOut animations on a React Native component using Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BounceIn, BounceOut } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={BounceIn} exiting={BounceOut} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Value with Animated View\nDESCRIPTION: Shows how to create and use a shared value with useSharedValue hook to control an Animated.View component's width.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/your-first-animation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  return (\n    <Animated.View\n      style={{\n        width,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Circle Animation with createAnimatedComponent\nDESCRIPTION: Example showing how to animate SVG Circle properties using createAnimatedComponent and shared values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/animating-styles-and-props.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated';\nimport { Svg } from 'react-native-svg';\n\nfunction App() {\n  const r = useSharedValue(10);\n\n  return (\n    <Svg>\n      <AnimatedCircle cx=\"50\" cy=\"50\" r={r} fill=\"blue\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Reanimated with Yarn\nDESCRIPTION: Command to install the react-native-reanimated package using Yarn package manager.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/getting-started.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Keyframe Animation in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to create a Keyframe animation object and apply it to an Animated.View component. It defines a rotation animation with three keyframes at 0%, 45%, and 100% of the animation progress.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/keyframe-animations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Keyframe } from 'react-native-reanimated';\n\nconst keyframe = new Keyframe({\n  0: {\n    transform: [{ rotate: '0deg' }],\n  },\n  45: {\n    transform: [{ rotate: '100deg' }],\n    easing: Easing.exp,\n  },\n  100: {\n    transform: [{ rotate: '45deg' }],\n  },\n});\n\nfunction App() {\n  return <Animated.View entering={keyframe} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useAnimatedGestureHandler Hook\nDESCRIPTION: Example showing usage of useAnimatedGestureHandler with state dependencies. Demonstrates how to handle state updates in gesture handlers.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedGestureHandler.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  const [state, setState] = useState(0);\n  const sv = useSharedValue(0);\n\n  const handler = useAnimatedGestureHandler(\n    {\n      onEnd: (_) => {\n        sv.value = state;\n      },\n    },\n    dependencies\n  );\n  //...\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Worklet Function Definition in TypeScript\nDESCRIPTION: Demonstrates how to define a basic worklet function using the 'worklet' directive at the top of the function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/about.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n  'worklet';\n  console.log('Hello from worklet');\n}\n```\n\n----------------------------------------\n\nTITLE: Using runOnUI Function in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the runOnUI function to execute a workletized function on the UI thread. The example shows passing a greeting parameter to a console.log statement that runs on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/threading/runOnUI.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runOnUI } from 'react-native-reanimated';\n\nfunction App() {\n  // E.g. in event handler or in an effect\n  // highlight-next-line\n  runOnUI((greeting) => {\n    console.log(`${greeting} from the UI thread`);\n    // highlight-next-line\n  })('Howdy');\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Shared Values on Button Press\nDESCRIPTION: Demonstrates how to modify a shared value on a button press event. The handlePress function increases the width by 50px each time the button is clicked, updating the Animated.View's width accordingly.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/your-first-animation.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, View } from 'react-native';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = width.value + 50;\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={{\n          width,\n          height: 100,\n          backgroundColor: 'violet',\n        }}\n      />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Shared Values in React Native\nDESCRIPTION: Demonstrates how to create a Shared Value using useSharedValue hook and update it through a button press event. Shows asynchronous updates from the React Native JS thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/shared-values.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sharedVal = useSharedValue(0);\nreturn (\n  <Button\n    onPress={() => (sharedVal.value = Math.random())}\n    title=\"Randomize\"\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of withSpring in React Native Reanimated\nDESCRIPTION: Demonstrates the basic usage of the withSpring function to create a spring-based animation for a shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withSpring.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withSpring } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withSpring(0);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Animating SVG Path with useAnimatedProps in React Native Reanimated\nDESCRIPTION: Example demonstrating how to animate SVG path properties using useAnimatedProps hook. Creates an animated circle using SVG Path component with dynamic radius controlled by a shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedProps.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  useAnimatedProps,\n} from 'react-native-reanimated';\nimport Svg, { Path } from 'react-native-svg';\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path);\n\nfunction App() {\n  const radius = useSharedValue(50);\n\n  const animatedProps = useAnimatedProps(() => {\n    // draw a circle\n    const path = `\n    M 100, 100\n    m -${radius.value}, 0\n    a ${radius.value},${radius.value} 0 1,0 ${radius.value * 2},0\n    a ${radius.value},${radius.value} 0 1,0 ${-radius.value * 2},0\n    `;\n    return {\n      d: path,\n    };\n  });\n\n  // attach animated props to an SVG path using animatedProps\n  return (\n    <Svg>\n      <AnimatedPath animatedProps={animatedProps} fill=\"black\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Common Modifiers to Flip Animation in React Native Reanimated\nDESCRIPTION: Example of using common modifiers for a Flip animation. It sets delay, randomizes delay, configures reduce motion behavior, sets initial values, and adds a callback function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nFlipInEasyY.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({\n    transform: [{ perspective: 100 }, { rotateY: '123deg' }],\n  })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring withSpring Animation in React Native Reanimated\nDESCRIPTION: This snippet shows how to customize the withSpring animation function by setting mass, stiffness, and damping properties in the config object.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/customizing-animation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withSpring } from 'react-native-reanimated';\n\nwithSpring(sv.value, {\n  mass: 1,\n  stiffness: 100,\n  damping: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Shared Values with useSharedValue in React Native\nDESCRIPTION: Demonstrates how to import and use the useSharedValue hook to create, read, and modify shared values in a React Native component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useSharedValue.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const sv = useSharedValue(100);\n\n  // read a shared value\n  console.log(sv.value);\n\n  // and modify it\n  sv.value += 50;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedStyle Hook in React Native Reanimated\nDESCRIPTION: Basic example showing how to use the useAnimatedStyle hook to create animated styles for a component. The hook returns an animated style object that needs to be applied to an Animated component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedStyle.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAnimatedStyle } from 'react-native-reanimated';\n\nfunction App() {\n  // highlight-next-line\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      opacity: sv.value ? 1 : 0,\n    };\n    // highlight-next-line\n  });\n\n  // highlight-next-line\n  return <Animated.View style={[styles.box, animatedStyles]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Animation in useAnimatedStyle Hook\nDESCRIPTION: Demonstrates how to implement animations directly within the useAnimatedStyle hook using withSpring.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/animations.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst animatedStyles = useAnimatedStyle(() => {\n  return {\n    transform: [\n      {\n        translateX: withSpring(offset.value * 255),\n      },\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Spring Animation with withSpring\nDESCRIPTION: Implements a bouncy animation using the withSpring function. When the button is pressed, the width transitions smoothly with a spring effect from its current value to the new value (width + 50).\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/your-first-animation.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, View } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = withSpring(width.value + 50);\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={{\n          width,\n          height: 100,\n          backgroundColor: 'violet',\n        }}\n      />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using runOnUI in React Native Reanimated\nDESCRIPTION: Example showing how to use the runOnUI function to execute code on the UI thread from the JavaScript thread. This demonstrates the proper invocation pattern where you first pass the worklet function to runOnUI and then call the returned function with any arguments.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/runOnUI.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runOnUI } from 'react-native-reanimated';\n\nfunction App() {\n  // E.g. in event handler or in an effect\n  // highlight-next-line\n  runOnUI((greeting) => {\n    console.log(`${greeting} from the UI thread`);\n    // highlight-next-line\n  })('Howdy');\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Easing Function with withTiming\nDESCRIPTION: Demonstrates how to apply a custom easing function (bounce in this case) to the withTiming animation by passing it in the configuration object.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withTiming.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Easing } from 'react-native-reanimated';\n\nwithTiming(sv.value, {\n  easing: Easing.bounce,\n});\n```\n\n----------------------------------------\n\nTITLE: Spring Animation with Shared Value in React Native Reanimated\nDESCRIPTION: Shows how to implement a spring animation by wrapping the Shared Value update with withSpring animation helper.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/animations.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  onPress={() => {\n    offset.value = withSpring(Math.random());\n  }}\n  title=\"Move\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useAnimatedScrollHandler in React Native\nDESCRIPTION: Example showing how to use useAnimatedScrollHandler to track scroll position in a React Native ScrollView component. The handler updates a shared value with the current vertical scroll offset.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/scroll/useAnimatedScrollHandler.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAnimatedScrollHandler } from 'react-native-reanimated';\n\nfunction App() {\n  const offsetY = useSharedValue(0);\n\n  const scrollHandler = useAnimatedScrollHandler((event) => {\n    offsetY.value = event.contentOffset.y;\n  });\n\n  // ...\n\n  return <Animated.ScrollView onScroll={scrollHandler} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tap Gesture with React Native Reanimated\nDESCRIPTION: Demonstrates how to create a tap gesture that changes the color and size of a circle. It uses Gesture.Tap() and useAnimatedStyle to define the gesture behavior and animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/handling-gestures.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst tap = Gesture.Tap()\n  .onBegin(() => {\n    isPressed.value = true;\n  })\n  .onFinalize(() => {\n    isPressed.value = false;\n  });\n\nconst animatedStyles = useAnimatedStyle(() => ({\n  backgroundColor: isPressed.value ? 'yellow' : 'violet',\n  transform: [{ scale: withTiming(isPressed.value ? 1.2 : 1) }],\n}));\n\nreturn (\n  <GestureDetector gesture={tap}>\n    <Animated.View style={[styles.ball, animatedStyles]} />\n  </GestureDetector>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic withRepeat Animation Example\nDESCRIPTION: Simple example showing how to animate a shared value to 70 and back using withRepeat with timing animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/animations/withRepeat.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsharedValue.value = withRepeat(withTiming(70), 2, true);\n```\n\n----------------------------------------\n\nTITLE: Basic useSharedValue Usage in React Native\nDESCRIPTION: Demonstrates basic usage of useSharedValue hook to create and modify a shared value in a React component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useSharedValue.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const sv = useSharedValue(100);\n\n  // read a shared value\n  console.log(sv.value);\n\n  // and modify it\n  sv.value += 50;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Worklet in JavaScript\nDESCRIPTION: Demonstrates how to create a simple worklet function using the 'worklet' directive. This allows the function to run on the UI thread in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/worklets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myWorklet() {\n  'worklet';\n  console.log('Hello from a worklet');\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Box Animation with Button Trigger\nDESCRIPTION: Example demonstrating how to animate a box's translation on button press using withSpring animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/animating-styles-and-props.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nfunction App() {\n  const translateX = useSharedValue(0);\n\n  const handlePress = () => {\n    translateX.value = withSpring(translateX.value + 50);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, { transform: [{ translateX }] }]} />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Shared Value Animation Setup in React Native Reanimated\nDESCRIPTION: Demonstrates setting up a basic animation using Shared Values and useAnimatedStyle hook without animation transitions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/animations.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nfunction Box() {\n  const offset = useSharedValue(0);\n\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateX: offset.value * 255 }],\n    };\n  });\n\n  return (\n    <>\n      <Animated.View style={[styles.box, animatedStyles]} />\n      <Button onPress={() => (offset.value = Math.random())} title=\"Move\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic withTiming Usage in React Native Reanimated\nDESCRIPTION: Shows the basic import and usage of withTiming animation function to create a simple animation by changing a shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withTiming.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withTiming(0);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Animation with Gesture Handler in React Native Reanimated\nDESCRIPTION: Example showing how to cancel an animation on a shared value when a gesture starts. Uses useSharedValue and useAnimatedGestureHandler hooks to handle the animation cancellation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/animations/cancelAnimation.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst someValue = useSharedValue(0);\n\nconst gestureHandler = useAnimatedGestureHandler({\n  onStart: (_, ctx) => {\n    cancelAnimation(someValue);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Spring Animation with Shared Values\nDESCRIPTION: Shows how to implement smooth spring animations using Shared Values and the withSpring animation utility.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/shared-values.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, { withSpring } from 'react-native-reanimated';\n\nfunction Box() {\n  const offset = useSharedValue(0);\n\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateX: offset.value }],\n    };\n  });\n\n  return (\n    <>\n      <Animated.View style={[styles.box, animatedStyles]} />\n      <Button\n        onPress={() => {\n          offset.value = withSpring(Math.random() * 255);\n        }}\n        title=\"Move\"\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Button Transitions\nDESCRIPTION: Configures animations for rotation and position transitions between the expanded and collapsed states of the Floating Action Button.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/floating-action-button.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst rotateMain = useDerivedValue(() => {\n  return withTiming(isExpanded.value ? '45deg' : '0deg');\n});\n\nconst fabButtonStyle = useAnimatedStyle(() => {\n  return {\n    transform: [\n      { rotate: rotateMain.value },\n    ],\n  };\n});\n\nreturn (\n  <View style={styles.container}>\n    {buttonsArray.map((value, index) => {\n      return <FloatingActionButton key={index} index={index} buttonLetter={value} isExpanded={isExpanded} />;\n    })}\n    <AnimatedPressable onPress={toggleExpansion} style={[styles.fabButton, fabButtonStyle]}>\n      <Text style={styles.fabButtonText}>+</Text>\n    </AnimatedPressable>\n  </View>\n);\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Thread Function from UI Thread in React Native Reanimated\nDESCRIPTION: A basic example showing how to use runOnJS to call a JavaScript thread function (navigation.goBack) from the UI thread in a React Native Reanimated application.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/runOnJS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runOnJS } from 'react-native-reanimated';\n\nfunction App() {\n  // While on the UI thread\n  runOnJS(navigation.goBack)();\n}\n```\n\n----------------------------------------\n\nTITLE: Using withDecay for Gesture-based Animation in React Native Reanimated\nDESCRIPTION: Demonstrates the use of withDecay function to create a decelerating animation based on the final velocity of a pan gesture. This example shows how to implement a draggable square that slows down naturally when released.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/handling-gestures.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst pan = Gesture.Pan()\n  .onChange((event) => {\n    translateX.value += event.changeX;\n  })\n  .onFinalize((event) => {\n    translateX.value = withDecay({\n      velocity: event.velocityX,\n      clamp: [0, width - SQUARE_SIZE],\n    });\n  });\n\nconst animatedStyles = useAnimatedStyle(() => ({\n  transform: [{ translateX: translateX.value }],\n}));\n```\n\n----------------------------------------\n\nTITLE: Using useSharedValue Hook in React Native Reanimated\nDESCRIPTION: Example demonstrating how to create and update a shared value using useSharedValue hook. The code shows a component that creates a shared value for width and updates it randomly when a button is pressed. The shared value can be accessed and modified from both worklets and the main JS thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useSharedValue.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'react-native';\nimport { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const width = useSharedValue(50);\n\n  return (\n    <View>\n      <SomeComponent width={width} />\n      <Button onPress={() => (width.value = Math.random() * 300)} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useDerivedValue and Related Interfaces\nDESCRIPTION: This snippet provides TypeScript type definitions for the SharedValue and DerivedValue interfaces, as well as the useDerivedValue function. It details the structure and methods available on these types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useDerivedValue.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SharedValue<Value = unknown> {\n  value: Value;\n  get(): Value;\n  set(value: Value | ((value: Value) => Value)): void;\n  addListener: (listenerID: number, listener: (value: Value) => void) => void;\n  removeListener: (listenerID: number) => void;\n  modify: (\n    modifier?: <T extends Value>(value: T) => T,\n    forceUpdate?: boolean\n  ) => void;\n}\n\ninterface DerivedValue<Value = unknown>\n  extends Readonly<Omit<SharedValue<Value>, 'set'>> {\n  /**\n   * @deprecated Derived values are readonly, don't use this method. It's here\n   *   only to prevent breaking changes in TypeScript types. It will be removed\n   *   in the future.\n   */\n  set: SharedValue<Value>['set'];\n}\n\nfunction useDerivedValue<T>(\n  updater: () => T,\n  dependencies?: DependencyList\n): DerivedValue<T>;\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedStyle in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the useAnimatedStyle hook to create animated styles for a React Native component. The hook returns an animated style object that can be applied to an Animated.View component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useAnimatedStyle.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAnimatedStyle } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      opacity: sv.value ? 1 : 0,\n    };\n  });\n\n  return <Animated.View style={[styles.box, animatedStyles]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Animation with withSpring\nDESCRIPTION: Shows how to implement spring animation using withSpring function to create smooth width transitions on button press.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/your-first-animation.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, View } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = withSpring(width.value + 50);\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={{\n          width,\n          height: 100,\n          backgroundColor: 'violet',\n        }}\n      />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-based Animation Modifiers in React Native Reanimated\nDESCRIPTION: Example of how to configure time-based animation modifiers like duration and easing for a RotateOutDownRight animation. These modifiers are based on the withTiming function and allow customization of the animation timing parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nRotateOutDownRight.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedStyle with Worklets in React Native Reanimated\nDESCRIPTION: Demonstrates creating animated styles with useAnimatedStyle hook. The callback function is automatically workletized and runs on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst style = useAnimatedStyle(() => {\n  console.log('Running on the UI thread');\n  return { opacity: 0.5 };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Handler with useEvent in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the useEvent hook to create a custom event handler for a pager scroll. It shows the hook's usage within a custom useAnimatedPagerScrollHandler function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useEvent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEvent } from 'react-native-reanimated';\n\nfunction useAnimatedPagerScrollHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event) => {\n      'worklet';\n      const { onPageScroll } = handlers;\n\n      if (onPageScroll && event.eventName.endsWith('onPageScroll')) {\n        onPageScroll(event, context);\n      }\n    },\n    ['onPageScroll'],\n    doDependenciesDiffer\n  );\n}\n\nreturn <Animated.View onScroll={useAnimatedPagerScrollHandler} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Animated Components in React Native Reanimated\nDESCRIPTION: Demonstrates how to import and use basic Animated components from React Native Reanimated. This example shows creating a simple Animated.View with static styling properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture with Decay Animation\nDESCRIPTION: Example showing how to implement a pan gesture with decay animation using withDecay function. The code demonstrates handling gesture callbacks and maintaining object position within screen bounds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/handling-gestures.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CollapsibleCode showLines={[23, 36]} src={DecayBasicSrc} />\n```\n\n----------------------------------------\n\nTITLE: Worklet Class Implementation\nDESCRIPTION: Shows how to implement a Worklet Class that can be instantiated on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/about.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Clazz {\n  __workletClass = true;\n  message = 'Hello from WorkletClass';\n  foo() {\n    console.log(this.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using interpolateColor for Animated Background Color in React Native\nDESCRIPTION: Demonstrates how to use the interpolateColor function to animate the background color of a view based on a shared value progress. The color interpolates from red to green as the progress value changes from 0 to 1.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/interpolateColor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { interpolateColor } from 'react-native-reanimated';\n\nfunction App() {\n  const progress = useSharedValue(0);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      // highlight-start\n      backgroundColor: interpolateColor(\n        progress.value,\n        [0, 1],\n        ['red', 'green']\n      ),\n      // highlight-end\n    };\n  });\n\n  // ...\n\n  return <Animated.View style={[{ width: 100, height: 100 }, animatedStyle]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Infinite Loop Example with useAnimatedReaction\nDESCRIPTION: An example showing an anti-pattern that causes an infinite loop by modifying the same shared value that's being monitored.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useAnimatedReaction.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  useAnimatedReaction(\n    () => {\n      // highlight-next-line\n      return width.value;\n    },\n    (currentValue) => {\n      // 🚨 An infinite loop!\n      // highlight-next-line\n      width.value += currentValue;\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useDerivedValue Hook Usage in React Native Reanimated\nDESCRIPTION: Demonstrates basic usage of useDerivedValue hook to create a derived shared value that multiplies an existing shared value by 50.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useDerivedValue.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDerivedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const derivedValue = useDerivedValue(() => {\n    return sv.value * 50;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Common Modifiers to Zoom Animations\nDESCRIPTION: This example shows how to apply common modifiers such as delay, randomDelay, reduceMotion, withInitialValues, and withCallback to a ZoomIn animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nZoomIn.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ scale: 0.5 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Keyframe Animation in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the animationName property to define a keyframe animation for a React Native Animated.View component. It translates the view 100 units horizontally over 300ms.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-name.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        // highlight-start\n        animationName: {\n          '100%': {\n            transform: [{ translateX: 100 }],\n          },\n        },\n        // highlight-end\n        animationDuration: '300ms',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic withSequence Usage in React Native Reanimated\nDESCRIPTION: Demonstrates basic usage of withSequence to chain multiple animations together. The example shows how to sequence two timing animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withSequence.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withSequence } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withSequence(withTiming(50), withTiming(0));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Animations in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use ZoomIn and ZoomOut animations on an Animated.View component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ZoomIn, ZoomOut } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={ZoomIn} exiting={ZoomOut} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Bottom Sheet Component Initialization\nDESCRIPTION: Defines shared values for height and open state, along with toggle functionality for the bottom sheet component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/bottom-sheet.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst height = useSharedValue(0);\nconst isOpen = useSharedValue(false);\nconst progress = useDerivedValue(() => withSpring(isOpen.value ? 1 : 0));\n```\n\n----------------------------------------\n\nTITLE: Synchronous Shared Value Updates in ScrollHandler\nDESCRIPTION: Shows how to synchronously update Shared Values within a worklet running on the UI thread using an animated scroll handler.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/shared-values.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  useAnimatedScrollHandler,\n} from 'react-native-reanimated';\n\nfunction SomeComponent({ children }) {\n  const scrollOffset = useSharedValue(0);\n\n  const scrollHandler = useAnimatedScrollHandler({\n    onScroll: (event) => {\n      scrollOffset.value = event.contentOffset.y;\n    },\n  });\n\n  return (\n    <Animated.ScrollView onScroll={scrollHandler}>\n      {children}\n    </Animated.ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring withSpring Animation in React Native Reanimated\nDESCRIPTION: This example shows how to customize a withSpring animation by adjusting the mass, stiffness, and damping properties in the config object. These parameters control the physics-based behavior of the spring animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/customizing-animation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withSpring } from 'react-native-reanimated';\n\nwithSpring(sv.value, {\n  mass: 1,\n  stiffness: 100,\n  damping: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Using interpolateColor in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the interpolateColor function to animate the background color of a view based on a progress value. The function maps the progress value from 0 to 1 to colors red and green.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/utilities/interpolateColor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { interpolateColor } from 'react-native-reanimated';\n\nfunction App() {\n  const progress = useSharedValue(0);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      // highlight-start\n      backgroundColor: interpolateColor(\n        progress.value,\n        [0, 1],\n        ['red', 'green']\n      ),\n      // highlight-end\n    };\n  });\n\n  // ...\n\n  return <Animated.View style={[{ width: 100, height: 100 }, animatedStyle]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture with React Native Reanimated\nDESCRIPTION: Shows how to create a pan gesture for dragging a circle and having it bounce back to its original position. It uses Gesture.Pan() and useAnimatedStyle for gesture handling and animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/handling-gestures.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst pan = Gesture.Pan()\n  .onBegin(() => {\n    isPressed.value = true;\n  })\n  .onChange((event) => {\n    offset.value = event.translationX;\n  })\n  .onFinalize(() => {\n    offset.value = withSpring(0);\n    isPressed.value = false;\n  });\n\nconst animatedStyles = useAnimatedStyle(() => ({\n  transform: [\n    { translateX: offset.value },\n    { scale: withTiming(isPressed.value ? 1.2 : 1) },\n  ],\n  backgroundColor: isPressed.value ? 'yellow' : 'violet',\n}));\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useAnimatedScrollHandler in TypeScript\nDESCRIPTION: This snippet provides TypeScript type definitions for the useAnimatedScrollHandler hook and related types. It includes definitions for the hook function, scroll handler types, and context types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/scroll/useAnimatedScrollHandler.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAnimatedScrollHandler<Context extends Record<string, unknown>>(\n  handlers: ScrollHandler<Context> | ScrollHandlers<Context>,\n  dependencies?: DependencyList\n): ScrollHandlerProcessed<Context>;\n\ntype ScrollHandler<\n  Context extends Record<string, unknown> = Record<string, unknown>\n> = (event: ReanimatedScrollEvent, context: Context) => void;\n\ninterface ScrollHandlers<Context extends Record<string, unknown>> {\n  onScroll?: ScrollHandler<Context>;\n  onBeginDrag?: ScrollHandler<Context>;\n  onEndDrag?: ScrollHandler<Context>;\n  onMomentumBegin?: ScrollHandler<Context>;\n  onMomentumEnd?: ScrollHandler<Context>;\n}\n\ntype DependencyList = Array<unknown> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using getRelativeCoords with Gesture Handler in React Native\nDESCRIPTION: Demonstrates how to use getRelativeCoords function with a PanGestureHandler to get coordinates relative to a view. The example shows implementation within a component using useAnimatedRef and useAnimatedGestureHandler.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/utilities/getRelativeCoords.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getRelativeCoords } from 'react-native-reanimated';\n\nconst Comp = () => {\n  const animatedRef = useAnimatedRef();\n  // ...\n\n  const gestureHandler = useAnimatedGestureHandler({\n    onEnd: (event) => {\n      const coords = getRelativeCoords(\n        animatedRef,\n        event.absoluteX,\n        event.absoluteY\n      );\n    },\n  });\n\n  return (\n    <View ref={aref}>\n      <PanGestureHandler onGestureEvent={gestureHandler}>\n        <Animated.View style={[styles.box]} />\n      </PanGestureHandler>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Animated TextInput Component with Reanimated\nDESCRIPTION: Demonstrates how to create an animated version of TextInput component using createAnimatedComponent from react-native-reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/createAnimatedComponent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated from 'react-native-reanimated';\nimport { TextInput } from 'react-native';\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Animated Component\nDESCRIPTION: Shows how to use the Animated component to create a simple violet square using Animated.View. The highlighted line shows the Animated.View implementation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/your-first-animation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n\nexport default function App() {\n  return (\n    <Animated.View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Press Animation Handler\nDESCRIPTION: Demonstrates how to modify shared values on button press to create an expandable animation effect.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/your-first-animation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, View } from 'react-native';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = width.value + 50;\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={{\n          width,\n          height: 100,\n          backgroundColor: 'violet',\n        }}\n      />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Flip Animation in React Native Reanimated\nDESCRIPTION: Demonstration of configuring a Flip animation using spring-based modifiers. It enables spring animation and sets various properties like damping, mass, stiffness, and thresholds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nFlipInXUp.springify()\n  .damping(2)\n  .mass(3)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Using useFrameCallback in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the useFrameCallback hook to run a function on every frame update. The example shows how to increment a value on each frame and control the callback's active state with a button.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useFrameCallback.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFrameCallback } from 'react-native-reanimated';\n\nfunction App() {\n  const frameCallback = useFrameCallback((frameInfo) => {\n    // Increment a value on every frame update\n    sv.value += 1;\n  });\n\n  return (\n    <Button\n      title=\"Start/Stop\"\n      onPress={() => frameCallback.setActive(!frameCallback.isActive)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Shared Value Animation in React Native Reanimated\nDESCRIPTION: Demonstrates how to use a shared value for basic animation of a view's width.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/animating-styles-and-props.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const width = useSharedValue(100);\n\n  return <Animated.View style={{ width }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Animations in React Native with Reanimated\nDESCRIPTION: Example of using SlideInRight and SlideOutLeft animations in a React Native component with Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SlideInRight, SlideOutLeft } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={SlideInRight} exiting={SlideOutLeft} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Curved Transition Animation in React Native Reanimated\nDESCRIPTION: Example demonstrating the usage of CurvedTransition with various modifiers including duration, delay, easing functions, and callback handling. Defines animations for position, dimensions and motion settings.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nCurvedTransition.duration(1000)\n  .delay(500)\n  .easingX(Easing.in(Easing.exp))\n  .easingY(Easing.out(Easing.quad))\n  .easingWidth(Easing.in(Easing.ease))\n  .easingHeight(Easing.out(Easing.exp))\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Using interpolate in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the interpolate function within a useAnimatedStyle hook to create an animated opacity style.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/utilities/interpolate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpolate } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedStyle = useAnimatedStyle(() => ({\n    opacity: interpolate(sv.value, [0, 100], [0, 1], Extrapolation.CLAMP),\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the AccordionItem Component with React Native Reanimated\nDESCRIPTION: This code implements the AccordionItem component that manages expandable/collapsible content. It uses shared values to animate height changes based on the isExpanded state with configurable animation duration.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/accordion.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport function AccordionItem({\n  isExpanded,\n  children,\n  duration = 400,\n  zIndex = 1,\n}: {\n  isExpanded: boolean;\n  children: ReactNode;\n  duration?: number;\n  zIndex?: number;\n}) {\n  const height = useSharedValue(0);\n  const measuredHeight = useSharedValue(0);\n  const marginBottom = useSharedValue(0);\n  const childrenRef = useRef<View>(null);\n\n  const animationProgress = useDerivedValue(() => {\n    return isExpanded ? withTiming(1, { duration }) : withTiming(0, { duration });\n  });\n\n  const animatedHeightStyle = useAnimatedStyle(() => {\n    const _height = animationProgress.value * measuredHeight.value;\n    height.value = _height;\n    return { height: _height };\n  });\n\n  const animatedBottomStyle = useAnimatedStyle(() => {\n    return { marginBottom: animationProgress.value * marginBottom.value };\n  });\n\n  const onLayout = useCallback(() => {\n    if (childrenRef.current) {\n      childrenRef.current.measure((x, y, width, _height) => {\n        measuredHeight.value = _height;\n      });\n    }\n  }, [childrenRef]);\n\n  return (\n    <Animated.View style={[{ overflow: 'hidden', zIndex }, animatedHeightStyle, animatedBottomStyle]}>\n      <View ref={childrenRef} onLayout={onLayout}>\n        {children}\n      </View>\n    </Animated.View>\n  );\n```\n\n----------------------------------------\n\nTITLE: Adding Entering Animation to React Native Component with Reanimated\nDESCRIPTION: This code demonstrates how to add an entering animation (LightSpeedInLeft) to a React Native component using Reanimated's layout animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/animated_list.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, { LightSpeedInLeft } from 'react-native-reanimated';\n\nconst Participant = ({ name, onRemove }) => {\n  return (\n    <Animated.View\n      entering={LightSpeedInLeft}\n      style={styles.participant}>\n      <Text style={styles.participantName}>{name}</Text>\n      <TouchableOpacity onPress={onRemove}>\n        <Text style={styles.removeText}>Remove</Text>\n      </TouchableOpacity>\n    </Animated.View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Continuous Gestures with PanGestureHandler in React Native\nDESCRIPTION: This code demonstrates how to handle continuous pan gestures using PanGestureHandler. It updates shared values for x and y coordinates based on the gesture translation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/events.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst startingPosition = 100;\nconst x = useSharedValue(startingPosition);\nconst y = useSharedValue(startingPosition);\n\nconst eventHandler = useAnimatedGestureHandler({\n  onStart: (event, ctx) => {\n    pressed.value = true;\n  },\n  onActive: (event, ctx) => {\n    x.value = startingPosition + event.translationX;\n    y.value = startingPosition + event.translationY;\n  },\n  onEnd: (event, ctx) => {\n    pressed.value = false;\n    x.value = withSpring(startingPosition);\n    y.value = withSpring(startingPosition);\n  },\n});\n\n<PanGestureHandler onGestureEvent={eventHandler}>\n  <Animated.View style={[styles.ball, uas]} />\n</PanGestureHandler>\n```\n\n----------------------------------------\n\nTITLE: Using Shared Values in Reanimated\nDESCRIPTION: Demonstrates how to use shared values for animation control, including value modification through the .value property.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/glossary.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const sv = useSharedValue(0);\n\n  const handlePress = () => {\n    sv.value += 10;\n  };\n\n  // rest of your glamorous code ✨\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Keyframe Animation Implementation in React Native Reanimated\nDESCRIPTION: Demonstrates how to create a basic keyframe animation using the Keyframe class from react-native-reanimated. The example shows a rotation animation with three keyframes at 0, 45, and 100 percent of the animation progress.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/keyframe-animations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Keyframe } from 'react-native-reanimated';\n\nconst keyframe = new Keyframe({\n  0: {\n    transform: [{ rotate: '0deg' }],\n  },\n  45: {\n    transform: [{ rotate: '100deg' }],\n    easing: Easing.exp,\n  },\n  100: {\n    transform: [{ rotate: '45deg' }],\n  },\n});\n\nfunction App() {\n  return <Animated.View entering={keyframe} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic withSpring Usage in React Native\nDESCRIPTION: Demonstrates basic usage of withSpring animation function to create spring-based animations in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withSpring.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withSpring } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withSpring(0);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Keyframe Animation in React Native Reanimated\nDESCRIPTION: This snippet provides TypeScript type definitions for the Keyframe class and its constructor arguments. It defines types for the first frame, last frame, and valid keyframe properties, as well as methods for duration, delay, reduceMotion, and callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/keyframe-animations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype FirstFrame =\n  | {\n      0: KeyframeProps & { easing?: never };\n      from?: never;\n    }\n  | {\n      0?: never;\n      from: KeyframeProps & { easing?: never };\n    };\n\ntype LastFrame =\n  | { 100?: KeyframeProps; to?: never }\n  | { 100?: never; to: KeyframeProps };\n\nexport type ValidKeyframeProps = FirstFrame &\n  LastFrame &\n  Record<number, KeyframeProps>;\n\nclass Keyframe {\n  constructor(definitions: ValidKeyframeProps;\n  duration(durationMs: number): Keyframe;\n  delay(delayMs: number): Keyframe;\n  reduceMotion(reduceMotionV: ReduceMotion): Keyframe;\n  withCallback(callback: (finished: boolean) => void): Keyframe;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of List Layout Animation with LinearTransition in React Native Reanimated\nDESCRIPTION: A basic example showing how to implement list layout animations using the LinearTransition with Animated.FlatList. This snippet imports the necessary components from react-native-reanimated and applies the LinearTransition to the itemLayoutAnimation prop.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/list-layout-animations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, { LinearTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      // highlight-next-line\n      itemLayoutAnimation={LinearTransition}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Animation in React Native Reanimated\nDESCRIPTION: Demonstrates how to create default and custom spring animations using React Native Reanimated. Shows implementation of two different spring behaviors with configurable damping and stiffness parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/animations.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, {\n  withSpring,\n  useAnimatedStyle,\n  useSharedValue,\n} from 'react-native-reanimated';\n\nfunction Box() {\n  const offset = useSharedValue(0);\n\n  const defaultSpringStyles = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateX: withSpring(offset.value * 255) }],\n    };\n  });\n\n  const customSpringStyles = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: withSpring(offset.value * 255, {\n            damping: 20,\n            stiffness: 90,\n          }),\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <Animated.View style={[styles.box, defaultSpringStyles]} />\n      <Animated.View style={[styles.box, customSpringStyles]} />\n      <Button onPress={() => (offset.value = Math.random())} title=\"Move\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useAnimatedStyle in a React Native Component\nDESCRIPTION: This example shows a complete implementation of useAnimatedStyle in a React Native component. It creates an animated style for a view's width based on a shared value, and applies it to an Animated.View component along with static styles.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedStyle.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StyleSheet } from 'react-native';\nimport {\n  Animated,\n  useSharedValue,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nfunction App() {\n  const width = useSharedValue(50);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      width: width.value,\n    };\n  });\n\n  // attach animated style to a View using style property\n  return <Animated.View style={[styles.box, animatedStyle]} />;\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    height: 50,\n    backgroundColor: 'blue',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LightSpeed Animation in React Native Reanimated\nDESCRIPTION: Usage example of LightSpeed animation in a React Native component. It applies LightSpeedInRight for entering and LightSpeedOutLeft for exiting animations to an Animated.View.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LightSpeedInRight, LightSpeedOutLeft } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.View entering={LightSpeedInRight} exiting={LightSpeedOutLeft} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic runOnJS Usage in React Native\nDESCRIPTION: Demonstrates basic usage of runOnJS to execute a navigation function from the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/threading/runOnJS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runOnJS } from 'react-native-reanimated';\n\nfunction App() {\n  // While on the UI thread\n  runOnJS(navigation.goBack)();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useAnimatedSensor with Gyroscope in React Native\nDESCRIPTION: Demonstrates how to import and use the useAnimatedSensor hook with a gyroscope sensor in a React Native application. The example shows how to access the sensor data within a useDerivedValue hook.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/device/useAnimatedSensor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAnimatedSensor, SensorType } from 'react-native-reanimated';\n\nfunction App() {\n  const gyroscope = useAnimatedSensor(SensorType.GYROSCOPE);\n\n  useDerivedValue(() => {\n    const { x, y, z } = gyroscope.sensor.value;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Different Timing Function Types\nDESCRIPTION: Examples showing various timing function implementations including predefined, cubic bezier, linear, and steps functions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-timing-function.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nanimationTimingFunction: 'linear',\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cubicBezier } from 'react-native-reanimated';\n\nanimationTimingFunction: cubicBezier(0.25, 0.1, 0.5, 2),\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { linear } from 'react-native-reanimated';\n\nanimationTimingFunction: linear(0, [0.25, '75%'], 1),\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { steps } from 'react-native-reanimated';\n\nanimationTimingFunction: steps(4, 'jump-end'),\n```\n\n----------------------------------------\n\nTITLE: Custom Timing Animation Configuration\nDESCRIPTION: Demonstrates how to configure timing animations with custom duration and easing functions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/animations.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Easing, withTiming } from 'react-native-reanimated';\n\noffset.value = withTiming(0, {\n  duration: 500,\n  easing: Easing.out(Easing.exp),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Animation with PanGestureHandler in React Native\nDESCRIPTION: Example showing how to create a spring animation that returns an element to its original position after being dragged. Uses PanGestureHandler for touch interaction and withSpring for smooth animation return.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/animations/withSpring.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withSpring,\n  useAnimatedStyle,\n  useAnimatedGestureHandler,\n} from 'react-native-reanimated';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\nfunction App() {\n  const x = useSharedValue(0);\n\n  const gestureHandler = useAnimatedGestureHandler({\n    onStart: (_, ctx) => {\n      ctx.startX = x.value;\n    },\n    onActive: (event, ctx) => {\n      x.value = ctx.startX + event.translationX;\n    },\n    onEnd: (_) => {\n      x.value = withSpring(0);\n    },\n  });\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: x.value,\n        },\n      ],\n    };\n  });\n\n  return (\n    <PanGestureHandler onGestureEvent={gestureHandler}>\n      <Animated.View style={[styles.box, animatedStyle]} />\n    </PanGestureHandler>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Color Processing with useAnimatedProps\nDESCRIPTION: Example demonstrating how to handle color-related properties that require manual processing using processColor function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedProps.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { processColor } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedProps = useAnimatedProps(() => {\n    const mainColor = interpolateColor(\n      colorProgress.value,\n      [0, 1],\n      ['red', 'blue']\n    );\n\n    const bgColor = interpolateColor(\n      colorProgress.value,\n      [0, 1],\n      ['green', 'yellow']\n    );\n\n    return {\n      colors: processColor([mainColor, bgColor]),\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-workletized Animated Style Function\nDESCRIPTION: Shows an example of an automatically workletized function within useAnimatedStyle hook context.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/about.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseAnimatedStyle(() => {\n  // This function will be ran on the UI thread,\n  // hence it's in a workletizable context and will be\n  // autoworkletized. You don't need to add the 'worklet' directive here.\n  return {\n    width: 100,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Basic List Layout Animation Implementation with LinearTransition\nDESCRIPTION: Shows how to implement a basic list layout animation using Animated.FlatList with LinearTransition. The animation is applied whenever list items' layout changes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/list-layout-animations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, { LinearTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      itemLayoutAnimation={LinearTransition}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useAnimatedGestureHandler with PanGestureHandler\nDESCRIPTION: Example showing how to use useAnimatedGestureHandler with PanGestureHandler to handle drag gestures. The handler tracks the start position and updates the x value based on gesture translation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/useAnimatedGestureHandler.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAnimatedGestureHandler } from 'react-native-reanimated';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\nfunction App() {\n  const x = useSharedValue(0);\n\n  const gestureHandler = useAnimatedGestureHandler({\n    onStart: (_, ctx) => {\n      ctx.startX = x.value;\n    },\n    onActive: (event, ctx) => {\n      x.value = ctx.startX + event.translationX;\n    },\n  });\n\n  return (\n    <PanGestureHandler onGestureEvent={gestureHandler}>\n      <Animated.View />\n    </PanGestureHandler>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Animations in React Native Reanimated\nDESCRIPTION: Demonstrates how to use FadeIn and FadeOut animations from React Native Reanimated to create fading effects when components enter or exit the view.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FadeIn, FadeOut } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={FadeIn} exiting={FadeOut} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of scrollTo with Animated.ScrollView in React Native Reanimated\nDESCRIPTION: Example showing how to use the scrollTo function to programmatically scroll an Animated.ScrollView component based on a shared value. This demonstrates using an animated ref and a derived value to trigger scrolling.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/scroll/scrollTo.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { scrollTo } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n  const scrollY = useSharedValue(0);\n\n  useDerivedValue(() => {\n    // highlight-next-line\n    scrollTo(animatedRef, 0, scrollY.value, true);\n  });\n\n  return (\n    <Animated.ScrollView ref={animatedRef}>{/* ... */}</Animated.ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Worklet Runtime in React Native\nDESCRIPTION: Example showing how to create a new worklet runtime with a background thread in a React Native component using createWorkletRuntime.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/threading/createWorkletRuntime.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createWorkletRuntime } from 'react-native-reanimated';\n\nfunction App() {\n  const runtime = createWorkletRuntime('background');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Measure Function Usage in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the measure function to get component dimensions and position. The code shows implementation within a React component using useAnimatedRef and runOnUI.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/measure.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { measure } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const handlePress = () => {\n    runOnUI(() => {\n      // highlight-next-line\n      const measurement = measure(animatedRef);\n      if (measurement === null) {\n        return;\n      }\n      // ...\n    })();\n  };\n\n  return <Animated.View ref={animatedRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using withDelay with React Native Reanimated\nDESCRIPTION: Example of using the withDelay function to start a withTiming animation after a 500ms delay. This demonstrates the basic usage of withDelay in a React Native component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withDelay.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(500, withTiming(0));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Transition in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the LinearTransition component from React Native Reanimated. It animates both position and dimension linearly and supports various modifiers for customization.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LinearTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={LinearTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing scrollTo in a React Native Reanimated Application\nDESCRIPTION: This snippet demonstrates how to use the scrollTo function within a React Native component. It uses useAnimatedRef and useSharedValue hooks to create a scrollable Animated.ScrollView that can be programmatically scrolled.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/scroll/scrollTo.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { scrollTo } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n  const scrollY = useSharedValue(0);\n\n  useDerivedValue(() => {\n    // highlight-next-line\n    scrollTo(animatedRef, 0, scrollY.value, true);\n  });\n\n  return (\n    <Animated.ScrollView ref={animatedRef}>{/* ... */}</Animated.ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Best Practice: Separating Static and Dynamic Styles in React Native Reanimated\nDESCRIPTION: Example demonstrating the recommended pattern of separating static styles (using StyleSheet) from dynamic styles (using useAnimatedStyle) to improve performance by avoiding unnecessary style recalculations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedStyle.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const animatedStyles = useAnimatedStyle(() => ({\n    offset: sv.value,\n  }));\n\n  // highlight-next-line\n  return <Animated.View style={[styles.box, animatedStyles]} />;\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Entry Animation to Animated Component\nDESCRIPTION: Demonstrates how to apply an entry animation to an Animated Component. The component should be created using createAnimatedComponent or imported from Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/EntryAnimations.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<AnimatedComponent entering={AnimationName} >\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Animated Event Handler Hook in React Native Reanimated\nDESCRIPTION: This snippet shows the implementation of a custom hook for handling animated pager scroll events. It uses the low-level useHandler and useEvent APIs from React Native Reanimated to create a worklet-based event handler.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/custom_events.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useAnimatedPagerScrollHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event) => {\n      'worklet';\n      const { onPageScroll } = handlers;\n\n      if (onPageScroll && event.eventName.endsWith('onPageScroll')) {\n        onPageScroll(event, context);\n      }\n    },\n    ['onPageScroll'],\n    doDependenciesDiffer\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Custom Layout Transition in React Native Reanimated\nDESCRIPTION: An example implementation of a custom layout transition for a box component. It demonstrates how to create animations for origin, width, and height properties with delays and different animation types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/CustomAnimations.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomLayoutTransition(values) {\n  'worklet';\n  return {\n    animations: {\n      originX: withTiming(values.targetOriginX, { duration: 1000 }),\n      originY: withDelay(\n        1000,\n        withTiming(values.targetOriginY, { duration: 1000 })\n      ),\n      width: withSpring(values.targetWidth),\n      height: withSpring(values.targetHeight),\n    },\n    initialValues: {\n      originX: values.currentOriginX,\n      originY: values.currentOriginY,\n      width: values.currentWidth,\n      height: values.currentHeight,\n    },\n  };\n}\n\nfunction Box({ label, state }: { label: string, state: boolean }) {\n  const ind = label.charCodeAt(0) - 'A'.charCodeAt(0);\n  const delay = 300 * ind;\n  return (\n    <Animated.View\n      layout={CustomLayoutTransition}\n      style={[\n        styles.box,\n        {\n          flexDirection: state ? 'row' : 'row-reverse',\n          height: state ? 30 : 60,\n        },\n      ]}>\n      <Text> {label} </Text>\n    </Animated.View>\n  );\n}\n\nexport function CustomLayoutTransitionExample() {\n  const [state, setState] = useState(true);\n  return (\n    <View style={{ marginTop: 30 }}>\n      <View style={{ height: 300 }}>\n        <View style={{ flexDirection: state ? 'row' : 'column' }}>\n          {state && <Box key=\"a\" label=\"A\" state={state} />}\n          <Box key=\"b\" label=\"B\" state={state} />\n          {!state && <Box key=\"a\" label=\"A\" state={state} />}\n          <Box key=\"c\" label=\"C\" state={state} />\n        </View>\n      </View>\n\n      <Button\n        onPress={() => {\n          setState(!state);\n        }}\n        title=\"toggle\"\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for withSpring in React Native Reanimated\nDESCRIPTION: Provides detailed type definitions for the withSpring function, including AnimatableValue, WithSpringConfig, and ReduceMotion types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withSpring.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\ninterface WithSpringConfig {\n  damping?: number;\n  mass?: number;\n  stiffness?: number;\n  overshootClamping?: boolean;\n  restSpeedThreshold?: number;\n  restDisplacementThreshold?: number;\n  velocity?: number;\n  reduceMotion?: ReduceMotion;\n  clamp?: [number, number];\n}\n\nfunction withSpring<T extends AnimatableValue>(\n  toValue: T,\n  config?: WithSpringConfig,\n  callback?: (finished?: boolean, current?: AnimatableValue) => void\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedStyle Hook with Worklet in React Native Reanimated\nDESCRIPTION: Shows how to use the useAnimatedStyle hook, which automatically runs the provided function as a worklet on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/worklets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAnimatedStyle } from 'react-native-reanimated';\n\nfunction App() {\n  const style = useAnimatedStyle(() => {\n    // Running on the UI thread\n    return { opacity: 0.5 };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Modifiers to Keyframe Animation in React Native Reanimated\nDESCRIPTION: This snippet shows how to apply modifiers to a Keyframe animation. It sets the duration, delay, reduce motion behavior, and adds a callback function to be executed when the animation finishes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/keyframe-animations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nkeyframe\n  .duration(1000)\n  .delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Advanced Scroll Handler with Multiple Event Types\nDESCRIPTION: Shows how to implement a scroll handler that responds to multiple scroll-related events including drag states. Uses separate handlers for scroll position tracking and drag state management.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedScrollHandler.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst isScrolling = useSharedValue(false);\n\nconst scrollHandler = useAnimatedScrollHandler({\n  onScroll: (event) => {\n    translationY.value = event.contentOffset.y;\n  },\n  onBeginDrag: (e) => {\n    isScrolling.value = true;\n  },\n  onEndDrag: (e) => {\n    isScrolling.value = false;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Closure Capturing in Worklets\nDESCRIPTION: Demonstrates how worklets capture variables from their outer scope.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/worklets.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst width = 135.5;\n\nfunction otherWorklet() {\n  'worklet';\n  console.log('Captured width is', width);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Animated View Component\nDESCRIPTION: Demonstrates how to use Animated.View component with basic styling properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/your-first-animation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n\nexport default function App() {\n  return (\n    <Animated.View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useAnimatedReaction Usage in JavaScript\nDESCRIPTION: A basic example showing how to import and use the useAnimatedReaction hook to react to changes in a shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useAnimatedReaction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAnimatedReaction } from 'react-native-reanimated';\n\nfunction App() {\n  useAnimatedReaction(\n    () => {\n      return sv.value;\n    },\n    (currentValue, previousValue) => {\n      if (currentValue !== previousValue) {\n        // do something ✨\n      }\n    }\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring withTiming Animation in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to customize a withTiming animation by specifying duration and easing properties in the config object. It uses the Easing.inOut function for a quadratic easing effect.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/customizing-animation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withTiming, Easing } from 'react-native-reanimated';\n\nwithTiming(sv.value, {\n  duration: 300,\n  easing: Easing.inOut(Easing.quad),\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Color Transitions with interpolateColor in React Native Reanimated\nDESCRIPTION: Example component demonstrating color interpolation between red and green using React Native Reanimated. The component includes an animated view that changes background color based on a progress value, controlled by a button press.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/interpolateColors.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Component = () => {\n  const progress = useSharedValue(0);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: interpolateColor(\n        progress.value,\n        [0, 1],\n        ['red', 'green']\n      ),\n    };\n  });\n\n  return (\n    <View>\n      <Animated.View style={[{ width: 100, height: 100 }, animatedStyle]} />\n      <Button\n        onPress={() => {\n          progress.value = withTiming(1 - progress.value, { duration: 1000 });\n        }}\n        title=\"run animation\"\n      />\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useSharedValue in React Native Reanimated\nDESCRIPTION: Provides TypeScript type definitions for the SharedValue interface and useSharedValue function, detailing the available methods and properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useSharedValue.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SharedValue<Value = unknown> {\n  value: Value;\n  get(): Value;\n  set(value: Value | ((value: Value) => Value)): void;\n  addListener: (listenerID: number, listener: (value: Value) => void) => void;\n  removeListener: (listenerID: number) => void;\n  modify: (\n    modifier?: <T extends Value>(value: T) => T,\n    forceUpdate?: boolean\n  ) => void;\n}\n\nfunction useSharedValue<Value>(initialValue: Value): SharedValue<Value>;\n```\n\n----------------------------------------\n\nTITLE: Executing Worklet Function on UI Thread with React Native Reanimated\nDESCRIPTION: This example demonstrates how to use the runOnUI function to execute a worklet on the UI thread. It creates a button that, when pressed, triggers the execution of a worklet function passing a greeting message. The worklet function logs the greeting on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/runOnUI.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runOnUI } from 'react-native-reanimated';\nimport { View, Button } from 'react-native';\nimport React from 'react';\n\nexport default function App() {\n  const someWorklet = (greeting) => {\n    'worklet';\n    console.log(greeting, 'From the UI thread');\n  };\n\n  const onPress = () => {\n    runOnUI(someWorklet)('Howdy');\n  };\n\n  return (\n    <View>\n      <Button title=\"toggle\" onPress={onPress} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LightSpeed Animation in React Native Reanimated\nDESCRIPTION: Example showing how to use LightSpeed animations in a React component. This snippet demonstrates applying LightSpeedInRight for entering and LightSpeedOutLeft for exiting animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LightSpeedInRight, LightSpeedOutLeft } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.View entering={LightSpeedInRight} exiting={LightSpeedOutLeft} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ScrollView Offset Hook in React Native\nDESCRIPTION: Basic example showing how to implement the useScrollViewOffset hook to track ScrollView position. The hook returns a shared value containing the current scroll offset and works with both horizontal and vertical ScrollViews.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/scroll/useScrollViewOffset.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useScrollViewOffset } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n  // highlight-next-line\n  const scrollOffset = useScrollViewOffset(animatedRef);\n  return (\n    <Animated.ScrollView ref={animatedRef}>{/* ... */}</Animated.ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry/Exit Transition in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to configure an Entry/Exit Transition using various modifiers. It sets duration, delay, entering and exiting animations, reduce motion setting, and a callback function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nEntryExitTransition.duration(1000)\n  .delay(500)\n  .entering(FlipInEasyX)\n  .exiting(FlipOutEasyY)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Animation Function in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of a custom animation function in React Native Reanimated. It includes the worklet directive, animation definitions, initial values, and an optional callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/custom-animations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomAnimation(values) {\n  'worklet';\n  const animations = {\n    // your animations\n  };\n  const initialValues = {\n    // initial values for animations\n  };\n  const callback = (finished: boolean) => {\n    // optional callback that will fire when layout animation ends\n  };\n  return {\n    initialValues,\n    animations,\n    callback,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Handler using useEvent in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to create a custom animated pager scroll handler using the useEvent hook. It sets up a handler for the 'onPageScroll' event and processes it using a worklet function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useEvent.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useAnimatedPagerScrollHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event) => {\n      'worklet';\n      const { onPageScroll } = handlers;\n\n      if (onPageScroll && event.eventName.endsWith('onPageScroll')) {\n        onPageScroll(event, context);\n      }\n    },\n    ['onPageScroll'],\n    doDependenciesDiffer,\n  );\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useAnimatedSensor with Gyroscope in React Native Reanimated\nDESCRIPTION: Example showing how to import and use the useAnimatedSensor hook with a gyroscope sensor type and access the sensor values (x, y, z) inside an animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/device/useAnimatedSensor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAnimatedSensor, SensorType } from 'react-native-reanimated';\n\nfunction App() {\n  const gyroscope = useAnimatedSensor(SensorType.GYROSCOPE);\n\n  useDerivedValue(() => {\n    const { x, y, z } = gyroscope.sensor.value;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using withClamp in useAnimatedStyle with React Native Reanimated\nDESCRIPTION: This snippet shows how to use withClamp within a useAnimatedStyle hook to create a clamped spring animation for a style property.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withClamp.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst clampedStyleWithDelay = useAnimatedStyle(() => {\n  return {\n    width: withClamp({ min: 0, max: 100 }, withSpring(randomWidth.value)),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Slide Animation Modifiers in React Native Reanimated\nDESCRIPTION: Example demonstrating spring-based animation configuration for a SlideInUp animation, including parameters that control the physics of the spring such as damping, mass, stiffness, and bounce behavior.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nSlideInUp.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry/Exit Transition in React Native Reanimated\nDESCRIPTION: This snippet shows how to use Entry/Exit Transition in a React Native component. It imports the necessary module and applies the transition to an Animated.View component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EntryExitTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={EntryExitTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Animations in React Native\nDESCRIPTION: Demonstrates how to use FadeIn and FadeOut animations on a React Native component using Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FadeIn, FadeOut } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={FadeIn} exiting={FadeOut} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Animations with React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to cancel an ongoing animation on a Shared Value using the cancelAnimation method from react-native-reanimated. This can be done from both the UI and React Native's JS thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/shared-values.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cancelAnimation } from 'react-native-reanimated';\n\ncancelAnimation(someSharedValue);\n```\n\n----------------------------------------\n\nTITLE: Interpolating Rotation Values for Flip Card Animation in React Native Reanimated\nDESCRIPTION: This code demonstrates how to interpolate rotation values based on the flip state. It uses withTiming to create smooth animations between 0-180 and 180-360 degrees.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/flip-card.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrotate: withTiming(rotateVal.value ? 180 : 0),\nrotateY: withTiming(rotateVal.value ? '180deg' : '0deg'),\n```\n\n----------------------------------------\n\nTITLE: Importing Animated Component in React Native Reanimated\nDESCRIPTION: Shows how to import the Animated object from react-native-reanimated to create animatable components.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/your-first-animation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Using withDelay in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the withDelay function to start an animation with a delay. The shared value 'sv' is assigned an animation that starts after a 500ms delay.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withDelay.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(500, withTiming(0));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Animations for Shared Transitions\nDESCRIPTION: This snippet shows how to create custom animations for shared element transitions using SharedTransition.custom() and SharedTransition.progressAnimation(). It demonstrates configuring different animation types for screen transitions and swipe gestures.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/shared-element-transitions/overview.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SharedTransition } from 'react-native-reanimated';\n\nconst transition = SharedTransition.custom((values) => {\n  'worklet';\n  return {\n    height: withSpring(values.targetHeight),\n    width: withSpring(values.targetWidth),\n  };\n})\n  .progressAnimation((values, progress) => {\n    'worklet';\n    const getValue = (\n      progress: number,\n      target: number,\n      current: number\n    ): number => {\n      return progress * (target - current) + current;\n    };\n    return {\n      width: getValue(progress, values.targetWidth, values.currentWidth),\n      height: getValue(progress, values.targetHeight, values.currentHeight),\n    };\n  })\n  .defaultTransitionType(SharedTransitionType.ANIMATION);\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useAnimatedSensor in React Native Reanimated\nDESCRIPTION: Comprehensive TypeScript type definitions for the useAnimatedSensor hook, including function declaration, configuration types, sensor types, return types, and interface orientation enums.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/device/useAnimatedSensor.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// --- Function declaration ---\n\nfunction useAnimatedSensor(\n  sensorType: SensorType,\n  config?: Partial<SensorConfig>\n): AnimatedSensor<ValueRotation | Value3D>;\n\n// --- Configuration types ---\n\nenum SensorType {\n  ACCELEROMETER = 1,\n  GYROSCOPE = 2,\n  GRAVITY = 3,\n  MAGNETIC_FIELD = 4,\n  ROTATION = 5,\n}\n\ntype SensorConfig = {\n  interval: number | 'auto';\n  adjustToInterfaceOrientation: boolean;\n  iosReferenceFrame: IOSReferenceFrame;\n};\n\nenum IOSReferenceFrame {\n  XArbitraryZVertical,\n  XArbitraryCorrectedZVertical,\n  XMagneticNorthZVertical,\n  XTrueNorthZVertical,\n  Auto,\n}\n\n// --- Return types ---\n\ntype AnimatedSensor<T extends Value3D | ValueRotation> = {\n  sensor: SharedValue<T>;\n  unregister: () => void;\n  isAvailable: boolean;\n  config: SensorConfig;\n};\n\ntype Value3D = {\n  x: number;\n  y: number;\n  z: number;\n  interfaceOrientation: InterfaceOrientation;\n};\n\ntype ValueRotation = {\n  qw: number;\n  qx: number;\n  qy: number;\n  qz: number;\n  yaw: number;\n  pitch: number;\n  roll: number;\n  interfaceOrientation: InterfaceOrientation;\n};\n\nenum InterfaceOrientation {\n  ROTATION_0 = 0,\n  ROTATION_90 = 90,\n  ROTATION_180 = 180,\n  ROTATION_270 = 270,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Animated Pager Scroll Handler with useHandler in JavaScript\nDESCRIPTION: Example implementation of a custom animated pager scroll handler using the useHandler hook. The function creates an event handler that processes page scroll events and maintains context between event occurrences. It demonstrates how to combine useHandler with useEvent to create a specialized event handler.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useHandler.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useAnimatedPagerScrollHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer, useWeb } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event) => {\n      'worklet';\n      const { onPageScroll } = handlers;\n\n      if (onPageScroll && event.eventName.endsWith('onPageScroll')) {\n        onPageScroll(event, context);\n      }\n    },\n    ['onPageScroll'],\n    doDependenciesDiffer,\n  );\n```\n\n----------------------------------------\n\nTITLE: ChildrenScroller Component Implementation\nDESCRIPTION: Component that manages scrolling animation by updating offset values and creating clones of children elements. It handles the horizontal translation and continuous animation of content.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/marquee.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ChildrenScroller = ({\n  children,\n  containerWidth,\n  contentWidth,\n  speed = 0.1,\n  delay = 0,\n  spacing = 0,\n}) => {\n  const offset = useSharedValue(0);\n  const maxOffset = contentWidth + spacing;\n\n  useEffect(() => {\n    offset.value = 0;\n  }, [contentWidth]);\n\n  useFrameCallback(() => {\n    'worklet';\n    offset.value = (offset.value + speed) % maxOffset;\n  }, true);\n\n  const dynamicStyles = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateX: -offset.value }],\n    };\n  });\n\n  return (\n    <Animated.View style={[styles.childrenScroller, dynamicStyles]}>\n      {children}\n      {children}\n    </Animated.View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Animated Styles Precedence Example in React Native Reanimated\nDESCRIPTION: Example showing how animated styles take precedence over static styles. In this case, the width defined in animatedStyles will override the static width of 100.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedStyle.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const animatedStyles = useAnimatedStyle(() => ({\n    width: sv.value,\n  }));\n\n  return (\n    <Animated.View\n      style={[\n        // highlight-start\n        animatedStyles, // ⚠️ overrides the static style width\n        { width: 100 },\n        // highlight-end\n      ]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Worklets in React Native Reanimated\nDESCRIPTION: Shows how to create a custom worklet function using the 'worklet' directive. Worklets are JavaScript functions that can run on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myWorklet() {\n  'worklet';\n  console.log('Running on the UI thread');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry/Exit Transitions in React Native Reanimated\nDESCRIPTION: Example showing how to implement Entry/Exit transitions with custom animations for elements entering and exiting the layout. Includes configuration for duration, delay, animation types and callback handling.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EntryExitTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={EntryExitTransition} />;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nEntryExitTransition.duration(1000)\n  .delay(500)\n  .entering(FlipInEasyX)\n  .exiting(FlipOutEasyY)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring LinearTransition with Common Modifiers\nDESCRIPTION: Shows how to use common modifiers with LinearTransition to customize animation duration, delay, reduced motion handling, initial values, and completion callbacks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nLinearTransition.delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateY: 420 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Shared Values in React Native Reanimated\nDESCRIPTION: Shows how to create and modify shared values using useSharedValue hook. The example demonstrates incrementing a shared value by 10 when a handler is called.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const sv = useSharedValue(0);\n\n  const handlePress = () => {\n    sv.value += 10;\n  };\n\n  // rest of your glamorous code ✨\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined Scroll Handlers with useComposedEventHandler in React Native\nDESCRIPTION: Example demonstrating how to compose multiple scroll event handlers into a single handler using useComposedEventHandler. The example shows combining two scroll handlers that log different messages when scroll events occur.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useComposedEventHandler.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useAnimatedScrollHandler,\n  useComposedEventHandler,\n} from 'react-native-reanimated';\n\nfunction ComposedEventHandlerExample() {\n  const onScrollHandler1 = useAnimatedScrollHandler({\n    onScroll(e) {\n      console.log('Scroll handler 1 onScroll event');\n    },\n  });\n\n  const onScrollHandler2 = useAnimatedScrollHandler({\n    onScroll(e) {\n      console.log('Scroll handler 2 onScroll event');\n    },\n  });\n\n  const composedHandler = useComposedEventHandler([\n    onScrollHandler1,\n    onScrollHandler2,\n  ]);\n\n  return (\n    <View style={styles.container}>\n      <Animated.ScrollView style={styles.scroll} onScroll={composedHandler}>\n        <Content />\n      </Animated.ScrollView>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useFrameCallback in a React Native Component\nDESCRIPTION: This example demonstrates how to use the useFrameCallback hook in a React Native component. It shows how to create an animated box that moves across the screen and how to control the animation using the frame callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useFrameCallback.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, {\n  useAnimatedStyle,\n  useFrameCallback,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport { Button, StyleSheet, View } from 'react-native';\n\nimport React from 'react';\n\nexport default function FrameCallbackExample() {\n  const x = useSharedValue(0);\n\n  const frameCallback = useFrameCallback((frameInfo) => {\n    if (frameInfo.timeSincePreviousFrame === null) {\n      console.log('First frame!');\n    } else {\n      console.log(\n        `${frameInfo.timeSincePreviousFrame} ms have passed since the previous frame`\n      );\n    }\n    // Move the box by one pixel on every frame\n    x.value += 1;\n  }, false);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: x.value,\n        },\n      ],\n    };\n  });\n\n  return (\n    <View>\n      <Animated.View style={[styles.box, animatedStyle]} />\n      <Button\n        title=\"Start/stop\"\n        onPress={() => frameCallback.setActive(!frameCallback.isActive)}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    width: 100,\n    height: 100,\n    backgroundColor: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Keyframe Animations in React Native Reanimated\nDESCRIPTION: This example shows how to apply multiple keyframe animations to a single Animated.View component, with corresponding animation durations for each animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-name.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nanimationName: [fadeInOut, moveLeft, bounce],\nanimationDuration: ['2.5s', '5s', '1s'],\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Participant Component with React Native Reanimated\nDESCRIPTION: This code defines a Participant component using React Native Reanimated. It applies the LightSpeedInLeft animation effect when the component enters the view. The component displays a participant's name and a remove button.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/_step2.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {LightSpeedInLeft} from 'react-native-reanimated';\n...\nfunction Participant({\n  name,\n  onRemove,\n}: {\n  name: string;\n  onRemove: () => void;\n}) {\n  return (\n    <Animated.View\n      entering={LightSpeedInLeft}\n      style={[styles.participantView]}>\n      <Text>{name}</Text>\n      <Button title=\"Remove\" color=\"red\" onPress={onRemove} />\n    </Animated.View>\n  );\n}\n...\n```\n\n----------------------------------------\n\nTITLE: SectionList Component Implementation with React Native Reanimated\nDESCRIPTION: Main SectionList component that orchestrates the entire Section List interface. It handles state initialization and rendering of both TableOfContents and SectionCards components.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/section-list.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n  return (\n    <View style={styles.container}>\n      <TableOfContents\n        data={sections}\n        visibleIndex={visibleIndex}\n        sectionCardsRef={sectionCardsRef}\n        tableOfContentsRef={tableOfContentsRef}\n        selectedItem={selectedItem}\n      />\n\n      <SectionCards\n        sections={sections}\n        visibleIndex={visibleIndex}\n        sectionCardsRef={sectionCardsRef}\n        tableOfContentsRef={tableOfContentsRef}\n      />\n    </View>\n  );\n```\n\n----------------------------------------\n\nTITLE: Animating Styles with useAnimatedStyle in React Native Reanimated\nDESCRIPTION: This snippet shows how to use useAnimatedStyle hook to create animated styles based on a shared value. It changes the background color and scale of a view when pressed.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/events.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst uas = useAnimatedStyle(() => {\n  return {\n    backgroundColor: pressed.value ? '#FEEF86' : '#001972',\n    transform: [{ scale: withSpring(pressed.value ? 1.2 : 1) }],\n  };\n});\n\n<Animated.View style={[styles.ball, uas]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Example with Component in React Native Reanimated Docs\nDESCRIPTION: Demonstrates how to create an interactive example with a draggable component using the InteractiveExample component. The example includes a DecayTrain component with drag functionality.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/contributing.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport DecayTrain from '@site/src/examples/DecayTrain';\nimport DecayTrainSrc from '!!raw-loader!@site/src/examples/DecayTrain';\n\n<InteractiveExample\n  src={DecayTrainSrc}\n  component={<DecayTrain />}\n  label=\"Grab and drag the train\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Using useDerivedValue Hook in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to import and use the useDerivedValue hook to create a new shared value that reactively depends on an existing shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useDerivedValue.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDerivedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const derivedValue = useDerivedValue(() => {\n    return sv.value * 50;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using LinearTransition in React Native Reanimated\nDESCRIPTION: Demonstrates how to import LinearTransition from react-native-reanimated and apply it to an Animated.View component to enable smooth linear layout animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LinearTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={LinearTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Transition in React Native with Reanimated\nDESCRIPTION: This snippet shows how to add a layout transition animation to a React Native component using Reanimated's layout animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/animated_list.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, { LightSpeedInLeft, Layout } from 'react-native-reanimated';\n\nconst Participant = ({ name, onRemove }) => {\n  return (\n    <Animated.View\n      entering={LightSpeedInLeft}\n      layout={Layout.springify()}\n      style={styles.participant}>\n      <Text style={styles.participantName}>{name}</Text>\n      <TouchableOpacity onPress={onRemove}>\n        <Text style={styles.removeText}>Remove</Text>\n      </TouchableOpacity>\n    </Animated.View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Changing and Toggling of List Layout Transitions in React Native Reanimated\nDESCRIPTION: Example showing how to dynamically change or disable list layout animations. It uses useState to manage the current transition and includes functions to switch between different transitions or toggle animations on/off completely.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/list-layout-animations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [transition, setTransition] = useState(LinearTransition);\n\n  const changeTransition = () => {\n    // highlight-start\n    setTransition(\n      transition === LinearTransition ? JumpingTransition : LinearTransition\n    );\n    // highlight-end\n  };\n\n  const toggleTransition = () => {\n    // highlight-next-line\n    setTransition(transition ? undefined : LinearTransition);\n  };\n\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      // highlight-next-line\n      itemLayoutAnimation={transition}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Linear Transition in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to configure a spring-based LinearTransition. It includes various spring properties like damping, mass, and stiffness.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nLinearTransition.springify()\n  .damping(30)\n  .mass(5)\n  .rotate(20)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Basic View Rotation Animation Setup\nDESCRIPTION: Sets up the basic structure for a rotation animation using useSharedValue and useAnimatedStyle hooks. Creates a foundation for implementing wobble animation effect.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/animations.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nfunction WobbleExample(props) {\n  const rotation = useSharedValue(0);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [{ rotateZ: `${rotation.value}deg` }],\n    };\n  });\n\n  return (\n    <>\n      <Animated.View style={[styles.box, animatedStyle]} />\n      <Button\n        title=\"wobble\"\n        onPress={() => {\n          // will be filled in later\n        }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Color Value Examples in React Native Reanimated\nDESCRIPTION: Examples of supported color value formats for animations including hexadecimal, RGB, RGBA, RGB Hexadecimal, HSL, and named colors.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/_shared/animationToValue.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n0xff1234\n\"rgb(100, 50, 0)\"\n\"rgba(255, 105, 180, 0)\"\n\"#53575E\"\n\"hsl(0, 50%, 50%)\"\n\"dodgerblue\"\n```\n\n----------------------------------------\n\nTITLE: Basic Scroll Handler Implementation in React Native Reanimated\nDESCRIPTION: Demonstrates a basic implementation of useAnimatedScrollHandler to track scroll position and animate a view accordingly. Uses Animated.ScrollView with a scroll handler to update a shared value based on scroll position.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedScrollHandler.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  useAnimatedScrollHandler,\n} from 'react-native-reanimated';\n\nfunction ScrollExample() {\n  const translationY = useSharedValue(0);\n\n  const scrollHandler = useAnimatedScrollHandler((event) => {\n    translationY.value = event.contentOffset.y;\n  });\n\n  const stylez = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateY: translationY.value,\n        },\n      ],\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, stylez]} />\n      <Animated.ScrollView\n        style={styles.scroll}\n        onScroll={scrollHandler}\n        scrollEventThrottle={16}>\n        <Content />\n      </Animated.ScrollView>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Shared Element Navigation Setup in React Native\nDESCRIPTION: Basic setup for shared element transitions using React Native Reanimated and React Navigation. Shows how to create a stack navigator with two screens containing shared elements.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/shared-element-transitions/overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n\nconst Stack = createNativeStackNavigator();\n\nfunction One({ navigation }) {\n  return (\n    <>\n      <Animated.View\n        sharedTransitionTag=\"sharedTag\"\n      />\n      <Button title=\"Two\" onPress={() => navigation.navigate('Two')} />\n    </>\n  );\n}\n\nfunction Two({ navigation }) {\n  return (\n    <>\n      <Animated.View\n        sharedTransitionTag=\"sharedTag\"\n      />\n      <Button title=\"One\" onPress={() => navigation.navigate('One')} />\n    </>\n  );\n}\n\nexport default function SharedElementExample() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: true }}>\n        <Stack.Screen name=\"One\" component={One} />\n        <Stack.Screen name=\"Two\" component={Two} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedReaction Hook in React Native Reanimated\nDESCRIPTION: Demonstrates basic usage of the useAnimatedReaction hook to respond to changes in a shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useAnimatedReaction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAnimatedReaction } from 'react-native-reanimated';\n\nfunction App() {\n  useAnimatedReaction(\n    () => {\n      return sv.value;\n    },\n    (currentValue, previousValue) => {\n      if (currentValue !== previousValue) {\n        // do something ✨\n      }\n    }\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Animation Event Handlers in React Native Reanimated\nDESCRIPTION: This example demonstrates how to use the useComposedEventHandler hook to combine multiple scroll event handlers into a single handler that can be attached to an Animated.ScrollView component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useComposedEventHandler.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useAnimatedScrollHandler,\n  useComposedEventHandler,\n} from 'react-native-reanimated';\n\nfunction ComposedEventHandlerExample() {\n  const onScrollHandler1 = useAnimatedScrollHandler({\n    onScroll(e) {\n      console.log('Scroll handler 1 onScroll event');\n    },\n  });\n\n  const onScrollHandler2 = useAnimatedScrollHandler({\n    onScroll(e) {\n      console.log('Scroll handler 2 onScroll event');\n    },\n  });\n\n  // highlight-start\n  const composedHandler = useComposedEventHandler([\n    onScrollHandler1,\n    onScrollHandler2,\n  ]);\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      {/* highlight-next-line */}\n      <Animated.ScrollView style={styles.scroll} onScroll={composedHandler}>\n        <Content />\n      </Animated.ScrollView>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: LayoutAnimationConfig Type Definitions in TypeScript\nDESCRIPTION: This snippet provides the TypeScript interface for LayoutAnimationConfigProps. It defines the props available for the LayoutAnimationConfig component, including skipEntering, skipExiting, and children.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-animation-config.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LayoutAnimationConfigProps {\n  skipEntering?: boolean;\n  skipExiting?: boolean;\n  children: ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JumpingTransition with Modifiers\nDESCRIPTION: Shows how to customize JumpingTransition using modifiers that control duration, delay, reduced motion handling, and completion callbacks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nJumpingTransition.duration(1000)\n  .delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Basic withSequence Usage in React Native Reanimated\nDESCRIPTION: A simple example showing how to import and use the withSequence function to run multiple animations one after another.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withSequence.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withSequence } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withSequence(withTiming(50), withTiming(0));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Marquee Component Implementation\nDESCRIPTION: Main component that coordinates the marquee effect by managing dimensions and rendering child components. It utilizes the ChildrenScroller for animation and handles the overall layout.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/marquee.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Marquee = ({\n  children,\n  style,\n  speed = 0.1,\n  delay = 0,\n  spacing = 0,\n}) => {\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [contentWidth, setContentWidth] = useState(0);\n\n  return (\n    <View\n      style={[styles.container, style]}\n      onLayout={(event) => {\n        setContainerWidth(event.nativeEvent.layout.width);\n      }}>\n      <MeasureElement onMeasure={setContentWidth}>\n        <View style={styles.content}>{children}</View>\n      </MeasureElement>\n      {containerWidth !== 0 && contentWidth !== 0 && (\n        <ChildrenScroller\n          containerWidth={containerWidth}\n          contentWidth={contentWidth}\n          speed={speed}\n          delay={delay}\n          spacing={spacing}>\n          {children}\n        </ChildrenScroller>\n      )}\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedKeyboard with useAnimatedStyle in React Native Reanimated\nDESCRIPTION: Basic example showing how to import and use the useAnimatedKeyboard hook to create animations that respond to keyboard height changes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/device/useAnimatedKeyboard.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAnimatedKeyboard, useAnimatedStyle } from 'react-native-reanimated';\n\nexport default function App() {\n  const keyboard = useAnimatedKeyboard();\n\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ translateY: -keyboard.height.value }],\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Custom Entering Animation in React Native Reanimated\nDESCRIPTION: An example implementation of a custom entering animation for a card view. It demonstrates how to create animations for origin, opacity, border radius, and transform properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/CustomAnimations.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CardView() {\n  const entering = (targetValues) => {\n    'worklet';\n    const animations = {\n      originX: withTiming(targetValues.originX, { duration: 3000 }),\n      opacity: withTiming(1, { duration: 2000 }),\n      borderRadius: withDelay(4000, withTiming(30, { duration: 3000 })),\n      transform: [\n        { rotate: withTiming('0deg', { duration: 4000 }) },\n        { scale: withTiming(1, { duration: 3500 }) },\n      ],\n    };\n    const initialValues = {\n      originX: -width,\n      opacity: 0,\n      borderRadius: 10,\n      transform: [{ rotate: '90deg' }, { scale: 0.5 }],\n    };\n    return {\n      initialValues,\n      animations,\n    };\n  };\n\n  return (\n    <Animated.View style={[styles.animatedView]} entering={entering}>\n      <Text> Card Example </Text>\n    </Animated.View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transition.Change in React Native Reanimated\nDESCRIPTION: Illustrates the usage of Transition.Change component to specify how components' properties that change during transition should be animated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/transitions.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Transition.Change>\n```\n\n----------------------------------------\n\nTITLE: Creating a Derived Width Value in React Native Reanimated\nDESCRIPTION: This example shows how to create a derived 'width' value that responds to changes in a 'progress' shared value. The width is calculated as progress times 250, demonstrating the synchronization between shared values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useDerivedValue.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'react-native';\nimport { useSharedValue, useDerivedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const progress = useSharedValue(0);\n  const width = useDerivedValue(() => {\n    return progress.value * 250;\n  });\n\n  return (\n    <View>\n      <SomeComponent width={width} />\n      <Button onPress={() => (progress.value = Math.random())} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useAnimatedRef in React Native Reanimated\nDESCRIPTION: This example demonstrates how to import and use the useAnimatedRef hook to reference an Animated.View component. The created reference is passed to the ref property of the component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedRef.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAnimatedRef } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  return <Animated.View ref={animatedRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FadingTransition in React Native Reanimated\nDESCRIPTION: Demonstrates how to import and use FadingTransition which animates the opacity of components, making them disappear at their old position and appear at their new position.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FadingTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={FadingTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Custom Entry Transition in React Native Reanimated\nDESCRIPTION: This snippet provides TypeScript type definitions for custom entry transitions in React Native Reanimated, including LayoutAnimation, EntryAnimationsValues, and related types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/custom-animations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction CustomEntryTransition (values: EntryAnimationsValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype EntryAnimationsValues = TargetLayoutAnimationsValues &\n  WindowDimensions;\n\ntype TargetLayoutAnimationsValues = {\n  ['targetOriginX', 'targetOriginY', 'targetWidth', 'targetHeight', 'targetBorderRadius', 'targetGlobalOriginX','targetGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SequencedTransition in React Native Reanimated\nDESCRIPTION: Demonstrates how to import and use SequencedTransition which animates x-position and width first, then y-position and height for a sequential animation effect.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SequencedTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={SequencedTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using withClamp in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to import the withClamp function from react-native-reanimated and use it to limit the range of a spring animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withClamp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withClamp } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withClamp({ min: -1, max: 1 }, withSpring(0));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for interpolate in React Native Reanimated\nDESCRIPTION: TypeScript definitions for the interpolate function and its related types, including the Extrapolation enum with its three modes (IDENTITY, CLAMP, EXTEND) and function signature with parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/interpolate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum Extrapolation {\n  IDENTITY = 'identity',\n  CLAMP = 'clamp',\n  EXTEND = 'extend',\n}\n\ntype ExtrapolationAsString = 'identity' | 'clamp' | 'extend';\n\nexport type ExtrapolationType =\n  | ExtrapolationConfig\n  | Extrapolation\n  | ExtrapolationAsString\n  | undefined;\n\nfunction interpolate(\n  value: number,\n  input: readonly number[],\n  output: readonly number[],\n  extrapolate?: ExtrapolationType\n): number;\n```\n\n----------------------------------------\n\nTITLE: Using withSequence Modifier in React Native Reanimated\nDESCRIPTION: Example showing how to chain animations together with the withSequence modifier. Animations will run sequentially, with each one starting only after the previous one completes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/applying-modifiers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withSequence } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withSequence(withTiming(50), withTiming(0));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedStyle with Dependencies in React Native\nDESCRIPTION: This snippet demonstrates how to use the useAnimatedStyle hook with dependencies. It shows how to create an animated style that depends on a shared value, which is initialized with a state value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedStyle.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  const [state, setState] = useState(0);\n  const sv = useSharedValue(state);\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: sv.value,\n    };\n  }, dependencies);\n  //...\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using LayoutAnimationConfig in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the LayoutAnimationConfig component to skip entering animations for child components. It imports the component from react-native-reanimated and wraps a View containing an Animated.View with entering and exiting animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-animation-config.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LayoutAnimationConfig } from 'react-native-reanimated';\n\nfunction App() {\n  const [show, setShow] = React.useState(true);\n\n  return (\n    // highlight-next-line\n    <LayoutAnimationConfig skipEntering>\n      <View>\n        {show && <Animated.View entering={PinwheelIn} exiting={PinwheelOut} />}\n      </View>\n      // highlight-next-line\n    </LayoutAnimationConfig>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Velocity-based Animation with withDecay in React Native\nDESCRIPTION: Example showing how to implement a velocity-based animation using withDecay in React Native Reanimated. The code demonstrates a draggable box that animates with decay after release, including gesture handling and boundary clamping.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/animations/withDecay.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withSpring,\n  useAnimatedStyle,\n  useAnimatedGestureHandler,\n} from 'react-native-reanimated';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\nfunction App() {\n  const x = useSharedValue(0);\n\n  const gestureHandler = useAnimatedGestureHandler({\n    onStart: (_, ctx) => {\n      ctx.startX = x.value;\n    },\n    onActive: (event, ctx) => {\n      x.value = ctx.startX + event.translationX;\n    },\n    onEnd: (evt) => {\n      x.value = withDecay({\n        velocity: evt.velocityX,\n        clamp: [0, 200], // optionally define boundaries for the animation\n      });\n    },\n  });\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: x.value,\n        },\n      ],\n    };\n  });\n\n  return (\n    <PanGestureHandler onGestureEvent={gestureHandler}>\n      <Animated.View style={[styles.box, animatedStyle]} />\n    </PanGestureHandler>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for useDerivedValue and SharedValue\nDESCRIPTION: Type definitions for the useDerivedValue hook and SharedValue interface, including method signatures and generic type parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useDerivedValue.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SharedValue<Value = unknown> {\n  value: Value;\n  get(): Value;\n  set(value: Value | ((value: Value) => Value)): void;\n  addListener: (listenerID: number, listener: (value: Value) => void) => void;\n  removeListener: (listenerID: number) => void;\n  modify: (\n    modifier?: <T extends Value>(value: T) => T,\n    forceUpdate?: boolean\n  ) => void;\n}\n\ninterface DerivedValue<Value = unknown>\n  extends Readonly<Omit<SharedValue<Value>, 'set'>> {\n  /**\n   * @deprecated Derived values are readonly, don't use this method. It's here\n   *   only to prevent breaking changes in TypeScript types. It will be removed\n   *   in the future.\n   */\n  set: SharedValue<Value>['set'];\n}\n\nfunction useDerivedValue<T>(\n  updater: () => T,\n  dependencies?: DependencyList\n): DerivedValue<T>;\n```\n\n----------------------------------------\n\nTITLE: Complete runOnJS Usage Example\nDESCRIPTION: Full example showing how to use runOnJS to call a JavaScript callback from the UI thread, demonstrating integration with useSharedValue and useDerivedValue.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/runonJS.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  useSharedValue,\n  runOnJS,\n  useDerivedValue,\n  useAnimatedReaction,\n} from 'react-native-reanimated';\nimport { View, Button } from 'react-native';\nimport React from 'react';\n\nexport default function App() {\n  const randomWidth = useSharedValue(10);\n  const lastResults = [];\n\n  const recordResult = (result) => {\n    lastResults.push(result);\n    if (lastResults.length > 3) {\n      lastResults.shift();\n    }\n  };\n\n  useDerivedValue(() => {\n    runOnJS(recordResult)(randomWidth.value);\n  });\n\n  return (\n    <View>\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.round(Math.random() * 350);\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using withRepeat in React Native Reanimated\nDESCRIPTION: Basic usage of withRepeat to repeat a spring animation 5 times. The animation is applied to a shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withRepeat.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withRepeat } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withRepeat(withSpring(0), 5);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Worklets\nDESCRIPTION: Demonstrates how to create custom worklets and run them on the UI thread using runOnUI.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/glossary.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myWorklet(greeting) {\n  'worklet';\n  console.log(`${greeting} from the UI thread`);\n}\n\nfunction onPress() {\n  // highlight-next-line\n  runOnUI(myWorklet)('Howdy');\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Reference Lifecycle in React Native Reanimated\nDESCRIPTION: This example shows the lifecycle of accessing the reference value. It demonstrates that the current property is null before the component is mounted, and becomes available after mounting in useEffect or event handlers.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedRef.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  console.log(animatedRef.current); // 🚩 Returns null\n\n  useEffect(() => {\n    console.log(animatedRef.current); // ✅ Returns the component\n  }, []);\n\n  return <View ref={animatedRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced withRepeat Animation with Callbacks\nDESCRIPTION: Complex example demonstrating withRepeat usage with callbacks for both the inner animation and the repeat wrapper. Shows how to handle completion and cancellation states.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/animations/withRepeat.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsharedValue.value = withRepeat(\n  withTiming(70, undefined, (finished, currentValue) => {\n    if (finished) {\n      console.log('current withRepeat value is ' + currentValue);\n    } else {\n      console.log('inner animation cancelled');\n    }\n  }),\n  10,\n  true,\n  (finished) => {\n    const resultStr = finished\n      ? 'All repeats are completed'\n      : 'withRepeat cancelled';\n    console.log(resultStr);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing onChange Handler in React Native Reanimated\nDESCRIPTION: The onChange handler compares a current value with its previous state and executes a specified action when a change is detected. It takes two parameters: the value to monitor and the action to execute when the value changes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/onChange.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nonChange(value, action);\n```\n\n----------------------------------------\n\nTITLE: Implementing Flip Card Component with React Native Reanimated\nDESCRIPTION: This snippet shows the full implementation of the FlipCard component. It includes props for customization, animation logic, and separate content components for flipped and non-flipped states.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/flip-card.md#2025-04-16_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nconst FlipCard = ({\n  RegularContent,\n  FlippedContent,\n  duration = 1000,\n  perspective = 1000,\n  direction = 'y',\n}) => {\n  const rotate = useSharedValue(0);\n  const rotateVal = useSharedValue(false);\n\n  const frontAnimatedStyle = useAnimatedStyle(() => {\n    const rotateProperty = direction === 'y' ? 'rotateY' : 'rotateX';\n\n    return {\n      transform: [\n        { perspective },\n        {\n          [rotateProperty]: withTiming(`${rotate.value}deg`, {\n            duration,\n          }),\n        },\n      ],\n    };\n  });\n\n  const backAnimatedStyle = useAnimatedStyle(() => {\n    const rotateProperty = direction === 'y' ? 'rotateY' : 'rotateX';\n\n    return {\n      transform: [\n        { perspective },\n        {\n          [rotateProperty]: withTiming(`${rotate.value + 180}deg`, {\n            duration,\n          }),\n        },\n      ],\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => {\n          rotateVal.value = !rotateVal.value;\n          rotate.value = withTiming(rotateVal.value ? 180 : 0, { duration });\n        }}\n      >\n        <Animated.View style={[styles.frontCard, frontAnimatedStyle]}>\n          <RegularContent />\n        </Animated.View>\n        <Animated.View style={[styles.backCard, backAnimatedStyle]}>\n          <FlippedContent />\n        </Animated.View>\n      </TouchableOpacity>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Customizable Switch Component with React Native Reanimated\nDESCRIPTION: Creates a Switch component that uses animatable values for smooth transitions between states. It accepts props for value, onPress function, animation duration, style, and track colors for customization.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/switch.md#2025-04-16_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nconst Switch = ({\n  value = false,\n  onPress = () => {},\n  duration = 150,\n  style = {},\n  trackColors = { false: '#767577', true: '#81b0ff' },\n}) => {\n  const width = useSharedValue(0);\n  const height = useSharedValue(0);\n  const offset = useSharedValue(0);\n\n  useEffect(() => {\n    offset.value = withTiming(value ? width.value - height.value : 0, {\n      duration,\n    });\n  }, [value, width, height, duration]);\n\n  const trackBgColor = useDerivedValue(() => {\n    return interpolateColor(\n      offset.value,\n      [0, width.value - height.value],\n      [trackColors.false, trackColors.true]\n    );\n  });\n\n  const dynamicStyle = useAnimatedStyle(() => ({\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: trackBgColor.value,\n    padding: 2,\n    width: width.value,\n    borderRadius: height.value / 2,\n  }));\n\n  const toggleStyle = useAnimatedStyle(() => ({\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    width: height.value - 4,\n    borderRadius: (height.value - 4) / 2,\n    aspectRatio: 1,\n    transform: [{ translateX: offset.value }],\n  }));\n\n  return (\n    <Pressable onPress={onPress}>\n      <Animated.View\n        style={[dynamicStyle, style]}\n        onLayout={({ nativeEvent: { layout } }) => {\n          width.value = layout.width;\n          height.value = layout.height;\n        }}\n      >\n        <Animated.View style={toggleStyle} />\n      </Animated.View>\n    </Pressable>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Shared Element Transitions in React Native\nDESCRIPTION: This code demonstrates the basic setup for shared element transitions between two screens using React Native Reanimated. Components with the same 'sharedTransitionTag' will animate between screens when navigating.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/shared-element-transitions/overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n\nconst Stack = createNativeStackNavigator();\n\nfunction One({ navigation }) {\n  return (\n    <>\n      <Animated.View\n        // highlight-start\n        sharedTransitionTag=\"sharedTag\"\n        // highlight-end\n      />\n      <Button title=\"Two\" onPress={() => navigation.navigate('Two')} />\n    </>\n  );\n}\n\nfunction Two({ navigation }) {\n  return (\n    <>\n      <Animated.View\n        // highlight-start\n        sharedTransitionTag=\"sharedTag\"\n        // highlight-end\n      />\n      <Button title=\"One\" onPress={() => navigation.navigate('One')} />\n    </>\n  );\n}\n\nexport default function SharedElementExample() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: true }}>\n        <Stack.Screen name=\"One\" component={One} />\n        <Stack.Screen name=\"Two\" component={Two} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SequencedTransition with Modifiers\nDESCRIPTION: Shows how to customize SequencedTransition using modifiers that control duration, delay, direction, reduced motion handling, and completion callbacks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nSequencedTransition.duration(1000)\n  .delay(500)\n  .reverse()\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing and Using clamp Function in React Native Reanimated\nDESCRIPTION: This example shows how to import the clamp function from React Native Reanimated and use it to limit a value within a range between 0 and 100.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/clamp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { clamp } from 'react-native-reanimated';\n\nfunction App() {\n  const result = clamp(sv.value, 0, 100);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Views with Shared Transition Tags\nDESCRIPTION: Examples of how to configure shared element transitions on specific views across different screens. Each example shows how to use the 'sharedTransitionTag' prop with styles applied to the views.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/shared-element-transitions/overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  sharedTransitionTag=\"sharedTag\"\n  style={{ width: 150, height: 150, backgroundColor: 'green' }}\n/>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  sharedTransitionTag=\"sharedTag\"\n  style={{ width: 100, height: 100, backgroundColor: 'green' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring LinearTransition with Spring-based Modifiers\nDESCRIPTION: Demonstrates how to use spring-based modifiers with LinearTransition to create physics-based animations. These modifiers use the withSpring function and can be configured with parameters like damping, mass, and stiffness.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nLinearTransition.springify()\n  .damping(30)\n  .mass(5)\n  .rotate(20)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Using call Function in React Native Reanimated\nDESCRIPTION: The 'call' function triggers a JavaScript callback when any of the specified animation nodes update. It takes an array of node references and a callback function as arguments. The callback receives the current values of the nodes when triggered.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/call.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncall(argsNodes, callback);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Shared Transition Styles to Views\nDESCRIPTION: This snippet demonstrates how to apply custom transition animations to a view by using the sharedTransitionStyle prop along with the sharedTransitionTag.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/shared-element-transitions/overview.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  sharedTransitionTag=\"reanimatedTransition\"\n  // highlight-next-line\n  sharedTransitionStyle={transition}\n  style={{ backgroundColor: 'blue', width: 200, height: 100 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Specifying Extrapolation in React Native Reanimated interpolate\nDESCRIPTION: This snippet shows how to specify extrapolation for a particular edge when using the interpolate function in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/utilities/interpolate.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst opacity = interpolate(\n  sv.value,\n  [0, 100],\n  [0, 1],\n  { extrapolateLeft: Extrapolation.CLAMP }\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Bounce Animations with Modifiers\nDESCRIPTION: Demonstrates how to apply various modifiers to bounce animations, including duration, delay, and callback functions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBounceInDown.duration(500)\n  .delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateY: -420 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Pinwheel Animation in React Native Reanimated\nDESCRIPTION: Usage example of Pinwheel animation in a React Native component. It applies PinwheelIn for entering and PinwheelOut for exiting animations to an Animated.View.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PinwheelIn, PinwheelOut } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={PinwheelIn} exiting={PinwheelOut} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Animated Component\nDESCRIPTION: Shows how to create a custom animated component by wrapping an existing component using createAnimatedComponent.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/glossary.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\nimport { Circle } from 'react-native-svg';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useAnimatedProps in React Native\nDESCRIPTION: Demonstrates the basic usage of useAnimatedProps hook to create an animated props object for opacity animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useAnimatedProps.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAnimatedProps } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      opacity: sv.value ? 1 : 0,\n    };\n  });\n\n  return <Animated.View animatedProps={animatedProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Prepare Function in useAnimatedReaction\nDESCRIPTION: Shows an example of the prepare function in useAnimatedReaction, which returns a value to react to.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useAnimatedReaction.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  useAnimatedReaction(\n    () => {\n      return Math.floor(sv.value);\n    },\n    (currentValue, previousValue) => {\n      // ...\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Wobble Animation Sequence\nDESCRIPTION: Creates a complex wobble animation using withSequence modifier combined with withRepeat and withTiming. Implements a full wobble effect moving between -10 and 10 degrees.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/animations.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrotation.value = withSequence(\n  withTiming(-10, { duration: 50 }),\n  withRepeat(withTiming(ANGLE, { duration: 100 }), 6, true),\n  withTiming(0, { duration: 50 })\n);\n```\n\n----------------------------------------\n\nTITLE: Correctly Animating Text Shadow Styles in React Native Reanimated\nDESCRIPTION: This example shows the correct way to animate text shadow styles on the web using React Native Reanimated. The shadow color is specified in each keyframe to ensure it remains consistent throughout the animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/supported-properties.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Animated.Text\n  style={{\n    animationName: {\n      from: {\n        textShadowColor: 'red', // shadows starts 'red'\n        textShadowRadius: 8,\n      },\n      to: {\n        textShadowColor: 'red', // and keeps being 'red' throughout the animation\n        textShadowRadius: 16,\n      },\n    },\n  }}>\n  Reanimated\n</Animated.Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Animations in React Native Reanimated\nDESCRIPTION: Demonstrates how to use ZoomIn and ZoomOut animations on an Animated.View component. These animations allow scaling effects.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ZoomIn, ZoomOut } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={ZoomIn} exiting={ZoomOut} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Rotation Animation Parameters and Modifiers\nDESCRIPTION: Configuration options and modifiers available for rotation animations in React Native Reanimated. Includes duration, delay, easing, spring parameters, and callback options.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/EntryAnimations.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- `duration` (in ms) default: 300\n- `delay` (in ms) default: 0\n- `easing` same easing worklet as with `withTiming`\n- `springify` change animation to spring\n- `damping ` default: 10\n- `mass` default: 1\n- `stiffness` default: 100\n- `overshootClamping` default: false\n- `restDisplacementThreshold` default: 0.001\n- `restSpeedThreshold` default: 0.001\n- `withCallback` callback that will fire after the entry animation ends\n- `withInitialValues` sets the initial values\n- `randomDelay` randomize delay of the animation between 0 and provided delay ( or 1000ms if delay not provided )\n```\n\n----------------------------------------\n\nTITLE: Basic useAnimatedKeyboard Implementation - JavaScript\nDESCRIPTION: Basic example showing how to use useAnimatedKeyboard hook to create animations based on keyboard state and height.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/device/useAnimatedKeyboard.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAnimatedKeyboard, useAnimatedStyle } from 'react-native-reanimated';\n\nexport default function App() {\n  const keyboard = useAnimatedKeyboard();\n\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ translateY: -keyboard.height.value }],\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Native Participant List Component with TypeScript\nDESCRIPTION: A React Native component that manages a list of participants with add and remove functionality. The component includes a Participant sub-component for individual entries, state management for the participant list, and input handling for adding new participants. Features TypeScript typing and scroll view implementation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/_fullCode.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Participant({\n  name,\n  onRemove,\n}: {\n  name: string;\n  onRemove: () => void;\n}) {\n  return (\n    <View\n      style={[styles.participantView]}>\n      <Text>{name}</Text>\n      <Button title=\"Remove\" color=\"red\" onPress={onRemove} />\n    </View>\n  );\n}\n\nexport default function AnimatedListExample() {\n  const [inputValue, setInputValue] = useState('');\n  const [participantList, setParticipantList] = useState<EventParticipant[]>(\n    []\n  );\n\n  const addParticipant = () => {\n    setParticipantList(\n      [{ name: inputValue, id: Date.now().toString() }].concat(participantList)\n    );\n    setInputValue('');\n  };\n\n  const removeParticipant = (id: string) => {\n    setParticipantList(\n      participantList.filter((participant) => participant.id !== id)\n    );\n  };\n\n  return (\n    <View\n      style={[styles.listView]}>\n      <ScrollView style={[{ width: '100%' }]}>\n        {participantList.map((participant) => (\n          <Participant\n            key={participant.id}\n            name={participant.name}\n            onRemove={() => removeParticipant(participant.id)}\n          />\n        ))}\n      </ScrollView>\n\n      <View\n        style={[ styles.bottomRow]}>\n        <View\n          style={[styles.textInput]}>\n          <Text>Add participant: </Text>\n          <TextInput\n            placeholder=\"Name\"\n            value={inputValue}\n            onChangeText={setInputValue}\n          />\n        </View>\n\n        <Button\n          title=\"Add\"\n          disabled={inputValue === ''}\n          onPress={addParticipant}\n        />\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequenced Transition in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the SequencedTransition component, which animates x-position and width first, then y-position and height.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SequencedTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={SequencedTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using runOnRuntime with createWorkletRuntime in React Native Reanimated\nDESCRIPTION: Demonstrates how to create a worklet runtime and execute a function on it using runOnRuntime. The example creates a background runtime and runs a simple logging function on that separate thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/runOnRuntime.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWorkletRuntime, runOnRuntime } from 'react-native-reanimated';\n\nconst workletRuntime = createWorkletRuntime('background');\n\nfunction App() {\n  // E.g. in event handler or in an effect\n  // highlight-next-line\n  runOnRuntime(workletRuntime, (greeting) => {\n    console.log(`${greeting} from a separate thread`);\n    // highlight-next-line\n  })('Howdy');\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for withRepeat in React Native Reanimated\nDESCRIPTION: Provides TypeScript type definitions for the withRepeat function, including its parameters and return type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withRepeat.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\nfunction withRepeat<T extends AnimatableValue>(\n  animation: T,\n  numberOfReps?: number,\n  reverse?: boolean,\n  callback?: (finished?: boolean, current?: AnimatableValue) => void,\n  reduceMotion?: ReduceMotion\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Using useReducedMotion Hook in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the useReducedMotion hook to query the reduced motion system setting. It allows developers to conditionally render content or run animations based on the user's accessibility preferences.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/device/useReducedMotion.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReducedMotion } from 'react-native-reanimated';\n\nfunction App() {\n  const reduceMotion = useReducedMotion();\n\n  if (reduceMotion) {\n    // display static content ✨\n  } else {\n    // run animations ✨\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Layout Transition in React Native Reanimated\nDESCRIPTION: Shows how to customize a layout transition by adding modifiers. In this example, the duration is set to 3000ms and other modifiers can be chained.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/LayoutTransitions.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<AnimatedComponent layout={Transition.duration(3000).otherModifier()} >\n```\n\n----------------------------------------\n\nTITLE: Using Shared Values in Worklets\nDESCRIPTION: Shows how to use shared values to pass data between UI and JS threads.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/worklets.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const width = useSharedValue(100);\n\n  function myWorklet() {\n    'worklet';\n    width.value += 50;\n  }\n\n  useEffect(() => {\n    console.log(width.value); // available on both JS and UI thread\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Using withRepeat Modifier in React Native Reanimated\nDESCRIPTION: Basic example of how to use the withRepeat modifier to repeat an animation multiple times. The second parameter specifies how many times to repeat, and the third parameter determines if the animation should go back and forth.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/applying-modifiers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withRepeat } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withRepeat(withTiming(50), 5);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Custom Layout Transition in TypeScript\nDESCRIPTION: This snippet provides TypeScript type definitions for custom layout transitions in React Native Reanimated. It includes types for the transition function, layout animation, layout animation values, and window dimensions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/custom-animations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction CustomLayoutTransition (values: LayoutAnimationValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype LayoutAnimationsValues = CurrentLayoutAnimationsValues & TargetLayoutAnimationsValues & WindowDimensions;\n\ntype CurrentLayoutAnimationsValues = {\n    ['currentOriginX', 'currentOriginY', 'currentWidth', 'currentHeight', 'currentBorderRadius', 'currentGlobalOriginX','currentGlobalOriginY']: number;\n};\n\ntype TargetLayoutAnimationsValues = {\n    ['targetOriginX', 'targetOriginY', 'targetWidth', 'targetHeight', 'targetBorderRadius', 'targetGlobalOriginX','targetGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Pinwheel Animation Modifiers\nDESCRIPTION: Example of using common animation modifiers like delay, randomDelay, and callbacks with Pinwheel animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPinwheelIn.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({\n    transform: [{ scale: 0.8 }, { rotate: '3' }],\n  })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Using withRepeat Animation Modifier\nDESCRIPTION: Example showing how to use withRepeat to create repeating animations. The code demonstrates repeating a timing animation 5 times.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/applying-modifiers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withRepeat } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withRepeat(withTiming(50), 5);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Common Modifiers to Linear Transition in React Native Reanimated\nDESCRIPTION: This code shows how to add common modifiers like delay, reduceMotion, initial values, and callback to a LinearTransition.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nLinearTransition.delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateY: 420 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture Handler\nDESCRIPTION: Configures the pan gesture handler to update the slider position and box width based on touch events\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/slider.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst panGesture = Gesture.Pan()\n  .onChange((event) => {\n    const newOffset = event.translationX + ctx.value;\n    offset.value = Math.min(Math.max(0, newOffset), MAX_OFFSET);\n  })\n  .onBegin(() => {\n    ctx.value = offset.value;\n  });\n\n```\n\n----------------------------------------\n\nTITLE: Keyframe Animation with Middle Points\nDESCRIPTION: Creates a rotation animation with intermediate keyframes between start and end points\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/KeyframeAnimations.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Keyframe } from 'react-native-reanimated';\n\nconst keyframe = new Keyframe({\n  0: {\n    transform: [{ rotate: '0deg' }],\n  },\n  45: {\n    transform: [{ rotate: '100deg' }],\n  },\n  100: {\n    transform: [{ rotate: '45deg' }],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using dispatchCommand with React Native Reanimated\nDESCRIPTION: This example demonstrates how to use dispatchCommand to focus a text input field when a button is tapped. It uses the useAnimatedRef hook to create a reference to the text input and attaches a gesture handler to the button.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/dispatchCommand.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dispatchCommand } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const gesture = Gesture.Tap().onStart(() => {\n    // highlight-next-line\n    dispatchCommand(animatedRef, 'focus');\n  });\n\n  return (\n    <>\n      <AnimatedTextInput ref={animatedRef} style={styles.input} />\n      <GestureDetector gesture={gesture}>\n        <Button title=\"Focus\" />\n      </GestureDetector>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Modifiers for Slide Animation in JavaScript\nDESCRIPTION: Demonstrates the application of spring-based modifiers to a SlideInUp animation, including springify, damping, mass, stiffness, and other spring properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nSlideInUp.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedReaction with Component State\nDESCRIPTION: Example demonstrating useAnimatedReaction hook usage within a React component, showing interaction with component state and multiple shared values. The hook calculates a derived value based on a shared value and component state.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedReaction.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  const [state, setState] = useState(0);\n  const sv1 = useSharedValue(0);\n  const sv2 = useSharedValue(0);\n\n  const derived = useAnimatedReaction(\n    () => {\n      return sv1.value * state;\n    },\n    (result, previous) => {\n      if (result !== previous) {\n        sv2.value = result - 5;\n      }\n    },\n    dependencies\n  );\n  //...\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Animation Reference Example with Jest\nDESCRIPTION: Demonstrates how to test animated components using Jest, including style assertions and timer manipulation for animation testing.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/testing-with-jest.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('reference', () => {\n  // some styles\n\n  const { getByTestId } = render(<AnimatedComponent />);\n  const view = getByTestId('view');\n  const button = getByTestId('button');\n\n  // highlight-next-line\n  expect(view).toHaveAnimatedStyle(style);\n\n  fireEvent.press(button);\n  jest.advanceTimersByTime(250); // if whole animation duration is a 500ms\n\n  style.width = 50; // value of component width after 250ms of animation\n  // highlight-next-line\n  expect(view).toHaveAnimatedStyle(style);\n});\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for createAnimatedComponent\nDESCRIPTION: TypeScript type definitions showing function signatures for createAnimatedComponent with both class and functional components.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/createAnimatedComponent.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createAnimatedComponent<P extends object>(\n  component: ComponentClass<P>\n): ComponentClass<AnimateProps<P>>;\n\nfunction createAnimatedComponent<P extends object>(\n  component: FunctionComponent<P>\n): FunctionComponent<AnimateProps<P>>;\n```\n\n----------------------------------------\n\nTITLE: Running Sequential Animations with withSequence in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use withSequence to run multiple timing animations in sequence. It starts with a value of 0, animates to 70, and then back to 0.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/animations/withSequence.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsharedValue.value = withSequence(withTiming(70), withTiming(0));\n```\n\n----------------------------------------\n\nTITLE: Implementing Pinwheel Animation in React Native Reanimated\nDESCRIPTION: Example showing how to use Pinwheel animations in a React component. This snippet demonstrates applying PinwheelIn for entering and PinwheelOut for exiting animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PinwheelIn, PinwheelOut } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={PinwheelIn} exiting={PinwheelOut} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Animation Functions to Shared Values in React Native Reanimated\nDESCRIPTION: Demonstrates using animation functions with shared values. This example shows applying a spring animation to a shared value to animate it to 100.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsv.value = withSpring(100);\n```\n\n----------------------------------------\n\nTITLE: Using getRelativeCoords with Gesture Handler in React Native\nDESCRIPTION: Example showing how to use getRelativeCoords with PanGestureHandler to convert absolute touch coordinates to coordinates relative to a specific view. Uses useAnimatedRef to create a reference to the target view and applies it within a gesture handler.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/getRelativeCoords.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Comp = () => {\n  const aref = useAnimatedRef();\n  // ...\n\n  const gestureHandler = useAnimatedGestureHandler({\n    onEnd: (event) => {\n      getRelativeCoords(aref, event.absoluteX, event.absoluteY);\n    },\n  });\n\n  return (\n    <View ref={aref}>\n      <PanGestureHandler onGestureEvent={gestureHandler}>\n        <Animated.View style={[styles.box]} />\n      </PanGestureHandler>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Worklet in JavaScript\nDESCRIPTION: Shows how to create a basic worklet function using the 'worklet' directive.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/worklets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myWorklet() {\n  'worklet';\n  console.log('Hello from a worklet');\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for interpolateColor Function\nDESCRIPTION: Provides the TypeScript type definition for the interpolateColor function, including its parameters and return type. It also defines the InterpolationOptions type used for additional configuration.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/utilities/interpolateColor.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nfunction interpolateColor(\n  value: number,\n  input: number[],\n  output: string[],\n  colorSpace?: 'RGB' | 'HSV' | 'LAB',\n  options?: InterpolationOptions\n): string;\n```\n\n----------------------------------------\n\nTITLE: Complete Keyframe Animation Example\nDESCRIPTION: Full implementation example showing entering and exiting animations with multiple properties and transformations\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/KeyframeAnimations.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function KeyframeAnimation() {\n  const [show, setShow] = useState(false);\n\n  const enteringAnimation = new Keyframe({\n    0: {\n      originX: 50,\n      transform: [{ rotate: '45deg' }],\n    },\n    30: {\n      originX: 10,\n      transform: [{ rotate: '-90deg' }],\n    },\n    100: {\n      originX: 0,\n      transform: [{ rotate: '0deg' }],\n      easing: Easing.quad,\n    },\n  }).duration(2000);\n\n  const exitingAnimation = new Keyframe({\n    0: {\n      opacity: 1,\n      transform: [{ skewX: '0deg' }],\n    },\n    30: {\n      opacity: 0.5,\n      transform: [{ skewX: '40deg' }],\n      easing: Easing.exp,\n    },\n    100: {\n      opacity: 0,\n      transform: [{ skewX: '-10deg' }],\n    },\n  }).duration(2000);\n\n  return (\n    <View style={{ flexDirection: 'column-reverse' }}>\n      <Button\n        title=\"animate\"\n        onPress={() => {\n          setShow((last) => !last);\n        }}\n      />\n      <View\n        style={{ height: 400, alignItems: 'center', justifyContent: 'center' }}>\n        {show && (\n          <Animated.View\n            entering={enteringAnimation}\n            exiting={exitingAnimation}\n            style={{\n              height: 100,\n              width: 200,\n              backgroundColor: 'blue',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          />\n        )}\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Linear Transition with Easing in React Native Reanimated\nDESCRIPTION: This code shows how to apply an easing function to a LinearTransition. It uses the easing modifier to define the animation curve.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nLinearTransition.easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Type definitions for useAnimatedStyle Hook\nDESCRIPTION: TypeScript type definitions for the useAnimatedStyle hook, showing the function signature and parameter types. It defines the style types and dependency list options.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedStyle.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype DefaultStyle = ViewStyle | ImageStyle | TextStyle;\ntype DependencyList = Array<unknown> | undefined;\n\nexport function useAnimatedStyle<Style extends DefaultStyle>(\n  updater: () => Style,\n  dependencies?: DependencyList | null\n): Style;\n```\n\n----------------------------------------\n\nTITLE: Using withTiming for Width Animation in React Native\nDESCRIPTION: This example demonstrates how to use withTiming to animate the width of a view in React Native. It uses useSharedValue for state, useAnimatedStyle for styling, and withTiming for smooth animation with custom duration and easing.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/animations/withTiming.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  Easing,\n} from 'react-native-reanimated';\n\nfunction App() {\n  const width = useSharedValue(50);\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(width.value, {\n        duration: 500,\n        easing: Easing.bezier(0.25, 0.1, 0.25, 1),\n      }),\n    };\n  });\n\n  return (\n    <View>\n      <Animated.View style={[styles.box, style]} />\n      <Button onPress={() => (width.value = Math.random() * 300)} title=\"Hey\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useAnimatedRef Hook in React Native Reanimated\nDESCRIPTION: This example demonstrates how to use the useAnimatedRef hook in a React component. It shows how to assign the ref to a View component, access the view tag on the UI thread using useDerivedValue, and access the current ref value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedRef.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Comp = () => {\n  const aref = useAnimatedRef();\n\n  useDerivedValue(() => {\n    const viewTag = aref();\n    // ...\n  });\n\n  const componentRef = aref.current;\n  // ...\n\n  return <View ref={aref} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Animation Fill Mode Example in React Native Reanimated\nDESCRIPTION: Demonstrates how to use animationFillMode with a simple translation animation. The example shows setting the fill mode to 'forwards' to persist the final animation state.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-fill-mode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        animationName: {\n          '100%': {\n            transform: [{ translateX: 100 }],\n          },\n        },\n        animationDuration: '300ms',\n        animationFillMode: 'forwards',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using dispatchCommand with React Native Reanimated\nDESCRIPTION: Example showing how to use dispatchCommand to focus a TextInput component using an animated ref and gesture detector.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/dispatchCommand.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dispatchCommand } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const gesture = Gesture.Tap().onStart(() => {\n    // highlight-next-line\n    dispatchCommand(animatedRef, 'focus');\n  });\n\n  return (\n    <>\n      <AnimatedTextInput ref={animatedRef} style={styles.input} />\n      <GestureDetector gesture={gesture}>\n        <Button title=\"Focus\" />\n      </GestureDetector>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useAnimatedReaction Implementation\nDESCRIPTION: Simple example showing how to use useAnimatedReaction to create dependent animations. It demonstrates monitoring one shared value and updating another based on a calculation with a maximum threshold.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedReaction.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = useSharedValue(0);\nconst x2 = useSharedValue(0);\n\nconst maxX2 = 80;\nuseAnimatedReaction(\n  () => {\n    return x.value / 1.5;\n  },\n  (data) => {\n    // data holds what was returned from the first worklet's execution\n    if (x2.value < maxX2) {\n      x2.value = data;\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Practical Example of withClamp in useAnimatedStyle\nDESCRIPTION: Example showing how to use withClamp within useAnimatedStyle to create a clamped width animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withClamp.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst clampedStyleWithDelay = useAnimatedStyle(() => {\n  return {\n    width: withClamp({ min: 0, max: 100 }, withSpring(randomWidth.value)),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing InteractiveExample with an Interactive Component in React Native Reanimated\nDESCRIPTION: Demonstrates how to create an interactive example with a live component that users can interact with. It imports both the component and its source code, and adds a label to guide user interaction.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/contributing.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport DecayTrain from '@site/src/examples/DecayTrain';\nimport DecayTrainSrc from '!!raw-loader!@site/src/examples/DecayTrain';\n\n<InteractiveExample\n  src={DecayTrainSrc}\n  component={<DecayTrain />}\n  label=\"Grab and drag the train\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useComposedEventHandler\nDESCRIPTION: Type definition showing the function signature for useComposedEventHandler hook. It accepts an array of event handlers and returns a composed handler that processes events with given context.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useComposedEventHandler.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useComposedEventHandler(\n  handlers: (EventHandlerProcessed<Event, Context> | null)[]\n): ComposedHandlerProcessed<Event, Context>;\n```\n\n----------------------------------------\n\nTITLE: Handling Tap Gestures with Reanimated 2 in React Native\nDESCRIPTION: This code demonstrates how to handle tap gestures using TapGestureHandler and useAnimatedGestureHandler hook from Reanimated 2. It updates a shared value based on the gesture state.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/events.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst EventsExample = () => {\n  const pressed = useSharedValue(false);\n  return (\n    <TapGestureHandler onGestureEvent={eventHandler}>\n      <Animated.View style={[styles.ball]} />\n    </TapGestureHandler>\n  );\n};\n\nconst eventHandler = useAnimatedGestureHandler({\n  onStart: (event, ctx) => {\n    pressed.value = true;\n  },\n  onEnd: (event, ctx) => {\n    pressed.value = false;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Flip Animations in React Native Reanimated\nDESCRIPTION: Illustrates the use of FlipInEasyX and FlipOutEasyX animations to create rotation-based effects for entering and exiting components.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FlipInEasyX, FlipOutEasyX } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={FlipInEasyX} exiting={FlipOutEasyX} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Worklet on the UI Thread in JavaScript\nDESCRIPTION: This example shows how to define a worklet and execute it on the UI thread using the runOnUI function. It demonstrates passing arguments to the worklet and asynchronous execution.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/worklets.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction someWorklet(greeting) {\n  'worklet';\n  console.log(greeting, 'From the UI thread');\n}\n\nfunction onPress() {\n  runOnUI(someWorklet)('Howdy');\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Shared Transition Animation Implementation\nDESCRIPTION: Implementation of custom shared transition animations using both regular and progress-based animations with spring effects.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/shared-element-transitions/overview.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SharedTransition } from 'react-native-reanimated';\n\nconst transition = SharedTransition.custom((values) => {\n  'worklet';\n  return {\n    height: withSpring(values.targetHeight),\n    width: withSpring(values.targetWidth),\n  };\n})\n  .progressAnimation((values, progress) => {\n    'worklet';\n    const getValue = (\n      progress: number,\n      target: number,\n      current: number\n    ): number => {\n      return progress * (target - current) + current;\n    };\n    return {\n      width: getValue(progress, values.targetWidth, values.currentWidth),\n      height: getValue(progress, values.targetHeight, values.currentHeight),\n    };\n  })\n  .defaultTransitionType(SharedTransitionType.ANIMATION);\n```\n\n----------------------------------------\n\nTITLE: Basic Animation Iteration Count Implementation - React Native\nDESCRIPTION: Demonstrates how to implement an infinite animation using animationIterationCount with a view that animates its width between 120 and 240 pixels.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-iteration-count.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        animationName: {\n          from: { width: 120 },\n          to: { width: 240 },\n        },\n        animationDuration: '1s',\n        animationIterationCount: 'infinite',\n        animationDirection: 'alternate',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using withSequence Animation Modifier\nDESCRIPTION: Example demonstrating how to chain animations together using withSequence. Shows how to run multiple timing animations in sequence.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/applying-modifiers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withSequence } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withSequence(withTiming(50), withTiming(0));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Time-based Flip Animation in React Native Reanimated\nDESCRIPTION: Example of customizing a Flip animation using time-based modifiers. It sets the duration to 500ms and uses the Easing.ease function for the animation curve.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nFlipOutYLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotate Animation Component\nDESCRIPTION: Example of implementing Rotate animation in a React Native component using RotateInDownLeft and RotateOutDownLeft animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RotateInDownLeft, RotateOutDownLeft } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.View entering={RotateInDownLeft} exiting={RotateOutDownLeft} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using cancelAnimation in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to import and use the cancelAnimation function to stop a running animation on a shared value in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/cancelAnimation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cancelAnimation } from 'react-native-reanimated';\n\nfunction App() {\n  const offset = useSharedValue(100);\n\n  const handleCancel = () => {\n    // highlight-next-line\n    cancelAnimation(offset);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Scroll with Interpolation in React Native Reanimated\nDESCRIPTION: Complete example demonstrating how to implement an animated scroll view with interpolated scaling based on scroll position using React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/interpolate.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, StyleSheet, Dimensions } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  useAnimatedScrollHandler,\n  useAnimatedStyle,\n  interpolate,\n} from 'react-native-reanimated';\n\nexport const HEADER_IMAGE_HEIGHT = Dimensions.get('window').width / 3;\n\nexport default function Test() {\n  const scrollY = useSharedValue(0);\n  const scrollHandler = useAnimatedScrollHandler({\n    onScroll: (e) => {\n      scrollY.value = e.contentOffset.y;\n    },\n  });\n  const animatedStyles = useAnimatedStyle(() => {\n    const scale = interpolate(scrollY.value, [-100, 0], [2, 1], {\n      extrapolateRight: Extrapolation.CLAMP,\n    });\n\n    return {\n      transform: [{ scale: scale }],\n    };\n  });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={[\n          {\n            position: 'absolute',\n            top: 20,\n            left: 0,\n            width: 20,\n            height: 20,\n            backgroundColor: 'blue',\n          },\n          animatedStyles,\n        ]}\n      />\n\n      <Animated.ScrollView\n        scrollEventThrottle={1}\n        style={StyleSheet.absoluteFill}\n        onScroll={scrollHandler}></Animated.ScrollView>\n    </View>\n  );\n```\n\n----------------------------------------\n\nTITLE: Layout Animation Modifiers Usage\nDESCRIPTION: Shows how to apply layout animation modifiers to customize animation behavior.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/glossary.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Animated.View entering={FadeOutLeft.duration(500).easing(Easing.ease)} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Scrolling with scrollTo in React Native Reanimated\nDESCRIPTION: This example demonstrates how to use the scrollTo function in combination with useAnimatedRef, useSharedValue, and useDerivedValue hooks to create a smooth scrolling experience in a React Native component. It includes a scrollable list of items with buttons to scroll up and down.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/nativeMethods/scrollTo.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { TouchableOpacity, View, Text, ScrollView } from 'react-native';\nimport {\n  useAnimatedRef,\n  useDerivedValue,\n  useSharedValue,\n  scrollTo,\n} from 'react-native-reanimated';\n\nconst ITEM_COUNT = 10;\nconst ITEM_SIZE = 100;\nconst ITEM_MARGIN = 10;\n\nexport const Comp = () => {\n  const aref = useAnimatedRef();\n  const scroll = useSharedValue(0);\n\n  useDerivedValue(() => {\n    scrollTo(aref, 0, scroll.value * (ITEM_SIZE + 2 * ITEM_MARGIN), true);\n  });\n\n  const items = Array.from(Array(ITEM_COUNT).keys());\n\n  const Incrementor = ({ increment }) => (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <TouchableOpacity\n        onPress={() => {\n          scroll.value =\n            scroll.value + increment > 0\n              ? scroll.value + increment\n              : ITEM_COUNT - 1 + increment;\n\n          if (scroll.value >= ITEM_COUNT - 2) scroll.value = 0;\n        }}>\n        <Text>{`Scroll ${Math.abs(increment)} ${\n          increment > 0 ? 'down' : 'up'\n        }`}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  return (\n    <View style={{ flex: 1, flexDirection: 'column' }}>\n      <Incrementor increment={1} />\n      <View\n        style={{ width: '100%', height: (ITEM_SIZE + 2 * ITEM_MARGIN) * 2 }}>\n        <ScrollView ref={aref} style={{ backgroundColor: 'orange' }}>\n          {items.map((_, i) => (\n            <View\n              key={i}\n              style={{\n                backgroundColor: 'white',\n                aspectRatio: 1,\n                width: ITEM_SIZE,\n                margin: ITEM_MARGIN,\n                justifyContent: 'center',\n                alignContent: 'center',\n              }}>\n              <Text style={{ textAlign: 'center' }}>{i}</Text>\n            </View>\n          ))}\n        </ScrollView>\n      </View>\n\n      <Incrementor increment={-1} />\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Keyframe Animation Modifiers Usage\nDESCRIPTION: Shows how to use various modifiers to customize keyframe animation behavior, including duration, delay, reduce motion settings, and completion callbacks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/keyframe-animations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nkeyframe\n  .duration(1000)\n  .delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Reanimated Hooks for Worklets in JavaScript\nDESCRIPTION: This example demonstrates how to use Reanimated hooks like useAnimatedStyle to create worklets without explicitly using the 'worklet' directive. The hook automatically creates a worklet that runs on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/worklets.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst style = useAnimatedStyle(() => {\n  console.log('Running on the UI thread');\n  return {\n    opacity: 0.5,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using Measure Function with useAnimatedRef in React Native Reanimated\nDESCRIPTION: This example demonstrates how to use the measure function in combination with useAnimatedRef and useDerivedValue. It measures a view and logs its dimensions and position, or warns if measurement fails.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/nativeMethods/measure.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Comp = () => {\n  const aref = useAnimatedRef();\n\n  useDerivedValue(() => {\n    const measured = measure(aref);\n    if (measured !== null) {\n      const { x, y, width, height, pageX, pageY } = measured;\n      console.log({ x, y, width, height, pageX, pageY });\n    } else {\n      console.warn('measure: could not measure view');\n    }\n  });\n\n  return <View ref={aref} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Stretch Animations in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use StretchInX and StretchOutY animations on an Animated.View component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StretchInX, StretchOutY } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={StretchInX} exiting={StretchOutY} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Animating SVG Circle Radius with React Native Reanimated\nDESCRIPTION: Shows how to animate an SVG Circle's radius using a shared value and createAnimatedComponent.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/animating-styles-and-props.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated';\nimport { Svg } from 'react-native-svg';\n\nfunction App() {\n  const r = useSharedValue(10);\n\n  return (\n    <Svg>\n      <AnimatedCircle cx=\"50\" cy=\"50\" r={r} fill=\"blue\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Data from Worklets in React Native Reanimated\nDESCRIPTION: Shows how worklets can return data within the same thread and how to use that data in other worklets.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/worklets.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction returningWorklet() {\n  'worklet';\n  return \"I'm back\"; // on the UI thread\n}\n\nfunction someWorklet() {\n  'worklet';\n  const what = returningWorklet(); // still on the UI thread\n  console.log('On the UI thread, other worklet says', what);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PinwheelIn Animation with Common Modifiers in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use common modifiers with the PinwheelIn animation. It includes setting delay, random delay, reduce motion, initial values, and a callback function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPinwheelIn.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({\n    transform: [{ scale: 0.8 }, { rotate: '3' }],\n  })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Fading Transition in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the FadingTransition component, which animates the opacity of a component during layout changes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FadingTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={FadingTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for withTiming in React Native Reanimated\nDESCRIPTION: Provides TypeScript type definitions for the withTiming function, including AnimatableValue types, configuration interface, and the ReduceMotion enum.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withTiming.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\ninterface WithTimingConfig {\n  duration?: number;\n  easing?: EasingFunction;\n  reduceMotion?: ReduceMotion;\n}\n\nfunction withTiming<T extends AnimatableValue>(\n  toValue: T,\n  config?: WithTimingConfig,\n  callback?: (finished?: boolean, current?: AnimatableValue) => void\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Animation Direction Example in React Native Reanimated\nDESCRIPTION: Demonstrates how to use animationDirection with an animated view that changes width. The animation alternates between running forwards and backwards infinitely.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-direction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        animationName: {\n          from: { width: 120 },\n          to: { width: 240 },\n        },\n        animationDuration: '1s',\n        animationIterationCount: 'infinite',\n        animationDirection: 'alternate',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic withDecay Usage in React Native Reanimated\nDESCRIPTION: Basic example showing how to import and use the withDecay animation function with a shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withDecay.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDecay } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDecay({ velocity: 1 });\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Variables in Worklet Scope in React Native Reanimated\nDESCRIPTION: Illustrates how worklets can access variables from their outer scope, acting as closures.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/worklets.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst width = 135.5;\n\nfunction otherWorklet() {\n  'worklet';\n  console.log('Captured width is', width);\n}\n```\n\n----------------------------------------\n\nTITLE: Using transitionProperty in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the transitionProperty in a React Native component with Animated.View. It sets the transitionProperty to 'width' and specifies a transitionDuration of 300 milliseconds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-property.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        // highlight-next-line\n        transitionProperty: 'width',\n        transitionDuration: 300,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exiting Animation in React Native Reanimated\nDESCRIPTION: A template for creating a custom exiting animation worklet function. It defines the structure for specifying animations, initial values, and an optional callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/CustomAnimations.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomExitingAnimation(values) {\n  'worklet';\n  const animations = {\n    // your animations\n  };\n  const initialValues = {\n    // initial values for animations\n  };\n  const callback = (finished: boolean) => {\n    // optional callback that will fire when layout animation ends\n  };\n  return {\n    initialValues,\n    animations,\n    callback,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using runOnJS with Gesture Handler\nDESCRIPTION: Shows how to run JavaScript thread functions from UI thread using runOnJS with Gesture Handler.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/worklets.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from 'expo-router';\nimport { Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  const tap = Gesture.Tap().onEnd(() => {\n    // i'm a worklet too!\n    runOnJS(router.back)();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared Value for Flip Card State in React Native Reanimated\nDESCRIPTION: This snippet shows how to create a shared value using the useSharedValue hook to store the flip state of the card. Shared values are used to prevent unnecessary re-renders in the animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/flip-card.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst rotate = useSharedValue(0);\n```\n\n----------------------------------------\n\nTITLE: Frame Animation Callback Implementation\nDESCRIPTION: Utilizes useFrameCallback hook to execute animation logic on each frame, calculating the offset for smooth scrolling animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/marquee.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseFrameCallback(() => {\n  'worklet';\n  offset.value = (offset.value + speed.value) % maxOffset;\n}, true);\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Participant Component with React Native Reanimated\nDESCRIPTION: This snippet defines a Participant component using React Native Reanimated. It applies LightSpeedInLeft for entry, LightSpeedOutRight for exit, and a spring layout animation. The component displays a name and a remove button.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/_step4.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  LightSpeedInLeft,\n  LightSpeedOutRight\n  Layout\n} from 'react-native-reanimated';\n...\nfunction Participant({\n  name,\n  onRemove,\n}: {\n  name: string;\n  onRemove: () => void;\n}) {\n  return (\n    <Animated.View\n      entering={LightSpeedInLeft}\n      exiting={LightSpeedOutRight}\n      layout={Layout.springify()}\n      style={[styles.participantView]}>\n      <Text>{name}</Text>\n      <Button title=\"Remove\" color=\"red\" onPress={onRemove} />\n    </Animated.View>\n  );\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Animating Rotation with Interpolate in React Native Reanimated\nDESCRIPTION: This example demonstrates how to use the interpolate function to animate a rotation. It maps an input range of 0 to 360 to an output range of 0 to 360 degrees.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/interpolate.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconcat(\n  interpolate(node, { inputRange: [0, 360], outputRange: [0, 360] }),\n  'deg'\n);\n```\n\n----------------------------------------\n\nTITLE: Interpolating Values with React Native Reanimated\nDESCRIPTION: The interpolate function maps an input value within a range to an output value within another range. It supports various extrapolation modes for handling values outside the specified range.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/interpolate.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterpolate(node, {\n  // Input range for the interpolation. Should be monotonically increasing.\n  inputRange: [nodeOrValue...],\n  // Output range for the interpolation, should be the same length as the input range.\n  outputRange: [nodeOrValue...],\n  // Sets the left and right extrapolate modes.\n  extrapolate?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n  // Set the left extrapolate mode, the behavior if the input is less than the first value in inputRange.\n  extrapolateLeft?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n  // Set the right extrapolate mode, the behavior if the input is greater than the last value in inputRange.\n  extrapolateRight?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n})\n\nExtrapolate.EXTEND; // Will extend the range linearly.\nExtrapolate.CLAMP; // Will clamp the input value to the range.\nExtrapolate.IDENTITY; // Will return the input value if the input value is out of range.\n```\n\n----------------------------------------\n\nTITLE: Applying Common Modifiers to Fade Animation in React Native Reanimated\nDESCRIPTION: Shows how to use common modifiers like delay, randomDelay, and callback with a FadeInDown animation in Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nFadeInDown.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateY: 420 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for createAnimatedComponent in React Native Reanimated\nDESCRIPTION: TypeScript type definitions for the createAnimatedComponent function, showing how it works with both class and function components, and returns components that can be animated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/createAnimatedComponent.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createAnimatedComponent<P extends object>(\n  component: ComponentClass<P>\n): ComponentClass<AnimateProps<P>>;\n\nfunction createAnimatedComponent<P extends object>(\n  component: FunctionComponent<P>\n): FunctionComponent<AnimateProps<P>>;\n```\n\n----------------------------------------\n\nTITLE: Applying Common Modifiers to Stretch Animations\nDESCRIPTION: This example shows how to apply common modifiers such as delay, randomDelay, reduceMotion, withInitialValues, and withCallback to a StretchInY animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nStretchInY.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ scaleY: 0.5 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Fade Animations\nDESCRIPTION: Illustrates the application of spring-based modifiers to fade animations, including damping, mass, and stiffness parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFadeInUp.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Animation Handler using useHandler in React Native\nDESCRIPTION: Example showing how to create a custom animated pager scroll handler using useHandler and useEvent hooks. The code demonstrates handling page scroll events and maintaining context between events.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useHandler.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEvent, useHandler } from 'react-native-reanimated';\n\nfunction useAnimatedPagerScrollHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer, useWeb } = useHandler(\n    handlers,\n    dependencies\n  );\n\n  return useEvent(\n    (event) => {\n      'worklet';\n      const { onPageScroll } = handlers;\n\n      if (onPageScroll && event.eventName.endsWith('onPageScroll')) {\n        onPageScroll(event, context);\n      }\n    },\n    ['onPageScroll'],\n    doDependenciesDiffer\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Common Animation Modifiers to LightSpeedInRight in React Native Reanimated\nDESCRIPTION: Example of applying common animation modifiers to a LightSpeedInRight animation. This snippet demonstrates setting delay, random delay, motion reduction, initial values, and callback functions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nLightSpeedInRight.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({\n    transform: [{ translateX: -100 }, { skewX: '-10deg' }],\n  })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Shared Values in Inline Styling in React Native Reanimated\nDESCRIPTION: Shows how to directly use shared values in component styling without useAnimatedStyle. This approach allows for simpler animation setup for basic cases.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const width = useSharedValue(100);\n\n  return <Animated.View style={{ width }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of withClamp with withSpring in React Native Reanimated\nDESCRIPTION: A simple implementation showing how to import and use withClamp to limit a spring animation within a range.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withClamp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withClamp } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withClamp({ min: -1, max: 1 }, withSpring(0));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting transitionProperty for Multiple Style Properties\nDESCRIPTION: This example demonstrates how to set the transitionProperty for multiple style properties using an array, specifically for borderWidth and borderColor.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-property.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionProperty: ['borderWidth', 'borderColor'];\n```\n\n----------------------------------------\n\nTITLE: Using setNativeProps with React Native Reanimated\nDESCRIPTION: This example demonstrates how to use setNativeProps to imperatively update a TextInput component's text property when a tap gesture is detected. The function requires an animated ref connected to the component being updated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/setNativeProps.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { setNativeProps } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const tap = Gesture.Tap().onEnd(() => {\n    // highlight-start\n    setNativeProps(animatedRef, { text: '' });\n    // highlight-end\n  });\n\n  return <TextInput ref={animatedRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PinwheelIn Animation with Spring-based Modifiers in React Native Reanimated\nDESCRIPTION: This snippet shows how to configure the PinwheelIn animation using spring-based modifiers. It enables spring animation and sets various spring properties such as damping, mass, stiffness, and thresholds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPinwheelIn.springify()\n  .damping(2)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for transitionDelay in React Native Reanimated\nDESCRIPTION: This snippet shows the TypeScript type definitions for the transitionDelay property, including the TimeUnit type and CSSTransitionDelay type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-delay.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TimeUnit = `${number}s` | `${number}ms` | number;\n\ntype CSSTransitionDelay = TimeUnit | TimeUnit[];\n```\n\n----------------------------------------\n\nTITLE: Running Worklet on UI Thread\nDESCRIPTION: Shows how to manually execute a worklet on the UI thread using runOnUI.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/worklets.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myWorklet() {\n  'worklet';\n  console.log('Hello from the UI thread');\n}\n\nfunction onPress() {\n  runOnUI(myWorklet)();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reduced Motion in Basic Animations with React Native Reanimated\nDESCRIPTION: This example demonstrates how to configure basic animations with different reduced motion settings. It shows how to apply the System setting to both direct animations and delayed animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/accessibility.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv1.value = withTiming(0, { reduceMotion: ReduceMotion.System });\n  sv2.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.System\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Reduced Motion to Layout Animations in React Native Reanimated\nDESCRIPTION: This example shows how to configure layout animations with reduced motion settings. It demonstrates setting the System setting for a BounceIn entrance animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/accessibility.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BounceIn } from 'react-native-reanimated';\n\nfunction App() {\n  const entering = BounceIn.reduceMotion(ReduceMotion.System);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Participant Component with React Native Reanimated\nDESCRIPTION: This snippet defines a Participant component using React Native Reanimated. It applies a LightSpeedInLeft entering animation and uses Layout.springify() for dynamic layout. The component renders the participant's name and a remove button.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/_step3.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  LightSpeedInLeft,\n  Layout\n} from 'react-native-reanimated';\n...\nfunction Participant({\n  name,\n  onRemove,\n}: {\n  name: string;\n  onRemove: () => void;\n}) {\n  return (\n    <Animated.View\n      entering={LightSpeedInLeft}\n      layout={Layout.springify()}\n      style={[styles.participantView]}>\n      <Text>{name}</Text>\n      <Button title=\"Remove\" color=\"red\" onPress={onRemove} />\n    </Animated.View>\n  );\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for withSequence in React Native Reanimated\nDESCRIPTION: TypeScript type definitions for the withSequence function, including the AnimatableValue type and ReduceMotion enum which determine how animations respond to accessibility settings.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withSequence.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\nfunction withSequence<T extends AnimatableValue>(\n  reduceMotion?: ReduceMotion,\n  ...animations: [T, ...T[]]\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Basic withDecay Usage in React Native Reanimated\nDESCRIPTION: Simple example showing how to use withDecay to create a decay animation with velocity\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withDecay.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDecay } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDecay({ velocity: 1 });\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Fade Animation in React Native Reanimated\nDESCRIPTION: Demonstrates how to apply spring physics to a FadeInUp animation using Reanimated modifiers.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFadeInUp.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Type definitions for useScrollViewOffset hook\nDESCRIPTION: Type definitions for the useScrollViewOffset hook, showing its function signature. It accepts an animated ref connected to a ScrollView and an optional initial shared value, and returns a shared value containing the scroll offset.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/scroll/useScrollViewOffset.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useScrollViewOffset(\n  animatedRef: AnimatedRef<AnimatedScrollView>,\n  initialRef?: SharedValue<number>\n): SharedValue<number>;\n```\n\n----------------------------------------\n\nTITLE: Configuring PinwheelOut Animation with Time-based Modifiers in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to configure the PinwheelOut animation using time-based modifiers. It sets the duration to 500 milliseconds and uses the Easing.ease function for the animation curve.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPinwheelOut.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Animation Modifiers in React Native Reanimated\nDESCRIPTION: Example of how to configure spring-based animation modifiers for a RotateInUpLeft animation, including parameters like damping, mass, stiffness, and other spring characteristics. These modifiers use the withSpring function to create physics-based animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nRotateInUpLeft.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Basic useAnimatedProps Usage in React Native\nDESCRIPTION: Basic example showing how to use useAnimatedProps hook to animate opacity of a component based on a shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedProps.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAnimatedProps } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      opacity: sv.value ? 1 : 0,\n    };\n  });\n\n  return <Animated.View animatedProps={animatedProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useAnimatedProps\nDESCRIPTION: Provides the TypeScript type definition for the useAnimatedProps hook, including its parameters and return type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useAnimatedProps.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAnimatedProps<T extends {}>(\n  updater: () => Partial<T>,\n  dependencies?: DependencyList | null,\n  adapters?: PropsAdapterFunction | PropsAdapterFunction[] | null\n): Partial<T>;\n```\n\n----------------------------------------\n\nTITLE: Using useDerivedValue with Dependencies in React Native\nDESCRIPTION: This snippet demonstrates how to use the useDerivedValue hook with dependencies in a React Native component. It shows how the derived value is calculated based on a shared value and component state.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useDerivedValue.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  const [state, setState] = useState(0);\n  const sv = useSharedValue(state);\n\n  const derived = useDerivedValue(() => {\n    return sv.value * state;\n  }, dependencies);\n  //...\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using useScrollViewOffset hook with React Native Reanimated\nDESCRIPTION: Basic example showing how to use the useScrollViewOffset hook to track a ScrollView's offset. The hook returns a shared value containing the current scroll offset, which can be used in animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/scroll/useScrollViewOffset.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useScrollViewOffset } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n  // highlight-next-line\n  const scrollOffset = useScrollViewOffset(animatedRef);\n  return (\n    <Animated.ScrollView ref={animatedRef}>{/* ... */}</Animated.ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using animationDelay in React Native Reanimated\nDESCRIPTION: Basic example of setting animation delay in milliseconds on an Animated.View component. The animation will wait 500ms before starting.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-delay.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        animationName: {\n          '100%': {\n            transform: [{ rotateZ: '180deg' }],\n          },\n        },\n        animationDuration: '100ms',\n        // highlight-next-line\n        animationDelay: 500,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Modifiers for Stretch Animations\nDESCRIPTION: Demonstrates the use of spring-based modifiers on a StretchInX animation. These modifiers allow fine-tuning of the spring animation behavior.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nStretchInX.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Type Definition for runOnRuntime in React Native Reanimated\nDESCRIPTION: This snippet provides the TypeScript type definition for the runOnRuntime function. It specifies the function signature, including the generic types for arguments and return value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/threading/runOnRuntime.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runOnRuntime<A extends any[], R>(\n  workletRuntime: WorkletRuntime,\n  fn: (...args: A) => R\n): (...args: Parameters<typeof fn>) => void;\n```\n\n----------------------------------------\n\nTITLE: Creating the FloatingActionButton Component\nDESCRIPTION: Defines a reusable FloatingActionButton component that manages button styles, content, and animations based on props like buttonLetter, index, and isExpanded.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/floating-action-button.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction FloatingActionButton({ buttonLetter, index, isExpanded }) {\n  const expandedPosition = 70 + index * 60;\n\n  const animatedPositionStyle = useAnimatedStyle(() => {\n    const position = withDelay(\n      index * 100,\n      withTiming(isExpanded.value ? expandedPosition : 10, {\n        duration: 150,\n      })\n    );\n\n    const opacity = withDelay(\n      isExpanded.value ? index * 100 : 0,\n      withTiming(isExpanded.value ? 1 : 0, {\n        duration: 150,\n      })\n    );\n\n    return {\n      bottom: position,\n      opacity: opacity,\n    };\n  });\n\n  return (\n    <Animated.View style={[styles.floatingButton, animatedPositionStyle]}>\n      <Text style={styles.secondaryButtonText}>{buttonLetter}</Text>\n    </Animated.View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Native Reanimated Web Support\nDESCRIPTION: Add the necessary plugins to the babel.config.js file to enable React Native Reanimated for web support. This includes the export namespace plugin and the Reanimated Babel plugin.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/web-support.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  module.exports = {\n      presets: [\n        ... // don't add it here :)\n      ],\n      plugins: [\n          ...\n          '@babel/plugin-proposal-export-namespace-from',\n          'react-native-reanimated/plugin',\n      ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Using cond Function in React Native Reanimated\nDESCRIPTION: The 'cond' function evaluates a condition and returns the result of either the 'if' or 'else' node. It takes a condition node, an 'if' node, and an optional 'else' node. If the condition is truthy, it evaluates and returns the 'if' node's value; otherwise, it evaluates and returns the 'else' node's value (if provided).\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/cond.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncond(conditionNode, ifNode, [elseNode]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotation-based Animation with useAnimatedSensor\nDESCRIPTION: Example demonstrating how to use useAnimatedSensor to create an animation based on device rotation. The component renders a view that changes size based on device orientation using yaw and pitch values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedSensor.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UseAnimatedSensorExample() {\n  const animatedSensor = useAnimatedSensor(SensorType.ROTATION, {\n    interval: 10,\n  }); // <- initialization\n  const style = useAnimatedStyle(() => {\n    const yaw = Math.abs(animatedSensor.sensor.value.yaw);\n    const pitch = Math.abs(animatedSensor.sensor.value.pitch);\n    return {\n      height: withTiming(yaw * 200 + 20, { duration: 100 }), // <- usage\n      width: withTiming(pitch * 200 + 20, { duration: 100 }), // <- usage\n    };\n  });\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Animated.View style={[{ backgroundColor: 'black' }, style]} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated Pager Component in React Native\nDESCRIPTION: This snippet demonstrates how to create an animated pager component using React Native Reanimated. It sets up a PagerView with two pages and initializes a shared value for scroll position.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/custom_events.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst AnimatedPagerView = Animated.createAnimatedComponent(PagerView);\n\nconst PagerExample = () => {\n  const scrollPosition = useSharedValue(0);\n  return (\n    <AnimatedPagerView initialPage={0} onPageScroll={scrollHandler}>\n      <View collapsable={false}>\n        <Text>{`Page ${1}`}</Text>\n      </View>\n      <View collapsable={false}>\n        <Text>{`Page ${2}`}</Text>\n      </View>\n    </AnimatedPagerView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Color Interpolation in React Native Animated Component\nDESCRIPTION: Practical example showing how to use interpolateColors to animate a view's background color between red and blue based on a node value from 0 to 1.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/interpolateColors.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = Animated.interpolateColors(node, {\n  inputRange: [0, 1],\n  outputColorRange: ['red', 'blue'],\n});\n\nreturn <Animated.View style={{ backgroundColor: color }} />;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for SharedValue and makeMutable in TypeScript\nDESCRIPTION: Provides TypeScript type definitions for the SharedValue interface and the makeMutable function. The SharedValue interface includes methods for getting, setting, and modifying the value, as well as adding and removing listeners.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/makeMutable.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SharedValue<Value = unknown> {\n  value: Value;\n  get(): Value;\n  set(value: Value | ((value: Value) => Value)): void;\n  addListener: (listenerID: number, listener: (value: Value) => void) => void;\n  removeListener: (listenerID: number) => void;\n  modify: (\n    modifier?: <T extends Value>(value: T) => T,\n    forceUpdate?: boolean\n  ) => void;\n}\n\nfunction makeMutable<Value>(initial: Value): SharedValue<Value>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Roll Animations in React Native Reanimated\nDESCRIPTION: This snippet shows how to use RollInRight and RollOutLeft animations in a React Native component. It applies these animations to an Animated.View for entering and exiting effects.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RollInRight, RollOutLeft } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={RollInRight} exiting={RollOutLeft} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Common Modifiers to Stretch Animations\nDESCRIPTION: Shows the usage of common modifiers like delay, randomDelay, reduceMotion, withInitialValues, and withCallback on a StretchInY animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nStretchInY.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ scaleY: 0.5 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Animation with useAnimatedKeyboard in React Native\nDESCRIPTION: Example showing how to use useAnimatedKeyboard hook to create an animation that moves a TextInput component based on keyboard position. The component uses useAnimatedStyle to translate the view vertically by the negative value of keyboard height.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedKeyboard.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction AnimatedKeyboardExample() {\n  const keyboard = useAnimatedKeyboard();\n  const translateStyle = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateY: -keyboard.height.value }],\n    };\n  });\n\n  return (\n    <ScrollView\n      contentContainerStyle={{\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}>\n      <Animated.View style={translateStyle}>\n        <TextInput />\n      </Animated.View>\n    </ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: WorkletRuntime Type Definitions\nDESCRIPTION: TypeScript type definitions for the WorkletRuntime interface and createWorkletRuntime function, including runtime name and optional initializer parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/threading/createWorkletRuntime.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype WorkletRuntime = {\n  __hostObjectWorkletRuntime: never;\n  readonly name: string;\n};\n\nfunction createWorkletRuntime(\n  name: string,\n  initializer?: __ComplexWorkletFunction<[], void>\n): WorkletRuntime;\n```\n\n----------------------------------------\n\nTITLE: Configuring Curved Transition in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to configure a Curved Transition using various modifiers. It sets duration, delay, easing functions for different properties, reduce motion setting, and a callback function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nCurvedTransition.duration(1000)\n  .delay(500)\n  .easingX(Easing.in(Easing.exp))\n  .easingY(Easing.out(Easing.quad))\n  .easingWidth(Easing.in(Easing.ease))\n  .easingHeight(Easing.out(Easing.exp))\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Multiplying Animated Nodes or Values in React Native Reanimated\nDESCRIPTION: The multiply function takes two or more animated nodes or values as arguments. When evaluated, it returns the result of multiplying their values in the exact order they were provided. This function is useful for creating complex animations that involve scaling or combining multiple animated values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/multiply.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmultiply(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\n----------------------------------------\n\nTITLE: SectionCards Component with Scroll Event Handling\nDESCRIPTION: Manages rendering of individual sections and their content. Uses onScroll to track the currently visible section and update the shared visibleIndex value accordingly.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/section-list.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SectionCards({ sections, visibleIndex, sectionCardsRef, tableOfContentsRef }) {\n  const renderItem = useCallback(\n    ({ item }) => {\n      return <SectionCard item={item} />;\n    },\n    []\n  );\n\n  const onScroll = useAnimatedScrollHandler(\n    debounce((event) => {\n      'worklet';\n      const y = event.contentOffset.y + 100;\n\n      let minDistance = Number.MAX_SAFE_INTEGER;\n      let closestIndex = 0;\n\n      for (let i = 0; i < sections.length; i++) {\n        const distance = Math.abs(sectionPositions[i] - y);\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestIndex = i;\n        }\n      }\n\n      visibleIndex.value = closestIndex;\n    }, 16)\n  );\n\n  return (\n    <FlashList\n      data={sections}\n      ref={sectionCardsRef}\n      onScroll={onScroll}\n      scrollEventThrottle={16}\n      renderItem={renderItem}\n      estimatedItemSize={200}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Animation with FlipInXUp in React Native Reanimated\nDESCRIPTION: Example of applying spring-based modifiers to a FlipInXUp animation. This snippet shows how to configure various spring parameters such as damping, mass, stiffness, and other related properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nFlipInXUp.springify()\n  .damping(2)\n  .mass(3)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Using Worklet Runtime in C++ with React Native Reanimated\nDESCRIPTION: Example of how to interact with a worklet runtime in C++ using JSI (JavaScript Interface). This shows extracting a runtime, accessing its JSI runtime, and running a worklet with arguments.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/createWorkletRuntime.mdx#2025-04-16_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nauto runtime = reanimated::extractWorkletRuntime(rt, runtimeValue);\n\njsi::Runtime &rt = runtime->getJSIRuntime();\n\nauto worklet = reanimated::extractShareableOrThrow<reanimated::ShareableWorklet>(rt, workletValue);\n\nruntime->runGuarded(worklet, ...args);\n```\n\n----------------------------------------\n\nTITLE: Using Clamp Function in React Native Reanimated\nDESCRIPTION: Demonstrates basic usage of the clamp function to limit a value within a range. The function takes a value and constrains it between minimum and maximum bounds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/utilities/clamp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { clamp } from 'react-native-reanimated';\n\nfunction App() {\n  const result = clamp(sv.value, 0, 100);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for React Native Reanimated\nDESCRIPTION: Example webpack configuration file to support React Native Reanimated in a webpack application. It includes necessary plugins, loaders, and resolve options.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/web-support.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: ['babel-polyfill', './index.js'],\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: './index.html',\n    }),\n    new webpack.EnvironmentPlugin({ JEST_WORKER_ID: null }),\n    new webpack.DefinePlugin({ process: { env: {} } }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              '@babel/preset-react',\n              { plugins: ['@babel/plugin-proposal-class-properties'] },\n            ],\n          },\n        },\n      },\n    ],\n  },\n  resolve: {\n    alias: { 'react-native$': 'react-native-web' },\n    extensions: ['.web.js', '.js'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using runOnRuntime with React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use runOnRuntime to execute a workletized function on a separate thread. It shows the import statement, creation of a worklet runtime, and usage of runOnRuntime within a React component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/threading/runOnRuntime.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWorkletRuntime, runOnRuntime } from 'react-native-reanimated';\n\nconst workletRuntime = createWorkletRuntime('background');\n\nfunction App() {\n  // E.g. in event handler or in an effect\n  // highlight-next-line\n  runOnRuntime(workletRuntime, (greeting) => {\n    console.log(`${greeting} from a separate thread`);\n    // highlight-next-line\n  })('Howdy');\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TableOfContents Component with Reanimated Styling\nDESCRIPTION: Renders a list of section names as a table of contents. Uses shared values and animated styles to highlight the currently selected section.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/section-list.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TableOfContents({\n  data,\n  visibleIndex,\n  sectionCardsRef,\n  tableOfContentsRef,\n  selectedItem,\n}) {\n  return (\n    <FlashList\n      ref={tableOfContentsRef}\n      showsVerticalScrollIndicator={false}\n      data={data}\n      renderItem={({ item, index }) => {\n        return (\n          <TableItem\n            label={item.section}\n            index={index}\n            visibleIndex={visibleIndex}\n            sectionCardsRef={sectionCardsRef}\n            selectedItem={selectedItem}\n          />\n        );\n      }}\n      estimatedItemSize={25}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LinearTransition with Easing Modifiers\nDESCRIPTION: Shows how to use the easing modifier with LinearTransition to customize the animation curve. This modifier relies on the withTiming function and has no effect when springify() is used.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nLinearTransition.easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Attributes Handling with PanGestureHandler\nDESCRIPTION: Example of handling multiple event attributes (translationX, translationY, and state) from a PanGestureHandler. The code shows how to update position values and handle gesture end state using conditional blocks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/event.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<PanGestureHandler\n  onGestureEvent={event([\n    {\n      nativeEvent: ({ translationX: x, translationY: y, state }) =>\n        block([\n          set(this._transX, add(x, offsetX)),\n          set(this._transY, add(y, offsetY)),\n          cond(eq(state, State.END), [\n            set(this.offsetX, add(this.offsetX, x)),\n            set(this.offsetY, add(this.offsetY, y)),\n          ]),\n        ]),\n    },\n  ])}>\n  <Animated.View\n    style={{\n      transform: [{ translateX: this._transX, translateY: this._transY }],\n    }}\n  />\n</PanGestureHandler>\n```\n\n----------------------------------------\n\nTITLE: Customizing Exiting Animation in React Native Reanimated\nDESCRIPTION: Shows how to customize an exiting animation by adding modifiers such as duration and other specific options. This example sets the duration to 3000 milliseconds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/ExitAnimations.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<AnimatedComponent exiting={AnimationName.duration(3000).otherModifier()} >\n```\n\n----------------------------------------\n\nTITLE: Calling React Native Thread Methods from Worklets in JavaScript\nDESCRIPTION: This snippet shows how worklets can call methods from the React Native thread using runOnJS. It demonstrates passing arguments back to the React Native thread and executing callbacks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/worklets.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction callback(text) {\n  console.log('Running on the RN thread', text);\n}\n\nfunction someWorklet() {\n  'worklet';\n  console.log(\"I'm on UI but can call methods from the RN thread\");\n  runOnJS(callback)('can pass arguments too');\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Common Modifiers to Rotate Animation in JavaScript\nDESCRIPTION: Demonstrates the application of common modifiers to a RotateInDownLeft animation, including delay, randomDelay, reduceMotion, withInitialValues, and withCallback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nRotateInDownLeft.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({\n    transform: [{ rotate: '-90deg' }, { translateX: 100 }, { translateY: 100 }],\n  })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Applying Time-based Modifiers to Zoom Animations\nDESCRIPTION: Shows how to use time-based modifiers like duration and easing on a ZoomOutLeft animation. These modifiers rely on the withTiming function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nZoomOutLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated TextInput Component with React Native Reanimated\nDESCRIPTION: This example demonstrates how to import Animated from react-native-reanimated and create an animated version of the TextInput component from React Native.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/createAnimatedComponent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated from 'react-native-reanimated';\nimport { TextInput } from 'react-native';\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Animated Handler with useHandler Hook\nDESCRIPTION: Example showing how to implement a custom animated pager scroll handler using useHandler and useEvent hooks. The handler processes page scroll events and maintains a context between event occurrences.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useHandler.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEvent, useHandler } from 'react-native-reanimated';\n\nfunction useAnimatedPagerScrollHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer, useWeb } = useHandler(\n    handlers,\n    dependencies\n  );\n\n  return useEvent(\n    (event) => {\n      'worklet';\n      const { onPageScroll } = handlers;\n\n      if (onPageScroll && event.eventName.endsWith('onPageScroll')) {\n        onPageScroll(event, context);\n      }\n    },\n    ['onPageScroll'],\n    doDependenciesDiffer\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for withDelay in React Native Reanimated\nDESCRIPTION: Type definitions for the withDelay function, specifying its parameters and return type. It includes the AnimatableValue type and ReduceMotion enum that defines how animations respond to device accessibility settings.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withDelay.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\nfunction withDelay<T extends AnimatableValue>(\n  delayMs: number,\n  delayedAnimation: T,\n  reduceMotion?: ReduceMotion\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Switch Dimensions on Layout in React Native\nDESCRIPTION: Updates the shared values for width and height during the onLayout event of the Switch element, ensuring accurate dimensions for animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/switch.md#2025-04-16_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nonLayout={({ nativeEvent: { layout } }) => {\n  width.value = layout.width;\n  height.value = layout.height;\n}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Pinwheel Animation\nDESCRIPTION: Example of configuring a spring-based Pinwheel animation with custom spring parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPinwheelIn.springify()\n  .damping(2)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Handling null measurements in React Native Reanimated\nDESCRIPTION: Shows how to properly handle cases where the 'measure' function might return null, such as when the ref hasn't yet attached to the view.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/measure.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst animatedRef = useAnimatedRef();\n\nconst handlePress = () => {\n  runOnUI(() => {\n    const measurement = measure(animatedRef);\n\n    // highlight-start\n    if (measurement === null) {\n      return;\n    }\n    // highlight-end\n    // ...\n  })();\n};\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedScrollHandler in React Native with Reanimated\nDESCRIPTION: This snippet demonstrates how to use the useAnimatedScrollHandler hook to create a scroll handler for a React Native Animated.ScrollView component. It updates a shared value with the current scroll position.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/scroll/useAnimatedScrollHandler.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAnimatedScrollHandler } from 'react-native-reanimated';\n\nfunction App() {\n  const offsetY = useSharedValue(0);\n\n  const scrollHandler = useAnimatedScrollHandler((event) => {\n    offsetY.value = event.contentOffset.y;\n  });\n\n  // ...\n\n  return <Animated.ScrollView onScroll={scrollHandler} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Animated Style Definition with useAnimatedStyle\nDESCRIPTION: Uses useAnimatedStyle to define dynamic visual effects based on shared values, applying conditional styling to indicate the currently selected section.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/section-list.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      fontWeight: visibleIndex.value === index ? '600' : '400',\n    };\n```\n\n----------------------------------------\n\nTITLE: Using createAnimatedPropAdapter with Custom Component in React Native Reanimated\nDESCRIPTION: Example showing how to use createAnimatedPropAdapter to handle prop name differences between API and implementation layers. Demonstrates adapting a 'helloSize' prop to 'fontSize' for a custom Text component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedProps.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Hello extends React.Component {\n  render() {\n    return <Text style={{ fontSize: this.props.helloSize }}>Hello</Text>;\n  }\n}\n\nconst AnimatedHello = Animated.createAnimatedComponent(Hello);\n\nconst adapter = createAnimatedPropAdapter(\n  (props) => {\n    if (Object.keys(props).includes('helloSize')) {\n      props.fontSize = props.helloSize;\n      delete props.helloSize;\n    }\n  },\n  ['fontSize']\n);\n\nexport default function Component() {\n  const sv = useSharedValue(14);\n  const helloProps = useAnimatedProps(\n    () => ({ helloSize: sv.value }),\n    null,\n    adapter\n  );\n\n  return <AnimatedHello animatedProps={helloProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Values with useSharedValue\nDESCRIPTION: Initializes shared values using the useSharedValue hook to manage state across components, specifically tracking the currently selected section and its visibility index.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/section-list.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  const selectedItem = useSharedValue(0);\n  const visibleIndex = useSharedValue(0);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Worklet Execution in Chrome Debugger\nDESCRIPTION: This code snippet illustrates how worklets behave differently when debugged using the Chrome Debugger. It shows that the _WORKLET flag is false, indicating execution on the JS thread rather than the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/debugging-worklets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction runWorklet() {\n  'worklet';\n  console.log('worklet:', _WORKLET);\n}\nrunOnUI(runWorklet)();\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Animation with LightSpeedInLeft in React Native Reanimated\nDESCRIPTION: Example of applying spring-based modifiers to a LightSpeedInLeft animation. This snippet shows how to configure various spring parameters such as damping, mass, stiffness, and other related properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nLightSpeedInLeft.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Configuring FadingTransition with Modifiers\nDESCRIPTION: Shows how to customize FadingTransition using modifiers that control duration, delay, reduced motion handling, and completion callbacks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nFadingTransition.duration(1000)\n  .delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Component Mount Timing with useAnimatedRef\nDESCRIPTION: Illustrates the correct timing for accessing the ref.current value, showing both incorrect early access and correct access after component mount.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useAnimatedRef.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  console.log(animatedRef.current); // 🚩 Returns null\n\n  useEffect(() => {\n    console.log(animatedRef.current); // ✅ Returns the component\n  }, []);\n\n  return <View ref={animatedRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Modifiers for Zoom Animations\nDESCRIPTION: This snippet demonstrates how to apply spring-based modifiers to a ZoomInRotate animation, including damping, mass, stiffness, and other spring properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nZoomInRotate.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(0.1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-based Slide Animation Modifiers in React Native Reanimated\nDESCRIPTION: Example showing how to configure time-based modifiers for a SlideOutLeft animation. This includes setting the duration and easing function that control the timing behavior of the animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nSlideOutLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-based Animation with LightSpeedOutLeft in React Native Reanimated\nDESCRIPTION: Example of applying time-based modifiers to a LightSpeedOutLeft animation. This snippet demonstrates setting the duration and easing function for the animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nLightSpeedOutLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Type Definition for useComposedEventHandler in React Native Reanimated\nDESCRIPTION: TypeScript type definition for the useComposedEventHandler hook, showing that it accepts an array of event handlers and returns a composed handler that can process events with the specified context.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useComposedEventHandler.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useComposedEventHandler(\n  handlers: (EventHandlerProcessed<Event, Context> | null)[]\n): ComposedHandlerProcessed<Event, Context>;\n```\n\n----------------------------------------\n\nTITLE: Setting transitionProperty for a Single Style Property\nDESCRIPTION: This example shows how to set the transitionProperty for a single style property, specifically the backgroundColor.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-property.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionProperty: 'backgroundColor';\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Value in React Native Reanimated\nDESCRIPTION: Takes a node as input and returns its absolute value. This function evaluates the given node and returns the positive magnitude of the node's value, removing any negative sign.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/abs.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nabs(node);\n```\n\n----------------------------------------\n\nTITLE: ScrollView Offset Hook Type Definition\nDESCRIPTION: TypeScript type definition for the useScrollViewOffset hook showing its parameters and return type. The hook accepts an animated ref and optional initial shared value, returning a shared value containing the scroll offset.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/scroll/useScrollViewOffset.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useScrollViewOffset(\n  animatedRef: AnimatedRef<AnimatedScrollView>,\n  initialRef?: SharedValue<number>\n): SharedValue<number>;\n```\n\n----------------------------------------\n\nTITLE: Example of Custom Exiting Animation in React Native Reanimated\nDESCRIPTION: An example implementation of a custom exiting animation for a card view. It demonstrates how to create animations for origin and opacity properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/CustomAnimations.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CardView() {\n  const exiting = (values) => {\n    'worklet';\n    const animations = {\n      originX: withTiming(width, { duration: 3000 }),\n      opacity: withTiming(0.5, { duration: 2000 }),\n    };\n    const initialValues = {\n      originX: values.currentOriginX,\n      opacity: 1,\n    };\n    return {\n      initialValues,\n      animations,\n    };\n  };\n\n  return (\n    <Animated.View style={[styles.animatedView]} exiting={exiting}>\n      <Text> Card Example </Text>\n    </Animated.View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RollOutLeft Animation with Time-based Modifiers in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to configure the RollOutLeft animation using time-based modifiers. It sets the duration to 500 milliseconds and uses the Easing.ease function for the animation curve.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nRollOutLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Simple Repeating Rotation Animation\nDESCRIPTION: Implements a basic repeating rotation animation using withRepeat and withTiming modifiers. Creates a simple wobble effect between 0 and 10 degrees.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/animations.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrotation.value = withRepeat(withTiming(10), 6, true);\n```\n\n----------------------------------------\n\nTITLE: Using Transition.Together in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the Transition.Together component to run multiple transitions in parallel when the animation starts.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/transitions.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Transition.Together>\n```\n\n----------------------------------------\n\nTITLE: dispatchCommand TypeScript Definition\nDESCRIPTION: Type definition for the dispatchCommand function, showing its parameters and return type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/dispatchCommand.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dispatchCommand<T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  commandName: string,\n  args?: unknown[]\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared Values for Switch Dimensions in React Native Reanimated\nDESCRIPTION: Uses the useSharedValue hook to store the dimensions of the Switch element, allowing for precise calculation of position changes during animation without causing unnecessary re-renders.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/switch.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst width = useSharedValue(0);\nconst height = useSharedValue(0);\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for interpolateColor Function in TypeScript\nDESCRIPTION: Provides TypeScript type definitions for the interpolateColor function and its options. Includes types for the function parameters and the InterpolationOptions object.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/interpolateColor.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nfunction interpolateColor(\n  value: number,\n  input: number[],\n  output: string[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Animation Function in React Native Reanimated\nDESCRIPTION: This snippet shows the basic structure of a custom animation function in React Native Reanimated. It defines the animations, initial values, and an optional callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/custom-animations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomAnimation(values) {\n  'worklet';\n  const animations = {\n    // your animations\n  };\n  const initialValues = {\n    // initial values for animations\n  };\n  const callback = (finished: boolean) => {\n    // optional callback that will fire when layout animation ends\n  };\n  return {\n    initialValues,\n    animations,\n    callback,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Transition Style\nDESCRIPTION: Example of applying a custom transition style to a shared view component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/shared-element-transitions/overview.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  sharedTransitionTag=\"reanimatedTransition\"\n  sharedTransitionStyle={transition}\n  style={{ backgroundColor: 'blue', width: 200, height: 100 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotate Animations in React Native Reanimated\nDESCRIPTION: This snippet shows how to use RotateInDownLeft and RotateOutDownLeft animations in a React Native component. It applies these animations to an Animated.View for entering and exiting effects.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RotateInDownLeft, RotateOutDownLeft } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.View entering={RotateInDownLeft} exiting={RotateOutDownLeft} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-based Fade Animation in React Native Reanimated\nDESCRIPTION: Shows how to customize a FadeOutLeft animation with duration and easing using Reanimated modifiers.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFadeOutLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CurvedTransition in React Native Reanimated\nDESCRIPTION: Demonstrates how to import and use CurvedTransition which enables animation of all parameters (X, Y, width, height) with different easing for each, creating a curved movement path.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CurvedTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={CurvedTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useAnimatedRef Implementation in React Native\nDESCRIPTION: Demonstrates the basic usage of useAnimatedRef hook to create a reference to an Animated.View component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useAnimatedRef.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAnimatedRef } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  return <Animated.View ref={animatedRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flip Animations in React Native Reanimated\nDESCRIPTION: Demonstrates how to use FlipInEasyX and FlipOutEasyX animations on a React Native component using Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FlipInEasyX, FlipOutEasyX } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={FlipInEasyX} exiting={FlipOutEasyX} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Handler with useEvent in React Native Reanimated\nDESCRIPTION: Demonstrates how to create a custom animated pager scroll handler using the useEvent hook. The handler processes page scroll events and calls appropriate callbacks with context.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useEvent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEvent } from 'react-native-reanimated';\n\nfunction useAnimatedPagerScrollHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event) => {\n      'worklet';\n      const { onPageScroll } = handlers;\n\n      if (onPageScroll && event.eventName.endsWith('onPageScroll')) {\n        onPageScroll(event, context);\n      }\n    },\n    ['onPageScroll'],\n    doDependenciesDiffer\n  );\n}\n\nreturn <Animated.View onScroll={useAnimatedPagerScrollHandler} />;\n```\n\n----------------------------------------\n\nTITLE: Shared View Component Implementation\nDESCRIPTION: Example of implementing shared view components on different screens with specific styling and transition tags.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/shared-element-transitions/overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  sharedTransitionTag=\"sharedTag\"\n  style={{ width: 150, height: 150, backgroundColor: 'green' }}\n/>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  sharedTransitionTag=\"sharedTag\"\n  style={{ width: 100, height: 100, backgroundColor: 'green' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Transition Timing Function in React Native Reanimated\nDESCRIPTION: Demonstrates how to apply a basic transition timing function to an Animated.View component. The example uses 'ease-out' as the timing function for a height transition lasting 300 milliseconds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-timing-function.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        transitionProperty: 'height',\n        transitionDuration: 300,\n        transitionTimingFunction: 'ease-out',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of interpolate in React Native Reanimated\nDESCRIPTION: A basic example showing how to use the interpolate function within a React component to map a shared value from range [0, 100] to opacity range [0, 1] with clamping applied.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/interpolate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpolate } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedStyle = useAnimatedStyle(() => ({\n    // highlight-next-line\n    opacity: interpolate(sv.value, [0, 100], [0, 1], Extrapolation.CLAMP),\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic withTiming Usage in React Native Reanimated\nDESCRIPTION: Basic example showing how to use withTiming to create an animation in a React Native component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withTiming.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withTiming(0);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Worklet Class Implementation\nDESCRIPTION: Example of a Worklet Class that can be instantiated on the UI thread\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/about.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Clazz {\n  __workletClass = true;\n  message = 'Hello from WorkletClass';\n  foo() {\n    console.log(this.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Keyframe Animation with Custom Easing\nDESCRIPTION: Demonstrates how to add custom easing functions to keyframe animations\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/KeyframeAnimations.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Keyframe, Easing } from 'react-native-reanimated';\n\nconst keyframe = new Keyframe({\n  0: {\n    transform: [{ rotate: '0deg' }],\n  },\n  45: {\n    transform: [{ rotate: '100deg' }],\n    easing: Easing.exp,\n  },\n  100: {\n    transform: [{ rotate: '45deg' }],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useHandler Hook in React Native Reanimated\nDESCRIPTION: TypeScript type definitions for the useHandler hook, including interface definitions for handler context, general handlers, and event types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useHandler.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n>(\n  handlers: GeneralHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context>;\n\ninterface UseHandlerContext<Context extends Record<string, unknown>> {\n  context: Context;\n  doDependenciesDiffer: boolean;\n  useWeb: boolean;\n}\n\ninterface GeneralHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n> {\n  (event: ReanimatedEvent<Event>, context: Context): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Values for Cross-Thread Communication in React Native Reanimated\nDESCRIPTION: Demonstrates the use of shared values to pass data between UI and JS threads in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/worklets.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const width = useSharedValue(100);\n\n  function myWorklet() {\n    'worklet';\n    width.value += 50;\n  }\n\n  useEffect(() => {\n    console.log(width.value); // available on both JS and UI thread\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Animated.Value with useValue Hook in React Native Reanimated\nDESCRIPTION: This snippet shows how to use the useValue hook to create and manage an Animated.Value in functional components. It initializes the value and demonstrates how to update it.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/value.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst v = useValue(0);\n/// ...\nv.setValue(100);\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Modifiers for Rotate Animation in JavaScript\nDESCRIPTION: Shows how to apply spring-based modifiers to a RotateInUpLeft animation, including springify, damping, mass, stiffness, and other spring properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nRotateInUpLeft.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Implementing Curved Transition in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the CurvedTransition component, which enables animation of all parameters with different easing for each, resulting in a curved movement path.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CurvedTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={CurvedTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-based Modifiers for Rotate Animation in JavaScript\nDESCRIPTION: Demonstrates how to apply time-based modifiers to a RotateOutDownRight animation, setting the duration and easing function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nRotateOutDownRight.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Applying Common Modifiers to Zoom Animations\nDESCRIPTION: Shows the usage of common modifiers like delay, randomDelay, reduceMotion, withInitialValues, and withCallback on a ZoomIn animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nZoomIn.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ scale: 0.5 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Customizing Fading Transition in React Native Reanimated\nDESCRIPTION: This code shows how to customize a FadingTransition with modifiers like duration, delay, reduceMotion, and callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nFadingTransition.duration(1000)\n  .delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Multiple animationPlayState Values in React Native Reanimated\nDESCRIPTION: This example shows how to use an array of animationPlayState values corresponding to multiple animations. In this case, the 'bounceIn' animation is paused while the 'move' animation is running.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-play-state.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// highlight-next-line\nanimationPlayState: ['paused', 'running'];\nanimationName: [bounceIn, move];\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Animations in React Native Reanimated\nDESCRIPTION: Example of implementing slide animations with React Native Reanimated, specifically using SlideInRight for entering and SlideOutLeft for exiting. This demonstrates how to apply these animations to an Animated.View component.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SlideInRight, SlideOutLeft } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={SlideInRight} exiting={SlideOutLeft} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useReducedMotion Hook for Conditional Animations\nDESCRIPTION: This snippet demonstrates the useReducedMotion hook, which returns whether reduced motion is enabled on the device. It shows how to conditionally choose different animations based on the user's accessibility preferences.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/accessibility.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BounceIn } from 'react-native-reanimated';\n\nfunction App() {\n  const reduceMotion = useReducedMotion();\n  const entering = reduceMotion\n    ? FadeIn.reduceMotion(ReduceMotion.Never)\n    : BounceIn;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Forced Reduced Motion Animation Example\nDESCRIPTION: Shows how to configure an animation to always use reduced motion behavior regardless of system settings.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/accessibility.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.Always\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Backward Compatible Animation API in React Native Reanimated\nDESCRIPTION: Shows how to implement animations using the backward-compatible API that mimics the original Animated library's approach. This example creates a simple translation animation with a start button.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/declarative.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Example extends Component {\n  constructor(props) {\n    super(props);\n    this._transX = new Value(0);\n    this._config = {\n      duration: 5000,\n      toValue: 120,\n      easing: Easing.inOut(Easing.ease),\n    };\n    this._anim = timing(this._transX, this._config);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Animated.View\n          style={[styles.box, { transform: [{ translateX: this._transX }] }]}\n        />\n        <Button\n          onPress={() => {\n            this._anim.start();\n          }}\n          title=\"Start\"\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for withTiming Animation\nDESCRIPTION: TypeScript type definitions for the withTiming function and its configuration options, including AnimatableValue types and configuration interface.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withTiming.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\ninterface WithTimingConfig {\n  duration?: number;\n  easing?: EasingFunction;\n  reduceMotion?: ReduceMotion;\n}\n\nfunction withTiming<T extends AnimatableValue>(\n  toValue: T,\n  config?: WithTimingConfig,\n  callback?: (finished?: boolean, current?: AnimatableValue) => void\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Scroll Event Handler with Distance Calculation\nDESCRIPTION: Implements an onScroll handler that calculates which section is currently most visible by comparing distances from the top of the screen, updating the visibleIndex shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/section-list.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n  const onScroll = useAnimatedScrollHandler(\n    debounce((event) => {\n      'worklet';\n      const y = event.contentOffset.y + 100;\n\n      let minDistance = Number.MAX_SAFE_INTEGER;\n      let closestIndex = 0;\n\n      for (let i = 0; i < sections.length; i++) {\n        const distance = Math.abs(sectionPositions[i] - y);\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestIndex = i;\n        }\n      }\n\n      visibleIndex.value = closestIndex;\n    }, 16)\n  );\n```\n\n----------------------------------------\n\nTITLE: Function Expression Worklet\nDESCRIPTION: Example of a function expression marked as a worklet\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/about.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = function () {\n  'worklet';\n  console.log('Hello from FunctionExpression');\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Keyframe Animation with From/To Syntax\nDESCRIPTION: Alternative way to define keyframe animation using 'from' and 'to' keywords instead of numeric values\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/KeyframeAnimations.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Keyframe } from 'react-native-reanimated';\n\nconst keyframe = new Keyframe({\n  from: {\n    transform: [{ rotate: '0deg' }],\n  },\n  to: {\n    transform: [{ rotate: '45deg' }],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for withDecay Animation\nDESCRIPTION: Type definitions for the withDecay function and its configuration options, including AnimatableValue interface and WithDecayConfig interface.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withDecay.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\ninterface WithDecayConfig {\n  deceleration?: number;\n  velocity?: number;\n  clamp?: [number, number];\n  velocityFactor?: number;\n  rubberBandEffect?: boolean;\n  rubberBandFactor?: number;\n  reduceMotion?: ReduceMotion;\n}\n\nfunction withDecay(\n  userConfig: WithDecayConfig,\n  callback?: (finished?: boolean, current?: AnimatableValue) => void\n): number;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Worklets\nDESCRIPTION: Demonstrates how to pass parameters to worklets when executing them.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/worklets.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myWorklet(greeting) {\n  'worklet';\n  console.log(`${greeting} from the UI thread`);\n}\n\nfunction onPress() {\n  runOnUI(myWorklet)('Howdy');\n}\n```\n\n----------------------------------------\n\nTITLE: Delayed Animation with React Native Reanimated\nDESCRIPTION: Demonstrates using withDelay to start a timing animation after a 1000ms delay. The animation will update the sharedValue to 70 using withTiming after the delay period.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/animations/withDelay.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsharedValue.value = withDelay(1000, withTiming(70));\n```\n\n----------------------------------------\n\nTITLE: Implementing Stretch Animations in React Native Reanimated\nDESCRIPTION: Demonstrates how to use StretchInX and StretchOutY animations on an Animated.View component. These animations allow scaling in X or Y axis.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StretchInX, StretchOutY } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={StretchInX} exiting={StretchOutY} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Callback Implementation\nDESCRIPTION: Shows how to implement animation callbacks to handle animation completion or cancellation events.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/animations.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  onPress={() => {\n    offset.value = withSpring(Math.random(), {}, (finished) => {\n      if (finished) {\n        console.log('ANIMATION ENDED');\n      } else {\n        console.log('ANIMATION GOT CANCELLED');\n      }\n    });\n  }}\n  title=\"Move\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Timing Animation in React Native Reanimated\nDESCRIPTION: This code snippet demonstrates the usage of the timing function for animations in React Native Reanimated. It takes clock, state, and config objects as parameters to control the animation's progress, duration, and easing.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/animations/timing.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntiming(\n  clock,\n  { finished, position, frameTime, time },\n  { toValue, duration, easing }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of makeMutable in React Native Reanimated\nDESCRIPTION: Simple example showing how to import and use makeMutable to create a mutable value initialized to 100.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/makeMutable.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeMutable } from 'react-native-reanimated';\n\nconst mv = makeMutable(100);\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Roll Animation\nDESCRIPTION: Example of configuring a spring-based Roll animation with custom spring parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nRollInLeft.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of transitionBehavior in React Native Reanimated\nDESCRIPTION: Example of using the transitionBehavior property in an Animated.View component. This allows controlling whether transitions are applied to discrete properties, with the highlighted line setting it to 'allow-discrete'.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-behavior.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        transitionProperty: 'alignItems',\n        transitionDuration: 500,\n        // highlight-next-line\n        transitionBehavior: 'allow-discrete',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Common Modifiers to Fade Animations\nDESCRIPTION: Demonstrates the use of common modifiers like delay, randomDelay, and callback functions for fade animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nFadeInDown.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateY: 420 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Using useReducedMotion Hook in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the useReducedMotion hook to query the reduced motion system setting. It allows developers to conditionally render content or run animations based on the user's accessibility preferences.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/device/useReducedMotion.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReducedMotion } from 'react-native-reanimated';\n\nfunction App() {\n  const reduceMotion = useReducedMotion();\n\n  if (reduceMotion) {\n    // display static content ✨\n  } else {\n    // run animations ✨\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Keyframe Animation with Timing Functions\nDESCRIPTION: Demonstrates timing function usage within keyframe animations, including a note about ignored timing functions in the final keyframe.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-timing-function.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst square: CSSAnimationKeyframes = {\n  '0%': {\n    transform: [{ translateX: 0 }],\n    animationTimingFunction: cubicBezier(0.25, 0.1, 0.26, 1.53),\n  },\n  '100%': {\n    transform: [{ translateX: -80 }],\n    animationTimingFunction: 'linear', // 🚨 this will be ignored\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Common Modifiers to Slide Animation in JavaScript\nDESCRIPTION: Shows how to apply common modifiers to a SlideInDown animation, including delay, randomDelay, reduceMotion, withInitialValues, and withCallback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nSlideInDown.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateY: 420 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Safe Usage in useAnimatedStyle\nDESCRIPTION: Shows how to safely use the measure function within useAnimatedStyle by checking the _WORKLET condition.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/measure.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const animatedStyles = useAnimatedStyle(() => {\n    // highlight-next-line\n    if (_WORKLET) {\n      // safely use measure\n      const measurement = measure(animatedRef);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Global Variable Access Across Threads Example\nDESCRIPTION: Complex example showing how global variables are handled across JS and UI threads. Demonstrates why certain identifiers need to be whitelisted in the globals option to maintain separate thread contexts.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/options.md#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction setOnJS() {\n  global.something = 'JS THREAD';\n}\n\nfunction setOnUI() {\n  'worklet';\n  global.something = 'UI THREAD';\n}\n\nfunction readFromJS() {\n  console.log(global.something);\n}\n\nfunction readFromUI() {\n  'worklet';\n  console.log(global.something);\n}\n\nfunction run() {\n  setOnJS();\n  runOnUI(setOnUI)();\n  readFromJS();\n  runOnUI(readFromUI)();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Entering Animation in React Native Reanimated\nDESCRIPTION: A template for creating a custom entering animation worklet function. It defines the structure for specifying animations, initial values, and an optional callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/CustomAnimations.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomEnteringAnimation(values) {\n  'worklet';\n  const animations = {\n    // your animations\n  };\n  const initialValues = {\n    // initial values for animations\n  };\n  const callback = (finished: boolean) => {\n    // optional callback that will fire when layout animation ends\n  };\n  return {\n    initialValues,\n    animations,\n    callback,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for ReducedMotionConfig in TypeScript\nDESCRIPTION: This snippet provides TypeScript type definitions for the ReducedMotionConfig component and the ReduceMotion enum. It defines the props interface and the possible values for the reduce motion mode.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/device/ReducedMotionConfig.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReducedMotionConfigProps {\n  mode: ReduceMotion;\n}\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Using Worklet with useAnimatedStyle\nDESCRIPTION: Demonstrates automatic workletization in Reanimated's useAnimatedStyle hook.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/worklets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAnimatedStyle } from 'react-native-reanimated';\n\nfunction App() {\n  const style = useAnimatedStyle(() => {\n    // Running on the UI thread\n    return { opacity: 0.5 };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interpolation Extrapolation in React Native Reanimated\nDESCRIPTION: Example showing how to configure extrapolation behavior for interpolation using an object that specifies left and right extrapolation types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/interpolate.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst extrapolation = {\n  extrapolateLeft: Extrapolation.CLAMP,\n  extrapolateRight: Extrapolation.IDENTITY,\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Sequenced Transition in React Native Reanimated\nDESCRIPTION: This code shows how to customize a SequencedTransition with modifiers like duration, delay, reverse, reduceMotion, and callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nSequencedTransition.duration(1000)\n  .delay(500)\n  .reverse()\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing Exiting Animation in React Native Reanimated\nDESCRIPTION: Shows how to import a predefined exiting animation from the React Native Reanimated library. The animation name should be replaced with the desired animation, such as FadeOut.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/ExitAnimations.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AnimationName } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using cancelAnimation in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to import and use the cancelAnimation function to stop a running animation on a shared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/cancelAnimation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cancelAnimation } from 'react-native-reanimated';\n\nfunction App() {\n  const offset = useSharedValue(100);\n\n  const handleCancel = () => {\n    // highlight-next-line\n    cancelAnimation(offset);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Setting Animated.Value in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to create an Animated.Value instance and set its value. It uses the constructor to initialize the value and the setValue method to update it.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/value.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst v = new Value(0);\n/// ...\nv.setValue(100);\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Duration in Seconds\nDESCRIPTION: Example showing how to set animation duration in seconds using a string value with 's' suffix.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-duration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nanimationDuration: '3s';\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Modifiers for Zoom Animations\nDESCRIPTION: Demonstrates the use of spring-based modifiers on a ZoomInRotate animation. These modifiers allow fine-tuning of the spring animation behavior.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nZoomInRotate.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(0.1);\n```\n\n----------------------------------------\n\nTITLE: Example of the react Argument in useAnimatedReaction\nDESCRIPTION: Shows how to implement the react function that receives current and previous values from the prepare function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useAnimatedReaction.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  useAnimatedReaction(\n    () => {\n      return Math.floor(sv.value);\n    },\n    // highlight-next-line\n    (currentValue, previousValue) => {\n      // ...\n      // highlight-next-line\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Color Interpolation Parameters in React Native Reanimated\nDESCRIPTION: Shows the structure and parameters of the interpolateColors function. Takes an input range and corresponding output color range to map values to colors. Colors can be specified as named colors, hex values, rgba strings, or numeric values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/interpolateColors.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterpolateColors(node, {\n  // Input range for the interpolation. Should be monotonically increasing.\n  inputRange: [nodeOrValue, ...],\n\n  // Output colors range for the interpolation.\n  // Should be the same length as the input range.\n  //\n  // Each color should be a string like \"red\" \"#ff0\" \"#ff0000\" \"rgba(255, 0, 0, 1)\"\n  // or a number like `0xrrggbbaa`.\n  outputColorRange: [color, ...],\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Jumping Transition in React Native Reanimated\nDESCRIPTION: This code shows how to customize a JumpingTransition with modifiers like duration, delay, reduceMotion, and callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nJumpingTransition.duration(1000)\n  .delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Using measure function in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the 'measure' function to get dimensions and position of a view. It shows the basic usage within a React component, including error handling for null measurements.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/measure.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { measure } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const handlePress = () => {\n    runOnUI(() => {\n      // highlight-next-line\n      const measurement = measure(animatedRef);\n      if (measurement === null) {\n        return;\n      }\n      // ...\n    })();\n  };\n\n  return <Animated.View ref={animatedRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Custom Exit Transition in React Native Reanimated\nDESCRIPTION: This snippet provides TypeScript type definitions for custom exit transitions in React Native Reanimated, including LayoutAnimation, ExitAnimationsValues, and related types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/custom-animations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction CustomExitTransition (values: ExitAnimationsValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype ExitAnimationsValues = CurrentLayoutAnimationsValues &\n  WindowDimensions;\n\ntype CurrentLayoutAnimationsValues = {\n  ['currentOriginX', 'currentOriginY', 'currentWidth', 'currentHeight', 'currentBorderRadius', 'currentGlobalOriginX','currentGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using LayoutAnimationConfig Component in React Native\nDESCRIPTION: Example showing how to use LayoutAnimationConfig to skip entering animations for an Animated.View component with PinwheelIn and PinwheelOut animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-animation-config.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LayoutAnimationConfig } from 'react-native-reanimated';\n\nfunction App() {\n  const [show, setShow] = React.useState(true);\n\n  return (\n    // highlight-next-line\n    <LayoutAnimationConfig skipEntering>\n      <View>\n        {show && <Animated.View entering={PinwheelIn} exiting={PinwheelOut} />}\n      </View>\n      // highlight-next-line\n    </LayoutAnimationConfig>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFrameCallback Hook in React Native Reanimated\nDESCRIPTION: This snippet demonstrates the basic usage of the useFrameCallback hook. It shows the hook's function signature, including its parameters and return type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useFrameCallback.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseFrameCallback(callback: (frameInfo: FrameInfo) => void, autostart = true): [FrameCallback]\n```\n\n----------------------------------------\n\nTITLE: Type definitions for getRelativeCoords in React Native Reanimated\nDESCRIPTION: Type definitions for the getRelativeCoords function, specifying that it takes an AnimatedRef to a component and absolute X and Y coordinates as parameters, and returns either a ComponentCoords object containing relative coordinates or null if coordinates cannot be determined.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/getRelativeCoords.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getRelativeCoords(\n  animatedRef: AnimatedRef<Component>,\n  absoluteX: number,\n  absoluteY: number\n): ComponentCoords | null;\n\ninterface ComponentCoords {\n  x: number;\n  y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Timing Functions for Different Properties in React Native Reanimated\nDESCRIPTION: Demonstrates how to apply different timing functions to multiple style properties in a single transition using React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-timing-function.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionTimingFunction: ['linear', steps(60, 'jump-none'), 'ease-in-out'];\ntransitionProperty: ['width', 'transform', 'borderRadius'];\n```\n\n----------------------------------------\n\nTITLE: Using transitionDuration in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the transitionDuration property in an Animated.View component. It sets the transition duration for the fontSize property to 500 milliseconds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-duration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        transitionProperty: 'fontSize',\n        transitionDuration: 500,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Easing to EasingNode in Reanimated 2\nDESCRIPTION: When using the Easing object imported from react-native-reanimated v1, it should be renamed to EasingNode in v2.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/migration.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Reanimated 1\nimport { Easing } from 'react-native-reanimated';\n\n// Reanimated 2\nimport { EasingNode } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Animation Timing Function Type Definitions\nDESCRIPTION: TypeScript type definitions for various timing functions including cubic bezier, linear, and steps easings.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-timing-function.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype NormalizedCubicBezierEasing = {\n  name: string;\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n};\ntype NormalizedLinearEasing = {\n  name: string;\n  points: Point[];\n};\ntype NormalizedStepsEasing = {\n  name: string;\n  points: Point[];\n};\n\ntype ControlPoint = number | [number, ...Percentage[]];\n\ntype StepsModifier =\n  | 'jump-start'\n  | 'start'\n  | 'jump-end'\n  | 'end'\n  | 'jump-none'\n  | 'jump-both';\n\ntype NormalizedCSSTimingFunction =\n  | PredefinedTimingFunction\n  | NormalizedCubicBezierEasing\n  | NormalizedLinearEasing\n  | NormalizedStepsEasing;\n\ntype PredefinedTimingFunction =\n  | 'linear'\n  | 'ease'\n  | 'ease-in'\n  | 'ease-out'\n  | 'ease-in-out'\n  | 'step-start'\n  | 'step-end';\n\ninterface ParametrizedTimingFunction {\n  toString(): string;\n  normalize(): NormalizedCSSTimingFunction;\n}\n\ntype CSSTimingFunction = PredefinedTimingFunction | ParametrizedTimingFunction;\ntype CSSAnimationTimingFunction = CSSTimingFunction | CSSTimingFunction[];\n```\n\n----------------------------------------\n\nTITLE: Using animationPlayState in React Native Reanimated Animation\nDESCRIPTION: This snippet demonstrates how to use the animationPlayState property in a React Native component with Reanimated. It sets up an animation that changes the width of a view, with the animation initially paused.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-play-state.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        animationName: {\n          from: { width: 120 },\n          to: { width: 240 },\n        },\n        animationDuration: '2s',\n        // highlight-next-line\n        animationPlayState: 'paused',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useAnimatedGestureHandler\nDESCRIPTION: TypeScript interface definitions for the useAnimatedGestureHandler hook, defining the structure of gesture handlers and their event/context types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/useAnimatedGestureHandler.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GestureHandlers<\n  Event extends NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler>,\n  Context extends Record<string, unknown>\n> {\n  [key: string]: GestureHandler<Event, Context> | undefined;\n  onStart?: GestureHandler<Event, Context>;\n  onActive?: GestureHandler<Event, Context>;\n  onEnd?: GestureHandler<Event, Context>;\n  onFail?: GestureHandler<Event, Context>;\n  onCancel?: GestureHandler<Event, Context>;\n  onFinish?: GestureHandler<Event, Context>;\n}\n\nfunction useAnimatedGestureHandler<\n  Event extends NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler> = DefaultEvent,\n  Context extends Record<string, unknown> = Record<string, unknown>\n>(handlers: GestureHandlers<Event, Context>, dependencies?: DependencyList);\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative Animation with React Native Reanimated\nDESCRIPTION: Demonstrates how to create a timing animation using Reanimated's declarative API. The code shows a component that animates a box's horizontal position using clock nodes and timing animation. It includes configuration for animation duration, easing, and state management.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/declarative.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, { Easing } from 'react-native-reanimated';\n\nconst {\n  Clock,\n  Value,\n  set,\n  cond,\n  startClock,\n  clockRunning,\n  timing,\n  debug,\n  stopClock,\n  block,\n} = Animated;\n\nfunction runTiming(clock, value, dest) {\n  const state = {\n    finished: new Value(0),\n    position: new Value(0),\n    time: new Value(0),\n    frameTime: new Value(0),\n  };\n\n  const config = {\n    duration: 5000,\n    toValue: new Value(0),\n    easing: Easing.inOut(Easing.ease),\n  };\n\n  return block([\n    cond(\n      clockRunning(clock),\n      [\n        // if the clock is already running we update the toValue, in case a new dest has been passed in\n        set(config.toValue, dest),\n      ],\n      [\n        // if the clock isn't running we reset all the animation params and start the clock\n        set(state.finished, 0),\n        set(state.time, 0),\n        set(state.position, value),\n        set(state.frameTime, 0),\n        set(config.toValue, dest),\n        startClock(clock),\n      ]\n    ),\n    // we run the step here that is going to update position\n    timing(clock, state, config),\n    // if the animation is over we stop the clock\n    cond(state.finished, debug('stop clock', stopClock(clock))),\n    // we made the block return the updated position\n    state.position,\n  ]);\n}\n\nexport class AnimatedBox extends Component {\n  // we create a clock node\n  clock = new Clock();\n  // and use runTiming method defined above to create a node that is going to be mapped\n  // to the translateX transform.\n  transX = runTiming(this.clock, -120, 120);\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Animated.View\n          style={[styles.box, { transform: [{ translateX: this.transX }] }]}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrollView Offset Animation in React Native\nDESCRIPTION: This example demonstrates how to use the useScrollViewOffset hook in a React Native component. It creates an animated ScrollView and logs the current scroll offset.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useScrollViewOffset.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ScrollViewOffsetExample() {\n  const aref = useAnimatedRef<Animated.ScrollView>();\n  const scrollHandler = useScrollViewOffset(aref);\n\n  useAnimatedStyle(() => {\n    console.log(scrollHandler.value);\n    return {};\n  });\n\n  return (\n    <>\n      <View style={styles.positionView}>\n        <Text>Test</Text>\n      </View>\n      <View style={styles.divider} />\n      <Animated.ScrollView\n        ref={aref}\n        scrollEventThrottle={16}\n        style={styles.scrollView}>\n        {[...Array(100)].map((_, i) => (\n          <Text key={i} style={styles.text}>\n            {i}\n          </Text>\n        ))}\n      </Animated.ScrollView>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using JumpingTransition in React Native Reanimated\nDESCRIPTION: Demonstrates how to import and use JumpingTransition which makes components \"jump\" to their new position for a dynamic animation effect.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-transitions.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { JumpingTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={JumpingTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: React Function in useAnimatedReaction\nDESCRIPTION: Demonstrates the react function in useAnimatedReaction, which responds to changes in the prepared value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useAnimatedReaction.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  useAnimatedReaction(\n    () => {\n      return Math.floor(sv.value);\n    },\n    (currentValue, previousValue) => {\n      // ...\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for transitionProperty in React Native Reanimated\nDESCRIPTION: This snippet provides TypeScript type definitions for the transitionProperty. It includes types for PlainStyle and CSSTransitionProperty, which can be 'all', 'none', a single style property, or an array of style properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-property.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\ntype PlainStyle = ViewStyle & TextStyle & ImageStyle;\n\ntype CSSTransitionProperty<S extends object = PlainStyle> =\n  | 'all'\n  | 'none'\n  | keyof S\n  | ('all' | keyof S)[];\n```\n\n----------------------------------------\n\nTITLE: Using transitionDuration with Multiple Properties in React Native Reanimated\nDESCRIPTION: This example demonstrates how to use an array of transition durations corresponding to multiple transition properties. Each duration is applied to the property at the same index in the transitionProperty array.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-duration.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionDuration: ['3s', '150ms', 500];\ntransitionProperty: ['width', 'transform', 'borderRadius'];\n```\n\n----------------------------------------\n\nTITLE: Running Worklets on UI Thread with runOnUI in React Native Reanimated\nDESCRIPTION: Shows how to manually execute worklets on the UI thread using runOnUI. This example passes a parameter to the worklet function when executing it.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myWorklet(greeting) {\n  'worklet';\n  console.log(`${greeting} from the UI thread`);\n}\n\nfunction onPress() {\n  // highlight-next-line\n  runOnUI(myWorklet)('Howdy');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reduced Motion in Basic Animations\nDESCRIPTION: Demonstrates how to configure basic animations with reduced motion settings using withTiming and withDelay.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/accessibility.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv1.value = withTiming(0, { reduceMotion: ReduceMotion.System });\n  sv2.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.System\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ReducedMotionConfig in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the ReducedMotionConfig component in a React Native application. It sets the reduced motion mode to 'Never', ensuring animations are always enabled.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/device/ReducedMotionConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReducedMotionConfig, ReduceMotion } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    // ...\n    // highlight-next-line\n    <ReducedMotionConfig mode={ReduceMotion.Never} />\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Entry Animation Parameters\nDESCRIPTION: Shows how to customize an entry animation by adding modifiers like duration and other properties specific to the animation type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/EntryAnimations.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<AnimatedComponent entering={AnimationName.duration(3000).otherModifier()} >\n```\n\n----------------------------------------\n\nTITLE: Type Definition for scrollTo Function in React Native Reanimated\nDESCRIPTION: This code snippet provides the TypeScript type definition for the scrollTo function. It specifies the function's parameters including the animated reference, x and y coordinates, and an animation flag.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/scroll/scrollTo.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollTo<T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  x: number,\n  y: number,\n  animated: boolean\n): void;\n```\n\n----------------------------------------\n\nTITLE: Applying Cubic Bezier Timing Function in React Native Reanimated\nDESCRIPTION: Demonstrates the use of a cubic Bezier curve as a timing function for transitions in React Native Reanimated. The function is defined by four control points.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-timing-function.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cubicBezier } from 'react-native-reanimated';\n\ntransitionTimingFunction: cubicBezier(0.25, 0.1, 0.5, 2),\n```\n\n----------------------------------------\n\nTITLE: Setting transitionDelay in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the transitionDelay property within an Animated.View component to delay the start of a transition.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-delay.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        transitionProperty: 'borderRadius',\n        transitionDuration: 500,\n        transitionDelay: '300ms',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Easing import in React Native Reanimated 2.x\nDESCRIPTION: When migrating from Reanimated 1.x to 2.x, the 'Easing' import from 'react-native-reanimated' should be renamed to 'EasingNode'.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/migration-from-1.x.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EasingNode } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for transitionDuration in React Native Reanimated\nDESCRIPTION: This snippet defines the TypeScript types for the transitionDuration property. It includes definitions for TimeUnit and CSSTransitionDuration, allowing for various time unit representations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-duration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TimeUnit = `${number}s` | `${number}ms` | number;\n\ntype CSSTransitionDuration = TimeUnit | TimeUnit[];\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Timing Function in React Native Reanimated\nDESCRIPTION: Shows how to create a linear timing function with multiple control points for transitions in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-timing-function.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { linear } from 'react-native-reanimated';\n\ntransitionTimingFunction: linear(0, [0.25, '75%'], 1),\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useAnimatedScrollHandler\nDESCRIPTION: TypeScript type definitions for the useAnimatedScrollHandler hook, including handler types, context types, and dependency list definitions. Shows the complete type structure for scroll event handling.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/scroll/useAnimatedScrollHandler.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAnimatedScrollHandler<Context extends Record<string, unknown>>(\n  handlers: ScrollHandler<Context> | ScrollHandlers<Context>,\n  dependencies?: DependencyList\n): ScrollHandlerProcessed<Context>;\n\ntype ScrollHandler<\n  Context extends Record<string, unknown> = Record<string, unknown>\n> = (event: ReanimatedScrollEvent, context: Context) => void;\n\ninterface ScrollHandlers<Context extends Record<string, unknown>> {\n  onScroll?: ScrollHandler<Context>;\n  onBeginDrag?: ScrollHandler<Context>;\n  onEndDrag?: ScrollHandler<Context>;\n  onMomentumBegin?: ScrollHandler<Context>;\n  onMomentumEnd?: ScrollHandler<Context>;\n}\n\ntype DependencyList = Array<unknown> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Applying Time-based Modifiers to Stretch Animations\nDESCRIPTION: This example shows how to apply duration and easing modifiers to a StretchOutX animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nStretchOutX.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Applying Layout Animation Modifiers in React Native Reanimated\nDESCRIPTION: Demonstrates how to use layout animation modifiers to customize animations. This example applies duration and easing to a FadeOutLeft animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Animated.View entering={FadeOutLeft.duration(500).easing(Easing.ease)} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Slide Animation Modifiers in React Native Reanimated\nDESCRIPTION: Example of common slide animation modifiers for SlideInDown, including delay settings, motion reduction handling, custom initial values, and completion callbacks. These modifiers work with both time-based and spring-based animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nSlideInDown.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateY: 420 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of useAnimatedReaction Causing Infinite Loop\nDESCRIPTION: Illustrates an incorrect implementation of useAnimatedReaction that leads to an infinite loop by mutating the same shared value used in the prepare function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useAnimatedReaction.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  useAnimatedReaction(\n    () => {\n      return width.value;\n    },\n    (currentValue) => {\n      // 🚨 An infinite loop!\n      width.value += currentValue;\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Direction Type Definitions in TypeScript\nDESCRIPTION: Type definitions for the animationDirection property, showing the available direction values and support for arrays of directions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-direction.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CSSAnimationDirection =\n  | 'normal'\n  | 'reverse'\n  | 'alternate'\n  | 'alternate-reverse';\n\nanimationDirection: CSSAnimationDirection | CSSAnimationDirection[];\n```\n\n----------------------------------------\n\nTITLE: Using get and set Methods with useSharedValue for React Compiler Compatibility\nDESCRIPTION: Demonstrates the usage of get and set methods instead of directly accessing the value property when working with the React Compiler.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useSharedValue.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const sv = useSharedValue(100);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    'worklet';\n    return { width: sv.get() * 100 };\n  });\n\n  const handlePress = () => {\n    sv.set((value) => value + 1);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Null Check Implementation for Measure\nDESCRIPTION: Demonstrates proper null checking when using the measure function to handle cases where measurement fails.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/measure.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst animatedRef = useAnimatedRef();\n\nconst handlePress = () => {\n  runOnUI(() => {\n    const measurement = measure(animatedRef);\n\n    // highlight-start\n    if (measurement === null) {\n      return;\n    }\n    // highlight-end\n    // ...\n  })();\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useAnimatedSensor in React Native Reanimated\nDESCRIPTION: Provides detailed TypeScript type definitions for the useAnimatedSensor hook, including function declaration, configuration types, sensor types, and return types. This helps developers understand the structure and options available when using the hook.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/device/useAnimatedSensor.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// --- Function declaration ---\n\nfunction useAnimatedSensor(\n  sensorType: SensorType,\n  config?: Partial<SensorConfig>\n): AnimatedSensor<ValueRotation | Value3D>;\n\n// --- Configuration types ---\n\nenum SensorType {\n  ACCELEROMETER = 1,\n  GYROSCOPE = 2,\n  GRAVITY = 3,\n  MAGNETIC_FIELD = 4,\n  ROTATION = 5,\n}\n\ntype SensorConfig = {\n  interval: number | 'auto';\n  adjustToInterfaceOrientation: boolean;\n  iosReferenceFrame: IOSReferenceFrame;\n};\n\nenum IOSReferenceFrame {\n  XArbitraryZVertical,\n  XArbitraryCorrectedZVertical,\n  XMagneticNorthZVertical,\n  XTrueNorthZVertical,\n  Auto,\n}\n\n// --- Return types ---\n\ntype AnimatedSensor<T extends Value3D | ValueRotation> = {\n  sensor: SharedValue<T>;\n  unregister: () => void;\n  isAvailable: boolean;\n  config: SensorConfig;\n};\n\ntype Value3D = {\n  x: number;\n  y: number;\n  z: number;\n  interfaceOrientation: InterfaceOrientation;\n};\n\ntype ValueRotation = {\n  qw: number;\n  qx: number;\n  qy: number;\n  qz: number;\n  yaw: number;\n  pitch: number;\n  roll: number;\n  interfaceOrientation: InterfaceOrientation;\n};\n\nenum InterfaceOrientation {\n  ROTATION_0 = 0,\n  ROTATION_90 = 90,\n  ROTATION_180 = 180,\n  ROTATION_270 = 270,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating References for Component Interaction\nDESCRIPTION: Uses useRef to create references to FlashList components, enabling programmatic scrolling to specific sections when a table of contents item is selected.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/section-list.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  const sectionCardsRef = useRef(null);\n  const tableOfContentsRef = useRef(null);\n```\n\n----------------------------------------\n\nTITLE: Dependency Example in useAnimatedScrollHandler\nDESCRIPTION: Demonstrates how to use dependencies array with useAnimatedScrollHandler to properly handle component state changes in the scroll handler worklet.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedScrollHandler.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  const [state, setState] = useState(0);\n  const sv = useSharedValue(0);\n\n  const handler = useAnimatedScrollHandler(\n    {\n      onEndDrag: (e) => {\n        sv.value = state;\n      },\n    },\n    dependencies\n  );\n  //...\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining useScrollViewOffset Hook Signature in JavaScript\nDESCRIPTION: This snippet shows the function signature of the useScrollViewOffset hook. It takes a RefObject of an Animated.ScrollView and returns a SharedValue containing the current scroll offset.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useScrollViewOffset.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseScrollViewOffset(aref: RefObject<Animated.ScrollView>) => [SharedValue<number>]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Definitions for Transition Timing Functions in React Native Reanimated\nDESCRIPTION: Provides TypeScript type definitions for various transition timing functions and related types used in React Native Reanimated. Includes definitions for cubic bezier, linear, and step easing functions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-timing-function.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype NormalizedCubicBezierEasing = {\n  name: string;\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n};\ntype NormalizedLinearEasing = {\n  name: string;\n  points: Point[];\n};\ntype NormalizedStepsEasing = {\n  name: string;\n  points: Point[];\n};\n\ntype ControlPoint = number | [number, ...Percentage[]];\n\ntype StepsModifier =\n  | 'jump-start'\n  | 'start'\n  | 'jump-end'\n  | 'end'\n  | 'jump-none'\n  | 'jump-both';\n\ntype NormalizedCSSTimingFunction =\n  | PredefinedTimingFunction\n  | NormalizedCubicBezierEasing\n  | NormalizedLinearEasing\n  | NormalizedStepsEasing;\n\ntype PredefinedTimingFunction =\n  | 'linear'\n  | 'ease'\n  | 'ease-in'\n  | 'ease-out'\n  | 'ease-in-out'\n  | 'step-start'\n  | 'step-end';\n\ninterface ParametrizedTimingFunction {\n  toString(): string;\n  normalize(): NormalizedCSSTimingFunction;\n}\n\ntype CSSTimingFunction = PredefinedTimingFunction | ParametrizedTimingFunction;\ntype CSSTransitionTimingFunction = CSSTimingFunction | CSSTimingFunction[];\n```\n\n----------------------------------------\n\nTITLE: Conditional Measure Function Call in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to conditionally call the measure function inside useAnimatedStyle to avoid warnings. It checks if the code is running in a worklet or on the web before calling measure.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/nativeMethods/measure.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (_WORKLET || isWeb) {\n  const measured = measure(animatedRef);\n  if (measured !== null) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Animated and Easing from Reanimated\nDESCRIPTION: Import statement for using both Animated component and Easing utility from react-native-reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/getting-started.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, { Easing } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Using transitionDelay with Multiple Values in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use an array of time units for transitionDelay, corresponding to multiple transition properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-delay.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionDelay: ['3s', '-150ms', 500];\ntransitionProperty: ['width', 'transform', 'borderRadius'];\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Duration in React Native Reanimated\nDESCRIPTION: Basic example showing how to use the animationDuration property with an animated scale transformation. The duration is set to 500 milliseconds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-duration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        animationName: {\n          to: {\n            transform: [{ scale: 2 }],\n          },\n        },\n        // highlight-next-line\n        animationDuration: 500,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for withRepeat in React Native Reanimated\nDESCRIPTION: TypeScript type definitions for the withRepeat function and its arguments. It includes the AnimatableValue type and the ReduceMotion enum.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withRepeat.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\nfunction withRepeat<T extends AnimatableValue>(\n  animation: T,\n  numberOfReps?: number,\n  reverse?: boolean,\n  callback?: (finished?: boolean, current?: AnimatableValue) => void,\n  reduceMotion?: ReduceMotion\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Common Animation Modifiers to FlipInEasyY in React Native Reanimated\nDESCRIPTION: Example of applying common animation modifiers to a FlipInEasyY animation. This snippet demonstrates setting delay, random delay, motion reduction, initial values, and callback functions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nFlipInEasyY.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({\n    transform: [{ perspective: 100 }, { rotateY: '123deg' }],\n  })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Applying Common Modifiers to LightSpeed Animation in React Native Reanimated\nDESCRIPTION: Example of using common modifiers for a LightSpeed animation. It sets delay, randomizes delay, configures reduce motion behavior, sets initial values, and adds a callback function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nLightSpeedInRight.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({\n    transform: [{ translateX: -100 }, { skewX: '-10deg' }],\n  })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Type Definition for runOnJS in React Native Reanimated\nDESCRIPTION: TypeScript type definition for the runOnJS function, showing the function signature that accepts a function reference and returns a function that accepts the same parameters as the original function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/runOnJS.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runOnJS<A extends any[], R>(\n  fn: (...args: A) => R\n): (...args: Parameters<typeof fn>) => void;\n```\n\n----------------------------------------\n\nTITLE: React Compiler Compatible Usage\nDESCRIPTION: Example showing how to use useSharedValue with React Compiler using get and set methods instead of direct value property access.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useSharedValue.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const sv = useSharedValue(100);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    'worklet';\n    return { width: sv.get() * 100 };\n  });\n\n  const handlePress = () => {\n    sv.set((value) => value + 1);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context in Gesture Handlers with React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the context object in gesture handlers to store and retrieve temporary state between different gesture callbacks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/events.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nonStart: (event, ctx) => {\n  pressed.value = true;\n  ctx.startX = x.value;\n  ctx.startY = y.value;\n},\nonActive: (event, ctx) => {\n  x.value = ctx.startX + event.translationX;\n  y.value = ctx.startY + event.translationY;\n},\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useHandler Hook\nDESCRIPTION: TypeScript type definitions for the useHandler hook, including interfaces for handler context, general handlers, and event types. Defines the structure for event handlers and their context.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useHandler.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n>(\n  handlers: GeneralHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context>;\n\ninterface UseHandlerContext<Context extends Record<string, unknown>> {\n  context: Context;\n  doDependenciesDiffer: boolean;\n  useWeb: boolean;\n}\n\ninterface GeneralHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n> {\n  (event: ReanimatedEvent<Event>, context: Context): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating interpolate function import in React Native Reanimated 2.x\nDESCRIPTION: When migrating from Reanimated 1.x to 2.x, the 'interpolate' function imported directly from 'react-native-reanimated' should be renamed to 'interpolateNode'. No change is needed for the class member method 'AnimatedValue.interpolate'.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/migration-from-1.x.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpolateNode } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Using withDelay Animation Modifier\nDESCRIPTION: Example showing how to add a delay before starting an animation using withDelay. The code adds a 500ms delay before starting a timing animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/applying-modifiers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(500, withTiming(0));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Safe usage of measure in useAnimatedStyle\nDESCRIPTION: Demonstrates how to safely use the 'measure' function within useAnimatedStyle by adding a condition to check if the code is running in a worklet.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/measure.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const animatedStyles = useAnimatedStyle(() => {\n    // highlight-next-line\n    if (_WORKLET) {\n      // safely use measure\n      const measurement = measure(animatedRef);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using transitionDelay with Numeric Milliseconds in React Native Reanimated\nDESCRIPTION: This example illustrates how to set transitionDelay using a numeric value representing milliseconds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-delay.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionDelay: 500;\n```\n\n----------------------------------------\n\nTITLE: Inline Styling with Shared Values\nDESCRIPTION: Demonstrates how to use shared values directly in component styles without useAnimatedStyle.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/glossary.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const width = useSharedValue(100);\n\n  return <Animated.View style={{ width }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Metro Cache for React Native\nDESCRIPTION: Commands to clear the Metro bundler cache in React Native projects. This can resolve TypeErrors related to undefined values in closures.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwatchman watch-del-all\nyarn start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Animation Durations with Array\nDESCRIPTION: Example showing how to set different durations for multiple animations using an array of time units that correspond to animationName array elements.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-duration.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-next-line\nanimationDuration: ['3s', '150ms', 500];\nanimationName: [bounceIn, move, slide];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Animation Duration in Reanimated\nDESCRIPTION: Type definitions for the animationDuration property, showing it can be time units (in seconds, milliseconds, or as a number) or an array of time units.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-duration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TimeUnit = `${number}s` | `${number}ms` | number;\n\ntype CSSAnimationDuration = TimeUnit | TimeUnit[];\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for getRelativeCoords\nDESCRIPTION: TypeScript type definitions for the getRelativeCoords function and its return type ComponentCoords. Defines the function signature and the structure of the coordinates object it returns.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/utilities/getRelativeCoords.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getRelativeCoords(\n  animatedRef: AnimatedRef<Component>,\n  absoluteX: number,\n  absoluteY: number\n): ComponentCoords | null;\n\ninterface ComponentCoords {\n  x: number;\n  y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Large Object Capture in Worklets for React Native Reanimated\nDESCRIPTION: Demonstrates a technique to optimize performance when working with large objects in worklets by capturing only the needed properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/worklets.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {...};\nconst color = theme.color;\n\nfunction myWorklet() {\n  'worklet';\n  console.log(color); // ✅ captured only `color`\n}\n```\n\n----------------------------------------\n\nTITLE: Thread-specific Code in useAnimatedStyle with React Native Reanimated\nDESCRIPTION: Example showing how to write thread-specific code in useAnimatedStyle using the global._WORKLET flag to check if the code is running on the UI thread or the JavaScript thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedStyle.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const animatedStyles = useAnimatedStyle(() => {\n    // highlight-next-line\n    if (global._WORKLET) {\n      // UI thread only code\n    } else {\n      // JS thread fallback code\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for withDecay\nDESCRIPTION: Type definitions showing the interface and configuration options for withDecay animations including deceleration, velocity, clamp ranges, and rubber band effects\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withDecay.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\ninterface WithDecayConfig {\n  deceleration?: number;\n  velocity?: number;\n  clamp?: [number, number];\n  velocityFactor?: number;\n  rubberBandEffect?: boolean;\n  rubberBandFactor?: number;\n  reduceMotion?: ReduceMotion;\n}\n\nfunction withDecay(\n  userConfig: WithDecayConfig,\n  callback?: (finished?: boolean, current?: AnimatableValue) => void\n): number;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Fill Mode Type Definitions in TypeScript\nDESCRIPTION: Type definitions for animationFillMode property, showing possible values and array support for multiple animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-fill-mode.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CSSAnimationFillMode = 'none' | 'forwards' | 'backwards' | 'both';\n\nanimationFillMode: CSSAnimationFillMode | CSSAnimationFillMode[];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of runOnJS with Function Defined in UI Thread Scope\nDESCRIPTION: An example showing a common mistake when using runOnJS, where the function being passed is defined within a UI thread callback, which will cause the application to crash.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/runOnJS.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nwithTiming(0, {}, () => {\n  // myFunction is defined on the UI thread 🚨\n  const myFunction = () => {\n    // ...\n  };\n  runOnJS(myFunction)(); // 💥\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Steps Timing Function in React Native Reanimated\nDESCRIPTION: Illustrates the use of a steps timing function for transitions in React Native Reanimated. The function creates 4 even steps with a 'jump-end' modifier.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-timing-function.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { steps } from 'react-native-reanimated';\n\ntransitionTimingFunction: steps(4, 'jump-end'),\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with GestureHandlerRootView in React Native\nDESCRIPTION: This snippet shows how to wrap the app entry point with GestureHandlerRootView component from react-native-gesture-handler to properly capture events on Android.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/events.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport default function App() {\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      {/* content */}\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for useEvent Hook\nDESCRIPTION: Type definitions for the useEvent hook, including generic types for Event and Context parameters, and the structure of event handlers and their processed versions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useEvent.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useEvent<\n  Event extends object,\n  Context extends Record<string, unknown> = never\n>(\n  handler: EventHandler<Event, Context>,\n  eventNames?: string[],\n  rebuild?: boolean\n): EventHandlerProcessed<Event, Context>;\n\ntype EventHandler<\n  Event extends object,\n  Context extends Record<string, unknown> = never\n> = (event: ReanimatedEvent<Event>, context?: Context) => void;\n\ntype EventHandlerProcessed<\n  Event extends object,\n  Context extends Record<string, unknown> = never\n> = (event: Event, context?: Context) => void;\n```\n\n----------------------------------------\n\nTITLE: Configuring RollInRight Animation with Common Modifiers in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use common modifiers with the RollInRight animation. It includes setting delay, random delay, reduce motion, initial values, and a callback function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nRollInRight.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateX: 100 }, { rotate: '-45deg' }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Applying Time-based Modifiers to Fade Animations\nDESCRIPTION: Shows how to customize fade animations with time-based modifiers like duration and easing function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFadeOutLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Disabling Reduced Motion in Animations with React Native Reanimated\nDESCRIPTION: This example demonstrates how to ensure an animation always executes normally by setting the reduced motion option to Never, which will override the device's accessibility settings.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/accessibility.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.Never\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Exiting Animation to Animated Component in React Native\nDESCRIPTION: Demonstrates how to apply an exiting animation to an AnimatedComponent. The component should be created using createAnimatedComponent or imported from Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/ExitAnimations.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<AnimatedComponent exiting={AnimationName} >\n```\n\n----------------------------------------\n\nTITLE: Example of the prepare Argument in useAnimatedReaction\nDESCRIPTION: Demonstrates how to use the prepare function in useAnimatedReaction to transform a shared value before reacting to it.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useAnimatedReaction.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  useAnimatedReaction(\n    // highlight-start\n    () => {\n      return Math.floor(sv.value);\n    },\n    // highlight-end\n    (currentValue, previousValue) => {\n      // ...\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Metro Bundler Cache for React Native\nDESCRIPTION: Commands to clear the Metro bundler cache for different package managers, which is recommended after installing Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/getting-started.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start -c\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Delay as a Number\nDESCRIPTION: Example of setting animation delay as a number, which represents milliseconds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-delay.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nanimationDelay: 500;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for animationDelay in React Native Reanimated\nDESCRIPTION: TypeScript type definitions for the animationDelay property, showing it can accept time units in seconds, milliseconds, or numerical values, as well as arrays of time units.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-delay.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TimeUnit = `${number}s` | `${number}ms` | number;\n\ntype CSSAnimationDelay = TimeUnit | TimeUnit[];\n```\n\n----------------------------------------\n\nTITLE: LayoutAnimationConfig TypeScript Interface Definition\nDESCRIPTION: TypeScript interface defining the props for LayoutAnimationConfig component, including optional skipEntering and skipExiting flags, and required children prop.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/layout-animation-config.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LayoutAnimationConfigProps {\n  skipEntering?: boolean;\n  skipExiting?: boolean;\n  children: ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Native Reanimated Hooks Without Babel Plugin\nDESCRIPTION: Example of using a React Native Reanimated hook (useDerivedValue) without the Babel plugin by explicitly passing the dependency array.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/web-support.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sv = useSharedValue(0);\nconst dv = useDerivedValue(\n  () => sv.value + 1,\n  [sv] // dependency array here\n);\n```\n\n----------------------------------------\n\nTITLE: Using Logical AND Operator in React Native Reanimated\nDESCRIPTION: Implements a logical AND operation that evaluates multiple nodes or values sequentially. Returns the first falsy value encountered or the last truthy value if all inputs are truthy. The function stops evaluation once it finds a falsy value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/and.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nand(nodeOrValue1, ...)\n```\n\n----------------------------------------\n\nTITLE: Example of Shared Value in Inline Styling\nDESCRIPTION: Example showing incorrect usage of shared values in inline styling that can lead to loss of reactivity. This demonstrates why the disableInlineStylesWarning option exists.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/options.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Animated, {useSharedValue} from 'react-native-reanimated';\n\nfunction MyView() {\n  const width = useSharedValue(100);\n  return <Animated.View style={{ width: width.value }}>; // Loss of reactivity when using `width.value` instead of `width`!\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Arc-Cosine in React Native Reanimated\nDESCRIPTION: Implements the arc-cosine mathematical function that returns the arc-cosine value in radians for a given node input. The function accepts an animated node as input and returns a new animated node with the calculated result.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/acos.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nacos(node);\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Animation in React Native Reanimated\nDESCRIPTION: Spring animation function that updates position and velocity nodes based on spring physics parameters. Takes a clock, state object containing finished/position/velocity/time values, and configuration object with physics parameters including damping, mass, stiffness, and thresholds. The finished state updates to 1 when position reaches the target value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/animations/spring.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nspring(\n  clock,\n  { finished, position, velocity, time },\n  {\n    damping,\n    mass,\n    stiffness,\n    overshootClamping,\n    restSpeedThreshold,\n    restDisplacementThreshold,\n    toValue,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Monitoring FAB Expansion State with Shared Values\nDESCRIPTION: Sets up a shared value to track whether the Floating Action Button is expanded, preventing unnecessary re-renders during state changes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/floating-action-button.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst isExpanded = useSharedValue(false);\nconst toggleExpansion = () => { isExpanded.value = !isExpanded.value; };\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Modifiers for Stretch Animations\nDESCRIPTION: This snippet demonstrates how to apply spring-based modifiers to a StretchInX animation, including damping, mass, stiffness, and other spring properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nStretchInX.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-based Roll Animation\nDESCRIPTION: Example of configuring a time-based Roll animation with custom duration and easing.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nRollOutLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Multiple Animation Directions Example in TypeScript\nDESCRIPTION: Shows how to specify different animation directions for multiple animations using an array.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-direction.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nanimationDirection: ['alternate', 'normal', 'reverse'];\nanimationName: [bounceIn, move, slide];\n```\n\n----------------------------------------\n\nTITLE: Fixing Object Property Access in React Native Reanimated Worklets\nDESCRIPTION: This diff demonstrates the solution to the immutability problem by assigning accessed properties to variables beforehand, allowing the original object to remain mutable for other operations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/troubleshooting.mdx#2025-04-16_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n const obj = { propAccessedInWorklet: 1, propNotAccessedInWorklet: 2 };\n\n+const propAccessedInWorklet = obj.propAccessedInWorklet;\n+\n function worklet() {\n   'worklet';\n-  console.log(obj.propAccessedInWorklet);\n+  console.log(propAccessedInWorklet);\n }\n\n runOnUI(worklet)();\n-obj.propNotAccessedInWorklet = 3; // Warning: Tried to modify key `prop` of an object which has been already passed to a worklet.\n+obj.propNotAccessedInWorklet = 3; // Everything is fine here.\n```\n\n----------------------------------------\n\nTITLE: Configuring RollInLeft Animation with Spring-based Modifiers in React Native Reanimated\nDESCRIPTION: This snippet shows how to configure the RollInLeft animation using spring-based modifiers. It enables spring animation and sets various spring properties such as damping, mass, stiffness, and thresholds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nRollInLeft.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Using makeMutable for Non-Animated Values\nDESCRIPTION: Demonstrates that cancelAnimation is not necessary when the mutable value is not animated. The value will be garbage collected automatically when no more references to it exist.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/makeMutable.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst someFlag = makeMutable(false);\n\nfunction App() {\n  someFlag.value = true; // ✅ no need to cancel the animation later on\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild for React Native Reanimated\nDESCRIPTION: Command to run Expo prebuild, which updates the native code in the ios and android directories when using an Expo development build.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/getting-started.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Synchronous Execution of Worklets in JavaScript\nDESCRIPTION: This example demonstrates how worklets can call other worklets synchronously on the UI thread. It shows a worklet returning a value and another worklet using that value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/worklets.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction returningWorklet() {\n  'worklet';\n  return \"I'm back\";\n}\n\nfunction someWorklet() {\n  'worklet';\n  let what = returningWorklet();\n  console.log('On the UI thread, other worklet says', what);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Animation Delays with an Array\nDESCRIPTION: Example of setting different delays for multiple animations using an array of time units that corresponds to the array of animation names.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-delay.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-next-line\nanimationDelay: ['3s', '-150ms', 500];\nanimationName: [bounceIn, move, slide];\n```\n\n----------------------------------------\n\nTITLE: Using Transition.In in React Native Reanimated\nDESCRIPTION: Demonstrates the usage of Transition.In component to specify how views that get mounted during animation transition are animated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/transitions.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Transition.In>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Layout Transition in React Native Reanimated\nDESCRIPTION: A template for creating a custom layout transition worklet function. It defines the structure for specifying animations, initial values, and an optional callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/CustomAnimations.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomLayoutTransition(values) {\n  'worklet';\n  const animations = {\n    // your animations\n  };\n  const initialValues = {\n    // initial values for animations\n  };\n  const callback = (finished: boolean) => {\n    // optional callback that will fire when layout animation ends\n  };\n  return {\n    initialValues,\n    animations,\n    callback,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Worklet as an Object Method in TypeScript\nDESCRIPTION: Example of creating a worklet as an Object Method with the 'worklet' directive. This shows how methods within objects can be transformed into worklets.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst obj = {\n  foo() {\n    'worklet';\n    console.log('Hello from ObjectMethod');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for useAnimatedRef in React Native Reanimated\nDESCRIPTION: TypeScript type definition for the useAnimatedRef hook, showing it returns an AnimatedRef of type T where T extends the Component class.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedRef.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAnimatedRef<T extends Component>(): AnimatedRef<T>;\n```\n\n----------------------------------------\n\nTITLE: Using debug() for Animated Node Value Logging in React Native Reanimated\nDESCRIPTION: Debug utility function that prints a message along with the value of an animated node during evaluation. The function takes a static message string and an animated node as parameters, prints their concatenated value, and returns the node value. Only works in development mode and prints to different consoles based on the environment.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/debug.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndebug(messageString, valueNode);\n```\n\n----------------------------------------\n\nTITLE: Creating RGBA Color Node in React Native Reanimated\nDESCRIPTION: Creates a color node in RGBA format. The first three parameters (red, green, blue) should be integer values between 0-255. The alpha parameter is optional, defaults to 1, and should be a value between 0-1. The resulting node can be mapped to color-related view properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/color.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolor(red, green, blue, alpha);\n```\n\n----------------------------------------\n\nTITLE: Setting Negative Animation Delay in Milliseconds\nDESCRIPTION: Example of setting a negative animation delay as a string with milliseconds unit ('ms'), which causes the animation to start partway through its cycle.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-delay.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nanimationDelay: '-150ms';\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for cancelAnimation in React Native Reanimated\nDESCRIPTION: This snippet provides TypeScript type definitions for the cancelAnimation function and SharedValue type used in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/cancelAnimation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SharedValue<T> = { value: T };\n\nfunction cancelAnimation<T>(sharedValue: SharedValue<T>): void;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Keyframe Animation\nDESCRIPTION: Defines a simple rotation animation using numeric keyframe points (0-100)\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/KeyframeAnimations.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Keyframe } from 'react-native-reanimated';\n\nconst keyframe = new Keyframe({\n  0: {\n    transform: [{ rotate: '0deg' }],\n  },\n  100: {\n    transform: [{ rotate: '45deg' }],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Reanimated Resolution in package.json for Yarn\nDESCRIPTION: JSON configuration to resolve multiple versions of Reanimated when using Yarn. This helps ensure only one version of Reanimated is used across the project and its dependencies.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n  \"react-native-reanimated\": <Reanimated version>\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Values with lessOrEq in React Native Reanimated\nDESCRIPTION: The lessOrEq function compares two nodes or values and returns 1 if the first value is less than or equal to the second value, otherwise it returns 0. This function is part of React Native Reanimated's comparison operators.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/lessOrEq.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlessOrEq(nodeOrValueA, nodeOrValueB);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Shared Values in Worklets\nDESCRIPTION: Shows the proper way to handle object modifications in worklets using shared values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/troubleshooting.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sv = useSharedValue({ prop: 1 });\n\nfunction worklet() {\n  'worklet';\n  console.log(sv.value.prop);\n}\n\nrunOnUI(worklet)();\nsv.value = { prop: 2 }; // Everything is fine here.\n// Keep in mind that you cannot modify the property directly with `sv.value.prop = 2` unless you use the `modify` method.\nrunOnUI(worklet)();\n```\n\n----------------------------------------\n\nTITLE: Type Definition for clamp Function in Reanimated\nDESCRIPTION: TypeScript type definition for the clamp function, showing it accepts a value, minimum, and maximum parameters, all of number type, and returns a number.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/clamp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clamp(value: number, min: number, max: number): number;\n```\n\n----------------------------------------\n\nTITLE: Safe Usage of makeMutable Without Animations\nDESCRIPTION: Example showing that cancelAnimation is not needed when the mutable value is not being animated, as it will be garbage collected automatically.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/makeMutable.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst someFlag = makeMutable(false);\n\nfunction App() {\n  someFlag.value = true; // ✅ no need to cancel the animation later on\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin for Web Support with Yarn\nDESCRIPTION: This bash command installs the Babel plugin required for web support in React Native Reanimated using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n    yarn add @babel/plugin-proposal-export-namespace-from\n```\n\n----------------------------------------\n\nTITLE: Subtracting Animated Nodes or Values in React Native Reanimated\nDESCRIPTION: The 'sub' function takes two or more animated nodes or values and returns the result of subtracting their values in the exact order provided. It can be used in Reanimated animations to perform dynamic subtraction operations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/sub.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsub(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\n----------------------------------------\n\nTITLE: Applying Layout Transition to an Animated Component in React Native\nDESCRIPTION: Demonstrates how to apply a layout transition to an Animated Component. The AnimatedComponent should be a component created by createAnimatedComponent or imported from Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/LayoutTransitions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<AnimatedComponent layout={Transition} >\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared Value for Slider\nDESCRIPTION: Sets up a shared value to track the slider handle's offset position\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/slider.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst offset = useSharedValue(0);\n```\n\n----------------------------------------\n\nTITLE: Animated Styles Configuration\nDESCRIPTION: Creates animated styles using useAnimatedStyle hook to control the bottom sheet's appearance and position based on shared values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/bottom-sheet.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst style = useAnimatedStyle(() => {\n  return {\n    backgroundColor: 'white',\n    transform: [\n      {\n        translateY: interpolate(\n          progress.value,\n          [0, 1],\n          [height.value, 0]\n        ),\n      },\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Worklet Runtime in JavaScript with React Native Reanimated\nDESCRIPTION: Example of how to create a custom worklet runtime in JavaScript using the createWorkletRuntime function from React Native Reanimated. This creates a new background runtime that can execute worklets on a different thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/createWorkletRuntime.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createWorkletRuntime } from 'react-native-reanimated';\n\nfunction App() {\n  const runtime = createWorkletRuntime('background');\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Custom Layout Transition in React Native Reanimated\nDESCRIPTION: This snippet provides TypeScript type definitions for custom layout transitions in React Native Reanimated, including LayoutAnimation, LayoutAnimationsValues, and related types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/custom-animations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction CustomLayoutTransition (values: LayoutAnimationValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype LayoutAnimationsValues = CurrentLayoutAnimationsValues & TargetLayoutAnimationsValues & WindowDimensions;\n\ntype CurrentLayoutAnimationsValues = {\n    ['currentOriginX', 'currentOriginY', 'currentWidth', 'currentHeight', 'currentBorderRadius', 'currentGlobalOriginX','currentGlobalOriginY']: number;\n};\n\ntype TargetLayoutAnimationsValues = {\n    ['targetOriginX', 'targetOriginY', 'targetWidth', 'targetHeight', 'targetBorderRadius', 'targetGlobalOriginX','targetGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Value Difference with diff() in React Native Reanimated\nDESCRIPTION: The 'diff' function evaluates a node and returns the difference between its current value and the value from the last evaluation. On the first evaluation, it returns the node's current value. This is useful for tracking changes in animated values over time.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/diff.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndiff(node);\n```\n\n----------------------------------------\n\nTITLE: Concatenating Node Values in React Native Reanimated\nDESCRIPTION: The concat function accepts multiple arguments of either node references or direct values and combines them into a single string. This is useful for dynamically constructing strings from animated values and static content.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/concat.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconcat(nodeOrValue1, ...)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setNativeProps in React Native Reanimated\nDESCRIPTION: Provides the TypeScript type definition for the setNativeProps function, specifying its parameters and return type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/setNativeProps.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setNativeProps<T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  updates: StyleProps\n) => void;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for runOnUI\nDESCRIPTION: Type definition for the runOnUI function showing its function signature. It takes a function with any number of arguments and returns a function that accepts the same parameters but returns void.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/runOnUI.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runOnUI<A extends any[], R>(\n  fn: (...args: A) => R\n): (...args: Parameters<typeof fn>) => void;\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Styles\nDESCRIPTION: Defines animated styles for the box and slider handle using useAnimatedStyle hook\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/slider.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst animatedStyle = useAnimatedStyle(() => ({\n  width: offset.value + INIT_SIZE,\n}));\n\nconst handleStyle = useAnimatedStyle(() => ({\n  transform: [{ translateX: offset.value }],\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Transition.Sequence in React Native Reanimated\nDESCRIPTION: Shows how to use the Transition.Sequence component to run transitions in sequence in the order they are listed.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/transitions.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Transition.Sequence>\n```\n\n----------------------------------------\n\nTITLE: Calculating Tangent in React Native Reanimated\nDESCRIPTION: The tan function returns the tangent of the value in radians of the given node. It is used in React Native Reanimated for trigonometric calculations in animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/tan.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntan(node);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Callable Function Node with proc in React Native Reanimated\nDESCRIPTION: This example demonstrates how to create a global constant using `proc` to define a reusable expression, and then use it within a component. The `proc` function takes a function as an argument, which defines the operation to be performed on its parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/proc.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Global constant\nconst myProc = proc((a, b) => multiply(a, b));\n\n// In your component\nconst style = { width: myProc(10, 10) };\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for withClamp in React Native Reanimated\nDESCRIPTION: TypeScript type definitions for the withClamp function, including the AnimatableValue type and the ReduceMotion enum.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withClamp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\nfunction withClamp<T extends number | string>(\n  config: {\n    min?: T;\n    max?: T;\n  },\n  clampedAnimation: T\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Animations on makeMutable Values\nDESCRIPTION: Example showing how to properly clean up infinite animations on mutable values when a component unmounts using cancelAnimation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/makeMutable.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const mv = useMemo(() => makeMutable(0), []);\n\n  useEffect(() => {\n    mv.value = withRepeat(withSpring(100), -1, true); // creates an infinite animation\n\n    return () => {\n      cancelAnimation(mv); // ✅ stops the infinite animation on component unmount\n    };\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Timing Function in React Native Reanimated\nDESCRIPTION: Shows how to use a predefined timing function ('linear') for transition timing in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-timing-function.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionTimingFunction: 'linear',\n```\n\n----------------------------------------\n\nTITLE: Chrome Debugger Console Output\nDESCRIPTION: Example console output showing the worklet execution result in Chrome Debugger where _WORKLET is false due to running on JS thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/debugging.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nLOG: worklet: false\n```\n\n----------------------------------------\n\nTITLE: Multiple Animation Iteration Counts Example - TypeScript\nDESCRIPTION: Shows how to specify different iteration counts for multiple animations using an array syntax.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-iteration-count.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nanimationIterationCount: ['infinity', 1, 60];\nanimationName: [bounceIn, move, slide];\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Spring Animation Config in React Native Reanimated\nDESCRIPTION: The makeDefaultConfig function returns an object with default configuration values for spring animations. It includes properties like stiffness, mass, damping, and various thresholds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/animations/springUtils.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n {\n   stiffness: new Value(100),\n   mass: new Value(1),\n   damping: new Value(10),\n   overshootClamping: false,\n   restSpeedThreshold: 0.001,\n   restDisplacementThreshold: 0.001,\n   toValue: new Value(0),\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Native Reanimated\nDESCRIPTION: This snippet shows how to add the necessary Babel plugin for React Native Reanimated in a React Native CLI project. The 'react-native-worklets/plugin' must be added to the plugins array in the babel.config.js file.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  module.exports = {\n    presets: [\n      ... // don't add it here :)\n    ],\n    plugins: [\n      ...\n      'react-native-worklets/plugin',\n    ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Custom Entry Transition in TypeScript\nDESCRIPTION: This snippet provides TypeScript type definitions for custom entry transitions in React Native Reanimated. It includes types for the transition function, layout animation, entry animation values, and window dimensions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/custom-animations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction CustomEntryTransition (values: EntryAnimationsValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype EntryAnimationsValues = TargetLayoutAnimationsValues &\n  WindowDimensions;\n\ntype TargetLayoutAnimationsValues = {\n  ['targetOriginX', 'targetOriginY', 'targetWidth', 'targetHeight', 'targetBorderRadius', 'targetGlobalOriginX','targetGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Square Root using React Native Reanimated\nDESCRIPTION: Takes a node or number value and returns its square root. The function throws an error if the input value is negative. The input can be either a direct number value or an Animated.Node.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/sqrt.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsqrt(nodeOrNumber);\n```\n\n----------------------------------------\n\nTITLE: Using max() Function in React Native Reanimated\nDESCRIPTION: The max() function takes two parameters which can be either animation nodes or static values and returns the larger value between them. This is useful for creating animations with boundaries or implementing min/max constraints.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/max.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmax(nodeOrValue1, nodeOrValue2);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Reanimated Plugin Options\nDESCRIPTION: TypeScript interface defining all available configuration options for the Reanimated Babel plugin\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/options.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReanimatedPluginOptions {\n  relativeSourceLocation?: boolean;\n  disableInlineStylesWarning?: boolean;\n  processNestedWorklets?: boolean;\n  omitNativeOnlyData?: boolean;\n  globals?: string[];\n  substituteWebPlatformChecks?: boolean;\n  disableSourceMaps?: boolean;\n  extraPlugins?: string[];\n  extraPresets?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Reanimated Support in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up a webpack.config.js file to support Reanimated in a web application. It includes necessary plugins, loaders, and resolve options.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/web-support.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: ['babel-polyfill', './index.js'],\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: './index.html',\n    }),\n    new webpack.EnvironmentPlugin({ JEST_WORKER_ID: null }),\n    new webpack.DefinePlugin({ process: { env: {} } }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              '@babel/preset-react',\n              { plugins: ['@babel/plugin-proposal-class-properties'] },\n            ],\n          },\n        },\n      },\n    ],\n  },\n  resolve: {\n    alias: { 'react-native$': 'react-native-web' },\n    extensions: ['.web.js', '.js'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in React Native Reanimated\nDESCRIPTION: Implementation of the logical OR operator that takes multiple nodes or values as input. It evaluates them in sequence until finding a truthy value, returning that value and stopping further evaluation. If all nodes are falsy, it returns the last node's value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/or.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nor(nodeOrValue1, ...)\n```\n\n----------------------------------------\n\nTITLE: Checking for Defined Values in React Native Reanimated\nDESCRIPTION: The 'defined' function takes a node as an argument and returns 1 if the node evaluates to a non-null, non-undefined, and non-NaN value. It returns 0 otherwise. This function is useful for conditional logic in animations based on the definedness of values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/defined.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndefined(node);\n```\n\n----------------------------------------\n\nTITLE: Creating a Mutable Value with makeMutable in JavaScript\nDESCRIPTION: Demonstrates how to import and use the makeMutable function to create a mutable value. The function takes an initial value and returns a shared value object.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/makeMutable.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeMutable } from 'react-native-reanimated';\n\nconst mv = makeMutable(100);\n```\n\n----------------------------------------\n\nTITLE: Using block function in React Native Reanimated\nDESCRIPTION: The `block` function takes an array of nodes and evaluates them in order. It returns the value of the last node in the array. This is useful for combining multiple animation operations or logic into a single animated expression.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/block.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nblock([node1, ...])\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine in React Native Reanimated\nDESCRIPTION: The 'cos' function takes a node as an argument and returns the cosine of its value in radians. This function is part of the React Native Reanimated library and is used for mathematical operations in animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/cos.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncos(node);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Layout Animation Transition Management\nDESCRIPTION: Demonstrates how to dynamically change or toggle layout transitions using state management. Includes functions to switch between different transition types or disable animations completely.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/list-layout-animations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [transition, setTransition] = useState(LinearTransition);\n\n  const changeTransition = () => {\n    setTransition(\n      transition === LinearTransition ? JumpingTransition : LinearTransition\n    );\n  };\n\n  const toggleTransition = () => {\n    setTransition(transition ? undefined : LinearTransition);\n  };\n\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      itemLayoutAnimation={transition}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Animation Timing Function Usage in React Native\nDESCRIPTION: Demonstrates basic usage of animationTimingFunction with an animated view component, applying an ease-out transition to a vertical translation animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-timing-function.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        animationName: {\n          to: {\n            transform: [{ translateY: 200 }],\n          },\n        },\n        animationDuration: '3s',\n        animationTimingFunction: 'ease-out',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useReducedMotion Hook\nDESCRIPTION: Demonstrates how to use the useReducedMotion hook to conditionally apply different animations based on system settings.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/accessibility.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BounceIn } from 'react-native-reanimated';\n\nfunction App() {\n  const reduceMotion = useReducedMotion();\n  const entering = reduceMotion\n    ? FadeIn.reduceMotion(ReduceMotion.Never)\n    : BounceIn;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Custom Exit Transition in TypeScript\nDESCRIPTION: This snippet provides TypeScript type definitions for custom exit transitions in React Native Reanimated. It includes types for the transition function, layout animation, exit animation values, and window dimensions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/custom-animations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction CustomExitTransition (values: ExitAnimationsValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype ExitAnimationsValues = CurrentLayoutAnimationsValues &\n  WindowDimensions;\n\ntype CurrentLayoutAnimationsValues = {\n  ['currentOriginX', 'currentOriginY', 'currentWidth', 'currentHeight', 'currentBorderRadius', 'currentGlobalOriginX','currentGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using floor() Function in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the floor function to round a numeric value down to its nearest integer. The function takes a node as an argument and returns a new node containing the floored value. If the input is already an integer, the value remains unchanged.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/floor.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfloor(node);\n```\n\n----------------------------------------\n\nTITLE: Implementing Decay Animation in React Native Reanimated\nDESCRIPTION: This code snippet demonstrates the usage of the decay function for animations in React Native Reanimated. It takes a clock, state object (finished, velocity, position, time), and a configuration object (deceleration) as parameters. The function updates position and velocity nodes each time it's evaluated, with the finished state set to 1 when the animation completes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/animations/decay.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndecay(clock, { finished, velocity, position, time }, { deceleration });\n```\n\n----------------------------------------\n\nTITLE: Multiple Animation Timing Functions Example\nDESCRIPTION: Shows how to use an array of timing functions corresponding to multiple animation properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-timing-function.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nanimationTimingFunction: ['linear', steps(60, 'jump-none'), 'ease-in-out'];\ntransitionProperty: [bounceIn, move, slide];\n```\n\n----------------------------------------\n\nTITLE: Defining Reanimated Nodes with Animated.Code in React Native\nDESCRIPTION: This snippet demonstrates how to use the Animated.Code component to define and execute reanimated nodes. It sets up multiple transX values based on a single _transX input.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/code.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Animated.Code>\n  {() =>\n    block([\n      set(this.transX1, add(multiply(-1, this._transX))),\n      set(this.transX2, add(multiply(-2, this._transX), 120)),\n      set(this.transX3, sub(multiply(2, this._transX), 120)),\n      set(this.transX4, add(multiply(1, this._transX))),\n    ])\n  }\n</Animated.Code>\n```\n\n----------------------------------------\n\nTITLE: Performing Division with React Native Reanimated\nDESCRIPTION: Takes two or more animated nodes or numerical values as arguments and returns their division result in the order provided. Can handle both static numbers and animated node values for dynamic calculations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/divide.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndivide(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\n----------------------------------------\n\nTITLE: Comparing Values with lessThan Function in React Native Reanimated\nDESCRIPTION: The lessThan function compares two nodes or values and returns 1 if the first is less than the second, otherwise it returns 0. This can be used in conditional animation logic.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/lessThan.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlessThan(nodeOrValueA, nodeOrValueB);\n```\n\n----------------------------------------\n\nTITLE: React Component with Inline Shared Values Example\nDESCRIPTION: Example demonstrating potential reactivity issues with inline shared values in React Native Reanimated\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/options.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Animated, {useSharedValue} from 'react-native-reanimated';\n\nfunction MyView() {\n  const width = useSharedValue(100);\n  return <Animated.View style={{ width: width.value }}>; // Loss of reactivity when using `width.value` instead of `width`!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-based Animation with FlipOutYLeft in React Native Reanimated\nDESCRIPTION: Example of applying time-based modifiers to a FlipOutYLeft animation. This snippet demonstrates setting the duration and easing function for the animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nFlipOutYLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Animated Styles with Shared Values\nDESCRIPTION: Demonstrates using Shared Values with useAnimatedStyle to create reactive animations based on value changes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/shared-values.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nfunction Box() {\n  const offset = useSharedValue(0);\n\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateX: offset.value }],\n    };\n  });\n\n  return (\n    <>\n      <Animated.View style={[styles.box, animatedStyles]} />\n      <Button\n        onPress={() => (offset.value = Math.random() * 255)}\n        title=\"Move\"\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Clock Node Status in React Native Reanimated\nDESCRIPTION: The clockRunning function takes a Clock node as an argument and returns 1 if the clock has been started (updating each frame) or 0 otherwise. It is used to determine the current state of a Clock node in Reanimated animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/clockRunning.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclockRunning(clockNode);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Native Reanimated Web Support\nDESCRIPTION: Babel configuration to enable React Native Reanimated web support by adding necessary plugins.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/web-support.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n      ...\n  ],\n  plugins: [\n    ...\n    '@babel/plugin-proposal-export-namespace-from',\n    'react-native-reanimated/plugin',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Assigning Values between Animated Nodes in React Native Reanimated\nDESCRIPTION: The 'set' function is used to assign the value of one Animated node to another. It takes two arguments: the Animated.Value to be updated and the source node. The function performs an assignment operation and returns a node representing the updated value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/set.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nset(valueToBeUpdated, sourceNode);\n```\n\n----------------------------------------\n\nTITLE: Adding Animated Nodes in React Native Reanimated\nDESCRIPTION: Function that takes two or more animated nodes or numeric values as arguments and returns their sum when evaluated. This is used for combining multiple animation values or performing arithmetic operations within animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/add.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nadd(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Worklets in React Native Reanimated\nDESCRIPTION: Shows how to pass arguments to worklets when executing them on the UI thread using runOnUI.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/worklets.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myWorklet(greeting) {\n  'worklet';\n  console.log(`${greeting} from the UI thread`);\n}\n\nfunction onPress() {\n  runOnUI(myWorklet)('Howdy');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Duration in Milliseconds with String\nDESCRIPTION: Example showing how to set animation duration in milliseconds using a string value with 'ms' suffix.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-duration.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nanimationDuration: '150ms';\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties in Worklets with React Native Reanimated\nDESCRIPTION: This example demonstrates how accessing object properties in a worklet causes the entire object to become immutable, triggering warnings when attempting to modify any property afterward.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/troubleshooting.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = { propAccessedInWorklet: 1, propNotAccessedInWorklet: 2 };\n\nfunction worklet() {\n  'worklet';\n  console.log(obj.propAccessedInWorklet);\n}\n\nrunOnUI(worklet)();\nobj.propNotAccessedInWorklet = 3; // Warning: Tried to modify key `prop` of an object which has been already passed to a worklet.\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for ReducedMotionConfig in TypeScript\nDESCRIPTION: This snippet provides TypeScript type definitions for the ReducedMotionConfig component and the ReduceMotion enum. It defines the props interface and the possible values for the mode parameter.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/device/ReducedMotionConfig.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReducedMotionConfigProps {\n  mode: ReduceMotion;\n}\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Suffixed Number Examples in React Native Reanimated\nDESCRIPTION: Examples of number values with units that can be used as animation targets. Units must be attached directly to numbers without spaces.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/_shared/animationToValue.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"5.5%\"\n\"90deg\"\n\"3bananas\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Reanimated Logger in JavaScript\nDESCRIPTION: Demonstrates how to import and use the configureReanimatedLogger function to set up custom logging behavior in Reanimated. This example shows the default configuration with warnings enabled and strict mode on.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/debugging/logger-configuration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  configureReanimatedLogger,\n  ReanimatedLogLevel,\n} from 'react-native-reanimated';\n\n// This is the default configuration\nconfigureReanimatedLogger({\n  level: ReanimatedLogLevel.warn,\n  strict: true, // Reanimated runs in strict mode by default\n});\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useAnimatedKeyboard in React Native Reanimated\nDESCRIPTION: TypeScript type definitions for the useAnimatedKeyboard hook, including function signature, configuration options, return types, and keyboard state enum.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/device/useAnimatedKeyboard.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// --- Function declaration ---\n\nfunction useAnimatedKeyboard(\n  options: AnimatedKeyboardOptions\n): AnimatedKeyboardInfo;\n\n// --- Configuration types ---\n\nexport interface AnimatedKeyboardOptions {\n  isStatusBarTranslucentAndroid?: boolean;\n}\n\n// --- Return types ---\n\nexport type AnimatedKeyboardInfo = {\n  height: SharedValue<number>;\n  state: SharedValue<KeyboardState>;\n};\n\nexport enum KeyboardState {\n  UNKNOWN = 0,\n  OPENING = 1,\n  OPEN = 2,\n  CLOSING = 3,\n  CLOSED = 4,\n}\n```\n\n----------------------------------------\n\nTITLE: useAnimatedReaction Type Definitions in TypeScript\nDESCRIPTION: TypeScript type definitions for the useAnimatedReaction hook, showing the function signature and parameter types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useAnimatedReaction.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype DependencyList = ReadonlyArray<any>;\n\nfunction useAnimatedReaction<T>(\n  prepare: () => T,\n  react: (prepareResult: T, preparePreviousResult: T | null) => void,\n  dependencies?: DependencyList\n): void;\n```\n\n----------------------------------------\n\nTITLE: Rounding up numbers using ceil function in React Native Reanimated\nDESCRIPTION: The ceil function takes a node as an argument and returns a new node that rounds the number up to its nearest integer. If the input is already an integer, the value remains unchanged.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/ceil.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nceil(node);\n```\n\n----------------------------------------\n\nTITLE: Clamp Function Type Definition\nDESCRIPTION: TypeScript type definition for the clamp function showing its parameter types and return value. The function accepts three number parameters: value, min, and max.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/utilities/clamp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clamp(value: number, min: number, max: number): number;\n```\n\n----------------------------------------\n\nTITLE: Simple Worklet with External Reference\nDESCRIPTION: Example showing a worklet that references an external variable which needs to be copied to the UI thread. This demonstrates the scoping behavior of worklets.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/options.md#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst someReference = 5;\nfunction foo() {\n  'worklet';\n  return someReference + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Roll Animation Component\nDESCRIPTION: Example of implementing Roll animation in a React Native component using RollInRight and RollOutLeft animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RollInRight, RollOutLeft } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={RollInRight} exiting={RollOutLeft} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Animated.useCode Hook in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the Animated.useCode hook as an alternative to Animated.Code. It conditionally executes reanimated nodes based on the 'animated' state and updates when 'animated' or 'offset' changes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/code.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [animated, setAnimated] = React.useState(false);\nconst [offset, setOffset] = React.useState(20);\n\nAnimated.useCode(\n  () =>\n    animated && [\n      //...\n      set(transX1, add(_transX, offset)),\n    ],\n  [animated, offset]\n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Arctangent with React Native Reanimated\nDESCRIPTION: Takes a node value as input and returns its arctangent in radians. This is part of Reanimated's mathematical function set used for animation calculations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/atan.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\natan(node);\n```\n\n----------------------------------------\n\nTITLE: Type definitions for measure function in React Native Reanimated\nDESCRIPTION: Provides TypeScript type definitions for the 'measure' function and its return value. It defines the MeasuredDimensions interface and the function signature.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/measure.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MeasuredDimensions {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  pageX: number;\n  pageY: number;\n}\n\nfunction measure<T extends Component>(\n  animatedRef: AnimatedRef<T>\n): MeasuredDimensions | null;\n```\n\n----------------------------------------\n\nTITLE: Calculating Power with Animated Nodes in React Native Reanimated\nDESCRIPTION: The 'pow' function takes two or more animated nodes or values and calculates the power. It raises the first node to the power of the second node. If more nodes are provided, it continues the exponentiation process sequentially.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/pow.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npow(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\n----------------------------------------\n\nTITLE: Multiple Animation Fill Modes Example\nDESCRIPTION: Shows how to apply different fill modes to multiple animations using an array syntax, corresponding to multiple animation names.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-fill-mode.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nanimationFillMode: ['forwards', 'backwards', 'none'];\nanimationName: [bounceIn, move, slide];\n```\n\n----------------------------------------\n\nTITLE: useAnimatedProps Type Definition\nDESCRIPTION: TypeScript type definition for the useAnimatedProps hook showing its generic type parameter and optional arguments.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedProps.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAnimatedProps<T extends {}>(\n  updater: () => Partial<T>,\n  dependencies?: DependencyList | null,\n  adapters?: PropsAdapterFunction | PropsAdapterFunction[] | null\n): Partial<T>;\n```\n\n----------------------------------------\n\nTITLE: Available Rotation Animations\nDESCRIPTION: List of available rotation animation types in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/EntryAnimations.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- RotateInDownLeft\n- RotateInDownRight\n- RotateInUpLeft\n- RotateInUpRight\n```\n\n----------------------------------------\n\nTITLE: Solution 1: Making Function a Worklet\nDESCRIPTION: Shows how to fix the threading issue by marking the called function as a worklet.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/troubleshooting.mdx#2025-04-16_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n function callee() {\n+  'worklet';\n   console.log(\"hello\");\n }\n```\n\n----------------------------------------\n\nTITLE: Importing Animated Component from React Native Reanimated\nDESCRIPTION: Demonstrates how to import the Animated object from react-native-reanimated, which is used to create animatable components by wrapping React Native built-ins.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/your-first-animation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Workletized Function with Source Map in JavaScript\nDESCRIPTION: Example of a transformed workletized function with an inline source map appended as a base64-encoded JSON string. This enables debugging of worklet functions by mapping the transformed code back to the original source.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/Common/cpp/worklets/WorkletRuntime/RuntimeInitialization.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction _f(number) {\n  console.log(_WORKLET, number);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IkFBYXNCLFNBQUNBLEVBQUQsQ0FBQ0EsTUFBRCxFQUFvQjtBQUV0Q0MsU0FBTyxDQUFDQyxHQUFSRCxDQUFZRSxRQUFaRixFQUFzQkQsTUFBdEJDO0FBRmtCIiwibmFtZXMiOlsibnVtYmVyIiwiY29uc29sZSIsImxvZyIsIl9XT1JLTEVUIl0sInNvdXJjZXMiOlsiL1VzZXJzL2thcm9sL0dpdC9yZWFjdC1uYXRpdmUtcmVhbmltYXRlZC9GYWJyaWNFeGFtcGxlL3NyYy9Xb3JrbGV0RXhhbXBsZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIF9XT1JLTEVUICovXG5pbXBvcnQgeyBCdXR0b24sIFZpZXcsIFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHtcbiAgcnVuT25KUyxcbiAgcnVuT25VSSxcbiAgdXNlRGVyaXZlZFZhbHVlLFxuICB1c2VTaGFyZWRWYWx1ZSxcbn0gZnJvbSAncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQnO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXb3JrbGV0RXhhbXBsZSgpIHtcbiAgLy8gcnVuT25VSSBkZW1vXG4gIGNvbnN0IHNvbWVXb3JrbGV0ID0gKG51bWJlcjogbnVtYmVyKSA9PiB7XG4gICAgJ3dvcmtsZXQnO1xuICAgIGNvbnNvbGUubG9nKF9XT1JLTEVULCBudW1iZXIpOyAvLyBfV09SS0xFVCBzaG91bGQgYmUgdHJ1ZVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVByZXNzMSA9ICgpID0+IHtcbiAgICBydW5PblVJKHNvbWVXb3JrbGV0KShNYXRoLnJhbmRvbSgpKTtcbiAgfTtcblxuICAvLyBydW5PbkpTIGRlbW9cbiAgY29uc3QgeCA9IHVzZVNoYXJlZFZhbHVlKDApO1xuXG4gIGNvbnN0IHNvbWVGdW5jdGlvbiA9IChudW1iZXI6IG51bWJlcikgPT4ge1xuICAgIGNvbnNvbGUubG9nKF9XT1JLTEVULCBudW1iZXIpOyAvLyBfV09SS0xFVCBzaG91bGQgYmUgZmFsc2VcbiAgfTtcblxuICB1c2VEZXJpdmVkVmFsdWUoKCkgPT4ge1xuICAgIHJ1bk9uSlMoc29tZUZ1bmN0aW9uKSh4LnZhbHVlKTtcbiAgfSk7XG5cbiAgY29uc3QgaGFuZGxlUHJlc3MyID0gKCkgPT4ge1xuICAgIHgudmFsdWUgPSBNYXRoLnJhbmRvbSgpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgPEJ1dHRvbiBvblByZXNzPXtoYW5kbGVQcmVzczF9IHRpdGxlPVwicnVuT25VSSBkZW1vXCIgLz5cbiAgICAgIDxCdXR0b24gb25QcmVzcz17aGFuZGxlUHJlc3MyfSB0aXRsZT1cInJ1bk9uSlMgZGVtb1wiIC8+XG4gICAgPC9WaWV3PlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGZsZXg6IDEsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICB9LFxufSk7XG4iXX0=\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Text Props\nDESCRIPTION: Sets up animated props for TextInput to display the current width value using shared values\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/slider.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst animatedProps = useAnimatedProps(() => ({\n  text: `${Math.floor(offset.value + INIT_SIZE)}`,\n}));\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for interpolate in React Native Reanimated\nDESCRIPTION: This snippet provides the TypeScript type definitions for the interpolate function and related types in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/utilities/interpolate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum Extrapolation {\n  IDENTITY = 'identity',\n  CLAMP = 'clamp',\n  EXTEND = 'extend',\n}\n\ntype ExtrapolationAsString = 'identity' | 'clamp' | 'extend';\n\nexport type ExtrapolationType =\n  | ExtrapolationConfig\n  | Extrapolation\n  | ExtrapolationAsString\n  | undefined;\n\nfunction interpolate(\n  value: number,\n  input: readonly number[],\n  output: readonly number[],\n  extrapolate?: ExtrapolationType\n): number;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of makeMutable in Component Scope\nDESCRIPTION: Example demonstrating incorrect usage of makeMutable directly in a component, which creates a new mutable value on each render and loses previous state.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/makeMutable.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [counter, setCounter] = useState(0);\n  const mv = makeMutable(counter); // 🚨 creates a new mutable value on each render\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCounter((prev) => prev + 1); // updates the counter stored in the component state\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [mv]);\n\n  useAnimatedReaction(\n    () => mv.value,\n    (value) => {\n      console.log(value); // prints 0, 1, 2, ...\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Animation References with Jest\nDESCRIPTION: Example showing how to test animated component styles using Jest's testing utilities and Reanimated's toHaveAnimatedStyle matcher.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/testing-with-jest.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('reference', () => {\n  // some styles\n\n  const { getByTestId } = render(<AnimatedComponent />);\n  const view = getByTestId('view');\n  const button = getByTestId('button');\n\n  // highlight-next-line\n  expect(view).toHaveAnimatedStyle(style);\n\n  fireEvent.press(button);\n  jest.advanceTimersByTime(250); // if whole animation duration is a 500ms\n\n  style.width = 50; // value of component width after 250ms of animation\n  // highlight-next-line\n  expect(view).toHaveAnimatedStyle(style);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Reanimated via Yarn\nDESCRIPTION: This command installs the alpha version of react-native-reanimated as a project dependency using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Function Expression Worklet\nDESCRIPTION: Example of a worklet implemented as a function expression.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/about.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = function () {\n  'worklet';\n  console.log('Hello from FunctionExpression');\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Time-based Modifiers to Stretch Animations\nDESCRIPTION: Shows how to use time-based modifiers like duration and easing on a StretchOutX animation. These modifiers rely on the withTiming function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nStretchOutX.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for React Native Reanimated Hooks\nDESCRIPTION: ESLint configuration to add support for React Native Reanimated hooks, ensuring proper dependency array usage.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/web-support.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"react-hooks/exhaustive-deps\": [\n      \"error\",\n      {\n        \"additionalHooks\": \"(useAnimatedStyle|useDerivedValue|useAnimatedProps)\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Animated.Code in React Native Reanimated\nDESCRIPTION: This snippet shows an alternative syntax for using Animated.Code component with the exec prop. It performs the same operations as the previous example, setting up multiple transX values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/code.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Animated.Code\n  exec={block([\n    set(this.transX1, add(multiply(-1, this._transX))),\n    set(this.transX2, add(multiply(-2, this._transX), 120)),\n    set(this.transX3, sub(multiply(2, this._transX), 120)),\n    set(this.transX4, add(multiply(1, this._transX))),\n  ])}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for React Native Reanimated Hooks\nDESCRIPTION: ESLint configuration to add support for React Native Reanimated hooks dependency suggestions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/web-support.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"react-hooks/exhaustive-deps\": [\n      \"error\",\n      {\n        \"additionalHooks\": \"(useAnimatedStyle|useDerivedValue|useAnimatedProps)\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Component in React Native Reanimated\nDESCRIPTION: Demonstrates how to create and use a basic animated component using Animated.View with static styles.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/glossary.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for animationPlayState in React Native Reanimated\nDESCRIPTION: This code snippet defines the TypeScript types for the animationPlayState property in React Native Reanimated. It specifies that the property can accept either a single string value or an array of string values representing the animation play state.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-play-state.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CSSAnimationPlayState = 'running' | 'paused';\n\nanimationPlayState: CSSAnimationPlayState | CSSAnimationPlayState[];\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for cancelAnimation in React Native Reanimated\nDESCRIPTION: This snippet provides TypeScript type definitions for the cancelAnimation function and SharedValue type in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/cancelAnimation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SharedValue<T> = { value: T };\n\nfunction cancelAnimation<T>(sharedValue: SharedValue<T>): void;\n```\n\n----------------------------------------\n\nTITLE: Using Jest Timers with React Native Reanimated\nDESCRIPTION: Example of using Jest fake timers to control animation timing in tests.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers(); // jest.useFakeTimers('legacy') for jest >= 27\n// call animation\njest.runAllTimers();\n```\n\n----------------------------------------\n\nTITLE: Basic Worklet Function Declaration\nDESCRIPTION: Example of a basic worklet function using the 'worklet' directive to enable UI thread execution\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/about.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n  'worklet';\n  console.log('Hello from worklet');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Web Support in React Native Reanimated\nDESCRIPTION: This code snippet demonstrates how to configure Babel for web support in React Native Reanimated. It includes adding the '@babel/plugin-proposal-export-namespace-from' plugin to the babel.config.js file.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  module.exports = {\n      presets: [\n        ... // don't add it here :)\n      ],\n      plugins: [\n          ...\n          '@babel/plugin-proposal-export-namespace-from',\n          'react-native-worklets/plugin',\n      ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Worklet Execution in Chrome Debugger\nDESCRIPTION: This code snippet shows how a worklet function behaves when debugged using the Chrome Debugger. It illustrates that the worklet runs on the JS thread and the _WORKLET flag is false.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/debugging-worklets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction runWorklet() {\n  'worklet';\n  console.log('worklet:', _WORKLET);\n}\nrunOnUI(runWorklet)();\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Animations with Different Reduced Motion Settings\nDESCRIPTION: This snippet demonstrates how nested animations handle conflicting reduced motion settings. The inner withTiming animation will execute normally due to its explicit Never setting, while the outer withDelay respects the Always setting.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/accessibility.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration, reduceMotion: ReduceMotion.Never }),\n    ReduceMotion.Always\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for withSequence\nDESCRIPTION: Type definitions for the withSequence function, including AnimatableValue type and ReduceMotion enum. Shows the function signature and supported value types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withSequence.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\nfunction withSequence<T extends AnimatableValue>(\n  reduceMotion?: ReduceMotion,\n  ...animations: [T, ...T[]]\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ReducedMotionConfig in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the ReducedMotionConfig component in a React Native application. It sets the mode to 'Never', which ensures animations are always enabled.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/device/ReducedMotionConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReducedMotionConfig, ReduceMotion } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    // ...\n    // highlight-next-line\n    <ReducedMotionConfig mode={ReduceMotion.Never} />\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Setup Configuration for Reanimated\nDESCRIPTION: Instructions for setting up Jest configuration to work with React Native Reanimated, including the required setup function call.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/testing-with-jest.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('react-native-reanimated').setUpTests();\n```\n\n----------------------------------------\n\nTITLE: Using transitionDelay with Seconds in React Native Reanimated\nDESCRIPTION: This example demonstrates how to set transitionDelay using seconds as a string value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-delay.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionDelay: '3s';\n```\n\n----------------------------------------\n\nTITLE: Defining a Worklet using Function Declaration in TypeScript\nDESCRIPTION: Example of creating a worklet using a Function Declaration with the 'worklet' directive at the top. This is one of the supported ways to create functions that can run on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction foo (){\n  'worklet';\n  console.log('Hello from FunctionDeclaration');\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for transitionBehavior in React Native Reanimated\nDESCRIPTION: TypeScript type definition for the CSSTransitionBehavior property. It can be set to either 'normal' or 'allow-discrete'.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-behavior.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CSSTransitionBehavior = 'normal' | 'allow-discrete';\n```\n\n----------------------------------------\n\nTITLE: Type Definition for dispatchCommand in React Native Reanimated\nDESCRIPTION: The TypeScript type definition for the dispatchCommand function, showing its parameters and return type. It accepts an animated reference, a command name string, and an optional array of arguments.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/dispatchCommand.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dispatchCommand<T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  commandName: string,\n  args?: unknown[]\n) => void;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for animationName in React Native Reanimated\nDESCRIPTION: This code snippet provides TypeScript type definitions for the animationName property, including types for CSS animation keyframes and style objects compatible with React Native.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-name.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\ntype PlainStyle = ViewStyle & TextStyle & ImageStyle;\n\ntype CSSAnimationKeyframes<S extends object = PlainStyle> = Record<\n  CSSAnimationKeyframeSelector,\n  CSSAnimationKeyframeBlock<S>\n>;\n```\n\n----------------------------------------\n\nTITLE: Using combineTransition for Entry/Exit Transitions in React Native Reanimated\nDESCRIPTION: Demonstrates the usage of the combineTransition function to create a combined entry and exit transition. ExitingAnimation and EnteringAnimation should be replaced with specific predefined animations, and additional modifiers can be applied to the result.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/LayoutTransitions.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncombineTransition(ExitingAnimation, EnteringAnimation).modifier();\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-based Modifiers for Slide Animation in JavaScript\nDESCRIPTION: Shows how to apply time-based modifiers to a SlideOutLeft animation, setting the duration and easing function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nSlideOutLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useAnimatedRef\nDESCRIPTION: Type definition showing the generic typing for useAnimatedRef hook that returns an AnimatedRef for a given component type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useAnimatedRef.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAnimatedRef<T extends Component>(): AnimatedRef<T>;\n```\n\n----------------------------------------\n\nTITLE: useFrameCallback Type Definitions\nDESCRIPTION: TypeScript type definitions for the useFrameCallback hook, including FrameInfo interface and return type definitions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useFrameCallback.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype FrameInfo = {\n  timestamp: number;\n  timeSincePreviousFrame: number | null;\n  timeSinceFirstFrame: number;\n};\n\ntype FrameCallback = {\n  setActive: (isActive: boolean) => void;\n  isActive: boolean;\n  callbackId: number;\n};\n\nfunction useFrameCallback(\n  callback: (frameInfo: FrameInfo) => void,\n  autostart = true\n): FrameCallback;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for React Native\nDESCRIPTION: Jest configuration settings needed in jest.config.js for React Native Reanimated testing.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\npreset: 'react-native',\nsetupFilesAfterEnv: ['./jest-setup.js'],\n...\n```\n\n----------------------------------------\n\nTITLE: Object Method Worklet\nDESCRIPTION: Example of a worklet implemented as an object method.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/about.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = {\n  foo() {\n    'worklet';\n    console.log('Hello from ObjectMethod');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Reanimated with NPM\nDESCRIPTION: This bash command installs the next version of React Native Reanimated using NPM.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n    npm install react-native-reanimated@next\n```\n\n----------------------------------------\n\nTITLE: Chrome Debugger Error Message\nDESCRIPTION: Error message shown when attempting to use measure() function in Chrome Debugger, which is not supported.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/debugging.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[Reanimated] measure() cannot be used with Chrome Debugger.\n```\n\n----------------------------------------\n\nTITLE: Mixed Reduced Motion Configuration\nDESCRIPTION: Shows how to combine different reduced motion settings in nested animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/accessibility.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration, reduceMotion: ReduceMotion.Never }),\n    ReduceMotion.Always\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Color Animation in React Native Reanimated\nDESCRIPTION: This snippet explains that animating colors in Reanimated is similar to animating other values. It mentions using withTiming and withSpring for basic color animations, and introduces interpolateColor for advanced cases with features like gamma and hue correction.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/_animating-colors.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Animating colors\n\nAnimating colors _feels_ like a separate case but in Reanimated colors are no different than animating any other value! In most cases you can simply use `withTiming` and `withSpring` to animate between colors. For more fine-gained control for more advances use cases Reanimated comes with `interpolateColor` which comes additional features like gamma and hue correction.\n```\n\n----------------------------------------\n\nTITLE: Custom Key Extractor Implementation for List Items\nDESCRIPTION: Shows how to implement a custom keyExtractor function for FlatList items when default key or id properties are not available in the data.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/list-layout-animations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      itemLayoutAnimation={LinearTransition}\n      keyExtractor={customKeyExtractor}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Easing to EasingNode in Reanimated 2\nDESCRIPTION: When using the Easing object imported from react-native-reanimated v1, it should be renamed to EasingNode in v2.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/migration-from-1.x.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Reanimated 1.x\nimport { Easing } from 'react-native-reanimated';\n\n// Reanimated 2.x\nimport { EasingNode } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Using transitionDelay with Milliseconds in React Native Reanimated\nDESCRIPTION: This example shows how to set transitionDelay using milliseconds as a string value, including a negative delay.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-delay.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionDelay: '-150ms';\n```\n\n----------------------------------------\n\nTITLE: Using Animated Scroll Handler with Manual Workletization in TypeScript\nDESCRIPTION: Example showing the verbose way of using useAnimatedScrollHandler by manually adding the 'worklet' directive to each function. Automatic workletization eliminates the need for this approach.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scrollHandler = useAnimatedScrollHandler({\n  onScroll: (e) => {\n    'worklet';\n    position.value = e.contentOffset.x;\n  },\n  onEndDrag: (e) => {\n    'worklet';\n    scrollToNearestItem(e.contentOffset.x);\n  },\n  onMomentumEnd: (e) => {\n    'worklet';\n    scrollToNearestItem(e.contentOffset.x);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Animation Iteration Count Type Definitions - TypeScript\nDESCRIPTION: Type definitions for the animationIterationCount property, showing support for infinite iterations, numeric values, and arrays of iteration counts.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-iteration-count.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CSSAnimationIterationCount = 'infinite' | number;\n\nanimationIterationCount: CSSAnimationIterationCount | CSSAnimationIterationCount[];\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-based Pinwheel Animation\nDESCRIPTION: Example of configuring a time-based Pinwheel animation with custom duration and easing.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPinwheelOut.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for React Native Reanimated Web Support\nDESCRIPTION: Example webpack configuration file with adjustments for React Native Reanimated web support.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/web-support.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: ['babel-polyfill', './index.js'],\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: './index.html',\n    }),\n    new webpack.EnvironmentPlugin({ JEST_WORKER_ID: null }),\n    new webpack.DefinePlugin({ process: { env: {} } }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              '@babel/preset-react',\n              { plugins: ['@babel/plugin-proposal-class-properties'] },\n            ],\n          },\n        },\n      },\n    ],\n  },\n  resolve: {\n    alias: { 'react-native$': 'react-native-web' },\n    extensions: ['.web.js', '.js'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Participant Component in React Native with TypeScript\nDESCRIPTION: This code snippet defines a Participant component using TypeScript and JSX. It takes 'name' and 'onRemove' as props, rendering the name and a remove button. The component uses React Native's View, Text, and Button components for its structure.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/_participantInternals.md#2025-04-16_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nfunction Participant({\n  name,\n  onRemove,\n}: {\n  name: string;\n  onRemove: () => void;\n}) {\n  return (\n    <View\n      style={[styles.participantView]}>\n      <Text>{name}</Text>\n      <Button title=\"Remove\" color=\"red\" onPress={onRemove} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Time-based Modifiers to Zoom Animations\nDESCRIPTION: This example shows how to apply duration and easing modifiers to a ZoomOutLeft animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nZoomOutLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for makeMutable and SharedValue\nDESCRIPTION: Type definitions for the makeMutable function and SharedValue interface showing the available properties and methods on the returned object.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/makeMutable.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SharedValue<Value = unknown> {\n  value: Value;\n  get(): Value;\n  set(value: Value | ((value: Value) => Value)): void;\n  addListener: (listenerID: number, listener: (value: Value) => void) => void;\n  removeListener: (listenerID: number) => void;\n  modify: (\n    modifier?: <T extends Value>(value: T) => T,\n    forceUpdate?: boolean\n  ) => void;\n}\n\nfunction makeMutable<Value>(initial: Value): SharedValue<Value>;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useFrameCallback in React Native Reanimated\nDESCRIPTION: Provides TypeScript type definitions for the useFrameCallback hook, including the FrameInfo object structure, FrameCallback return type, and the hook's function signature.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useFrameCallback.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype FrameInfo = {\n  timestamp: number;\n  timeSincePreviousFrame: number | null;\n  timeSinceFirstFrame: number;\n};\n\ntype FrameCallback = {\n  setActive: (isActive: boolean) => void;\n  isActive: boolean;\n  callbackId: number;\n};\n\nfunction useFrameCallback(\n  callback: (frameInfo: FrameInfo) => void,\n  autostart = true\n): FrameCallback;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Scroll Handler for Pager in React Native Reanimated\nDESCRIPTION: This code creates a custom scroll handler for a pager component using React Native Reanimated. It updates a shared value with the current scroll position based on the page offset and position.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/custom_events.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst scrollHandler = useAnimatedPagerScrollHandler({\n  onPageScroll: (e) => {\n    'worklet';\n    scrollPosition.value = e.offset + e.position;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Global Object Access in Different Threads Example\nDESCRIPTION: Example showing how global object access works across JS and UI threads\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/options.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction setOnJS() {\n  global.something = 'JS THREAD';\n}\n\nfunction setOnUI() {\n  'worklet';\n  global.something = 'UI THREAD';\n}\n\nfunction readFromJS() {\n  console.log(global.something);\n}\n\nfunction readFromUI() {\n  'worklet';\n  console.log(global.something);\n}\n\nfunction run() {\n  setOnJS();\n  runOnUI(setOnUI)();\n  readFromJS();\n  runOnUI(readFromUI)();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-worklets Dependency with Yarn\nDESCRIPTION: This bash command installs the required react-native-worklets dependency using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n    yarn add react-native-worklets\n```\n\n----------------------------------------\n\nTITLE: Disabled Reduced Motion Animation Example\nDESCRIPTION: Demonstrates how to configure an animation to never use reduced motion behavior.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/accessibility.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.Never\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared Value for Accordion Height\nDESCRIPTION: This snippet shows the initialization of a shared value for managing the accordion item height. Shared values help prevent unnecessary re-renders in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/accordion.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst height = useSharedValue(0);\n```\n\n----------------------------------------\n\nTITLE: Forcing Always Reduced Motion in Animations with React Native Reanimated\nDESCRIPTION: This snippet shows how to configure an animation to always use reduced motion behavior regardless of device settings. The animation will instantaneously reach the target value without any transition.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/accessibility.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.Always\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming interpolate to interpolateNode in Reanimated 2\nDESCRIPTION: When using the interpolate function directly imported from react-native-reanimated v1, it should be renamed to interpolateNode in v2. No change is needed for the AnimatedValue.interpolate class member method.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/migration.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Reanimated 1\nimport { interpolate } from 'react-native-reanimated';\n\n// Reanimated 2\nimport { interpolateNode } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Examples of transitionDuration Values in React Native Reanimated\nDESCRIPTION: These snippets show different ways to specify transitionDuration values, including seconds, milliseconds, and numeric values for milliseconds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-transitions/transition-duration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionDuration: '3s';\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionDuration: '150ms';\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntransitionDuration: 500;\n```\n\n----------------------------------------\n\nTITLE: Comparing Node Values with neq Function in React Native Reanimated\nDESCRIPTION: The 'neq' function compares two nodes or values and returns 1 if they are not equal, or 0 if they are equal. It is used in Reanimated animations to create conditional logic based on value comparisons.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/neq.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nneq(nodeOrValueA, nodeOrValueB);\n```\n\n----------------------------------------\n\nTITLE: Importing Entry Animation from React Native Reanimated\nDESCRIPTION: Shows how to import a predefined animation from the react-native-reanimated library. Replace AnimationName with specific animation like FadeIn.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/EntryAnimations.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AnimationName } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Reanimated Plugin Options\nDESCRIPTION: TypeScript interface defining all available configuration options for the Reanimated Babel plugin. It includes options for source location handling, warnings, nested worklets, platform-specific data, globals, and more.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/options.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReanimatedPluginOptions {\n  relativeSourceLocation?: boolean;\n  disableInlineStylesWarning?: boolean;\n  processNestedWorklets?: boolean;\n  omitNativeOnlyData?: boolean;\n  globals?: string[];\n  substituteWebPlatformChecks?: boolean;\n  disableSourceMaps?: boolean;\n  extraPlugins?: string[];\n  extraPresets?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Reanimated Hooks in JSON\nDESCRIPTION: This JSON snippet shows how to configure ESLint to support Reanimated hooks. It adds rules for exhaustive dependencies checking on Reanimated-specific hooks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/web-support.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"react-hooks/exhaustive-deps\": [\n      \"error\",\n      {\n        \"additionalHooks\": \"(useAnimatedStyle|useDerivedValue|useAnimatedProps)\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: withSpring Type Definitions\nDESCRIPTION: TypeScript type definitions for the withSpring animation function, including configuration interface and supported value types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withSpring.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\ninterface WithSpringConfig {\n  damping?: number;\n  mass?: number;\n  stiffness?: number;\n  overshootClamping?: boolean;\n  restSpeedThreshold?: number;\n  restDisplacementThreshold?: number;\n  velocity?: number;\n  reduceMotion?: ReduceMotion;\n  clamp?: [number, number];\n}\n\nfunction withSpring<T extends AnimatableValue>(\n  toValue: T,\n  config?: WithSpringConfig,\n  callback?: (finished?: boolean, current?: AnimatableValue) => void\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transition.Out in React Native Reanimated\nDESCRIPTION: Shows how to use Transition.Out component to specify how views that are being removed during transition should be animated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/transitions.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Transition.Out>\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Native Reanimated\nDESCRIPTION: This snippet shows how to add the Reanimated Babel plugin to the project's babel.config.js file. The plugin must be listed last in the plugins array.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  module.exports = {\n    presets: [\n      ...\n    ],\n    plugins: [\n      ...\n      'react-native-reanimated/plugin',\n    ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Type Definition for runOnUI Function in React Native Reanimated\nDESCRIPTION: Provides the TypeScript type definition for the runOnUI function. It shows that runOnUI takes a function with any number of arguments and returns a function that accepts the same parameters as the input function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/threading/runOnUI.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runOnUI<A extends any[], R>(\n  fn: (...args: A) => R\n): (...args: Parameters<typeof fn>) => void;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Worklet Execution in Chrome Debugger\nDESCRIPTION: Example showing how worklets execute differently in Chrome Debugger environment, where everything runs on the JS thread and _WORKLET flag returns false.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/debugging.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction runWorklet() {\n  'worklet';\n  console.log('worklet:', _WORKLET);\n}\nrunOnUI(runWorklet)();\n```\n\n----------------------------------------\n\nTITLE: False Warning Example with Property Access\nDESCRIPTION: Example showing a case where the inline styles warning could be incorrectly triggered when accessing a 'value' property that isn't from a shared value. This demonstrates when disableInlineStylesWarning might be needed.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/options.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\n\ninterface MyProps {\n  taggedWidth: {\n    tag: string;\n    value: number;\n  };\n}\n\nfunction MyView({ taggedWidth }) {\n  return <View style={{ width: taggedWidth.value }} />; // This triggers a false warning.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RequestAnimationFrame Polyfill for Next.js Compatibility\nDESCRIPTION: Installation and import of the 'raf' polyfill for RequestAnimationFrame compatibility in Next.js projects using React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/web-support.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add raf\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'raf/polyfill';\n```\n\n----------------------------------------\n\nTITLE: Jest Setup Configuration for Reanimated\nDESCRIPTION: Shows how to configure Jest setup file to enable Reanimated test environment.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/testing-with-jest.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('react-native-reanimated').setUpTests();\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Native Reanimated on Web\nDESCRIPTION: This configuration adds the necessary Babel plugin for using React Native Reanimated in web projects. It includes both the export namespace plugin and the Reanimated plugin.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  module.exports = {\n      presets: [\n        ...\n      ],\n      plugins: [\n          ...\n          '@babel/plugin-proposal-export-namespace-from',\n          'react-native-reanimated/plugin',\n      ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining a Worklet using Function Expression in TypeScript\nDESCRIPTION: Example of creating a worklet using a Function Expression with the 'worklet' directive at the top. This demonstrates another supported syntax for creating worklets.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst foo = function () {\n  'worklet';\n  console.log('Hello from FunctionExpression');\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Mutating Shared Values in useAnimatedStyle\nDESCRIPTION: Example showing an anti-pattern where shared values are mutated inside the useAnimatedStyle callback, which can lead to infinite loops and is considered undefined behavior.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/core/useAnimatedStyle.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const sv = useSharedValue(0);\n  const animatedStyles = useAnimatedStyle(() => {\n    // highlight-next-line\n    sv.value = withTiming(1); // Don't do this!\n    return { opacity: sv.value };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Overrides for Version Conflicts\nDESCRIPTION: JSON configuration for resolving multiple versions of Reanimated using NPM overrides.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/troubleshooting.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"overrides\": {\n  \"react-native-reanimated\": <Reanimated version>\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Project Structure for React Native Reanimated\nDESCRIPTION: Details the structure of the documentation project within react-native-reanimated/packages/docs-reanimated, showing key directories and their purposes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/contributing.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n├── docs // contains folder with md/mdx files, each folder is a section in the side navigation, and each file is documentation page\n├── src\n│   ├── components // contains components used to make the pages interactive\n│   └── examples // contains examples that are later presented in the documentation\n└── static\n    ├── img // contains images used in the docs\n    └── recordings // contains video recordings of the examples\n```\n\n----------------------------------------\n\nTITLE: Adding Reanimated Override in package.json for NPM\nDESCRIPTION: JSON configuration to override multiple versions of Reanimated when using NPM. This ensures a specific version of Reanimated is used throughout the project and its dependencies.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"overrides\": {\n  \"react-native-reanimated\": <Reanimated version>\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Animation Node Values with greaterThan in React Native Reanimated\nDESCRIPTION: Performs a greater than comparison between two values or animation nodes. Returns 1 if the first value is greater than the second value, otherwise returns 0. Can be used with both static values and animation node references.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/greaterThan.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngreaterThan(nodeOrValueA, nodeOrValueB);\n```\n\n----------------------------------------\n\nTITLE: Solution 1: Converting Function to Worklet in React Native Reanimated\nDESCRIPTION: This diff shows the first solution to the threading issue by marking the callee function as a worklet with the 'worklet' directive, allowing it to execute synchronously on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/troubleshooting.mdx#2025-04-16_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n function callee() {\n+  'worklet';\n   console.log(\"hello\");\n }\n```\n\n----------------------------------------\n\nTITLE: Jest Config File Setup for React Native\nDESCRIPTION: Configuration settings required in jest.config.js file for React Native testing.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/testing-with-jest.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\npreset: 'react-native',\nsetupFilesAfterEnv: ['./jest-setup.js'],\n...\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for withClamp in React Native Reanimated\nDESCRIPTION: This snippet provides TypeScript type definitions for the withClamp function and related types used in React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withClamp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\nfunction withClamp<T extends number | string>(\n  config: {\n    min?: T;\n    max?: T;\n  },\n  clampedAnimation: T\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Keyframe from React Native Reanimated\nDESCRIPTION: Basic import statement for the Keyframe functionality\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/KeyframeAnimations.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Keyframe } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Adding RequestAnimationFrame Polyfill for Next.js\nDESCRIPTION: Instructions for adding the 'raf' polyfill to ensure compatibility with Next.js and Solito when using React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/web-support.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn add raf\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'raf/polyfill';\n```\n\n----------------------------------------\n\nTITLE: Rounding Values with round() in React Native Reanimated\nDESCRIPTION: The round function takes a node as input and returns a new node that rounds the input value to the nearest integer. This is useful for animations where you need whole number values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/round.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nround(node);\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Participant Component with React Native Reanimated\nDESCRIPTION: This code defines a Participant component using Animated.View from react-native-reanimated. It displays the participant's name and a remove button within an animated container.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/_step1.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n...\nfunction Participant({\n  name,\n  onRemove,\n}: {\n  name: string;\n  onRemove: () => void;\n}) {\n  return (\n    <Animated.View\n      style={[styles.participantView]}>\n      <Text>{name}</Text>\n      <Button title=\"Remove\" color=\"red\" onPress={onRemove} />\n    </Animated.View>\n  );\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Rendering Participant List with ScrollView in React Native Reanimated\nDESCRIPTION: This code snippet shows how to use ScrollView to render a list of Participant components. It maps over the participantList array, creating a Participant component for each item with a unique key, name prop, and onRemove callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/_participantComponent.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ScrollView style={[{ width: '100%' }]}>\n  {participantList.map((participant) => (\n    <Participant\n      key={participant.id}\n      name={participant.name}\n      onRemove={() => removeParticipant(participant.id)}\n    />\n  ))}\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Configuring Reanimated Version Resolution in package.json with NPM\nDESCRIPTION: JSON configuration for resolving multiple versions of Reanimated when using NPM package manager. Uses the overrides property to enforce a specific version.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/troubleshooting.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"overrides\": {\n  \"react-native-reanimated\": <Reanimated version>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reanimated Timer Wrapper\nDESCRIPTION: Example of using the Reanimated timer wrapper for more precise animation control in tests.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwithReanimatedTimer(() => {\n  // call animation\n});\n```\n\n----------------------------------------\n\nTITLE: Debounce Function Implementation for Performance\nDESCRIPTION: A utility function that throttles the execution of scroll event handlers to improve performance by reducing the number of calculations performed during rapid scrolling.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/blog/section-list.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction debounce(fn, ms) {\n  'worklet';\n  let timeout;\n  return (...args) => {\n    'worklet';\n    if (timeout) {\n      cancelAnimation(timeout);\n    }\n    timeout = setTimeout(() => fn(...args), ms);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: runOnJS TypeScript Definition\nDESCRIPTION: Type definition for the runOnJS function showing its generic type parameters and return type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/threading/runOnJS.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runOnJS<A extends any[], R>(\n  fn: (...args: A) => R\n): (...args: Parameters<typeof fn>) => void;\n```\n\n----------------------------------------\n\nTITLE: Correct Shared Value Usage in Worklets\nDESCRIPTION: Example showing the correct way to use shared values for modifying objects in worklets.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/troubleshooting.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sv = useSharedValue({ prop: 1 });\n\nfunction worklet() {\n  'worklet';\n  console.log(sv.value.prop);\n}\n\nrunOnUI(worklet)();\nsv.value = { prop: 2 };\nrunOnUI(worklet)();\n```\n\n----------------------------------------\n\nTITLE: Non-Worklet Function Call Example\nDESCRIPTION: Illustrates the error case when trying to call a non-worklet function from within a worklet running on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/troubleshooting.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction callee() {\n  console.log('hello');\n}\nfunction caller() {\n  'worklet';\n  callee(); // <- this will throw in `runOnUI`\n}\nrunOnUI(caller)();\n```\n\n----------------------------------------\n\nTITLE: Nested Worklets Example for Multi-threading\nDESCRIPTION: Example demonstrating nested worklets that could cause errors without the processNestedWorklets option enabled. Shows how worklets can be nested and run on different threads.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/options.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction outerWorklet() {\n  'worklet';\n  function innerWorklet() {\n    'worklet';\n  }\n  runOnSomeOtherThread(innerWorklet)();\n}\n\nrunOnUI(outerWorklet)();\n```\n\n----------------------------------------\n\nTITLE: Configuring Reanimated Version Resolution in package.json with Yarn\nDESCRIPTION: JSON configuration for resolving multiple versions of Reanimated when using Yarn package manager. Uses the resolutions property to enforce a specific version.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/troubleshooting.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n  \"react-native-reanimated\": <Reanimated version>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Settings for React Native Reanimated\nDESCRIPTION: Sets up the initial CMake configuration including project name, minimum required version, C++ standard, and includes necessary flags from React Native. It configures compiler options with various feature flags and version information.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-reanimated/android/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(Reanimated)\ncmake_minimum_required(VERSION 3.8)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nset(CMAKE_CXX_STANDARD 20)\n\n# default CMAKE_CXX_FLAGS: \"-g -DANDROID -fdata-sections -ffunction-sections\n# -funwind-tables -fstack-protector-strong -no-canonical-prefixes\n# -D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security -fstack-protector-all\"\ninclude(\"${REACT_NATIVE_DIR}/ReactAndroid/cmake-utils/folly-flags.cmake\")\nadd_compile_options(${folly_FLAGS})\n\nstring(\n  APPEND\n  CMAKE_CXX_FLAGS\n  \" -DREACT_NATIVE_MINOR_VERSION=${REACT_NATIVE_MINOR_VERSION}\\\n    -DREANIMATED_PROFILING=${REANIMATED_PROFILING}\\\n    -DREANIMATED_VERSION=${REANIMATED_VERSION}\")\n\nstring(APPEND CMAKE_CXX_FLAGS\n       \" -fexceptions -fno-omit-frame-pointer -frtti -fstack-protector-all\\\n   -std=c++${CMAKE_CXX_STANDARD} -Wall -Werror\")\n\nif(${IS_NEW_ARCHITECTURE_ENABLED})\n  string(APPEND CMAKE_CXX_FLAGS \" -DRCT_NEW_ARCH_ENABLED\")\nendif()\n\nif(${IS_REANIMATED_EXAMPLE_APP})\n  string(APPEND CMAKE_CXX_FLAGS \" -DIS_REANIMATED_EXAMPLE_APP -Wpedantic\")\nendif()\n\nif(NOT ${CMAKE_BUILD_TYPE} MATCHES \"Debug\")\n  string(APPEND CMAKE_CXX_FLAGS \" -DNDEBUG\")\nendif()\n\nset(BUILD_DIR \"${CMAKE_SOURCE_DIR}/build\")\nset(ANDROID_CPP_DIR \"${CMAKE_SOURCE_DIR}/src/main/cpp\")\nset(COMMON_CPP_DIR \"${CMAKE_SOURCE_DIR}/../Common/cpp\")\n\nadd_subdirectory(\"${ANDROID_CPP_DIR}/reanimated\")\n```\n\n----------------------------------------\n\nTITLE: Using greaterOrEq Comparison in React Native Reanimated\nDESCRIPTION: Performs a greater than or equal comparison between two nodes or values. Returns 1 if the first node/value is greater than or equal to the second node/value, otherwise returns 0.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/greaterOrEq.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngreaterOrEq(nodeOrValueA, nodeOrValueB);\n```\n\n----------------------------------------\n\nTITLE: Setting up Android Debug Bridge for React Developer Tools\nDESCRIPTION: Command to establish a reverse port connection for Android debugging with React Developer Tools, allowing connection on port 8097.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/debugging-worklets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadb reverse tcp:8097 tcp:8097\n```\n\n----------------------------------------\n\nTITLE: Implementing Jumping Transition in React Native Reanimated\nDESCRIPTION: This snippet demonstrates how to use the JumpingTransition component, which makes components 'jump' to their new position.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { JumpingTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={JumpingTransition} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Animated.View in React Native Reanimated\nDESCRIPTION: Demonstrates how to import the Animated component from react-native-reanimated and use Animated.View instead of the standard View component for animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/view.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n\n// use\n<Animated.View/>\n// instead of\n<View/>\n```\n\n----------------------------------------\n\nTITLE: Auto-workletized Animated Style Function\nDESCRIPTION: Example of an automatically workletized function used with useAnimatedStyle, not requiring explicit worklet directive\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/about.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseAnimatedStyle(() => {\n  return {\n    width: 100,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Metro Bundler Cache with Yarn\nDESCRIPTION: This bash command clears the Metro bundler cache when using Yarn, which is recommended after installation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n    yarn start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Using Animated Scroll Handler without Manual Workletization in TypeScript\nDESCRIPTION: Example showing how automatic workletization allows for cleaner code when using useAnimatedScrollHandler. The plugin automatically adds the 'worklet' directive to these functions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scrollHandler = useAnimatedScrollHandler({\n  onScroll: (e) => {\n    position.value = e.contentOffset.x;\n  },\n  onEndDrag: (e) => {\n    scrollToNearestItem(e.contentOffset.x);\n  },\n  onMomentumEnd: (e) => {\n    scrollToNearestItem(e.contentOffset.x);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Animated.Clock in React Native Reanimated\nDESCRIPTION: Demonstrates the creation and basic usage of an Animated.Clock node in React Native Reanimated. Clock nodes are special Animated.Value nodes that update each frame with the current timestamp.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/clock.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nAnimated.Clock\n```\n\n----------------------------------------\n\nTITLE: Threading Issue: Calling Non-Worklet Functions on UI Thread in React Native Reanimated\nDESCRIPTION: This example shows how attempting to call a regular function from a worklet running on the UI thread causes an error, because the function wasn't marked as a worklet.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/troubleshooting.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction callee() {\n  console.log('hello');\n}\nfunction caller() {\n  'worklet';\n  callee(); // <- this will throw in `runOnUI`\n}\nrunOnUI(caller)();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Worklet Object Modification Example\nDESCRIPTION: Example demonstrating incorrect way of modifying objects in worklets that leads to warnings.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/troubleshooting.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = { prop: 1 };\n\nfunction worklet() {\n  'worklet';\n  console.log(obj.prop);\n}\n\nrunOnUI(worklet)();\nobj.prop = 2; // Warning: Tried to modify key `prop` of an object which has been already passed to a worklet.\nrunOnUI(worklet)();\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Expression Worklet\nDESCRIPTION: Example of an arrow function expression marked as a worklet\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/about.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = () => {\n  'worklet';\n  console.log('Hello from ArrowFunctionExpression');\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for runOnRuntime in React Native Reanimated\nDESCRIPTION: The TypeScript type definition for the runOnRuntime function, showing its generic parameters and return type. The function takes a worklet runtime and a function, returning another function that accepts the same parameters as the input function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/runOnRuntime.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runOnRuntime<A extends any[], R>(\n  workletRuntime: WorkletRuntime,\n  fn: (...args: A) => R\n): (...args: Parameters<typeof fn>) => void;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Reanimated Logger Configuration\nDESCRIPTION: TypeScript type definitions for the Reanimated logger configuration API, including the configureReanimatedLogger function, LoggerConfig interface, and ReanimatedLogLevel enum.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/debugging/logger-configuration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction configureReanimatedLogger(config: LoggerConfig): void;\n\ntype LoggerConfig = {\n  level?: ReanimatedLogLevel;\n  strict?: boolean;\n};\n\nenum ReanimatedLogLevel {\n  warn = 1,\n  error = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Running React Native Reanimated Web Example\nDESCRIPTION: Shell commands to build and run the React Native Reanimated web example application from the repository.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/web-support.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn && yarn build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Function Declaration Worklet\nDESCRIPTION: Example of a worklet implemented as a function declaration.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/about.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n  'worklet';\n  console.log('Hello from FunctionDeclaration');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin for React Native Reanimated Web Support\nDESCRIPTION: Command to install the required Babel plugin for export namespace support in React Native Reanimated web configuration.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/web-support.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @babel/plugin-proposal-export-namespace-from\n```\n\n----------------------------------------\n\nTITLE: Describing diffClamp Function in React Native Reanimated\nDESCRIPTION: The diffClamp function in React Native Reanimated operates identically to its counterpart in the original Animated library. It is used for clamping the difference of a value within a specified range.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/diffClamp.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## `diffClamp`\n\nWorks the same way as with the original `Animated` library.\n```\n\n----------------------------------------\n\nTITLE: Ignoring Reduced Motion Warning in React Native\nDESCRIPTION: JavaScript code to suppress the reduced motion warning in development mode using LogBox.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/troubleshooting.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nLogBox.ignoreLogs([\n  '[Reanimated] Reduced motion setting is enabled on this device.',\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS React Native Development\nDESCRIPTION: Command to install CocoaPods dependencies for iOS development with React Native Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/getting-started.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd ios && pod install && cd ..\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useAnimatedReaction in TypeScript\nDESCRIPTION: Provides TypeScript type definitions for the useAnimatedReaction hook, including its parameters and return type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useAnimatedReaction.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype DependencyList = ReadonlyArray<any>;\n\nfunction useAnimatedReaction<T>(\n  prepare: () => T,\n  react: (prepareResult: T, preparePreviousResult: T | null) => void,\n  dependencies?: DependencyList\n): void;\n```\n\n----------------------------------------\n\nTITLE: Function Declaration Worklet\nDESCRIPTION: Example of a function declaration marked as a worklet\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/about.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n  'worklet';\n  console.log('Hello from FunctionDeclaration');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Accurate Reanimated Call Stacks in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'wrapWithReanimatedMetroConfig' function to modify your Metro configuration for improved call stack accuracy. It imports the wrapper from the Reanimated package and applies it to your existing Metro configuration.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/debugging/accurate-call-stacks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// metro.config.js\nconst {\n  wrapWithReanimatedMetroConfig,\n} = require('react-native-reanimated/metro-config');\n\nconst config = {\n  // Your existing Metro configuration options\n};\n\nmodule.exports = wrapWithReanimatedMetroConfig(config);\n```\n\n----------------------------------------\n\nTITLE: Renaming interpolate to interpolateNode in Reanimated 2\nDESCRIPTION: When using the interpolate function imported directly from react-native-reanimated v1, it should be renamed to interpolateNode in v2. No change is necessary for AnimatedValue.interpolate class member method.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/migration-from-1.x.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Reanimated 1.x\nimport { interpolate } from 'react-native-reanimated';\n\n// Reanimated 2.x\nimport { interpolateNode } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Starting a Clock Node in React Native Reanimated\nDESCRIPTION: The startClock function is used to begin updating a Clock node's value each frame in React Native Reanimated animations. It takes a clockNode as an argument and returns 0 when evaluated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/startClock.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nstartClock(clockNode);\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-worklets Dependency with NPM\nDESCRIPTION: This bash command installs the required react-native-worklets dependency using NPM.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n    npm install react-native-worklets\n```\n\n----------------------------------------\n\nTITLE: Solution 2: Using runOnJS for JS Thread Execution in React Native Reanimated\nDESCRIPTION: This diff demonstrates an alternative solution for the threading issue by using runOnJS to execute a non-worklet function on the JavaScript thread from a worklet running on the UI thread.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/troubleshooting.mdx#2025-04-16_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n function caller() {\n   'worklet';\n-  callee();\n+  runOnJS(callee)();\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Reanimated Babel Plugin with Relative Source Location\nDESCRIPTION: This configuration option for the Reanimated Babel plugin enables the use of relative paths for source locations instead of absolute paths.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  module.exports = {\n    presets: [\n      ...\n    ],\n    plugins: [\n        ...\n        [\n            'react-native-reanimated/plugin', {\n                relativeSourceLocation: true,\n            },\n        ]\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Worklet using Arrow Function Expression in TypeScript\nDESCRIPTION: Example of creating a worklet using an Arrow Function Expression with the 'worklet' directive at the top. This allows the function to be executed on both JS and UI threads.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst foo = () => {\n  'worklet';\n  console.log('Hello from ArrowFunctionExpression');\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for WorkletRuntime in React Native Reanimated\nDESCRIPTION: TypeScript type definitions for the WorkletRuntime object and createWorkletRuntime function in React Native Reanimated, showing the function signature and return type structure.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/createWorkletRuntime.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype WorkletRuntime = {\n  __hostObjectWorkletRuntime: never;\n  readonly name: string;\n};\n\nfunction createWorkletRuntime(\n  name: string,\n  initializer?: __ComplexWorkletFunction<[], void>\n): WorkletRuntime;\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Duration in Milliseconds with Number\nDESCRIPTION: Example showing how to set animation duration in milliseconds using a number value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-duration.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nanimationDuration: 500;\n```\n\n----------------------------------------\n\nTITLE: Starting React Native Reanimated Web Example\nDESCRIPTION: Command to start the React Native Reanimated example applications in a web browser from the repository.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/web-support.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn start-web\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Reanimated Android Build\nDESCRIPTION: This CMake configuration sets up the build process for the React Native Reanimated library on Android. It defines source files, includes necessary headers, and links against required libraries based on the JavaScript runtime and React Native version.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/android/src/main/cpp/worklets/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8)\n\nfile(GLOB_RECURSE WORKLETS_COMMON_CPP_SOURCES CONFIGURE_DEPENDS\n     \"${COMMON_CPP_DIR}/worklets/*.cpp\")\nfile(GLOB_RECURSE WORKLETS_ANDROID_CPP_SOURCES CONFIGURE_DEPENDS\n     \"${ANDROID_CPP_DIR}/worklets/*.cpp\")\n\n# Consume shared libraries and headers from prefabs\nfind_package(fbjni REQUIRED CONFIG)\nfind_package(ReactAndroid REQUIRED CONFIG)\n\nif(${JS_RUNTIME} STREQUAL \"hermes\")\n  find_package(hermes-engine REQUIRED CONFIG)\nendif()\n\nadd_library(worklets SHARED ${WORKLETS_COMMON_CPP_SOURCES}\n                            ${WORKLETS_ANDROID_CPP_SOURCES})\n\n# includes\ntarget_include_directories(worklets PUBLIC \"${COMMON_CPP_DIR}\"\n                                           \"${ANDROID_CPP_DIR}\")\n\ntarget_include_directories(\n  worklets\n  PRIVATE \"${REACT_NATIVE_DIR}/ReactCommon\"\n          \"${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni/react/turbomodule\"\n          \"${REACT_NATIVE_DIR}/ReactCommon/react/nativemodule/core/ReactCommon\"\n          \"${REACT_NATIVE_DIR}/ReactCommon/callinvoker\"\n          \"${REACT_NATIVE_DIR}/ReactCommon/runtimeexecutor\")\n\nif(${IS_NEW_ARCHITECTURE_ENABLED})\n  target_include_directories(\n    worklets\n    PRIVATE\n      \"${REACT_NATIVE_DIR}/ReactCommon/yoga\"\n      \"${REACT_NATIVE_DIR}/ReactCommon/react/renderer/graphics/platform/cxx\")\n\n  if(ReactAndroid_VERSION_MINOR LESS 76)\n    target_link_libraries(\n      worklets ReactAndroid::fabricjni ReactAndroid::react_debug\n      ReactAndroid::react_render_core\n      ReactAndroid::react_render_componentregistry ReactAndroid::rrc_view)\n  endif()\nendif()\n\n# build shared lib\nset_target_properties(worklets PROPERTIES LINKER_LANGUAGE CXX)\n\ntarget_link_libraries(worklets log ReactAndroid::jsi fbjni::fbjni)\n\nif(ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n  target_link_libraries(worklets ReactAndroid::reactnative)\nelse()\n  target_link_libraries(\n    worklets ReactAndroid::react_nativemodule_core ReactAndroid::folly_runtime\n    ReactAndroid::glog ReactAndroid::reactnativejni)\nendif()\n\nif(${JS_RUNTIME} STREQUAL \"hermes\")\n  target_link_libraries(worklets hermes-engine::libhermes)\n\n  if(${HERMES_ENABLE_DEBUGGER})\n    if(ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n      target_link_libraries(worklets ReactAndroid::hermestooling)\n    else()\n      target_link_libraries(worklets ReactAndroid::hermes_executor)\n    endif()\n  endif()\nelseif(${JS_RUNTIME} STREQUAL \"jsc\")\n  if(ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n    target_link_libraries(worklets ReactAndroid::jsctooling)\n  else()\n    target_link_libraries(worklets ReactAndroid::jscexecutor)\n  endif()\nelseif(${JS_RUNTIME} STREQUAL \"v8\")\n  # TODO: Refactor this when adding support for newest V8\n  target_include_directories(worklets PRIVATE \"${JS_RUNTIME_DIR}/src\")\n  file(GLOB V8_SO_DIR \"${JS_RUNTIME_DIR}/android/build/intermediates/\\\n    library_jni/**/jni/${ANDROID_ABI}\")\n  find_library(\n    V8EXECUTOR_LIB v8executor\n    PATHS ${V8_SO_DIR}\n    NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)\n  target_link_libraries(worklets ${V8EXECUTOR_LIB})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Starting React Native Reanimated Web Playground\nDESCRIPTION: Command to start the React Native Reanimated playground in a web browser.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/web-support.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn web\n```\n\n----------------------------------------\n\nTITLE: Calculating Exponent of Node Value in React Native Reanimated\nDESCRIPTION: The 'exp' function takes a node as an argument and returns the exponential (e^x) of the node's value. This is useful for creating exponential animations or calculations within the Reanimated framework.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/exp.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexp(node);\n```\n\n----------------------------------------\n\nTITLE: Running iOS Application with Yarn\nDESCRIPTION: Command to build and run the application on an iOS device or simulator using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/fabric-example/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Adding Exiting Animation to React Native Component with Reanimated\nDESCRIPTION: This code demonstrates how to add an exiting animation (LightSpeedOutRight) to a React Native component using Reanimated's layout animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/animated_list.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, { LightSpeedInLeft, LightSpeedOutRight, Layout } from 'react-native-reanimated';\n\nconst Participant = ({ name, onRemove }) => {\n  return (\n    <Animated.View\n      entering={LightSpeedInLeft}\n      exiting={LightSpeedOutRight}\n      layout={Layout.springify()}\n      style={styles.participant}>\n      <Text style={styles.participantName}>{name}</Text>\n      <TouchableOpacity onPress={onRemove}>\n        <Text style={styles.removeText}>Remove</Text>\n      </TouchableOpacity>\n    </Animated.View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Reanimated Package\nDESCRIPTION: Command to install react-native-reanimated package using yarn package manager.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  yarn add react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jest for React Native Reanimated\nDESCRIPTION: Initial setup code required in jest-setup.js file to enable Reanimated test mocks.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('react-native-reanimated').setUpTests();\n```\n\n----------------------------------------\n\nTITLE: Installing and Running React Native Reanimated Example\nDESCRIPTION: Command sequence for installing dependencies and starting the React Native Reanimated example application. Includes special handling for iOS with CocoaPods installation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/examples.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  yarn\n  cd Example\n  yarn\n  cd ios && pod install && cd .. # if using IOS devices\n  yarn start\n```\n\n----------------------------------------\n\nTITLE: Performing Modulo Operation with React Native Reanimated\nDESCRIPTION: The modulo function calculates the remainder after division of the first argument by the second one. It takes two arguments, which can be either nodes or numbers. An error will be thrown if the second argument is zero.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/modulo.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodulo(nodeOrNumber, nodeOrNumber);\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild with NPM\nDESCRIPTION: This bash command runs the Expo prebuild process to update native code in iOS and Android directories using NPM.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n    npx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Animating Text Shadow Styles with Incorrect Color in React Native Reanimated\nDESCRIPTION: This example demonstrates how animating text shadow radius without specifying the shadow color in each keyframe can lead to unexpected results on the web. The shadow color is overridden in the animation keyframes, resulting in a black shadow instead of the intended red color.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/supported-properties.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Animated.Text\n  style={{\n    animationName: {\n      from: {\n        textShadowRadius: 8, // while the shadow radius correctly animates from 8 ✅\n      },\n      to: {\n        textShadowRadius: 16, // to 16 ✅\n      },\n    },\n    textShadowColor: 'red', // 🚨 the shadow color would be overridden in the animation keyframes\n    // that means the shadow would be black!\n  }}>\n  Reanimated\n</Animated.Text>\n```\n\n----------------------------------------\n\nTITLE: Installing Reanimated Dependencies with Package Managers\nDESCRIPTION: These shell commands show how to install the @babel/plugin-proposal-export-namespace-from package using different package managers: Expo, NPM, and Yarn.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/web-support.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install @babel/plugin-proposal-export-namespace-from\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babel/plugin-proposal-export-namespace-from\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @babel/plugin-proposal-export-namespace-from\n```\n\n----------------------------------------\n\nTITLE: Proper Object Property Access Solution\nDESCRIPTION: Shows the correct approach to accessing object properties in worklets by assigning needed properties to variables beforehand.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/troubleshooting.mdx#2025-04-16_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n const obj = { propAccessedInWorklet: 1, propNotAccessedInWorklet: 2 };\n\n+const propAccessedInWorklet = obj.propAccessedInWorklet;\n+\n function worklet() {\n   'worklet';\n-  console.log(obj.propAccessedInWorklet);\n+  console.log(propAccessedInWorklet);\n }\n\n runOnUI(worklet)();\n-obj.propNotAccessedInWorklet = 3; // Warning: Tried to modify key `prop` of an object which has been already passed to a worklet.\n+obj.propNotAccessedInWorklet = 3; // Everything is fine here.\n```\n\n----------------------------------------\n\nTITLE: Object Method Worklet\nDESCRIPTION: Example of an object method marked as a worklet\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/about.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = {\n  foo() {\n    'worklet';\n    console.log('Hello from ObjectMethod');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Delay in Seconds\nDESCRIPTION: Example of setting animation delay as a string with seconds unit ('s').\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/css-animations/animation-delay.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nanimationDelay: '3s';\n```\n\n----------------------------------------\n\nTITLE: Cloning React Native Reanimated Playground Repository\nDESCRIPTION: This Git command clones the Reanimated Playground repository, which contains a sample React Native project with Reanimated properly configured.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/installation.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/software-mansion-labs/reanimated-2-playground.git\n```\n\n----------------------------------------\n\nTITLE: Analyzing NextExample App Bundle with Next Bundle Analyzer\nDESCRIPTION: This command builds the app and uses Next Bundle Analyzer to create a report on the bundle size. It automatically opens the report in the browser for easy visualization of the bundle composition.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/next-example/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:analyze\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin for Web Support with NPM\nDESCRIPTION: This bash command installs the Babel plugin required for web support in React Native Reanimated using NPM.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n    npm install @babel/plugin-proposal-export-namespace-from\n```\n\n----------------------------------------\n\nTITLE: Calculating Sine Value with React Native Reanimated\nDESCRIPTION: Returns the sine of a value (in radians) from a given Reanimated node. This is a mathematical operation that can be used in animations and transforms where sine wave calculations are needed.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/sin.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsin(node);\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Transition in React Native Reanimated\nDESCRIPTION: Shows how to import a layout transition from the react-native-reanimated library. The Transition import is used as an example and should be replaced with the specific transition being used, such as Layout.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/LayoutAnimations/LayoutTransitions.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Transition } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Reanimated Expo App\nDESCRIPTION: Command to install all required dependencies for the Expo project. This should be run after cloning the repository and before starting the application.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/web-example/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using Animation Objects with Shared Values\nDESCRIPTION: Shows how to use animation objects with shared values using the withSpring animation function.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/glossary.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsv.value = withSpring(100);\n```\n\n----------------------------------------\n\nTITLE: Jest Config File Setup\nDESCRIPTION: Configuration settings required in jest.config.js file to enable React Native Reanimated testing support.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/testing-with-jest.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\npreset: 'react-native',\nsetupFilesAfterEnv: ['./jest-setup.js'],\n...\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Overview for React Native Reanimated\nDESCRIPTION: Shows the main directory structure of the React Native Reanimated monorepo, including apps and packages directories with their respective components.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/contributing.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── apps\n│   ├── common-app // shared source code of example apps\n│   ├── paper-example // React Native app wrapper running the Old Architecture for shared examples\n│   ├── fabric-example // React Native app wrapper running the New Architecture for shared examples\n│   ├── macos-example // React Native for MacOS app wrapper for shared example code\n│   ├── next-example // Next.js wrapper for shared example code\n│   ├── tvos-example // React Native for TVOS app wrapper for shared examples\n│   └── web-example // React Native for Web app wrapper for shared examples\n└── packages\n    ├── docs-reanimated // documentation described further in Helping with documentation\n    ├── eslint-plugin-reanimated // source of eslint plugin\n    └── react-native-reanimated\n        ├── android // source code of Android native implementation\n        ├── apple // source code of iOS native implementation\n        ├── Common // shared C++ code\n        ├── scripts // JavaScript and bash scripts used in the CI pipeline\n        ├── src // reanimated source code\n        └── plugin // source code of the babel plugin\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jest Mocks for Reanimated\nDESCRIPTION: Jest mock configuration required for testing with react-native-reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/getting-started.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('react-native-reanimated', () =>\n  require('react-native-reanimated/mock')\n);\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Reanimated Logger Configuration in TypeScript\nDESCRIPTION: Provides TypeScript type definitions for the configureReanimatedLogger function, LoggerConfig object, and ReanimatedLogLevel enum. These types define the structure and allowed values for configuring the Reanimated logger.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/debugging/logger-configuration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction configureReanimatedLogger(config: LoggerConfig): void;\n\ntype LoggerConfig = {\n  level?: ReanimatedLogLevel;\n  strict?: boolean;\n};\n\nenum ReanimatedLogLevel {\n  warn = 1,\n  error = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild with Yarn\nDESCRIPTION: This bash command runs the Expo prebuild process to update native code in iOS and Android directories using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n    yarn expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Displaying React Native Reanimated Repository Structure\nDESCRIPTION: Shows the monorepo structure of React Native Reanimated, including apps directory with various example applications and packages directory with the core library and related packages.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/contributing.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── apps\n│   ├── common-app // shared source code of example apps\n│   ├── fabric-example // React Native app wrapper running the New Architecture for shared examples\n│   ├── macos-example // React Native for MacOS app wrapper for shared example code\n│   ├── next-example // Next.js wrapper for shared example code\n│   ├── tvos-example // React Native for TVOS app wrapper for shared examples\n│   └── web-example // React Native for Web app wrapper for shared examples\n└── packages\n    ├── docs-reanimated // documentation described further in Helping with documentation\n    ├── eslint-plugin-reanimated // source of eslint plugin\n    ├── react-native-worklets // source of worklets package\n    └── react-native-reanimated\n        ├── android // source code of Android native implementation\n        ├── apple // source code of iOS native implementation\n        ├── Common // shared C++ code\n        ├── scripts // JavaScript and bash scripts used in the CI pipeline\n        ├── src // reanimated source code\n        └── plugin // source code of the babel plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Resolutions for Version Conflicts\nDESCRIPTION: JSON configuration for resolving multiple versions of Reanimated using Yarn resolutions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/troubleshooting.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n  \"react-native-reanimated\": <Reanimated version>\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Object Property Access in Worklet\nDESCRIPTION: Demonstrates problematic pattern where accessing object properties in a worklet causes immutability warnings due to full object copying.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/troubleshooting.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = { propAccessedInWorklet: 1, propNotAccessedInWorklet: 2 };\n\nfunction worklet() {\n  'worklet';\n  console.log(obj.propAccessedInWorklet);\n}\n\nrunOnUI(worklet)();\nobj.propNotAccessedInWorklet = 3; // Warning: Tried to modify key `prop` of an object which has been already passed to a worklet.\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Reanimated Web Support in JavaScript\nDESCRIPTION: This snippet shows how to configure the babel.config.js file to add the necessary plugins for Reanimated web support. It includes the @babel/plugin-proposal-export-namespace-from and react-native-worklets/plugin.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/web-support.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  module.exports = {\n      presets: [\n        ... // don't add it here :)\n      ],\n      plugins: [\n          ...\n          '@babel/plugin-proposal-export-namespace-from',\n          'react-native-worklets/plugin',\n      ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Object Method Context Example\nDESCRIPTION: Illustrates how Object.defineProperty affects method context in runOnJS implementation, showing why direct method references may not work correctly.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/runonJS.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  foo() {\n    //... playing with [this]\n  }\n}\n\nconst a = new A();\nconst ob = {};\n// We do something like this in runOnJS\nObject.defineProperty(ob, 'foo', { enumerable: false, value: a.foo });\n\na.foo(5); // Normal [this] access\nob.foo(5); // [this] is not correct\n```\n\n----------------------------------------\n\nTITLE: Reversing TCP Port for Android Debugging with React Developer Tools\nDESCRIPTION: Command to reverse the TCP port 8097 for debugging React Native applications on Android using React Developer Tools.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/debugging.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nadb reverse tcp:8097 tcp:8097\n```\n\n----------------------------------------\n\nTITLE: Opening Project in Xcode\nDESCRIPTION: Command to open the MacOS example workspace in Xcode.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/macos-example/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopen macos/MacOSExample.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Clearing Metro Bundler Cache with NPM\nDESCRIPTION: This bash command clears the Metro bundler cache when using NPM, which is recommended after installation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n    npm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Value with React Native Reanimated\nDESCRIPTION: Takes two input parameters that can be either animation nodes or raw values and returns the minimum value between them. This is useful for animations where you need to ensure a value doesn't exceed a certain threshold.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/min.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmin(nodeOrValue1, nodeOrValue2);\n```\n\n----------------------------------------\n\nTITLE: Starting NextExample App in Development Mode\nDESCRIPTION: This command starts the NextExample app in development mode, allowing for live reloading and debugging.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/next-example/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version for Android Development\nDESCRIPTION: Command to verify the Java version installed on the system, which is required to be Java 17 for Android development with this project.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/fabric-example/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njavac --version\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Worklet Object Modification\nDESCRIPTION: Demonstrates incorrect usage of object modification in a worklet that leads to warning messages.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/troubleshooting.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = { prop: 1 };\n\nfunction worklet() {\n  'worklet';\n  console.log(obj.prop);\n}\n\nrunOnUI(worklet)();\nobj.prop = 2; // Warning: Tried to modify key `prop` of an object which has been already passed to a worklet.\nrunOnUI(worklet)();\n```\n\n----------------------------------------\n\nTITLE: Decoded Source Map JSON Structure\nDESCRIPTION: The decoded content of the base64-encoded source map that maps the transformed worklet code back to its original source. It contains mappings, variable names, source file paths, and the original source content.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/Common/cpp/worklets/WorkletRuntime/RuntimeInitialization.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 3,\n  \"mappings\": \"AAasB,SAACA,EAAD,CAACA,MAAD,EAAoB;AAEtCC,SAAO,CAACC,GAARD,CAAYE,QAAZF,EAAsBD,MAAtBC;AAFkB\",\n  \"names\": [\"number\", \"console\", \"log\", \"_WORKLET\"],\n  \"sources\": [\n    \"/Users/karol/Git/react-native-reanimated/FabricExample/src/WorkletExample.tsx\"\n  ],\n  \"sourcesContent\": [\n    \"/* global _WORKLET */\\nimport { Button, View, StyleSheet } from 'react-native';\\nimport {\\n  runOnJS,\\n  runOnUI,\\n  useDerivedValue,\\n  useSharedValue,\\n} from 'react-native-reanimated';\\n\\nimport React from 'react';\\n\\nexport default function WorkletExample() {\\n  // runOnUI demo\\n  const someWorklet = (number: number) => {\\n    'worklet';\\n    console.log(_WORKLET, number); // _WORKLET should be true\\n  };\\n\\n  const handlePress1 = () => {\\n    runOnUI(someWorklet)(Math.random());\\n  };\\n\\n  // runOnJS demo\\n  const x = useSharedValue(0);\\n\\n  const someFunction = (number: number) => {\\n    console.log(_WORKLET, number); // _WORKLET should be false\\n  };\\n\\n  useDerivedValue(() => {\\n    runOnJS(someFunction)(x.value);\\n  });\\n\\n  const handlePress2 = () => {\\n    x.value = Math.random();\\n  };\\n\\n  return (\\n    <View style={styles.container}>\\n      <Button onPress={handlePress1} title=\\\"runOnUI demo\\\" />\\n      <Button onPress={handlePress2} title=\\\"runOnJS demo\\\" />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\\n\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Worklet Context Object Example\nDESCRIPTION: Demonstrates the usage of Worklet Context Objects for preserving this binding.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/about.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst workletContextObject = {\n  __workletContextObject: true,\n  message: 'Hello from WorkletContextObject',\n  foo() {\n    console.log(this.message);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Reanimated with NPM\nDESCRIPTION: Command to install the react-native-reanimated package using NPM package manager.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/getting-started.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Configuring Reanimated Logger with JavaScript\nDESCRIPTION: Example of how to configure the Reanimated logger using the configureReanimatedLogger function with the default settings. This function controls the level of warnings and errors displayed by the library.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/debugging/logger-configuration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  configureReanimatedLogger,\n  ReanimatedLogLevel,\n} from 'react-native-reanimated';\n\n// This is the default configuration\nconfigureReanimatedLogger({\n  level: ReanimatedLogLevel.warn,\n  strict: true, // Reanimated runs in strict mode by default\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Reanimated Web Application with Yarn\nDESCRIPTION: These shell commands demonstrate how to build and start a Reanimated web application using Yarn. It includes steps for building the project and starting the web example.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/web-support.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn && yarn build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Expression Worklet\nDESCRIPTION: Example of a worklet implemented as an arrow function expression.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/about.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = () => {\n  'worklet';\n  console.log('Hello from ArrowFunctionExpression');\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Android Debugging for React Developer Tools\nDESCRIPTION: This command sets up port forwarding on Android devices to allow connection with React Developer Tools running on the development machine.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/debugging-worklets.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nadb reverse tcp:8097 tcp:8097\n```\n\n----------------------------------------\n\nTITLE: Comparing Values with eq() in React Native Reanimated\nDESCRIPTION: The eq() function compares two nodes or values and returns 1 if they are equal, 0 if they are not equal. It can accept both animated nodes and raw values as parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/eq.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neq(nodeOrValueA, nodeOrValueB);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Native Reanimated Web Support\nDESCRIPTION: Add the '@babel/plugin-proposal-export-namespace-from' plugin to the babel.config.js file for web support. This is necessary when using Reanimated with react-native-web.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/getting-started.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  module.exports = {\n      presets: [\n        ... // don't add it here :)\n      ],\n      plugins: [\n          ...\n          '@babel/plugin-proposal-export-namespace-from',\n          'react-native-reanimated/plugin',\n      ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Accurate Call Stacks in React Native Reanimated\nDESCRIPTION: This code snippet demonstrates how to wrap the existing Metro configuration with the Reanimated Metro config wrapper. It imports the wrapper function and applies it to the existing config object to improve call stack accuracy for Reanimated code.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/debugging/accurate-call-stacks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// metro.config.js\nconst {\n  wrapWithReanimatedMetroConfig,\n} = require('react-native-reanimated/metro-config');\n\nconst config = {\n  // Your existing Metro configuration options\n};\n\nmodule.exports = wrapWithReanimatedMetroConfig(config);\n```\n\n----------------------------------------\n\nTITLE: Listing Required Dependencies for Reanimated Babel Plugin\nDESCRIPTION: This snippet enumerates the dependencies required for the Reanimated Babel plugin to run. It includes core Babel packages and various Babel plugins and presets.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- `@babel/core`,\n  included in it as _dependencies_:\n  - `@babel/traverse`,\n  - `@babel/generator`,\n- `convert-source-map`,\n- `@babel/preset-typescript`,\n- `@babel/@babel/plugin-transform-shorthand-properties`,\n- `@babel/plugin-transform-shorthand-properties`,\n- `@babel/plugin-transform-arrow-functions`,\n- `@babel/plugin-proposal-optional-chaining`,\n- `@babel/plugin-proposal-nullish-coalescing-operator`,\n- `@babel/plugin-transform-template-literals`.\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Member Card Structure in HTML/Markdown\nDESCRIPTION: HTML structure for displaying team member information including profile image, name and Twitter handle.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/community.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"community-holder-container\">\n\n  <div class=\"community-holder-container-item\">\n    <div class=\"community-imageHolder\">\n      <img src=\"https://ca.slack-edge.com/T03Q9AMJJ-U0F40CATS-d0a2e7559a1b-512\" />\n    </div>\n    <div>Krzysztof Magiera</div>\n    <a href=\"https://twitter.com/kzzzf\">@kzzzf</a>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Web Sensor Hook Error Message\nDESCRIPTION: Error message displayed when attempting to use useAnimatedSensor hook in web environment.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/debugging.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[Reanimated] useAnimatedSensor is not available on web yet.\n```\n\n----------------------------------------\n\nTITLE: Single Event Attribute Handling in React Native Reanimated\nDESCRIPTION: Example of handling a single event attribute (translationX) using react-native-reanimated's event function. The code demonstrates how to set up an event handler that updates a reanimated value based on gesture translation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/event.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { event, set } from 'react-native-reanimated';\n\nthis.onGestureEvent = event([\n  {\n    nativeEvent: {\n      translationX: (x) => set(this._x, x),\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Dependencies\nDESCRIPTION: Commands to navigate to iOS directory and install CocoaPods dependencies.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cd ios\n  pod install\n```\n\n----------------------------------------\n\nTITLE: Customizing Time-based LightSpeed Animation in React Native Reanimated\nDESCRIPTION: Example of customizing a LightSpeed animation using time-based modifiers. It sets the duration to 500ms and uses the Easing.ease function for the animation curve.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nLightSpeedOutLeft.duration(500).easing(Easing.ease);\n```\n\n----------------------------------------\n\nTITLE: Complete Animation Testing Example\nDESCRIPTION: Comprehensive example showing how to test an animated component, including style checking and animation timing control.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest('stop in a middle of animation', () => {\n  withReanimatedTimer(() => {\n    const style = { width: 0 };\n\n    const { getByTestId } = render(<AnimatedComponent />);\n    const view = getByTestId('view');\n    const button = getByTestId('button');\n\n    expect(view.props.style.width).toBe(0);\n    expect(view).toHaveAnimatedStyle(style);\n\n    fireEvent.press(button);\n    advanceAnimationByTime(250); // if whole animation duration is a 500ms\n    style.width = 46.08; // value of component width after 250ms of animation\n    expect(view).toHaveAnimatedStyle(style);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Bundler\nDESCRIPTION: Commands to return to MacOSExample directory and start the Metro bundler.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/macos-example/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Worklet Context Object Example\nDESCRIPTION: Demonstration of a Worklet Context Object with preserved this binding\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/about.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst workletContextObject = {\n  __workletContextObject: true,\n  message: 'Hello from WorkletContextObject',\n  foo() {\n    console.log(this.message);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example File Path for Worklet API Testing\nDESCRIPTION: Specifies the file path for testing Worklet API, Layout Animations and Shared Element Transitions in the common app\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/contributing.mdx#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\napps/common-app/src/apps/reanimated/examples/EmptyExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Reanimated Plugin in Babel Configuration\nDESCRIPTION: Example of how to configure the Reanimated plugin in a babel.config.js file. Shows how to pass options to enable features like relative source location, disable inline styles warning, and configure other plugin behaviors.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/options.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  ...\n  plugins: [\n    ...\n    [\n      'react-native-reanimated/plugin',\n      {\n        relativeSourceLocation: true,\n        disableInlineStylesWarning: true,\n        processNestedWorklets: true,\n        omitNativeOnlyData: true,\n        globals: ['myObjectOnUI'],\n        substituteWebPlatformChecks: true,\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Sponsor Card Structure in HTML/Markdown\nDESCRIPTION: HTML structure for displaying sponsor information including company logo and name with linking to sponsor website.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/community.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"community-holder-container\">\n\n  <div class=\"community-holder-container-item\">\n    <a href=\"https://www.shopify.com/\">\n      <div class=\"community-imageHolder\">\n        <img src=\"https://avatars1.githubusercontent.com/u/8085?v=3&s=100\" />\n      </div>\n      <div>Shopify</div>\n    </a>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Props in React Native Reanimated\nDESCRIPTION: Demonstrates the two main configuration functions used to whitelist additional properties for native animations. addWhitelistedNativeProps() handles properties affecting layout calculations, while addWhitelistedUIProps() manages other UI properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/config.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddWhitelistedNativeProps()\n```\n\nLANGUAGE: javascript\nCODE:\n```\naddWhitelistedUIProps()\n```\n\n----------------------------------------\n\nTITLE: Implementing InteractiveExample with Video in React Native Reanimated Documentation\nDESCRIPTION: Shows how to embed an interactive example with a video component in documentation using the InteractiveExample component. It imports raw source code and displays a themed video that adapts to light/dark modes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/contributing.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport AnimatedKeyboardSrc from '!!raw-loader!@site/src/examples/AnimatedKeyboard';\n\n<InteractiveExample\n  src={AnimatedKeyboardSrc}\n  component={\n    <ThemedVideo\n      center\n      width={300}\n      sources={{\n        light: '/recordings/useAnimatedKeyboard_light.mov',\n        dark: '/recordings/useAnimatedKeyboard_dark.mov',\n      }}\n    />\n  }\n/>;\n```\n\n----------------------------------------\n\nTITLE: Calculating Logarithm of Animated Value in React Native Reanimated\nDESCRIPTION: The 'log' function computes the natural logarithm of the given animated node or number. It is used to perform logarithmic operations on animated values in React Native Reanimated animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/log.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlog(nodeOrNumber);\n```\n\n----------------------------------------\n\nTITLE: Basic useAnimatedSensor Hook Signature\nDESCRIPTION: Definition of the useAnimatedSensor hook showing its parameters and return type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedSensor.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseAnimatedSensor(sensorType: [SensorType], config?: [UserConfig]) -> [AnimatedSensor]\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Reanimated with Expo\nDESCRIPTION: Command to install the react-native-reanimated package in an Expo project.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/getting-started.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Importing useSharedValue in React Native Reanimated\nDESCRIPTION: Demonstrates how to import the useSharedValue hook from React Native Reanimated, which is used to create shared values for animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Example of Nested Worklets Implementation\nDESCRIPTION: Demonstration of nested worklets functionality and potential threading issues\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/options.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction outerWorklet() {\n  'worklet';\n  function innerWorklet() {\n    'worklet';\n  }\n  runOnSomeOtherThread(innerWorklet)();\n}\n\nrunOnUI(outerWorklet)();\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pods\nDESCRIPTION: Commands to navigate to the iOS directory and install CocoaPods dependencies.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/macos-example/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Roll Animation Modifiers\nDESCRIPTION: Example of using common animation modifiers like delay, randomDelay, and callbacks with Roll animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nRollInRight.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateX: 100 }, { rotate: '-45deg' }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Reduced Motion in Layout Animations\nDESCRIPTION: Example of applying reduced motion settings to layout animations using the BounceIn animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/accessibility.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BounceIn } from 'react-native-reanimated';\n\nfunction App() {\n  const entering = BounceIn.reduceMotion(ReduceMotion.System);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Production Build of NextExample App\nDESCRIPTION: These commands create a production build of the NextExample app and then start the server to run it. This is useful for testing the app in a production-like environment.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/next-example/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Workletization with Sequence Expression in TypeScript\nDESCRIPTION: Example showing how workletization works with Sequence Expressions in TypeScript. Only the last element of a sequence expression gets workletized, which is an important edge case to understand.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction foo() {\n  (0, bar, foobar)({ // only foobar will get workletized!\n    barfoo() {\n      'worklet';\n      console.log('Hello from Sequence Expression');\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake project for React Native Reanimated Worklets\nDESCRIPTION: Configures the CMake project with minimum required version, C++ standard setting, and compiler options including compilation flags for different build environments, JS runtimes, and architecture types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/android/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(Worklets)\ncmake_minimum_required(VERSION 3.8)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nset(CMAKE_CXX_STANDARD 20)\n\n# default CMAKE_CXX_FLAGS: \"-g -DANDROID -fdata-sections -ffunction-sections\n# -funwind-tables -fstack-protector-strong -no-canonical-prefixes\n# -D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security -fstack-protector-all\"\ninclude(\"${REACT_NATIVE_DIR}/ReactAndroid/cmake-utils/folly-flags.cmake\")\nadd_compile_options(${folly_FLAGS})\n\nstring(\n  APPEND\n  CMAKE_CXX_FLAGS\n  \" -DREACT_NATIVE_MINOR_VERSION=${REACT_NATIVE_MINOR_VERSION} \\\n  -DREANIMATED_VERSION=${REANIMATED_VERSION} \\\n  -DHERMES_ENABLE_DEBUGGER=${HERMES_ENABLE_DEBUGGER}\")\n\nstring(APPEND CMAKE_CXX_FLAGS\n       \" -fexceptions -fno-omit-frame-pointer -frtti -fstack-protector-all \\\n  -std=c++${CMAKE_CXX_STANDARD} -Wall -Werror\")\n\nif(${IS_NEW_ARCHITECTURE_ENABLED})\n  string(APPEND CMAKE_CXX_FLAGS \" -DRCT_NEW_ARCH_ENABLED\")\nendif()\n\nif(${IS_REANIMATED_EXAMPLE_APP})\n  string(APPEND CMAKE_CXX_FLAGS \" -DIS_REANIMATED_EXAMPLE_APP -Wpedantic\")\nendif()\n\nif(NOT ${CMAKE_BUILD_TYPE} MATCHES \"Debug\")\n  string(APPEND CMAKE_CXX_FLAGS \" -DNDEBUG\")\nendif()\n\nif(${JS_RUNTIME} STREQUAL \"hermes\")\n  string(APPEND CMAKE_CXX_FLAGS \" -DJS_RUNTIME_HERMES=1\")\nelseif(${JS_RUNTIME} STREQUAL \"jsc\")\n  string(APPEND CMAKE_CXX_FLAGS \" -DJS_RUNTIME_JSC=1\")\nelseif(${JS_RUNTIME} STREQUAL \"v8\")\n  string(APPEND CMAKE_CXX_FLAGS \" -DJS_RUNTIME_V8=1\")\nelse()\n  message(FATAL_ERROR \"Unknown JS runtime ${JS_RUNTIME}.\")\nendif()\n\n# Resolves \"CMake Warning: Manually-specified variables were not used by the\n# project\" when any of the following variables is not used in some build\n# configuration.\nset(IGNORE_ME \"${JS_RUNTIME_DIR}\")\n\nset(BUILD_DIR \"${CMAKE_SOURCE_DIR}/build\")\nset(ANDROID_CPP_DIR \"${CMAKE_SOURCE_DIR}/src/main/cpp\")\nset(COMMON_CPP_DIR \"${CMAKE_SOURCE_DIR}/../Common/cpp\")\n\nadd_subdirectory(\"${ANDROID_CPP_DIR}/worklets\")\n```\n\n----------------------------------------\n\nTITLE: Invalid External Library Function Call Pattern\nDESCRIPTION: Demonstrates an incorrect way of calling external library functions using runOnJS, which may not work due to how Object.defineProperty is used internally.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/runonJS.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseDerivedValue(() => {\n  runOnJS(externalLibraryFunction)(args);\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping Clock Evaluation in React Native Reanimated\nDESCRIPTION: Function that stops the evaluation of nodes dependent on a given clockNode. Important to note that the clock continues updating its value internally, but prevents dependent nodes from evaluating when the clock updates. For preserving the stop time, it's recommended to use Value.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/stopClock.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstopClock(clockNode);\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Future Implementation\nDESCRIPTION: A developer note in the form of an HTML comment indicating that this is a temporary component that should be replaced by a valid implementation in the future.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/_shared/_unreleased_info.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- TODO - this is a temporary component. It should be replaced by the valid implementation in the future. -->\n```\n\n----------------------------------------\n\nTITLE: Using the 'not' Function in React Native Reanimated\nDESCRIPTION: The `not` function takes a node as an argument and returns 1 if the node evaluates to a falsy value, and 0 otherwise. This is useful for inverting boolean conditions in Reanimated animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/not.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnot(node);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Virtual Text Components in React Native\nDESCRIPTION: This snippet illustrates how React Native transforms nested Text components into virtual components, which cannot be animated using Reanimated. It shows the original JSX structure and the resulting native view hierarchy.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/about.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n   string1\n   <Text>string2</Text>\n</Text>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<RCTTextView>\n   string1\n   <RCTVirtualText>string2</RCTVirtualText>\n</RCTTextView>\n```\n\n----------------------------------------\n\nTITLE: Importing Animated from Reanimated\nDESCRIPTION: Basic import statement for using Animated component from react-native-reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation Project Structure\nDESCRIPTION: Shows the main directories and files in the Reanimated documentation project, including docs containing markdown files, src with components and examples, and static with images and recordings.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/contributing.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n├── docs // contains folder with md/mdx files, each folder is a section in the side navigation, and each file is documentation page\n├── src\n│   ├── components // contains components used to make the pages interactive\n│   └── examples // contains examples that are later presented in the documentation\n└── static\n    ├── img // contains images used in the docs\n    └── recordings // contains video recordings of the examples\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setNativeProps in React Native Reanimated\nDESCRIPTION: This type definition describes the function signature for setNativeProps, showing that it accepts an AnimatedRef to a Component and an object of style props to update. The function returns void.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/setNativeProps.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setNativeProps<T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  updates: StyleProps\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Build Issues\nDESCRIPTION: Command to clean up Pods and build directories when encountering build problems.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/macos-example/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf Pods Podfile.lock build\n```\n\n----------------------------------------\n\nTITLE: Metro Endpoint JSON Response with Reanimated Runtime\nDESCRIPTION: Extended JSON response from Metro showing both the standard React Native Hermes runtime and the additional Reanimated Hermes runtime, demonstrating how multiple JavaScript engines appear in the debugger interface.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/Common/cpp/worklets/WorkletRuntime/RuntimeInitialization.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"0-2\",\n    \"description\": \"com.fabricexample\",\n    \"title\": \"Reanimated Runtime\",\n    \"faviconUrl\": \"https://reactjs.org/favicon.ico\",\n    \"devtoolsFrontendUrl\": \"devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=%5B%3A%3A1%5D%3A8081%2Finspector%2Fdebug%3Fdevice%3D0%26page%3D3\",\n    \"type\": \"node\",\n    \"webSocketDebuggerUrl\": \"ws://[::1]:8081/inspector/debug?device=1&page=2\",\n    \"vm\": \"Hermes\"\n  },\n  {\n    \"id\": \"0-1\",\n    \"description\": \"com.fabricexample\",\n    \"title\": \"Hermes React Native\",\n    \"faviconUrl\": \"https://reactjs.org/favicon.ico\",\n    \"devtoolsFrontendUrl\": \"devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=%5B%3A%3A1%5D%3A8081%2Finspector%2Fdebug%3Fdevice%3D0%26page%3D2\",\n    \"type\": \"node\",\n    \"webSocketDebuggerUrl\": \"ws://[::1]:8081/inspector/debug?device=1&page=1\",\n    \"vm\": \"Hermes\"\n  },\n  {\n    \"id\": \"0--1\",\n    \"description\": \"com.fabricexample\",\n    \"title\": \"React Native Experimental (Improved Chrome Reloads)\",\n    \"faviconUrl\": \"https://reactjs.org/favicon.ico\",\n    \"devtoolsFrontendUrl\": \"devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=%5B%3A%3A1%5D%3A8081%2Finspector%2Fdebug%3Fdevice%3D0%26page%3D-1\",\n    \"type\": \"node\",\n    \"webSocketDebuggerUrl\": \"ws://[::1]:8081/inspector/debug?device=1&page=-1\",\n    \"vm\": \"don't use\"\n  },\n  {\n    \"id\": \"0--2\",\n    \"description\": \"com.fabricexample\",\n    \"title\": \"Reanimated Runtime Experimental (Improved Chrome Reloads)\",\n    \"faviconUrl\": \"https://reactjs.org/favicon.ico\",\n    \"devtoolsFrontendUrl\": \"devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=%5B%3A%3A1%5D%3A8081%2Finspector%2Fdebug%3Fdevice%3D0%26page%3D-2\",\n    \"type\": \"node\",\n    \"webSocketDebuggerUrl\": \"ws://[::1]:8081/inspector/debug?device=1&page=-2\",\n    \"vm\": \"don't use\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Temporary Info Box for Upcoming Reanimated Release\nDESCRIPTION: A markdown info box that notifies users that the referenced changes haven't been released yet and will be available in the next minor version of Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/_shared/_unreleased_info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::info\nThis page refers to changes that haven't been released yet. They will become available in the next minor release of Reanimated.\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Creating Accumulated Value Node in React Native Reanimated\nDESCRIPTION: The 'acc' function returns an accumulated value of the given node. It stores a sum of all evaluations of the given node, adding the current node's value to the sum each time it is evaluated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/acc.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nacc(node);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Commands for installing the required dependencies in both the project root directory and the FabricExample directory using Yarn package manager.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/fabric-example/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Easing Configuration Example in Reanimated\nDESCRIPTION: Example showing how to configure custom easing for timing animations using the Easing module.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withTiming.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Easing } from 'react-native-reanimated';\n\nwithTiming(sv.value, {\n  easing: Easing.bounce,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Reanimated Android Build with CMake\nDESCRIPTION: Complete CMake configuration that sets up the build environment for React Native Reanimated's Android native module. It includes source file collection, dependency management, include directory configuration, and library linking. Handles both new and old React Native architectures and different versions.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-reanimated/android/src/main/cpp/reanimated/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8)\n\nfile(GLOB_RECURSE REANIMATED_COMMON_CPP_SOURCES CONFIGURE_DEPENDS\n     \"${COMMON_CPP_DIR}/reanimated/*.cpp\")\nfile(GLOB_RECURSE REANIMATED_ANDROID_CPP_SOURCES CONFIGURE_DEPENDS\n     \"${ANDROID_CPP_DIR}/reanimated/*.cpp\")\n\nfind_package(fbjni REQUIRED CONFIG)\nfind_package(ReactAndroid REQUIRED CONFIG)\nfind_package(react-native-worklets REQUIRED CONFIG)\n\nadd_library(reanimated SHARED ${REANIMATED_COMMON_CPP_SOURCES}\n                              ${REANIMATED_ANDROID_CPP_SOURCES})\n\ntarget_include_directories(\n  reanimated\n  PRIVATE \"${COMMON_CPP_DIR}\"\n          \"${ANDROID_CPP_DIR}\"\n          \"${REACT_NATIVE_DIR}/ReactCommon\"\n          \"${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni/react/turbomodule\"\n          \"${REACT_NATIVE_DIR}/ReactCommon/callinvoker\"\n          \"${REACT_NATIVE_DIR}/ReactCommon/runtimeexecutor\")\n\nif(${IS_NEW_ARCHITECTURE_ENABLED})\n  target_include_directories(\n    reanimated\n    PRIVATE\n      \"${REACT_NATIVE_DIR}/ReactCommon/yoga\"\n      \"${REACT_NATIVE_DIR}/ReactCommon/react/renderer/graphics/platform/cxx\")\nendif()\n\nset_target_properties(reanimated PROPERTIES LINKER_LANGUAGE CXX)\n\ntarget_link_libraries(reanimated log ReactAndroid::jsi fbjni::fbjni android)\n\ntarget_link_libraries(reanimated react-native-worklets::worklets)\n\nif(ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n  target_link_libraries(reanimated ReactAndroid::reactnative)\nelse()\n  target_link_libraries(reanimated ReactAndroid::react_nativemodule_core)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Calculating Arc Sine in React Native Reanimated\nDESCRIPTION: Takes a node value as input and returns its arc sine (inverse sine) in radians. This function is part of the mathematical operations available in React Native Reanimated for animated values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/asin.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasin(node);\n```\n\n----------------------------------------\n\nTITLE: Installing Pods for iOS Development\nDESCRIPTION: This bash command installs pods for iOS development, which is necessary before running the app on iOS.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd ios && pod install && cd ..\n```\n\n----------------------------------------\n\nTITLE: Solution 2: Using runOnJS\nDESCRIPTION: Demonstrates how to execute a non-worklet function on the JS thread using runOnJS wrapper.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/troubleshooting.mdx#2025-04-16_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n function caller() {\n   'worklet';\n-  callee();\n+  runOnJS(callee)();\n }\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Comment for Future Implementation\nDESCRIPTION: This snippet demonstrates how to add an HTML comment in Markdown to indicate a temporary component that needs to be replaced in the future.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/_shared/_unreleased_info.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- TODO - this is a temporary component. It should be replaced by the valid implementation in the future. -->\n```\n\n----------------------------------------\n\nTITLE: Mounting Directory as Drive in Windows\nDESCRIPTION: Uses the 'subst' command to mount a specific directory as a drive letter in Windows. This can be helpful for shortening long project paths that may cause build issues.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/building-for-android-on-windows.md#2025-04-16_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nsubst H: C:\\Users\\Tomek\\AwesomeProject\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn after Resolution\nDESCRIPTION: Command to install project dependencies using Yarn after adding the Reanimated resolution to package.json.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/troubleshooting.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Keyframe Type Definitions in TypeScript\nDESCRIPTION: TypeScript type definitions for the Keyframe class and its supporting types. Includes types for frame definitions and available methods for configuring the animation.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/keyframe-animations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype FirstFrame =\n  | {\n      0: KeyframeProps & { easing?: never };\n      from?: never;\n    }\n  | {\n      0?: never;\n      from: KeyframeProps & { easing?: never };\n    };\n\ntype LastFrame =\n  | { 100?: KeyframeProps; to?: never }\n  | { 100?: never; to: KeyframeProps };\n\nexport type ValidKeyframeProps = FirstFrame &\n  LastFrame &\n  Record<number, KeyframeProps>;\n\nclass Keyframe {\n  constructor(definitions: ValidKeyframeProps;\n  duration(durationMs: number): Keyframe;\n  delay(delayMs: number): Keyframe;\n  reduceMotion(reduceMotionV: ReduceMotion): Keyframe;\n  withCallback(callback: (finished: boolean) => void): Keyframe;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the React Native Reanimated Expo App\nDESCRIPTION: Command to start the Expo development server. After running this command, options will be provided to open the app in a development build, emulator, simulator, or Expo Go.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/web-example/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start\n```\n\n----------------------------------------\n\nTITLE: Type Definition of scrollTo Function in React Native Reanimated\nDESCRIPTION: TypeScript type definition for the scrollTo function, showing its parameters including the animated reference, x and y coordinates, and animation toggle. The function works with any Component type.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/scroll/scrollTo.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollTo<T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  x: number,\n  y: number,\n  animated: boolean\n): void;\n```\n\n----------------------------------------\n\nTITLE: Running MacOS App via Command Line\nDESCRIPTION: Command to build and run the MacOS app directly from the command line.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/macos-example/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn react-native run-macos\n```\n\n----------------------------------------\n\nTITLE: Default Text Shadow Values in React Native Reanimated\nDESCRIPTION: This JSON snippet shows the default values that Reanimated provides for text shadow properties in every keyframe definition. These defaults explain why shadow styles aren't inherited from the element's style object and need to be explicitly defined in animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/supported-properties.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"textShadowColor\": \"#000\",\n  \"textShadowRadius\": 0,\n  \"textShadowOffset\": { \"width\": 0, \"height\": 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring local.properties for Android SDK and NDK paths\nDESCRIPTION: Example configuration for the local.properties file that specifies the paths to the Android SDK and NDK on the developer's machine. This file is required for building the library as a maven dependency.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-reanimated/android/README.md#2025-04-16_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nndk.dir=/Users/{username}/Library/Android/sdk/ndk-bundle\nsdk.dir=/Users/{username}/Library/Android/sdk\n```\n\n----------------------------------------\n\nTITLE: Incorrect runOnJS Usage Example\nDESCRIPTION: Shows an incorrect implementation where a function is defined within a UI thread callback, which will cause errors.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/threading/runOnJS.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nwithTiming(0, {}, () => {\n  // myFunction is defined on the UI thread 🚨\n  const myFunction = () => {\n    // ...\n  };\n  runOnJS(myFunction)(); // 💥\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM after Override\nDESCRIPTION: Command to install project dependencies using NPM after adding the Reanimated override to package.json.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/troubleshooting.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Displaying Info Notice in Markdown\nDESCRIPTION: This snippet shows how to create an info notice in Markdown to inform users about unreleased changes in Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/_shared/_unreleased_info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::info\nThis page refers to changes that haven't been released yet. They will become available in the next minor release of Reanimated.\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Cloning React Native Reanimated Repository\nDESCRIPTION: Commands to clone the React Native Reanimated repository and navigate to the project directory.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/macos-example/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/software-mansion/react-native-reanimated\ncd react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Installing Root Dependencies\nDESCRIPTION: Command to install node modules in the project root directory using yarn.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/macos-example/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Using React Native Reanimated Hooks Without Babel Plugin\nDESCRIPTION: Example of using React Native Reanimated hooks with explicit dependency arrays for web support without a Babel plugin.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/fundamentals/web-support.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst sv = useSharedValue(0);\nconst dv = useDerivedValue(\n  () => sv.value + 1,\n  [sv] // dependency array here\n);\n```\n\n----------------------------------------\n\nTITLE: Installing MacOS Pods\nDESCRIPTION: Commands to navigate to the MacOS directory and install CocoaPods dependencies.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/macos-example/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../macos\npod install\n```\n\n----------------------------------------\n\nTITLE: Installing MacOS Example Dependencies\nDESCRIPTION: Commands to navigate to MacOSExample directory and install its dependencies.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/macos-example/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd MacOSExample\nyarn\n```\n\n----------------------------------------\n\nTITLE: Resetting the React Native Reanimated Expo Project\nDESCRIPTION: Command to reset the project structure. This moves the starter code to an 'app-example' directory and creates a blank 'app' directory for fresh development.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/web-example/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run reset-project\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version in Windows Environment\nDESCRIPTION: Sets the CMake version to be used in the build process using an environment variable. This is useful when a specific CMake version is required for compatibility.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/building-for-android-on-windows.md#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset CMAKE_VERSION=3.31.1\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Animated Components with createAnimatedComponent\nDESCRIPTION: Shows how to create custom animated components by wrapping non-Reanimated components with createAnimatedComponent. This example demonstrates making SVG Circle component animatable.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\nimport { Circle } from 'react-native-svg';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n```\n\n----------------------------------------\n\nTITLE: Measure Function Type Definitions\nDESCRIPTION: TypeScript interface definitions for the measure function showing the structure of measurement results and function signature.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/measure.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MeasuredDimensions {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  pageX: number;\n  pageY: number;\n}\n\nfunction measure<T extends Component>(\n  animatedRef: AnimatedRef<T>\n): MeasuredDimensions | null;\n```\n\n----------------------------------------\n\nTITLE: Building NextExample App Without Minification\nDESCRIPTION: This command builds the project without minifying the code. It's useful for manually reviewing the created bundle, as the code remains readable and not compressed.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/next-example/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:disable-minification\n```\n\n----------------------------------------\n\nTITLE: Removing Untracked Files in Git Repository\nDESCRIPTION: Uses Git command to remove all untracked files in the repository, including hidden files. This can help clean up build artifacts and caches before attempting a rebuild.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/building-for-android-on-windows.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clean -fdX\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Dependencies with CocoaPods\nDESCRIPTION: Command to install the required CocoaPods dependencies for iOS with Fabric architecture support.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/fabric-example/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Running Android Application with Yarn\nDESCRIPTION: Command to build and run the application on an Android device or emulator using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/apps/fabric-example/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Using getRelativeCoords with useAnimatedGestureHandler in React Native Reanimated\nDESCRIPTION: This example demonstrates how to use getRelativeCoords inside a gesture handler to convert absolute touch coordinates to coordinates relative to a specific view. It requires a reference created with useAnimatedRef to be passed to the view that serves as the reference point.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/getRelativeCoords.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getRelativeCoords } from 'react-native-reanimated';\n\nconst Comp = () => {\n  const animatedRef = useAnimatedRef();\n  // ...\n\n  const gestureHandler = useAnimatedGestureHandler({\n    onEnd: (event) => {\n      const coords = getRelativeCoords(\n        animatedRef,\n        event.absoluteX,\n        event.absoluteY\n      );\n    },\n  });\n\n  return (\n    <View ref={aref}>\n      <PanGestureHandler onGestureEvent={gestureHandler}>\n        <Animated.View style={[styles.box]} />\n      </PanGestureHandler>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native Reanimated Android Native Components\nDESCRIPTION: This CMake configuration sets up the build process for React Native Reanimated's native components on Android. It defines paths for code-generated files and overwritten files, creates a library target, configures include directories, and sets up linking and compilation options.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-reanimated/Common/NativeView/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nset(ANDROID_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../android)\nset(CODEGEN_JNI_DIR ${ANDROID_DIR}/build/generated/source/codegen/jni)\nset(CODEGEN_COMPONENTS_DIR ${CODEGEN_JNI_DIR}/react/renderer/components/rnreanimated)\nfile(\n  GLOB CODEGEN_ORIGINAL_SRCS CONFIGURE_DEPENDS\n  ${CODEGEN_JNI_DIR}/*.cpp\n  ${CODEGEN_COMPONENTS_DIR}/*.cpp\n)\n\nset(CODEGEN_OVERWRITTEN_JNI_DIR .)\nset(CODEGEN_OVERWRITTEN_COMPONENTS_DIR ${CODEGEN_OVERWRITTEN_JNI_DIR}/react/renderer/components/rnreanimated)\nfile(\n  GLOB CODEGEN_OVERWRITTEN_SRCS CONFIGURE_DEPENDS \n  ${CODEGEN_OVERWRITTEN_JNI_DIR}/*.cpp\n  ${CODEGEN_OVERWRITTEN_COMPONENTS_DIR}/*.cpp\n)\n\nadd_library(\n  react_codegen_rnreanimated\n  OBJECT\n  ${CODEGEN_OVERWRITTEN_SRCS}\n  ${CODEGEN_ORIGINAL_SRCS}\n)\n\ntarget_include_directories(\n  react_codegen_rnreanimated\n  PUBLIC\n  ${CODEGEN_OVERWRITTEN_JNI_DIR}\n  ${CODEGEN_OVERWRITTEN_COMPONENTS_DIR}\n  ${CODEGEN_JNI_DIR}\n  ${CODEGEN_COMPONENTS_DIR}\n)\n\ntarget_link_libraries(\n  react_codegen_rnreanimated\n  fbjni\n  jsi\n  reactnative\n)\n\ntarget_compile_options(\n  react_codegen_rnreanimated\n  PRIVATE\n  -DLOG_TAG=\\\"ReactNative\\\"\n  -fexceptions\n  -frtti\n  -std=c++20\n  -Wall\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Animation Modifiers in React Native Reanimated\nDESCRIPTION: Example showing common animation modifiers that work with both time-based and spring-based animations. These include delay, randomDelay, reduceMotion, custom initial values, and callback functions for animation completion.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nRotateInDownLeft.delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({\n    transform: [{ rotate: '-90deg' }, { translateX: 100 }, { translateY: 100 }],\n  })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Cancelling Animations on Mutable Values in React\nDESCRIPTION: Shows how to properly cancel animations on mutable values when they are no longer needed, especially for infinite animations. This example uses useMemo to create the mutable value and cancelAnimation in the cleanup function of useEffect.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/makeMutable.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const mv = useMemo(() => makeMutable(0), []);\n\n  useEffect(() => {\n    mv.value = withRepeat(withSpring(100), -1, true); // creates an infinite animation\n\n    return () => {\n      cancelAnimation(mv); // ✅ stops the infinite animation on component unmount\n    };\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of makeMutable in React Component\nDESCRIPTION: Demonstrates an incorrect way of using makeMutable directly in a component scope. This creates a new mutable value on each render, causing the state of the previous mutable value to be lost.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/makeMutable.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [counter, setCounter] = useState(0);\n  const mv = makeMutable(counter); // 🚨 creates a new mutable value on each render\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCounter((prev) => prev + 1); // updates the counter stored in the component state\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [mv]);\n\n  useAnimatedReaction(\n    () => mv.value,\n    (value) => {\n      console.log(value); // prints 0, 1, 2, ...\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for useEvent in React Native Reanimated\nDESCRIPTION: This code block provides the TypeScript type definitions for the useEvent hook and related types. It defines the function signature and types for event handlers and processed event handlers.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/advanced/useEvent.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useEvent<\n  Event extends object,\n  Context extends Record<string, unknown> = never\n>(\n  handler: EventHandler<Event, Context>,\n  eventNames?: string[],\n  rebuild?: boolean\n): EventHandlerProcessed<Event, Context>;\n\ntype EventHandler<\n  Event extends object,\n  Context extends Record<string, unknown> = never\n> = (event: ReanimatedEvent<Event>, context?: Context) => void;\n\ntype EventHandlerProcessed<\n  Event extends object,\n  Context extends Record<string, unknown> = never\n> = (event: Event, context?: Context) => void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Example with Video in React Native Reanimated Docs\nDESCRIPTION: Shows how to create an interactive example with video content using the InteractiveExample component. The example includes a themed video player that supports both light and dark modes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/contributing.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport AnimatedKeyboardSrc from '!!raw-loader!@site/src/examples/AnimatedKeyboard';\n\n<InteractiveExample\n  src={AnimatedKeyboardSrc}\n  component={\n    <ThemedVideo\n      center\n      width={300}\n      sources={{\n        light: '/recordings/useAnimatedKeyboard_light.mov',\n        dark: '/recordings/useAnimatedKeyboard_dark.mov',\n      }}\n    />\n  }\n/>;\n```\n\n----------------------------------------\n\nTITLE: Metro Endpoint JSON Response for Regular React Native App\nDESCRIPTION: Example JSON response from the Metro development server's /json endpoint for a standard React Native app, showing the available debuggable JavaScript runtimes.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/Common/cpp/worklets/WorkletRuntime/RuntimeInitialization.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"0-1\",\n    \"description\": \"org.reactjs.native.example.FabricExample\",\n    \"title\": \"Hermes React Native\",\n    \"faviconUrl\": \"https://reactjs.org/favicon.ico\",\n    \"devtoolsFrontendUrl\": \"devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=%5B%3A%3A1%5D%3A8081%2Finspector%2Fdebug%3Fdevice%3D0%26page%3D1\",\n    \"type\": \"node\",\n    \"webSocketDebuggerUrl\": \"ws://[::1]:8081/inspector/debug?device=0&page=1\",\n    \"vm\": \"Hermes\"\n  },\n  {\n    \"id\": \"0--1\",\n    \"description\": \"org.reactjs.native.example.FabricExample\",\n    \"title\": \"React Native Experimental (Improved Chrome Reloads)\",\n    \"faviconUrl\": \"https://reactjs.org/favicon.ico\",\n    \"devtoolsFrontendUrl\": \"devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=%5B%3A%3A1%5D%3A8081%2Finspector%2Fdebug%3Fdevice%3D0%26page%3D-1\",\n    \"type\": \"node\",\n    \"webSocketDebuggerUrl\": \"ws://[::1]:8081/inspector/debug?device=0&page=-1\",\n    \"vm\": \"don't use\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Key Extractor Implementation for List Layout Animations in React Native Reanimated\nDESCRIPTION: Example demonstrating how to provide a custom keyExtractor function for Animated.FlatList when list items don't have default key or id properties. This ensures proper item identification during animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/list-layout-animations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      itemLayoutAnimation={LinearTransition}\n      // highlight-next-line\n      keyExtractor={customKeyExtractor}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for withDelay in React Native Reanimated\nDESCRIPTION: Provides TypeScript type definitions for the withDelay function, including the AnimatableValue type and the ReduceMotion enum. This helps developers understand the expected types for function arguments and return values.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/animations/withDelay.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimatableValue = number | string | number[];\n\nfunction withDelay<T extends AnimatableValue>(\n  delayMs: number,\n  delayedAnimation: T,\n  reduceMotion?: ReduceMotion\n): T;\n\nenum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Animated and Replacing View with Animated.View in React Native\nDESCRIPTION: This snippet shows how to import the Animated component from Reanimated and replace the standard View with Animated.View to enable animations.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/tutorials/LayoutAnimations/animated_list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n\nconst Participant = ({ name, onRemove }) => {\n  return (\n    <Animated.View style={styles.participant}>\n      <Text style={styles.participantName}>{name}</Text>\n      <TouchableOpacity onPress={onRemove}>\n        <Text style={styles.removeText}>Remove</Text>\n      </TouchableOpacity>\n    </Animated.View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Reanimated Hooks with Dependency Arrays in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Reanimated hooks without the Babel plugin by explicitly passing dependency arrays. It shows the correct usage of useDerivedValue with a dependency array.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/web-support.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sv = useSharedValue(0);\nconst dv = useDerivedValue(\n  () => sv.value + 1,\n  [sv] // dependency array here\n);\n```\n\n----------------------------------------\n\nTITLE: Animating Color Properties with useAnimatedProps\nDESCRIPTION: Shows how to animate color-related properties using useAnimatedProps and the processColor function for custom color properties.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useAnimatedProps.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { processColor } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedProps = useAnimatedProps(() => {\n    const mainColor = interpolateColor(\n      colorProgress.value,\n      [0, 1],\n      ['red', 'blue']\n    );\n\n    const bgColor = interpolateColor(\n      colorProgress.value,\n      [0, 1],\n      ['green', 'yellow']\n    );\n\n    return {\n      colors: processColor([mainColor, bgColor]),\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useFrameCallback Implementation in React Native\nDESCRIPTION: Demonstrates basic usage of useFrameCallback hook to execute a function on every frame update, with controls to start and stop the callback.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/useFrameCallback.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFrameCallback } from 'react-native-reanimated';\n\nfunction App() {\n  const frameCallback = useFrameCallback((frameInfo) => {\n    // Increment a value on every frame update\n    sv.value += 1;\n  });\n\n  return (\n    <Button\n      title=\"Start/Stop\"\n      onPress={() => frameCallback.setActive(!frameCallback.isActive)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using withDelay Modifier in React Native Reanimated\nDESCRIPTION: Demonstration of how to add a delay before an animation starts using the withDelay modifier. The first parameter specifies the delay duration in milliseconds, and the second parameter defines the animation to delay.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/applying-modifiers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withDelay } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(500, withTiming(0));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Extrapolation for interpolate\nDESCRIPTION: Example showing how to specify extrapolation for only one edge of the interpolation range by passing an object with the extrapolateLeft property set to CLAMP.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/utilities/interpolate.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst opacity = interpolate(\n  sv.value,\n  [0, 100],\n  [0, 1],\n  // highlight-next-line\n  { extrapolateLeft: Extrapolation.CLAMP }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Worklet Runtime in C++\nDESCRIPTION: Example demonstrating how to extract and use a worklet runtime in C++ code, including running guarded worklets with arguments.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/threading/createWorkletRuntime.mdx#2025-04-16_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nauto runtime = reanimated::extractWorkletRuntime(rt, runtimeValue);\n\njsi::Runtime &rt = runtime->getJSIRuntime();\n\nauto worklet = reanimated::extractShareableOrThrow<reanimated::ShareableWorklet>(rt, workletValue);\n\nruntime->runGuarded(worklet, ...args);\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based LightSpeed Animation in React Native Reanimated\nDESCRIPTION: Demonstration of configuring a LightSpeed animation using spring-based modifiers. It enables spring animation and sets various properties like damping, mass, stiffness, and thresholds.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nLightSpeedInLeft.springify()\n  .damping(30)\n  .mass(5)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useAnimatedKeyboard - TypeScript\nDESCRIPTION: TypeScript type definitions for the useAnimatedKeyboard hook, including function declaration, configuration options, and return types.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/device/useAnimatedKeyboard.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAnimatedKeyboard(\n  options: AnimatedKeyboardOptions\n): AnimatedKeyboardInfo;\n\nexport interface AnimatedKeyboardOptions {\n  isStatusBarTranslucentAndroid?: boolean;\n}\n\nexport type AnimatedKeyboardInfo = {\n  height: SharedValue<number>;\n  state: SharedValue<KeyboardState>;\n};\n\nexport enum KeyboardState {\n  UNKNOWN = 0,\n  OPENING = 1,\n  OPEN = 2,\n  CLOSING = 3,\n  CLOSED = 4,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GestureHandlerRootView in React Native\nDESCRIPTION: Wraps the app with GestureHandlerRootView to enable gesture handling throughout the application. This setup is crucial for proper gesture recognition and interaction.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/fundamentals/handling-gestures.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nfunction App() {\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      {/* rest of the app */}\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bounce Animation in React Native Reanimated\nDESCRIPTION: Shows how to customize a BounceInDown animation with duration, delay, and other modifiers using Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBounceInDown.duration(500)\n  .delay(500)\n  .randomDelay()\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateY: -420 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Correct External Library Function Call Pattern\nDESCRIPTION: Shows the proper way to wrap external library functions for use with runOnJS using a wrapper function to maintain proper context.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/runonJS.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst wrapper = (args) => {\n  externalLibraryFunction(args);\n};\nuseDerivedValue(() => {\n  runOnJS(wrapper)(args);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing GestureHandlerRootView in React Native\nDESCRIPTION: Basic setup for gesture handling by wrapping the app with GestureHandlerRootView component. This is a required root component for gesture handling functionality.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/handling-gestures.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nfunction App() {\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      {/* rest of the app */}\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using setNativeProps in React Native Reanimated\nDESCRIPTION: Demonstrates how to use setNativeProps to update a TextInput component's text property within a gesture handler.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/setNativeProps.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { setNativeProps } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const tap = Gesture.Tap().onEnd(() => {\n    // highlight-start\n    setNativeProps(animatedRef, { text: '' });\n    // highlight-end\n  });\n\n  return <TextInput ref={animatedRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Worklet with Built-in Value\nDESCRIPTION: Example of a worklet using a built-in value (null) that doesn't need to be copied to the UI thread since it's already available there.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/reanimated-babel-plugin/options.md#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction bar() {\n  'worklet';\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bounce Animations in React Native Reanimated\nDESCRIPTION: Shows how to use BounceIn and BounceOut animations to create bouncing effects for entering and exiting components.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/entering-exiting-animations.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BounceIn, BounceOut } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View entering={BounceIn} exiting={BounceOut} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration Example with Reanimated Plugin Options\nDESCRIPTION: Example showing how to configure the Reanimated Babel plugin with various options in babel.config.js\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/reanimated-babel-plugin/options.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  ...\n  plugins: [\n    ...\n    [\n      'react-native-worklets/plugin',\n      {\n        relativeSourceLocation: true,\n        disableInlineStylesWarning: true,\n        processNestedWorklets: true,\n        omitNativeOnlyData: true,\n        globals: ['myObjectOnUI'],\n        substituteWebPlatformChecks: true,\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of withRepeat in React Native Reanimated\nDESCRIPTION: Demonstrates how to use the withRepeat function to repeat an animation in a React Native application using Reanimated.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/animations/withRepeat.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withRepeat } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withRepeat(withSpring(0), 5);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Reduced Motion Warning Ignore in React Native\nDESCRIPTION: Code example showing how to ignore the reduced motion warning in development mode using LogBox.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/troubleshooting.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nLogBox.ignoreLogs([\n  '[Reanimated] Reduced motion setting is enabled on this device.',\n]);\n```\n\n----------------------------------------\n\nTITLE: Example File Path for CSS Animation Testing\nDESCRIPTION: Specifies the file path for testing CSS animations in the common app\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/guides/contributing.mdx#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\napps/common-app/src/apps/css/examples/animations/screens/testExamples/Playground.tsx\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useAnimatedStyle in TypeScript\nDESCRIPTION: Provides TypeScript type definitions for the useAnimatedStyle hook, including the function signature and its parameters.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/core/useAnimatedStyle.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype DefaultStyle = ViewStyle | ImageStyle | TextStyle;\ntype DependencyList = Array<unknown> | undefined;\n\nexport function useAnimatedStyle<Style extends DefaultStyle>(\n  updater: () => Style,\n  dependencies?: DependencyList | null\n): Style;\n```\n\n----------------------------------------\n\nTITLE: Adding patch-package to project\nDESCRIPTION: Command to add patch-package to the project and set it up as a post-install task for debugging with Chrome DevTools.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/versioned_docs/version-3.x/guides/debugging-worklets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add patch-package postinstall-postinstall\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Reanimated with Yarn\nDESCRIPTION: This bash command installs the next version of React Native Reanimated using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-reanimated/blob/main/packages/docs-reanimated/docs/fundamentals/getting-started.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n    yarn add react-native-reanimated@next\n```"
  }
]