[
  {
    "owner": "geekscape",
    "repo": "aiko_services",
    "content": "TITLE: Implementing a Basic Aiko Services Actor in Python\nDESCRIPTION: This is the complete implementation of the AlohaHonua Actor, which is a minimal working example that demonstrates the core functionality of the Aiko Services framework. It shows how to define an Actor class, implement its initialization method, and define a function that can be invoked remotely.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/src/aiko_services/examples/aloha_honua/ReadMe.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiko_services.main import *\n\nclass AlohaHonua(Actor):\n    def __init__(self, context):\n        context.get_implementation(\"Actor\").__init__(self, context)\n        print(f\"MQTT topic: {self.topic_in}\")\n\n    def aloha(self, name):\n        self.logger.info(f\"AlohaHonua {name} !\")\n\nif __name__ == \"__main__\":\n    init_args = actor_args(\"aloha_honua\")\n    aloha_honua = compose_instance(AlohaHonua, init_args)\n    aiko.process.run()\n```\n\n----------------------------------------\n\nTITLE: Running the AlohaHonua Actor Example\nDESCRIPTION: This bash snippet shows how to navigate to the examples directory and run the AlohaHonua Actor. The output shows the automatically generated MQTT topic that the Actor will listen to for incoming messages.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/src/aiko_services/examples/aloha_honua/ReadMe.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Use another terminal session, also starting at the top-level of the repository\ncd examples/aloha_honua\n./aloha_honua_0.py\n    MQTT topic: aiko/nomad.local/123/1/in\n```\n\n----------------------------------------\n\nTITLE: Starting the Aiko Services System\nDESCRIPTION: Command to start the Mosquitto MQTT server, Aiko registrar, and Aiko dashboard on Linux or Mac OS X. Uses the system_start.sh script with the default MQTT host set to localhost.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/ReadMe.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/system_start.sh  # default AIKO_MQTT_HOST=localhost\n```\n\n----------------------------------------\n\nTITLE: Starting Core Services for Aiko Framework\nDESCRIPTION: This bash snippet demonstrates how to start the core services required by the Aiko Services framework, including the Mosquitto MQTT server and the Aiko Registrar, using the provided system_start.sh script.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/src/aiko_services/examples/aloha_honua/ReadMe.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Current working directory should be the top-level of the Aiko Services repository\n# The first command starts mosquitto, Aiko Registrar and Aiko Dashboard\n./scripts/system_start.sh\n    Starting: /usr/sbin/mosquitto\n    Starting: aiko_registrar\n```\n\n----------------------------------------\n\nTITLE: Installing Aiko Services from PyPI\nDESCRIPTION: Command for installing the Aiko Services package from the Python Package Index (PyPI). This is the recommended method when trying out existing examples and tools.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/ReadMe.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install aiko_services\n```\n\n----------------------------------------\n\nTITLE: Installing Aiko Services from GitHub for Development\nDESCRIPTION: Series of commands to clone and set up the Aiko Services repository from GitHub for development purposes. This includes creating a virtual environment and installing the package in development mode.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/ReadMe.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/geekscape/aiko_services.git\ncd aiko_services\npython3 -m venv venv      # Once only\nsource venv/bin/activate  # Each terminal session\npip install -U pip        # Install latest pip\npip install -e .          # Install Aiko Services for development\n```\n\n----------------------------------------\n\nTITLE: Using Delayed Message Posting in ActorImpl\nDESCRIPTION: Illustrates how to use the new delay parameter in ActorImpl._post_message() for invoking methods in the future, useful for coordinating with remote Pipeline lifecycle states.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/documentation/release_notes.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom aiko.actor import ActorImpl\n\nclass MyActor(ActorImpl):\n    def some_method(self):\n        # Post a message to be executed after a 5-second delay\n        self._post_message('delayed_method', delay=5)\n    \n    def delayed_method(self):\n        print(\"This method was executed after a delay\")\n```\n\n----------------------------------------\n\nTITLE: Implementing PE_Inspect PipelineElement in Python\nDESCRIPTION: Shows how to use the new PE_Inspect PipelineElement to write selected output values to various destinations such as console, log, or file.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/documentation/release_notes.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom aiko.pipeline import Pipeline, PE_Inspect\n\n# Example pipeline with PE_Inspect\npipeline = Pipeline([\n    # Other pipeline elements...\n    PE_Inspect(output_destination='console', keys=['result', 'confidence'])\n])\n\n# The PE_Inspect element will write the 'result' and 'confidence' values to the console\n```\n\n----------------------------------------\n\nTITLE: Configuring Aiko Services Logging Options\nDESCRIPTION: These bash commands demonstrate different ways to configure logging behavior in Aiko Services Actors, including setting the log level and controlling whether logs are sent to MQTT, the console, or both.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/src/aiko_services/examples/aloha_honua/ReadMe.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nAIKO_LOG_LEVEL=DEBUG ./aloha_honua_0.py\n\nAIKO_LOG_MQTT=all   ./aloha_honua_0.py  # Default log to both MQTT and console\nAIKO_LOG_MQTT=true  ./aloha_honua_0.py  # Log only to MQTT\nAIKO_LOG_MQTT=false ./aloha_honua_0.py  # Log only to the terminal console\n```\n\n----------------------------------------\n\nTITLE: Stopping Aiko Services and Core Components\nDESCRIPTION: This bash snippet illustrates how to properly stop the AlohaHonua Actor, the Aiko Dashboard, and the Core Services using the system_stop.sh script, ensuring clean termination of all processes.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/src/aiko_services/examples/aloha_honua/ReadMe.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Type Control-C to stop the ./aloha_honua_0.py program\n\n# Select the terminal session running the Aiko Dashboard and press the \"x\" key\n\n# Then stop the Core Services\n../../scripts/system_stop.sh\n    Stopping: aiko_registrar\n    Stopping: /usr/sbin/mosquitto\n```\n\n----------------------------------------\n\nTITLE: Handling Quoted Strings in S-Expressions\nDESCRIPTION: Demonstrates the new support for both single-quoted and double-quoted strings in S-Expressions, improving flexibility in data representation.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/documentation/release_notes.md#2025-04-21_snippet_3\n\nLANGUAGE: Lisp\nCODE:\n```\n; Example S-Expression with quoted strings\n(define person\n  (name \"John Doe\")\n  (age 30)\n  (address '123 Main St')\n  (city \"New York\"))\n```\n\n----------------------------------------\n\nTITLE: Using StreamEvent Constants in Python\nDESCRIPTION: Demonstrates the use of StreamEvent constants for managing media streams in Aiko Services. These constants are used to signal the status of streams.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/documentation/release_notes.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom aiko import StreamEvent\n\n# Example usage\nif stream_status == StreamEvent.OKAY:\n    # Process stream\nelif stream_status == StreamEvent.STOP:\n    # Stop processing\nelif stream_status == StreamEvent.ERROR:\n    # Handle error\n```\n\n----------------------------------------\n\nTITLE: Installing Aiko Services for Package Maintenance\nDESCRIPTION: Commands for package maintainers to build and publish Aiko Services to PyPI. Uses Hatch as the build and package manager to handle dependencies and distribution.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/ReadMe.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -U hatch  # Install latest Hatch build and package manager\nhatch shell           # Run shell using Hatch to manage dependencies\n# hatch test          # Run local tests (to be completed)\nhatch build           # Publish Aiko Services package to PyPI\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Dependencies in pyproject.toml\nDESCRIPTION: Updated Python package dependency version numbers in the pyproject.toml file to ensure compatibility with the latest Aiko Services release.\nSOURCE: https://github.com/geekscape/aiko_services/blob/master/documentation/release_notes.md#2025-04-21_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n# Example of updated dependencies in pyproject.toml\n[tool.poetry.dependencies]\npython = \"^3.12\"\nopencv-python = \"^4.8.0\"\nlangchain = \"^0.0.300\"\ndeepface = \"^0.0.79\"\ntorch = \"^2.0.1\"\nultralytics = \"^8.0.145\"\n```"
  }
]