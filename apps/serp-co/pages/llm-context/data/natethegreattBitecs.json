[
  {
    "owner": "natethegreatt",
    "repo": "bitecs",
    "content": "TITLE: Implementing a Simple ECS System with bitECS in JavaScript\nDESCRIPTION: This example demonstrates how to create a complete ECS implementation with bitECS. It defines components with vector properties, creates queries, implements movement and time systems, establishes a processing pipeline, and sets up an entity with position and velocity components that update on an interval.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/README.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createWorld,\n  Types,\n  defineComponent,\n  defineQuery,\n  addEntity,\n  addComponent,\n  pipe,\n} from 'bitecs'\n\nconst Vector3 = { x: Types.f32, y: Types.f32, z: Types.f32 }\nconst Position = defineComponent(Vector3)\nconst Velocity = defineComponent(Vector3)\n\nconst movementQuery = defineQuery([Position, Velocity])\n\nconst movementSystem = (world) => {\n  const { time: { delta } } = world\n  const ents = movementQuery(world)\n  for (let i = 0; i < ents.length; i++) {\n    const eid = ents[i]\n    Position.x[eid] += Velocity.x[eid] * delta\n    Position.y[eid] += Velocity.y[eid] * delta\n    Position.z[eid] += Velocity.z[eid] * delta\n  }\n  return world\n}\n\nconst timeSystem = world => {\n  const { time } = world\n  const now = performance.now()\n  const delta = now - time.then\n  time.delta = delta\n  time.elapsed += delta\n  time.then = now\n  return world\n}\n\nconst pipeline = pipe(movementSystem, timeSystem)\n\nconst world = createWorld()\nworld.time = { delta: 0, elapsed: 0, then: performance.now() }\n\nconst eid = addEntity(world)\naddComponent(world, Position, eid)\naddComponent(world, Velocity, eid)\nVelocity.x[eid] = 1.23\nVelocity.y[eid] = 1.23\n\nsetInterval(() => {\n  pipeline(world)\n}, 16)\n```\n\n----------------------------------------\n\nTITLE: Importing Essential Functions from bitECS in JavaScript\nDESCRIPTION: This snippet shows how to import the core functions and types from the bitECS library. These imports provide the foundation for creating and managing entity component systems.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/INTRO.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\n  createWorld,\n  addEntity,\n  removeEntity,\n\n  Types,\n\n  defineComponent,\n  addComponent,\n  removeComponent,\n  hasComponent,\n  \n  defineQuery,\n  Changed,\n  Not,\n  enterQuery,\n  exitQuery,\n  \n  defineSerializer,\n  defineDeserializer,\n\n  pipe,\n\n} from 'bitecs'\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Components in bitECS\nDESCRIPTION: This snippet demonstrates how to define component stores, add components to entities, and interact with component data. Components are pure data structures associated with entities.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/INTRO.md#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Vector3 = { x: Types.f32, y: Types.f32, z: Types.f32 }\nconst Position = defineComponent(Vector3)\nconst Velocity = defineComponent(Vector3)\nconst List = defineComponent({ values: [Types.f32, 3] }) // [type, length]\nconst Tag = defineComponent()\nconst Reference = defineComponent({ entity: Types.eid }) // Types.eid is used as a reference type\n```\n\nLANGUAGE: javascript\nCODE:\n```\naddComponent(world, Position, eid)\naddComponent(world, Velocity, eid)\naddComponent(world, List, eid)\naddComponent(world, Tag, eid)\naddComponent(world, Reference, eid)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPosition.x[eid] = 1\nPosition.y[eid] = 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReference.entity[eid] = eid2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nList.values[eid].set([1,2,3])\nconsole.log(List.values[eid]) // => Float32Array(3) [ 1, 2, 3 ]\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Queries in bitECS\nDESCRIPTION: This snippet demonstrates how to define and use queries in bitECS. Queries are used to obtain specific sets of entities from a world based on their components.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/INTRO.md#2025-04-15_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst movementQuery = defineQuery([Position, Velocity])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst ents = movementQuery(world)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst positionWithoutVelocityQuery = defineQuery([ Position, Not(Velocity) ])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst changedPositionQuery = defineQuery([ Changed(Position) ])\n\nlet ents = changedPositionQuery(world)\nconsole.log(ents) // => []\n\nPosition.x[eid]++\n\nents = changedPositionQuery(world)\nconsole.log(ents) // => [0]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst enteredMovementQuery = enterQuery(movementQuery)\nconst enteredEnts = enteredMovementQuery(world)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst exitedMovementQuery = exitQuery(movementQuery)\nconst exitedEnts = exitedMovementQuery(world)\n```\n\n----------------------------------------\n\nTITLE: Implementing Systems in bitECS\nDESCRIPTION: This snippet shows how to implement systems in bitECS. Systems are functions that update component state of entities or perform other operations on the world.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/INTRO.md#2025-04-15_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst movementSystem = (world) => {\n  // optionally apply logic to entities added to the query\n  const entered = enteredMovementQuery(world)\n  for (let i = 0; i < entered.length; i++) {\n    const eid = ents[i]\n    // ...\n  }\n\n  // apply system logic\n  const ents = movementQuery(world)\n  for (let i = 0; i < ents.length; i++) {\n    const eid = ents[i]\n\n    // operate directly on SoA data\n    Position.x[eid] += Velocity.x[eid]\n    Position.y[eid] += Velocity.y[eid]\n    \n    // or reuse component proxies by resetting the eid for each proxy\n    position.eid = velocity.eid = eid\n    position.x += velocity.x\n    position.y += velocity.y\n  }\n\n  // optionally apply logic to entities removed from the query\n  const exited = exitedMovementQuery(world)\n  for (let i = 0; i < exited.length; i++) {\n    const eid = ents[i]\n    // ...\n  }\n\n  return world\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nworld.time = {\n  delta: 0, \n  elapsed: 0,\n  then: performance.now()\n}\nconst timeSystem = world => {\n  const { time } = world\n  const now = performance.now()\n  const delta = now - time.then\n  time.delta = delta\n  time.elapsed += delta\n  time.then = now\n  return world\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmovementSystem(world)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pipeline = pipe(\n  movementSystem,\n  timeSystem,\n)\n\npipeline(world)\n```\n\n----------------------------------------\n\nTITLE: Creating a World in bitECS\nDESCRIPTION: This snippet demonstrates how to create a world in bitECS. A world represents a set of entities and their associated components. The createWorld function returns an empty object that can be used as a context.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/INTRO.md#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst world = createWorld()\n\nworld.name = 'MyWorld'\n```\n\n----------------------------------------\n\nTITLE: Managing Entities in bitECS\nDESCRIPTION: This snippet shows how to add and remove entities from a world in bitECS. Entities are represented as integers and can be associated with components.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/INTRO.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst eid = addEntity(world)\nconst eid2 = addEntity(world)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nremoveEntity(world, eid2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Proxies in bitECS\nDESCRIPTION: This snippet shows how to create and use component proxies in bitECS. Proxies provide a way to interact with component data using regular objects while maintaining high performance iteration.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/INTRO.md#2025-04-15_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Vector3Proxy {\n  constructor(store, eid) { \n    this.eid = eid\n    this.store = store\n  }\n  get x ()    { return this.store.x[this.eid] }\n  set x (val) { this.store.x[this.eid] = val }\n  get y ()    { return this.store.y[this.eid] }\n  set y (val) { this.store.y[this.eid] = val }\n  get z ()    { return this.store.z[this.eid] }\n  set z (val) { this.store.z[this.eid] = val }\n}\n\nclass PositionProxy extends Vector3Proxy {\n  constructor(eid) { super(Position, eid) }\n}\n\nclass VelocityProxy extends Vector3Proxy {\n  constructor(eid) { super(Velocity, eid) }\n}\n\nconst position = new PositionProxy(eid)\nconst velocity = new VelocityProxy(eid)\n\nposition.x = 123\n\nconsole.log(Position.x[eid]) // => 123\n\n// reuse proxies simply by resetting the eid\nposition.eid = eid2\n\nposition.x = 456\n\nconsole.log(Position.x[eid2]) // => 456\n```\n\n----------------------------------------\n\nTITLE: Implementing Serialization in bitECS\nDESCRIPTION: This snippet demonstrates how to implement serialization and deserialization in bitECS. It shows various ways to serialize and deserialize component data for entities.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/INTRO.md#2025-04-15_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst serialize = defineSerializer(world)\nconst deserialize = defineDeserializer(world)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst packet = serialize(world)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst deserializedEnts = deserialize(world, packet)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst ents = movementQuery(world)\nconst packet = serialize(ents)\nconst deserializedEnts = deserialize(world, packet)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = [Position, Velocity.x, Velocity.y]\nconst serializeMovement = defineSerializer(config)\nconst deserializeMovement = defineDeserializer(config)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst serializeMovementQueryPositions = pipe(movementQuery, serializePositions)\nconst packet = serializeMovementQueryPositions(world)\nconst deserializedEnts = deserializePositions(world, packet)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst serializeOnlyChangedPositions = defineSerializer([Changed(Position)])\n\nconst serializeChangedMovementQuery = pipe(movementQuery, serializeOnlyChangedPositions)\nlet packet = serializeChangedMovementQuery(world)\nconsole.log(packet) // => undefined\n\nPosition.x[eid]++\n\npacket = serializeChangedMovementQuery(world)\nconsole.log(packet.byteLength) // => 13\n```\n\n----------------------------------------\n\nTITLE: Using MAP Deserialization Mode in BitECS\nDESCRIPTION: Demonstrates how to use the MAP deserialization mode in bitECS. This mode assigns local EIDs to serialized entities, maintaining server-side EID relationships without collisions when deserializing server state onto a client world.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/INTRO.md#2025-04-15_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst mode = DESERIALIZE_MODE.MAP\nconst deserializedLocalEntities = deserialize(world, packet, mode)\n```\n\n----------------------------------------\n\nTITLE: Storing Strings in Components Using UI8 Arrays and TextEncoder\nDESCRIPTION: Demonstrates how to efficiently store string data in components by pre-allocating a UI8 array and encoding strings with a TextEncoder. This approach avoids the performance costs of native strings in the ECS.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/FAQ.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst maxStringLength = 32\nconst SomeComponent = defineComponent({ string: [Types.ui8, maxStringLength] })\nconst encoder = new TextEncoder()\nSomeComponent.string[eid].set(encoder.encode(\"hello, world!\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Default Component Values Using Enter Queries\nDESCRIPTION: Shows how to implement default values for component properties using enter queries. This approach allows setting default values when entities first match a specific query rather than at component creation time.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/FAQ.md#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst SomeComponent = defineComponent({ value: Types.f32 })\nconst someQuery = defineQuery([SomeComponent])\nconst enterSomeQuery = enterQuery(someQuery)\n\nconst setDefaultValuesForSomeComponent = eid => {\n  SomeComponent.value[eid] = 1\n}\n\nenterSomeQuery.forEach(setDefaultValuesForSomeComponent)\n```\n\n----------------------------------------\n\nTITLE: Version 0.3.35 Changelog Entry\nDESCRIPTION: Documents new utility functions and size parameter additions for world and component creation in version 0.3.35.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/CHANGELOG.md#2025-04-15_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.3.35\n\n02-26-2022\n\n### Added\n\n- `entityExists` - checks the existence of entities\n- `getWorldComponents` - returns all components registered to a world\n\n### Changed\n\n- `createWorld` now takes a `size` argument\n- `defineComponent` now takes a `size` argument\n\n### Fixed\n\n- entity IDs are now recycled after 1% of max entities have been removed to prevent false-positive returns from `entityExists`\n```\n\n----------------------------------------\n\nTITLE: Version 0.3.36 Changelog Entry\nDESCRIPTION: Details typing additions and behavior changes for component management functions in version 0.3.36.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/CHANGELOG.md#2025-04-15_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.3.36\n\n03-10-2022\n\n### Added\n\n- typings\n  - `getWorldComponents`\n  - `entityExists`\n\n### Changed\n\n- `addComponent` no longer clears component data by default\n- `removeComponent` now clears component data by default\n- components which are removed and then re-added in between query calls will appear in both enter and exit queries\n\n### Fixed\n\n- typings\n  - `createWorld` sizing additions\n  - `addComponent` sizing additions\n```\n\n----------------------------------------\n\nTITLE: Version 0.3.37 Changelog Entry\nDESCRIPTION: Documents addition of getAllEntities function and memory optimization changes in version 0.3.37.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.3.37\n\n03-14-2022\n\n### Added\n\n- `getAllEntities` function which returns all existing entities in a world\n\n### Changed\n\n- cut initial memory footprint in half by lazily generating shadow state for `Changed` queries\n- removed `any` property definition from `IWorld` def for stricter typings\n```\n\n----------------------------------------\n\nTITLE: Version 0.3.38 Changelog Entry\nDESCRIPTION: Details removal of 'any' property from IComponent type definition for stricter typing in version 0.3.38.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.3.38\n\n03-31-2022\n\n### Changed\n\n- removed `any` property definition from `IComponent` type def for stricter typings\n```\n\n----------------------------------------\n\nTITLE: Version 0.3.40 Changelog Entry\nDESCRIPTION: Documents version 0.3.40 release from 08-07-2023 with link to compare changes.\nSOURCE: https://github.com/NateTheGreatt/bitECS/blob/master/docs/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.3.40\n\n08-07-2023\n\nhttps://github.com/NateTheGreatt/bitECS/compare/07080384e909112025b2f255b1edb6c093513ec0...89486fc9e2da9003077d314367544479e158f41d\n```"
  }
]