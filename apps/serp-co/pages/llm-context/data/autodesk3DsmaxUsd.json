[
  {
    "owner": "autodesk",
    "repo": "3dsmax-usd",
    "content": "TITLE: Registering USD Plugins with Python\nDESCRIPTION: This Python snippet demonstrates how to register USD plugins by specifying the path to the `plugInfo.json` file. It utilizes the `Plug.Registry.RegisterPlugins` function from the `pxr` library.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/samples/readme.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Plug\nPlug.Registry.RegisterPlugins(<usdPluginsPath>)\n```\n\n----------------------------------------\n\nTITLE: Example Build Command for 3ds Max USD Plugin in Python\nDESCRIPTION: This Python script demonstrates how to build the 3ds Max USD plugin using the `build-solution.py` script. The command specifies the paths to various dependencies, including the MaxUSD devkit, GoogleTest, Qt, pybind11, MaxSDK, MaterialX plugin, and PyOpenGL.  It sets the build configuration to `release` and targets 3ds Max version `2025`. The `-p` flag prepares the package folder after the build.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/build.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nc:\\dev\\3dsmax-usd> \\\n\tpython build-scripts\\build-solution.py \\\n\t--maxusddevkit c:\\dev\\3dsmax-usd-devkit-2025 \\\n\t--googletest c:\\dev\\googletest-distribution \\\n\t--qtinstall c:\\Qt\\6.5.3\\msvc2019_64 \\\n\t--pybind11inc c:\\dev\\pybind11\\include \\\n\t--maxsdk \"c:\\Program Files\\Autodesk\\3ds Max 2025 SDK\\maxsdk\" \\\n\t--materialx \"c:\\ProgramData\\Autodesk\\ApplicationPlugins\\USD for 3ds Max 2025\\Contents\\MaterialX_plugin\" \\\n\t--pyopengl C:\\Users\\myusername\\AppData\\Roaming\\Python\\Python311\\site-packages -p release 2025\n```\n\n----------------------------------------\n\nTITLE: plugInfo.json Example for 3ds Max USD Plugin\nDESCRIPTION: This JSON snippet demonstrates a `plugInfo.json` file for a C++ plugin in 3ds Max USD. It declares a PrimWriter, ShadingModePlugin, ShaderWriter (for Physical Material), ExportChaser, and JobContextPlugin.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/samples/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Plugins\":[\n      {\n         \"Info\":{\n            \"MaxUsd\":{\n               \"PrimWriter\": {},\n               \"ShadingModePlugin\": {},\n               \"ShaderWriter\":{\n                  \"providesTranslator\":[\n                    \"Physical Material\"\n                  ]\n               },\n               \"ExportChaser\": {}\n               \"JobContextPlugin\": {}\n            }\n         },\n         \"Name\":\"sampleMaxUsdPlugin\",\n         \"Type\":\"library\",\n         \"LibraryPath\":\"SampleMaxUSDPlugin.dll\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Pick Prim mode in Python\nDESCRIPTION: This snippet demonstrates how to call the PickPrim function from the UsdSharedComponents extension in Python within 3ds Max. The PickPrim function, when supplied with a USD stage, acts similar to the MAXScript `PickObject()` method but returns UFE paths which allows developers to process the picked prims for custom purposes.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/changelog.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmaxExtension.PickPrim(stage)\n```\n\n----------------------------------------\n\nTITLE: Loading USD extension in Python\nDESCRIPTION: This snippet demonstrates how to load the UsdSharedComponents extension in Python within 3ds Max.  It uses the Python.Import function to load the extension, allowing access to its functionalities. This is a prerequisite for using functions within the extension.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/changelog.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmaxExtension = Python.Import(\"UsdSharedComponents.maxExtension\");\n```\n\n----------------------------------------\n\nTITLE: Build Script Usage Help Message in Python\nDESCRIPTION: This snippet displays the help message for the `build-solution.py` Python script. It describes the command-line arguments available for configuring the build process, including options for setting dependency paths, build configuration, and target 3ds Max version. Understanding these options is crucial for correctly building the 3ds Max USD plugin. The help message also shows positional arguments which are build configuration type (release or hybrid) and target 3ds Max version (2022, 2023, 2024, 2025, or 2026).\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/build.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nusage: build-solution.py [-h] [-b BUILD] [-v VERSION] [-w] [-r] [-d] [-p] [--maxsdk MAXSDK] [--qtinstall QTINSTALL]\n                         [--pybind11inc PYBIND11INC] [--materialx MATERIALX] [--googletest GOOGLETEST]\n                         [--pyopengl PYOPENGL] [--maxusddevkit MAXUSDDEVKIT] [--spdlog SPDLOG] [--python PYTHON]\n                         [--pyside PYSIDE] [--shiboken SHIBOKEN] [--ufeinc UFEINC] [--ufelib UFELIB] [--usdufe USDUFE]\n                         [--usdlayereditor USDLAYEREDITOR] [--usdsharedcomponent USDSHAREDCOMPONENT]\n                         [--openusd OPENUSD] [--tbb TBB] [--boostinc BOOSTINC] [--boostlib BOOSTLIB]\n                         [{release,hybrid}] {2022,2023,2024,2025,2026]\n\n\tpositional arguments:\n      {release,hybrid}      The build configuration type.\n      {2022,2023,2024,2025,2026}\n                            The 3ds Max version to target.\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      -b BUILD, --build BUILD\n                            The build number coming from the pipeline.\n      -v VERSION, --version VERSION\n                            The 3ds Max USD component version being built.\n      -w, --warnaserror     Enable the compiler to treat all warnings as errors.\n      -r, --rebuild         Rebuild the project.\n      -d, --distrib         Prepare for redistribution. Write component version in source headers.\n      -p, --package         Prepare the package folder after build.\n      --maxsdk MAXSDK       The path location for the 'MaxSDK' folder.\n      --qtinstall QTINSTALL\n                            The Qt reference version from QtVsTools (aka 'Qt Installation').\n      --pybind11inc PYBIND11INC\n                            The path location for the 'pybind11' include folder.\n      --materialx MATERIALX\n                            The path location for the 3ds Max MaterialX material plugin folder.\n      --googletest GOOGLETEST\n                            The path location for the 'gtest' folder.\n      --pyopengl PYOPENGL   The path location for the 'OpenGL' Python module (PyOpenGL).\n      --maxusddevkit MAXUSDDEVKIT\n                            The path location for the 3ds Max USD 'devkit'.\n      --spdlog SPDLOG       The path location for 'spdlog' include folder. If not provided, using the path from the\n                            'devkit' if the 'maxusddevkit' option is provided.\n      --python PYTHON       The path location for the 'Python' folder. If not provided, using the path from the 'devkit'\n                            if the 'maxusddevkit' option is provided.\n      --pyside PYSIDE       The path location for the 'PySide6' Python module. If not provided, using the path from the\n                            'devkit' if the 'maxusddevkit' option is provided.\n      --shiboken SHIBOKEN   The path location for the 'shiboken6' Python module. If not provided, using the path from the\n                            'devkit' if the 'maxusddevkit' option is provided.\n      --ufeinc UFEINC       The path location for the 'Ufe' include folder. If not provided, using the path from the\n                            'devkit' if the 'maxusddevkit' option is provided.\n      --ufelib UFELIB       The path location for the 'Ufe' lib folder. If not provided, using the path from the 'devkit'\n                            if the 'maxusddevkit' option is provided.\n      --usdufe USDUFE       The path location for the 'UsdUfe' folder. If not provided, using the path from the 'devkit'\n                            if the 'maxusddevkit' option is provided.\n      --usdlayerEditor USDLAYEREDITOR\n                            The path location for the 'UsdLayerEditor' folder. If not provided, using the path from the 'devkit'\n                            the 'maxusddevkit' option is provided.\n      --usdsharedcomponent USDSHAREDCOMPONENT\n                            The path location for the 'usdSharedComponents' folder. If not provided, using the path from\n                            the 'devkit' if the 'maxusddevkit' option is provided.\n      --openusd OPENUSD     The path location for the 'OpenUSD' folder. If not provided, using the path from the 'devkit'\n                            if the 'maxusddevkit' option is provided.\n      --tbb TBB             The path location for the 'TBB' folder. If not provided, using the path from the 'OpenUSD' if\n                            the 'openusd' or 'maxusddevkit' option is provided.\n      --boostinc BOOSTINC   The path location for the 'Boost' include folder. If not provided, using the path from the\n                            'OpenUSD' if the 'openusd' or 'maxusddevkit' option is provided.\n      --boostlib BOOSTLIB   The path location for the 'Boost' lib folder. If not provided, using the path from the\n                            'OpenUSD' if the 'openusd' or 'maxusddevkit' option is provided.\n```\n\n----------------------------------------\n\nTITLE: Cloning the 3ds Max USD Repository\nDESCRIPTION: This snippet shows how to clone the 3ds Max USD repository from GitHub and navigate into the cloned directory. It is the first step in building the 3ds Max USD plugin.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/build.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/Autodesk/3dsmax-usd.git\ncd 3dsmax-usd\n```\n\n----------------------------------------\n\nTITLE: Installing PyOpenGL using PIP\nDESCRIPTION: This command installs the PyOpenGL module using Python's PIP package manager. It is required to use the OpenUSD UsdView tool within the 3ds Max USD plugin.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/build.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npip install --user PyOpenGL==3.1.5\n```\n\n----------------------------------------\n\nTITLE: Variable, Data Member, and Constant Names C++\nDESCRIPTION: All C++ variables, data member and constant names, including function parameters and data members, should use lowerCamelCase, with no underscores.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nconst INode* parentNode;\nconst MSTR& rayDirection\nbool* drawRenderPurpose;\n```\n\n----------------------------------------\n\nTITLE: License Notice C++\nDESCRIPTION: Every C++ file should start with the Apache 2.0 license notice. This ensures that the code is properly licensed under the Apache 2.0 license.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Licensed under the Apache License, Version 2.0 (the “License”);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: TF Diagnostic Message Example\nDESCRIPTION: This example illustrates how diagnostic messages from the TF library are displayed in 3ds Max, showing the effect of the `MAXUSD_SHOW_FULL_DIAGNOSTICS` environment flag on the level of detail provided in the messages.  It shows the difference between a short warning message and a full warning message including the file and line number where the warning occurred. There are no dependencies.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\n[2024-05-23 12:06:53.623] [USDImport] [warning] Unexpected input type or mapped value - normal3f:(0, 0, 1):normal\n```\n\nLANGUAGE: Text\nCODE:\n```\n[2024-05-23 12:06:53.623] [USDImport] [warning] Unexpected input type or mapped value - normal3f:(0, 0, 1):normal -- Warning in usd_material_reader.output_max_material at line 463 of d:\\usd-component-2024/contents/scripts//materials\\usd_material_reader.py\n```\n\n----------------------------------------\n\nTITLE: Macro Names C++\nDESCRIPTION: In general, C++ macros should be avoided. However, if they are absolutely needed, macros should be all capitals, with words separated by underscores.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n#define ROUND(x) …\n#define PI_ROUNDED 3.0\n```\n\n----------------------------------------\n\nTITLE: Namespace Names C++\nDESCRIPTION: C++ namespace names should be UpperCamelCase. Top-level namespace names are based on the project name.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nnamespace MaxUsd {}\n```\n\n----------------------------------------\n\nTITLE: Type Names C++\nDESCRIPTION: All C++ type names (classes, structs, type aliases, enums, and type template parameters) should use UpperCamelCase, with no underscores.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nclass MaxUsdStageData;\nclass ImportData;\nenum Roles;\n```\n\n----------------------------------------\n\nTITLE: Enumerator Names C++\nDESCRIPTION: C++ enumerators (for both scoped and unscoped enums) should be UpperCamelCase. Enumeration names, `StringPolicy`, are types and therefore mixed case.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nenum class StringPolicy\n{\n  StringOptional,\n  StringMustHaveValue\n};\n```\n\n----------------------------------------\n\nTITLE: Function/Method Names C++\nDESCRIPTION: All C++ functions should be UpperCamelCase, to avoid inconsistencies with the 3ds Max SDK.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nMSTR Name() const override;\nvoid RegisterExitCallback();\n```\n\n----------------------------------------\n\nTITLE: File Names C++\nDESCRIPTION: C++ filenames should be UpperCamelCase, should not include underscores (_) or dashes (-), and should end in .cpp for source files and .h for header files. Filenames should be as specific as possible.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nStageData.cpp\nStageData.h\n```\n\n----------------------------------------\n\nTITLE: Include Directive (Private) C++\nDESCRIPTION: Private project’s header files should be '#include'd using double quotes, and a relative path. Private headers may live in the same directory or sub-directories, but they should never be included using \"._\" or \".._\" as part of a relative path.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n#include \"privateUtils.h\"\n#include \"pvt/helperFunctions.h\"\n```\n\n----------------------------------------\n\nTITLE: Namespaces in Header Files C++\nDESCRIPTION: Required: to use fully qualified namespace names. Global scope using directives are not allowed. Inline code can use using directives in implementations, within a scope, when there is no other choice (e.g. when using macros, which are not namespaced).\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n// In aFile.h\ninline PXR_NS::UsdPrim prim() const\n{\n    PXR_NAMESPACE_USING_DIRECTIVE\n    TF_VERIFY(item != nullptr);\n    return item->prim();\n}\n```\n\n----------------------------------------\n\nTITLE: Include Directive C++\nDESCRIPTION: For source files (.cpp) with an associated header file (.h) that resides in the same directory, it should be '#include'd with double quotes and no path.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n// In foobar.cpp\n#include \"foobar.h\"\n```\n\n----------------------------------------\n\nTITLE: Include Directive (Public) C++\nDESCRIPTION: All included public header files from outside and inside the project should be '#include’d using angle brackets.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\n#include <pxr/base/tf/stringUtils.h>\n#include <MaxUsd/MeshConversion/MeshConverter.h>\n```\n\n----------------------------------------\n\nTITLE: Include Order C++\nDESCRIPTION: Headers should be included in a specific order, with each section separated by a blank line and files sorted alphabetically.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\n#include \"MaxSceneBuilder.h\"\n\n#include \"private/util.h\"\n\n#include <MaxUsd/Translators/PrimReaderRegistry.h>\n#include <MaxUsd/Translators/TranslatorXformable.h>\n\n#include <usdUfe/ufe/UsdSceneItem.h>\n\n#include <pxr/base/tf/pyPolymorphic.h>\n\n#include <GetCOREInterface.h>\n#include <maxscript/maxscript.h>\n\n#include <string>\n\n#ifdef IS_MAX2023_OR_GREATER\n#include <Graphics/UpdateDisplayContext.h>\n#include <Graphics/InstanceDisplayGeometry.h>\n#endif\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation C++\nDESCRIPTION: Conditional compilation is used for 3ds Max, USD, and UFE versions using specific macros.\nSOURCE: https://github.com/autodesk/3dsmax-usd/blob/dev/doc/CodingGuidelines.md#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\n#ifdef IS_MAX2023_OR_GREATER\n#include <Graphics/UpdateDisplayContext.h>\n#include <Graphics/InstanceDisplayGeometry.h>\n#endif\n```"
  }
]