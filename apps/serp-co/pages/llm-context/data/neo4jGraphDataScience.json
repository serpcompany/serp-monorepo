[
  {
    "owner": "neo4j",
    "repo": "graph-data-science",
    "content": "TITLE: Describing Algorithm Machinery in Neo4j Graph Data Science (Markdown)\nDESCRIPTION: A markdown heading and description outlining the purpose of the algorithm machinery in Neo4j Graph Data Science. This explains that the code contains shared components that support common algorithm workflows including validation, loading, execution, and timing measurements.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/applications/algorithms/machinery/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Algorithms machinery\n\nThis is the stuff that underpins the algorithm applications; the shared machinery, focused on the shared, common algorithm flow of validation, loading, execution, timings etc.\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Example with Results in AsciiDoc\nDESCRIPTION: Demonstrates a complete query example that includes both the Cypher query and expected results table. This structure is used for testing (@Test) and validates the output of procedure calls.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/doc/README.md#2025-04-23_snippet_2\n\nLANGUAGE: asciidoc\nCODE:\n```\n[role=query-example]\n--\n.The following will estimate the memory requirements for running the algorithm in write mode:\n[source, cypher, role=noplay]\n----\nMATCH (source:Location {name: 'A'}), (target:Location {name: 'F'})\nCALL gds.shortestPath.dijkstra.write.estimate('myGraph', {\n    sourceNode: source,\n    targetNode: target,\n    relationshipWeightProperty: 'cost',\n    writeRelationshipType: 'PATH'\n})\nYIELD nodeCount, relationshipCount, bytesMin, bytesMax, requiredMemory\nRETURN nodeCount, relationshipCount, bytesMin, bytesMax, requiredMemory\n----\n\n.Results\n[opts=\"header\"]\n|===\n| nodeCount | relationshipCount | bytesMin | bytesMax | requiredMemory\n| 6         | 9                 | 696      | 696      | \"696 Bytes\"\n|===\n--\n```\n\n----------------------------------------\n\nTITLE: Defining a Graph Project Query in AsciiDoc\nDESCRIPTION: Shows how to create a graph projection query for testing. Project queries are executed before each example (like JUnit's @BeforeEach) to ensure a clean projection for testing.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/doc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: asciidoc\nCODE:\n```\n[source, cypher, role=noplay graph-project-query]\n----\nCALL gds.graph.project(\n    'myGraph',\n    'Location',\n    'ROAD',\n    {\n        relationshipProperties: 'cost'\n    }\n)\n----\n```\n\n----------------------------------------\n\nTITLE: Defining a Setup Query in AsciiDoc\nDESCRIPTION: Demonstrates how to create a setup query for testing documentation. Setup queries are executed once per page (like JUnit's @BeforeAll) and typically contain data creation statements.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/doc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: asciidoc\nCODE:\n```\n[source, cypher, role=noplay setup-query]\n----\nCREATE (a:Location {name: 'A'}),\n       (b:Location {name: 'B'}),\n       (c:Location {name: 'C'}),\n       (a)-[:ROAD {cost: 50}]->(b),\n       (a)-[:ROAD {cost: 50}]->(c);\n----\n```\n\n----------------------------------------\n\nTITLE: Listing Standard Stack Layers in Neo4j Graph Data Science\nDESCRIPTION: This code snippet enumerates the layers of the standard stack in the Neo4j Graph Data Science project, from user interface to integration.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/procedures/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1) User interface\n2) Applications\n3) Domain\n4) Integration\n```\n\n----------------------------------------\n\nTITLE: Grouping Test Queries in AsciiDoc (First Part)\nDESCRIPTION: Demonstrates how to create a grouped test scenario where multiple queries can be executed in sequence. This example shows the first part of a grouped test for the Louvain algorithm.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/doc/README.md#2025-04-23_snippet_4\n\nLANGUAGE: asciidoc\nCODE:\n```\n[role=query-example, group=louvain-conductance]\n--\n.The following will run the Louvain algorithm and store the results in `myGraph`:\n[source, cypher, role=noplay]\n----\nCALL gds.louvain.mutate('myGraph', { mutateProperty: 'community', relationshipWeightProperty: 'weight' })\nYIELD communityCount\n----\n\n.Results\n[opts=\"header\"]\n|===\n| communityCount\n| 3\n|===\n--\n```\n\n----------------------------------------\n\nTITLE: Grouping Test Queries in AsciiDoc (Second Part)\nDESCRIPTION: Shows the second part of a grouped test scenario, demonstrating how to continue a test. This example shows streaming results after running the Louvain algorithm in the first part.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/doc/README.md#2025-04-23_snippet_5\n\nLANGUAGE: asciidoc\nCODE:\n```\n[role=query-example, group=louvain-conductance]\n--\n.The following will run the Conductance algorithm in `stream` mode:\n[source, cypher, role=noplay]\n----\nCALL gds.conductance.stream('myGraph', { communityProperty: 'community', relationshipWeightProperty: 'weight' })\nYIELD community, conductance\n----\n\n.Results\n[opts=\"header\"]\n|===\n| community | conductance\n| 2         | 0.5\n| 3         | 0.23076923076923078\n| 5         | 0.2\n|===\n--\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Impersonated Setup Query in AsciiDoc\nDESCRIPTION: Shows how to create a setup query that impersonates a specific user. This is useful for testing procedures where the operator matters, such as configuration settings.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/doc/README.md#2025-04-23_snippet_6\n\nLANGUAGE: asciidoc\nCODE:\n```\n.Setting a default\n[source, cypher, role=noplay setup-query, operator=Alicia]\n----\nCALL gds.config.defaults.set('concurrency', 12, 'Alicia')\n----\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Example without Result Validation in AsciiDoc\nDESCRIPTION: Shows how to define a query example that runs without validating results. This is useful for demonstrating operations like dropping a graph where validation isn't necessary.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/doc/README.md#2025-04-23_snippet_3\n\nLANGUAGE: asciidoc\nCODE:\n```\n[role=query-example, no-result=true]\n--\n.The following will drop the in-memory graph:\n[source, cypher, role=noplay]\n----\nCALL gds.graph.drop('myGraph')\n----\n--\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Publish for Custom Gradle Plugins\nDESCRIPTION: This Gradle configuration sets up the Maven Publish plugin to publish custom Gradle plugins to a local Maven repository. It defines the repository location and name for publishing the plugins.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/dependencies/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nplugins {\n  id 'maven-publish'\n}\n\npublishing {\n    repositories {\n        maven {\n            name = 'gdsplugins'\n            url = '/path/to/gds/public/dependencies/plugins/repository'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Custom Gradle Plugins to Local Repository\nDESCRIPTION: This command uses Gradle Wrapper to publish all defined publications to the local 'gdsplugins' Maven repository. It should be executed after configuring the Maven Publish plugin.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/dependencies/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew publishAllPublicationsToGdspluginsRepository\n```\n\n----------------------------------------\n\nTITLE: Basic GPL Copyright Header Template for Source Files\nDESCRIPTION: A template for the copyright and license notice that should be included at the beginning of each source file in a GPL-licensed project. It includes placeholders for program name, year, and author information.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/LICENSE.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Interactive Terminal GPL Notice Template\nDESCRIPTION: A shorter GPL notice template for programs with terminal interaction. This notice should be displayed when the program starts in interactive mode, providing basic copyright information and instructions for viewing warranty and redistribution details.\nSOURCE: https://github.com/neo4j/graph-data-science/blob/2.13/LICENSE.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```"
  }
]