[
  {
    "owner": "posva",
    "repo": "pinia-colada",
    "content": "TITLE: TypeScript Narrowing with Pinia Colada's `status`\nDESCRIPTION: This example demonstrates how to use the `state` property returned by `useQuery()` to achieve type narrowing in TypeScript when conditionally rendering UI based on the query's status. By grouping `status`, `data`, and `error` into the `state` object, TypeScript can correctly infer the types of `data` and `error` based on the current status, providing type safety and avoiding potential runtime errors.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@pinia/colada'\n\nconst {\n  data, // [!code --]\n  status, // [!code --]\n  error, // [!code --]\n  state, // [!code ++]\n} = useQuery({\n  // ...\n// ---cut-start---\n  key: ['user-info'],\n  query: () =>\n    fetch('/api/user-info').then(\n      (res) => res.json() as Promise<{ name: string }>,\n    ),\n// ---cut-end---\n})\n</script>\n\n<template>\n  <div v-if=\"state.status === 'pending'\">\n    Loading...\n  </div>\n  <div v-else-if=\"state.status === 'error'\">\n    <!-- ✅ error type excludes `null` -->\n    Error fetching user info: {{ state.error.message }}\n  </div>\n  <!-- no need to check for the last possible status: 'success' -->\n  <div v-else>\n    <!-- ✅ data type excludes `undefined` -->\n    {{ state.data.name }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Colada for Data Fetching in Vue Component\nDESCRIPTION: Vue component example demonstrating the usage of useQuery and useMutation hooks for data fetching and updating, including cache invalidation\nSOURCE: https://github.com/posva/pinia-colada/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useRoute } from 'vue-router'\nimport { useMutation, useQuery, useQueryCache } from '@pinia/colada'\nimport { patchContact, getContactById } from '~/api/contacts'\n\nconst route = useRoute()\nconst queryCache = useQueryCache()\n\nconst { data: contact, isPending } = useQuery({\n  // unique key for the query in the cache\n  key: () => ['contacts', route.params.id],\n  query: () => getContactById(route.params.id),\n})\n\nconst { mutate: updateContact, isLoading } = useMutation({\n  mutation: patchContact,\n  async onSettled({ id }) {\n    // invalidate the query to refetch the data of the query above\n    await queryCache.invalidateQueries({ key: ['contacts', id], exact: true })\n  },\n})\n</script>\n\n<template>\n  <section>\n    <p v-if=\"isPending\">\n      Loading...\n    </p>\n    <ContactCard\n      v-else\n      :key=\"contact.id\"\n      :contact=\"contact\"\n      :is-updating=\"isLoading\"\n      @update:contact=\"updateContact\"\n    />\n  </section>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Basic Mutation in Vue with Pinia Colada\nDESCRIPTION: Demonstrates how to define a basic mutation using useMutation() to create a todo item. It shows the setup of the mutation function, form handling, and status tracking.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/mutations.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { useMutation } from '@pinia/colada'\n\nconst {\n  mutate: createTodo,\n  status,\n  asyncStatus,\n} = useMutation({\n  mutation: (todoText: string) =>\n    fetch('/api/todos', {\n      method: 'POST',\n      body: JSON.stringify({ text: todoText }),\n    }),\n})\n\nconst todoText = ref('')\n</script>\n\n<template>\n  <form @submit.prevent=\"createTodo(todoText)\">\n    <input v-model=\"todoText\">\n    <button :disabled=\"asyncStatus === 'loading'\">\n      Add todo\n    </button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Query Implementation in Vue Component\nDESCRIPTION: Demonstrates basic query usage with useQuery() to fetch todos from an API endpoint. Shows handling of loading, error and success states in the template.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@pinia/colada'\n\nconst {\n  state,\n  asyncStatus,\n  refresh,\n  refetch,\n  error,\n  data,\n  status,\n  isLoading,\n  isPending,\n  isPlaceholderData,\n} = useQuery({\n  key: ['todos'],\n  query: () => fetch('/api/todos').then((res) => res.json()),\n})\n</script>\n\n<template>\n  <main>\n    <div v-if=\"asyncStatus === 'loading'\">\n      Loading...\n    </div>\n    <div v-else-if=\"state.status === 'error'\">\n      Oops, an error happened...\n    </div>\n    <div v-else-if=\"state.data\">\n      <TodoItem v-for=\"todo in state.data\" :key=\"todo.id\" :todo=\"todo\" />\n    </div>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using External Properties in Queries with Pinia Colada\nDESCRIPTION: This example demonstrates how to use external properties, such as route parameters, within a Pinia Colada query. By including the route parameter in the query's key, a new cache entry is generated for each unique parameter, ensuring efficient data reuse and reducing unnecessary network requests. This enhances application performance and responsiveness, especially when navigating between different routes.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useRoute } from 'vue-router'\nimport { useQuery } from '@pinia/colada'\n\nconst route = useRoute()\nconst { state } = useQuery({\n  key: () => ['contacts', route.params.id as string],\n  query: () =>\n    fetch(`/api/contacts/${route.params.id}`).then((res) => res.json()),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Data Fetching in Vue.js with Pinia Colada\nDESCRIPTION: This snippet showcases how Pinia Colada simplifies async data fetching in Vue.js. It uses the useQuery composable to handle loading states, errors, and data fetching, significantly reducing boilerplate code and complexity.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/why.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { fetchUsers } from '../api/users' // [!code focus:7]\nimport { useQuery } from '@pinia/colada'\n\nconst { data, error, isPending, isLoading, refresh } = useQuery({\n  key: ['users'],\n  query: fetchUsers,\n})\n</script>\n\n<template>\n  <template v-if=\"isPending\">\n    <p>Loading...</p>\n  </template>\n  <template v-else-if=\"error\">\n    <p>Error: {{ error.message }}</p>\n  </template>\n  <template v-else>\n    <p v-if=\"isLoading\">\n      Refreshing...\n    </p>\n    <button v-else @click=\"refresh()\">\n      Refresh\n    </button>\n    <ul>\n      <li v-for=\"user in data\">\n        {{ user.name }}\n      </li>\n    </ul>\n  </template>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scroll with useInfiniteQuery in Vue and TypeScript\nDESCRIPTION: This snippet showcases the implementation of infinite scroll functionality using useInfiniteQuery from Pinia Colada. It includes the logic for merging data from multiple API calls and setting up an intersection observer for automatic loading.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/paginated-queries.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { factsApi } from '@/api/cat-facts'\nimport type { CatFacts } from '@/api/cat-facts'\nimport { useInfiniteQuery } from '@pinia/colada'\nimport { onWatcherCleanup, useTemplateRef, watch } from 'vue'\n\nconst {\n  state: facts,\n  loadMore,\n  asyncStatus,\n} = useInfiniteQuery({\n  key: ['feed'],\n  query: async ({ nextPage }) =>\n    nextPage != null ? factsApi.get<CatFacts>({ query: { page: nextPage, limit: 10 } }) : null,\n  initialPage: {\n    data: new Set<string>(),\n    // null for no more pages\n    nextPage: 1 as number | null,\n  },\n  merge(pages, newFacts) {\n    // no more pages\n    if (!newFacts) return pages\n    // ensure we have unique entries even during HMR\n    const data = new Set([...pages.data, ...newFacts.data.map((d) => d.fact)])\n    return {\n      data,\n      nextPage: newFacts.next_page_url ? newFacts.current_page + 1 : null,\n    }\n  },\n})\n\nconst loadMoreEl = useTemplateRef('load-more')\n\nwatch(loadMoreEl, (el) => {\n  if (el) {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0]?.isIntersecting) {\n          loadMore()\n        }\n      },\n      {\n        rootMargin: '300px',\n        threshold: [0],\n      },\n    )\n    observer.observe(el)\n    onWatcherCleanup(() => {\n      observer.disconnect()\n    })\n  }\n})\n</script>\n\n<template>\n  <div>\n    <button :disabled=\"asyncStatus === 'loading'\" @click=\"loadMore()\">\n      Load more (or scroll down)\n    </button>\n    <template v-if=\"facts?.data\">\n      <p>We have loaded {{ facts.data.data.size }} facts</p>\n      <details>\n        <summary>Show raw</summary>\n        <pre>{{ facts }}</pre>\n      </details>\n\n      <blockquote v-for=\"fact in facts.data.data\">\n        {{ fact }}\n      </blockquote>\n\n      <p v-if=\"facts.data.nextPage\" ref=\"load-more\">\n        Loading more...\n      </p>\n    </template>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Query Implementation\nDESCRIPTION: Example of using useQuery to fetch product data with state and status handling\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@pinia/colada'\nimport { getAllProducts } from '@/api/products'\nimport ProductItem from '@/components/ProductItem.vue'\n\nconst {\n  state: productList,\n  asyncStatus,\n} = useQuery({\n  key: ['products-list'],\n  query: getAllProducts,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated Queries with useQuery in Vue and TypeScript\nDESCRIPTION: This snippet shows how to create a paginated query using the useQuery hook from Pinia Colada. It fetches contacts data based on the current page number from the route query parameters.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/paginated-queries.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useRoute } from 'vue-router'\nimport { useQuery } from '@pinia/colada'\n\nconst route = useRoute()\nconst { state } = useQuery({\n  key: () => ['contacts', Number(route.query.page) || 1],\n  query: () =>\n    fetch(`/api/contacts?page=${Number(route.query.page) || 1}`).then((res) => res.json()),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Optimistic Updates with Query Invalidation\nDESCRIPTION: Implements optimistic updates pattern with query invalidation, including error handling and rollback functionality.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/query-invalidation.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutation, useQueryCache } from '@pinia/colada'\nimport { createTodo } from './api/todos'\n\nconst queryCache = useQueryCache()\n\nconst { mutate } = useMutation({\n  mutation: (text: string) => createTodo(text),\n  onMutate: (text: string) => {\n    const previousTodos = queryCache.getQueryData(['todos'])\n    queryCache.setQueryData(['todos'], [...(previousTodos || []), { text }])\n    // return anything you want to reuse in other hooks\n    return { previousTodos }\n  },\n  onError: (error, variables, { previousTodos }) => {\n    // rollback to the previous state\n    queryCache.setQueryData(['todos'], previousTodos)\n  },\n  onSettled: () => {\n    // invalidate the query to refetch the new data\n    queryCache.invalidateQueries({ key: ['todos'] })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Optimistic Contact Update with Cache Management in TypeScript\nDESCRIPTION: Demonstrates implementing an optimistic update for contact details using cache manipulation. Includes complete error handling, rollback mechanism, and query invalidation.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/optimistic-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutation, useQueryCache } from '@pinia/colada'\nimport { patchContact } from '@/api/contacts'\nimport type { Contact } from '@/api/contacts'\n\nconst queryCache = useQueryCache()\nconst { mutate } = useMutation({\n  mutation: patchContact,\n  onMutate(contactInfo) {\n    const oldContact = queryCache.getQueryData<Contact>(['contact', contactInfo.id])!\n    const newContact: Contact = {\n      ...oldContact,\n      ...contactInfo,\n    }\n    queryCache.setQueryData(['contact', newContact.id], newContact)\n    queryCache.cancelQueries({ key: ['contact', newContact.id] })\n    return { oldContact, newContact }\n  },\n  onSettled(_data, _error, _vars, { newContact }) {\n    if (newContact) {\n      queryCache.invalidateQueries({ key: ['contact', newContact.id] })\n    }\n  },\n  onError(err, contactInfo, { newContact, oldContact }) {\n    if (newContact === queryCache.getQueryData(['contact', contactInfo.id])) {\n      queryCache.setQueryData(['contact', contactInfo.id], oldContact)\n    }\n    console.error(`An error occurred when updating a contact \"${contactInfo.id}\"`, err)\n  },\n  onSuccess(contact, _contactInfo, { newContact }) {\n    queryCache.setQueryData(['contact', newContact.id], contact)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reusable Query with defineQuery\nDESCRIPTION: Demonstrates proper implementation of a reusable query using defineQuery() to ensure state sharing across components.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineQuery, useQuery } from '@pinia/colada'\nimport { ref } from 'vue'\n\nexport const useFilteredTodos = defineQuery(() => {\n  const search = ref('')\n  const { state, ...rest } = useQuery({\n    key: () => ['todos', { search: search.value }],\n    query: () => fetch(`/api/todos?filter=${search.value}`, { method: 'GET' }),\n  })\n  return {\n    ...rest,\n    todoList: state,\n    search,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: SSR Solution with Pinia and `defineQuery()`\nDESCRIPTION: This code snippet demonstrates the correct approach for handling SSR when using `defineQuery()` in Pinia Colada. By using a Pinia store to hold the `search` state, the state can be properly serialized from the server to the client, ensuring consistency. This avoids issues where the client and server have different values for the `search` parameter, leading to incorrect data fetching.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore, storeToRefs } from 'pinia'\n// ---cut-start---\nimport 'vite/client'\nimport { defineQuery, useQuery } from '@pinia/colada'\nimport { ref } from 'vue'\nfunction getInitialValue() {\n  return 'initial value'\n}\n// ---cut-end---\n// @moduleResolution: bundler\n\nconst useLocalStore = defineStore('query-search-store', () => {\n  const search = ref('')\n  return { search }\n})\n\ndefineQuery(() => {\n  const { search } = storeToRefs(useLocalStore())\n  if (import.meta.env.SSR) {\n    search.value = getInitialValue()\n  }\n  const query = useQuery({\n    key: ['todos', search.value],\n    query: () => fetch(`/api/todos?search=${search.value}`).then((res) => res.json()),\n  })\n  return {\n    search,\n    ...query,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Optimistic Todo List Update with Cache Management in TypeScript\nDESCRIPTION: Shows how to implement optimistic updates when creating new todo items, including cache management, error handling, and proper rollback mechanisms.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/optimistic-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutation, useQueryCache } from '@pinia/colada'\nimport { createTodo } from './api/todos'\nimport type { TodoItem } from './api/todos'\n\nconst queryCache = useQueryCache()\nconst { mutate } = useMutation({\n  mutation: (text: string) => createTodo(text),\n  onMutate(text) {\n    const oldTodoList = queryCache.getQueryData<TodoItem[]>(['todos'])\n    const newTodoItem: TodoItem = {\n      text,\n      id: crypto.randomUUID(),\n    }\n    const newTodoList: TodoItem[] = [\n      ...(oldTodoList || []),\n      newTodoItem,\n    ]\n    queryCache.setQueryData(['todos'], newTodoList)\n    queryCache.cancelQueries({ key: ['todos'] })\n    return { newTodoList, oldTodoList, newTodoItem }\n  },\n  onSettled() {\n    queryCache.invalidateQueries({ key: ['todos'] })\n  },\n  onError(err, _title, { oldTodoList, newTodoList }) {\n    if (newTodoList === queryCache.getQueryData(['todos'])) {\n      queryCache.setQueryData(['todos'], oldTodoList)\n    }\n    console.error('An error occurred when creating a todo:', err)\n  },\n  onSuccess(todoItem, _vars, { newTodoItem }) {\n    const todoList = queryCache.getQueryData<TodoItem[]>(['todos']) || []\n    const todoIndex = todoList.findIndex((t) => t.id === newTodoItem.id)\n    if (todoIndex >= 0) {\n      const copy = todoList.slice()\n      copy.splice(todoIndex, 1, todoItem)\n      queryCache.setQueryData(['todos'], copy)\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Invalidating Queries via Cache Store in TypeScript\nDESCRIPTION: Demonstrates different methods of invalidating queries using the query cache store. Shows how to invalidate specific queries, their children, and control active query filtering.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/query-invalidation.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQueryCache } from '@pinia/colada'\n\nconst queryCache = useQueryCache()\n\n// Invalidate a specific query and it's children\nqueryCache.invalidateQueries({ key: ['todos'] })\n// Invalidate a specific query only\nqueryCache.invalidateQueries({ key: ['todos'], exact: true })\n\n// Refetch all active queries\nqueryCache.invalidateQueries()\n\n// Invalidate all queries, even if they are not active\nqueryCache.invalidateQueries({ active: null })\n```\n\n----------------------------------------\n\nTITLE: Products List Page Implementation\nDESCRIPTION: Complete example of a products listing page using Pinia Colada for data fetching\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@pinia/colada'\nimport { getAllProducts } from '@/api/products'\nimport ProductItem from '@/components/ProductItem.vue'\n\nconst {\n  state: productList,\n  asyncStatus,\n} = useQuery({\n  key: ['products-list'],\n  query: getAllProducts,\n})\n</script>\n\n<template>\n  <main>\n    <LoadingIndicator v-if=\"asyncStatus === 'loading'\" />\n\n    <div v-if=\"productList.error\">\n      <ErrorMessage :error=\"productList.error\" />\n    </div>\n    <div v-else-if=\"productList.data\">\n      <div v-for=\"product in productList.data\" :key=\"product.id\">\n        <ProductItem :product=\"product\" />\n      </div>\n    </div>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: SSR Caveat with Pinia Colada's `defineQuery()`\nDESCRIPTION: This example illustrates a common pitfall when using `defineQuery()` with Server-Side Rendering (SSR) in Pinia Colada. The state returned from `defineQuery()` is not serialized to the page, so you need to ensure consistent values across the server and client for anything not returned by `useQuery()`. The correct way is to use a Pinia store (or Nuxt's `useState()`) to hold any external state that needs to be serialized.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndefineQuery(() => {\n  const search = ref('')\n  // ❌ different values on client and server\n  if (import.meta.env.SSR) {\n    search.value = fetchSomeInitialValue()\n  }\n  const query = useQuery({\n    key: ['todos', search.value],\n    query: () => fetch(`/api/todos?search=${search.value}`).then((res) => res.json()),\n  })\n  return {\n    search,\n    ...query,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries with Pinia Colada\nDESCRIPTION: This code snippet shows how to manually trigger a data refresh using the `refetch()` method in Pinia Colada. The `refetch()` method returns a promise that resolves with the updated data or rejects with an error. The example also shows how to use the `refresh()` method, which reuses any loading request and avoids unnecessary network calls based on `staleTime`.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// ---cut-start---\nimport { useQuery } from '@pinia/colada'\nimport { defineComponent } from 'vue'\n// ---cut-end---\nconst {\n  // ...\n  refresh,\n  refetch,\n} = useQuery({\n  // ...\n  // ---cut-start---\n  key: ['user-info'],\n  query: async () => ({ name: 'John Doe', id: 2 }),\n  // ---cut-end---\n})\n\nrefetch().then(({ data, error }) => {\n  if (error) {\n    console.error('Last Error:', error)\n  } else {\n    console.log('Fetched data:', data)\n  }\n})\n\n// Pass `true` to throw if the query fails\nrefetch(true).catch((error) => {\n  console.error('Error refetching:', error)\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Reusable Mutation in a Vue Component\nDESCRIPTION: Demonstrates how to use a reusable mutation (useCreateTodo) within a Vue component, including form setup and status handling.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/mutations.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useCreateTodo } from './mutations/todos'\n\nconst { createTodo, status, asyncStatus, todoText } = useCreateTodo()\n</script>\n\n<template>\n  <form @submit.prevent=\"() => {}\">\n    <input v-model=\"todoText\">\n    <button :disabled=\"asyncStatus === 'loading'\">\n      Add todo\n    </button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: UI-Based Optimistic Updates in Vue Component\nDESCRIPTION: Demonstrates implementing optimistic updates directly in the UI using Vue components, combining mutation variables with query invalidation.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/optimistic-updates.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { useMutation, useQuery, useQueryCache } from '@pinia/colada'\nimport { getTodoList, createTodo } from './api/todos'\n\nconst { data: todoList } = useQuery({\n  key: ['todos'],\n  query: () => getTodoList(),\n})\n\nconst newTodoText = ref('')\nconst queryCache = useQueryCache()\nconst { mutate, isLoading, variables: newTodo } = useMutation({\n  mutation: (text: string) => createTodo(text),\n  async onSettled() {\n    await queryCache.invalidateQueries({ key: ['todos'] })\n  },\n})\n</script>\n\n<template>\n  <form @submit.prevent=\"mutate(newTodoText)\">\n    <input v-model=\"newTodoText\" :disabled=\"isLoading\">\n    <button :disabled=\"isLoading\">\n      Add todo\n    </button>\n  </form>\n\n  <ul v-if=\"todoList\">\n    <li v-for=\"todo in todoList\" :key=\"todo.id\">\n      {{ todo.text }}\n    </li>\n    <li v-if=\"isLoading\">\n      {{ newTodo }}\n    </li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Mutations with Pinia Colada\nDESCRIPTION: Illustrates how to create a reusable mutation using defineMutation(). This example defines a createTodo mutation that can be used across components.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/mutations.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport { defineMutation, useMutation } from '@pinia/colada'\n\nexport const useCreateTodo = defineMutation(() => {\n  const todoText = ref('')\n  const { mutate, ...mutation } = useMutation({\n    mutation: (text: string) =>\n      fetch('/api/todos', {\n        method: 'POST',\n        body: JSON.stringify({ text }),\n      }),\n  })\n\n  return {\n    ...mutation,\n    // we can still pass the todoText to the mutation so it appears in plugins\n    // and other places\n    createTodo: () => mutate(todoText.value),\n    // expose the todoText ref\n    todoText,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Mutation Execution Methods in Pinia Colada\nDESCRIPTION: Demonstrates how to access and use the mutate and mutateAsync methods for executing mutations, highlighting their different use cases.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/mutations.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useMutation } from '@pinia/colada'\n\nconst {\n  // hover over to inspect the types\n  mutate,\n  mutateAsync,\n} = useMutation({\n  mutation: (todoText: string) =>\n    fetch('/api/todos', {\n      method: 'POST',\n      body: JSON.stringify({ text: todoText }),\n    }),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Query Key Best Practices and Examples\nDESCRIPTION: Examples showing correct and incorrect ways to implement query keys, emphasizing the importance of including all query dependencies in the key function.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/query-keys.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseQuery({\n  // ✅\n  key: () => ['products', route.params.id],\n  query: () => getProductById(route.params.id),\n})\nuseQuery({\n  // ❌ `key` should be a function\n  key: ['products', route.params.id],\n  query: () => getProductById(route.params.id),\n})\nuseQuery({\n  // ❌ `key` should depend on `route.params.id`\n  key: () => ['products'],\n  query: () => getProductById(route.params.id),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinia Colada with Vue Application\nDESCRIPTION: Setup code for integrating Pinia Colada with Vue and Pinia, including configuration of global query options. The gcTime option sets the garbage collection time for queries to 5 minutes by default.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport { createPinia } from 'pinia'\nimport { PiniaColada } from '@pinia/colada'\n\nconst app = createApp(App)\nconst pinia = createPinia()\napp.use(pinia)\napp.use(PiniaColada, {\n  // Optionally provide global options here for queries\n  queryOptions: {\n    gcTime: 300_000, // 5 minutes, the default\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Queries in Pinia Colada\nDESCRIPTION: Illustrates how to create reusable queries in Pinia Colada using defineQuery(). This approach encapsulates shared logic and improves code reusability across components.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/cookbook/migration-tvq.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const options = { // [!code --]\n  queryKey: ['list'], // [!code --]\n  queryFn: getList, // [!code --]\n} // [!code --]\nexport const useList = defineQuery({ // [!code ++]\n  key: ['list'], // [!code ++]\n  query: getList, // [!code ++]\n}) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Query Keys Implementation\nDESCRIPTION: Demonstrates how to structure hierarchical query keys for different views of the same resource, enabling efficient cache invalidation.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/query-keys.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// gets the product with all its details\nuseQuery({\n  key: () => ['products', productId.value],\n  query: () => getProductById(productId.value),\n})\nuseQuery({\n  key: () => ['products', productId.value, { searchResult: true }],\n  query: () => getProductSummaryById(productId.value),\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling in Vue Template with Pinia Colada\nDESCRIPTION: Demonstrates how to handle errors directly in a Vue template using Pinia Colada's error property. It shows how to display an error message or fallback content when an error occurs during a query.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@pinia/colada'\nimport { fetchUser } from '../api/user'\n\nconst { data, error } = useQuery({\n  key: ['user'],\n  query: fetchUser,\n})\n</script>\n\n<template>\n  <div v-if=\"error\">\n    <p>Oops! Something went wrong:</p>\n    <pre>{{ error.message }}</pre>\n  </div>\n  <div v-else>\n    <!-- Your normal content here -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Pausing Queries with Pinia Colada\nDESCRIPTION: This code snippet illustrates how to pause a Pinia Colada query based on a condition, such as the presence of a route parameter.  The `enabled` option is used to conditionally enable or disable the query. This prevents unnecessary network requests when the required data for the query is not available, such as when navigating to a page without the expected route parameters.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useCurrentDeck = defineQuery(() => {\n  const route = useRoute()\n  const result = useQuery({\n    key: () => ['decks', Number(route.params.deckId)],\n    query() {\n      return fetch(`/api/decks?deckId=${route.params.deckId}`)\n    },\n    // only enable the query when we are on /decks/some-deck-id\n    enabled: () => 'deckId' in route.params,\n  })\n\n  return {\n    ...result,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Errors During SSR with devalue in TypeScript\nDESCRIPTION: This snippet demonstrates how to serialize and revive custom error objects during server-side rendering using devalue. It allows preserving error information between server and client.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/ssr.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport devalue from 'devalue'\nimport { MyError } from '~/errors'\n\nconst stringified = devalue.stringify(error, {\n  MyError: (data: unknown) => data instanceof MyError && [data.message, data.customData],\n})\n\nconst revivedData = devalue.parse(stringified, {\n  MyError: (data: [string, unknown]) => new MyError(data[0], data[1]),\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Pinia Colada Plugins\nDESCRIPTION: Example of how to add plugins to Pinia Colada, specifically demonstrating the integration of PiniaColadaQueryHooksPlugin with configuration options.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\nimport { PiniaColada, PiniaColadaQueryHooksPlugin } from '@pinia/colada'\n\nconst app = createApp(App)\nconst pinia = createPinia()\napp.use(pinia)\n\napp.use(PiniaColada, {\n  plugins: [\n    PiniaColadaQueryHooksPlugin({\n      // ...\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Query Keys with Route Parameters\nDESCRIPTION: Shows how to use dynamic query keys that depend on route parameters to fetch product details. The key updates based on the route.params.id value.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/query-keys.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@pinia/colada'\nimport { useRoute } from 'vue-router'\n\nconst route = useRoute()\nconst { state } = useQuery({\n  key: () => ['products', route.params.id],\n  query: () => getProductById(route.params.id),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Query Invalidation in Vue Component with Mutations\nDESCRIPTION: Shows how to invalidate queries after mutation completion using the onSettled callback in a Vue component setup.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/query-invalidation.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useMutation, useQueryCache } from '@pinia/colada'\nimport { createTodo } from './api/todos'\n\nconst queryCache = useQueryCache()\n\nconst { mutate } = useMutation({\n  mutation: (text: string) => createTodo(text),\n  onSettled: () => queryCache.invalidateQueries({ key: ['todos'], exact: true }),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Static Query Keys in Vue with Pinia Colada\nDESCRIPTION: Demonstrates how to implement simple static query keys for fetching products. Static keys are used for fixed endpoints like /api/products or global resources.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/query-keys.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@pinia/colada'\n\nconst { state } = useQuery({\n  key: ['products'],\n  query: () => getProducts(),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Mutation Variables in Pinia Colada\nDESCRIPTION: Shows how to access the variables property of a mutation, which reflects the parameters of the mutation function.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/mutations.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useMutation } from '@pinia/colada'\n\nconst {\n  variables,\n  // ^?\n} = useMutation({\n  mutation: (todoText: string) =>\n    fetch('/api/todos', {\n      method: 'POST',\n      body: JSON.stringify({ text: todoText }),\n    }),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nuxt Route Integration with defineQuery\nDESCRIPTION: Demonstrates proper route parameter handling in Nuxt applications using vue-router's useRoute with defineQuery.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRoute } from 'vue-router'\n\nexport const useContactDetails = defineQuery(() => {\n  const route = useRoute()\n  return useQuery({\n    key: () => ['contacts', route.params.contactId],\n    query: () => fetch(`/api/contacts/${route.params.contactId}`).then((res) => res.json()),\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Simple defineQuery Implementation\nDESCRIPTION: Shows a basic implementation of defineQuery using an options object for organizing queries without additional state management.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineQuery } from '@pinia/colada'\n\nexport const useTodos = defineQuery({\n  key: ['todos'],\n  query: () => fetch('/api/todos').then((res) => res.json()),\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Mutation with Cache Invalidation\nDESCRIPTION: Full example of mutation implementation with query cache invalidation and error handling\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/quick-start.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useMutation, useQueryCache } from '@pinia/colada'\nimport { patchContact } from '@/api/contacts'\nimport type { Contact } from '@/api/contacts'\nimport ContactDetail from '@/components/ContactDetail.vue'\n\nconst props = defineProps<{ contact: Contact }>()\n\nconst queryCache = useQueryCache()\n\nconst {\n  mutate: updateContact,\n  state,\n  asyncStatus,\n} = useMutation({\n  mutation: (contact: Contact) => patchContact(contact),\n  onSettled(updatedContact, error, contact) {\n    queryCache.invalidateQueries({ key: ['contacts-list'] })\n    queryCache.invalidateQueries({ key: ['contacts', contact.id] })\n  },\n})\n</script>\n\n<template>\n  <main>\n    <LoadingIndicator v-if=\"asyncStatus === 'loading'\" />\n\n    <div v-if=\"state.error\">\n      <ErrorMessage :error=\"state.error\" />\n    </div>\n    <div v-else>\n      <ContactDetail\n        :contact=\"props.contact\"\n        :is-updating=\"asyncStatus === 'loading'\"\n        @update=\"updateContact\"\n      />\n    </div>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Product Detail Page Implementation\nDESCRIPTION: Example of dynamic query implementation for fetching individual product details\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/quick-start.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@pinia/colada'\nimport { useRoute } from 'vue-router'\nimport { getProductById } from '@/api/products'\nimport ProductItemDetail from '@/components/ProductItemDetail.vue'\n\nconst route = useRoute()\n\nconst {\n  state: product,\n  asyncStatus,\n} = useQuery({\n  key: () => ['products', route.params.id as string],\n  query: () => getProductById(route.params.id as string),\n})\n</script>\n\n<template>\n  <main>\n    <LoadingIndicator v-if=\"asyncStatus === 'loading'\" />\n\n    <div v-if=\"product.error\">\n      <ErrorMessage :error=\"product.error\" />\n    </div>\n    <div v-else class=\"flex flex-wrap\">\n      <ProductItemDetail :product=\"product.data\" />\n    </div>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Global Error Handling with Hooks in Pinia Colada\nDESCRIPTION: Shows how to set up global error handling in Pinia Colada using the PiniaColadaQueryHooksPlugin. This approach allows for centralized error logging or displaying global error notifications across the entire application.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/error-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport { PiniaColada, PiniaColadaQueryHooksPlugin } from '@pinia/colada'\n\nconst app = createApp({})\nconst pinia = createPinia()\n\napp.use(pinia)\napp.use(PiniaColada, {\n  plugins: [\n    PiniaColadaQueryHooksPlugin({\n      onError(error) {\n        console.error('Global error:', error)\n        // You could also trigger a global notification here\n      },\n      // other hooks\n      onSuccess(data) {},\n      onSettled() {},\n    }),\n  ],\n})\n\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Data Fetching in Vue.js without Pinia Colada\nDESCRIPTION: This snippet demonstrates the traditional approach to async data fetching in Vue.js, manually handling loading states, errors, and data. It shows the boilerplate code required for managing async operations without Pinia Colada.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/why.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { shallowRef, ref } from 'vue' // [!code focus:25]\nimport { fetchUsers } from '../api/users'\n\nconst isLoading = ref(false)\nconst isPending = ref(true)\nconst error = shallowRef(null)\nconst data = shallowRef()\n\nasync function refresh() {\n  isLoading.value = true\n  try {\n    data.value = await fetchUsers()\n    // reset the error if the request was successful\n    error.value = null\n    // the initial request is no longer pending\n    isPending.value = false\n  } catch (err) {\n    error.value = err\n  } finally {\n    isLoading.value = false\n  }\n}\n\n// manually trigger the initial fetch\nrefresh()\n</script>\n\n<template>\n  <template v-if=\"isPending\">\n    <p>Loading...</p>\n  </template>\n  <template v-else-if=\"error\">\n    <p>Error: {{ error.message }}</p>\n  </template>\n  <template v-else>\n    <p v-if=\"isLoading\">\n      Refreshing...\n    </p>\n    <button v-else @click=\"refresh()\">\n      Refresh\n    </button>\n    <ul>\n      <li v-for=\"user in data\">\n        {{ user.name }}\n      </li>\n    </ul>\n  </template>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing DataUpdatedAt Plugin\nDESCRIPTION: Shows a complete example of creating a plugin that adds a dataUpdatedAt property to queries, including type augmentation and action handling.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PiniaColadaPlugin } from '@pinia/colada'\nimport { shallowRef } from 'vue'\nimport type { ShallowRef } from 'vue'\n\n/**\n * Adds a `dataUpdatedAt` property to queries that represents the last time the\n * data was updated.\n */\nexport function PiniaColadaDataUpdatedAtPlugin(): PiniaColadaPlugin {\n  return ({ queryCache, scope }) => {\n    queryCache.$onAction(({ name, after, args }) => {\n      if (name === 'create') {\n        after((entry) => {\n          // all effects must be created within the scope\n          scope.run(() => {\n            entry.ext.dataUpdatedAt = shallowRef<number>(entry.when)\n          })\n        })\n      } else if (name === 'setEntryState') {\n        const [entry] = args\n        after(() => {\n          entry.ext.dataUpdatedAt.value = entry.when\n        })\n      } else {\n        // ...\n      }\n    })\n  }\n}\n\n// Add the property to the types\ndeclare module '@pinia/colada' {\n\n  interface UseQueryEntryExtensions<TResult, TError> {\n    /**\n     * Time stamp of the last time the data was updated.\n     */\n    dataUpdatedAt: ShallowRef<number>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Previous Data in Paginated Queries with Pinia Colada\nDESCRIPTION: This snippet demonstrates how to keep the old data while fetching new data for paginated queries using the placeholderData option in useQuery. This approach prevents the state.data from becoming undefined during page transitions.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/paginated-queries.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useRoute } from 'vue-router'\nimport { useQuery } from '@pinia/colada'\n\nconst route = useRoute()\nconst { state } = useQuery({\n  key: () => ['contacts', Number(route.query.page) || 1],\n  query: () =>\n    fetch(`/api/contacts?page=${Number(route.query.page) || 1}`).then((res) => res.json()),\n  placeholderData: (previousData) => previousData,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Invalidating Queries with useMutation hook\nDESCRIPTION: This snippet demonstrates how to invalidate queries within the `onSettled` hook of a `useMutation` function. It is intended to refresh cached data based on the results of a mutation, and updates two different keys based on the mutation variables.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"const { mutate } = useMutation({\n  onSettled({ caches, vars: { id } }) {\n    caches.invalidateQueries({ key: ['contacts-search'] })\n    caches.invalidateQueries({ key: ['contacts', id] })\n  },\n  mutation: (contact) => patchContact(contact),\n})\"\n```\n\n----------------------------------------\n\nTITLE: Global Error Type Configuration in Pinia Colada\nDESCRIPTION: Demonstrates how to set a global error type for all queries and mutations in Pinia Colada by extending the TypesConfig interface. This allows for consistent error typing across the application.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/error-handling.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@pinia/colada'\n\ninterface MyCustomError extends Error {\n  code: number\n}\n\ndeclare module '@pinia/colada' {\n  interface TypesConfig {\n    // This will be used as the default error type for all queries and mutations\n    // instead of the built-in `Error` type\n    error: MyCustomError\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Async Query Invalidation in Mutations\nDESCRIPTION: Demonstrates how to handle async query invalidation within mutation hooks, affecting mutation resolution timing.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/query-invalidation.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryCache = useQueryCache()\n\nconst { mutate } = useMutation({\n  mutation: (text: string) => createTodo(text),\n  onSettled: async () =>\n    // The mutation will resolve/reject after the related queries have been fetched again\n    await queryCache.invalidateQueries({ key: ['todos'], exact: true }),\n})\n```\n\n----------------------------------------\n\nTITLE: Typing Errors Locally in Vue Template with Pinia Colada\nDESCRIPTION: Illustrates how to handle and type errors locally in a Vue template using TypeScript's instanceof operator. This approach allows for specific error handling based on error types.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/error-handling.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ErrorBox v-if=\"error instanceof MyCustomError\" :error=\"error\" />\n  <pre v-else>{{ error.message }}</pre>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Non-Collocated Mutation Setup in TypeScript\nDESCRIPTION: Shows how to set up mutations that are not collocated with their queries using mutation keys for state management.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/optimistic-updates.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutation, useQueryCache } from '@pinia/colada'\nimport { createTodo } from './api/todos'\n\nconst queryCache = useQueryCache()\nconst {\n  mutate,\n  isLoading,\n  variables: newTodo,\n} = useMutation({\n  key: ['createTodo'],\n  mutation: (text: string) => createTodo(text),\n  onSettled: () => queryCache.invalidateQueries({ key: ['todos'] }),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Queries for Server-Side Rendering in TypeScript\nDESCRIPTION: This snippet shows how to create lazy queries in Pinia Colada by using the 'enabled' option to control whether a query executes. This is particularly useful for preventing certain queries from running during server-side rendering.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/ssr.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from '@pinia/colada'\n\nuseQuery({\n  key: ['restaurants', { search: true }],\n  query: () => findRestaurants(),\n  // could also be `!import.meta.env.SSR` in Vite environments\n  enabled: typeof document !== 'undefined',\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Structural Sharing Differences in Pinia Colada\nDESCRIPTION: Shows how to handle the lack of structural sharing in Pinia Colada when watching for data changes. It demonstrates comparing old and new data manually to avoid unnecessary watcher triggers.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/cookbook/migration-tvq.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = useQuery({\n  key: ['todos'],\n  query: fetchTodos,\n})\n\nwatch(data, (newData, oldData) => {\n  if (!isSameData(newData, oldData)) {\n    // do something with the new data\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Serializing and Hydrating Query Cache with devalue in TypeScript\nDESCRIPTION: This code snippet demonstrates how to serialize Pinia Colada's TreeMapNode using devalue and then hydrate the query cache after reviving the data. It handles the custom data structures required for Pinia Colada's cache system.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/ssr.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport devalue from 'devalue'\nimport { markRaw } from 'vue'\nimport { TreeMapNode, serializeTreeMap, hydrateQueryCache } from '@pinia/colada'\n\nconst stringified = devalue.stringify(pinia.state.value, {\n  PiniaColada_TreeMapNode: (data: unknown) => data instanceof TreeMapNode && serializeTreeMap(data),\n})\n\nconst revivedData = devalue.parse(stringified, {\n  PiniaColada_TreeMapNode: (data: ReturnType<typeof serializeTreeMap>) =>\n    // We will use a custom hydration function\n    data,\n})\n\n// we need to install Pinia and PiniaColada before hydrating the cache\napp.use(pinia)\napp.use(PiniaColada)\nhydrateQueryCache(useQueryCache(pinia), revivedData)\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation with Options Object in Pinia Colada\nDESCRIPTION: Shows how to define a mutation using defineMutation() with an options object, which is useful for organizing mutations.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/mutations.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/mutations/todos.ts\nimport { defineMutation } from '@pinia/colada'\n\nexport const useCreateTodo = defineMutation({\n  mutation: (todoText: string) =>\n    fetch('/api/todos', {\n      method: 'POST',\n      body: JSON.stringify({ text: todoText }),\n    }),\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Query Key in Pinia Colada\nDESCRIPTION: Demonstrates how to update the query key when migrating from @tanstack/vue-query to @pinia/colada. In Pinia Colada, the key is expected to be of type MaybeRefOrGetter, simplifying key handling.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/cookbook/migration-tvq.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseQuery({\n  queryKey: ['todos', { page: computed(() => route.query.id) }], // [!code --]\n  key: () => ['todos', { page: route.query.page }], // [!code ++]\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Mutation Implementation\nDESCRIPTION: Example of using useMutation for modifying server data\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/quick-start.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useMutation } from '@pinia/colada'\nimport { patchContact } from '@/api/contacts'\nimport type { Contact } from '@/api/contacts'\nimport ContactDetail from '@/components/ContactDetail.vue'\n\nconst {\n  mutate,\n  state,\n  asyncStatus,\n} = useMutation({\n  mutation: (contact: Contact) => patchContact(contact),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pinia Colada Plugin in TypeScript\nDESCRIPTION: Demonstrates how to create a basic plugin that interacts with the query cache and listens to actions. Shows the recommended pattern of creating plugins as functions that accept options.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PiniaColadaPlugin } from '@pinia/colada'\n\ninterface MyOptions {\n  foo?: string\n}\n\nexport function PiniaColadaDebugPlugin(options: MyOptions = {}): PiniaColadaPlugin {\n  return ({ queryCache, pinia }) => {\n    queryCache.$onAction(({ name, args }) => {\n      if (name === 'setQueryData') {\n        // args type gets narrowed down to the correct type\n        const [queryKey, data] = args\n      } else {\n        // ...\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinia Colada Plugin in Vue Application\nDESCRIPTION: TypeScript code showing how to set up and initialize Pinia Colada plugin in a Vue application after installing Pinia\nSOURCE: https://github.com/posva/pinia-colada/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPinia } from 'pinia'\nimport { PiniaColada } from '@pinia/colada'\n\napp.use(createPinia())\n// install after pinia\napp.use(PiniaColada, {\n  // optional options\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache in Vue 3 Component with TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the query cache in a Vue 3 component's setup script using TypeScript. The useQueryCache function is imported from the @pinia/colada package and called to access the query cache.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/advanced/query-cache.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQueryCache } from '@pinia/colada'\n\nconst queryCache = useQueryCache()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting up Pinia Colada Plugin\nDESCRIPTION: Initializing Pinia Colada plugin in a Vue application after Pinia setup\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport { PiniaColada } from '@pinia/colada'\n\nconst app = createApp({})\napp.use(createPinia())\napp.use(PiniaColada, {})\n\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Cache Key Generation in Pinia Colada\nDESCRIPTION: Shows how to use the toCacheKey function to generate deterministic cache keys for queries.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toCacheKey } from '@pinia/colada'\n\nconst key = toCacheKey(['users', 1, { type: 'friends' }])\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Augmentation for Query Options\nDESCRIPTION: Demonstrates how to extend Pinia Colada's type system by augmenting UseQueryOptions and UseQueryOptionsGlobal interfaces.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Options for the auto-refetch plugin.\n */\nexport interface PiniaColadaAutoRefetchOptions {\n  /**\n   * Whether to enable auto refresh by default.\n   * @default false\n   */\n  autoRefetch?: MaybeRefOrGetter<boolean>\n}\n\n// Add types for the new option\ndeclare module '@pinia/colada' {\n\n  interface UseQueryOptions<TResult, TError, TDataInitial> extends PiniaColadaAutoRefetchOptions {}\n\n  interface UseQueryOptionsGlobal extends PiniaColadaAutoRefetchOptions {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Auto Refetch in Pinia Colada\nDESCRIPTION: Example showing how to initialize and configure the auto refetch plugin globally in a Vue application using Pinia Colada.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/auto-refetch/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PiniaColadaAutoRefetch } from '@pinia/colada-plugin-auto-refetch'\n\n// Pass the plugin to Pinia Colada options\napp.use(PiniaColada, {\n  // ...\n  plugins: [\n    PiniaColadaAutoRefetch({ autoRefetch: true }), // enable globally\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Global Hooks in PiniaColada Plugin - JavaScript\nDESCRIPTION: This code snippet showcases the modifications to the global hooks within the PiniaColada plugin. The changes affect how hooks like onSuccess, onError, and onSettled are integrated, facilitating better management of query status and side effects in the application.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n   app.use(PiniaColada, {\n  +  plugins: [\n  +    PiniaColadaQueryHooksPlugin({\n         onSuccess() {},\n         onError() {},\n         onSettled() {},\n  +    }),\n  +  ],\n   })\n```\n\n----------------------------------------\n\nTITLE: Implementing Pinia Colada Cache Persister Plugin in JavaScript\nDESCRIPTION: Example of how to import and use the PiniaColadaCachePersister plugin with Pinia Colada in a JavaScript application. The plugin is added to the plugins array in the PiniaColada configuration.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/cache-persister/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PiniaColadaCachePersister } from '@pinia/colada-plugin-cache-persister'\n\n// Pass the plugin to Pinia Colada options\napp.use(PiniaColada, {\n  // ...\n  plugins: [PiniaColadaCachePersister()],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Query-Specific Auto Refetch\nDESCRIPTION: Example demonstrating how to configure auto refetch behavior for individual queries using the autoRefetch option.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/auto-refetch/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseQuery({\n  key: ['todos'],\n  query: getTodos,\n  autoRefetch: true, // override local autoRefetch\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Delay for Individual Queries in TypeScript\nDESCRIPTION: Example of how to customize the delay behavior for a specific query using the 'delay' option. This snippet demonstrates disabling the delay for a 'todos' query.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/delay/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nuseQuery({\n  key: ['todos'],\n  query: getTodos,\n  delay: false, // disable delay\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Retry Options\nDESCRIPTION: Example demonstrating how to configure retry behavior for individual queries, including the number of retries and delay between attempts.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/retry/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseQuery({\n  key: ['todos'],\n  query: getTodos,\n  retry: {\n    // Number of retries, can also be a function\n    retry: 3,\n    // Delay between retries, can also be a function\n    delay: 1000,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Simple Composable Query Implementation\nDESCRIPTION: Shows an initial approach to creating a reusable query composable with search functionality. This implementation has limitations with state sharing.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/queries.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from '@pinia/colada'\nimport { ref } from 'vue'\n\nexport function useFilteredTodos() {\n  const search = ref('')\n  const query = useQuery({\n    key: () => ['todos', search.value],\n    query: () => fetch(`/api/todos?search=${search.value}`).then((res) => res.json()),\n  })\n  return { search, ...query }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinia Colada Retry Plugin\nDESCRIPTION: Example showing how to integrate the retry plugin with Pinia Colada by adding it to the plugins array in the configuration options.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/retry/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PiniaColadaRetry } from '@pinia/colada-plugin-retry'\n\n// Pass the plugin to Pinia Colada options\napp.use(PiniaColada, {\n  // ...\n  plugins: [\n    PiniaColadaRetry({\n      // Pinia Colada Retry options\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Pinia Colada\nDESCRIPTION: Configuration code to add Pinia Colada module to Nuxt project settings\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/nuxt.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@pinia/colada-nuxt'],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinia Colada Delay Plugin in JavaScript\nDESCRIPTION: Example of how to import and configure the PiniaColadaDelay plugin within a Pinia Colada setup. It demonstrates setting a default delay of 200ms for all queries.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/delay/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { PiniaColadaDelay } from '@pinia/colada-plugin-delay'\n\n// Pass the plugin to Pinia Colada options\napp.use(PiniaColada, {\n  // ...\n  plugins: [\n    PiniaColadaDelay({\n      delay: 200, // default delay\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinia Colada Options\nDESCRIPTION: TypeScript configuration file setup for customizing Pinia Colada plugin options\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/nuxt.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// colada.options.ts\nimport type { PiniaColadaOptions } from '@pinia/colada'\n\nexport default {\n  // Options here\n} satisfies PiniaColadaOptions\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinia Colada Debug Plugin\nDESCRIPTION: Example showing how to import and configure the Pinia Colada debug plugin in a Vue application. The plugin is added to the Pinia Colada options during app initialization.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/debug/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PiniaColadaDebug } from '@pinia/colada-plugin-debug'\n\n// Pass the plugin to Pinia Colada options\napp.use(PiniaColada, {\n  // ...\n  plugins: [PiniaColadaDebug()],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR Error Handling\nDESCRIPTION: Custom payload plugin implementation for handling errors during server-side rendering\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/nuxt.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// plugins/my-error.ts\nimport { MyError } from '~/errors'\n\nexport default definePayloadPlugin(() => {\n  definePayloadReducer(\n    'MyError',\n    // we serialize the data we need as an array, object, or any other serializable format\n    (data) => data instanceof MyError && [data.message, data.customData],\n  )\n  definePayloadReviver(\n    'MyError',\n    // we revive the data back to an instance of MyError\n    ([message, customData]) => new MyError(message, customData),\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Placeholder Items Array in JavaScript\nDESCRIPTION: Creates a constant array of 100 placeholder items, each with a unique id and a name property. This data structure is useful for simulating large datasets in pagination and search implementations.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/placeholder-data.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const items = new Array(100).fill(null).map((_, i) => ({\n  id: i + 1,\n  name: `Item ${i + 1}`,\n}))\n```\n\n----------------------------------------\n\nTITLE: Defining Cat Facts API Types and Mande Instance in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the Cat Facts API response and creates a mande instance for making API calls to the cat facts endpoint.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/paginated-queries.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mande } from 'mande'\n\nexport interface CatFacts {\n  current_page: number\n  data: Array<{ fact: string, length: number }>\n  first_page_url: string\n  from: number\n  last_page: number\n  last_page_url: string\n  links: Array<{\n    url: string | null\n    label: string\n    active: boolean\n  }>\n  next_page_url: string | null\n  path: string\n  per_page: number\n  prev_page_url: string | null\n  to: number\n  total: number\n}\n\nexport const factsApi = mande('https://catfact.ninja/facts')\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Colada via NPM\nDESCRIPTION: Command to install Pinia and Pinia Colada packages using npm package manager\nSOURCE: https://github.com/posva/pinia-colada/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install pinia @pinia/colada\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Colada Package\nDESCRIPTION: NPM command to install the Pinia Colada package alongside Pinia.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/guide/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @pinia/colada\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Colada Nuxt Module\nDESCRIPTION: Command to install the Pinia Colada module in a Nuxt application using nuxi\nSOURCE: https://github.com/posva/pinia-colada/blob/main/nuxt/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module add @pinia/colada-nuxt\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Colada Nuxt Module\nDESCRIPTION: Commands to install Pinia Colada and its Nuxt module using npm package manager\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @pinia/colada\nnpx nuxi module add @pinia/colada-nuxt\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Pinia Colada Packages\nDESCRIPTION: Command to manually install both Pinia Colada and its Nuxt module\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/nuxt.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @pinia/colada @pinia/colada-nuxt\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Colada Package\nDESCRIPTION: Command to install Pinia Colada alongside Pinia using npm package manager\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @pinia/colada\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Colada Retry Plugin\nDESCRIPTION: Command to install the Pinia Colada retry plugin package via npm.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/retry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @pinia/colada-plugin-retry\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Colada Cache Persister Plugin with npm\nDESCRIPTION: Command to install the Pinia Colada cache persister plugin using npm package manager.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/cache-persister/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @pinia/colada-plugin-cache-persister\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Nuxt Module\nDESCRIPTION: Command to install the required Pinia Nuxt module dependency\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/nuxt.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module add pinia\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Colada Delay Plugin via npm\nDESCRIPTION: Command to install the @pinia/colada-plugin-delay package using npm. This is a prerequisite step before using the plugin in your project.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/delay/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @pinia/colada-plugin-delay\n```\n\n----------------------------------------\n\nTITLE: Installing Migration Codemods with pnpm\nDESCRIPTION: Command to install and run codemods using pnpm to automate migrations from version 0.13 to 0.14\nSOURCE: https://github.com/posva/pinia-colada/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm --package=@ast-grep/cli dlx ast-grep scan -r node_modules/@pinia/colada/codemods/rules/migration-0-13-to-0-14.yaml -i src\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Colada Debug Plugin via npm\nDESCRIPTION: Command to install the Pinia Colada debug plugin using npm package manager.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/debug/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @pinia/colada-plugin-debug\n```\n\n----------------------------------------\n\nTITLE: Starting Development Environment for Pinia Colada Devtools\nDESCRIPTION: Command to run the development environment for the Pinia Colada Devtools package using pnpm.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/devtools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Colada Auto Refetch Plugin\nDESCRIPTION: Command to install the Pinia Colada auto refetch plugin via npm package manager.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/auto-refetch/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @pinia/colada-plugin-auto-refetch\n```\n\n----------------------------------------\n\nTITLE: Building Pinia Colada Devtools Package\nDESCRIPTION: Command to build the Pinia Colada Devtools package using pnpm.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/devtools/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Testing Pinia Colada Devtools in Playground\nDESCRIPTION: Command to test the built package in the playground environment from the root directory.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/devtools/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run play # at root\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Script Setup Block\nDESCRIPTION: Vue script setup block with commented import statements for home page components and styles\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// import HomeSponsors from './.vitepress/theme/components/HomeSponsors.vue'\n// import './.vitepress/theme/styles/home-links.css'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Documenting Pinia Colada Project\nDESCRIPTION: Markdown header and description for a Vue 3 development template using Vite and Pinia Colada.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/playground/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Pinia Colada Playground\n\nThis template should help get you started developing with Vue 3 in Vite.\n```\n\n----------------------------------------\n\nTITLE: Linking to Migration Guide in Markdown\nDESCRIPTION: This snippet provides a markdown link to the migration guide from @tanstack/vue-query to @pinia/colada.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/docs/cookbook/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Migrating from `@tanstack/vue-query` to `@pinia/colada`](./migration-tvq.md)\n```\n\n----------------------------------------\n\nTITLE: Local Development Commands\nDESCRIPTION: Set of commands for local development, testing, and releasing the Pinia Colada module\nSOURCE: https://github.com/posva/pinia-colada/blob/main/nuxt/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\npnpm install\n\n# Generate type stubs\npnpm run dev:prepare\n\n# Develop with the playground\npnpm run dev\n\n# Build the playground\npnpm run dev:build\n\n# Run ESLint\npnpm run lint\n\n# Run Vitest\npnpm run test\npnpm run test:watch\n\n# Release new version\npnpm run release\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.0.2\nDESCRIPTION: Initial release notes for version 0.0.2 introducing the auto-refetch plugin feature.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/auto-refetch/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.2 (2025-01-31)\n\n### Features\n\n- **plugins:** add auto-refetch plugin ([#97](https://github.com/posva/pinia-colada/issues/97)) ([dcf8c57](https://github.com/posva/pinia-colada/commit/dcf8c57a5c6695c02e046ba5e6731de71976a588))\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.0.5\nDESCRIPTION: Release notes for version 0.0.5 documenting a bug fix to add autoRefetch to globals.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/auto-refetch/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.0.5](https://github.com/posva/pinia-colada/compare/@pinia/colada-plugin-auto-refetch@0.0.4...@pinia/colada-plugin-auto-refetch@0.0.5) (2025-03-18)\n\n### Bug Fixes\n\n- **types:** add autoRefetch to globals ([42eaaea](https://github.com/posva/pinia-colada/commit/42eaaea02be803dac463f1c1bb26a0f70738271a)), closes [#225](https://github.com/posva/pinia-colada/issues/225)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.0.3\nDESCRIPTION: Release notes for version 0.0.3 documenting types support for getter functionality.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/auto-refetch/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.0.3](https://github.com/posva/pinia-colada/compare/@pinia/colada-plugin-auto-refetch@0.0.2...@pinia/colada-plugin-auto-refetch@0.0.3) (2025-02-01)\n\n### Bug Fixes\n\n- **types:** support getter ([017fcdc](https://github.com/posva/pinia-colada/commit/017fcdc844c19df91feec84221d28e0a56bd9455))\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.0.4\nDESCRIPTION: Release notes for version 0.0.4 indicating no changes in this release.\nSOURCE: https://github.com/posva/pinia-colada/blob/main/plugins/auto-refetch/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.0.4](https://github.com/posva/pinia-colada/compare/@pinia/colada-plugin-auto-refetch@0.0.3...@pinia/colada-plugin-auto-refetch@0.0.4) (2025-03-04)\n\nThis release contains no changes\n```\n\n----------------------------------------\n\nTITLE: Running Migration Codemods with ast-grep\nDESCRIPTION: Alternative command for running codemods using globally installed ast-grep to migrate from version 0.13 to 0.14\nSOURCE: https://github.com/posva/pinia-colada/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nast-grep scan -r node_modules/@pinia/colada/codemods/rules/migration-0-13-to-0-14.yaml -i src\n```"
  }
]