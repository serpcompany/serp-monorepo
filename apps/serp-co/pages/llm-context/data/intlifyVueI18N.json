[
  {
    "owner": "intlify",
    "repo": "vue-i18n",
    "content": "TITLE: Creating I18n Instance\nDESCRIPTION: This JavaScript code snippet shows how to create an i18n instance using the `createI18n` function from Vue I18n. It configures the `locale`, `fallbackLocale`, and `messages` options. `locale` sets the initial language, `fallbackLocale` provides a default language if a translation is missing, and `messages` contains the translations for each language.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/started.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = createI18n({\n  locale: 'ja',\n  fallbackLocale: 'en',\n  messages: {\n    en: {\n      message: {\n        hello: 'hello world'\n      }\n    },\n    ja: {\n      message: {\n        hello: 'こんにちは、世界'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Template Translation\nDESCRIPTION: This Vue template demonstrates the use of the `$t` translation API provided by Vue I18n to localize text within a component.  It assumes Vue I18n has been configured and the `message.hello` key has been defined in the locale messages. The output depends on the currently active locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/started.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <h1>{{ $t('message.hello') }}</h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Message Translation with useI18n\nDESCRIPTION: This snippet demonstrates how to use the `t` function from the Composer instance returned by `useI18n` to translate messages with named and list parameters. It includes locale messages for both English and Japanese, and uses computed properties to pass dynamic data to the translation function. The `useI18n` function is called with locale and message options for local scope.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { computed } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nconst { t } = useI18n({\n  locale: 'en',\n  messages: {\n    en: {\n      msg: 'hello',\n      named: '{msg} world!',\n      list: '{0} world!',\n      literal: \"{'hello'} world!\",\n      the_world: 'the world',\n      dio: 'DIO:',\n      linked: '@:dio @:the_world !!!!'\n    },\n    ja: {\n      msg: 'こんにちは',\n      named: '{msg} 世界！',\n      list: '{0} 世界！',\n      literal: \"{'こんにちは'} 世界！\",\n      the_world: 'ザ・ワールド！',\n      dio: 'ディオ:',\n      linked: '@:dio @:the_world ！！！！'\n    }\n  }\n})\n\nconst msg = computed(() => t('msg'))\n</script>\n\n<template>\n  <p>{{ t('named', { msg }) }}</p>\n  <p>{{ t('list', [msg]) }}</p>\n  <p>{{ t('literal') }}</p>\n  <p>{{ t('linked') }}</p>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Define $t(key) Function for Translation\nDESCRIPTION: Defines the `$t(key)` function, which is used for locale message translation. It accepts a key and returns the translated message, and it's reactive to locale changes when used in a reactive context.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Initializing Datetime Formats JavaScript\nDESCRIPTION: Defines datetime formats for different locales (en-US, ja-JP) using ECMA-402 Intl.DateTimeFormat options. The formats include 'short' and 'long' with specific year, month, day, weekday, hour, and minute configurations.  These formats are then used when creating the i18n instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/datetime.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst datetimeFormats = {\n  'en-US': {\n    short: {\n      year: 'numeric', month: 'short', day: 'numeric'\n    },\n    long: {\n      year: 'numeric', month: 'short', day: 'numeric',\n      weekday: 'short', hour: 'numeric', minute: 'numeric'\n    }\n  },\n  'ja-JP': {\n    short: {\n      year: 'numeric', month: 'short', day: 'numeric'\n    },\n    long: {\n      year: 'numeric', month: 'short', day: 'numeric',\n      weekday: 'short', hour: 'numeric', minute: 'numeric', hour12: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using VueI18n in Vue Component - Vue + TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `useI18n` composable within a Vue component to access the global scope VueI18n instance and its translation, date formatting, and number formatting functions. It imports `useI18n` from 'vue-i18n' and utilizes the `t`, `d`, and `n` functions for accessing localized resources without needing to specify type parameters, leveraging the globally defined resource schema.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/typescript.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n'\n\n// use global scope\nconst { t, d, n } = useI18n({\n  inheritLocale: true\n})\n</script>\n\n<template>\n  <p>`t` resource key completion: {{ t('menu.login') }}</p>\n  <p>`d` resource key completion: {{ d(new Date(), 'short') }}</p>\n  <p>`n` resource key completion: {{ n(1000, 'currency') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: $t(key, named, defaultMsg) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the `$t` function in Vue I18n, which is used for locale message translation. It takes a key, named interpolation values, and a default message as parameters. It returns the translated message. This function is supported for Composition API mode until v9, and v10 or later can also be used in Legacy API mode.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, named: NamedValue, defaultMsg: string): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Locale - Javascript\nDESCRIPTION: This code initializes Vue I18n with Japanese as the primary locale and English as the fallback locale.  When a translation is missing in Japanese, Vue I18n will automatically fall back to the English translation. This setup is essential to enable translation fallback.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/fallback.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = createI18n({\n  locale: 'ja',\n  fallbackLocale: 'en',\n  messages\n})\n```\n\n----------------------------------------\n\nTITLE: English Locale Resource (en.json)\nDESCRIPTION: This JSON file defines the English locale resources for the application. It contains key-value pairs where the keys are used for translation and the values are the corresponding English translations.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": \"Hello, {name}!\",\n  \"language\": \"Language\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Scope with useI18n\nDESCRIPTION: This snippet demonstrates how to access the global scope Composer instance using `useI18n` with the `useScope: 'global'` option.  This allows the component to use the translations, datetime formats, and number formats defined in the global i18n instance. This enables the component to access functions and properties exposed from the global Composer instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useI18n } from 'vue-i18n'\n\nconst { t } = useI18n({ useScope: 'global' })\n\n// Something to do here ...\n```\n\n----------------------------------------\n\nTITLE: Creating i18n Nuxt Plugin\nDESCRIPTION: This TypeScript code defines a Nuxt plugin that initializes Vue I18n. It creates an i18n instance with specified configurations (legacy mode, global injection, default locale, and messages) and registers it with the Vue app.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\n\nexport default defineNuxtPlugin(({ vueApp }) => {\n  const i18n = createI18n({\n    legacy: false,\n    globalInjection: true,\n    locale: 'en',\n    messages: {\n      en: {\n        hello: 'Hello, {name}!'\n      }\n    }\n  })\n\n  vueApp.use(i18n)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Vue I18n in Vue Component with <script setup> (Vue)\nDESCRIPTION: This Vue component demonstrates the usage of `useI18n` within the `<script setup>` syntax. It retrieves the `t` function from `useI18n` within a simplified syntax allowing the translation of messages within the template. It shows usage with both `$t` and `t`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue3.md#_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { useI18n } from 'vue-i18n'\n\nconst { t } = useI18n() // use as global scope\n</script>\n\n<template>\n  <p>{{ $t('hello') }}</p>\n  <p>{{ t('hello') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Fallback Decision Maps - Javascript\nDESCRIPTION: This JavaScript code defines a fallback decision map for different locales. This allows specifying different fallback locales based on the current locale. The 'default' key provides a fallback chain that applies to all locales not explicitly defined in the map.  This enables complex and customizable fallback strategies.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/fallback.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfallbackLocale: {\n  /* 1 */ 'de-CH':   ['fr', 'it'],\n  /* 2 */ 'zh-Hant': ['zh-Hans'],\n  /* 3 */ 'es-CL':   ['es-AR'],\n  /* 4 */ 'es':      ['en-GB'],\n  /* 5 */ 'pt':      ['es-AR'],\n  /* 6 */ 'default': ['en', 'da']\n},\n```\n\n----------------------------------------\n\nTITLE: Translate with locale V9 (TS)\nDESCRIPTION: Demonstrates how to use the `t` function with a locale parameter in Vue I18n v9.x within a TypeScript context to translate a message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\n\nconsole.log(i18n.global.t('message.hello', 'ja'))\n```\n\n----------------------------------------\n\nTITLE: Locale Message Translation (t) - TypeScript\nDESCRIPTION: Translates a locale message using the `t` function, which is part of the `ComposerTranslation` interface. It accepts a key, resource key, or number as the message identifier and returns the translated message.  The translation can be reactive and will update when the locale changes.  The translation is done with preferentially local scope locale messages than global scope locale messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Messages for Translation - Javascript\nDESCRIPTION: This code defines a messages object with translations for 'hello' in English and an empty object for Japanese. This is the starting point to demonstrate the fallback mechanism when a translation is missing in the target locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/fallback.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    hello: 'Hello, world!'\n  },\n  ja: {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Interpolation Example - Vue I18n\nDESCRIPTION: Demonstrates named interpolation with Vue I18n.  It shows how to define a locale message with placeholders and then use the $t function to interpolate values from a JavaScript object. The code defines a message in the 'en' locale and renders it within a template, substituting `{msg}` with 'hello'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    message: {\n      hello: '{msg} world'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vue I18n with Vue App\nDESCRIPTION: This code snippet demonstrates how to integrate Vue I18n into a Vue application. It creates a Vue I18n instance with specified options, creates a Vue app instance, and then installs Vue I18n into the Vue app instance using `app.use(i18n)`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/installation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'vue-i18n'\n\nconst i18n = createI18n({\n  // something vue-i18n options here ...\n})\n\nconst app = createApp({\n  // something vue options here ...\n})\n\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Using v-t Directive with String Syntax in Template\nDESCRIPTION: This HTML template demonstrates how to use the `v-t` directive with string syntax to translate locale messages. It shows both using a string literal for the key path and binding a key path via a data property. The directive translates the specified locale message and inserts it into the paragraph element.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/directive.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"string-syntax\">\n  <!-- Using a string literal -->\n  <p v-t=\"'hello'\"></p>\n  <!-- Binding a key path via data -->\n  <p v-t=\"path\"></p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rename i18n-t Component Tag (Vue I18n v9+)\nDESCRIPTION: This snippet shows the usage of the `<i18n-t>` component in Vue I18n v9 and later. It uses the `keypath` prop to specify the translation key. Input is a translation key ('message.greeting'). Output is the translated text. This replaces the `<i18n>` component from Vue I18n v8.x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<i18n-t keypath=\"message.greeting\" />\n```\n\n----------------------------------------\n\nTITLE: Number Formatting with useI18n\nDESCRIPTION: This snippet demonstrates number formatting using the `n` function from the Composer instance. It defines number formats for the 'en-US' locale (currency style) and uses the `n` function to format a number. `useI18n` is used to configure locale, messages, and number formats.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nconst { t, n } = useI18n({\n  locale: 'en-US',\n  messages: {\n    'en-US': {\n      money: 'Money'\n    }\n  },\n  numberFormats: {\n    'en-US': {\n      currency: {\n        style: 'currency',\n        currency: 'USD'\n      }\n    }\n  }\n})\n\nconst money = ref(1000)\n</script>\n\n<template>\n  <p>{{ t('money') }}: {{ n(money, 'currency') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Translation Component Usage HTML\nDESCRIPTION: Demonstrates the basic usage of the `<i18n-t>` component in a Vue template. The `keypath` prop specifies the locale message to use, and the child elements are interpolated into the message.  The `tag` prop specifies the root element type.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <!-- ... -->\n  <i18n-t keypath=\"term\" tag=\"label\" for=\"tos\">\n    <a :href=\"url\" target=\"_blank\">{{ $t('tos') }}</a>\n  </i18n-t>\n  <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Vue I18n in Vue Component with setup option (Vue)\nDESCRIPTION: This Vue component demonstrates the usage of `useI18n` within the `setup` option of a Vue component. It retrieves the `t` function from `useI18n`, allowing the translation of messages within the template. It shows usage with both `$t` and `t`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue3.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<script>\nimport { defineComponent } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nexport default defineComponent({\n  name: 'Hello',\n  setup() {\n    const { t } = useI18n() // use as global scope\n    return { t }\n  }\n})\n</script>\n\n<template>\n  <p>{{ $t('hello') }}</p>\n  <p>{{ t('hello') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: HTML Message Usage in Template - Vue I18n\nDESCRIPTION: Illustrates how to use the `v-html` directive in conjunction with the `$t` function to render HTML messages in a Vue template. The v-html directive is used to interpret the HTML tags present in the translated message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<p v-html=\"$t('message.hello')\"></p>\n```\n\n----------------------------------------\n\nTITLE: $t(key, named, options) Signature - Vue I18n\nDESCRIPTION: This signature of the `$t` method translates a locale message using a key, named interpolation values, and translation options. It is supported for Composition API mode until v9, and v10 or later can also be used in Legacy API mode.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, named: NamedValue, options: TranslateOptions): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Adding Language Switching to app.vue\nDESCRIPTION: This Vue template adds a language switching feature using a select element. It binds the selected value to the `$i18n.locale` property, allowing users to change the application's locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>{{ $t('hello', { name: 'vue-i18n' }) }}</h1>\n    <form> // [!code ++]\n      <label for=\"locale-select\">{{ $t('language') }}: </label> // [!code ++]\n      <select id=\"locale-select\" v-model=\"$i18n.locale\"> // [!code ++]\n        <option value=\"en\">en</option> // [!code ++]\n        <option value=\"fr\">fr</option> // [!code ++]\n        <option value=\"ja\">ja</option> // [!code ++]\n      </select> // [!code ++]\n    </form> // [!code ++]\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Instance and Component Creation (JavaScript)\nDESCRIPTION: Demonstrates how to create a Vue I18n instance with locale messages and integrate it into a Vue application. It shows how to define messages for different locales, create the i18n instance, and use it within a Vue component by mounting the component to the app.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/component.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'vue-i18n'\n\nconst messages = {\n  en: {\n    tos: 'Term of Service',\n    term: 'I accept xxx {0}.'\n  },\n  ja: {\n    tos: '利用規約',\n    term: '私は xxx の{0}に同意します。'\n  }\n}\n\nconst i18n = createI18n({\n  locale: 'en',\n  messages\n})\n\nconst app = createApp({\n  data: {\n    url: '/term'\n  }\n}).use(i18n).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Locale Selection via v-model in Vue Template\nDESCRIPTION: This Vue template demonstrates how to bind a `<select>` element to the `locale` property, enabling users to change the application's locale.  The `v-model` directive updates the locale value when the selected option changes.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<select v-model=\"locale\">\n  <option value=\"en\">en</option>\n  <option value=\"ja\">ja</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Use I18n Composition API Hook - Vue I18n (Typescript)\nDESCRIPTION: This snippet shows the function signature for the `useI18n` composable function in Vue I18n. This function allows integrating Vue I18n into Vue components using the Composition API.  It returns a `Composer` instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function useI18n<Schema = DefaultLocaleMessageSchema, Locales = 'en-US', Options extends UseI18nOptions<SchemaParams<Schema, VueMessageType>, LocaleParams<Locales>> = UseI18nOptions<SchemaParams<Schema, VueMessageType>, LocaleParams<Locales>>>(options?: Options): Composer<NonNullable<Options['messages']>, NonNullable<Options['datetimeFormats']>, NonNullable<Options['numberFormats']>, NonNullable<Options['locale']>>;\n```\n\n----------------------------------------\n\nTITLE: Translation Directive Examples (HTML)\nDESCRIPTION: Demonstrates the usage of the `v-t` directive with both string and object syntax. The string syntax uses a keypath to access locale messages. The object syntax allows specifying the path, locale, and arguments for formatting the message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/directive.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- string syntax: literal -->\n<p v-t=\"'foo.bar'\"></p>\n\n<!-- string syntax: binding via data or computed props -->\n<p v-t=\"msg\"></p>\n\n<!-- object syntax: literal -->\n<p v-t=\"{ path: 'hi', locale: 'ja', args: { name: 'kazupon' } }\"></p>\n\n<!-- object syntax: binding via data or computed props -->\n<p v-t=\"{ path: greeting, args: { name: fullName } }\"></p>\n```\n\n----------------------------------------\n\nTITLE: Translate with `$t` and Named in Vue I18n v10+ (Vue Template)\nDESCRIPTION: Migrates to using `$t` with a named value and the plural value within Vue templates.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_35\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('banana', { name: 'dio' }, 1) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating VueI18n Instance - TypeScript\nDESCRIPTION: This snippet showcases how to create a VueI18n instance with type-safe global resources using `createI18n`. It imports locale messages from JSON files and defines datetime and number formats. The `createI18n` function is configured with these options, and the global type definitions defined previously will be used to provide type safety within the VueI18n instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/typescript.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createI18n, type I18nOptions } from 'vue-i18n'\n\n/**\n * import locale messages resource from json for global scope\n */\nimport enUS from './locales/en-US.json'\nimport jaJP from './locales/ja-JP.json'\n\nconst options: I18nOptions = {\n  legacy: false,\n  locale: 'ja-JP',\n  fallbackLocale: 'en-US',\n  messages: {\n    'en-US': enUS,\n    'ja-JP': jaJP\n  },\n  datetimeFormats: {\n    'ja-JP': {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short',\n        timezone: 'Asia/Tokyo'\n      }\n    }\n  },\n  numberFormats: {\n    'ja-JP': {\n      currency: {\n        style: 'currency',\n        currencyDisplay: 'symbol',\n        currency: 'JPY'\n      }\n    }\n  }\n}\n\n/**\n * setup vue-i18n with i18n resources with global type definition.\n * if you define the i18n resource schema in your `*.d.ts`, these is checked with typeScript.\n */\nconst i18n = createI18n<false, typeof options>(options)\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentCustomProperties Interface Typescript\nDESCRIPTION: Defines the interface `ComponentCustomProperties` that describes custom properties injected into Vue components by Vue I18n. These properties, such as `$i18n` and `$t`, provide access to the VueI18n instance/exported composer and translation functionalities, respectively. `$i18n` provides access to the global VueI18n instance or the exported composer instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ComponentCustomProperties;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$i18n: VueI18n | ExportedGlobalComposer;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, locale: Locale): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, locale: Locale, list: unknown[]): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, locale: Locale, named: object): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, plural: number): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, plural: number, options: TranslateOptions): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, defaultMsg: string): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, defaultMsg: string, options: TranslateOptions): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, list: unknown[]): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, list: unknown[], plural: number): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, list: unknown[], defaultMsg: string): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, list: unknown[], options: TranslateOptions): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, named: NamedValue): TranslateResult;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, named: NamedValue, plural: number): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Linked Messages Usage in Template - Vue I18n\nDESCRIPTION: Shows how to use linked messages within a Vue template. The `$t` function is used to retrieve the 'message.linked' message, which includes references to the 'message.dio' and 'message.the_world' messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('message.linked') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Registering I18n Plugin\nDESCRIPTION: This JavaScript code demonstrates how to register the created i18n instance as a plugin within a Vue application. The `app.use(i18n)` call registers the plugin before mounting the application.  This makes the i18n functionalities, such as `$t`, available to all components in the application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/started.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = createApp(Vue)\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Literal Interpolation Usage in Template - Vue I18n\nDESCRIPTION: Illustrates how to use the `$t` function with literal interpolation in a Vue template. It passes parameters for 'account' and 'domain', which are then used to construct the email address based on the literal interpolation format in the locale message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p>email: {{ $t('address', { account: 'foo', domain: 'domain.com' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Number Formatting $n(value, key, locale, args) - TypeScript\nDESCRIPTION: Formats a number value using a specified number format key, locale, and arguments. This overloaded `$n` provides full control over the formatting process.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, key: string, locale: Locale, args: { [key: string]: string | boolean | number }): NumberFormatResult\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Config for I18n Optimization\nDESCRIPTION: This JavaScript code configures the `nuxt.config.ts` file to integrate `@intlify/unplugin-vue-i18n` for optimizing Vue I18n performance. It transpiles 'vue-i18n' and configures the Vite plugin to include locale resources for pre-compilation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineNuxtConfig } from 'nuxt'\nimport { resolve, dirname } from 'node:path' // [!code ++]\nimport { fileURLToPath } from 'url' // [!code ++]\nimport VueI18nVitePlugin from '@intlify/unplugin-vue-i18n/vite' // [!code ++]\n\n// https://nuxt.com/docs/api/configuration/nuxt-config\nexport default defineNuxtConfig({\n  build: { // [!code ++]\n    transpile: ['vue-i18n'] // [!code ++]\n  }, // [!code ++]\n  vite: { // [!code ++]\n    plugins: [ // [!code ++]\n      VueI18nVitePlugin({ // [!code ++]\n        include: [ // [!code ++]\n          resolve(dirname(fileURLToPath(import.meta.url)), './locales/*.json') // [!code ++]\n        ] // [!code ++]\n      }) // [!code ++]\n    ] // [!code ++]\n  } // [!code ++]\n})\n```\n\n----------------------------------------\n\nTITLE: Translation Component Pluralization Setup JavaScript\nDESCRIPTION: Sets up the Vue I18n instance and Vue app with pluralization messages. The messages contain plural forms for displaying banana counts and the `count` is exposed through the component setup.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createApp, ref } = Vue\nconst { createI18n } = VueI18n\n\nconst i18n = createI18n({\n  legacy: false,\n  locale: 'en',\n  messages: {\n    en: {\n      message: {\n        plural: 'no bananas | {n} banana | {n} bananas'\n      }\n    }\n  }\n})\n\nconst app = createApp({\n  setup() {\n    const count = ref(2)\n    return { count }\n  }\n})\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Using i18n Custom Blocks with useI18n in Vue SFC\nDESCRIPTION: This example shows how to use i18n custom blocks in a Vue Single File Component (SFC) in conjunction with the `useI18n` Composition API.  It merges the i18n custom block messages with the messages defined in the `useI18n` options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useI18n } from 'vue-i18n'\nimport en from './en.json'\n\nconst { t, availableLocales, getLocaleMessages } = useI18n({\n  locale: 'en',\n  messages: {\n    en\n  }\n})\n\navailableLocales.forEach(locale => {\n  console.log(`${locale} locale messages`, getLocaleMessages(locale))\n})\n</script>\n\n<i18n locale=\"ja\">\n{\n  \"hello\": \"こんにちは！\"\n}\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Named Interpolation\nDESCRIPTION: This snippet demonstrates how to use named interpolation within a message function using the `named` function from the message context.  It shows how to access named parameters passed to `$t` within the message function and use them in the returned string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    greeting: ({ named }) => `hello, ${named('name')}!`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Interpolation and Plural Translation (t) - TypeScript\nDESCRIPTION: Translates a locale message with both named interpolations and pluralization using the `t` function. It takes a key, resource key, or number, an object with named values, and a plural number to select the correct plural form. The locale message needs to have placeholders like `{x}` and support pluralization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, named: NamedValue, plural: number): string;\n```\n\n----------------------------------------\n\nTITLE: I18n Host Web Component (Vue)\nDESCRIPTION: This code defines a Vue component (`I18nHost.ce.vue`) that hosts the i18n instance for other Web Components. It creates an i18n instance using `createI18n` and provides it to other components using `provide` and `I18nInjectionKey`.  The template uses a `slot` to render the content of other Web Components.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/wc.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { provide } from 'vue'\nimport { createI18n, I18nInjectionKey } from 'vue-i18n'\n\n/**\n * create an i18n instance to host for other web components\n */\nconst i18n = createI18n<false>({\n  legacy: false, // must set to `false`\n  locale: 'en',\n  messages: {\n    en: {\n      hello: 'Hello!'\n    },\n    ja: {\n      hello: 'こんにちは！'\n    }\n  }\n})\n\n/**\n * provide i18n instance with `I18nInjectionKey` for other web components\n */\nprovide(I18nInjectionKey, i18n)\n</script>\n\n<!-- template to slot the content -->\n<template>\n  <slot />\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Translate with `t` and Locale in Vue I18n v10+\nDESCRIPTION: This shows how to migrate from `tc` with locale to `t` with locale.  The locale is now passed within the `options` argument.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.t('banana', 1, { locale: 'ja' }))\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentCustomOptions Interface Typescript\nDESCRIPTION: Defines the interface `ComponentCustomOptions` which allows specifying Vue I18n options for a component using the `i18n` property. This interface extends the standard Vue component options to include Vue I18n specific configuration. It utilizes `VueI18nOptions` interface for configuration.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ComponentCustomOptions;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ni18n?: VueI18nOptions;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Pluralization Rule with VueI18n - JavaScript\nDESCRIPTION: Demonstrates how to integrate a custom pluralization rule into VueI18n using the `pluralizationRules` option (Options API).  It sets the locale to 'ru' and defines custom rules for the Russian language, along with the corresponding locale messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/pluralization.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = createI18n({\n  locale: 'ru',\n  // use pluralRules for Composition api\n  pluralizationRules: {\n    ru: customRule\n  },\n  messages: {\n    ru: {\n      car: '0 машин | {n} машина | {n} машины | {n} машин',\n      banana: 'нет бананов | {n} банан | {n} банана | {n} бананов'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Formatting with i18n-n Scoped Slots\nDESCRIPTION: Shows advanced custom formatting using multiple scoped slots with the `i18n-n` component. It demonstrates styling different parts of the number, such as currency, integer, group (thousands separator), and fraction, providing fine-grained control over the presentation of the formatted number.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/number.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<i18n-n tag=\"span\" :value=\"1234\" :format=\"{ key: 'currency', currency: 'EUR' }\">\n  <template #currency=\"slotProps\">\n    <span style=\"color: green\">{{ slotProps.currency }}</span>\n  </template>\n  <template #integer=\"slotProps\">\n    <span style=\"font-weight: bold\">{{ slotProps.integer }}</span>\n  </template>\n  <template #group=\"slotProps\">\n    <span style=\"font-weight: bold\">{{ slotProps.group }}</span>\n  </template>\n  <template #fraction=\"slotProps\">\n    <span style=\"font-size: small\">{{ slotProps.fraction }}</span>\n  </template>\n</i18n-n>\n```\n\n----------------------------------------\n\nTITLE: $tm(key) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the `$tm` function in Vue I18n, used to retrieve locale messages. It takes a key as a parameter and returns the corresponding locale message. If `i18n` component options are specified, local scope messages are prioritized; otherwise, global scope messages are used. If the locale is changed, returned messages will also change, falling back to fallback locales if necessary.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n$tm(key: Key): LocaleMessageValue<VueMessageType> | {}\n```\n\n----------------------------------------\n\nTITLE: Vue Template with Localized Component\nDESCRIPTION: This is a Vue template that renders the root component and the localized Component1. It demonstrates how the `$t` function is used to translate messages in both the root and the component scopes.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/local.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <h1>Root</h1>\n  <p>{{ $t(\"message.hello\") }}</p>\n  <Component1 />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Named Interpolation with Options (t) - TypeScript\nDESCRIPTION: Translates a locale message with named interpolations, allowing additional translation options. It accepts a key, resource key, or number, an object with named values, and a `TranslateOptions` object. Placeholders `{x}` should be in the locale messages. It allows suppressing warnings when translation is missing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, named: NamedValue, options: TranslateOptions<Locales>): string;\n```\n\n----------------------------------------\n\nTITLE: Type-safe Resource Usage in Vue Component\nDESCRIPTION: Demonstrates defining type-safe resources within a Vue component using `useI18n` from the Composition API.  It imports locale messages from a JSON file, defines TypeScript types for both message and number formats, and then specifies these types as the generic parameters for `useI18n`. The code shows how to use the `t` and `n` functions with type checking.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/typescript.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n'\nimport enUS from './en-US.json' // import locale messages for Vue component\n\n// define message schema for Vue component\ntype MessageSchema = typeof enUS\n\n// define number format schema for Vue component\ntype NumberSchema = {\n  currency: {\n    style: 'currency'\n    currencyDisplay: 'symbol'\n    currency: string\n  }\n}\n\n/*\n * You can specify the your definition schema with object literal at first type parameters\n * About type parameter, see the http://vue-i18n.intlify.dev/api/composition.html#usei18n\n */\nconst { t, n } = useI18n<{message: MessageSchema,number: NumberSchema}, 'en-US'>({\n  inheritLocale: true,\n  messages: {\n    'en-US': enUS\n  },\n  numberFormats: {\n    'en-US': {\n      currency: {\n        style: 'currency',\n        currencyDisplay: 'symbol',\n        currency: 'USD'\n      }\n    }\n  }\n})\n</script>\n\n<template>\n  <p>message: {{ t('messages.hello', { name: 'kazupon' }) }}</p>\n  <p>currency: {{ n(1000, 'currency') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Message Compiler with intl-messageformat in Vue I18n\nDESCRIPTION: This code snippet demonstrates how to create a custom message compiler for Vue I18n using `intl-messageformat`. It shows how to integrate a custom compiler into the `createI18n` function and handles string messages by creating an `IntlMessageFormat` instance. It also demonstrates error handling for unsupported AST messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\nimport IntlMessageFormat from 'intl-messageformat'\n\nfunction messageCompiler(message, { locale, key, onError }) {\n  if (typeof message === 'string') {\n    // You can tune your message compiler performance more with your cache strategy or also memoization at here\n    const formatter = new IntlMessageFormat(message, locale)\n    return ctx => formatter.format(ctx.values)\n  } else {\n    // If you would like to support it for AST,\n    // You need to transform locale mesages such as `json`, `yaml`, etc. with the bundle plugin.\n    onError && onError(new Error('not support for AST'))\n    return () => key // return default with `key`\n  }\n}\n\n// call with I18n option\nconst i18n = createI18n({\n  legacy: false,\n  locale: 'ja',\n  messageCompiler, // set your message compiler\n  messages: {\n    en: {\n      hello: 'hello world!',\n      greeting: 'hi, {name}!',\n      // ICU Message format\n      photo: `You have {numPhotos, plural,\n        =0 {no photos.}\n        =1 {one photo.}\n        other {# photos.}\n      }`\n    },\n  }\n})\n\n// the below your something to do ...\n// ...\n\n```\n\n----------------------------------------\n\nTITLE: Translate with `t`, Named, Plural in Vue I18n v10+\nDESCRIPTION: Shows how to migrate from `tc` to `t` when using a named value and choice. Requires parameter reordering.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.t('banana', { name: 'dio' }, 2))\n```\n\n----------------------------------------\n\nTITLE: Translate with list and options V10 (TS)\nDESCRIPTION: Demonstrates how to use the `t` function with a list and options for locale parameter in Vue I18n v10 or later within a TypeScript context to translate a message with arguments.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\n\nconsole.log(i18n.global.t('message.hello', ['dio'], { locale: 'ja' }))\n```\n\n----------------------------------------\n\nTITLE: Translate with named and options V10 (TS)\nDESCRIPTION: Demonstrates how to use the `t` function with named arguments and options for locale parameter in Vue I18n v10 or later within a TypeScript context to translate a message with named arguments.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\n\nconsole.log(i18n.global.t('message.hello', { name: 'dio' }, { locale: 'ja' }))\n```\n\n----------------------------------------\n\nTITLE: Define Component Custom Properties for Vue I18n\nDESCRIPTION: Defines the interface for component custom properties injected by Vue I18n, including `$i18n` and `$t`. These properties are injected into every child component, providing access to the Vue I18n instance and translation functions.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ComponentCustomProperties;\n```\n\n----------------------------------------\n\nTITLE: Using v-t Directive with Object Syntax in Template\nDESCRIPTION: This HTML template demonstrates how to use the `v-t` directive with object syntax for translations. It showcases interpolation using the 'args' property, locale override, and pluralization using the 'plural' property. It binds key paths and parameters via data properties.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/directive.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"object-syntax\">\n  <!-- Using an object with arguments -->\n  <p v-t=\"{ path: 'message.hi', args: { name: 'kazupon' } }\"></p>\n  <!-- Binding a key path via data -->\n  <p v-t=\"{ path: byePath, locale: 'en' }\"></p>\n  <!-- Pluralization -->\n  <p v-t=\"{ path: 'message.apple', plural: appleCount }\"></p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing vue-i18n with Composition API - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize vue-i18n in Composition API mode. It creates a new Vue app and installs the i18n instance. The `legacy` option must be set to `false`.  The locale is set to 'ja' and messages are provided for 'en' and 'ja'. The `useI18n` hook is used within the App component.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n, useI18n } from 'vue-i18n'\n\n// call with I18n option\nconst i18n = createI18n({\n  legacy: false, // you must specify 'legacy: false' option\n  locale: 'ja',\n  messages: {\n    en: { ... },\n    ja: { ... }\n  }\n})\n\nconst App = {\n  setup() {\n    // ...\n    const { t } = useI18n({ ... })\n    return { ... , t }\n  }\n}\n\nconst app = createApp(App)\n\n// install!\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Translate with Key and Pluralization: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using a key and a pluralization number. Returns a pluralized translation message based on the provided number.  Options can be used to suppress warnings when translations are missing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, plural: number): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: French Locale Resource (fr.json)\nDESCRIPTION: This JSON file defines the French locale resources for the application. It contains key-value pairs where the keys are used for translation and the values are the corresponding French translations.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": \"Bonjour, {name}!\",\n  \"language\": \"Langue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Translate with List Interpolation and Pluralization - Vue I18n (Typescript)\nDESCRIPTION: This snippet shows the function signature for translating a message key with both list interpolation and pluralization in Vue I18n. The locale message should contain placeholders like `{0}`, `{1}`, etc., and the correct plural form will be selected. `Key` is a generic type constrained to string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, list: unknown[], plural: number): string;\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, defaultMsg, options) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, defaultMsg, options)` function. Available in Composition API mode until v9, and Legacy API mode v10 or later. Uses a key, a default message, and translation options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, defaultMsg: string, options: TranslateOptions): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Set Post Translation Handler - Vue-i18n (TypeScript)\nDESCRIPTION: Sets a handler function to be called after a translation has been performed. This handler allows you to implement custom logic, such as modifying the translated text or performing additional processing.  The handler can be set to `null` to disable it.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nsetPostTranslationHandler(handler: PostTranslationHandler<VueMessageType> | null): void;\n```\n\n----------------------------------------\n\nTITLE: Translate with `$t`, Plural, Locale in Vue I18n v10+ (Vue Template)\nDESCRIPTION: Demonstrates the migration from `$tc` to `$t` by using the plural number and passing the locale as an option.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_39\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('banana', 2, { locale: 'ja' }) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Common Locale Messages Example (JavaScript)\nDESCRIPTION: This JavaScript snippet presents an example of common locale messages, which can be shared across components.  It defines translations for different languages (en and ja) within a structured object.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  en: {\n    buttons: {\n      save: \"Save\",\n      // ...\n    }\n  },\n  ja: {\n    buttons: {\n      save: \"保存\",\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Interpolation Output - Vue I18n\nDESCRIPTION: Shows the expected HTML output after list interpolation with Vue I18n. The placeholder `{0}` in the original message has been replaced with the value 'hello', resulting in the final output 'hello world'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>hello world</p>\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, named) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, named)` function for locale message translation with named interpolation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, named: NamedValue): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Using $t for Basic Pluralization - HTML\nDESCRIPTION: Demonstrates how to use the `$t` translation API for basic pluralization. The first argument is the locale message key, and the second argument is a number that determines which plural form to use.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/pluralization.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('car', 1) }}</p>\n<p>{{ $t('car', 2) }}</p>\n\n<p>{{ $t('apple', 0) }}</p>\n<p>{{ $t('apple', 1) }}</p>\n<p>{{ $t('apple', 10, { count: 10 }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Translation Component Setup JavaScript\nDESCRIPTION: Sets up the Vue I18n instance with locale messages and creates a Vue application. It configures the i18n instance with locale, messages, and injects it into the Vue app.  This example uses list interpolation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'vue-i18n'\n\nconst i18n = createI18n({\n  locale: 'en',\n  messages: {\n    en: {\n      tos: 'Term of Service',\n      term: 'I accept xxx {0}.'\n    },\n    ja: {\n      tos: '利用規約',\n      term: '私は xxx の{0}に同意します。'\n    }\n  }\n})\n\nconst app = createApp({\n  data: () => ({ url: '/term' })\n})\n\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Translate with List Interpolation - Vue I18n (Typescript)\nDESCRIPTION: This snippet details the function signature for translating a message key with list interpolation in Vue I18n. The locale message should contain placeholders like `{0}`, `{1}`, etc., corresponding to the values in the provided list.  `Key` is a generic type constrained to string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, list: unknown[]): string;\n```\n\n----------------------------------------\n\nTITLE: Number Formatting Signature with Value (TypeScript)\nDESCRIPTION: Defines the signature for the $n method that accepts a number value and returns a NumberFormatResult or a string. This method is used for basic number formatting based on the current locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number): NumberFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: Translate with `$t` and Plural in Vue I18n v10+ (Vue Template)\nDESCRIPTION: Migrates from using `$tc` with a choice to `$t` with a plural value in Vue templates.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_37\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('banana', 2) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Define $i18n Property in Component\nDESCRIPTION: Defines the `$i18n` property, which provides access to the exported Global Composer instance or global VueI18n instance. This allows components to access the i18n instance and its functionalities.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n$i18n: VueI18n | ExportedGlobalComposer;\n```\n\n----------------------------------------\n\nTITLE: Configuring Quasar CLI for Vue I18n\nDESCRIPTION: This code snippet shows how to modify the `quasar.conf.js` file to support `<i18n>` tags inside single file components.  It uses `chainWebpack` to configure the webpack chain and add rules for handling i18n resources and blocks using `@intlify/vue-i18n-loader`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/sfc.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  chainWebpack: chain => {\n    chain.module\n      .rule('i18n-resource')\n        .test(/\\.(json5?|ya?ml)$/)\n          .include.add(path.resolve(__dirname, './src/i18n'))\n          .end()\n        .type('javascript/auto')\n        .use('i18n-resource')\n          .loader('@intlify/vue-i18n-loader')\n    chain.module\n      .rule('i18n')\n        .resourceQuery(/blockType=i18n/)\n        .type('javascript/auto')\n        .use('i18n')\n          .loader('@intlify/vue-i18n-loader')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure unplugin-vue-i18n for Vite\nDESCRIPTION: This snippet demonstrates how to configure the `VueI18nPlugin` in a Vite configuration file (`vite.config.ts`).  It imports necessary modules and sets the `include` option to pre-compile locale messages from the specified directory, improving runtime performance by avoiding on-the-fly compilation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/optimization.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport { resolve, dirname } from 'node:path'\nimport { fileURLToPath } from 'url'\nimport VueI18nPlugin from '@intlify/unplugin-vue-i18n/vite'\n\nexport default defineConfig({\n  /* ... */\n  plugins: [\n    /* ... */\n    VueI18nPlugin({\n      /* options */\n      // locale messages resource pre-compile option\n      include: resolve(dirname(fileURLToPath(import.meta.url)), './path/to/src/locales/**'),\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Common Locale Messages Export\nDESCRIPTION: This JavaScript snippet exports common locale messages for multiple components. The messages are structured by language and then by specific categories, such as buttons.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/local.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  en: {\n    buttons: {\n      save: \"Save\",\n      // ...\n    }\n  },\n  ja: {\n    buttons: {\n      save: \"保存\",\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Containers - Markdown\nDESCRIPTION: Shows how to use custom containers in VitePress markdown.  Different container types like 'info', 'tip', 'warning', 'danger', and 'details' are defined.  These containers are used to visually distinguish different types of content within the documentation. The structure `::: <type>\nContent\n:::` creates these styled containers.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/ssr/vitepress/markdown-examples.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::: info\nThis is an info box.\n:::\n\n::: tip\nThis is a tip.\n:::\n\n::: warning\nThis is a warning.\n:::\n\n::: danger\nThis is a dangerous warning.\n:::\n\n::: details\nThis is a details block.\n:::\n```\n\n----------------------------------------\n\nTITLE: Using Translation in Template - HTML\nDESCRIPTION: This code demonstrates how to use the `$t` function in a Vue template to translate the 'hello' key. Because the current locale is 'ja' and 'hello' is missing in the 'ja' messages, it will fall back to 'en' based on the i18n configuration. The output will display the english translation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/fallback.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('hello') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Translate with Key, Named Values, and Default Message: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using a key, named interpolation values, and a default message. If no translation is found for the given key, the default message is returned.  The locale messages should contain a `{x}` token for each placeholder x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, named: NamedValue, defaultMsg: string): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Pluralization Rule - HTML\nDESCRIPTION: Demonstrates how to use `$t` with the custom pluralization rules defined earlier. It shows how the correct plural form is selected based on the numeric value and the custom rule logic.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/pluralization.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<h2>Car:</h2>\n<p>{{ $t('car', 1) }}</p>\n<p>{{ $t('car', 2) }}</p>\n<p>{{ $t('car', 4) }}</p>\n<p>{{ $t('car', 12) }}</p>\n<p>{{ $t('car', 21) }}</p>\n\n<h2>Banana:</h2>\n<p>{{ $t('banana', 0) }}</p>\n<p>{{ $t('banana', 4) }}</p>\n<p>{{ $t('banana', 11) }}</p>\n<p>{{ $t('banana', 31) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Translation Component with Pluralization\nDESCRIPTION: This code snippet demonstrates the usage of the `<i18n-t>` component in Vue I18n v9 with pluralization support. The `plural` prop is used to specify the number for pluralization. It relies on the `useI18n` composable function to access the translation function `t`. The component renders the appropriate pluralized message based on the value of `count` and uses a named slot to display the count value within the translated message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/features.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useI18n } from 'vue-i18n'\n\nconst { t } = useI18n({\n  locale: 'en',\n  messages: {\n    en: {\n      message: {\n        plural: 'no bananas | {n} banana | {n} bananas'\n      }\n    }\n  }\n})\n\nconst count = ref(0)\n</script>\n\n<template>\n  <i18n-t keypath=\"message.plural\" :plural=\"count\">\n    <template #n>\n      <b>{{ count }}</b>\n    </template>\n  </i18n-t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: List Interpolation\nDESCRIPTION: This snippet demonstrates how to use list interpolation within a message function using the `list` function from the message context. It shows how to access list parameters passed to `$t` within the message function using their index.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    greeting: ({ list }) => `hello, ${list(0)}!`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Modifiers Configuration - Vue I18n\nDESCRIPTION: Defines a custom modifier function (snakeCase) and registers it within the `modifiers` option of the `createI18n` function. This makes the custom modifier available for use in linked messages.  The example transforms spaces into underscores.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = createI18n({\n  locale: 'en',\n  messages: {\n    // set something locale messages ...\n  },\n  // set custom modifiers at `modifiers` option\n  modifiers: {\n    snakeCase: (str) => str.split(' ').join('_')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing vue-i18n with Legacy API - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize vue-i18n in Legacy API mode. It creates a new Vue app and installs the i18n instance.  The locale is set to 'ja' and messages are provided for 'en' and 'ja'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'vue-i18n'\n\n// call with I18n option\nconst i18n = createI18n({\n  locale: 'ja',\n  messages: {\n    en: { ... },\n    ja: { ... }\n  }\n})\n\nconst App = {\n  // ...\n}\n\nconst app = createApp(App)\n\n// install!\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Translate with Key, Pluralization, and Options: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using a key, a pluralization number, and translation options. Returns a pluralized translation message based on the provided number. Options can be used to suppress warnings when translations are missing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, plural: number, options: TranslateOptions<Locales>): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Translate with Default Message and Options - Vue I18n (Typescript)\nDESCRIPTION: This snippet showcases the function signature for translating a message key with a default message and additional options in Vue I18n. If no translation is found, the default message is returned. `TranslateOptions` allows customizing the translation behavior. `Key` extends string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, defaultMsg: string, options: TranslateOptions<Locales>): string;\n```\n\n----------------------------------------\n\nTITLE: Messages Property (TypeScript)\nDESCRIPTION: Defines the `messages` property within the Composer interface. This read-only computed property provides access to the locale messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly messages: ComputedRef<{\n        [K in keyof Messages]: Messages[K];\n    }>;\n```\n\n----------------------------------------\n\nTITLE: Translate with Pluralization - Vue I18n (Typescript)\nDESCRIPTION: This snippet shows the function signature for translating a message key with pluralization support in Vue I18n. It returns a pluralized translation message based on the provided key and plural number. The `Key` type is constrained to be a string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, plural: number): string;\n```\n\n----------------------------------------\n\nTITLE: Fallback Locale Configuration\nDESCRIPTION: This typescript code defines the `fallbackLocale` property of the Vue I18n configuration.  This property is used to specify the locale used when a translation is missing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackLocale?: FallbackLocale;\n```\n\n----------------------------------------\n\nTITLE: Basic Template Usage\nDESCRIPTION: This snippet shows how to use the message function within a Vue template using `$t` to display the greeting message. It showcases the simplest way to integrate message functions into Vue components for internationalization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('greeting') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Translate with Key, Default Message, and Options: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using a key, a default message, and translation options. If no translation is found for the key, the default message is returned. Options can be used to suppress warnings when translations are missing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, defaultMsg: string, options: TranslateOptions<Locales>): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Multiple Scoped Slots Example HTML\nDESCRIPTION: Demonstrates using multiple scoped slots with `i18n-d` to style different parts of the datetime. This example formats the date in Japanese and styles both the 'era' and 'literal' parts in green. This provides fine-grained control over the formatting of individual date/time components.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/datetime.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<i18n-d tag=\"span\" :value=\"new Date()\" locale=\"ja-JP-u-ca-japanese\" :format=\"{ key: 'long', era: 'narrow' }\">\n  <template #era=\"props\">\n    <span style=\"color: green\">{{ props.era }}</span>\n  </template>\n  <template #literal=\"props\">\n    <span style=\"color: green\">{{ props.literal }}</span>\n  </template>\n</i18n-d>\n```\n\n----------------------------------------\n\nTITLE: $d(value, options) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the overloaded `$d` function in Vue I18n, used for datetime formatting with options. It takes a number or Date and a DateTimeOptions object as input, and returns the formatted value. The DateTimeOptions object contains detailed configuration for date formatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n$d(value: number | Date, options: DateTimeOptions): string;\n```\n\n----------------------------------------\n\nTITLE: $rt(message, list, options) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the overloaded `$rt` function in Vue I18n, used to resolve locale message translation for list interpolations. It takes a message, a list of values, and optional translation options.  It returns a string. The message is either a `MessageFunction` or `VueMessageType`, the list contains interpolation values, and the options are additional translation options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n$rt(message: MessageFunction<VueMessageType> | VueMessageType, list: unknown[], options?: TranslationOptions): string;\n```\n\n----------------------------------------\n\nTITLE: Local Scope Vue I18n Configuration\nDESCRIPTION: This snippet demonstrates how to configure Vue I18n with local scope for a component. It defines a global scope with 'ja' as the locale and sets up messages for both 'en' and 'ja'. It also defines a component (Component1) with its own i18n configuration that overrides the global scope for specific messages. The component falls back to the global scope if a message is not found in its local scope.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/local.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'vue-i18n'\n\n// setting locale info used by global scope as an options\nconst i18n = createI18n({\n  locale: 'ja',\n  messages: {\n    en: {\n      message: {\n        hello: 'hello world',\n        greeting: 'good morning, world!'\n      }\n    },\n    ja: {\n      message: {\n        hello: 'こんにちは、世界',\n        greeting: 'おはよう、世界！'\n      }\n    }\n  }\n})\n\n// define component\nconst Component1 = {\n  template: `\n    <div id=\"component\">\n      <h1>Component1</h1>\n      <p>Component1 locale messages: {{ $t(\"message.hello\") }}</p>\n      <p>Fallback global locale messages: {{ $t(\"message.greeting\") }}</p>\n    </div>\n  `,\n  i18n: {\n    messages: {\n      en: { message: { hello: 'hello component1' } },\n      ja: { message: { hello: 'こんにちは、component1' } }\n    }\n  }\n}\n\nconst app = createApp({\n  components: { Component1 }\n})\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: LocaleMessage Type Definition (TypeScript)\nDESCRIPTION: Defines the type for locale messages. It is a record where keys are strings and values are of type `LocaleMessageValue<Message>`, allowing nested structures and string values.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LocaleMessage<Message = string> = Record<string, LocaleMessageValue<Message>>;\n```\n\n----------------------------------------\n\nTITLE: Importing Locale Resources in Nuxt Plugin\nDESCRIPTION: This TypeScript code modifies the Nuxt plugin to import locale resources from JSON files and register them with the Vue I18n instance. It imports the English, French, and Japanese locale files and adds them to the `messages` option of the i18n instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\nimport en from '../locales/en.json' // [!code ++]\nimport fr from '../locales/fr.json' // [!code ++]\nimport ja from '../locales/ja.json' // [!code ++]\n\nexport default defineNuxtPlugin(({ vueApp }) => {\n  const i18n = createI18n({\n    legacy: false,\n    globalInjection: true,\n    locale: 'en',\n    messages: {\n      en: { // [!code --]\n        hello: \"Hello, {name}!\" // [!code --]\n      } // [!code --]\n      en, // [!code ++]\n      fr, // [!code ++]\n      ja // [!code ++]\n    }\n  })\n\n  vueApp.use(i18n)\n})\n```\n\n----------------------------------------\n\nTITLE: VueI18n pluralizationRules property (Legacy API)\nDESCRIPTION: Defines the pluralizationRules property, a set of rules for word pluralization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\npluralizationRules: Composition['pluralRules'];\n```\n\n----------------------------------------\n\nTITLE: Customizing Pluralization Rules in Vue I18n v8.x - JavaScript\nDESCRIPTION: This snippet illustrates how to customize pluralization rules in Vue I18n v8.x by extending the `getChoiceIndex` method of the `VueI18n` class. It demonstrates a custom rule for the Russian locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nVueI18n.prototype.getChoiceIndex = function (choice, choicesLength) {\n  // this === VueI18n instance, so the locale property exists\n  if (this.locale !== 'ru') {\n    // proceed to the default implementation\n  }\n\n  if (choice === 0) {\n    return 0;\n  }\n\n  const teen = choice > 10 && choice < 20;\n  const endsWithOne = choice % 10 === 1;\n\n  if (!teen && endsWithOne) {\n    return 1;\n  }\n  if (!teen && choice % 10 >= 2 && choice % 10 <= 4) {\n    return 2;\n  }\n  return (choicesLength < 4) ? 2 : 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Message Resolver in Vue I18n\nDESCRIPTION: This code snippet shows how to implement a custom message resolver for Vue I18n. It defines a `messageResolver` function that attempts to resolve messages from a provided object based on a given path. The example demonstrates how to integrate the custom resolver into the `createI18n` function, setting it up for a Vue I18n instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\n\n// your message resolver\nfunction messageResolver(obj, path) {\n  // simple message resolving!\n  const msg = obj[path]\n  return msg != null ? msg : null\n}\n\n// call with I18n option\nconst i18n = createI18n({\n  legacy: false,\n  locale: 'ja',\n  messageResolver, // set your message resolver\n  messages: {\n    en: { ... },\n    ja: { ... }\n  }\n})\n\n// the below your something to do ...\n// ...\n\n```\n\n----------------------------------------\n\nTITLE: ICU Message Format Compiler Implementation\nDESCRIPTION: Implementation of a message compiler that uses `intl-messageformat` to support the ICU Message format. It demonstrates how to integrate an external formatting library and handle different message types (string or AST).\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/format.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport IntlMessageFormat from 'intl-messageformat'\n\nimport type { MessageCompiler, CompileError, MessageContext } from 'vue-i18n'\n\nexport const messageCompiler: MessageCompiler = (\n  message,\n  { locale, key, onError }\n) => {\n  if (typeof message === 'string') {\n    /**\n     * You can tune your message compiler performance more with your cache strategy or also memoization at here\n     */\n    const formatter = new IntlMessageFormat(message, locale)\n    return (ctx: MessageContext) => {\n      return formatter.format(ctx.values)\n    }\n  } else {\n    /**\n     * for AST.\n     * If you would like to support it,\n     * You need to transform locale messages such as `json`, `yaml`, etc. with the bundle plugin.\n     */\n    onError && onError(new Error('not support for AST') as CompileError)\n    return () => key\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Locale Message Method (TypeScript)\nDESCRIPTION: Defines the `getLocaleMessage` method within the Composer interface. Retrieves a locale message from the messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ngetLocaleMessage<MessageSchema extends LocaleMessage<VueMessageType> = never, LocaleSchema extends string = string, Locale extends PickupLocales<NonNullable<Messages>> = PickupLocales<NonNullable<Messages>>, Return = IsNever<MessageSchema> extends true ? IsEmptyObject<Messages> extends true ? RemoveIndexSignature<{\n        [K in keyof DefineLocaleMessage]: DefineLocaleMessage[K];\n    }> : NonNullable<Messages>[Locale] : MessageSchema>(locale: LocaleSchema | Locale): Return;\n```\n\n----------------------------------------\n\nTITLE: VNode Support\nDESCRIPTION: This snippet demonstrates how to modify a message function to support the `Translation` component by returning a VNode when the `type` property of the message context is `vnode`.  It shows how to conditionally return either a string or a VNode, making the message function compatible with more advanced Vue I18n features.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVNode, Text } from 'vue'\n\nconst messages = {\n  en: {\n    greeting: ({ type }) => type === 'vnode'\n      ? createVNode(Text, null, 'hello', 0)\n      : 'hello'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolve List Interpolation Translation (rt) - TypeScript\nDESCRIPTION: Resolves a locale message translation for list interpolations using the `rt` function. It accepts a locale message (returned by `tm`), an array of values for interpolation, and optional translation options. It's designed for programmatic translation with lists in scenarios like `tm`, `v-for`, and JavaScript `for` loops. The function processes the locale message directly and doesn't perform internal fallbacks.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n(message: MessageFunction<VueMessageType> | VueMessageType, list: unknown[], options?: TranslateOptions<Locales>): string;\n```\n\n----------------------------------------\n\nTITLE: Number Formatting $n(value, options) - TypeScript\nDESCRIPTION: Formats a number value using the provided number options. This overloaded `$n` allows precise control using a `NumberOptions` object.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, options: NumberOptions): string;\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, list, plural) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, list, plural)` function for translation with list interpolation and pluralization. Available in Composition API mode until v9, and Legacy API mode v10 or later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, list: unknown[], plural: number): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, locale) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, locale)` function for locale message translation. This signature is available in Legacy API mode only and is supported until v9, allowing overriding the locale for translation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, locale: Locale): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue I18n with Composition API Support (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize Vue I18n with the `allowComposition` option set to `true`.  This enables the use of Composition API features within the Legacy API mode, facilitating migration. It defines locales 'en' and 'ja' with a simple 'hello' message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue3.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\n\nconst i18n = createI18n({\n  locale: 'en',\n  allowComposition: true, // you need to specify that!\n  messages: {\n    en: {\n      hello: 'hello!'\n    },\n    ja: {\n      hello: 'こんにちは！'\n    }\n  }\n})\n\nconsole.log(i18n.allowComposition) // output is true\n```\n\n----------------------------------------\n\nTITLE: LocaleDetector Interface (TypeScript)\nDESCRIPTION: Defines the interface for a locale detector function.  This interface takes a variable number of arguments (`Args`) and returns either a `Locale` or a `Promise` resolving to a `Locale`. This is useful for dynamically determining the locale based on user preferences or environment settings.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LocaleDetector<Args extends any[] = any[]>\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n(...args: Args): Locale | Promise<Locale>;\n```\n\n----------------------------------------\n\nTITLE: BaseFormatProps Interface Definition (TypeScript)\nDESCRIPTION: Defines the base properties for Vue I18n components that handle formatting, such as Translation, DatetimeFormat, and NumberFormat. Includes properties for specifying the composer instance (`i18n`), locale, scope, and tag.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/component.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BaseFormatProps\n```\n\n----------------------------------------\n\nTITLE: $rt(message, list, options) Signature - Vue I18n\nDESCRIPTION: This overloaded signature of the `$rt` method resolves a locale message translation for list interpolations. It requires a message (MessageFunction or VueMessageType), a list of unknown values, and optional translation options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n$rt(message: MessageFunction<VueMessageType> | VueMessageType, list: unknown[], options?: TranslationOptions): string;\n```\n\n----------------------------------------\n\nTITLE: Translation Component Pluralization Output HTML\nDESCRIPTION: Shows the rendered output with pluralization from component interpolation. The output shows the pluralized string with the banana count interpolated.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\" data-v-app=\"\">\n  <!-- ... -->\n  <b>2</b> bananas\n  <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Missing Handler Configuration\nDESCRIPTION: This typescript code defines the `missing` property of the Vue I18n configuration. This property configures a handler for localization missing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nmissing?: MissingHandler;\n```\n\n----------------------------------------\n\nTITLE: MessageContext - values (TypeScript)\nDESCRIPTION: Defines the message values property of the `MessageContext`. It's a record containing argument values passed from translation functions like `$t`, `t`, or `translate`. These values are used to dynamically insert data into the translated message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nvalues: Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Object Syntax v-t Output\nDESCRIPTION: This is the HTML output generated by the object syntax example. The `v-t` directive correctly translates and inserts the locale messages, including interpolation for 'hi' and pluralization for 'apple'. The locale is overridden for 'bye'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/directive.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"object-syntax\">\n  <p>こんにちは、kazupon！</p>\n  <p>Goodbye!</p>\n  <p>7 りんご</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Translate with options V10 (TS)\nDESCRIPTION: Demonstrates how to use the `t` function with options for locale parameter in Vue I18n v10 or later within a TypeScript context to translate a message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\n\nconsole.log(i18n.global.t('message.hello', {}, { locale: 'ja' })\n```\n\n----------------------------------------\n\nTITLE: Translation Exists - Vue-i18n (TypeScript)\nDESCRIPTION: Checks if a locale message exists for a given key. Optionally, a locale can be specified to check for the key within that locale's messages. It returns a boolean indicating whether the key exists.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nte<Str extends string, Key extends PickupKeys<Messages> = PickupKeys<Messages>>(key: Str | Key, locale?: Locales): boolean;\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Legacy API Setup for Vue 2.7\nDESCRIPTION: This code snippet demonstrates setting up Vue I18n with the Legacy API in Vue 2.7 using vue-i18n-bridge. It showcases how to create the i18n instance and integrate it into a Vue instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport Vue from 'vue'\nimport { createI18n, useI18n } from 'vue-i18n-bridge'\n\nVue.use(VueI18n, { bridge: true }) // you must specify '{ bridge: true }' plugin option when install vue-i18n\n\n// `createI18n` options is almost same vue-i18n (vue-i18n@v9.x) API\nconst i18n = createI18n({\n  locale: 'ja',\n  messages: {\n    en: {\n      message: {\n        hello: 'hello, {name}!'\n      }\n    },\n    ja: {\n      message: {\n        hello: 'こんにちは、{name}！'\n      }\n    }\n  }\n}, VueI18n) // `createI18n` which is provide `vue-i18n-bridge` has second argument, you **must** pass `VueI18n` constructor which is provide `vue-i18n`\n\nVue.use(i18n) // you must install `i18n` instance which is created by `createI18n`\n\nconst app = new Vue({ i18n })\napp.$mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Register Web Components (JS)\nDESCRIPTION: This code snippet registers the web components `I18nHostElement` and `HelloI18nElement` as custom elements. It imports the necessary components and uses `customElements.define` to register them with the specified tag names ('i18n-host' and 'hello-i18n'). Finally, it creates and mounts the main Vue application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/wc.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { I18nHostElement } from './path/to/I18nHostElement'\nimport { HelloI18nElement } from './path/to/HelloI18nElement'\nimport App from './App.vue'\n\ncustomElements.define('i18n-host', I18nHostElement)\ncustomElements.define('hello-i18n', HelloI18nElement)\n\ncreateApp(App).mount('#app')\n\n```\n\n----------------------------------------\n\nTITLE: VueI18n missing property (Legacy API)\nDESCRIPTION: Defines the missing property, a handler for localization missing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nmissing: MissingHandler | null;\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue I18n with String Syntax\nDESCRIPTION: This JavaScript code snippet initializes the Vue I18n instance with locale messages and integrates it into a Vue application. It defines translations for 'hello' in English and Japanese. The Vue component binds the 'path' data property to 'hello', demonstrating string syntax with the `v-t` directive.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/directive.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'vue-i18n'\n\nconst i18n = createI18n({\n  locale: 'en',\n  messages: {\n    en: { hello: 'hi there!' },\n    ja: { hello: 'こんにちは！' }\n  }\n})\n\nconst app = createApp({\n  data: () => ({ path: 'hello' })\n})\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Translation Component with Slots Output HTML\nDESCRIPTION: Shows the expected HTML output of the Translation component with named slots. The HTML includes the localized text with the flight change link and the remaining time for changes.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <!-- ... -->\n  <p>\n    You can <a href=\"/change\">change your flight</a> until <span>15</span> minutes from departure.\n  </p>\n  <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Number Format - TypeScript\nDESCRIPTION: This snippet demonstrates how to define a Number format using TypeScript. It extends the `DefineNumberFormat` interface to add a custom 'currency' format.  This allows you to define and use specific number formatting options globally within your application, ensuring consistency in currency displays.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// type.d.ts (`.d.ts` file at your app)\nimport { DefineNumberFormat } from 'vue-i18n'\n\ndeclare module 'vue-i18n' {\n  export interface DefineNumberFormat {\n    currency: {\n      style: 'currency'\n      currencyDisplay: 'symbol'\n      currency: string\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Interpolation Output - Vue I18n\nDESCRIPTION: Shows the expected HTML output after named interpolation with Vue I18n. The placeholder `{msg}` in the original message has been replaced with the value 'hello', resulting in the final output 'hello world'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>hello world</p>\n```\n\n----------------------------------------\n\nTITLE: Translation Component Type Definition (TypeScript)\nDESCRIPTION: Defines the type for the Translation component, specifying its props including VNodeProps and TranslationProps. This component is used for rendering localized messages with support for interpolation and pluralization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/component.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nTranslation: {\n    new (): {\n        $props: VNodeProps & TranslationProps;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Translate Options plural Property in TypeScript\nDESCRIPTION: Defines the `plural` property within the `TranslateOptions` interface.  It's an optional number used for pluralization choice. This number is used to determine which plural form of the translated string to use, based on the current locale's pluralization rules.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nplural?: number;\n```\n\n----------------------------------------\n\nTITLE: Define Component Custom Options for Vue I18n\nDESCRIPTION: Defines the interface for component custom options within Vue I18n, allowing the specification of VueI18n options for a component instance. This enables component-specific i18n configurations.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ComponentCustomOptions;\n```\n\n----------------------------------------\n\nTITLE: Defining TranslateResult type in Vue I18n (Legacy API)\nDESCRIPTION: Defines the type TranslateResult as a string. This type is part of the legacy API and is deprecated for removal in vue-i18n v12.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TranslateResult = string;\n```\n\n----------------------------------------\n\nTITLE: Number Options Interface Definition in TypeScript\nDESCRIPTION: Defines the interface for number formatting options in Vue I18n. It extends the `Intl.NumberFormatOptions` and `LocaleOptions` interfaces, allowing for specifying locale-specific number formatting settings. It includes options like `fallbackWarn`, `key`, `missingWarn`, and `part` to control formatting behavior.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NumberOptions<Key = string, Locales = Locale> extends Intl.NumberFormatOptions, LocaleOptions<Locales> \n```\n\n----------------------------------------\n\nTITLE: Translate with locale and list V9\nDESCRIPTION: Demonstrates how to use the `$t` function with a locale and list parameter in Vue I18n v9.x to translate a message with arguments.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('message.hello', 'ja', ['dio']) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Number Formatting $n(value, key) - TypeScript\nDESCRIPTION: Formats a number value using a specified number format key. This is an overloaded version of `$n`, extending the base function with a key for number formats. Refer to the linked documentation for more details.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, key: string): NumberFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: $d(value, options) Signature - Vue I18n\nDESCRIPTION: This overloaded signature of the `$d` method formats a datetime value (number or Date instance) using datetime options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n$d(value: number | Date, options: DateTimeOptions): string;\n```\n\n----------------------------------------\n\nTITLE: Pluralization Output - HTML\nDESCRIPTION: Shows the expected output from the previous example using `$t` for pluralization. Each line corresponds to the output of the `$t` calls in the preceding HTML snippet.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/pluralization.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>car</p>\n<p>cars</p>\n\n<p>no apples</p>\n<p>one apple</p>\n<p>10 apples</p>\n```\n\n----------------------------------------\n\nTITLE: Optional 'tag' Prop in NumberFormat Component (Vue I18n v9+)\nDESCRIPTION: This snippet demonstrates rendering child elements without a root element in Vue I18n v9 and later's `<i18n-n>` component by omitting the `tag` prop. Requires Vue I18n v9 or later and Vue 3's Fragments. Input is a numeric value (100) and a format ('currency'). Output is the formatted number with the integer part styled with bold font-weight, rendered without a surrounding root element.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<i18n-n :value=\"100\" format=\"currency\">\n  <span v-slot:integer=\"slotProps\" styles=\"font-weight: bold\">{{ slotProps.integer }}</span>\n</i18n-n>\n```\n\n----------------------------------------\n\nTITLE: Translate with `t` and List in Vue I18n v10+\nDESCRIPTION: This example shows how to migrate from `tc` with a list to the `t` function in Vue I18n v10+.  The pluralization value is added as the last argument.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.t('banana', ['dio'], 1))\n```\n\n----------------------------------------\n\nTITLE: Translate with `$t`, List, Plural in Vue I18n v10+ (Vue Template)\nDESCRIPTION: Demonstrates the usage of `$t` instead of `$tc` by using the list as first parameter and passing the plural number as the last parameter.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_41\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('banana', ['dio'], 2) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Composer Resolve Locale Message Translation Interface\nDESCRIPTION: This typescript code defines the `ComposerResolveLocaleMessageTranslation` interface, which represents the interface for resolving locale message translation within the Vue I18n library's `Composer` functionality. It describes the structure for resolving translated messages based on locale and message functions.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ComposerResolveLocaleMessageTranslation<Locales = 'en-US'> \n```\n\n----------------------------------------\n\nTITLE: Number Formatting Signature with Value, Key, and Locale (TypeScript)\nDESCRIPTION: Defines the signature for the $n method that accepts a number value, a key, and a locale, returning a NumberFormatResult or a string. The locale parameter allows overriding the global or local scope locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, key: string, locale: Locale): NumberFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: Set DateTime Format - Vue-i18n (TypeScript)\nDESCRIPTION: Sets a datetime format to the Composer instance's datetimeFormats. It takes a locale and a format object as parameters, allowing you to define or override existing datetime formats for a specific locale. This provides a way to customize how dates and times are displayed within the application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nsetDateTimeFormat<DateTimeSchema extends Record<string, any> = never, LocaleSchema extends string = string, Locale extends PickupLocales<NonNullable<DateTimeFormats>> = PickupLocales<NonNullable<DateTimeFormats>>, FormatsType = IsNever<DateTimeSchema> extends true ? IsEmptyObject<DateTimeFormats> extends true ? RemoveIndexSignature<{ \n        [K in keyof DefineDateTimeFormat]: DefineDateTimeFormat[K];\n    }> : NonNullable<DateTimeFormats>[Locale] : DateTimeSchema, Formats extends FormatsType = FormatsType>(locale: LocaleSchema | Locale, format: Formats): void;\n```\n\n----------------------------------------\n\nTITLE: Translate with Key and List: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using a key and a list of values for interpolation.  The locale messages should contain a `{0}`, `{1}`, … for each placeholder in the list.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, list: unknown[]): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: $d(value, key, locale) Signature - Vue I18n\nDESCRIPTION: This overloaded signature of the `$d` method formats a datetime value (number or Date instance) using a specified datetime format key and locale.  The locale overrides the global or local scope locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n$d(value: number | Date, key: string, locale: Locale): DateTimeFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: Global Install Option (TypeScript)\nDESCRIPTION: Specifies whether to globally install the Vue I18n components when using `app.use`. Setting it to `true` installs the components globally. Setting it to `false` allows you to install manually with `import` syntax as needed.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nglobalInstall?: boolean;\n```\n\n----------------------------------------\n\nTITLE: petite-vue-i18n Usage with Package Managers\nDESCRIPTION: Illustrates how to use petite-vue-i18n after installing it via a package manager.  It imports `createApp` from 'vue' and `createI18n` from 'petite-vue-i18n', creates a Vue app, configures i18n, and mounts the app.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'petite-vue-i18n'\n\nconst i18n = createI18n({\n  // something vue-i18n options here ...\n})\n\nconst app = createApp({\n  // something vue options here ...\n})\n\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Vue Component Using Global Scope Schema\nDESCRIPTION: This Vue component uses the schemas defined for the global scope to provide type-safe access to translations. It imports the `MessageSchema` and `NumberSchema` and uses them as type parameters for the `useI18n` function. The `useScope` option is set to 'global', indicating that the component uses the global scope for translations.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/typescript.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { useI18n } from 'vue-i18n'\n\n// import resource schema for global scope\nimport type { MessageSchema, NumberSchema } from '../locales/schema'\n\nconst { t, n } = useI18n<{ message: MessageSchema, number: NumberSchema }>({useScope: 'global'})\n</script>\n\n<template>\n  <p>message: {{ t('hello') }}</p>\n  <p>currency: {{ n(1000, 'currency') }}</p>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: LocaleMessages Type Definition (TypeScript)\nDESCRIPTION: Defines the type for locale messages using a specific schema and locales. It utilizes `LocaleRecord` and `UnionToTuple` to create a record of messages for different locales according to the provided schema.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LocaleMessages<Schema, Locales = Locale, Message = string> = LocaleRecord<UnionToTuple<Locales>, Schema>;\n```\n\n----------------------------------------\n\nTITLE: Locale Property (TypeScript)\nDESCRIPTION: Defines the `locale` property within the Composer interface. A writable computed ref reflecting the currently active locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlocale: WritableComputedRef<Locales>;\n```\n\n----------------------------------------\n\nTITLE: DefineCoreLocaleMessage Interface (TypeScript)\nDESCRIPTION: Defines the type for locale messages used with `@intlify/core-base` package. This interface allows strict typing of locale messages, enhancing type safety when working with internationalized text. It is designed to be extended through module augmentation to provide application-specific message definitions.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DefineCoreLocaleMessage extends LocaleMessage<string>\n\n```\n\n----------------------------------------\n\nTITLE: Number Formatting $n(value, key, locale) - TypeScript\nDESCRIPTION: Formats a number value using a specified number format key and locale. This overloaded `$n` allows overriding the global or local scope's locale. See the linked documentation for additional information.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, key: string, locale: Locale): NumberFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: $t(key, named, options) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the `$t` function in Vue I18n, which is used for locale message translation. It takes a key, named interpolation values, and translate options as parameters. It returns the translated message. This function is supported for Composition API mode until v9, and v10 or later can also be used in Legacy API mode.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, named: NamedValue, options: TranslateOptions): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Migrating from `new VueI18n` to `createI18n` in Vue I18n - JavaScript\nDESCRIPTION: This snippet illustrates how to transition from using `new VueI18n()` in Vue I18n v8.x to using `createI18n()` in Vue I18n v9 or later. It highlights the change in the API due to Vue 3's Global API changes and component instance architecture.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\n\nVue.use(VueI18n)\n\nconst i18n = new VueI18n({\n  // ...\n})\n\nnew Vue({\n  i18n,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Resolve With Key Value Function in TypeScript\nDESCRIPTION: Defines the function `resolveWithKeyValue` that resolves messages with a key-value structure. This resolver does not handle messages with a hierarchical structure. The function takes an object and a path as input and returns the resolved value.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function resolveWithKeyValue(obj: unknown, path: Path): PathValue;\n```\n\n----------------------------------------\n\nTITLE: Pluralization Rules Type Definition in TypeScript\nDESCRIPTION: Defines the `PluralizationRules` type as a dictionary of locale strings to `PluralizationRule` functions. This type represents the pluralization rules for different locales, allowing Vue I18n to handle pluralization correctly based on the current locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PluralizationRules = {\n    [locale: string]: PluralizationRule;\n};\n```\n\n----------------------------------------\n\nTITLE: FormattableProps Interface Definition (TypeScript)\nDESCRIPTION: Defines the interface for formattable properties used in components like DatetimeFormat and NumberFormat. It extends BaseFormatProps and includes a `format` property, which can be either a string-based format key or a format object as defined by the Intl API in ECMA 402, and a required `value` property.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/component.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FormattableProps<Value, Format> extends BaseFormatProps\n```\n\n----------------------------------------\n\nTITLE: Installing Vue I18n with pnpm\nDESCRIPTION: This command installs vue-i18n version 11 using pnpm.  It adds vue-i18n as a dependency, allowing for the use of internationalization features within your Vue application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/installation.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add vue-i18n@11\n```\n\n----------------------------------------\n\nTITLE: Translate with options V10\nDESCRIPTION: Demonstrates how to use the `$t` function with options for locale parameter in Vue I18n v10 or later to translate a message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('message.hello', {}, { locale: 'ja' }) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Resolve Named Interpolation Translation (rt) - TypeScript\nDESCRIPTION: Resolves a locale message translation for named interpolations using the `rt` function. It accepts a locale message (returned by `tm`), an object containing named values for interpolation, and optional translation options. The locale message should contain placeholders like `{x}`. It's designed for programmatic translation with named values in scenarios like `tm`, `v-for`, and JavaScript `for` loops. The function processes the locale message directly and doesn't perform internal fallbacks.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\n(message: MessageFunction<VueMessageType> | VueMessageType, named: NamedValue, options?: TranslateOptions<Locales>): string;\n```\n\n----------------------------------------\n\nTITLE: Japanese Locale Resource (ja.json)\nDESCRIPTION: This JSON file defines the Japanese locale resources for the application. It contains key-value pairs where the keys are used for translation and the values are the corresponding Japanese translations.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": \"こんにちは、{name}！\",\n  \"language\": \"言語\"\n}\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, defaultMsg) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, defaultMsg)` function for providing a default message if no translation is found. Available in Composition API mode until v9, and Legacy API mode v10 or later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, defaultMsg: string): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Linked Messages Example - Vue I18n\nDESCRIPTION: Demonstrates how to link messages in Vue I18n. The example defines three messages: 'the_world', 'dio', and 'linked'. The 'linked' message references the other two messages using the `@:key` syntax. This approach promotes reusability and consistency in translations.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    message: {\n      the_world: 'the world',\n      dio: 'DIO:',\n      linked: '@:message.dio @:message.the_world !!!!'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Datetime Formats Property (TypeScript)\nDESCRIPTION: Defines the `datetimeFormats` property within the Composer interface. This read-only computed property provides access to the datetime formats of localization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly datetimeFormats: ComputedRef<{\n        [K in keyof DateTimeFormats]: DateTimeFormats[K];\n    }>;\n```\n\n----------------------------------------\n\nTITLE: VueI18n t property (Legacy API)\nDESCRIPTION: Defines the t property for locale message translation using VueI18nTranslation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nt: VueI18nTranslation<Messages, Locales, RemoveIndexSignature<{\n        [K in keyof DefineLocaleMessage]: DefineLocaleMessage[K];\n    }>>;\n```\n\n----------------------------------------\n\nTITLE: Installing Vue I18n (npm)\nDESCRIPTION: This command installs the vue-i18n package as a development dependency using npm. This package provides the necessary tools for internationalizing the Vue 3 application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install vue-i18n -D\n```\n\n----------------------------------------\n\nTITLE: Translate with `$tc` in Vue I18n v9.x (Vue Template)\nDESCRIPTION: Demonstrates how to use `$tc` for translation within a Vue template in Vue I18n v9.x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_28\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $tc('banana') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue I18n for Lazy Loading (i18n.js)\nDESCRIPTION: This code initializes the vue-i18n instance and provides functions for setting the locale and loading locale messages asynchronously. It exports three functions: `setupI18n`, `setI18nLanguage`, and `loadLocaleMessages`. `loadLocaleMessages` uses webpack's dynamic import to load JSON locale files on demand.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lazy.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nextTick } from 'vue'\nimport { createI18n } from 'vue-i18n'\n\nexport const SUPPORT_LOCALES = ['en', 'ja']\n\nexport function setupI18n(options = { locale: 'en' }) {\n  const i18n = createI18n(options)\n  setI18nLanguage(i18n, options.locale)\n  return i18n\n}\n\nexport function setI18nLanguage(i18n, locale) {\n  if (i18n.mode === 'legacy') {\n    i18n.global.locale = locale\n  } else {\n    i18n.global.locale.value = locale\n  }\n  /**\n   * NOTE:\n   * If you need to specify the language setting for headers, such as the `fetch` API, set it here.\n   * The following is an example for axios.\n   *\n   * axios.defaults.headers.common['Accept-Language'] = locale\n   */\n  document.querySelector('html').setAttribute('lang', locale)\n}\n\nexport async function loadLocaleMessages(i18n, locale) {\n  // load locale messages with dynamic import\n  const messages = await import(\n    /* webpackChunkName: \"locale-[request]\" */ `./locales/${locale}.json`\n  )\n\n  // set locale and locale message\n  i18n.global.setLocaleMessage(locale, messages.default)\n\n  return nextTick()\n}\n```\n\n----------------------------------------\n\nTITLE: Pluralization with useI18n\nDESCRIPTION: This snippet showcases how to use the `t` function from the Composer instance for pluralization. It defines pluralization rules in the `messages` option for English. The `t` function handles the pluralization logic based on the count provided as an argument. This utilizes a local scope for the i18n instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useI18n } from 'vue-i18n'\n\nconst { t } = useI18n({\n  locale: 'en',\n  messages: {\n    en: {\n      car: 'car | cars',\n      apple: 'no apples | one apple | {count} apples',\n      banana: 'no bananas | {n} banana | {n} bananas'\n    }\n  }\n})\n</script>\n\n<template>\n  <h2>Car:</h2>\n  <p>{{ t('car', 1) }}</p>\n  <p>{{ t('car', 2) }}</p>\n  <h2>Apple:</h2>\n  <p>{{ t('apple', 0) }}</p>\n  <p>{{ t('apple', 1) }}</p>\n  <p>{{ t('apple', { count: 10 }, 10) }}</p>\n  <p>{{ t('apple', 10) }}</p>\n  <h2>Banana:</h2>\n  <p>{{ t('banana', { n: 1 }, 1) }}</p>\n  <p>{{ t('banana', 1) }}</p>\n  <p>{{ t('banana', { n: 'too many' }, 100) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Composer Properties in Vue-i18n\nDESCRIPTION: This example shows how to extend the `Composer` interface in Vue-i18n to include custom properties. In this case, a `localeCodes` property is added to the `Composer` instance. This allows developers to add custom functionalities or data to the Vue-i18n Composer API.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// vue-i18n.d.ts (`.d.ts` file at your app)\n\ndeclare module 'vue-i18n' {\n  interface ComposerCustom {\n    localeCodes: string[]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merge DateTime Format - Vue-i18n (TypeScript)\nDESCRIPTION: Merges a datetime format to the Composer instance's datetimeFormats. It takes a locale and a format object as parameters, allowing you to extend or override existing datetime formats for a specific locale. This is useful for dynamically adding or modifying formats based on application requirements.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nmergeDateTimeFormat<DateTimeSchema extends Record<string, any> = never, LocaleSchema extends string = string, Locale extends PickupLocales<NonNullable<DateTimeFormats>> = PickupLocales<NonNullable<DateTimeFormats>>, Formats = IsNever<DateTimeSchema> extends true ? Record<string, any> : DateTimeSchema>(locale: LocaleSchema | Locale, format: Formats): void;\n```\n\n----------------------------------------\n\nTITLE: $d(value) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the `$d` function in Vue I18n, used for datetime formatting. It takes a number or Date as input and returns the formatted value as a DateTimeFormatResult or string. It re-evaluates when the locale changes. In Composition API mode, the input/output is the same as for VueI18n instance.  It is injected by `app.config.globalProperties` and works on a global scope.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n$d(value: number | Date): DateTimeFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: Customizing Pluralization Rules in Composition API mode - JavaScript\nDESCRIPTION: This snippet demonstrates how to customize pluralization rules in Vue I18n v9 and later using the `pluralRules` option in the Composition API mode. It shows a custom rule function used within a component's setup function.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useI18n } from 'vue-i18n'\n\nfunction customRule(choice, choicesLength, orgRule) {\n  if (choice === 0) {\n    return 0\n  }\n\n  const teen = choice > 10 && choice < 20\n  const endsWithOne = choice % 10 === 1\n  if (!teen && endsWithOne) {\n    return 1\n  }\n  if (!teen && choice % 10 >= 2 && choice % 10 <= 4) {\n    return 2\n  }\n\n  return choicesLength < 4 ? 2 : 3\n}\n\nconst MyComp = {\n  setup() {\n    const { t } = useI18n({\n      // ...\n      pluralRules: {\n        ru: customRule,\n        // ...\n      },\n      // ...\n    })\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Interpolation with Array in Vue I18n v9 - HTML\nDESCRIPTION: This snippet shows the required way to use list interpolation in Vue I18n v9 and later: you must pass an array of values.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('greeting', ['kazupon']) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Translate with `$t`, Named, Plural in Vue I18n v10+ (Vue Template)\nDESCRIPTION: Demonstrates how to migrate from using `$tc` to `$t` by passing the named value and plural number.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_43\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('banana', { name: 'dio' }, 2) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Post Translation Handler Type Definition in TypeScript\nDESCRIPTION: Defines the `PostTranslationHandler` type in Vue I18n, which is a function that takes the translated message and the key as input, and returns a processed message.  This allows for custom post-processing of translated messages, such as formatting or modification, before they are displayed.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PostTranslationHandler<Message = string> = (translated: MessageFunctionReturn<Message>, key: string) => MessageFunctionReturn<Message>;\n```\n\n----------------------------------------\n\nTITLE: Number Options missingWarn Property in TypeScript\nDESCRIPTION: Defines the `missingWarn` property within the `NumberOptions` interface.  This boolean property determines whether to suppress warnings that are outputted when localization fails during number formatting. Setting it to `true` will prevent warning messages from being displayed.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nmissingWarn?: boolean;\n```\n\n----------------------------------------\n\nTITLE: $d(value, args) Signature - Vue I18n\nDESCRIPTION: This overloaded signature of the `$d` method formats a datetime value (number or Date instance) using argument values.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n$d(value: number | Date, args: { [key: string]: string | boolean | number }): DateTimeFormatResult;\n```\n\n----------------------------------------\n\nTITLE: Missing Warning Configuration\nDESCRIPTION: This typescript code defines the `missingWarn` property of the Vue I18n configuration. This property configures whether to suppress warnings outputted when localization fails.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nmissingWarn?: boolean | RegExp;\n```\n\n----------------------------------------\n\nTITLE: Translate Options missingWarn Property in TypeScript\nDESCRIPTION: Defines the `missingWarn` property within the `TranslateOptions` interface.  This boolean property determines whether to suppress warnings outputted when localization fails during translation. Setting it to `true` prevents the display of warning messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nmissingWarn?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Composition API Setup for Vue 2.6\nDESCRIPTION: This code snippet demonstrates setting up Vue I18n with the Composition API in Vue 2.6 using vue-i18n-bridge. It includes importing necessary modules, installing VueCompositionAPI, creating the i18n instance, and integrating it into the Vue app.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport Vue from 'vue'\nimport VueCompositionAPI, { createApp } from '@vue/composition-api'\nimport { createI18n, useI18n } from 'vue-i18n-bridge'\n\nVue.use(VueCompositionAPI)\nVue.use(VueI18n, { bridge: true }) // you must specify '{ bridge: true }' plugin option when install vue-i18n\n\n// `createI18n` options is almost same vue-i18n (vue-i18n@v9.x) API\nconst i18n = createI18n({\n  legacy: false,\n  locale: 'ja',\n  messages: {\n    en: {\n      message: {\n        hello: 'hello, {name}!'\n      }\n    },\n    ja: {\n      message: {\n        hello: 'こんにちは、{name}！'\n      }\n    }\n  }\n}, VueI18n) // `createI18n` which is provide `vue-i18n-bridge` has second argument, you **must** pass `VueI18n` constructor which is provide `vue-i18n`\n\nconst app = createApp({\n setup() {\n   // `useI18n` options is almost same vue-i18n (vue-i18n@v9.x) API\n   const { t, locale } = useI18n()\n   // ... todo something\n\n   return { t, locale }\n }\n})\n\napp.use(i18n) // you must install `i18n` instance which is created by `createI18n`\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Rollup Replace Plugin Configuration\nDESCRIPTION: This snippet shows how to use the @rollup/plugin-replace to configure feature flags for vue-i18n. The flags, `__VUE_I18N_FULL_INSTALL__`, `__VUE_I18N_LEGACY_API__`, and `__INTLIFY_DROP_MESSAGE_COMPILER__`, are replaced with boolean literals to enable or disable features at build time, optimizing tree shaking. Proper configuration is crucial for reducing the final bundle size.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/vue-i18n/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreplace({\n  __VUE_I18N_FULL_INSTALL__: true,\n  __VUE_I18N_LEGACY_API__: true,\n  __INTLIFY_DROP_MESSAGE_COMPILER__: false\n})\n```\n\n----------------------------------------\n\nTITLE: MessageContext - linked (TypeScript)\nDESCRIPTION: Resolves a linked message based on a key and optional modifier or options. This method allows you to include other messages within a message, promoting reusability and modularity. The `key` parameter specifies the message key, and the optional `modifier` or `options` parameter allows you to customize the linked message resolution.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nlinked(key: Path, modifier?: string): MessageType<T>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlinked(key: Path, modifier?: string, type?: string): MessageType<T>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlinked(key: Path, optoins?: LinkedOptions): MessageType<T>;\n```\n\n----------------------------------------\n\nTITLE: Translate with `tc` and Named in Vue I18n v9.x\nDESCRIPTION: This demonstrates how to use `tc` with a named record in Vue I18n v9.x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.tc('banana', { name: 'dio' }))\n```\n\n----------------------------------------\n\nTITLE: Remove place syntax with 'place' attr/prop (Vue I18n v8.x)\nDESCRIPTION: This snippet demonstrates the use of the `place` attribute and `places` prop for component interpolation in Vue I18n v8.x. It uses named slots for dynamic content.  Requires Vue I18n v8.x. Input is a translation key ('info'), a `refundLimit` variable, and a `refundUrl` variable. Output is the translated text with interpolated values for 'limit' and 'action' using named places. The `place` syntax has been removed from Vue I18n v9 and later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<i18n path=\"info\" tag=\"p\" :places=\"{ limit: refundLimit }\">\n  <span place=\"limit\">{{ refundLimit }}</span>\n  <a place=\"action\" :href=\"refundUrl\">{{ $t('refund') }}</a>\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Get Post Translation Handler Method (TypeScript)\nDESCRIPTION: Defines the `getPostTranslationHandler` method within the Composer interface. Retrieves the post translation handler function.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ngetPostTranslationHandler(): PostTranslationHandler<VueMessageType> | null;\n```\n\n----------------------------------------\n\nTITLE: Linked Messages Output - Vue I18n\nDESCRIPTION: Displays the expected output after using linked messages. The 'message.linked' message has been resolved by replacing the references to 'message.dio' and 'message.the_world' with their respective values.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<p>DIO: the world !!!!</p>\n```\n\n----------------------------------------\n\nTITLE: String Syntax v-t Output\nDESCRIPTION: This is the HTML output generated by the string syntax example. The v-t directive successfully translates and inserts the locale message \"hi there!\" into both paragraph elements.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/directive.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"string-syntax\">\n  <p>hi there!</p>\n  <p>hi there!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue I18n with Object Syntax\nDESCRIPTION: This JavaScript code initializes the Vue I18n instance for demonstrating object syntax with the `v-t` directive. It includes translations for 'hi', 'bye', and 'apple' in both English and Japanese, demonstrating interpolation and pluralization. The Vue component defines data properties 'byePath' and 'appleCount' used for binding in the template.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/directive.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'vue-i18n'\n\nconst i18n = createI18n({\n  locale: 'ja',\n  messages: {\n    en: {\n      message: {\n        hi: 'Hi, {name}!'\n        bye: 'Goodbye!'\n        apple: 'no apples | one apple | {count} apples'\n      }\n    },\n    ja: {\n      message: {\n        hi: 'こんにちは、{name}！',\n        bye: 'さようなら！',\n        apple: 'リンゴはありません | 一つのりんご | {count} りんご'\n      }\n    }\n  }\n})\n\nconst app = createApp({\n  data() {\n    return {\n      byePath: 'message.bye',\n      appleCount: 7,\n    }\n  }\n})\napp.use(i18n)\napp.mount('#object-syntax')\n```\n\n----------------------------------------\n\nTITLE: MessageContext - named (TypeScript)\nDESCRIPTION: Resolves a message value from a named record using the specified key. This method is used to access values from a named object of message values provided during translation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nnamed(key: string): unknown;\n```\n\n----------------------------------------\n\nTITLE: Creating i18n Instance with Datetime Formats JavaScript\nDESCRIPTION: Creates a Vue I18n instance with the defined `datetimeFormats`. This configures the i18n instance to use these formats when localizing datetimes.  The datetimeFormats option is required for VueI18n v9.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/datetime.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = createI18n({\n  datetimeFormats\n})\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Legacy API Setup for Vue 2.6\nDESCRIPTION: This code snippet demonstrates setting up Vue I18n with the Legacy API in Vue 2.6 using vue-i18n-bridge. It includes installing VueCompositionAPI, creating the i18n instance, and integrating it into a Vue instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport Vue from 'vue'\nimport VueCompositionAPI from '@vue/composition-api'\nimport { createI18n, useI18n } from 'vue-i18n-bridge'\n\nVue.use(VueCompositionAPI)\nVue.use(VueI18n, { bridge: true }) // you must specify '{ bridge: true }' plugin option when install vue-i18n\n\n// `createI18n` options is almost same vue-i18n (vue-i18n@v9.x) API\nconst i18n = createI18n({\n  locale: 'ja',\n  messages: {\n    en: {\n      message: {\n        hello: 'hello, {name}!'\n      }\n    },\n    ja: {\n      message: {\n        hello: 'こんにちは、{name}！'\n      }\n    }\n  }\n}, VueI18n) // `createI18n` which is provide `vue-i18n-bridge` has second argument, you **must** pass `VueI18n` constructor which is provide `vue-i18n`\n\nVue.use(i18n) // you must install `i18n` instance which is created by `createI18n`\n\nconst app = new Vue({ i18n })\napp.$mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Path Value Type Definition in TypeScript\nDESCRIPTION: Defines the `PathValue` type in Vue I18n, which can be a string, number, boolean, function, null, an object with string keys and `PathValue` values, or an array of `PathValue`s. This type represents the value that is resolved at a given path within a message or data structure, supporting various data types.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PathValue = string | number | boolean | Function | null | {\n    [key: string]: PathValue;\n} | PathValue[];\n```\n\n----------------------------------------\n\nTITLE: Translation Property (TypeScript)\nDESCRIPTION: Defines the `t` property within the Composer interface. Represents locale message translation and links to ComposerTranslation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nt: ComposerTranslation<Messages, Locales, RemoveIndexSignature<{\n        [K in keyof DefineLocaleMessage]: DefineLocaleMessage[K];\n    }>>;\n```\n\n----------------------------------------\n\nTITLE: Translate with `tc` in Vue I18n v9.x (Legacy API)\nDESCRIPTION: This code demonstrates how to use the `tc` function for translation in Vue I18n v9.x with the Legacy API. It initializes the i18n instance and then calls `tc` to translate the key 'banana'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.tc('banana'))\n```\n\n----------------------------------------\n\nTITLE: Translate with locale and named V9 (TS)\nDESCRIPTION: Demonstrates how to use the `t` function with a locale and named parameter in Vue I18n v9.x within a TypeScript context to translate a message with named arguments.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\n\nconsole.log(i18n.global.t('message.hello', 'ja', { name: 'dio' }))\n```\n\n----------------------------------------\n\nTITLE: Installing @intlify/unplugin-vue-i18n (npm)\nDESCRIPTION: This command installs the @intlify/unplugin-vue-i18n package as a development dependency using npm. This plugin optimizes Vue I18n performance by pre-compiling locale resources.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @intlify/unplugin-vue-i18n -D\n```\n\n----------------------------------------\n\nTITLE: DateTimeOptions - key (TypeScript)\nDESCRIPTION: Specifies the target format key. This key is used to identify the specific date and time format to be applied from the available locales.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nkey?: Key;\n```\n\n----------------------------------------\n\nTITLE: Optional 'tag' Prop in NumberFormat Component (Vue I18n v8.x)\nDESCRIPTION: This snippet demonstrates the usage of the `tag` prop with a boolean value of `false` in Vue I18n v8.x's `<i18n-n>` component. This allowed rendering child elements without a root element. Requires Vue I18n v8.x. Input is a numeric value (100) and a format ('currency'). Output is the formatted number with the integer part styled with bold font-weight, rendered without a surrounding root element. The `tag` prop is optional in Vue I18n v9 and later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<i18n-n :tag=\"false\" :value=\"100\" format=\"currency\">\n  <span v-slot:integer=\"slotProps\" styles=\"font-weight: bold\">{{ slotProps.integer }}</span>\n</i18n-n>\n```\n\n----------------------------------------\n\nTITLE: VueI18n setNumberFormat property (Legacy API)\nDESCRIPTION: Defines the setNumberFormat property, a function to set a number format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nsetNumberFormat: Composition['setNumberFormat'];\n```\n\n----------------------------------------\n\nTITLE: Registering Message Compiler with createI18n\nDESCRIPTION: Shows how to register the custom message compiler with the `createI18n` function in Vue I18n.  The `messageCompiler` option is used to specify the custom compiler implementation.  It also includes example messages using ICU Message Format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/format.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\nimport { messageCompiler } from './compilation'\n\nconst i18n = createI18n({\n  legacy: false,\n  locale: 'en',\n  messageCompiler,\n  messages: {\n    en: {\n      hello: 'hello world!',\n      greeting: 'hi, {name}!',\n      photo: `You have {numPhotos, plural,\n        =0 {no photos.}\n        =1 {one photo.}\n        other {# photos.}\n      }`\n    }\n  }\n})\n\n// the below your something to do ...\n// ...\n```\n\n----------------------------------------\n\nTITLE: Hello World Example with petite-vue-i18n\nDESCRIPTION: This snippet provides a complete example of using `petite-vue-i18n` to display a translated \"Hello World\" message. It includes the initialization of the i18n instance, setting up the Vue component, and mounting the application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/petite-vue-i18n/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { createApp } = Vue\nconst { createI18n, useI18n } = PetiteVueI18n\n// or for ES modules\n// import { createApp } from 'vue'\n// import { createI18n } from 'petite-vue-i18n'\n\nconst i18n = createI18n({\n  locale: 'en',\n  messages: {\n    en: {\n      'hello world': 'Hello world!'\n    },\n    ja: {\n      'hello world': 'こんにちは、世界！'\n    }\n  }\n})\n\n// define App component\nconst App = {\n  setup() {\n    const { t } = useI18n()\n    return { t }\n  }\n}\n\nconst app = createApp(App)\n\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: List Interpolation Template\nDESCRIPTION: This snippet demonstrates how to pass list parameters to `$t` when using a message function that utilizes list interpolation. It showcases how to specify the parameters as an array and how they are accessed within the message function.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('greeting', ['DIO']) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, plural) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, plural)` function, used for pluralization. Supported for Composition API mode only until v9, and also in Legacy API mode v10 or later, accepts a key and a plural number.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, plural: number): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Number Formatting Property (TypeScript)\nDESCRIPTION: Defines the `n` property within the Composer interface. Represents number formatting and links to ComposerNumberFormatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nn: ComposerNumberFormatting<NumberFormats, Locales, RemoveIndexSignature<{\n        [K in keyof DefineNumberFormat]: DefineNumberFormat[K];\n    }>>;\n```\n\n----------------------------------------\n\nTITLE: Type-safe VueI18n Initialization\nDESCRIPTION: Creates a VueI18n instance with type-safe resources using `createI18n`.  It imports a JSON locale file (en-US.json), defines a TypeScript type `MessageSchema` based on the imported JSON, and then uses this type to define the `messages` option in `createI18n`. The locale is set to `en-US`, and the code demonstrates how TypeScript enforces the presence of resources for specified locales (`en-US` and `ja-JP`).\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/typescript.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\nimport enUS from './locales/en-US.json'\n\n// Type-define 'en-US' as the master schema for the resource\ntype MessageSchema = typeof enUS\n\nconst i18n = createI18n<[MessageSchema], 'en-US' | 'ja-JP'>({\n  locale: 'en-US',\n  messages: {\n    'en-US': enUS\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Interpolation - Javascript\nDESCRIPTION: This code snippet configures Vue I18n with Russian as the primary locale, English as the fallback, and enables formatFallbackMessages. With formatFallbackMessages set to true, Vue I18n will attempt to interpolate the translation key itself if a translation is not found in the target locale. This allows the keys to be used as fallback translations, which reduces the amount of translation effort.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/fallback.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = createI18n({\n  locale: 'ru',\n  fallbackLocale: 'en',\n  formatFallbackMessages: true,\n  messages\n})\n```\n\n----------------------------------------\n\nTITLE: Example usage of tm in Vue component\nDESCRIPTION: Example of using `tm` with `rt` inside a Vue component to display localized content based on the current locale. The example shows how to structure messages and access nested properties.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n  <template v-for=\"content in tm('contents')\">\n    <h2>{{ rt(content.title) }}</h2>\n    <p v-for=\"paragraph in content.paragraphs\">\n     {{ rt(paragraph) }}\n    </p>\n  </template>\n</div>\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { defineComponent } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nexport default defineComponent({\n  setup() {\n    const { rt, tm } = useI18n({\n      messages: {\n        en: {\n          contents: [\n            {\n              title: 'Title1',\n              // ...\n              paragraphs: [\n                // ...\n              ]\n            }\n          ]\n        }\n      }\n      // ...\n    })\n    // ...\n    return { ... , rt, tm }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Translation Component Scope Configuration HTML\nDESCRIPTION: Shows how to explicitly define the scope for the Translation Component.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<i18n-t keypath=\"message.foo\" scope=\"global\">\n  ...\n</i18n-t>\n```\n\n----------------------------------------\n\nTITLE: Datetime Formatting with useI18n\nDESCRIPTION: This snippet illustrates datetime formatting using the `d` function from the Composer instance. It defines datetime formats for 'en-US' locale and uses the `d` function to format a date object. `useI18n` configures the locale, messages, and datetime formats. The `t` function is used to translate a label.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nconst { t, d } = useI18n({\n  locale: 'en-US',\n  messages: {\n    'en-US': {\n      current: 'Current Datetime'\n    }\n  },\n  datetimeFormats: {\n    'en-US': {\n      long: {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      }\n    }\n  }\n})\n\nconst now = ref(new Date())\n</script>\n\n<template>\n  <p>{{ t('current') }}: {{ d(now, 'long') }}</p>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Export I18n Host Web Component (JS)\nDESCRIPTION: This code snippet exports the I18n host web component. It imports `defineCustomElement` from vue and the `I18nHost.ce.vue` component and then defines a custom element using `defineCustomElement`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/wc.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineCustomElement } from 'vue'\nimport I18nHost from './components/I18nHost.ce.vue'\n\nconst I18nHostElement = defineCustomElement(I18nHost)\n\nexport { I18nHostElement }\n\n```\n\n----------------------------------------\n\nTITLE: ES Modules import of Vue I18n\nDESCRIPTION: This code snippet shows how to import Vue and Vue I18n as ES modules using CDN links from unpkg.  This approach leverages native browser support for ES modules. It loads Vue.js v3 and Vue I18n v11.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/installation.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"https://unpkg.com/vue@3/dist/vue.esm-browser.js\">\n<script type=\"module\" src=\"https://unpkg.com/vue-i18n@11/dist/vue-i18n.esm-browser.js\">\n```\n\n----------------------------------------\n\nTITLE: Translation Component with Slots Setup JavaScript\nDESCRIPTION: Sets up the Vue I18n instance and Vue app with locale messages and data for slot interpolation.  This example defines locale messages with named placeholders and component data for dynamic rendering.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'vue-i18n'\n\nconst i18n = createI18n({\n  locale: 'en',\n  messages: {\n    en: {\n      info: 'You can {action} until {limit} minutes from departure.',\n      change: 'change your flight',\n      refund: 'refund the ticket'\n    }\n  }\n})\n\nconst app = createApp({\n  data: () => ({\n    changeUrl: '/change',\n    refundUrl: '/refund',\n    changeLimit: 15,\n    refundLimit: 30\n  })\n})\n\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: $rt(message, named, options) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the overloaded `$rt` function in Vue I18n, used to resolve locale message translation for named interpolations. It takes a message, named values, and optional translation options. It returns a string. The message is either a `MessageFunction` or `VueMessageType`, the named values are for named interpolation, and the options are additional translation options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n$rt(message: MessageFunction<VueMessageType> | VueMessageType, named: NamedValue, options?: TranslationOptions): string;\n```\n\n----------------------------------------\n\nTITLE: ComposerTranslation Interface Definition - TypeScript\nDESCRIPTION: Defines the `ComposerTranslation` interface, which provides locale message translation functions. It specifies generic types for messages, locales, defined locale messages, and resource keys.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ComposerTranslation<Messages extends Record<string, any> = {}, Locales = 'en-US', DefinedLocaleMessage extends RemovedIndexResources<DefineLocaleMessage> = RemovedIndexResources<DefineLocaleMessage>, C = IsEmptyObject<DefinedLocaleMessage> extends false ? JsonPaths<{    [K in keyof DefinedLocaleMessage]: DefinedLocaleMessage[K];}> : never, M = IsEmptyObject<Messages> extends false ? TranslationsPaths<Messages> : never, ResourceKeys extends C | M = IsNever<C> extends false ? IsNever<M> extends false ? C | M : C : IsNever<M> extends false ? M : never>\n```\n\n----------------------------------------\n\nTITLE: Translate with `$tc` and Named in Vue I18n v9.x (Vue Template)\nDESCRIPTION: Shows how to use `$tc` with a named record in a Vue template in Vue I18n v9.x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_34\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $tc('banana', { name: 'dio' }) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Message Resolver Example in VueI18n (v9.2+)\nDESCRIPTION: This code snippet demonstrates how to configure a custom message resolver in VueI18n (version 9.2 or later). The message resolver allows you to define your own logic for retrieving messages based on the locale and message key.  It showcases a simple message resolving function and its integration with `createI18n`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\n\n// your message resolver\nfunction messageResolver(obj, path) {\n  // simple message resolving!\n  const msg = obj[path]\n  return msg != null ? msg : null\n}\n\n// call with I18n option\nconst i18n = createI18n({\n  locale: 'ja',\n  messageResolver, // set your message resolver\n  messages: {\n    en: { ... },\n    ja: { ... }\n  }\n})\n\n// the below your something to do ...\n// ...\n```\n\n----------------------------------------\n\nTITLE: Changing Locale via Global Property - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to change the locale using the `global` property of the i18n instance.  It initializes Vue I18n, creates a Vue app, and then updates the locale using either `i18n.global.locale.value = 'en'` (for `legacy: false`) or `i18n.global.locale = 'en'` (for `legacy: true`).\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/scope.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = createI18n({\n  locale: 'ja', // set current locale\n  // vue-i18n something options here ...\n  // ...\n})\n\n// create Vue app instance, install Vue I18n, and mount!\ncreateApp({\n  // something vue options here ...\n  // ...\n}).use(i18n).mount('#app')\n\n\n// change locale via `global` property\n\n// when vue-i18n is being used with legacy: false, note that i18n.global.locale is a ref, so we must set it via .value:\ni18n.global.locale.value = 'en'\n\n// otherwise - when using legacy: true, we set it like this:\ni18n.global.locale = 'en'\n```\n\n----------------------------------------\n\nTITLE: DateTimeOptions - missingWarn (TypeScript)\nDESCRIPTION: Specifies whether to suppress warnings outputted when localization fails for date and time formatting. If `true`, warnings about missing formats will be suppressed; otherwise, they will be displayed.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nmissingWarn?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Initializing Nuxt 3 App (pnpm)\nDESCRIPTION: This command initializes a new Nuxt 3 application named 'nuxt3-app-vue-i18n' using the pnpm package manager with dlx to execute nuxi. It sets up the basic project structure and configuration files.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm dlx nuxi init nuxt3-app-vue-i18n\n```\n\n----------------------------------------\n\nTITLE: Translate with `$tc` and Choice in Vue I18n v9.x (Vue Template)\nDESCRIPTION: Shows how to use `$tc` with choice number in a Vue template.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_36\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $tc('banana', 2) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Optional 'tag' Prop in i18n Component (Vue I18n v8.x)\nDESCRIPTION: This snippet demonstrates the usage of the `tag` prop with a boolean value of `false` in Vue I18n v8.x's `<i18n>` component.  This was used to render child elements without a root element. Requires Vue I18n v8.x. Input is a translation key ('message.greeting'). Output is the translated text wrapped in a <span> tag, rendered without a surrounding root element.  The `tag` prop is optional in Vue I18n v9 and later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<i18n :tag=\"false\" path=\"message.greeting\">\n  <span>hello!</span>\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Vue Router BeforeEach Hook with Lazy Loading (router.js)\nDESCRIPTION: This code demonstrates how to use a vue-router beforeEach hook to dynamically load locale messages based on the route's `locale` parameter.  It first checks if the locale is supported. Then, it loads the locale messages if they are not already available, sets the i18n language, and proceeds with navigation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lazy.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  // navigation guards\n  router.beforeEach(async (to, from, next) => {\n    const paramsLocale = to.params.locale\n\n    // use locale if paramsLocale is not in SUPPORT_LOCALES\n    if (!SUPPORT_LOCALES.includes(paramsLocale)) {\n      return next(`/${locale}`)\n    }\n\n    // load locale messages\n    if (!i18n.global.availableLocales.includes(paramsLocale)) {\n      await loadLocaleMessages(i18n, paramsLocale)\n    }\n\n    // set i18n language\n    setI18nLanguage(i18n, paramsLocale)\n\n    return next()\n  })\n```\n\n----------------------------------------\n\nTITLE: Using useI18n in Vue Component\nDESCRIPTION: This snippet demonstrates how to use the `useI18n` function within a Vue component's `<script setup>` block. It imports `useI18n` from 'vue-i18n', calls it to get a Composer instance (containing `t` for translation), and uses the `t` function in the template to display a translated message. This requires Vue I18n to be initialized with `legacy: false`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup> // [!code ++]\nimport { useI18n } from 'vue-i18n' // [!code ++]\nconst { t } = useI18n() // [!code ++]\n</script> // [!code ++]\n\n<template>\n  <h1>{{ $t(\"message.hello\") }}</h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: $rt(message) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the `$rt` function in Vue I18n, which is used to resolve a locale message translation. It takes a message, either a `MessageFunction` or `VueMessageType`, and returns a string. It re-evaluates when the locale changes.  In Composition API mode, it's injected by `app.config.globalProperties` and works on a global scope. In Legacy API mode, its behavior is the same as for VueI18n instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n$rt(message: MessageFunction<VueMessageType> | VueMessageType): string;\n```\n\n----------------------------------------\n\nTITLE: MessageCompiler Type Definition (TypeScript)\nDESCRIPTION: Defines the type for a message compiler function. It takes a message source (either a string or a ResourceNode) and a compiler context, and returns a `MessageFunction<Message>` which can be used to resolve the message at runtime.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MessageCompiler<Message = string, MessageSource = string | ResourceNode> = (message: MessageSource, context: MessageCompilerContext) => MessageFunction<Message>;\n```\n\n----------------------------------------\n\nTITLE: Component Interpolation with Slots (Vue I18n v9+)\nDESCRIPTION: This snippet demonstrates component interpolation using slots in Vue I18n v9 and later's `<i18n-t>` component. Requires Vue I18n v9 or later, Vue 3's slots, a `refundLimit` variable, and a `refundUrl` variable. Input is a translation key ('info'), a `refundLimit` variable, and a `refundUrl` variable. Output is the translated text with interpolated values for 'limit' and 'action' using named slots.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<i18n-t keypath=\"info\" tag=\"p\">\n  <template #limit>\n    <span>{{ refundLimit }}</span>\n  <template>\n  <template #action>\n    <a :href=\"refundUrl\">{{ $t('refund') }}</a>\n  <template>\n</i18n-t>\n```\n\n----------------------------------------\n\nTITLE: DatetimeFormatProps Type Definition (TypeScript)\nDESCRIPTION: Defines the properties for the DatetimeFormat component, extending FormattableProps with specific types for value (number or Date) and format (Intl.DateTimeFormatOptions). It specifies the value and format options used in the DatetimeFormat component.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/component.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DatetimeFormatProps = FormattableProps<number | Date, Intl.DateTimeFormatOptions>;\n```\n\n----------------------------------------\n\nTITLE: LocaleMessageType Type Definition (TypeScript)\nDESCRIPTION: Defines the type for a locale message, handling various types of values including strings, promises, functions, records, and arrays. This allows for flexible message structures that can include dynamic content and asynchronous operations.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LocaleMessageType<T, Message = string> = T extends string ? string : T extends () => Promise<infer P> ? LocaleMessageDictionary<P, Message> : T extends (...args: infer Arguments) => any ? (...args: Arguments) => ReturnType<T> : T extends Record<string, unknown> ? LocaleMessageDictionary<T, Message> : T extends Array<T> ? {\n    [K in keyof T]: T[K];\n} : T;\n```\n\n----------------------------------------\n\nTITLE: Built-in Modifiers Usage in Template - Vue I18n\nDESCRIPTION: Shows how the `$t` function retrieves and displays both the original and modified messages in a Vue template. The `message.homeAddress` is displayed as is, while `message.missingHomeAddress` is displayed with the linked `message.homeAddress` lowercased.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<label>{{ $t('message.homeAddress') }}</label>\n<p class=\"error\">{{ $t('message.missingHomeAddress') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Installing @intlify/unplugin-vue-i18n (yarn)\nDESCRIPTION: This command installs the @intlify/unplugin-vue-i18n package as a development dependency using yarn. This plugin optimizes Vue I18n performance by pre-compiling locale resources.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @intlify/unplugin-vue-i18n -D\n```\n\n----------------------------------------\n\nTITLE: Define Resource Schema for Global Scope\nDESCRIPTION: This TypeScript code defines schemas for global scope messages and number formats. It imports an en-US.json file and creates a `MessageSchema` type based on it, and also defines a `NumberSchema` type.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/typescript.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * define the resource schema\n */\n\nimport enUS from './en-US.json'\n\n// define message schema as master message schema\nexport type MessageSchema = typeof enUS\n\n// define number format schema\nexport type NumberSchema = {\n  currency: {\n    style: 'currency'\n    currencyDisplay: 'symbol'\n    currency: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Server (npm)\nDESCRIPTION: This command starts a server, typically used in conjunction with JIT compilation to serve the application. It might be simulating a production environment.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/backend/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Localizing Numbers with $n in Vue Templates\nDESCRIPTION: Demonstrates the use of the `$n` function in Vue templates to localize numbers. The first argument is the number value, the second argument is the format name defined in `numberFormats`, and the third argument is the locale. Additional options can be passed as an object to further customize the formatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/number.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $n(10000, 'currency') }}</p>\n<p>{{ $n(10000, 'currency', 'ja-JP') }}</p>\n<p>{{ $n(10000, 'currency', 'ja-JP', { useGrouping: false }) }}</p>\n<p>{{ $n(987654321, 'currency', { notation: 'compact' }) }}</p>\n<p>{{ $n(0.99123, 'percent') }}</p>\n<p>{{ $n(0.99123, 'percent', { minimumFractionDigits: 2 }) }}</p>\n<p>{{ $n(12.11612345, 'decimal') }}</p>\n<p>{{ $n(12145281111, 'decimal', 'ja-JP') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Number Formats for Vue I18n\nDESCRIPTION: Defines number formats for different locales, including currency, decimal, and percentage formats. These formats are used by Vue I18n to localize numbers according to the specified locale and format options, allowing you to customize the style, currency, and grouping behavior of numbers.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/number.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst numberFormats = {\n  'en-US': {\n    currency: {\n      style: 'currency', currency: 'USD', notation: 'standard'\n    },\n    decimal: {\n      style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2\n    },\n    percent: {\n      style: 'percent', useGrouping: false\n    }\n  },\n  'ja-JP': {\n    currency: {\n      style: 'currency', currency: 'JPY', useGrouping: true, currencyDisplay: 'symbol'\n    },\n    decimal: {\n      style: 'decimal', minimumSignificantDigits: 3, maximumSignificantDigits: 5\n    },\n    percent: {\n      style: 'percent', useGrouping: false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vue I18n with npm\nDESCRIPTION: This command installs vue-i18n version 11 using npm.  It adds the vue-i18n package as a project dependency, allowing you to use internationalization features in your Vue application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/installation.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install vue-i18n@11\n```\n\n----------------------------------------\n\nTITLE: CDN Import for Vue 2.7\nDESCRIPTION: These script tags import Vue 2.7, Vue I18n v8, vue-demi, and vue-i18n-bridge from CDN. They are necessary for using the bridge in a browser environment with Vue 2.7 without a bundler.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.7\"></script>\n<script src=\"https://unpkg.com/vue-i18n@8/dist/vue-i18n.min.js\"></script>\n<script src=\"https://unpkg.com/vue-demi@0.13.5/lib/index.iife.js\"></script>\n<script src=\"https://unpkg.com/vue-i18n-bridge@9.2.0-beta.38/dist/vue-i18n-bridge.global.prod.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Translation API Return Value in Vue I18n v8.x - JavaScript\nDESCRIPTION: This snippet demonstrates how the translation API in Vue I18n v8.x could return values other than strings, such as arrays.  It shows an example of how this behavior was used to retrieve error messages from a locale file.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// e.g. Array structure locale messages\nconst i18n = new VueI18n({\n  messages: {\n    en: {\n      errors: [\n        'invalid argument',\n        // ...\n        'unexpected errors'\n      ]\n    }\n  }\n})\n\n// e.g. Error Component\nconst ErrorMessage = {\n  props: {\n    code: {\n      type: Number,\n      required: true\n    }\n  },\n  template: `<p class=\"error\">{{ getErrorMessage(code) }}</p>`,\n  methods: {\n    getErrorMessage(code) {\n      return this.$t('errors')[code]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Literal Interpolation Example - Vue I18n\nDESCRIPTION: Demonstrates literal interpolation with Vue I18n.  This shows how to define a locale message that includes string literals within placeholders, such as special characters, which will be directly interpolated. The example shows how to construct an email address using literal interpolation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    address: \"{account}{'@'}{domain}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LocaleMessageValue Type Definition (TypeScript)\nDESCRIPTION: Defines the type for a value within a locale message. It can be either a `LocaleMessageDictionary` or a simple `string`. This allows for a mixture of nested message structures and plain text.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LocaleMessageValue<Message = string> = LocaleMessageDictionary<any, Message> | string;\n```\n\n----------------------------------------\n\nTITLE: Hello I18n Web Component (Vue)\nDESCRIPTION: This code snippet shows a simple Vue component (`HelloI18n.ce.vue`) that uses `useI18n` to translate the 'hello' message.  It imports `useI18n` from vue-i18n, retrieves the `t` function, and uses it in the template to display the translated message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/wc.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n'\n\nconst { t } = useI18n()\n</script>\n\n<template>\n  <p>{{ t('hello') }}</p>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Composition API Setup for Vue 2.7\nDESCRIPTION: This code snippet demonstrates setting up Vue I18n with the Composition API in Vue 2.7 using vue-i18n-bridge. It includes importing necessary modules, creating the i18n instance, and integrating it into the Vue app.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport Vue from 'vue'\nimport { createApp } from 'vue-demi'\nimport { createI18n, useI18n } from 'vue-i18n-bridge'\n\nVue.use(VueI18n, { bridge: true }) // you must specify '{ bridge: true }' plugin option when install vue-i18n\n\n// `createI18n` options is almost same vue-i18n (vue-i18n@v9.x) API\nconst i18n = createI18n({\n  legacy: false,\n  locale: 'ja',\n  messages: {\n    en: {\n      message: {\n        hello: 'hello, {name}!'\n      }\n    },\n    ja: {\n      message: {\n        hello: 'こんにちは、{name}！'\n      }\n    }\n  }\n}, VueI18n) // `createI18n` which is provide `vue-i18n-bridge` has second argument, you **must** pass `VueI18n` constructor which is provide `vue-i18n`\n\nconst app = createApp({\n setup() {\n   // `useI18n` options is almost same vue-i18n (vue-i18n@v9.x) API\n   const { t, locale } = useI18n()\n   // ... todo something\n\n   return { t, locale }\n }\n})\n\napp.use(i18n) // you must install `i18n` instance which is created by `createI18n`\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: NumberFormatProps Type Definition (TypeScript)\nDESCRIPTION: Defines the properties for the NumberFormat component, extending FormattableProps with specific types for value (number) and format (Intl.NumberFormatOptions). It specifies the value and format options used in the NumberFormat component.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/component.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NumberFormatProps = FormattableProps<number, Intl.NumberFormatOptions>;\n```\n\n----------------------------------------\n\nTITLE: VueI18n formatFallbackMessages property (Legacy API)\nDESCRIPTION: Defines the formatFallbackMessages property, controlling the suppression of warnings when falling back to `fallbackLocale` or root.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nformatFallbackMessages: Composition['fallbackFormat'];\n```\n\n----------------------------------------\n\nTITLE: Defining VueI18n Interface (Legacy API)\nDESCRIPTION: Defines the VueI18n interface, providing access to features like locale management, datetime formats, number formats, and message translation. This interface is compatible with Vue I18n v8.x but is deprecated and will be removed in v12.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VueI18n<Messages extends Record<string, any> = {}, DateTimeFormats extends Record<string, any> = {}, NumberFormats extends Record<string, any> = {}, OptionLocale = Locale, ResourceLocales = PickupLocales<NonNullable<Messages>> | PickupLocales<NonNullable<DateTimeFormats>> | PickupLocales<NonNullable<NumberFormats>>, Locales = Locale extends GeneratedLocale ? GeneratedLocale : OptionLocale extends string ? [ResourceLocales] extends [never] ? Locale : ResourceLocales : OptionLocale | ResourceLocales, Composition extends Composer<Messages, DateTimeFormats, NumberFormats, OptionLocale> = Composer<Messages, DateTimeFormats, NumberFormats, OptionLocale>> \n```\n\n----------------------------------------\n\nTITLE: $rt(message, plural, options) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the overloaded `$rt` function in Vue I18n, used to resolve locale message translation for plurals. It takes a message, a plural number, and optional translation options. It returns a string. The message is either a `MessageFunction` or `VueMessageType`, the plural is the index for the pluralized string (1-based), and options are additional translation options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n$rt(message: MessageFunction<VueMessageType> | VueMessageType, plural: number, options?: TranslationOptions): string;\n```\n\n----------------------------------------\n\nTITLE: $d(value, key, locale) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the overloaded `$d` function in Vue I18n, used for datetime formatting with a specific format key and locale. It takes a number or Date, a format key, and a locale as input, and returns the formatted value. The function uses the provided key to look up the datetime format, and the given locale overrides the global or local locale setting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n$d(value: number | Date, key: string, locale: Locale): DateTimeFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: Custom Formatting with Scoped Slots HTML\nDESCRIPTION: Shows how to use scoped slots with the `i18n-d` component for custom datetime formatting.  This example bolds the era part of the date when formatted with the Japanese locale. It utilizes the `era` scoped slot to style the era. The format uses the long format with a narrow era, and specifies the ja-JP-u-ca-japanese locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/datetime.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<i18n-d tag=\"span\" :value=\"new Date()\" locale=\"ja-JP-u-ca-japanese\" :format=\"{ key: 'long', era: 'narrow' }\">\n  <template #era=\"props\">\n    <span style=\"color: green\">{{ props.era }}</span>\n  </template>\n</i18n-d>\n```\n\n----------------------------------------\n\nTITLE: Define UseI18nOptions Type\nDESCRIPTION: Defines the `UseI18nOptions` type for configuring the `useI18n` composable. It inherits options from `ComposerAdditionalOptions` and `ComposerOptions`, allowing for customization of message, datetime, and number formatting schemas. This type is used to specify the options when calling `useI18n`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseI18nOptions<Schema extends {\n    message?: unknown;\n    datetime?: unknown;\n    number?: unknown;\n} = {\n    message: DefaultLocaleMessageSchema;\n    datetime: DefaultDateTimeFormatSchema;\n    number: DefaultNumberFormatSchema;\n}, Locales extends {\n    messages: unknown;\n    datetimeFormats: unknown;\n    numberFormats: unknown;\n} | string = Locale, Options extends ComposerOptions<Schema, Locales> = ComposerOptions<Schema, Locales>> = ComposerAdditionalOptions & Options;\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-vue-i18n for Vite\nDESCRIPTION: This configuration shows how to integrate `unplugin-vue-i18n` with Vite. It imports the necessary modules and defines the plugin within the `vite.config.ts` file. The `include` option specifies the path to the locale messages resource files.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/sfc.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport { resolve, dirname } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport VueI18nPlugin from '@intlify/unplugin-vue-i18n/vite'\n\nexport default defineConfig({\n  /* ... */\n  plugins: [\n    /* ... */\n    VueI18nPlugin({\n      /* options */\n      // locale messages resource pre-compile option\n      include: resolve(dirname(fileURLToPath(import.meta.url)), './path/to/src/locales/**'),\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Team Members Configuration with TypeScript in Vue\nDESCRIPTION: This script defines an array of team member objects, each with properties like avatar URL, name, title, sponsor URL, and a list of social media links. The `members` array is then passed to the `VPTeamMembers` component to display the team members on the page.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/introduction.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VPTeamMembers } from 'vitepress/theme'\n\nconst members = [\n  {\n    avatar: 'https://www.github.com/kazupon.png',\n    name: \"kazupon\",\n    title: 'Creator of Vue I18n & Intlify project',\n    sponsor: 'https://github.com/sponsors/kazupon',\n    links: [\n      { icon: 'github', link: 'https://github.com/kazupon' },\n      { icon: 'twitter', link: 'https://twitter.com/kazu_pon' }\n    ]\n  },\n  {\n    avatar: 'https://www.github.com/BobbieGoede.png',\n    name: \"BobbieGoede\",\n    title: 'Intlify Core member',\n    sponsor: 'https://github.com/sponsors/BobbieGoede',\n    links: [\n      { icon: 'github', link: 'https://github.com/BobbieGoede' },\n      { icon: 'twitter', link: 'https://twitter.com/BobbieGoede' }\n    ]\n  },\n  {\n    avatar: 'https://www.github.com/ota-meshi.png',\n    name: \"Yosuke Ota\",\n    title: 'Intlify Core member',\n    sponsor: 'https://github.com/sponsors/ota-meshi',\n    links: [\n      { icon: 'github', link: 'https://github.com/ota-meshi' },\n      { icon: 'twitter', link: 'https://twitter.com/omoteota' }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: VueI18n messages property (Legacy API)\nDESCRIPTION: Defines the messages property, representing the locale messages of localization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly messages: {\n        [K in keyof Messages]: Messages[K];\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining DateTimeFormatResult type in Vue I18n (Legacy API)\nDESCRIPTION: Defines the type DateTimeFormatResult as a string. This type is part of the legacy API and is deprecated for removal in vue-i18n v12.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DateTimeFormatResult = string;\n```\n\n----------------------------------------\n\nTITLE: Translation API with `$tm` / `tm` and `$rt` / `rt` - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve and resolve locale messages in Vue I18n v9 using `$tm` / `tm` and `$rt` / `rt`. It shows a Composition API example of retrieving error messages from an array within the locale messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// e.g. Array structure locale messages\nconst i18n = createI18n({\n  messages: {\n    en: {\n      errors: [\n        'invalid argument',\n        // ...\n        'unexpected errors'\n      ]\n    }\n  }\n})\n\n// e.g. Error Component\nconst ErrorMessage = {\n  props: {\n    code: {\n      type: Number,\n      required: true\n    }\n  },\n  template: `<p class=\"error\">{{ errors(code) }}</p>`,\n  setup() {\n    const { tm, rt } = useI18n()\n    const errors = (code) => rt(tm('errors')[code])\n    return { errors }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Locale Message - Vue-i18n (TypeScript)\nDESCRIPTION: Retrieves a locale message for a given key. This function returns the translated message based on the current locale or falls back to the defined fallback locales. Note that you need to use `rt` for the locale message returned by `tm`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ntm<Key extends string, ResourceKeys extends PickupKeys<Messages> = PickupKeys<Messages>, Locale extends PickupLocales<NonNullable<Messages>> = PickupLocales<NonNullable<Messages>>, Target = IsEmptyObject<Messages> extends false ? NonNullable<Messages>[Locale] : RemoveIndexSignature<{ \n        [K in keyof DefineLocaleMessage]: DefineLocaleMessage[K];\n    }>, Return = ResourceKeys extends ResourcePath<Target> ? ResourceValue<Target, ResourceKeys> : Record<string, any>>(key: Key | ResourceKeys): Return;\n```\n\n----------------------------------------\n\nTITLE: Translation Component Usage Example (HTML)\nDESCRIPTION: Illustrates how to use the Translation component in a Vue template. It shows how to specify the message key using the `keypath` prop, wrap the content with a specified tag, and interpolate values using slots.  In this example, an anchor tag with href and target _blank is injected as the interpolation value.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/component.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <!-- ... -->\n  <i18n keypath=\"term\" tag=\"label\" for=\"tos\">\n    <a :href=\"url\" target=\"_blank\">{{ $t('tos') }}</a>\n  </i18n>\n  <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing i18n with useI18n for local scope in Vue\nDESCRIPTION: This snippet demonstrates how to initialize the Vue I18n Composition API with `useI18n` to create a local scope Composer instance. It includes setting the locale, fallback locale, messages, datetime formats, and number formats.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useI18n } from 'vue-i18n'\n\nconst { t, d, n, tm, locale } = useI18n({\n  locale: 'ja-JP',\n  fallbackLocale: 'en-US',\n  messages: {\n    'en-US': {\n      // ....\n    },\n    'ja-JP': {\n      // ...\n    }\n  },\n  datetimeFormats: {\n    'en-US': {\n      // ....\n    },\n    'ja-JP': {\n      // ...\n    }\n  },\n  numberFormats: {\n    'en-US': {\n      // ....\n    },\n    'ja-JP': {\n      // ...\n    }\n  }\n})\n\n// Something to do here ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Pluralization Rules in Legacy API mode - JavaScript\nDESCRIPTION: This snippet demonstrates how to customize pluralization rules in Vue I18n v9 and later using the `pluralizationRules` option in the legacy API mode. It showcases a custom rule function for the Russian locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\n\nfunction customRule(choice, choicesLength, orgRule) {\n  if (choice === 0) {\n    return 0\n  }\n\n  const teen = choice > 10 && choice < 20\n  const endsWithOne = choice % 10 === 1\n  if (!teen && endsWithOne) {\n    return 1\n  }\n  if (!teen && choice % 10 >= 2 && choice % 10 <= 4) {\n    return 2\n  }\n\n  return choicesLength < 4 ? 2 : 3\n}\n\nconst i18n = createI18n({\n  // ...\n  pluralizationRules: {\n    ru: customRule,\n    // ...\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: VueI18n locale property (Legacy API)\nDESCRIPTION: Defines the locale property, representing the current locale being used.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nlocale: Locales;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs the project's dependencies using Yarn. It ensures all required packages are available for the application to run correctly.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/frameworks/nuxt3/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Fallback Format Configuration\nDESCRIPTION: This typescript code defines the `fallbackFormat` property of the Vue I18n configuration.  If true, the translation keys will be used as templates when the specified language lacks the translation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackFormat?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Translate with Key, Named Values, and Options: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using a key, named interpolation values, and translation options.  The locale messages should contain a `{x}` token for each placeholder x. Options can be used to suppress warnings when translations are missing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, named: NamedValue, options: TranslateOptions<Locales>): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Set Locale Message - Vue-i18n (TypeScript)\nDESCRIPTION: Sets a locale message to the Composer instance's messages. This function accepts a locale and a message object, allowing you to define or override translations for a specific locale. It allows for precise control over the application's localized content.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nsetLocaleMessage<MessageSchema extends LocaleMessage<VueMessageType> = never, LocaleSchema extends string = string, Locale extends PickupLocales<NonNullable<Messages>> = PickupLocales<NonNullable<Messages>>, MessageType = IsNever<MessageSchema> extends true ? IsEmptyObject<Messages> extends true ? RemoveIndexSignature<{ \n        [K in keyof DefineLocaleMessage]: DefineLocaleMessage[K];\n    }> : NonNullable<Messages>[Locale] : MessageSchema, Message extends MessageType = MessageType>(locale: LocaleSchema | Locale, message: Message): void;\n```\n\n----------------------------------------\n\nTITLE: Translate with list and options V10\nDESCRIPTION: Demonstrates how to use the `$t` function with a list and options for locale parameter in Vue I18n v10 or later to translate a message with arguments.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('message.hello', ['dio'], { locale: 'ja' }) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Translate Options default Property in TypeScript\nDESCRIPTION: Defines the `default` property within the `TranslateOptions` interface.  It specifies the default message to use when a translation is missing. It can be a string or a boolean value.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\ndefault?: string | boolean;\n```\n\n----------------------------------------\n\nTITLE: Hello World Template Example\nDESCRIPTION: A basic HTML template demonstrating the usage of the `t` function from petite-vue-i18n.  It displays a translated 'hello world' message within a div with id 'app'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <h1>{{ t('hello world') }}</h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Intlify Message AST Visualization\nDESCRIPTION: This snippet uses Mermaid to visualize the Intlify Message AST structure. It shows the relationships between different node types, including ResourceNode, MessageNode, PluralNode, and various MessageElementNode subtypes like TextNode, NamedNode, ListNode, LiteralNode, and LinkedNode.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/ARCHITECTURE.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n  ResourceNode --> MessageNode\n  ResourceNode --> PluralNode\n  PluralNode --> MessageNode\n  MessageNode --> MessageElementNode\n  MessageElementNode --> TextNode\n  MessageElementNode --> NamedNode\n  MessageElementNode --> ListNode\n  MessageElementNode --> LiteralNode\n  MessageElementNode --> LinkedNode\n  LinkedNode --> LinkedModifierNode\n  LinkedNode --> LinkedKeyNode\n  LinkedNode --> NamedNode\n  LinkedNode --> ListNode\n  LinkedNode --> LiteralNode\n```\n\n----------------------------------------\n\nTITLE: Template Example using $tm and $rt - Vue I18n\nDESCRIPTION: This HTML template demonstrates how to use `$tm` to access locale messages and `$rt` to render them within a Vue component. It iterates through an array of content fetched using `$tm('contents')` and displays the title and paragraphs, utilizing `$rt` to handle the actual translation of the content.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n  <template v-for=\"content in $tm('contents')\">\n    <h2>{{ $rt(content.title) }}</h2>\n    <p v-for=\"paragraph in content.paragraphs\">\n     {{ $rt(paragraph) }}\n    </p>\n  </template>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue I18n with Composition API\nDESCRIPTION: This snippet demonstrates how to initialize Vue I18n for use with the Composition API by setting the `legacy` option to `false` in the `createI18n` function.  It defines the locale, fallback locale, and messages for both English and Japanese.  This is a prerequisite for using `useI18n` in Vue components.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nconst i18n = VueI18n.createI18n({\n  legacy: false, // you must set `false`, to use Composition API // [!code ++]\n  locale: 'ja',\n  fallbackLocale: 'en',\n  messages: {\n    en: {\n      message: {\n        hello: 'hello world'\n      }\n    },\n    ja: {\n      message: {\n        hello: 'こんにちは、世界'\n      }\n    }\n  }\n})\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Basic i18n-d Component Usage HTML\nDESCRIPTION: Demonstrates basic usage of the `i18n-d` component for datetime formatting.  The `tag` prop sets the HTML tag for the component, `value` provides the datetime to format, `format` specifies the datetime format, and `locale` sets the locale. This shows formatting with default locale, 'long' format, and Japanese locale with Japanese calendar.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/datetime.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<i18n-d tag=\"p\" :value=\"new Date()\"></i18n-d>\n<i18n-d tag=\"p\" :value=\"new Date()\" format=\"long\"></i18n-d>\n<i18n-d tag=\"p\" :value=\"new Date()\" format=\"long\" locale=\"ja-JP-u-ca-japanese\"></i18n-d>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue I18n with Global Scope - JavaScript\nDESCRIPTION: This code snippet initializes Vue I18n with a global scope, setting the default locale to 'ja' and defining messages for 'en' and 'ja' locales. It then creates a Vue app instance, installs Vue I18n, and mounts it to the '#app' element.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/scope.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = createI18n({\n  locale: 'ja', // set current locale\n  messages: {\n    en: {\n      hello: 'hello!'\n    },\n    ja: {\n      hello: 'こんにちは！'\n    }\n  },\n  // vue-i18n something options here ...\n  // ...\n})\n\n// create Vue app instance, install Vue I18n, and mount!\ncreateApp({\n  // something vue options here ...\n  // ...\n}).use(i18n).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Switching to petite-vue-i18n via npm alias\nDESCRIPTION: This snippet shows how to switch from `vue-i18n` to `petite-vue-i18n` without changing the import ID by using an npm alias. This simplifies migration and reduces code changes. Requires modifications to the `package.json`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/petite-vue-i18n/README.md#_snippet_9\n\nLANGUAGE: Diff\nCODE:\n```\n {\n   // ...\n   \"dependencies\": {\n     \"vue\": \"^3.4.14\",\n-     \"vue-i18n\": \"^10.0.0\"\n+     \"vue-i18n\": \"npm:petite-vue-i18n@^10.0.0\"\n   },\n }\n```\n\n----------------------------------------\n\nTITLE: Fallback Root Property (TypeScript)\nDESCRIPTION: Defines the `fallbackRoot` property within the Composer interface. Determines whether to fall back to the global scope if localization fails.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackRoot: boolean;\n```\n\n----------------------------------------\n\nTITLE: Translate with List Interpolation and Options - Vue I18n (Typescript)\nDESCRIPTION: This snippet details the function signature for translating a message key with list interpolation and options in Vue I18n. The locale message should contain placeholders like `{0}`, `{1}`, etc., and the provided `TranslateOptions` object enables customization. `Key` is a generic type constrained to string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, list: unknown[], options: TranslateOptions<Locales>): string;\n```\n\n----------------------------------------\n\nTITLE: Component with Shared Messages\nDESCRIPTION: This example showcases a Vue component (ServiceModal) that imports and uses shared locale messages using the `sharedMessages` option of the `i18n` configuration. It uses the `$t` function to localize the 'save' button using a key from the shared messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/local.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport commonMessage from './locales/common' // import common locale messages\n\nexport default {\n  name: 'ServiceModal',\n  template: `\n    <div class=\"modal\">\n      <div class=\"body\">\n        <p>This is good service</p>\n      </div>\n      <div class=\"footer\">\n        <button type=\"button\">{{ $t('buttons.save') }}</button>\n      </div>\n    </div>\n  `,\n  i18n: {\n    messages: { ... },\n    sharedMessages: commonMessages\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Number Format - Vue-i18n (TypeScript)\nDESCRIPTION: Merges a number format to the Composer instance's numberFormats. It takes a locale and a format object as parameters, allowing you to dynamically add or modify number formats for a specific locale. This is useful for dynamically adjusting number formatting based on application requirements.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nmergeNumberFormat<NumberSchema extends Record<string, any> = never, LocaleSchema extends string = string, Locale extends PickupLocales<NonNullable<NumberFormats>> = PickupLocales<NonNullable<NumberFormats>>, Formats = IsNever<NumberSchema> extends true ? Record<string, any> : NumberSchema>(locale: LocaleSchema | Locale, format: Formats): void;\n```\n\n----------------------------------------\n\nTITLE: Named Interpolation Translation (t) - TypeScript\nDESCRIPTION: Translates a locale message with named interpolations using the `t` function. It accepts a key, resource key, or number along with an object containing named values. For each placeholder `x`, the locale message must contain a `{x}` token. It allows suppressing warnings if the translation is missing based on specified options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, named: NamedValue): string;\n```\n\n----------------------------------------\n\nTITLE: Locale Changer Component - Vue\nDESCRIPTION: This Vue component provides a select element that allows the user to change the global locale. The `v-model` directive binds the select element's value to `$i18n.locale`, ensuring that the locale is updated whenever the user selects a new option. The available locales are listed as options in the select element.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/scope.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"locale-changer\">\n    <select v-model=\"$i18n.locale\">\n      <option v-for=\"locale in $i18n.availableLocales\" :key=\"`locale-${locale}`\" :value=\"locale\">{{ locale }}</option>\n    </select>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Translation Component Pluralization HTML\nDESCRIPTION: Illustrates pluralization within the `<i18n-t>` component using the `plural` prop.  The `plural` prop determines which plural form to use, and the named slot 'n' is used to display the count. This is an example usage, not the full app code\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <!-- ... -->\n  <i18n-t keypath=\"message.plural\" locale=\"en\" :plural=\"count\">\n    <template #n>\n      <b>{{ count }}</b>\n    </template>\n  </i18n-t>\n  <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-vue-i18n for Webpack\nDESCRIPTION: This configuration shows how to integrate `unplugin-vue-i18n` with Webpack.  It imports the necessary modules and defines the plugin within the `webpack.config.js` file. The `include` option specifies the path to the locale messages resource files.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/sfc.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst path = require('path')\nconst VueI18nPlugin = require('@intlify/unplugin-vue-i18n/webpack')\n\nmodule.exports = {\n  /* ... */\n  plugins: [\n    /* ... */\n    VueI18nPlugin({\n      /* options */\n      // locale messages resource pre-compile option\n      include: path.resolve(__dirname, './path/to/src/locales/**'),\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolve Pluralized Translation (rt) - TypeScript\nDESCRIPTION: Resolves a locale message translation for plurals using the `rt` function. It accepts a locale message (returned by `tm`), a plural number, and optional translation options. It's specifically designed for programmatic locale message translation in scenarios like `tm`, `v-for`, and JavaScript `for` loops.  The function processes the locale message directly and doesn't perform internal fallbacks.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n(message: MessageFunction<VueMessageType> | VueMessageType, plural: number, options?: TranslateOptions<Locales>): string;\n```\n\n----------------------------------------\n\nTITLE: Fallback Warn Property (TypeScript)\nDESCRIPTION: Defines the `fallbackWarn` property within the Composer interface. Determines whether to suppress warnings when falling back, accepting a boolean or RegExp.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackWarn: boolean | RegExp;\n```\n\n----------------------------------------\n\nTITLE: Set Number Format - Vue-i18n (TypeScript)\nDESCRIPTION: Sets a number format to the Composer instance's numberFormats. It takes a locale and a format object as parameters, allowing you to define or override existing number formats for a specific locale.  This allows for precise control over the presentation of numbers within the application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nsetNumberFormat<NumberSchema extends Record<string, any> = never, LocaleSchema extends string = string, Locale extends PickupLocales<NonNullable<NumberFormats>> = PickupLocales<NonNullable<NumberFormats>>, FormatsType = IsNever<NumberSchema> extends true ? IsEmptyObject<NumberFormats> extends true ? RemoveIndexSignature<{ \n        [K in keyof DefineNumberFormat]: DefineNumberFormat[K];\n    }> : NonNullable<NumberFormats>[Locale] : NumberSchema, Formats extends FormatsType = FormatsType>(locale: LocaleSchema | Locale, format: Formats): void;\n```\n\n----------------------------------------\n\nTITLE: Merge Locale Message - Vue-i18n (TypeScript)\nDESCRIPTION: Merges a locale message into the Composer instance's messages. This function accepts a locale and a message object, allowing you to dynamically add or update translations for a specific locale. It enables runtime modification of the application's localization data.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nmergeLocaleMessage<MessageSchema extends LocaleMessage<VueMessageType> = never, LocaleSchema extends string = string, Locale extends PickupLocales<NonNullable<Messages>> = PickupLocales<NonNullable<Messages>>, Message = IsNever<MessageSchema> extends true ? Record<string, any> : MessageSchema>(locale: LocaleSchema | Locale, message: Message): void;\n```\n\n----------------------------------------\n\nTITLE: Template Output with Interpolation - HTML\nDESCRIPTION: This code shows the rendered HTML output from the Vue template after translation and interpolation. The first paragraph displays 'Здравствуйте, John' which is the Russian translation. The second displays 'The weather today is sunny!' because there is no russian translation and the formatFallbackMessages is set to true, which results in the use of english key.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/fallback.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<p>Здравствуйте, John</p>\n<p>The weather today is sunny!</p>\n```\n\n----------------------------------------\n\nTITLE: Translation Messages with Fallback Interpolation - Javascript\nDESCRIPTION: This code sets up messages with a translation in Russian, including a template parameter '{name}'.  When formatFallbackMessages is true, and a key is not found in the current locale, it will use the key as a message and interpolate the values. This allows the key to function as a default message in the fallback language, removing the need to create default translations.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/fallback.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  ru: {\n    'Hello {name}': 'Здравствуйте {name}'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue I18n in Single File Component\nDESCRIPTION: This example demonstrates how to use Vue I18n in a single file component (SFC) using the `<i18n>` custom block. It defines locale messages in JSON format within the `<i18n>` block.  The component displays a locale selector and a translated message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/sfc.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n\n<template>\n  <label for=\"locale\">locale</label>\n  <select v-model=\"$i18n.locale\">\n    <option>en</option>\n    <option>ja</option>\n  </select>\n  <p>message: {{ $t('hello') }}</p>\n</template>\n\n<i18n>\n{\n  \"en\": {\n    \"hello\": \"hello world!\"\n  },\n  \"ja\": {\n    \"hello\": \"こんにちは、世界！\"\n  }\n}\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: I18nPluginOptions Interface Definition (TypeScript)\nDESCRIPTION: Defines the options interface for the Vue I18n plugin, allowing configuration of global component installation. The `globalInstall` option determines whether components are automatically installed when the plugin is used. The default value is `true`, and setting to `false` allows manual installation via import syntax.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface I18nPluginOptions\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Data with useData in Vue Component\nDESCRIPTION: This snippet demonstrates how to access site, theme, and page data using the `useData` API within a Vue component's setup script. It imports `useData` from `vitepress` and retrieves site, theme, page, and frontmatter properties for use in the template.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/ssr/vitepress/api-examples.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\n\nconst { site, theme, page, frontmatter } = useData()\n</script>\n\n## Results\n\n### Theme Data\n\n<pre>{{ theme }}</pre>\n\n### Page Data\n\n<pre>{{ page }}</pre>\n\n### Page Frontmatter\n\n<pre>{{ frontmatter }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Serving Message Format Explorer (Yarn)\nDESCRIPTION: This command serves the built Intlify message format explorer using Yarn.  This is likely a simple static file server intended to preview a build.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/format-explorer/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn serve:explorer\n```\n\n----------------------------------------\n\nTITLE: Optional 'tag' Prop in i18n-t Component (Vue I18n v9+)\nDESCRIPTION: This snippet demonstrates rendering child elements without a root element in Vue I18n v9 and later's `<i18n-t>` component by omitting the `tag` prop. Requires Vue I18n v9 or later and Vue 3's Fragments. Input is a translation key ('message.greeting'). Output is the translated text wrapped in a <span> tag, rendered without a surrounding root element.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<i18n-t keypath=\"message.greeting\">\n  <span>hello!</span>\n</i18n-t>\n```\n\n----------------------------------------\n\nTITLE: Composer Interface Definition (TypeScript)\nDESCRIPTION: Defines the structure of the Composer interface for Vue 3 Composition API, specifying its generic types for messages, datetime formats, and number formats. It extends ComposerCustom and includes properties for managing locale, messages, and formatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Composer<Messages extends Record<string, any> = {}, DateTimeFormats extends Record<string, any> = {}, NumberFormats extends Record<string, any> = {}, OptionLocale = Locale, ResourceLocales = PickupLocales<NonNullable<Messages>> | PickupLocales<NonNullable<DateTimeFormats>> | PickupLocales<NonNullable<NumberFormats>>, Locales = Locale extends GeneratedLocale ? GeneratedLocale : OptionLocale extends Locale ? IsNever<ResourceLocales> extends true ? Locale : ResourceLocales : OptionLocale | ResourceLocales> extends ComposerCustom \n```\n\n----------------------------------------\n\nTITLE: Using Translation with Parameters - HTML\nDESCRIPTION: This HTML code demonstrates using the `$t` function in the template to translate keys with parameters. The first paragraph translates 'Hello {name}' with the name 'John'. The second translates 'The weather today is {condition}!' with the condition 'sunny'.  This demonstrates the use of parameters within translation keys and messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/fallback.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('Hello {name}', { name: 'John' }) }}</p>\n<p>{{ $t('The weather today is {condition}!', { condition: 'sunny' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Binding Context in Vue I18n Data Option (JavaScript)\nDESCRIPTION: This snippet demonstrates how to bind the component instance context to the `$t` function within the `data` option.  It ensures that `$t` correctly references the component's scope when used for internationalization. This is necessary due to a breaking change where the context binding was fixed.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    const $t = this.$t.bind(this)\n    return { msg: $t('msg') }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translate with Pluralization and Options - Vue I18n (Typescript)\nDESCRIPTION: This snippet presents the function signature for translating a message key with pluralization and additional options in Vue I18n. It returns a pluralized translation message based on the key, plural number, and translate options. `Key` is constrained to be a string, and `TranslateOptions` provide additional settings.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, plural: number, options: TranslateOptions<Locales>): string;\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue I18n with Locale Messages - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to initialize Vue I18n with locale messages for the 'en' (English) locale. It uses `createI18n` from the `vue-i18n` library to configure the i18n instance with a `contents` array containing title and paragraphs.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\n\nconst i18n = createI18n({\n  messages: {\n    en: {\n      contents: [\n        {\n          title: 'Title1',\n          // ...\n          paragraphs: [\n            // ...\n          ]\n        }\n      ]\n    }\n  }\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: FallbackLocale Type Definition (TypeScript)\nDESCRIPTION: Defines the type for specifying fallback locales. It can be a single locale, an array of locales, an object mapping locales to arrays of locales, or `false` to disable fallback. This type is used to configure how the library resolves messages when a translation is not found in the current locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FallbackLocale = Locale | Locale[] | {\n    [locale in string]: Locale[];\n} | false;\n```\n\n----------------------------------------\n\nTITLE: Translation Component with Slots HTML\nDESCRIPTION: Illustrates the usage of named slots with the `<i18n-t>` component. Slots provide a more readable and flexible way to interpolate components into localized messages. The example localizes a message with a flight change link and a time limit.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <!-- ... -->\n  <i18n-t keypath=\"info\" tag=\"p\">\n    <template v-slot:limit>\n      <span>{{ changeLimit }}</span>\n    </template>\n    <template v-slot:action>\n      <a :href=\"changeUrl\">{{ $t('change') }}</a>\n    </template>\n  </i18n-t>\n  <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: $d(value) Signature - Vue I18n\nDESCRIPTION: This signature of the `$d` method formats a datetime value (number or Date instance). If used in a reactive context, it will re-evaluate when the locale changes.  This operates on the global scope in Composition API mode.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n$d(value: number | Date): DateTimeFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: Initializing petite-vue-i18n with CDN\nDESCRIPTION: This snippet shows how to initialize petite-vue-i18n after including it via CDN. It demonstrates creating a Vue app and integrating the i18n instance into it.  The `createI18n` function from `PetiteVueI18n` is used to configure i18n.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/petite-vue-i18n/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\nconst { createApp } = Vue\nconst { createI18n } = PetiteVueI18n\n\nconst i18n = createI18n({\n  // something vue-i18n options here ...\n})\n\nconst app = createApp({\n  // something vue options here ...\n})\n\napp.use(i18n)\napp.mount('#app')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configure Vite Plugin for petite-vue-i18n\nDESCRIPTION: Configures the `@intlify/unplugin-vue-i18n` Vite plugin to use petite-vue-i18n. Sets the `module` option to 'petite-vue-i18n'.  Requires `@intlify/unplugin-vue-i18n` version 5.1.0 or later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n // vite.config.ts\n import { defineConfig } from 'vite'\n import { resolve, dirname } from 'node:path'\n import { fileURLToPath } from 'url'\n import VueI18nPlugin from '@intlify/unplugin-vue-i18n/vite'\n\n export default defineConfig({\n   /* ... */\n   plugins: [\n     /* ... */\n     VueI18nPlugin({\n       /* options */\n+      module: 'petite-vue-i18n',\n       // locale messages resource pre-compile option\n       include: resolve(dirname(fileURLToPath(import.meta.url)), './path/to/src/locales/**'),\n     }),\n   ],\n })\n```\n\n----------------------------------------\n\nTITLE: Template Output - HTML\nDESCRIPTION: This code shows the final HTML output after Vue I18n has performed the translation, falling back to English since the 'hello' key is not available in the 'ja' locale.  The template is rendered using Vue.js and the i18n instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/fallback.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>Hello, world!</p>\n```\n\n----------------------------------------\n\nTITLE: Translate with `$tc` and Locale in Vue I18n v9.x (Vue Template)\nDESCRIPTION: Demonstrates how to translate with a specified locale using `$tc` in Vue I18n v9.x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_30\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $tc('banana', 'ja') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Translate Options escapeParameter Property in TypeScript\nDESCRIPTION: Defines the `escapeParameter` property within the `TranslateOptions` interface.  This boolean property determines whether to escape parameters for list or named interpolation values during translation. Setting it to `true` will escape the parameters.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nescapeParameter?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Configure Message Resolver and Locale Fallbacker\nDESCRIPTION: Registers the message resolver and locale fallbacker from `@intlify/core-base` for petite-vue-i18n. This allows petite-vue-i18n to use the same resolution logic as vue-i18n. Requires `@intlify/core-base` to be installed.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport {\n  createI18n,\n  registerMessageResolver, // register the message resolver API\n  registerLocaleFallbacker, // register the locale fallbacker API\n} from 'petite-vue-i18n'\nimport {\n  resolveValue, // message resolver of vue-i18n which is used by default\n  fallbackWithLocaleChain // locale fallbacker of vue-i18n which is used by default\n} from '@intlify/core-base'\n\n// register message resolver of vue-i18n\nregisterMessageResolver(resolveValue)\n\n// register locale fallbacker of vue-i18n\nregisterLocaleFallbacker(fallbackWithLocaleChain)\n\n// some thing code ...\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining a DateTime Format - TypeScript\nDESCRIPTION: This snippet demonstrates how to define a DateTime format using TypeScript. It extends the `DefineDateTimeFormat` interface to add a custom 'short' format. This allows you to define and use specific date and time formatting options globally within your application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// type.d.ts (`.d.ts` file at your app)\nimport { DefineDateTimeFormat } from 'vue-i18n'\n\ndeclare module 'vue-i18n' {\n  export interface DefineDateTimeFormat {\n    short: {\n      hour: 'numeric'\n      timezone: string\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Interpolation Example - Vue I18n\nDESCRIPTION: Demonstrates list interpolation with Vue I18n. It shows how to define a locale message with numbered placeholders and then use the $t function to interpolate values from a JavaScript array. The code defines a message in the 'en' locale and uses the first element of the array (index 0) to replace the `{0}` placeholder.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    message: {\n      hello: '{0} world'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Locale Message - TypeScript\nDESCRIPTION: This snippet demonstrates how to define a Locale Message using TypeScript. It extends the `DefineLocaleMessage` interface to add custom properties like `title` and `menu`. This provides type safety when accessing translated messages within your application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// type.d.ts (`.d.ts` file at your app)\nimport { DefineLocaleMessage } from 'vue-i18n'\n\ndeclare module 'vue-i18n' {\n  export interface DefineLocaleMessage {\n    title: string\n    menu: {\n      login: string\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translate with Key and Named Values: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using a key and named interpolation values. The locale messages should contain a `{x}` token for each placeholder x. This signature allows you to inject dynamic values into the translated text based on key-value pairs.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, named: Record<string, unknown>): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: $d(value, key) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the overloaded `$d` function in Vue I18n, used for datetime formatting with a specific format key. It takes a number or Date and a format key as input, and returns the formatted value. The function uses the provided key to look up the datetime format to be used.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n$d(value: number | Date, key: string): DateTimeFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: Localizing DateTime with $d HTML\nDESCRIPTION: Demonstrates how to use the `$d` method in a Vue template to localize datetime values. The first example uses the 'short' format with the default locale, while the second specifies the 'long' format and the 'ja-JP' locale.  The `$d` method takes the datetime value, format name, and optional locale as parameters.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/datetime.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $d(new Date(), 'short') }}</p>\n<p>{{ $d(new Date(), 'long', 'ja-JP') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Custom Formatting with Scoped Slots in i18n-n\nDESCRIPTION: Demonstrates the use of scoped slots with the `i18n-n` component for custom formatting. The `integer` slot allows styling the integer part of the number. The slotProps provides access to different parts of the formatted number (e.g. integer, currency, fraction, group).\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/number.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<i18n-n tag=\"span\" :value=\"100\" format=\"currency\">\n  <template #integer=\"slotProps\">\n    <span style=\"font-weight: bold\">{{ slotProps.integer }}</span>\n  </template>\n</i18n-n>\n```\n\n----------------------------------------\n\nTITLE: Translate with `t` in Vue I18n v10+ (Legacy API)\nDESCRIPTION: This code shows the migration path for the previous snippet. The `tc` function is replaced with the `t` function, and a pluralization value is passed as a second argument.  This example shows how to migrate the base `tc` usage to `t`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.t('banana', 1))\n```\n\n----------------------------------------\n\nTITLE: Installing Vue I18n (pnpm)\nDESCRIPTION: This command installs the vue-i18n package as a development dependency using pnpm. This package provides the necessary tools for internationalizing the Vue 3 application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D vue-i18n\n```\n\n----------------------------------------\n\nTITLE: Fallback With Simple Function (TypeScript)\nDESCRIPTION: Implements a fallback locale function with a simpler fallback algorithm. It primarily returns the value specified in the `fallbackLocale` prop, which is then processed for further fallback within intlify. It takes a core context, a fallback locale configuration, and a starting locale, and returns an array of fallback locales.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function fallbackWithSimple<Message = string>(ctx: CoreContext<Message>, fallback: FallbackLocale, start: Locale): Locale[];\n```\n\n----------------------------------------\n\nTITLE: $d(value, args) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the overloaded `$d` function in Vue I18n, used for datetime formatting with arguments. It takes a number or Date and an arguments object as input, returning the formatted value. The arguments object contains custom options for date formatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n$d(value: number | Date, args: { [key: string]: string | boolean | number }): DateTimeFormatResult;\n```\n\n----------------------------------------\n\nTITLE: HTML Message Example - Vue I18n\nDESCRIPTION: Demonstrates how to include HTML within a translated message. It defines a message in the 'en' locale that contains a `<br>` tag.  It also cautions about potential XSS vulnerabilities when using HTML interpolation with untrusted content.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    message: {\n      hello: 'hello <br> world'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @intlify/unplugin-vue-i18n (pnpm)\nDESCRIPTION: This command installs the @intlify/unplugin-vue-i18n package as a development dependency using pnpm. This plugin optimizes Vue I18n performance by pre-compiling locale resources.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @intlify/unplugin-vue-i18n\n```\n\n----------------------------------------\n\nTITLE: LocaleOptions - locale (TypeScript)\nDESCRIPTION: Specifies the locale to be used for localization. It can be a locale string (e.g., 'en-US') or a `LocaleDetector` function to determine the locale dynamically.  This setting affects which translations are used within the application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nlocale?: Locales | LocaleDetector;\n```\n\n----------------------------------------\n\nTITLE: DefineCoreLocaleMessage Usage Example (TypeScript)\nDESCRIPTION: Demonstrates how to extend the `DefineCoreLocaleMessage` interface using module augmentation. This allows you to define the exact structure and types of your locale messages, providing compile-time type checking and improved developer experience.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// type.d.ts (`.d.ts` file at your app)\nimport { DefineCoreLocaleMessage } from '@intlify/core-base'\n\ndeclare module '@intlify/core-base' {\n  export interface DefineCoreLocaleMessage {\n    title: string\n    menu: {\n      login: string\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Pluralization Rule - JavaScript\nDESCRIPTION: Defines a custom pluralization rule for Slavic languages (Russian, Ukrainian, etc.). The function takes the choice, choicesLength, and the original rule as input and returns the index of the plural form to use.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/pluralization.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction customRule(choice, choicesLength, orgRule) {\n  if (choice === 0) {\n    return 0\n  }\n\n  const teen = choice > 10 && choice < 20\n  const endsWithOne = choice % 10 === 1\n  if (!teen && endsWithOne) {\n    return 1\n  }\n  if (!teen && choice % 10 >= 2 && choice % 10 <= 4) {\n    return 2\n  }\n\n  return choicesLength < 4 ? 2 : 3\n}\n```\n\n----------------------------------------\n\nTITLE: Vue I18n UMD Module Usage for Vue 2.6\nDESCRIPTION: This code snippet demonstrates how to use the Vue I18n UMD module in a browser environment for Vue 2.6, utilizing vue-i18n-bridge and VueCompositionAPI.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst { createApp } = VueCompositionAPI // exported UMD which is named by `VueCompositionAPI`\nconst { createI18n, useI18n } = VueI18nBridge // exported UMD which is named by `VueI18nBridge`\n\nVue.use(VueCompositionAPI)\nVue.use(VueI18n, { bridge: true })\n\nconst i18n = createI18n({\n  locale: 'ja',\n  messages: {\n    // ...\n  }\n}, VueI18n)\n\nconst app = createApp({}, {\n  // ...\n})\napp.use(i18n)\napp.mount('#app') // Vue app host container element\n```\n\n----------------------------------------\n\nTITLE: useI18n example - Vue I18n (Typescript/HTML)\nDESCRIPTION: This snippet demonstrates how to use the `useI18n` composable in a Vue component.  It showcases accessing the `t` (translate) function and `locale` reactive property. It uses both typescript and HTML.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useI18n } from 'vue-i18n'\n\nexport default {\n setup() {\n   const { t, locale } = useI18n({\n     locale: 'ja',\n     messages: {\n       en: {},\n       ja: {}\n     }\n   })\n   // Something to do ...\n\n   return { ..., t, locale }\n }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <form>\n    <label>{{ t('language') }}</label>\n    <select v-model=\"locale\">\n      <option value=\"en\">en</option>\n      <option value=\"ja\">ja</option>\n    </select>\n  </form>\n  <p>message: {{ t('hello') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Merging Locale Messages in Vue Component\nDESCRIPTION: This Vue component example demonstrates how to use `mergeLocaleMessage` from `useI18n` to merge common locale messages with component-specific messages. This enables sharing translations across the application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useI18n } from 'vue-i18n'\nimport commonMessages from './locales/common'\n\nconst { t, mergeLocaleMessage } = useI18n({\n  locale: 'en',\n  messages: {\n    en: {\n      hello: 'Hello!'\n    },\n    ja: {\n      hello: 'こんにちは！'\n    }\n  }\n})\n\nfor (const locale of ['en', 'ja']) {\n  mergeLocaleMessage(locale, commonMessages[locale])\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Vue I18n with Bundler and Compiler\nDESCRIPTION: This code snippet demonstrates how to import Vue I18n when using a bundler and requiring locale messages compilation (e.g., templates via inline JavaScript strings). It specifies the path to the `vue-i18n.esm-bundler.js` file within the `dist` directory.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/extra/dist.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createI18n } from \"vue-i18n/dist/vue-i18n.esm-bundler.js\";\n```\n\n----------------------------------------\n\nTITLE: Fallback With Locale Chain Function (TypeScript)\nDESCRIPTION: Implements a fallback locale function that uses a fallback chain algorithm. It takes a core context, a fallback locale configuration, and a starting locale, and returns an array of fallback locales to be used for message resolution. This is the default fallback strategy in Vue I18n.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function fallbackWithLocaleChain<Message = string>(ctx: CoreContext<Message>, fallback: FallbackLocale, start: Locale): Locale[];\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with Line Highlighting - JavaScript\nDESCRIPTION: Demonstrates syntax highlighting in VitePress using Shiki, with a specific line highlighted. This shows how to highlight a particular line (line 4 in this case) in a JavaScript code block within a Markdown file using the `{4}` annotation. The code defines a simple JavaScript object with a data function returning a message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/ssr/vitepress/markdown-examples.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data () {\n    return {\n      msg: 'Highlighted!'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translate with Key, List, and Pluralization: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using a key, a list of values for interpolation, and a pluralization number. The locale messages should contain a `{0}`, `{1}`, … for each placeholder in the list, and return a pluralized translation message based on the plural number.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, list: unknown[], plural: number): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Translate Options Interface Definition in TypeScript\nDESCRIPTION: Defines the `TranslateOptions` interface for Translation API. It extends the `LocaleOptions` interface, allowing for specifying locale-specific translation settings. It includes options such as `default`, `escapeParameter`, `fallbackWarn`, `list`, `missingWarn`, `named`, `plural`, and `resolvedMessage` to control translation behavior.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TranslateOptions<Locales = Locale> extends LocaleOptions<Locales> \n```\n\n----------------------------------------\n\nTITLE: Pluralization Template\nDESCRIPTION: This snippet demonstrates how to use message functions with pluralization within a Vue template using the `$t` function. It shows how to pass a numeric value to `$t` to determine the correct plural form, and how to use named parameters with pluralization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('car', 1) }}</p>\n<p>{{ $t('car', 2) }}</p>\n\n<p>{{ $t('apple', 0) }}</p>\n<p>{{ $t('apple', 1) }}</p>\n<p>{{ $t('apple', { count: 10 }, 10) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of i18n-n Component\nDESCRIPTION: Shows the basic usage of the `i18n-n` component in Vue templates. The `tag` prop specifies the HTML element to wrap the formatted number, `value` is the number to format, `format` specifies the number format, and `locale` sets the locale for formatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/number.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<i18n-n tag=\"span\" :value=\"100\"></i18n-n>\n<i18n-n tag=\"span\" :value=\"100\" format=\"currency\"></i18n-n>\n<i18n-n tag=\"span\" :value=\"100\" format=\"currency\" locale=\"ja-JP\"></i18n-n>\n```\n\n----------------------------------------\n\nTITLE: I18nScope Type Definition (TypeScript)\nDESCRIPTION: Defines the type for I18n scope, which can be 'local', 'parent', or 'global'. This scope affects how Vue I18n resolves messages and other internationalization data within Vue components. This type is used in `ComposerAdditionalOptions#useScope` and `useI18n`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type I18nScope = 'local' | 'parent' | 'global';\n```\n\n----------------------------------------\n\nTITLE: Register Locale Fallbacker Function in TypeScript\nDESCRIPTION: Defines the function `registerLocaleFallbacker` that allows registering a locale fallbacker. The locale fallbacker function is used to determine the fallback locale if a translation is not found in the current locale. The function takes a `LocaleFallbacker` function as an argument.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function registerLocaleFallbacker(fallbacker: LocaleFallbacker): void;\n```\n\n----------------------------------------\n\nTITLE: petite-vue-i18n Usage with CDN\nDESCRIPTION: Illustrates how to use petite-vue-i18n after installing it via CDN.  It creates a Vue app, configures i18n with `createI18n`, and mounts the app.  Dependencies: Vue and petite-vue-i18n must be included via script tags.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\nconst { createApp } = Vue\nconst { createI18n } = PetiteVueI18n\n\nconst i18n = createI18n({\n  // something vue-i18n options here ...\n})\n\nconst app = createApp({\n  // something vue options here ...\n})\n\napp.use(i18n)\napp.mount('#app')\n</script>\n```\n\n----------------------------------------\n\nTITLE: DateTimeOptions Interface Definition (TypeScript)\nDESCRIPTION: Defines the options interface for DateTime formatting API. This interface extends `Intl.DateTimeFormatOptions` and `LocaleOptions`, allowing specifying locale, format key, and fallback/missing warning behavior. The `part` property determines whether to use `Intl.DateTimeFormat#formatToParts`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DateTimeOptions<Key = string, Locales = Locale> extends Intl.DateTimeFormatOptions, LocaleOptions<Locales>\n\n```\n\n----------------------------------------\n\nTITLE: Named Interpolation with Default Message (t) - TypeScript\nDESCRIPTION: Translates a locale message with named interpolations, providing a default message if the translation is not found. It accepts a key, resource key, or number, an object with named values, and the default message as a string. The locale message should contain placeholders like `{x}`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, named: NamedValue, defaultMsg: string): string;\n```\n\n----------------------------------------\n\nTITLE: Set Missing Handler - Vue-i18n (TypeScript)\nDESCRIPTION: Sets a handler function to be called when a translation key is not found.  This handler allows you to implement custom logic, such as logging missing keys or providing a default translation. The handler can be set to `null` to disable it.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nsetMissingHandler(handler: MissingHandler | null): void;\n```\n\n----------------------------------------\n\nTITLE: Global import of Vue I18n\nDESCRIPTION: This code snippet shows how to import Vue and Vue I18n globally using CDN links from unpkg.  It allows you to use the libraries directly in your HTML without a build process. It assumes that Vue.js v3 is available globally.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/installation.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/vue@3\"></script>\n<script src=\"https://unpkg.com/vue-i18n@11\"></script>\n```\n\n----------------------------------------\n\nTITLE: Number Options part Property in TypeScript\nDESCRIPTION: Defines the `part` property within the `NumberOptions` interface. This boolean property determines whether to use the `Intl.NumberFormat#formatToParts` method. When set to `true`, the number formatting will be done using formatToParts, providing more granular control over the formatting process.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\npart?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Named Interpolation Usage in Template - Vue I18n\nDESCRIPTION: Illustrates how to use the `$t` function with named interpolation in a Vue template. The `$t` function is called with the message key 'message.hello' and an object containing the 'msg' property with the value 'hello'.  This results in the message being rendered with the provided value.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('message.hello', { msg: 'hello' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Translate with Key, Named Values, and Pluralization: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using a key, named interpolation values, and a pluralization number.  The locale messages should contain a `{x}` token for each placeholder x and return a pluralized translation message based on the plural number.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, named: NamedValue, plural: number): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Custom Modifiers Example - Vue I18n\nDESCRIPTION: Illustrates how to use a custom modifier ('snakeCase') with linked messages. The custom modifier will convert the linked message 'message.snake' to snake case. The message key is also wrapped in literal interpolations.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    message: {\n      snake: 'snake case',\n      custom_modifier: \"custom modifiers example: @.snakeCase:{'message.snake'}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rename i18n Component Tag (Vue I18n v8.x)\nDESCRIPTION: This snippet shows the usage of the `<i18n>` component in Vue I18n v8.x. It uses the `path` prop to specify the translation key. Input is a translation key ('message.greeting'). Output is the translated text. The component is renamed to `<i18n-t>` in Vue I18n v9 and later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<i18n path=\"message.greeting\" />\n```\n\n----------------------------------------\n\nTITLE: Specify Vue I18n Options in Component\nDESCRIPTION: Defines the `i18n` property within `ComponentCustomOptions` to allow setting Vue I18n options directly within a Vue component's options. This enables configuring i18n specifically for that component.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ni18n?: VueI18nOptions;\n```\n\n----------------------------------------\n\nTITLE: Locale Configuration\nDESCRIPTION: This typescript code defines the `locale` property of the Vue I18n configuration. This property specifies the locale of the localization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nlocale?: Locale;\n```\n\n----------------------------------------\n\nTITLE: Translate with locale and named V9\nDESCRIPTION: Demonstrates how to use the `$t` function with a locale and named parameter in Vue I18n v9.x to translate a message with named arguments.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('message.hello', 'ja', { name: 'dio' }) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configure unplugin-vue-i18n for Webpack\nDESCRIPTION: This snippet shows how to configure the `VueI18nPlugin` within a Webpack configuration file (`webpack.config.js`). It requires the `path` module and sets the `include` option to pre-compile locale messages from the defined directory. This configuration pre-compiles locale messages which enhances performance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/optimization.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webpack.config.js\nconst path = require('path')\nconst VueI18nPlugin = require('@intlify/unplugin-vue-i18n/webpack')\n\nmodule.exports = {\n  /* ... */\n  plugins: [\n    /* ... */\n    VueI18nPlugin({\n      /* options */\n      // locale messages resource pre-compile option\n      include: path.resolve(__dirname, './path/to/src/locales/**'),\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolve Locale Message Translation Function\nDESCRIPTION: This typescript code defines the function signature for resolving locale message translations within the Vue I18n library, as part of the `ComposerResolveLocaleMessageTranslation` interface. It takes a message (either a `MessageFunction` or a plain `VueMessageType`) and returns a translated string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n(message: MessageFunction<VueMessageType> | VueMessageType): string;\n```\n\n----------------------------------------\n\nTITLE: Translate with List Interpolation and Default Message - Vue I18n (Typescript)\nDESCRIPTION: This snippet details the function signature for translating a message key with list interpolation and a default message in Vue I18n. If no translation is found, the provided default message is returned. `Key` is a generic type constrained to string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, list: unknown[], defaultMsg: string): string;\n```\n\n----------------------------------------\n\nTITLE: Missing Handler Type Definition - Vue I18n (Typescript)\nDESCRIPTION: Defines the type for the `MissingHandler` function in Vue I18n. This handler is called when a translation is missing and allows for custom handling of missing translations. It receives the locale, key, component instance, and type as arguments.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MissingHandler = (locale: Locale, key: Path, instance?: ComponentInternalInstance, type?: string) => string | void;\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, locale, list) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, locale, list)` function for locale message translation. This signature is available in Legacy API mode only and supported until v9. It allows list interpolation and locale override.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, locale: Locale, list: unknown[]): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Arguments in $t - HTML\nDESCRIPTION: Demonstrates using predefined arguments like `{count}` and `{n}` in `$t` for pluralization.  It shows how to pass the numeric value directly and how to overwrite the predefined arguments using named interpolation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/pluralization.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('apple', 10, { named: { count: 10 } }) }}</p>\n<p>{{ $t('apple', 10) }}</p>\n\n<p>{{ $t('banana', 1, { named: { n: 1 } }) }}</p>\n<p>{{ $t('banana', 1) }}</p>\n<p>{{ $t('banana', 100, { named: { n: 'too many' } }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Basic Locale Messages Definition JavaScript\nDESCRIPTION: Defines basic locale messages for 'en' language, including terms and conditions phrases to demonstrate a cumbersome approach that Translation Component avoids. It's part of a larger example showcasing how to handle complex localized strings.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    term1: 'I Accept xxx\\'s',\n    term2: 'Terms of Service Agreement'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MessageCompilerContext Type Definition (TypeScript)\nDESCRIPTION: Defines the context passed to the message compiler, including error handling, cache key generation, and HTML message warnings. This context provides the compiler with the information it needs to process messages effectively.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MessageCompilerContext = Pick<CompileOptions, 'onError' | 'onCacheKey'> & {\n    warnHtmlMessage?: boolean;\n    key: string;\n    locale: Locale;\n};\n```\n\n----------------------------------------\n\nTITLE: Pluralization\nDESCRIPTION: This snippet demonstrates how to use pluralization within a message function using the `plural` function from the message context. It shows how to define different plural forms and select the appropriate form based on a numeric value.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    car: ({ plural }) => plural(['car', 'cars']),\n    apple: ({ plural, named }) =>\n      plural([\n        'no apples',\n        'one apple',\n        `${named('count')} apples`\n      ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Interpolation Usage in Template - Vue I18n\nDESCRIPTION: Illustrates how to use the `$t` function with list interpolation in a Vue template. The `$t` function is called with the message key 'message.hello' and an array containing the string 'hello'. This will replace `{0}` with the value from the array at index 0.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('message.hello', ['hello']) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Message Function Type Definition in TypeScript\nDESCRIPTION: Defines the type for a message function in Vue I18n, which can be either a callable function or an internal function. This function is used to handle message translation within the internationalization process. It takes a generic type T, defaulting to string, to represent the message type.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MessageFunction<T = string> = MessageFunctionCallable | MessageFunctionInternal<T>;\n```\n\n----------------------------------------\n\nTITLE: Updating app.vue for I18n\nDESCRIPTION: This Vue component demonstrates how to use Vue I18n within a Nuxt 3 application. It retrieves a translated string using the `$t` function, passing a key ('hello') and a parameter object with a name.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n   <NuxtWelcome /> // [!code --]\n   <h1>{{ $t('hello', { name: 'vue-i18n' }) }}</h1> // [!code ++]\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Translate with Key: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using only a key. This overload is used for simple lookups. It leverages the reactive context for locale changes and prioritizes local scope if i18n component options are specified.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Named Value Type Definition in TypeScript\nDESCRIPTION: Defines the type for named values used in Vue I18n. This type represents an object with string keys and unknown values, combined with a generic type T to allow for custom named value structures. It's used for named interpolation within translations.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NamedValue<T = {}> = T & Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Number Formatting $n(value) - TypeScript\nDESCRIPTION: Formats a number value using the default locale's number formatting. This function is reactive and will re-evaluate when the locale changes. In Composition API mode, $n is injected via `app.config.globalProperties` and operates in the global scope.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number): NumberFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: $rt(message, named, options) Signature - Vue I18n\nDESCRIPTION: This overloaded signature of the `$rt` method resolves a locale message translation for named interpolations. It requires a message (MessageFunction or VueMessageType), a named value, and optional translation options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n$rt(message: MessageFunction<VueMessageType> | VueMessageType, named: NamedValue, options?: TranslationOptions): string;\n```\n\n----------------------------------------\n\nTITLE: LocaleFallbacker Type Definition (TypeScript)\nDESCRIPTION: Defines the type for a locale fallbacker function. It takes a core context, a fallback locale configuration, and a starting locale, and returns an array of fallback locales. This type is used to configure the fallback strategy for message resolution.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LocaleFallbacker = <Message = string>(ctx: CoreContext<Message>, fallback: FallbackLocale, start: Locale) => Locale[];\n```\n\n----------------------------------------\n\nTITLE: LocaleMessageDictionary Type Definition (TypeScript)\nDESCRIPTION: Defines the type for a locale message dictionary, where the keys are properties of a generic type `T` and the values are of type `LocaleMessageType<T[K], Message>`. This allows for strongly-typed locale messages with specific structures.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LocaleMessageDictionary<T, Message = string> = {\n    [K in keyof T]: LocaleMessageType<T[K], Message>;\n};\n```\n\n----------------------------------------\n\nTITLE: Locale Selection with Implicit Injection\nDESCRIPTION: This demonstrates changing the global locale using the implicitly injected `$i18n.locale` property within a Vue template.  The `v-model` directive is bound to `$i18n.locale`, allowing the locale to be changed via a select dropdown.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<select v-model=\"$i18n.locale\">\n  <option value=\"en\">en</option>\n  <option value=\"ja\">ja</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Changing Global Locale in Vue using Composition API\nDESCRIPTION: This snippet shows how to change the global locale in a Vue component using the Composition API and `<script setup>`. It utilizes `useI18n` with `useScope: 'global'` to access the global Composer instance and update the `locale` property.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/composition.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { t, locale } = useI18n({ useScope: 'global' })\n\nlocale.value = 'en' // change!\n</script>\n```\n\n----------------------------------------\n\nTITLE: Number Formatting Signature with Value, Key, and Args (TypeScript)\nDESCRIPTION: Defines the signature for the $n method that accepts a number value, a key, and an argument object, returning a NumberFormatResult. The key specifies the format, and the arguments provide dynamic values.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, key: string, args: { [key: string]: string | boolean | number }): NumberFormatResult\n```\n\n----------------------------------------\n\nTITLE: Translate with Default Message - Vue I18n (Typescript)\nDESCRIPTION: This snippet shows the function signature for translating a message key with a default message in Vue I18n. If no translation is found for the key, the provided default message is returned. `Key` is a generic type constrained to string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys | number, defaultMsg: string): string;\n```\n\n----------------------------------------\n\nTITLE: Rename 'path' Prop to 'keypath' (Vue I18n v9+)\nDESCRIPTION: This snippet shows the usage of the `keypath` prop with the `<i18n-t>` component in Vue I18n v9 and later. It defines the path to the translation key. Input is a translation key ('message.greeting'). Output is the translated text.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<i18n-t keypath=\"message.greeting\" />\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, list, defaultMsg) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, list, defaultMsg)` function for translation with list interpolation and a default message. Available in Composition API mode until v9, and Legacy API mode v10 or later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, list: unknown[], defaultMsg: string): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Translate with Key and Default Message: Vue I18n (TypeScript)\nDESCRIPTION: Translates a locale message using a key and a default message. If no translation is found for the key, the default message is returned. Options can be used to suppress warnings when translations are missing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, defaultMsg: string): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, plural, options) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, plural, options)` function for locale message translation with pluralization and translation options. Available in Composition API mode until v9, and Legacy API mode v10 or later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, plural: number, options: TranslateOptions): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Rails i18n Format Output - Vue I18n\nDESCRIPTION: Shows the expected HTML output after using Rails i18n format.  The placeholder `%{msg}` in the original message has been replaced with the value 'hello', resulting in the final output 'hello world'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<p>hello world</p>\n```\n\n----------------------------------------\n\nTITLE: Resolve Value Function in TypeScript\nDESCRIPTION: Defines the function `resolveValue` that resolves messages. This resolver handles messages with a hierarchical structure.  It takes an object and a path as input and returns the resolved value. This resolver is used as the default in VueI18n.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function resolveValue(obj: unknown, path: Path): PathValue;\n```\n\n----------------------------------------\n\nTITLE: Translate with `tc`, Choice, List in Vue I18n v9.x\nDESCRIPTION: Demonstrates the use of `tc` with a choice number and a list in Vue I18n v9.x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.tc('banana', 2, ['dio']))\n```\n\n----------------------------------------\n\nTITLE: Escape Parameter Property (TypeScript)\nDESCRIPTION: Defines the `escapeParameter` property within the Composer interface.  A boolean determining if interpolation parameters should be escaped before translation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nescapeParameter: boolean;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: This command installs the project's dependencies using NPM. It fetches and installs all the packages listed in the project's package.json file.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/frameworks/nuxt3/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: LinkedModifiers Type Definition (TypeScript)\nDESCRIPTION: Defines the type for linked modifiers, which are used to modify linked messages. This type represents a record where keys are strings and values are of type `LinkedModify<T>`, allowing for customization of linked message resolution.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LinkedModifiers<T = string> = {\n    [key: string]: LinkedModify<T>;\n};\n```\n\n----------------------------------------\n\nTITLE: Define VueMessageType Type\nDESCRIPTION: Defines the `VueMessageType` type, which represents the possible types for messages within the Vue I18n context. It can be a string, a ResourceNode, or a VNode, providing flexibility in message representation. This type is used to ensure that the messages passed to the i18n system are of the correct format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nexport type VueMessageType = string | ResourceNode | VNode;\n```\n\n----------------------------------------\n\nTITLE: TranslationProps Interface Definition (TypeScript)\nDESCRIPTION: Defines the properties for the Translation component, extending BaseFormatProps and including a `keypath` property for specifying the locale message key and an optional `plural` property for pluralization. It specifies the key and plural number used for the translation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/component.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TranslationProps extends BaseFormatProps\n```\n\n----------------------------------------\n\nTITLE: Message Resolver Type Definition in TypeScript\nDESCRIPTION: Defines the type for a message resolver function in Vue I18n. This function takes an object and a path as input and returns a path value. It is used to resolve messages within a hierarchical structure, allowing for dynamic message retrieval.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MessageResolver = (obj: unknown, path: Path) => PathValue;\n```\n\n----------------------------------------\n\nTITLE: Number Formatting Signature with Value, Key, Locale, and Args (TypeScript)\nDESCRIPTION: Defines the signature for the $n method that accepts a number value, a key, a locale, and an argument object, returning a NumberFormatResult.  It allows full control over formatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, key: string, locale: Locale, args: { [key: string]: string | boolean | number }): NumberFormatResult\n```\n\n----------------------------------------\n\nTITLE: Translate Options list Property in TypeScript\nDESCRIPTION: Defines the `list` property within the `TranslateOptions` interface.  It's an optional array of `unknown` type used for list interpolation in translations. This array provides the values to be inserted into the translated string at the specified positions.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nlist?: unknown[];\n```\n\n----------------------------------------\n\nTITLE: NumberFormat Component Type Definition (TypeScript)\nDESCRIPTION: Defines the type for the NumberFormat component, specifying its props including VNodeProps, NumberFormatProps, and BaseFormatProps. It's used for formatting number values based on the specified locale and format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/component.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nNumberFormat: {\n    new (): {\n        $props: VNodeProps & NumberFormatProps & BaseFormatProps;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, locale, named) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, locale, named)` function for locale message translation. Available in Legacy API mode only until v9, allows named interpolation with locale override.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, locale: Locale, named: object): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, list, options) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, list, options)` function for translation with list interpolation and options. Available in Composition API mode until v9, and Legacy API mode v10 or later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, list: unknown[], options: TranslateOptions): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, named, plural) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, named, plural)` function for translation with named interpolation and pluralization. Available in Composition API mode until v9, and Legacy API mode v10 or later.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, named: NamedValue, plural: number): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Rename 'path' Prop to 'keypath' (Vue I18n v8.x)\nDESCRIPTION: This snippet shows the usage of the `path` prop with the `<i18n>` component in Vue I18n v8.x. It defines the path to the translation key. Input is a translation key ('message.greeting'). Output is the translated text.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<i18n path=\"message.greeting\" />\n```\n\n----------------------------------------\n\nTITLE: Using `createI18n` in Vue I18n v9 - JavaScript\nDESCRIPTION: This snippet showcases the usage of `createI18n()` in Vue I18n v9 or later. It reflects the shift from Vue I18n being a class to a set of functions, aligning with Vue 3's API architecture.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'vue-i18n'\n\nconst i18n = createI18n({\n  // ...\n})\n\nconst app = createApp({\n  // ...\n})\napp.use(i18n)\n```\n\n----------------------------------------\n\nTITLE: Multiple Fallback Locales - Javascript\nDESCRIPTION: This JavaScript code shows how to specify an array of fallback locales. If a translation is not found in the primary locale, Vue I18n will try each locale in the array in order until a translation is found.  This allows for a prioritized fallback mechanism.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/fallback.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfallbackLocale: [ 'fr', 'en' ],\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue I18n with Number Formats\nDESCRIPTION: Initializes the Vue I18n instance with the defined number formats. This makes the formats available for use with the `$n` function and `i18n-n` component, allowing you to format numbers in your Vue templates based on the specified formats.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/number.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = createI18n({\n  numberFormats\n})\n```\n\n----------------------------------------\n\nTITLE: CDN Script Inclusion for petite-vue-i18n\nDESCRIPTION: This snippet demonstrates how to include petite-vue-i18n in your project using CDN links.  It requires Vue to be included before petite-vue-i18n. The scripts should be placed at the end of the <head> section.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/petite-vue-i18n/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/vue@next\"></script>\n<script src=\"https://unpkg.com/petite-vue-i18n\"></script>\n```\n\n----------------------------------------\n\nTITLE: DateTimeOptions - fallbackWarn (TypeScript)\nDESCRIPTION: Specifies whether to resolve on format keys when the current language lacks a formatting for a given key. If set to `true`, it allows the system to attempt a fallback to other available formats or default values.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackWarn?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Linked Messages in Vue I18n v8.x - JavaScript\nDESCRIPTION: This snippet demonstrates the syntax for linked messages in Vue I18n v8.x, which required brackets `()` to distinguish key references. This syntax is no longer needed in v9.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    message: {\n      dio: 'DIO',\n      linked: 'There\\'s a reason, you lost, @:(message.dio).'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translate Options named Property in TypeScript\nDESCRIPTION: Defines the `named` property within the `TranslateOptions` interface.  It's an optional `NamedValue` object used for named interpolation in translations. This object provides the values to be inserted into the translated string using named placeholders.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nnamed?: NamedValue;\n```\n\n----------------------------------------\n\nTITLE: Named Interpolation Template\nDESCRIPTION: This snippet demonstrates how to pass named parameters to `$t` when using a message function that utilizes named interpolation.  It showcases how to specify the parameters as an object and how they are accessed within the message function.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('greeting', { name: 'DIO' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: MessageContext - plural (TypeScript)\nDESCRIPTION: Resolves a message with a plural index, using the messages provided in the argument.  This is used to handle pluralization rules for different languages. The resolved message will be selected based on the pluralization rules of the current locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nplural(messages: T[]): T;\n```\n\n----------------------------------------\n\nTITLE: Install unplugin-vue-i18n with yarn\nDESCRIPTION: This command installs the `@intlify/unplugin-vue-i18n` package as a development dependency using yarn. This plugin simplifies the integration of Vue I18n with build tools like Vite and Webpack.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/optimization.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @intlify/unplugin-vue-i18n -D\n```\n\n----------------------------------------\n\nTITLE: Built-in Modifiers Example - Vue I18n\nDESCRIPTION: Demonstrates the use of built-in modifiers for linked messages in Vue I18n.  Specifically, it shows how to use the `.lower` modifier to lowercase the linked message 'message.homeAddress' when displaying the 'message.missingHomeAddress'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    message: {\n      homeAddress: 'Home address',\n      missingHomeAddress: 'Please provide @.lower:message.homeAddress'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using `datetimeFormats` in Vue I18n v9 - JavaScript\nDESCRIPTION: This snippet showcases the corrected `datetimeFormats` property within the `createI18n` configuration object in Vue I18n v9. This property is used to define custom date and time formatting options for different locales.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = createI18n({\n  // ...\n  datetimeFormats: {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Linked Messages\nDESCRIPTION: This snippet demonstrates how to use linked messages within a message function using the `linked` function from the message context. It shows how to reference other messages within the `messages` object by their keys.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    the_world: 'the world',\n    dio: 'DIO:',\n    linked: ({ linked }) => `${linked('message.dio')} ${linked('message.the_world')} !!!!`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: $rt(message, plural, options) Signature - Vue I18n\nDESCRIPTION: This overloaded signature of the `$rt` method resolves a locale message translation for plurals. It requires a message (MessageFunction or VueMessageType), a plural number, and optional translation options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n$rt(message: MessageFunction<VueMessageType> | VueMessageType, plural: number, options?: TranslationOptions): string;\n```\n\n----------------------------------------\n\nTITLE: Get Number Format Method (TypeScript)\nDESCRIPTION: Defines the `getNumberFormat` method within the Composer interface. Retrieves a number format from the numberFormats.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ngetNumberFormat<NumberSchema extends Record<string, any> = never, LocaleSchema extends string = string, Locale extends PickupLocales<NonNullable<NumberFormats>> = PickupLocales<NonNullable<NumberFormats>>, Return = IsNever<NumberSchema> extends true ? IsEmptyObject<NumberFormats> extends true ? RemoveIndexSignature<{\n        [K in keyof DefineNumberFormat]: DefineNumberFormat[K];\n    }> : NonNullable<NumberFormats>[Locale] : NumberSchema>(locale: LocaleSchema | Locale): Return;\n```\n\n----------------------------------------\n\nTITLE: Basic Message Function\nDESCRIPTION: This snippet demonstrates a basic message function that returns a simple greeting. It showcases how to define a message function within the `messages` object and access it using `$t` in a Vue template. The message function accepts a context object.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    greeting: (ctx) => 'hello!'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Message Output - Vue I18n\nDESCRIPTION: Demonstrates the expected HTML output of using the `v-html` directive to display a message with HTML. The `<br>` tag will render a line break.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<p>hello\n<!--<br> exists but is rendered as html and not a string-->\nworld</p>\n```\n\n----------------------------------------\n\nTITLE: Basic Locale Template HTML\nDESCRIPTION: Illustrates a cumbersome HTML template using `$t` to localize terms separately. The goal is to show the problem that the Translation component aims to solve which is to avoid separate localization for parts of sentences.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('term1') }}<a href=\"/term\">{{ $t('term2') }}</a></p>\n```\n\n----------------------------------------\n\nTITLE: $te(key, locale) in Vue I18n\nDESCRIPTION: This code snippet represents the signature of the `$te` function in Vue I18n, used to check if a translation message exists for a given key and locale.  It takes a key and an optional locale as parameters. It returns a boolean indicating whether the message exists. The locale, if provided, overrides the global or local scope's locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n$te(key: Key, locale?: Locale): boolean;\n```\n\n----------------------------------------\n\nTITLE: Linked Messages in Vue I18n v9 - JavaScript\nDESCRIPTION: This snippet demonstrates the updated syntax for linked messages in Vue I18n v9 and later.  Brackets are no longer required due to improvements in the message format compiler.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    message: {\n      dio: 'DIO',\n      linked: \"There\\'s a reason, you lost, @:{'message.dio'}.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VueI18n n property (Legacy API)\nDESCRIPTION: Defines the n property for number formatting using VueI18nNumberFormatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nn: VueI18nNumberFormatting<NumberFormats, Locales, RemoveIndexSignature<{\n        [K in keyof DefineNumberFormat]: DefineNumberFormat[K];\n    }>>;\n```\n\n----------------------------------------\n\nTITLE: Linked Messages Template\nDESCRIPTION: This snippet shows how to use a message function with linked messages within a Vue template. It uses the `$t` function to access the 'linked' message, which in turn references other messages defined in the `messages` object.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/function.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('linked') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Installing vue-i18n-loader with pnpm\nDESCRIPTION: This command installs the `@intlify/vue-i18n-loader` package as a development dependency using pnpm. This loader is required for using Vue I18n `<i18n>` custom blocks within Quasar CLI projects.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/sfc.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @intlify/vue-i18n-loader\n```\n\n----------------------------------------\n\nTITLE: Rails i18n Format Usage in Template - Vue I18n\nDESCRIPTION: Illustrates how to use the `$t` function with the Rails i18n format in a Vue template. The `$t` function is called with the message key 'message.hello' and an object containing the 'msg' property with the value 'hello'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('message.hello', { msg: 'hello' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Translate with `t`, List, Plural in Vue I18n v10+\nDESCRIPTION: Shows how to replace the `tc` function with `t` when using a list and choice. Requires adjustment of parameter order.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.t('banana', ['dio'], 2))\n```\n\n----------------------------------------\n\nTITLE: Installing vue-i18n-loader with yarn\nDESCRIPTION: This command installs the `@intlify/vue-i18n-loader` package as a development dependency using yarn. This loader is required for using Vue I18n `<i18n>` custom blocks within Quasar CLI projects.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/sfc.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @intlify/vue-i18n-loader -D\n```\n\n----------------------------------------\n\nTITLE: Get Datetime Format Method (TypeScript)\nDESCRIPTION: Defines the `getDateTimeFormat` method within the Composer interface. Retrieves the datetime format from the datetimeFormats.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ngetDateTimeFormat<DateTimeSchema extends Record<string, any> = never, LocaleSchema extends string = string, Locale extends PickupLocales<NonNullable<DateTimeFormats>> = PickupLocales<NonNullable<DateTimeFormats>>, Return = IsNever<DateTimeSchema> extends true ? IsEmptyObject<DateTimeFormats> extends true ? RemoveIndexSignature<{\n        [K in keyof DefineDateTimeFormat]: DefineDateTimeFormat[K];\n    }> : NonNullable<DateTimeFormats>[Locale] : DateTimeSchema>(locale: LocaleSchema | Locale): Return;\n```\n\n----------------------------------------\n\nTITLE: Rails i18n Format Example - Vue I18n\nDESCRIPTION: Demonstrates the use of the Rails i18n format in Vue I18n. This example defines a locale message with a placeholder prefixed with `%` and then uses the $t function to interpolate the value from a JavaScript object.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    message: {\n      hello: '%{msg} world'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translate Options resolvedMessage Property in TypeScript\nDESCRIPTION: Defines the `resolvedMessage` property within the `TranslateOptions` interface.  This boolean property indicates whether the message has already been resolved.  This is typically used internally to avoid double-resolution of messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nresolvedMessage?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Number Options Key Property in TypeScript\nDESCRIPTION: Defines the `key` property within the `NumberOptions` interface. This string property specifies the target format key for number formatting. It allows developers to select a specific number format from the available locale-specific formats.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nkey?: Key;\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Messages with Pluralization - JavaScript\nDESCRIPTION: Defines locale messages with pluralization support using pipe separators to define different plural forms. The example shows how to define plural forms for 'car' and 'apple' in English.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/pluralization.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    car: 'car | cars',\n    apple: 'no apples | one apple | {count} apples'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Locale Messages with Implicit Arguments - JavaScript\nDESCRIPTION: Defines locale messages with predefined implicit arguments `{count}` and `{n}` for pluralization. These arguments can be accessed within the locale messages to display the numeric value used for pluralization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/pluralization.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = {\n  en: {\n    apple: 'no apples | one apple | {count} apples',\n    banana: 'no bananas | {n} banana | {n} bananas'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Number Formatting Signature with Value and Args (TypeScript)\nDESCRIPTION: Defines the signature for the $n method that accepts a number value and an argument object, returning a NumberFormatResult. The arguments allow for dynamic formatting options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, args: { [key: string]: string | boolean | number }): NumberFormatResult;\n```\n\n----------------------------------------\n\nTITLE: $te(key, locale) Signature - Vue I18n\nDESCRIPTION: This signature of the `$te` method checks if a translation message exists for a given key and locale.  The locale is optional and overrides the global or local scope locale if provided.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n$te(key: Key, locale?: Locale): boolean;\n```\n\n----------------------------------------\n\nTITLE: Remove 'preserve' Modifier in v-t Directive (Vue I18n v8.x)\nDESCRIPTION: This snippet demonstrates the usage of the `preserve` modifier in Vue I18n v8.x's `v-t` directive.  This modifier was used to preserve the content within the element. This modifier is removed in Vue I18n v9 and later. There are no dependencies. Input is a translation key ('hello'). Output is the translated text within the <p> tag.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<p v-t.preserve=\"'hello'\"></p>\n```\n\n----------------------------------------\n\nTITLE: VERSION Variable Definition (TypeScript)\nDESCRIPTION: Defines a constant `VERSION` that holds the version of Vue I18n, in Semver format, matching the `version` field in the `package.json` file. This can be used to check the installed version of the library.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nVERSION: string\n```\n\n----------------------------------------\n\nTITLE: Installing Vue I18n with npm\nDESCRIPTION: This command installs the Vue I18n library version 11 using npm. It adds Vue I18n as a dependency to your existing Vue project, allowing you to use its internationalization features.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vue-i18n@11\n```\n\n----------------------------------------\n\nTITLE: Defining LocaleMessageObject type in Vue I18n (Legacy API)\nDESCRIPTION: Defines the type LocaleMessageObject as a dictionary of messages.  This type is part of the legacy API and is deprecated for removal in vue-i18n v12.  It allows specifying a custom message type.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LocaleMessageObject<Message = string> = LocaleMessageDictionary<Message>;\n```\n\n----------------------------------------\n\nTITLE: $rt(message) Signature - Vue I18n\nDESCRIPTION: This signature of the `$rt` method resolves a locale message translation. If used in a reactive context, it will re-evaluate when the locale changes.  The message can be either a MessageFunction or a VueMessageType.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n$rt(message: MessageFunction<VueMessageType> | VueMessageType): string;\n```\n\n----------------------------------------\n\nTITLE: Number Formatting Signature with Value and Key (TypeScript)\nDESCRIPTION: Defines the signature for the $n method that accepts a number value and a key, returning a NumberFormatResult or a string. The key is used to select a specific number format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, key: string): NumberFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: CDN Installation of petite-vue-i18n\nDESCRIPTION: Shows how to install petite-vue-i18n via CDN by adding script tags to the HTML head. Includes Vue and petite-vue-i18n scripts.  This method is suitable for projects without a bundler.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/vue@next\"></script>\n<script src=\"https://unpkg.com/petite-vue-i18n\"></script>\n```\n\n----------------------------------------\n\nTITLE: MessageContext Interface Definition (TypeScript)\nDESCRIPTION: Defines the message context that will be used in the message function. It includes the message type, values, and methods for resolving linked messages, lists, and named values, and pluralization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MessageContext<T = string>\n\n```\n\n----------------------------------------\n\nTITLE: Fallback Warning Configuration\nDESCRIPTION: This typescript code defines the `fallbackWarn` property of the Vue I18n configuration. This property configures whether or not to suppress warnings when falling back to either `fallbackLocale` or root.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackWarn?: boolean | RegExp;\n```\n\n----------------------------------------\n\nTITLE: Defining PluralizationRulesMap type in Vue I18n (Legacy API)\nDESCRIPTION: Defines the type PluralizationRulesMap as a map of locale strings to PluralizationRule functions.  This type is part of the legacy API and is deprecated for removal in vue-i18n v12.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PluralizationRulesMap = {\n    [locale: string]: PluralizationRule;\n};\n```\n\n----------------------------------------\n\nTITLE: Number Formatting $n(value, key, args) - TypeScript\nDESCRIPTION: Formats a number value using a specified number format key and arguments. This overloaded `$n` allows specifying formatting arguments alongside a format key.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, key: string, args: { [key: string]: string | boolean | number }): NumberFormatResult\n```\n\n----------------------------------------\n\nTITLE: $tm(key) Signature - Vue I18n\nDESCRIPTION: This signature of the `$tm` method retrieves locale messages for a given key. It prioritizes local scope messages if i18n component options are specified, otherwise it retrieves global scope messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n$tm(key: Key): LocaleMessageValue<VueMessageType> | {}\n```\n\n----------------------------------------\n\nTITLE: App.vue template\nDESCRIPTION: This template shows how to use the registered web components within a Vue application. The `i18n-host` component wraps the `hello-i18n` component, enabling i18n support for the latter.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/wc.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <i18n-host>\n    <h1>Vue I18n in Web component</h1>\n    <hello-i18n />\n  </i18n-host>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Translation Component Output HTML\nDESCRIPTION: Shows the expected HTML output after the Translation component has processed the template and locale messages.  It displays the interpolated text with the specified `<a>` tag.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/component.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <!-- ... -->\n  <label for=\"tos\">\n    I accept xxx <a href=\"/term\" target=\"_blank\">Term of Service</a>.\n  </label>\n  <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: $t(key, named, defaultMsg) Signature - Vue I18n\nDESCRIPTION: This signature of the `$t` method translates a locale message using a key, named interpolation values, and a default message to return if no translation is found. It is supported for Composition API mode until v9, and v10 or later can also be used in Legacy API mode.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, named: NamedValue, defaultMsg: string): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Import Vue I18n Bridge with Compiler (Bundler)\nDESCRIPTION: This snippet demonstrates how to import `vue-i18n-bridge` with the runtime compiler included when using a bundler like webpack, rollup, or parcel. This is necessary if you want to compile locale messages at runtime (e.g., from inline JavaScript strings).\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createI18n } from \"vue-i18n-bridge/dist/vue-i18n-bridge.esm-bundler.js\";\n```\n\n----------------------------------------\n\nTITLE: VueI18n availableLocales property (Legacy API)\nDESCRIPTION: Defines the availableLocales property which provides the list of available locales in `messages` in lexical order.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly availableLocales: Composition['availableLocales'];\n```\n\n----------------------------------------\n\nTITLE: Hello World Script Example\nDESCRIPTION: JavaScript code showing how to use petite-vue-i18n to display a translated 'hello world' message. It defines locale messages for English and Japanese, creates a Vue app, and mounts it.  It uses the composition API with `useI18n`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createApp } = Vue\nconst { createI18n, useI18n } = PetiteVueI18n\n// or for ES modules\n// import { createApp } from 'vue'\n// import { createI18n } from 'petite-vue-i18n'\n\nconst i18n = createI18n({\n  locale: 'en',\n  messages: {\n    en: {\n      'hello world': 'Hello world!'\n    },\n    ja: {\n      'hello world': 'こんにちは、世界！'\n    }\n  }\n})\n\n// define App component\nconst App = {\n  setup() {\n    const { t } = useI18n()\n    return { t }\n  }\n}\n\nconst app = createApp(App)\n\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Installing Vue I18n (yarn)\nDESCRIPTION: This command installs the vue-i18n package as a development dependency using yarn. This package provides the necessary tools for internationalizing the Vue 3 application.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add vue-i18n -D\n```\n\n----------------------------------------\n\nTITLE: Translate with locale and list V9 (TS)\nDESCRIPTION: Demonstrates how to use the `t` function with a locale and list parameter in Vue I18n v9.x within a TypeScript context to translate a message with arguments.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\n\nconsole.log(i18n.global.t('message.hello', 'ja', ['dio']))\n```\n\n----------------------------------------\n\nTITLE: Number Formatting $n(value, args) - TypeScript\nDESCRIPTION: Formats a number value using provided arguments. This overloaded `$n` function accepts a number value and an object containing argument values for formatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, args: { [key: string]: string | boolean | number }): NumberFormatResult;\n```\n\n----------------------------------------\n\nTITLE: Renaming `dateTimeFormats` to `datetimeFormats` - JavaScript\nDESCRIPTION: This snippet demonstrates the renaming of the `dateTimeFormats` option to `datetimeFormats` when configuring Vue I18n. This change affects how date and time formats are specified in the i18n configuration.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18n = new VueI18n({\n  // ...\n  dateTimeFormats: {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: MessageCompiler Type Definition\nDESCRIPTION: TypeScript type definition for the MessageCompiler interface, which is used to create custom message compilers for Vue I18n. It defines the function signature and types for the message compiler.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/format.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type MessageCompiler<Message = string, MessageSource = string | ResourceNode> = (message: MessageSource, context: MessageCompilerContext) => MessageFunction<Message>;\n```\n\n----------------------------------------\n\nTITLE: Number Formatting Signature with Value and Options (TypeScript)\nDESCRIPTION: Defines the signature for the $n method that accepts a number value and a NumberOptions object, returning a string. The NumberOptions provide detailed formatting configuration.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/v11/injection.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n$n(value: number, options: NumberOptions): string;\n```\n\n----------------------------------------\n\nTITLE: Translate with `$tc`, Choice, Locale in Vue I18n v9.x (Vue Template)\nDESCRIPTION: Demonstrates using `$tc` with choice number and locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_38\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $tc('banana', 2, 'ja') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Translate with `tc` and Locale in Vue I18n v9.x\nDESCRIPTION: This snippet shows how to use `tc` with a specified locale in Vue I18n v9.x. The second argument of `tc` is the locale string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.tc('banana', 'ja'))\n```\n\n----------------------------------------\n\nTITLE: Translate with named and options V10\nDESCRIPTION: Demonstrates how to use the `$t` function with named arguments and options for locale parameter in Vue I18n v10 or later to translate a message with named arguments.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('message.hello', { name: 'dio' }, { locale: 'ja' }) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Translate with `t`, Plural, Locale in Vue I18n v10+\nDESCRIPTION: Migrating from `tc` with a choice and locale, to using `t` with plural and the locale in options.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.t('banana', 2, { locale: 'ja' }))\n```\n\n----------------------------------------\n\nTITLE: Installing unplugin-vue-i18n with pnpm\nDESCRIPTION: This command installs the `@intlify/unplugin-vue-i18n` package as a development dependency using pnpm. This plugin is required for using Vue I18n with Vite or Webpack.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/sfc.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @intlify/unplugin-vue-i18n\n```\n\n----------------------------------------\n\nTITLE: Translate with `t` and Plural in Vue I18n v10+\nDESCRIPTION: This demonstrates the `t` function replacement for `tc` with a pluralization (number) argument in Vue I18n v10+.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.t('banana', 2))\n```\n\n----------------------------------------\n\nTITLE: Installing unplugin-vue-i18n with npm\nDESCRIPTION: This command installs the `@intlify/unplugin-vue-i18n` package as a development dependency using npm.  This plugin is required for using Vue I18n with Vite or Webpack.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/sfc.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @intlify/unplugin-vue-i18n -D\n```\n\n----------------------------------------\n\nTITLE: Output with Predefined Arguments - HTML\nDESCRIPTION: Shows the expected output when using predefined arguments with `$t`. The output reflects the interpolation of the `count` and `n` values within the pluralization messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/pluralization.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>10 apples</p>\n<p>10 apples</p>\n\n<p>1 banana</p>\n<p>1 banana</p>\n<p>too many bananas</p>\n```\n\n----------------------------------------\n\nTITLE: Installing unplugin-vue-i18n with yarn\nDESCRIPTION: This command installs the `@intlify/unplugin-vue-i18n` package as a development dependency using yarn. This plugin is required for using Vue I18n with Vite or Webpack.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/sfc.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @intlify/unplugin-vue-i18n -D\n```\n\n----------------------------------------\n\nTITLE: Installing Vue I18n via npm\nDESCRIPTION: This command installs the Vue I18n library using npm, specifying the 'next' version. This ensures that the latest version of Vue I18n is installed in your project.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save vue-i18n@next\n```\n\n----------------------------------------\n\nTITLE: Literal Interpolation Output - Vue I18n\nDESCRIPTION: Shows the resulting HTML after literal interpolation.  The placeholders for account and domain have been replaced with 'foo' and 'domain.com' respectively, to create the email address 'foo@domain.com'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<p>email: foo@domain.com</p>\n```\n\n----------------------------------------\n\nTITLE: Webpack DefinePlugin Configuration\nDESCRIPTION: This snippet demonstrates how to configure the DefinePlugin in Webpack to set feature flags for tree shaking with vue-i18n.  It defines boolean literals for `__VUE_I18N_FULL_INSTALL__`, `__VUE_I18N_LEGACY_API__`, and `__INTLIFY_DROP_MESSAGE_COMPILER__` to enable or disable specific features during the build process. Proper configuration ensures optimal tree shaking in the final bundle.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/vue-i18n/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew webpack.DefinePlugin({\n  '__VUE_I18N_FULL_INSTALL__': true,\n  '__VUE_I18N_LEGACY_API__': true,\n  '__INTLIFY_DROP_MESSAGE_COMPILER__': false\n})\n```\n\n----------------------------------------\n\nTITLE: Translate Function with List Interpolation and Default Message (TypeScript)\nDESCRIPTION: Defines the signature for the `t` function when used with list interpolations and a default message. The locale messages should contain placeholders like `{0}`, `{1}`, etc., corresponding to the elements in the `list`. If no translation is found, the `defaultMsg` is returned.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, list: unknown[], defaultMsg: string): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Fallback Format Property (TypeScript)\nDESCRIPTION: Defines the `fallbackFormat` property within the Composer interface. Determines whether warnings are suppressed when falling back to fallbackLocale or the root.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackFormat: boolean;\n```\n\n----------------------------------------\n\nTITLE: Number Options fallbackWarn Property in TypeScript\nDESCRIPTION: Defines the `fallbackWarn` property within the `NumberOptions` interface. This boolean property determines whether to resolve number formatting on format keys when the specified language lacks a formatting definition for the given key. When set to `true`, a fallback warning will be displayed if the key is missing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackWarn?: boolean;\n```\n\n----------------------------------------\n\nTITLE: LocaleOptions Interface Definition (TypeScript)\nDESCRIPTION: Defines the options interface for specifying the locale of localization. The locale can be a specific locale string or a `LocaleDetector` function that dynamically determines the locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LocaleOptions<Locales = Locale>\n\n```\n\n----------------------------------------\n\nTITLE: Translate with `tc` and Choice in Vue I18n v9.x\nDESCRIPTION: This example shows how to use the `tc` function with a choice (number) argument in Vue I18n v9.x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.tc('banana', 2))\n```\n\n----------------------------------------\n\nTITLE: Locale Message Resource Definition\nDESCRIPTION: Defines a simple locale message resource in JSON format with a single translation key 'world'. This resource will be used as the basis for defining a TypeScript schema.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/typescript.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"world\": \"the world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Translate with `tc`, Choice, Named in Vue I18n v9.x\nDESCRIPTION: Shows how to use the `tc` function with a choice number and a named value.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.tc('banana', 2, { name: 'dio' }))\n```\n\n----------------------------------------\n\nTITLE: $d(value, key) Signature - Vue I18n\nDESCRIPTION: This overloaded signature of the `$d` method formats a datetime value (number or Date instance) using a specified datetime format key.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n$d(value: number | Date, key: string): DateTimeFormatResult | string;\n```\n\n----------------------------------------\n\nTITLE: MessageContext - list (TypeScript)\nDESCRIPTION: Resolves a message value from a list using the specified index. This method is used to access values from an array of message values provided during translation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nlist(index: number): unknown;\n```\n\n----------------------------------------\n\nTITLE: Accessing Version Info in Vue I18n v9 - JavaScript\nDESCRIPTION: This snippet demonstrates how to access the version information of Vue I18n in v9 and later by importing the `VERSION` constant from the `vue-i18n` module.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VERSION } from 'vue-i18n'\n\nconsole.log(VERSION)\n```\n\n----------------------------------------\n\nTITLE: Previewing the Production Build\nDESCRIPTION: This command starts a local server to preview the production build of the Nuxt 3 application. It allows developers to test the application's behavior after the build process.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/frameworks/nuxt3/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Translate with `t` and Named in Vue I18n v10+\nDESCRIPTION: This demonstrates the equivalent using `t` with a named record and pluralization value in Vue I18n v10+.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.t('banana', { name: 'dio' }, 1))\n```\n\n----------------------------------------\n\nTITLE: Resolve Translation Property (TypeScript)\nDESCRIPTION: Defines the `rt` property within the Composer interface. Represents resolution of locale message translations and links to ComposerResolveLocaleMessageTranslation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nrt: ComposerResolveLocaleMessageTranslation<Locales>;\n```\n\n----------------------------------------\n\nTITLE: Locale Type Definition (TypeScript)\nDESCRIPTION: Defines the type for a locale. It checks if the `GeneratedLocale` type is `never`. If it is, `Locale` is a `string`. Otherwise, `Locale` is of type `GeneratedLocale`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Locale = IsNever<GeneratedLocale> extends true ? string : GeneratedLocale;\n```\n\n----------------------------------------\n\nTITLE: Accessing Version Info in Vue I18n v8.x - JavaScript\nDESCRIPTION: This snippet shows how to access the version information of Vue I18n in v8.x using the static property `version` of the `VueI18n` class.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport VueI18n from 'vue-i18n'\n\nconsole.log(VueI18n.version)\n```\n\n----------------------------------------\n\nTITLE: Install unplugin-vue-i18n with npm\nDESCRIPTION: This command installs the `@intlify/unplugin-vue-i18n` package as a development dependency using npm. This plugin is used for integrating Vue I18n with bundlers like Vite and Webpack.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/optimization.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @intlify/unplugin-vue-i18n -D\n```\n\n----------------------------------------\n\nTITLE: Translate with `tc` and List in Vue I18n v9.x\nDESCRIPTION: This example shows how to use the `tc` function with a list as an argument in Vue I18n v9.x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.tc('banana', ['dio']))\n```\n\n----------------------------------------\n\nTITLE: Translate with `$t` and List in Vue I18n v10+ (Vue Template)\nDESCRIPTION: Shows the equivalent replacement of `$tc` with `$t` while migrating to Vue I18n v10+ using a list argument.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_33\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('banana', ['dio'], 1) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Number Formats Property (TypeScript)\nDESCRIPTION: Defines the `numberFormats` property within the Composer interface. This read-only computed property provides access to the number formats.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly numberFormats: ComputedRef<{\n        [K in keyof NumberFormats]: NumberFormats[K];\n    }>;\n```\n\n----------------------------------------\n\nTITLE: Datetime Formatting Property (TypeScript)\nDESCRIPTION: Defines the `d` property within the Composer interface. It represents datetime formatting functionality and links to ComposerDateTimeFormatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nd: ComposerDateTimeFormatting<DateTimeFormats, Locales, RemoveIndexSignature<{\n        [K in keyof DefineDateTimeFormat]: DefineDateTimeFormat[K];\n    }>>;\n```\n\n----------------------------------------\n\nTITLE: Warn HTML Message Configuration\nDESCRIPTION: This typescript code defines the `warnHtmlMessage` property of the Vue I18n configuration. This property allows configuration to use locale messages of HTML formatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nwarnHtmlMessage?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Installing Vue I18n with yarn\nDESCRIPTION: This command installs vue-i18n version 11 using yarn.  It adds the vue-i18n package to your project's dependencies, enabling internationalization functionality.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/installation.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add vue-i18n@11\n```\n\n----------------------------------------\n\nTITLE: Translate with `tc`, Choice, Locale in Vue I18n v9.x\nDESCRIPTION: Shows the use of `tc` with a choice number and locale in Vue I18n v9.x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = createI18n({\n  legacy: true,\n  // something options ...\n})\nconsole.log(i18n.global.tc('banana', 2, 'ja'))\n```\n\n----------------------------------------\n\nTITLE: Post Translation Configuration\nDESCRIPTION: This typescript code defines the `postTranslation` property of the Vue I18n configuration. This property allows configuration of a handler for post processing of translation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\npostTranslation?: PostTranslationHandler<VueMessageType>;\n```\n\n----------------------------------------\n\nTITLE: MessageContext - type (TypeScript)\nDESCRIPTION: Defines the message type property of the `MessageContext`. Usually the value of the type is `text`, which indicates that the message function should return a string.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ntype: string;\n```\n\n----------------------------------------\n\nTITLE: Install vue-i18n-bridge with npm\nDESCRIPTION: This command installs the vue-i18n-bridge package using npm. It's a prerequisite for using the bridge to migrate between Vue I18n versions.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install vue-i18n-bridge\n```\n\n----------------------------------------\n\nTITLE: Plural Rules Configuration\nDESCRIPTION: This typescript code defines the `pluralRules` property of the Vue I18n configuration. This property configures a set of rules for word pluralization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\npluralRules?: PluralizationRules;\n```\n\n----------------------------------------\n\nTITLE: Installing vue-i18n-loader with npm\nDESCRIPTION: This command installs the `@intlify/vue-i18n-loader` package as a development dependency using npm. This loader is required for using Vue I18n `<i18n>` custom blocks within Quasar CLI projects.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/sfc.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @intlify/vue-i18n-loader -D\n```\n\n----------------------------------------\n\nTITLE: Translate Function with List Interpolation and Options (TypeScript)\nDESCRIPTION: Defines the signature for the `t` function when used with list interpolations and translation options. The locale messages should contain placeholders like `{0}`, `{1}`, etc., corresponding to the elements in the `list`. Options can be used to customize the translation process.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n<Key extends string>(key: Key | ResourceKeys, list: unknown[], options: TranslateOptions<Locales>): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Vue I18n UMD Module Usage for Vue 2.7\nDESCRIPTION: This code snippet demonstrates how to use the Vue I18n UMD module in a browser environment for Vue 2.7, utilizing vue-i18n-bridge.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst { createApp } = VueDemi // exported UMD which is named by `VueDemi`\nconst { createI18n, useI18n } = VueI18nBridge // exported UMD which is named by `VueI18nBridge`\n\nVue.use(VueI18n, { bridge: true })\n\nconst i18n = createI18n({\n  locale: 'ja',\n  messages: {\n    // ...\n  }\n}, VueI18n)\n\nconst app = createApp({}, {\n  // ...\n})\napp.use(i18n)\napp.mount('#app') // Vue app host container element\n```\n\n----------------------------------------\n\nTITLE: DateTimeOptions - part (TypeScript)\nDESCRIPTION: Specifies whether to use [Intel.DateTimeFormat#formatToParts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts).  When set to `true`, it enables the formatted date and time to be returned in parts, providing more granular control over the output.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\npart?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Inherit Locale Property (TypeScript)\nDESCRIPTION: Defines the `inheritLocale` property within the Composer interface. A boolean controlling whether the component's locale inherits from the root.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninheritLocale: boolean;\n```\n\n----------------------------------------\n\nTITLE: Available Locales Property (TypeScript)\nDESCRIPTION: Defines the `availableLocales` property within the Composer interface. This read-only property exposes an array of available locales defined within the messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly availableLocales: Locales[];\n```\n\n----------------------------------------\n\nTITLE: Translate with `$t` in Vue I18n v10+ (Vue Template)\nDESCRIPTION: This is the recommended replacement using `$t` and adding a pluralization number for compatibility.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_29\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('banana', 1) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Translate with `$t` and Locale in Vue I18n v10+ (Vue Template)\nDESCRIPTION: Shows migration to using `$t` with a pluralization value, and locale options within Vue templates.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_31\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('banana', 1, { locale: 'ja' }) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Locale Message Definition for Component\nDESCRIPTION: Defines a JSON structure to store the translations for a Vue component, including a 'hello' message with a placeholder for a name.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/typescript.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": {\n    \"hello\": \"Hello, {name}!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vue I18n via yarn\nDESCRIPTION: This command installs the Vue I18n library using yarn, specifying the 'next' version. Yarn is an alternative package manager to npm.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add vue-i18n@next\n```\n\n----------------------------------------\n\nTITLE: Modifiers Configuration\nDESCRIPTION: This typescript code defines the `modifiers` property of the Vue I18n configuration. This property allows configuration of custom modifiers for linked messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nmodifiers?: LinkedModifiers<VueMessageType>;\n```\n\n----------------------------------------\n\nTITLE: Message Resolver Configuration\nDESCRIPTION: This typescript code defines the `messageResolver` property of the Vue I18n configuration. This property is used to resolve the `messages` option.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nmessageResolver?: MessageResolver;\n```\n\n----------------------------------------\n\nTITLE: Define $t(key, list) Function for Translation\nDESCRIPTION: Defines the overloaded `$t(key, list)` function for locale message translation with list interpolation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/injection.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n$t(key: Key, list: unknown[]): TranslateResult;\n```\n\n----------------------------------------\n\nTITLE: Message Compiler Configuration\nDESCRIPTION: This typescript code defines the `messageCompiler` property of the Vue I18n configuration. This property configures a compiler for custom message format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nmessageCompiler?: MessageCompiler;\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: This command starts the Nuxt 3 development server.  It automatically watches for file changes and rebuilds the application, providing a hot-reloading development experience. The server runs on http://localhost:3000 by default.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/frameworks/nuxt3/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: VueI18n escapeParameterHtml property (Legacy API)\nDESCRIPTION: Defines the escapeParameterHtml property, controlling whether interpolation parameters are escaped before translation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nescapeParameterHtml: Composition['escapeParameter'];\n```\n\n----------------------------------------\n\nTITLE: Plural Rules Property (TypeScript)\nDESCRIPTION: Defines the `pluralRules` property within the Composer interface. Provides a set of rules for word pluralization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly pluralRules: PluralizationRules;\n```\n\n----------------------------------------\n\nTITLE: Modifiers Property (TypeScript)\nDESCRIPTION: Defines the `modifiers` property within the Composer interface. Provides access to custom modifiers for linked messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly modifiers: LinkedModifiers<VueMessageType>;\n```\n\n----------------------------------------\n\nTITLE: VueI18n silentFallbackWarn property (Legacy API)\nDESCRIPTION: Defines the silentFallbackWarn property, controlling the suppression of fallback warnings when localization fails.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nsilentFallbackWarn: Composition['fallbackWarn'];\n```\n\n----------------------------------------\n\nTITLE: VueI18n fallbackLocale property (Legacy API)\nDESCRIPTION: Defines the fallbackLocale property, specifying the current fallback locales being used.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackLocale: FallbackLocales<Locales>;\n```\n\n----------------------------------------\n\nTITLE: Translate with `$tc` and List in Vue I18n v9.x (Vue Template)\nDESCRIPTION: Illustrates how to translate with a list using `$tc` in a Vue template in Vue I18n v9.x.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_32\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $tc('banana', ['dio']) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running Nuxt 3 App (pnpm)\nDESCRIPTION: This command starts the Nuxt 3 application in development mode using pnpm. It watches for file changes and automatically reloads the application in the browser.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: This command builds the Nuxt 3 application for production. It optimizes the code for performance and creates a distributable package for deployment.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/frameworks/nuxt3/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Initializing petite-vue-i18n with Package Manager\nDESCRIPTION: This snippet shows how to initialize petite-vue-i18n when installed via a package manager (npm, pnpm, yarn).  It imports necessary functions and integrates i18n into the Vue app. The `createI18n` function is used to configure i18n.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/petite-vue-i18n/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'petite-vue-i18n'\n\nconst i18n = createI18n({\n  // something vue-i18n options here ...\n})\n\nconst app = createApp({\n  // something vue options here ...\n})\n\napp.use(i18n)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Fallback Locale Property (TypeScript)\nDESCRIPTION: Defines the `fallbackLocale` property within the Composer interface. A writable computed ref that reflects the current fallback locales in use.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackLocale: WritableComputedRef<FallbackLocales<Locales>>;\n```\n\n----------------------------------------\n\nTITLE: Is Global Property (TypeScript)\nDESCRIPTION: Defines the `isGlobal` property within the Composer interface. Read-only boolean indicating if the composer instance is global.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly isGlobal: boolean;\n```\n\n----------------------------------------\n\nTITLE: Run Development Server (npm)\nDESCRIPTION: This command starts the development server, simulating the backend during development mode. It leverages a plugin defined in `vite.config.ts`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/backend/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Translate with locale V9\nDESCRIPTION: Demonstrates how to use the `$t` function with a locale parameter in Vue I18n v9.x to translate a message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $t('message.hello', 'ja') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: VueI18n silentTranslationWarn property (Legacy API)\nDESCRIPTION: Defines the silentTranslationWarn property, controlling the suppression of warnings when localization fails.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nsilentTranslationWarn: Composition['missingWarn'];\n```\n\n----------------------------------------\n\nTITLE: VueI18n rt property (Legacy API)\nDESCRIPTION: Defines the rt property for resolving locale message translation using VueI18nResolveLocaleMessageTranslation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nrt: VueI18nResolveLocaleMessageTranslation<Locales>;\n```\n\n----------------------------------------\n\nTITLE: Building Message Format Explorer (Yarn)\nDESCRIPTION: This command builds the Intlify message format explorer for production using Yarn. It generates optimized assets for deployment.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/format-explorer/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn build:explorer\n```\n\n----------------------------------------\n\nTITLE: Register Message Resolver Function in TypeScript\nDESCRIPTION: Defines the function `registerMessageResolver` that allows registering a message resolver. The message resolver function is used to resolve messages with a hierarchical structure. The function takes a `MessageResolver` function as an argument.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function registerMessageResolver(resolver: MessageResolver): void;\n```\n\n----------------------------------------\n\nTITLE: VueI18n numberFormats property (Legacy API)\nDESCRIPTION: Defines the numberFormats property, representing the number formats of localization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly numberFormats: {\n        [K in keyof NumberFormats]: NumberFormats[K];\n    };\n```\n\n----------------------------------------\n\nTITLE: petite-vue-i18n Installation via npm\nDESCRIPTION: Installation of petite-vue-i18n via npm. Uses the command `npm install petite-vue-i18n@next --save`. Requires npm to be installed.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install petite-vue-i18n@next --save\n```\n\n----------------------------------------\n\nTITLE: VueI18n modifiers property (Legacy API)\nDESCRIPTION: Defines the modifiers property, representing custom modifiers for linked messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly modifiers: Composition['modifiers'];\n```\n\n----------------------------------------\n\nTITLE: VueI18n postTranslation property (Legacy API)\nDESCRIPTION: Defines the postTranslation property, a handler for post-processing of translation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\npostTranslation: PostTranslationHandler<VueMessageType> | null;\n```\n\n----------------------------------------\n\nTITLE: VueI18n getLocaleMessage property (Legacy API)\nDESCRIPTION: Defines the getLocaleMessage property, a function to get a locale message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ngetLocaleMessage: Composition['getLocaleMessage'];\n```\n\n----------------------------------------\n\nTITLE: VueI18n setLocaleMessage property (Legacy API)\nDESCRIPTION: Defines the setLocaleMessage property, a function to set a locale message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nsetLocaleMessage: Composition['setLocaleMessage'];\n```\n\n----------------------------------------\n\nTITLE: VueI18n getNumberFormat property (Legacy API)\nDESCRIPTION: Defines the getNumberFormat property, a function to get a number format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngetNumberFormat: Composition['getNumberFormat'];\n```\n\n----------------------------------------\n\nTITLE: VueI18n mergeNumberFormat property (Legacy API)\nDESCRIPTION: Defines the mergeNumberFormat property, a function to merge a number format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nmergeNumberFormat: Composition['mergeNumberFormat'];\n```\n\n----------------------------------------\n\nTITLE: petite-vue-i18n Installation via pnpm\nDESCRIPTION: Installation of petite-vue-i18n via pnpm. Uses the command `pnpm add petite-vue-i18n@next`. Requires pnpm to be installed.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm add petite-vue-i18n@next\n```\n\n----------------------------------------\n\nTITLE: Installing petite-vue-i18n with NPM\nDESCRIPTION: This command shows how to install petite-vue-i18n using npm. This adds petite-vue-i18n as a project dependency.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/petite-vue-i18n/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install petite-vue-i18n --save\n```\n\n----------------------------------------\n\nTITLE: VueI18n mergeLocaleMessage property (Legacy API)\nDESCRIPTION: Defines the mergeLocaleMessage property, a function to merge a locale message.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nmergeLocaleMessage: Composition['mergeLocaleMessage'];\n```\n\n----------------------------------------\n\nTITLE: Flat JSON Configuration\nDESCRIPTION: This typescript code defines the `flatJson` property of the Vue I18n configuration. This property allows the use of flat json messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nflatJson?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Install @intlify/core-base via pnpm\nDESCRIPTION: Installation instruction for `@intlify/core-base` package using pnpm.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @intlify/core-base@next\n```\n\n----------------------------------------\n\nTITLE: Fallback Root Configuration\nDESCRIPTION: This typescript code defines the `fallbackRoot` property of the Vue I18n configuration.  This property is used to determine if the root level should be used as a fallback when component localization fails.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackRoot?: boolean;\n```\n\n----------------------------------------\n\nTITLE: petite-vue-i18n Installation via yarn\nDESCRIPTION: Installation of petite-vue-i18n via yarn. Uses the command `yarn add petite-vue-i18n@next`. Requires yarn to be installed.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn add petite-vue-i18n@next\n```\n\n----------------------------------------\n\nTITLE: Instance ID Property (TypeScript)\nDESCRIPTION: Defines the `id` property within the Composer interface. It holds the instance ID.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nid: number;\n```\n\n----------------------------------------\n\nTITLE: VueI18n id property (Legacy API)\nDESCRIPTION: Defines the id property, which represents the instance ID.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nid: number;\n```\n\n----------------------------------------\n\nTITLE: Running Nuxt 3 App (npm)\nDESCRIPTION: This command starts the Nuxt 3 application in development mode using npm. It watches for file changes and automatically reloads the application in the browser.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Get Missing Handler Method (TypeScript)\nDESCRIPTION: Defines the `getMissingHandler` method within the Composer interface. Retrieves the missing handler function.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ngetMissingHandler(): MissingHandler | null;\n```\n\n----------------------------------------\n\nTITLE: VueI18nTranslation Interface Definition\nDESCRIPTION: This code snippet defines the `VueI18nTranslation` interface. It describes the structure of locale message translation functions within the VueI18n legacy interface.  This interface is part of VueI18n versions that predate v12 and is scheduled for removal.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VueI18nTranslation<Messages extends Record<string, any> = {}, Locales = 'en-US', DefinedLocaleMessage extends RemovedIndexResources<DefineLocaleMessage> = RemovedIndexResources<DefineLocaleMessage>, C = IsEmptyObject<DefinedLocaleMessage> extends false ? PickupPaths<{    [K in keyof DefinedLocaleMessage]: DefinedLocaleMessage[K];\n}> : never, M = IsEmptyObject<Messages> extends false ? PickupKeys<Messages> : never, ResourceKeys extends C | M = IsNever<C> extends false ? IsNever<M> extends false ? C | M : C : IsNever<M> extends false ? M : never> \n```\n\n----------------------------------------\n\nTITLE: Inherit Locale Configuration\nDESCRIPTION: This typescript code defines the `inheritLocale` property of the Vue I18n configuration. This property dictates whether or not the root level locale is inherited to component localization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\ninheritLocale?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Install @intlify/core-base via npm\nDESCRIPTION: Installation instruction for `@intlify/core-base` package using npm.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @intlify/core-base@next\n```\n\n----------------------------------------\n\nTITLE: Install @intlify/core-base via yarn\nDESCRIPTION: Installation instruction for `@intlify/core-base` package using yarn.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @intlify/core-base@next\n```\n\n----------------------------------------\n\nTITLE: Running Nuxt 3 App (yarn)\nDESCRIPTION: This command starts the Nuxt 3 application in development mode using yarn. It watches for file changes and automatically reloads the application in the browser.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Start Preview (npm)\nDESCRIPTION: This command starts a preview server, enabling you to inspect the application's behavior in an environment similar to production, often used for testing and debugging.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/backend/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: This command installs the project's dependencies using PNPM with the `--shamefully-hoist` flag. This flag hoists dependencies to the root node_modules folder, which can resolve some dependency issues.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/frameworks/nuxt3/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --shamefully-hoist\n```\n\n----------------------------------------\n\nTITLE: List Interpolation with Array-Like Object in Vue I18n v8.x - HTML\nDESCRIPTION: This snippet shows how list interpolation could be done using an array-like object in Vue I18n v8.x. This is now deprecated in v9, and you must use an array instead.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<p>{{ $t('greeting', { '0': 'kazupon' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Preserving Directive Content in Vue I18n v8.x - JavaScript\nDESCRIPTION: This snippet demonstrates using the `preserveDirectiveContent` option in Vue I18n v8.x. This option controlled whether the content of elements using the `v-t` directive was preserved. In Vue I18n v9, the content is always preserved, so this option is no longer needed.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport VueI18n from 'vue-i18n'\n\nconst i18n = new VueI18n({\n  // ...\n  preserveDirectiveContent: true,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Missing Warn Property (TypeScript)\nDESCRIPTION: Defines the `missingWarn` property within the Composer interface. Determines whether to suppress warnings when localization fails, accepting a boolean or RegExp.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nmissingWarn: boolean | RegExp;\n```\n\n----------------------------------------\n\nTITLE: Path Type Definition in TypeScript\nDESCRIPTION: Defines the `Path` type as a string in Vue I18n. This type represents the path to a specific value within a message or data structure. It is used for resolving nested values and accessing specific properties within translation messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Path = string;\n```\n\n----------------------------------------\n\nTITLE: Message Function Return Type Definition in TypeScript\nDESCRIPTION: Defines the return type of a message function in Vue I18n.  It uses a conditional type to determine whether to return the message type or an array of the message type based on whether T extends string. This provides flexibility for different message structures.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MessageFunctionReturn<T = string> = T extends string ? MessageType<T> : MessageType<T>[];\n```\n\n----------------------------------------\n\nTITLE: Built-in Modifiers Output - Vue I18n\nDESCRIPTION: Shows the expected HTML output when using the `.lower` modifier for linked messages. The 'Home address' is displayed with capitalization, whereas 'Please provide home address' is all lowercase.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/syntax.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<label>Home address</label>\n<p class=\"error\">Please provide home address</p>\n```\n\n----------------------------------------\n\nTITLE: Translation Directive Signature (TypeScript)\nDESCRIPTION: Defines the type signature of the Vue I18n translation directive. It is an `ObjectDirective` that can be applied to HTML elements. The directive is deprecated and will be removed in future versions.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/directive.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TranslationDirective<T = HTMLElement> = ObjectDirective<T>;\n```\n\n----------------------------------------\n\nTITLE: VueI18n sync property (Legacy API)\nDESCRIPTION: Defines the sync property, controlling whether to synchronize the root level locale to the component localization locale.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nsync: Composition['inheritLocale'];\n```\n\n----------------------------------------\n\nTITLE: Pre-compile i18n resources (npm)\nDESCRIPTION: This command pre-compiles i18n resources. This is done using the `scripts/generate.ts` script, and is for i18n resource pre-compilation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/backend/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run generate\n```\n\n----------------------------------------\n\nTITLE: Accessing Data with useData in Markdown\nDESCRIPTION: This snippet demonstrates how to access site, theme, and page data using the `useData` API within a Markdown file. It imports `useData` from `vitepress` and retrieves theme, page, and frontmatter properties.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/examples/ssr/vitepress/api-examples.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\n\nconst { theme, page, frontmatter } = useData()\n</script>\n\n## Results\n\n### Theme Data\n\n<pre>{{ theme }}</pre>\n\n### Page Data\n\n<pre>{{ page }}</pre>\n\n### Page Frontmatter\n\n<pre>{{ frontmatter }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Custom Pluralization Rule Output - HTML\nDESCRIPTION: Displays the expected output after applying the custom pluralization rules for the specified numeric values. Each line shows the correctly pluralized Russian word for 'car' and 'banana'.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/pluralization.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<h2>Car:</h2>\n<p>1 машина</p>\n<p>2 машины</p>\n<p>4 машины</p>\n<p>12 машин</p>\n<p>21 машина</p>\n\n<h2>Banana:</h2>\n<p>нет бананов</p>\n<p>4 банана</p>\n<p>11 бананов</p>\n<p>31 банан</p>\n```\n\n----------------------------------------\n\nTITLE: Vite Define Option Configuration\nDESCRIPTION: This example illustrates how to overwrite default feature flags using the `define` option in Vite for vue-i18n. It sets the boolean literals for `__VUE_I18N_FULL_INSTALL__`, `__VUE_I18N_LEGACY_API__`, and `__INTLIFY_DROP_MESSAGE_COMPILER__`, determining which features are included in the build. Properly configuring these flags is essential for achieving optimal tree shaking and minimizing the bundle size.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/vue-i18n/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndefine: {\n  __VUE_I18N_FULL_INSTALL__: true,\n  __VUE_I18N_LEGACY_API__: true,\n  __INTLIFY_DROP_MESSAGE_COMPILER__: false\n}\n```\n\n----------------------------------------\n\nTITLE: Export Hello I18n Web Component (JS)\nDESCRIPTION: This code snippet exports the `HelloI18n` web component. It imports `defineCustomElement` from vue and the `HelloI18n.ce.vue` component, then defines a custom element using `defineCustomElement`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/wc.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineCustomElement } from 'vue'\nimport HelloI18n from './components/HelloI18n.ce.vue'\n\nconst HelloI18nElement = defineCustomElement(HelloI18n)\nexport { HelloI18nElement }\n\n```\n\n----------------------------------------\n\nTITLE: VueI18n getDateTimeFormat property (Legacy API)\nDESCRIPTION: Defines the getDateTimeFormat property, a function to get a datetime format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetDateTimeFormat: Composition['getDateTimeFormat'];\n```\n\n----------------------------------------\n\nTITLE: Custom Message Format Configuration in Vue I18n\nDESCRIPTION: This code snippet demonstrates how to configure a custom message format in Vue I18n using the `messageCompiler` option. It shows the integration of a custom compiler and how to define messages with custom formatting rules, including pluralization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\nimport { messageCompiler } from './compilation'\n\nconst i18n = createI18n({\n  legacy: false,\n  locale: 'en',\n  messageCompiler,\n  messages: {\n    en: {\n      hello: 'hello world!',\n      greeting: 'hi, {name}!',\n      photo: `You have {numPhotos, plural,\n        =0 {no photos.}\n        =1 {one photo.}\n        other {# photos.}\n      }`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing petite-vue-i18n with PNPM\nDESCRIPTION: This command demonstrates how to install petite-vue-i18n using pnpm.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/petite-vue-i18n/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npnpm add petite-vue-i18n\n```\n\n----------------------------------------\n\nTITLE: Hello World Template with petite-vue-i18n\nDESCRIPTION: This is an HTML template demonstrating the usage of `t` function for translation within a Vue component.  It assumes that i18n has been initialized with appropriate locale messages.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/petite-vue-i18n/README.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"app\">\n  <h1>{{ t('hello world') }}</h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Resolver and Locale Fallbacker\nDESCRIPTION: This snippet demonstrates how to configure `petite-vue-i18n` to use the same message resolver and locale fallbacker as `vue-i18n`. This is useful for projects migrating from `vue-i18n` to `petite-vue-i18n` while maintaining consistent behavior. Requires `@intlify/core-base`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/petite-vue-i18n/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createI18n } from 'petite-vue-i18n'\nimport {\n  registerMessageResolver, // register the message resolver API\n  resolveValue, // message resolver of vue-i18n which is used by default\n  registerLocaleFallbacker, // register the locale fallbacker API\n  fallbackWithLocaleChain // locale fallbacker of vue-i18n which is used by default\n} from '@intlify/core-base'\n\n// register message resolver of vue-i18n\nregisterMessageResolver(resolveValue)\n\n// register locale fallbacker of vue-i18n\nregisterLocaleFallbacker(fallbackWithLocaleChain)\n\n// some thing code ...\n// ...\n```\n\n----------------------------------------\n\nTITLE: VueI18n setDateTimeFormat property (Legacy API)\nDESCRIPTION: Defines the setDateTimeFormat property, a function to set a datetime format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nsetDateTimeFormat: Composition['setDateTimeFormat'];\n```\n\n----------------------------------------\n\nTITLE: Install vue-i18n-bridge with pnpm\nDESCRIPTION: This command installs the vue-i18n-bridge package using pnpm. It's a prerequisite for using the bridge to migrate between Vue I18n versions.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add vue-i18n-bridge\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Message Format Explorer (Yarn)\nDESCRIPTION: This command starts the development server for the Intlify message format explorer using Yarn. It's used for local development and testing.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/format-explorer/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn dev:explorer\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Members in Vue Template\nDESCRIPTION: This snippet shows how to use the `VPTeamMembers` component from VitePress to render the team members. The `size` prop is set to \"small\", and the `members` prop is bound to the `members` array defined in the script section.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/introduction.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<VPTeamMembers size=\"small\" :members=\"members\" />\n```\n\n----------------------------------------\n\nTITLE: DatetimeFormat Component Type Definition (TypeScript)\nDESCRIPTION: Defines the type for the DatetimeFormat component, specifying its props including VNodeProps, DatetimeFormatProps, and BaseFormatProps. It is used for formatting date and time values based on the specified locale and format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/component.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDatetimeFormat: {\n    new (): {\n        $props: VNodeProps & DatetimeFormatProps & BaseFormatProps;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Switch to petite-vue-i18n with npm alias\nDESCRIPTION: Shows how to switch from vue-i18n to petite-vue-i18n using npm alias without changing import statements. Modifies the `package.json` to alias `vue-i18n` to `petite-vue-i18n`.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/lite.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n   // ...\n   \"dependencies\": {\n     \"vue\": \"^3.4.14\",\n-     \"vue-i18n\": \"^10.0.0\"\n+     \"vue-i18n\": \"npm:petite-vue-i18n@^10.0.0\"\n   },\n }\n```\n\n----------------------------------------\n\nTITLE: Run Vue I18n benchmark\nDESCRIPTION: This snippet shows the command to run the benchmark for Vue I18n after cloning the repository. It requires building the type definitions first.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n> pnpm build:type && pnpm benchmark\n```\n\n----------------------------------------\n\nTITLE: Installing petite-vue-i18n with Yarn\nDESCRIPTION: This command shows how to install petite-vue-i18n using yarn.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/packages/petite-vue-i18n/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add petite-vue-i18n\n```\n\n----------------------------------------\n\nTITLE: Translate Options fallbackWarn Property in TypeScript\nDESCRIPTION: Defines the `fallbackWarn` property within the `TranslateOptions` interface.  This boolean property determines whether to perform template interpolation on translation keys when the specified language lacks a translation for a given key. Setting it to `true` enables template interpolation.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/general.md#_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackWarn?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking Intl Availability in Vue I18n v8.x - JavaScript\nDESCRIPTION: This snippet demonstrates how to check the availability of the ECMAScript Internationalization API (Intl) using the `availability` property of the `VueI18n` class in Vue I18n v8.x. This functionality has been removed in v9 as major browsers now support the Intl API.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport VueI18n from 'vue-i18n'\n\nconsole.log(VueI18n.availability)\n```\n\n----------------------------------------\n\nTITLE: List Interpolation with Array-Like Object in Vue I18n v8.x - JavaScript\nDESCRIPTION: This snippet shows how list interpolation could be done using an array-like object in Vue I18n v8.x. This is now deprecated in v9, and you must use an array instead.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport VueI18n from 'vue-i18n'\n\nconst i18n = new VueI18n({\n  // ...\n  messages: {\n    en: {\n      greeting: 'hello, {0}!'\n    }\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: VueI18nResolveLocaleMessageTranslation Type Alias\nDESCRIPTION: This code snippet defines `VueI18nResolveLocaleMessageTranslation` as a type alias for `ComposerResolveLocaleMessageTranslation`.  It represents the function type used to resolve locale message translations for VueI18n's legacy interfaces. It is compatible with Vue I18n versions prior to v12.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport type VueI18nResolveLocaleMessageTranslation<Locales = 'en-US'> = ComposerResolveLocaleMessageTranslation<Locales>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Nuxt 3 App (npx)\nDESCRIPTION: This command initializes a new Nuxt 3 application named 'nuxt3-app-vue-i18n' using the npx package runner. It sets up the basic project structure and configuration files.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/integrations/nuxt3.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx nuxi init nuxt3-app-vue-i18n\n```\n\n----------------------------------------\n\nTITLE: Warn HTML Message Property (TypeScript)\nDESCRIPTION: Defines the `warnHtmlMessage` property within the Composer interface. Determines whether to allow HTML formatting in locale messages and emits a warning.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/composition.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nwarnHtmlMessage: boolean;\n```\n\n----------------------------------------\n\nTITLE: Translate with `$tc`, Choice, Named in Vue I18n v9.x (Vue Template)\nDESCRIPTION: Demonstrates the usage of `$tc` in the Vue template with the choice number and named parameters.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_42\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $tc('banana', 2,  { name: 'dio' }) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue I18n CDN Usage\nDESCRIPTION: This JavaScript code shows how to use Vue and Vue I18n from a CDN, accessing the libraries through global objects.  `createApp` from Vue, and `createI18n` and `useI18n` from VueI18n are accessed directly from the global scope. This is an alternative to using build tools and imports.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/essentials/started.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createApp } = Vue\nconst { createI18n, useI18n } = VueI18n\n```\n\n----------------------------------------\n\nTITLE: WarnHtmlInMessageLevel Type Definition (TypeScript)\nDESCRIPTION: Defines the type `WarnHtmlInMessageLevel` which specifies the level of warning for HTML in messages. It can be 'off', 'warn', or 'error'. This type is marked as deprecated and will be removed in vue-i18n v12.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport type WarnHtmlInMessageLevel = 'off' | 'warn' | 'error';\n```\n\n----------------------------------------\n\nTITLE: Install unplugin-vue-i18n with pnpm\nDESCRIPTION: This command installs the `@intlify/unplugin-vue-i18n` package as a development dependency using pnpm. This plugin is used for integrating Vue I18n with bundlers like Vite and Webpack.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/optimization.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npnpm add -D @intlify/unplugin-vue-i18n\n```\n\n----------------------------------------\n\nTITLE: VueI18nOptions Interface Definition\nDESCRIPTION: This code snippet defines the `VueI18nOptions` interface in TypeScript, which is used to configure the `VueI18n` instance.  It details the available options for managing locales, fallback strategies, message formatting, and other internationalization settings. This configuration is offered with Vue I18n v8.x and will be deprecated at v12.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VueI18nOptions<Schema extends {\n    message?: unknown;\n    datetime?: unknown;\n    number?: unknown;\n} = {\n    message: DefaultLocaleMessageSchema;\n    datetime: DefaultDateTimeFormatSchema;\n    number: DefaultNumberFormatSchema;\n}, Locales extends {\n    messages: unknown;\n    datetimeFormats: unknown;\n    numberFormats: unknown;\n} | string = Locale, Options extends ComposerOptions<Schema, Locales> = ComposerOptions<Schema, Locales>> \n```\n\n----------------------------------------\n\nTITLE: Defining Global Resource Schema - TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a global resource schema for VueI18n using TypeScript's `declare module` feature and interfaces like `DefineLocaleMessage`, `DefineDateTimeFormat`, and `DefineNumberFormat`. It defines the structure for locale messages, datetime formats, and number formats within the `vue-i18n` module.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/advanced/typescript.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * you need to import the some interfaces\n */\nimport {\n  DefineLocaleMessage,\n  DefineDateTimeFormat,\n  DefineNumberFormat\n} from 'vue-i18n'\n\ndeclare module 'vue-i18n' {\n  // define the locale messages schema\n  export interface DefineLocaleMessage {\n    hello: string\n    menu: {\n      login: string\n    }\n    errors: string[]\n  }\n\n  // define the datetime format schema\n  export interface DefineDateTimeFormat {\n    short: {\n      hour: 'numeric'\n      minute: 'numeric'\n      second: 'numeric'\n      timeZoneName: 'short'\n      timezone: string\n    }\n  }\n\n  // define the number format schema\n  export interface DefineNumberFormat {\n    currency: {\n      style: 'currency'\n      currencyDisplay: 'symbol'\n      currency: string\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VueI18n d property (Legacy API)\nDESCRIPTION: Defines the d property for datetime formatting using VueI18nDateTimeFormatting.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nd: VueI18nDateTimeFormatting<DateTimeFormats, Locales, RemoveIndexSignature<{\n        [K in keyof DefineDateTimeFormat]: DefineDateTimeFormat[K];\n    }>>;\n```\n\n----------------------------------------\n\nTITLE: VueI18n datetimeFormats property (Legacy API)\nDESCRIPTION: Defines the datetimeFormats property, representing the datetime formats of localization.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly datetimeFormats: {\n        [K in keyof DateTimeFormats]: DateTimeFormats[K];\n    };\n```\n\n----------------------------------------\n\nTITLE: CDN Import for Vue 2.6\nDESCRIPTION: These script tags import Vue 2.6, Vue I18n v8, @vue/composition-api, vue-demi, and vue-i18n-bridge from CDN. They are necessary for using the bridge in a browser environment with Vue 2.6 without a bundler.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.6\"></script>\n<script src=\"https://unpkg.com/vue-i18n@8/dist/vue-i18n.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@vue/composition-api@1.4\"></script>\n<script src=\"https://unpkg.com/vue-demi@0.13.5/lib/index.iife.js\"></script>\n<script src=\"https://unpkg.com/vue-i18n-bridge@9.2.0-beta.38/dist/vue-i18n-bridge.global.prod.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Install vue-i18n-bridge with Yarn\nDESCRIPTION: This command installs the vue-i18n-bridge package using Yarn. It's a prerequisite for using the bridge to migrate between Vue I18n versions.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add vue-i18n-bridge\n```\n\n----------------------------------------\n\nTITLE: Defining Choice type in Vue I18n (Legacy API)\nDESCRIPTION: Defines the type Choice as a number.  This type is part of the legacy API and is deprecated for removal in vue-i18n v12.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Choice = number;\n```\n\n----------------------------------------\n\nTITLE: Translate with `$tc`, Choice, List in Vue I18n v9.x (Vue Template)\nDESCRIPTION: Demonstrates the use of `$tc` with the choice number and list parameters.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/breaking10.md#_snippet_40\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $tc('banana', 2, ['dio']) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: VueI18n mergeDateTimeFormat property (Legacy API)\nDESCRIPTION: Defines the mergeDateTimeFormat property, a function to merge a datetime format.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nmergeDateTimeFormat: Composition['mergeDateTimeFormat'];\n```\n\n----------------------------------------\n\nTITLE: Defining NumberFormatResult type in Vue I18n (Legacy API)\nDESCRIPTION: Defines the type NumberFormatResult as a string. This type is part of the legacy API and is deprecated for removal in vue-i18n v12.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/api/legacy.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NumberFormatResult = string;\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Legacy API Setup with TypeScript\nDESCRIPTION: This code snippet shows how to set up Vue I18n with the Legacy API in Vue 2 using TypeScript and vue-i18n-bridge. It includes type casting for the i18n instance.\nSOURCE: https://github.com/intlify/vue-i18n/blob/master/docs/guide/migration/vue2.md#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport Vue from 'vue'\nimport VueCompositionAPI from '@vue/composition-api'\nimport { createI18n, useI18n, castToVueI18n } from 'vue-i18n-bridge'\n\nVue.use(VueCompositionAPI)\nVue.use(VueI18n, { bridge: true })\n\n// you need to cast `i18n` instance\nconst i18n = castToVueI18n(createI18n({\n  locale: 'ja',\n  messages: {\n    en: {\n      message: {\n        hello: 'hello, {name}!'\n      }\n    },\n    ja: {\n      message: {\n        hello: 'こんにちは、{name}！'\n      }\n    }\n  }\n}, VueI18n))\n\nVue.use(i18n)\n\nconst app = new Vue({ i18n })\napp.$mount('#app')\n```"
  }
]