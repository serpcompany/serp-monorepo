[
  {
    "owner": "runware",
    "repo": "sdk-js",
    "content": "TITLE: Instantiating Runware SDK Asynchronously\nDESCRIPTION: Code to initialize the Runware SDK instance asynchronously using an API key.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst runware = await Runware.initialize({ apiKey: \"API_KEY\" });\n```\n\n----------------------------------------\n\nTITLE: Requesting AI-Generated Images from Runware API\nDESCRIPTION: Example of using the SDK to request AI-generated images with various parameters including prompts, dimensions, model selection, and other customization options. The method returns an array of image results.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Runware } from \"@runware/sdk-js\";\n\nconst  runware  =  new  Runware({ apiKey: \"API_KEY\" });\nconst images = await runware.requestImages({\n\tpositivePrompt: string;\n\tnegativePrompt?: string;\n\twidth: number;\n\theight: number;\n\tmodel: string;\n\tnumberResults?: number;\n\toutputType?: \"URL\" | \"base64Data\" | \"dataURI\";\n\toutputFormat?: \"JPG\" | \"PNG\" | \"WEBP\";\n\tuploadEndpoint?: string;\n\tcheckNSFW?: boolean\n\tseedImage?: File | string;\n\tmaskImage?: File | string;\n\tstrength?: number;\n\tsteps?: number;\n\tscheduler?: string;\n\tseed?: number;\n\tCFGScale?: number;\n\tclipSkip?: number;\n\trefiner?: IRefiner;\n\tusePromptWeighting?: number;\n\tcontrolNet?: IControlNet[];\n\tlora?: ILora[];\n  \tretry?: number;\n\tipAdapters?: IipAdapters[];\n\tembeddings?: IEmbedding[];\n\toutpaint: IOutpaint;\n\tonPartialImages?: (images: IImage[], error: IError) =>  void;\n})\n\nreturn interface ITextToImage {\n\ttaskType: ETaskType;\n\timageUUID: string;\n\tinputImageUUID?: string;\n\ttaskUUID: string;\n\timageURL?: string;\n\timageBase64Data?: string;\n\timageDataURI?: string;\n\tNSFWContent?: boolean;\n\tcost: number;\n\tpositivePrompt?: string;\n  \tnegativePrompt?: string;\n}[]\n```\n\n----------------------------------------\n\nTITLE: Ensuring Connection with Runware Server\nDESCRIPTION: Method to ensure a connection is established with the Runware server before making requests.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst runware = new RunwareServer({ apiKey: \"API_KEY\" });\n\nawait runware.ensureConnection();\n```\n\n----------------------------------------\n\nTITLE: Using Photo Maker Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the photoMaker function from the Runware SDK. It includes the function call with its parameters and the expected return interface for the generated images.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst  runware  =  new Runware({ apiKey: \"API_KEY\" });\n\nconst photoMaker = await runware.photoMaker({\n\tpositivePrompt: string;\n\theight: number;\n\twidth: number;\n\tnumberResults: number;\n\tsteps?: number;\n\tinputImages: string[];\n\tstyle: EPhotoMakerEnum;\n\tstrength?: number;\n\toutputFormat?: string;\n\tincludeCost?: boolean;\n\n\tcustomTaskUUID?: string;\n\tretry?: number;\n\tonPartialImages?: (images: IImage[], error?: IError) => void\n})\nconsole.log(photoMaker)\n\nexport interface IImage {\n\ttaskType: ETaskType;\n\timageUUID: string;\n\tinputImageUUID?: string;\n\ttaskUUID: string;\n\timageURL?: string;\n\timageBase64Data?: string;\n\timageDataURI?: string;\n\tNSFWContent?: boolean;\n\tcost?: number;\n\tseed?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Parallel Image Generation Requests with Runware SDK in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Runware SDK to make two simultaneous image generation requests. It showcases various parameters including positive prompts, image dimensions, IP adapters, embeddings, and outpainting. The function returns an array of ITextToImage objects.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst  runware  =  new Runware({ apiKey: \"API_KEY\" });\n\nconst [firstImagesRequest, secondImagesRequest] = await Promise.all([\n\trunware.requestImages({\n\t\tpositivePrompt: string;\n\t\twidth: number;\n\t\theight: number;\n\t\tnumberResults: number;\n\t\tmodel: string;\n\t\tnegativePrompt?: string;\n\t\tonPartialImages?: (images: IImage[], error: IError) =>  void;\n\t}),\n\trunware.requestImages({\n\t\tpositivePrompt: string;\n\t\twidth: number;\n\t\theight: number;\n\t\tnumberResults: number;\n\t\tmodel: string;\n\t\tipAdapters: [{\n\t\t\tmodel: string;\n\t\t\tweight: number;\n\t\t\tguideImage: string;\n\t\t}],\n\t\tembeddings: [{\n\t\t\tmodel: string;\n\t\t\tweight: number;\n\t\t}],\n\t\toutpaint: {\n\t\t\ttop: 256,\n\t\t\tright: 128,\n\t\t\tbottom: 256,\n\t\t\tleft: 128,\n\t\t\tblur: 16\n\t\t}\n\t\tonPartialImages?: (images: IImage[], error: IError) =>  void;\n\t})\n])\n\nconsole.log({firstImagesRequest, secondImagesRequest})\n\nreturn interface ITextToImage {\n\ttaskType: ETaskType;\n\timageUUID: string;\n\tinputImageUUID?: string;\n\ttaskUUID: string;\n\timageURL?: string;\n\timageBase64Data?: string;\n\timageDataURI?: string;\n\tNSFWContent?: boolean;\n\tcost: number;\n\tpositivePrompt?: string;\n  \tnegativePrompt?: string;\n}[]\n```\n\n----------------------------------------\n\nTITLE: Removing Image Background with Runware SDK in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Runware SDK to remove the background from an image. It initializes the Runware client with an API key and calls the removeImageBackground method with various configuration options.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst  runware  =  new Runware({ apiKey: \"API_KEY\" });\nconst image = await runware.removeImageBackground({\n\tinputImage: string | File\n\toutputType?: IOutputType;\n\toutputFormat?: IOutputFormat;\n\trgba?: number[];\n\tpostProcessMask?: boolean;\n\treturnOnlyMask?: boolean;\n\talphaMatting?: boolean;\n\talphaMattingForegroundThreshold?: number;\n\talphaMattingBackgroundThreshold?: number;\n\talphaMattingErodeSize?: number;\n})\nconsole.log(image)\nreturn interface IImage {\n\ttaskType: ETaskType;\n\ttaskUUID: string;\n\timageUUID: string;\n\tinputImageUUID: string;\n\timageURL?: string;\n\timageBase64Data?: string;\n\timageDataURI?: string;\n\tcost: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Image to Text Conversion with Runware SDK\nDESCRIPTION: Demonstrates how to use the Runware SDK to convert an image to text. The function accepts an input image as either a string UUID or File object and returns the extracted text along with task metadata. Optionally includes cost information in the response.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst  runware  =  new Runware({ apiKey: \"API_KEY\" });\nconst imageToText = await runware.requestImageToText({\n\tinputImage: string | File\n})\nconsole.log(imageToText)\n\nreturn interface IImageToText {\n  taskType: string;\n  taskUUID: string;\n  text: string;\n  cost?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Runware SDK Synchronously\nDESCRIPTION: Code to initialize the Runware SDK instance synchronously using an API key.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst runware = new Runware({ apiKey: \"API_KEY\" });\n```\n\n----------------------------------------\n\nTITLE: Uploading Models (ControlNet, Checkpoint, LORA) in JavaScript\nDESCRIPTION: This snippet shows how to upload different types of models (ControlNet, Checkpoint, LORA) using the Runware SDK. It includes the base payload structure and specific parameters for each model type.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst  runware  =  new Runware({ apiKey: \"API_KEY\" });\n\nconst basePayload = {\n\tair: string;\n\tname: string;\n\tdownloadUrl: string;\n\tuniqueIdentifier: string;\n\tversion: string;\n\tformat: EModelFormat;\n\tarchitecture: EModelArchitecture;\n\theroImageUrl?: string;\n\ttags?: string[];\n\tshortDescription?: string;\n\tcomment?: string;\n\tprivate: boolean;\n\tcustomTaskUUID?: string;\n\tretry?: number;\n\tonUploadStream?: (\n\t\tresponse?: IAddModelResponse,\n\t\terror?: IErrorResponse\n\t) => void;\n}\n\nconst controlNetUpload = await runware.modelUpload({\n\t...basePayload,\n  \tcategory: \"controlnet\";\n \tconditioning: EModelConditioning;\n})\nconsole.log(controlNetUpload)\n\nconst checkpointUpload = await runware.modelUpload({\n\t...basePayload,\n  \tcategory: \"checkpoint\";\n \tpositiveTriggerWords?: string;\n\tdefaultCFGScale?: number;\n\tdefaultStrength: number;\n\tdefaultSteps?: number;\n\tdefaultScheduler?: number;\n\ttype?: EModelType;\n})\nconsole.log(checkpointUpload)\n\nconst loraUpload = await runware.modelUpload({\n\t...basePayload,\n  \tcategory: \"lora\";\n \tdefaultWeight: number;\n  \tpositiveTriggerWords?: string;\n})\n\nconsole.log(loraUpload)\n\nreturn interface IAddModelResponse {\n  status: string;\n  message: string;\n  taskUUID: string;\n  air: string;\n  taskType: string;\n}\n\nexport interface IErrorResponse {\n  code: string;\n  message: string;\n  parameter: string;\n  type: string;\n  documentation: string;\n  taskUUID: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Upscaling Images Using GAN with Runware SDK in JavaScript\nDESCRIPTION: This code snippet shows how to upscale an image using GAN technology through the Runware SDK. It takes an input image and an upscale factor, along with optional parameters for output configuration.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst  runware  =  new Runware({ apiKey: \"API_KEY\" });\nconst image = await runware.upscaleGan({\n\tinputImage: File | string;\n\tupscaleFactor: number;\n\toutputType?: IOutputType;\n\toutputFormat?: IOutputFormat;\n\tincludeCost?: boolean\n})\nconsole.log(image)\nreturn interface IImage {\n\ttaskType: ETaskType;\n\timageUUID: string;\n\tinputImageUUID?: string;\n\ttaskUUID: string;\n\timageURL?: string;\n\timageBase64Data?: string;\n\timageDataURI?: string;\n\tNSFWContent?: boolean;\n\tcost: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Image Masking in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the imageMask function from the Runware SDK. It includes the function call with its parameters and the expected return type for the image masking operation.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst  runware  =  new Runware({ apiKey: \"API_KEY\" });\n\nconst imageMasking = await runware.imageMask({\n  model: string;\n  inputImage: string;\n  confidence?: number;\n  maskPadding?: number;\n  maskBlur?: number;\n  outputFormat?: string;\n  outputType?: string;\n  includeCost?: boolean;\n  uploadEndpoint?: string;\n  customTaskUUID?: string;\n  retry?: number;\n})\nconsole.log(imageMasking)\n\nexport type TImageMaskingResponse = {\n  taskType: string;\n  taskUUID: string;\n  imageUUID: string;\n\n  detections: [\n    {\n      x_min: number;\n      y_min: number;\n      x_max: number;\n      y_max: number;\n    }\n  ];\n  maskImageURL: string;\n  cost: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ControlNet Preprocessing in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Runware SDK and use the controlNetPreProcess function. It includes the function call, parameters, and the expected return interface.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst  runware  =  new Runware({ apiKey: \"API_KEY\" });\nconst controlNetPreProcessed = await runware.controlNetPreProcess({\n\tinputImage: string | File;\n\tpreProcessorType: EPreProcessor;\n\theight?: number;\n\twidth?: number;\n\toutputType?: IOutputType;\n\toutputFormat?: IOutputFormat;\n\thighThresholdCanny?: number;\n\tlowThresholdCanny?: number;\n\tincludeHandsAndFaceOpenPose?: boolean;\n})\nconsole.log(controlNetPreProcessed)\nreturn interface IControlNetImage {\n\ttaskUUID: string;\n\tinputImageUUID: string;\n\tguideImageUUID: string;\n\tguideImageURL?: string;\n\tguideImageBase64Data?: string;\n\tguideImageDataURI?: string;\n\tcost: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Text Prompts with Runware SDK in JavaScript\nDESCRIPTION: This code snippet demonstrates how to enhance text prompts using the Runware SDK. The enhancePrompt method takes a text prompt and optional parameters to control the length and number of prompt versions to generate.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst  runware  =  new Runware({ apiKey: \"API_KEY\" });\nconst enhancedPrompt = await runware.enhancePrompt({\n\tprompt: string;\n\tpromptMaxLength?: number;\n\tpromptVersions?: number;\n\tincludeCost?: boolean;\n})\nconsole.log(enhancedPrompt)\nreturn interface IEnhancedPrompt {\n\ttaskUUID: string;\n\ttext: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Models in JavaScript\nDESCRIPTION: This snippet shows how to use the modelSearch function from the Runware SDK. It includes the function call with its parameters and the expected return types for the search results.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst  runware  =  new Runware({ apiKey: \"API_KEY\" });\n\nconst modelSearch = await runware.modelSearch({\n\tsearch: string;\n\ttags?: string[];\n\tcategory?: \"checkpoint\" | \"lora\" | \"controlnet\";\n\tarchitecture?: EModelArchitecture;\n\tlimit?: number;\n\toffset?: number;\n\towned?: boolean;\n\tfeatured: boolean;\n\ttype: string;\n\tconditioning: string;\n\tprivate: boolean;\n\tcustomTaskUUID?: string;\n\tretry?: number;\n})\nconsole.log(modelSearch)\n\nexport type TModelSearchResponse = {\n  results: TModel[];\n  taskUUID: string;\n  taskType: string;\n  totalResults: number;\n};\n\nexport type TModel = {\n  name: string;\n  air: string;\n  downloadUrl: string;\n  tags: string[];\n  heroImage: string;\n  category: string;\n  floatingPoint: string;\n  private: boolean;\n  shortDescription: string;\n  comment: string;\n  positiveTriggerWords: string;\n  defaultSteps: number;\n  defaultGuidanceScale: number;\n  defaultStrength: number;\n  defaultVaeId: number;\n  updatedDateUnixTimestamp: number;\n  version: string;\n  conditioning: string;\n  defaultScheduler: string;\n  defaultCFG: number;\n  format: string;\n  uniqueIdentifier: string;\n  architecture: string;\n  type: string;\n  nsfw: boolean;\n  sourceUrl: string;\n  downloadCount: number;\n  nsfwLevel: number;\n  rating: number;\n  ratingCount: number;\n  thumbsUpCount: number;\n  thumbsDownCount: number;\n  defaultEmaEnable: boolean;\n  defaultImageSizeId: string;\n  compatibleSizeIds: number[];\n};\n```\n\n----------------------------------------\n\nTITLE: Manually Disconnecting from Runware Server\nDESCRIPTION: Method to manually disconnect from the Runware server.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst runware = new RunwareServer({ apiKey: \"API_KEY\" });\n\nawait runware.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Installing Runware SDK with Yarn\nDESCRIPTION: Command to install the Runware SDK using Yarn package manager.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$  yarn  add  @runware/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Installing Runware SDK with npm\nDESCRIPTION: Command to install the Runware SDK using npm package manager.\nSOURCE: https://github.com/Runware/sdk-js/blob/main/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$  npm  install  @runware/sdk-js\n```"
  }
]