[
  {
    "owner": "discord-net",
    "repo": "discord.net",
    "content": "TITLE: Responding to Slash Command in C#\nDESCRIPTION: This snippet provides the implementation of the SlashCommandHandler method that responds to the executed command. It uses the RespondAsync method to send a response back to the user, including the name of the command executed.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/responding-to-slash-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task SlashCommandHandler(SocketSlashCommand command)\n{\n    await command.RespondAsync($\"You executed {command.Data.Name}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Discord Settings Subcommands\nDESCRIPTION: Implements the command handler for processing settings subcommands, including logic for getting and setting different field types (string, integer, boolean) and responding to the user.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/subcommands.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task SlashCommandHandler(SocketSlashCommand command)\n{\n    switch(command.Data.Name)\n    {\n        case \"list-roles\":\n            await HandleListRoleCommand(command);\n            break;\n        case \"settings\":\n            await HandleSettingsCommand(command);\n            break;\n    }\n}\n\nprivate async Task HandleSettingsCommand(SocketSlashCommand command)\n{\n    var fieldName = command.Data.Options.First().Name;\n    var getOrSet = command.Data.Options.First().Options.First().Name;\n    var value = command.Data.Options.First().Options.First().Options?.FirstOrDefault().Value;\n\n    switch (fieldName)\n    {\n        case \"field-a\":\n            {\n                if(getOrSet == \"get\")\n                {\n                    await command.RespondAsync($\"The value of `field-a` is `{FieldA}\"`);\n                }\n                else if (getOrSet == \"set\")\n                {\n                    this.FieldA = (string)value;\n                    await command.RespondAsync($\"`field-a` has been set to `{FieldA}\"`);\n                }\n            }\n            break;\n        case \"field-b\":\n            {\n                if (getOrSet == \"get\")\n                {\n                    await command.RespondAsync($\"The value of `field-b` is `{FieldB}\"`);\n                }\n                else if (getOrSet == \"set\")\n                {\n                    this.FieldB = (int)value;\n                    await command.RespondAsync($\"`field-b` has been set to `{FieldB}\"`);\n                }\n            }\n            break;\n        case \"field-c\":\n            {\n                if (getOrSet == \"get\")\n                {\n                    await command.RespondAsync($\"The value of `field-c` is `{FieldC}\"`);\n                }\n                else if (getOrSet == \"set\")\n                {\n                    this.FieldC = (bool)value;\n                    await command.RespondAsync($\"`field-c` has been set to `{FieldC}\"`);\n                }\n            }\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring DiscordSocketClient in C#\nDESCRIPTION: Demonstrates how to create a DiscordSocketClient, set up logging, log in with a bot token, and start the client. It also shows how to block the main thread to keep the bot running.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/getting_started/first-bot.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task MainAsync()\n{\n    var client = new DiscordSocketClient();\n\n    client.Log += Log;\n\n    //  You can assign your bot token to a string, and pass that in to connect.\n    //  This is, however, insecure, particularly if you plan to have your code hosted in a public repository.\n    var token = \"BOHICA\";\n\n    // Some alternative options would be to keep your token in an Environment Variable or a standalone file.\n    // var token = Environment.GetEnvironmentVariable(\"NameOfYourEnvironmentVariable\");\n    // var token = File.ReadAllText(\"token.txt\");\n    // var token = JsonConvert.DeserializeObject<AConfigurationClass>(File.ReadAllText(\"config.json\")).Token;\n\n    await client.LoginAsync(TokenType.Bot, token);\n    await client.StartAsync();\n\n    // Block this task until the program is closed.\n    await Task.Delay(-1);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Settings Command with Subcommands\nDESCRIPTION: Creates a Discord slash command with multiple subcommand groups for managing different settings fields. Demonstrates setting up field-a (string), field-b (integer), and field-c (boolean) with get/set operations.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/subcommands.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic string FieldA { get; set; } = \"test\";\npublic int FieldB { get; set; } = 10;\npublic bool FieldC { get; set; } = true;\n\npublic async Task Client_Ready()\n{\n    ulong guildId = 848176216011046962;\n\n    var guildCommand = new SlashCommandBuilder()\n        .WithName(\"settings\")\n        .WithDescription(\"Changes some settings within the bot.\")\n        .AddOption(new SlashCommandOptionBuilder()\n            .WithName(\"field-a\")\n            .WithDescription(\"Gets or sets the field A\")\n            .WithType(ApplicationCommandOptionType.SubCommandGroup)\n            .AddOption(new SlashCommandOptionBuilder()\n                .WithName(\"set\")\n                .WithDescription(\"Sets the field A\")\n                .WithType(ApplicationCommandOptionType.SubCommand)\n                .AddOption(\"value\", ApplicationCommandOptionType.String, \"the value to set the field\", isRequired: true)\n            ).AddOption(new SlashCommandOptionBuilder()\n                .WithName(\"get\")\n                .WithDescription(\"Gets the value of field A.\")\n                .WithType(ApplicationCommandOptionType.SubCommand)\n            )\n        ).AddOption(new SlashCommandOptionBuilder()\n            .WithName(\"field-b\")\n            .WithDescription(\"Gets or sets the field B\")\n            .WithType(ApplicationCommandOptionType.SubCommandGroup)\n            .AddOption(new SlashCommandOptionBuilder()\n                .WithName(\"set\")\n                .WithDescription(\"Sets the field B\")\n                .WithType(ApplicationCommandOptionType.SubCommand)\n                .AddOption(\"value\", ApplicationCommandOptionType.Integer, \"the value to set the fie to.\", isRequired: true)\n            ).AddOption(new SlashCommandOptionBuilder()\n                .WithName(\"get\")\n                .WithDescription(\"Gets the value of field B.\")\n                .WithType(ApplicationCommandOptionType.SubCommand)\n            )\n        ).AddOption(new SlashCommandOptionBuilder()\n            .WithName(\"field-c\")\n            .WithDescription(\"Gets or sets the field C\")\n            .WithType(ApplicationCommandOptionType.SubCommandGroup)\n            .AddOption(new SlashCommandOptionBuilder()\n                .WithName(\"set\")\n                .WithDescription(\"Sets the field C\")\n                .WithType(ApplicationCommandOptionType.SubCommand)\n                .AddOption(\"value\", ApplicationCommandOptionType.Boolean, \"the value to set the fie to.\", isRequired: true)\n            ).AddOption(new SlashCommandOptionBuilder()\n                .WithName(\"get\")\n                .WithDescription(\"Gets the value of field C.\")\n                .WithType(ApplicationCommandOptionType.SubCommand)\n            )\n        );\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging for Discord.Net Bot in C#\nDESCRIPTION: Creates a logging method to handle Discord.Net's log events. This method logs information to the console, but can be modified to use any logging framework.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/getting_started/first-bot.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate Task Log(LogMessage msg)\n{\n    Console.WriteLine(msg.ToString());\n    return Task.CompletedTask;\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Slash Command Executed Event in C#\nDESCRIPTION: This snippet demonstrates how to subscribe to the SlashCommandExecuted event using the Discord.NET library. It sets up a handler for the event that will be triggered when a Slash command is executed.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/responding-to-slash-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclient.SlashCommandExecuted += SlashCommandHandler;\n\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing Socket Entities in Discord.Net\nDESCRIPTION: Demonstrates how to access and interact with Socket entities in Discord.Net, including retrieving guilds, channels and users from the global cache via DiscordSocketClient.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nsocketentities.cs\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway Intents for DiscordSocketClient in C#\nDESCRIPTION: Demonstrates how to configure gateway intents when initializing a DiscordSocketClient. Gateway intents must be specified in the socket config and on the developer portal.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/basics/client-basics.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Where ever you declared your websocket client.\nDiscordSocketClient _client;\n\n...\n\nvar config = new DiscordSocketConfig()\n{\n  .. // Other config options can be presented here.\n  GatewayIntents = GatewayIntents.All\n}\n\n_client = new DiscordSocketClient(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Slash Command with Choices in Discord.NET\nDESCRIPTION: Demonstrates setting up a slash command builder with predefined choices for a feedback rating system. The command includes five rating options from 'Terrible' to 'Excellent!' with corresponding integer values from 1 to 5.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/choice-slash-command.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task Client_Ready()\n{\n    ulong guildId = 848176216011046962;\n\n    var guildCommand = new SlashCommandBuilder()\n        .WithName(\"feedback\")\n        .WithDescription(\"Tell us how much you are enjoying this bot!\")\n        .AddOption(new SlashCommandOptionBuilder()\n            .WithName(\"rating\")\n            .WithDescription(\"The rating your willing to give our bot\")\n            .WithRequired(true)\n            .AddChoice(\"Terrible\", 1)\n            .AddChoice(\"Meh\", 2)\n            .AddChoice(\"Good\", 3)\n            .AddChoice(\"Lovely\", 4)\n            .AddChoice(\"Excellent!\", 5)\n            .WithType(ApplicationCommandOptionType.Integer)\n        );\n\n    try\n    {\n        await client.Rest.CreateGuildCommand(guildCommand.Build(), guildId);\n    }\n    catch(ApplicationCommandException exception)\n    {\n        var json = JsonConvert.SerializeObject(exception.Error, Formatting.Indented);\n        Console.WriteLine(json);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Button Event Handler in Discord.NET\nDESCRIPTION: Shows how to register an event handler for button interactions using the ButtonExecuted event.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/responding-to-buttons.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclient.ButtonExecuted += MyButtonHandler;\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers in Discord.Net\nDESCRIPTION: A sample demonstrating how to implement various event handlers in a Discord.Net bot, including handling message reception, user joining, and reaction adding. The code shows both lambda and named function approaches to event handling.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/concepts/events.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// the following can be placed in your client initialization\nclient.MessageReceived += HandleMessageAsync;\nclient.UserJoined += async (user) =>\n{\n    var channel = user.Guild.DefaultChannel;\n    await channel.SendMessageAsync($\"Welcome, {user.Mention}!\");\n};\n\n// ...\n\n// the following would be placed somewhere else, to handle\n// the message received event.\nprivate async Task HandleMessageAsync(SocketMessage messageParam)\n{\n    // Don't process the command if it was a system message\n    var message = messageParam as SocketUserMessage;\n    if (message == null) return;\n\n    // Create a number to track where the prefix ends and the command begins\n    int argPos = 0;\n\n    // Determine if the message is a command based on the prefix and make sure no bots trigger commands\n    if (!(message.HasCharPrefix('!', ref argPos) ||\n        message.HasMentionPrefix(client.CurrentUser, ref argPos)) ||\n        message.Author.IsBot)\n        return;\n\n    // do your command handling here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Select Menu Component with Options\nDESCRIPTION: Shows how to create a select menu component with multiple options, each having a value, label, and description. The menu is configured with custom settings and added to a component builder.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/advanced.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar menu = new SelectMenuBuilder()\n{\n    CustomId = \"select-1\",\n    Placeholder = \"Select Somthing!\",\n    MaxValues = 1,\n    MinValues = 1,\n};\n\nmenu.AddOption(\"Meh\", \"1\", \"Its not gaming.\")\n    .AddOption(\"Ish\", \"2\", \"Some would say that this is gaming.\")\n    .AddOption(\"Moderate\", \"3\", \"It could pass as gaming\")\n    .AddOption(\"Confirmed\", \"4\", \"We are gaming\")\n    .AddOption(\"Excellent\", \"5\", \"It is renowned as gaming nation wide\", new Emoji(\"🔥\"));\n\nvar components = new ComponentBuilder()\n    .WithSelectMenu(menu);\n\n\nawait arg.RespondAsync(\"On a scale of one to five, how gaming is this?\", component: components.Build(), ephemeral: true);\nbreak;\n```\n\n----------------------------------------\n\nTITLE: Building Program with Dependency Injection in C#\nDESCRIPTION: Example showing how to structure a program class using dependency injection with IServiceProvider. This demonstrates the basic setup for a Discord.NET application with DI.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/basics.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Building the Program](samples/program.cs)]\n```\n\n----------------------------------------\n\nTITLE: Adding Select Menu to Command in C#\nDESCRIPTION: This snippet shows how to integrate the select menu within a command in a Discord bot using the Discord.NET library, responding to the user with the menu.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/select-menus.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Command(\"spawner\")]\\npublic async Task Spawn()\\n{\\n    var menuBuilder = new SelectMenuBuilder()\\n        .WithPlaceholder(\"Select an option\")\\n        .WithCustomId(\"menu-1\")\\n        .WithMinValues(1)\\n        .WithMaxValues(1)\\n        .AddOption(\"Option A\", \"opt-a\", \"Option B is lying!\")\\n        .AddOption(\"Option B\", \"opt-b\", \"Option A is telling the truth!\");\\n\\n    var builder = new ComponentBuilder()\\n        .WithSelectMenu(menuBuilder);\\n\\n    await ReplyAsync(\"Whos really lying?\", components: builder.Build());\\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing Async Context in C# for Discord.Net Bot\nDESCRIPTION: Sets up an asynchronous main method for a Discord.Net bot application. This is necessary as Discord.Net uses Task-based Asynchronous Pattern extensively.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/getting_started/first-bot.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass Program\n{\n    public static Task Main(string[] args) =>\n        new Program().MainAsync();\n\n    public async Task MainAsync()\n    {\n        // Bot logic here\n        await Task.Delay(-1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending Basic Rich Embed in Discord.NET\nDESCRIPTION: Demonstrates how to create a rich embed using EmbedBuilder with various properties and methods, including setting titles, descriptions, fields, author, footer, color, and timestamps. The embed is then built and sent to the chat channel.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/EmbedBuilder.Overwrites.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Command(\"embed\")]\npublic async Task SendRichEmbedAsync()\n{\n    var embed = new EmbedBuilder\n        {\n            // Embed property can be set within object initializer\n            Title = \"Hello world!\",\n            Description = \"I am a description set by initializer.\"\n        };\n        // Or with methods\n    embed.AddField(\"Field title\",\n        \"Field value. I also support [hyperlink markdown](https://example.com)!\")\n        .WithAuthor(Context.Client.CurrentUser)\n        .WithFooter(footer => footer.Text = \"I am a footer.\")\n        .WithColor(Color.Blue)\n        .WithTitle(\"I overwrote \\\"Hello world!\\\"\")\n        .WithDescription(\"I am a description.\")\n        .WithUrl(\"https://example.com\")\n        .WithCurrentTimestamp();\n        \n    //Your embed needs to be built before it is able to be sent\n    await ReplyAsync(embed: embed.Build());\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Select Menu Selection in C#\nDESCRIPTION: This snippet illustrates how to handle the selection made by users from a select menu using the SelectMenuExecuted event, allowing for dynamic responses based on user input.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/select-menus.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nclient.SelectMenuExecuted += MyMenuHandler;\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task MyMenuHandler(SocketMessageComponent arg)\\n{\\n    var text = string.Join(\", \", arg.Data.Values);\\n    await arg.RespondAsync($\"You have selected {text}\");\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rich Embed with Discord.NET EmbedBuilder\nDESCRIPTION: Demonstrates building a rich embed message with author details, footer information, and two inline fields. The example includes setting custom icons for author and footer sections, adding hyperlinked text in fields, and configuring inline field positioning.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/EmbedObjectBuilder.Inclusion.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar exampleAuthor = new EmbedAuthorBuilder()\n        .WithName(\"I am a bot\")\n        .WithIconUrl(\"https://discord.com/assets/e05ead6e6ebc08df9291738d0aa6986d.png\");\nvar exampleFooter = new EmbedFooterBuilder()\n        .WithText(\"I am a nice footer\")\n        .WithIconUrl(\"https://discord.com/assets/28174a34e77bb5e5310ced9f95cb480b.png\");\nvar exampleField = new EmbedFieldBuilder()\n        .WithName(\"Title of Another Field\")\n        .WithValue(\"I am an [example](https://example.com).\")\n        .WithInline(true);\nvar otherField = new EmbedFieldBuilder()\n        .WithName(\"Title of a Field\")\n        .WithValue(\"Notice how I'm inline with that other field next to me.\")\n        .WithInline(true);\nvar embed = new EmbedBuilder()\n        .AddField(exampleField)\n        .AddField(otherField)\n        .WithAuthor(exampleAuthor)\n        .WithFooter(exampleFooter)\n        .Build();\n```\n\n----------------------------------------\n\nTITLE: Setting up Logging in Discord.Net\nDESCRIPTION: Example of implementing logging functionality in a Discord.Net application. Shows how to configure both client-side logging and command service logging with error handling. Includes warning about synchronous execution and recommendation for async handling of external logging services.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/concepts/logging.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task Log(LogMessage msg)\n{\n    Console.WriteLine(msg.ToString());\n    return Task.CompletedTask;\n}\n\npublic class Program\n{\n    private DiscordSocketClient _client;\n    private CommandService _commands;\n\n    public async Task MainAsync()\n    {\n        _client = new DiscordSocketClient();\n        _commands = new CommandService();\n\n        _client.Log += Log;\n        _commands.Log += Log;\n\n        // Additional initialization code ...\n\n        await Task.Delay(-1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Emoji Reactions to Other Messages in Discord.Net\nDESCRIPTION: Shows how to add emoji reactions to messages from other users in Discord.Net. This example demonstrates creating and adding both Unicode emoji and custom emotes to messages.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/basics/basic-operations.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Adding an emoji (unicode emoji) reaction to another message\nvar message = await channel.GetMessageAsync(messageId) as IUserMessage;\nif (message != null)\n{\n    // Unicode emoji\n    Emoji emoji = new Emoji(\"👍\");\n    await message.AddReactionAsync(emoji);\n\n    // Custom emote\n    Emote emote = Emote.Parse(\"<:dotnet:232902710280716288>\");\n    await message.AddReactionAsync(emote);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global and Guild Commands in Discord.NET C#\nDESCRIPTION: This code snippet demonstrates how to create slash commands for both a specific guild and globally using the SlashCommandBuilder class in a C# Discord bot. It includes setting names and descriptions, handling exceptions, and using asynchronous methods to register commands successfully.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/creating-slash-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Let's hook the ready event for creating our commands in.\nclient.Ready += Client_Ready;\n\n...\n\npublic async Task Client_Ready()\n{\n    // Let's build a guild command! We're going to need a guild so lets just put that in a variable.\n    var guild = client.GetGuild(guildId);\n\n    // Next, lets create our slash command builder. This is like the embed builder but for slash commands.\n    var guildCommand = new SlashCommandBuilder();\n\n    // Note: Names have to be all lowercase and match the regular expression ^[\\w-]{3,32}$\n    guildCommand.WithName(\"first-command\");\n\n    // Descriptions can have a max length of 100.\n    guildCommand.WithDescription(\"This is my first guild slash command!\");\n\n    // Let's do our global command\n    var globalCommand = new SlashCommandBuilder();\n    globalCommand.WithName(\"first-global-command\");\n    globalCommand.WithDescription(\"This is my first global slash command\");\n\n    try\n    {\n        // Now that we have our builder, we can call the CreateApplicationCommandAsync method to make our slash command.\n        await guild.CreateApplicationCommandAsync(guildCommand.Build());\n\n        // With global commands we don't need the guild.\n        await client.CreateGlobalApplicationCommandAsync(globalCommand.Build());\n        // Using the ready event is a simple implementation for the sake of the example. Suitable for testing and development.\n        // For a production bot, it is recommended to only run the CreateGlobalApplicationCommandAsync() once for each command.\n    }\n    catch(ApplicationCommandException exception)\n    {\n        // If our command was invalid, we should catch an ApplicationCommandException. This exception contains the path of the error as well as the error message. You can serialize the Error field in the exception to get a visual of where your error is.\n        var json = JsonConvert.SerializeObject(exception.Errors, Formatting.Indented);\n\n        // You can send this error somewhere or just print it to the console, for this example we're just going to print it.\n        Console.WriteLine(json);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Commands\nDESCRIPTION: Demonstrates the implementation of message commands for handling message-based interactions.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// samples/intro/messagecommand.cs reference\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Emoji Reactions in Discord.NET\nDESCRIPTION: This code demonstrates how to send a message to a Discord channel and add reactions using both Unicode emojis and custom Discord emotes. The example shows creating a Unicode heart emoji and parsing a custom emote from Discord's emote format, then adding both as reactions to the sent message.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/IEmote.Inclusion.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task SendAndReactAsync(ISocketMessageChannel channel)\n{\n    var message = await channel.SendMessageAsync(\"I am a message.\");\n\n    // Creates a Unicode-based emoji based on the Unicode string.\n    // This is effectively the same as new Emoji(\"💕\").\n    var heartEmoji = new Emoji(\"\\U0001f495\");\n    // Reacts to the message with the Emoji.\n    await message.AddReactionAsync(heartEmoji);\n\n    // Parses a custom emote based on the provided Discord emote format.\n    // Please note that this does not guarantee the existence of\n    // the emote.\n    var emote = Emote.Parse(\"<:thonkang:282745590985523200>\");\n    // Reacts to the message with the Emote.\n    await message.AddReactionAsync(emote);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Slash Command to List User Roles in C#\nDESCRIPTION: This snippet demonstrates how to create a slash command in Discord.NET that lists all roles for a specified user. It sets up the command with the required user parameter and attempts to create the command in a guild. If an exception occurs, it serializes and logs the error details.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclient.Ready += Client_Ready;\n\n...\n\npublic async Task Client_Ready()\n{\n    ulong guildId = 848176216011046962;\n\n    var guildCommand = new Discord.SlashCommandBuilder()\n        .WithName(\"list-roles\")\n        .WithDescription(\"Lists all roles of a user.\")\n        .AddOption(\"user\", ApplicationCommandOptionType.User, \"The users whos roles you want to be listed\", isRequired: true);\n\n    try\n    {\n        await client.Rest.CreateGuildCommand(guildCommand.Build(), guildId);\n    }\n    catch(ApplicationCommandException exception)\n    {\n        var json = JsonConvert.SerializeObject(exception.Error, Formatting.Indented);\n        Console.WriteLine(json);\n    }\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Discord Emoji Object in C#\nDESCRIPTION: This snippet demonstrates how to create a Discord.Emoji object by passing a Unicode string representation of the emoji to its constructor. This is the proper way to handle standard emoji in Discord.Net.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/emoji/emoji.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// All of the following methods will work\nEmoji emoji1 = new Emoji(\"👌\");\nEmoji emoji2 = new Emoji(\"\\uD83D\\uDC4C\");\n\n// Or one can use Parse/TryParse method\n// <3, ❤, :heart: are all valid and will result in ❤\nEmoji emoji3 = Emoji.Parse(\"<3\");\nbool success = Emoji.TryParse(\":heart:\", out var emoji4);\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Groups in C#\nDESCRIPTION: Shows how to create module groups for organizing sub-commands and command hierarchies in Discord.NET\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleModule : InteractionModuleBase<SocketInteractionContext>\n{\n    [Group(\"group\", \"A command group\")]\n    public class ExampleGroupModule : InteractionModuleBase<SocketInteractionContext>\n    {\n        // Group commands go here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Responding Ephemerally to Slash Command in Discord.Net\nDESCRIPTION: This snippet demonstrates how to send an ephemeral response to a Discord slash command using Discord.Net. By setting the `ephemeral` parameter to `true` in the `RespondAsync` method, the response will only be visible to the user who initiated the command. The snippet assumes that `command` is an `IApplicationCommandInteraction` object, and `embedBuilder` is a configured `EmbedBuilder` object.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/responding-ephemerally.md#2025-04-21_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nawait command.RespondAsync(embed: embedBuilder.Build(), ephemeral: true);\n```\n\n----------------------------------------\n\nTITLE: Streaming Audio with FFmpeg to Discord Voice\nDESCRIPTION: Demonstrates how to pipe audio from FFmpeg to Discord using AudioOutStream. Includes error handling and proper stream disposal.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/voice/sending-voice.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var ffmpeg = CreateStream(path))\nusing (var output = ffmpeg.StandardOutput.BaseStream)\nusing (var discord = client.CreatePCMStream(AudioApplication.Mixed))\n{\n    try { await output.CopyToAsync(discord); }\n    finally { await discord.FlushAsync(); }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Discord.NET Services with Dependency Injection in C#\nDESCRIPTION: This snippet demonstrates how to register Discord.NET services (InteractionService and CommandService) with a dependency injection container. It utilizes the IServiceCollection to add the services as singletons.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/services.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton(x => new InteractionService(x.GetRequiredService<DiscordSocketClient>()));\nservices.AddSingleton(x => new CommandService());\n```\n\n----------------------------------------\n\nTITLE: Setting Server Permissions for Discord.NET Commands\nDESCRIPTION: Shows how to restrict commands based on guild permissions using DefaultMemberPermissions attribute.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[DefaultMemberPermissions(GuildPermission.BanMembers)]\npublic class ExampleModule : InteractionModuleBase<SocketInteractionContext>\n{\n    [SlashCommand(\"ban\", \"Ban a user from the server.\")]\n    public async Task BanAsync()\n    {\n        // Command implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Slash Command Interactions in C#\nDESCRIPTION: This snippet shows how to handle interactions with the slash command created in the previous snippet. It includes a method using a switch statement to process the command name and calls a dedicated method to handle the specific 'list-roles' command, extracting the user parameter and responding with an embed that lists the user's roles.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task SlashCommandHandler(SocketSlashCommand command)\n{\n    // Let's add a switch statement for the command name so we can handle multiple commands in one event.\n    switch(command.Data.Name)\n    {\n        case \"list-roles\":\n            await HandleListRoleCommand(command);\n            break;\n    }\n}\n\nprivate async Task HandleListRoleCommand(SocketSlashCommand command)\n{\n    // We need to extract the user parameter from the command. since we only have one option and it's required, we can just use the first option.\n    var guildUser = (SocketGuildUser)command.Data.Options.First().Value;\n\n    // We remove the everyone role and select the mention of each role.\n    var roleList = string.Join(\",\\n\", guildUser.Roles.Where(x => !x.IsEveryone).Select(x => x.Mention));\n\n    var embedBuiler = new EmbedBuilder()\n        .WithAuthor(guildUser.ToString(), guildUser.GetAvatarUrl() ?? guildUser.GetDefaultAvatarUrl())\n        .WithTitle(\"Roles\")\n        .WithDescription(roleList)\n        .WithColor(Color.Green)\n        .WithCurrentTimestamp();\n\n    // Now, Let's respond with the embed.\n    await command.RespondAsync(embed: embedBuiler.Build());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Access Control in Discord.NET\nDESCRIPTION: Creates a custom PreconditionAttribute that checks if a user has a specific role before allowing command execution. The precondition validates that the command is executed within a guild and the user has the required role ID.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Commands/PreconditionAttribute.Overwrites.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RequireRoleAttribute : PreconditionAttribute\n{\n    private readonly ulong _roleId;\n\n    public RequireRoleAttribute(ulong roleId)\n    {\n        _roleId = roleId;\n    }\n\n    public override async Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context,\n        CommandInfo command, IServiceProvider services)\n    {\n        var guildUser = context.User as IGuildUser;\n        if (guildUser == null)\n            return PreconditionResult.FromError(\"This command cannot be executed outside of a guild.\");\n\n        var guild = guildUser.Guild;\n        if (guild.Roles.All(r => r.Id != _roleId))\n            return PreconditionResult.FromError(\n                $\"The guild does not have the role ({_roleId}) required to access this command.\");\n\n        return guildUser.RoleIds.Any(rId => rId == _roleId)\n            ? PreconditionResult.FromSuccess()\n            : PreconditionResult.FromError(\"You do not have the sufficient role required to access this command.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an External Guild Event with Discord.Net in C#\nDESCRIPTION: This code demonstrates how to create a basic external event on a Discord guild using Discord.Net. It creates an event that starts one day from now, lasts for a day, and is set in an external location called \"Space\".\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/guild_events/creating-guild-events.md#2025-04-21_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar guild = client.GetGuild(guildId);\n\nvar guildEvent = await guild.CreateEventAsync(\"test event\", DateTimeOffset.UtcNow.AddDays(1),  GuildScheduledEventType.External, endTime: DateTimeOffset.UtcNow.AddDays(2), location: \"Space\");\n```\n\n----------------------------------------\n\nTITLE: Implementing User Hierarchy Check in Discord.NET\nDESCRIPTION: Creates a custom ParameterPreconditionAttribute that validates user hierarchy levels before command execution. It ensures the command executor has a higher role than the target user and the bot has sufficient permissions.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Commands/PreconditionAttribute.Overwrites.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RequireHierarchyAttribute : ParameterPreconditionAttribute\n{\n    public override async Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context,\n        ParameterInfo parameter, object value, IServiceProvider services)\n    {\n        // Hierarchy is only available under the socket variant of the user.\n        if (!(context.User is SocketGuildUser guildUser))\n            return PreconditionResult.FromError(\"This command cannot be used outside of a guild.\");\n\n        SocketGuildUser targetUser;\n        switch (value)\n        {\n            case SocketGuildUser targetGuildUser:\n                targetUser = targetGuildUser;\n                break;\n            case ulong userId:\n                targetUser = await context.Guild.GetUserAsync(userId).ConfigureAwait(false) as SocketGuildUser;\n                break;\n            default:\n                throw new ArgumentOutOfRangeException();\n        }\n\n        if (targetUser == null)\n            return PreconditionResult.FromError(\"Target user not found.\");\n\n        if (guildUser.Hierarchy < targetUser.Hierarchy)\n            return PreconditionResult.FromError(\"You cannot target anyone else whose roles are higher than yours.\");\n\n        var currentUser = await context.Guild.GetCurrentUserAsync().ConfigureAwait(false) as SocketGuildUser;\n        if (currentUser?.Hierarchy < targetUser.Hierarchy)\n            return PreconditionResult.FromError(\"The bot's role is lower than the targeted user.\");\n\n        return PreconditionResult.FromSuccess();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Command Groups and Submodules in C#\nDESCRIPTION: This C# snippet demonstrates how to create command groups and submodules using Discord.Net. By applying the GroupAttribute, commands can be organized under prefixes, allowing for structured command patterns. Submodules within the main module help in managing nested command structures, enhancing modularity and organization.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/intro.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Groups and Submodules](samples/intro/groups.cs)]\n```\n\n----------------------------------------\n\nTITLE: Stacking Multiple Permissions in Discord.NET\nDESCRIPTION: Demonstrates how to combine multiple permissions using the | operator to require users to have multiple permissions to execute a command.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/permissions.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[DefaultMemberPermissions(GuildPermission.BanMembers | GuildPermission.KickMembers)]\npublic class ExampleModule : InteractionModuleBase<SocketInteractionContext>\n{\n    [SlashCommand(\"ban\", \"Ban a user from the server.\")]\n    public async Task BanAsync()\n    {\n        // Command implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Discord.Net Connection States\nDESCRIPTION: Demonstrates the key methods and events for managing Discord.Net connections. StartAsync and StopAsync are used to control connections, while Connected, Disconnected and Ready events provide connection state information.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/concepts/connections.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Managing Connections with Discord.Net\n\nIn Discord.Net, once a client has been started, it will automatically\nmaintain a connection to Discord's gateway until it is manually\nstopped.\n\n## Usage\n\nTo start a connection, invoke the `StartAsync` method on a client that\nsupports a WebSocket connection; to end a connection, invoke the\n`StopAsync` method, which gracefully closes any open WebSocket or\nUdpSocket connections.\n\nSince the Start/Stop methods only signal to an underlying connection\nmanager that a connection needs to be started, **they return before a\nconnection is made.**\n\nAs a result, you need to hook into one of the connection-state\nbased events to have an accurate representation of when a client is\nready for use.\n\nAll clients provide a `Connected` and `Disconnected` event, which is\nraised respectively when a connection opens or closes. In the case of\nthe [DiscordSocketClient], this does **not** mean that the client is\nready to be used.\n\nA separate event, `Ready`, is provided on [DiscordSocketClient], which\nis raised only when the client has finished guild stream or guild\nsync and has a completed guild cache.\n\n[DiscordSocketClient]: xref:Discord.WebSocket.DiscordSocketClient\n\n## Reconnection\n\n> [!TIP]\n> Avoid running long-running code on the gateway! If you deadlock the\n> gateway (as explained in [events]), the connection manager will\n> **NOT** be able to recover and reconnect.\n\nAssuming the client disconnected because of a fault on Discord's end,\nand not a deadlock on your end, we will always attempt to reconnect\nand resume a connection.\n\nDon't worry about trying to maintain your own connections, the\nconnection manager is designed to be bulletproof and never fail - if\nyour client does not manage to reconnect, you have found a bug!\n\n[events]: xref:Guides.Concepts.Events\n```\n\n----------------------------------------\n\nTITLE: Configuring GatewayIntents in DiscordSocketConfig (C#)\nDESCRIPTION: This code snippet demonstrates how to configure `GatewayIntents` within the `DiscordSocketConfig` when initializing the `DiscordSocketClient`.  It shows how to set the `GatewayIntents` property to `GatewayIntents.All` to enable all intents.  Developers need to ensure the corresponding intents are also enabled in the Discord developer portal.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/v2_v3_guide/v2_to_v3_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n```cs\n\n// Where ever you declared your websocket client.\nDiscordSocketClient _client;\n\n...\n\nvar config = new DiscordSocketConfig()\n{\n  .. // Other config options can be presented here.\n  GatewayIntents = GatewayIntents.All\n}\n\n_client = new DiscordSocketClient(config);\n\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Text Input in Discord.NET\nDESCRIPTION: Shows how to create a more complex text input component with additional configuration options including style, length constraints, required status, and placeholder text.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/text-input.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tb = new TextInputBuilder()\n    .WithLabel(\"Labeled\")\n    .WithCustomId(\"text_input\")\n    .WithStyle(TextInputStyle.Paragraph)\n    .WithMinLength(6)\n    .WithMaxLength(42)\n    .WithRequired(true)\n    .WithPlaceholder(\"Consider this place held.\");\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceCollection for Discord.NET\nDESCRIPTION: Shows how to register dependencies in a ServiceCollection, including setting up DiscordSocketConfig and DiscordSocketClient for dependency injection.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/basics.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Building the Collection](samples/collection.cs)]\n```\n\n----------------------------------------\n\nTITLE: Registering Generic TypeConverters\nDESCRIPTION: This code snippet demonstrates how to register a generic `TypeConverter<T>` with the Interaction Service. The `AddGenericTypeConverter()` method is used, passing the target base type (`Enum`) and the type of the `TypeConverter<T>` (`EnumConverter<>`).\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/typeconverters.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ninteractionService.AddGenericTypeConverter<Enum>(typeof(EnumConverter<>));\n```\n\n----------------------------------------\n\nTITLE: Implementing Slash Command with Summary Attributes\nDESCRIPTION: Demonstrates how to create a slash command with customized parameter summaries using SummaryAttribute.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// samples/intro/summaryattribute.cs reference\n```\n\n----------------------------------------\n\nTITLE: Creating an Autocomplete Command Example in C#\nDESCRIPTION: This code snippet demonstrates how to create an Autocomplete Handler by inheriting the AutocompleteHandler base class. Users implement the required abstract methods to generate suggestions for Slash Command parameters. It showcases the structure and essential components of an Autocomplete Handler.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/autocompletion.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Autocomplete Command Example](samples/autocompletion/autocomplete-example.cs)]\n```\n\n----------------------------------------\n\nTITLE: Restricting Channel Types in Slash Commands\nDESCRIPTION: Example of using ChannelTypesAttribute to restrict channel parameter types.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// samples/intro/channelattribute.cs reference\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord.NET Context Commands with Ready Event Handler\nDESCRIPTION: Demonstrates how to create and register both global and guild-specific context menu commands using Discord.NET. The code shows the implementation of UserCommandBuilder and MessageCommandBuilder to create commands, with proper error handling for invalid command configurations. Includes both user and message command variants.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/context-menu-commands/creating-context-menu-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Let's hook the ready event for creating our commands in.\nclient.Ready += Client_Ready;\n\n...\n\npublic async Task Client_Ready()\n{\n    // Let's build a guild command! We're going to need a guild so lets just put that in a variable.\n    var guild = client.GetGuild(guildId);\n\n    // Next, lets create our user and message command builder. This is like the embed builder but for context menu commands.\n    var guildUserCommand = new UserCommandBuilder();\n\tvar guildMessageCommand = new MessageCommandBuilder();\n\n    // Note: Names have to be all lowercase and match the regular expression ^[\\w -]{3,32}$\n    guildUserCommand.WithName(\"Guild User Command\");\n\tguildMessageCommand.WithName(\"Guild Message Command\");\n\n    // Descriptions are not used with User and Message commands\n    //guildCommand.WithDescription(\"\");\n\n    // Let's do our global commands\n    var globalUserCommand = new UserCommandBuilder();\n    globalUserCommand.WithName(\"Global User Command\");\n\tvar globalMessageCommand = new MessageCommandBuilder();\n\tglobalMessageCommand.WithName(\"Global Message Command\");\n\n\n    try\n    {\n        // Now that we have our builder, we can call the BulkOverwriteApplicationCommandAsync to make our context commands. Note: this will overwrite all your previous commands with this array.\n        await guild.BulkOverwriteApplicationCommandAsync(new ApplicationCommandProperties[]\n        {\n            guildUserCommand.Build(),\n            guildMessageCommand.Build()\n        });\n\n        // With global commands we dont need the guild.\n        await client.BulkOverwriteGlobalApplicationCommandsAsync(new ApplicationCommandProperties[]\n        {\n            globalUserCommand.Build(),\n            globalMessageCommand.Build()\n        });\n    }\n    catch(ApplicationCommandException exception)\n    {\n        // If our command was invalid, we should catch an ApplicationCommandException. This exception contains the path of the error as well as the error message. You can serialize the Error field in the exception to get a visual of where your error is.\n        var json = JsonConvert.SerializeObject(exception.Error, Formatting.Indented);\n\n        // You can send this error somewhere or just print it to the console, for this example we're just going to print it.\n        Console.WriteLine(json);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Application Role Connections in Discord.NET\nDESCRIPTION: Demonstrates fetching and updating user's application role connection metadata. Requires 'role_connections.write' scope.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/bearer_token/bearer_token_guide.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar roleConnection = await client.GetUserApplicationRoleConnectionAsync(applicationId);\n\nvar props = new RoleConnectionProperties\n{\n    PlatformName = \"Discord\",\n    PlatformUsername = \"username\"\n};\nawait client.ModifyUserApplicationRoleConnectionAsync(applicationId, props);\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Parameters\nDESCRIPTION: Demonstrates how to create slash commands with complex parameter types using constructor methods.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// samples/intro/complexparams.cs reference\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Interaction Commands\nDESCRIPTION: Shows how to handle component interactions with wild card pattern matching.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// samples/intro/button.cs reference\n```\n\n----------------------------------------\n\nTITLE: Registering Concrete TypeConverters\nDESCRIPTION: This code snippet shows how to register a concrete `TypeConverter` instance with the Interaction Service. An instance of the custom converter (`StringArrayConverter`) is created and then added to the service using the `AddTypeConverter()` method, associating it with a specific type (`string[]`).\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/typeconverters.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ninteractionService.AddTypeConverter<string[]>(new StringArrayConverter());\n```\n\n----------------------------------------\n\nTITLE: Discord.NET Button Parameters Table\nDESCRIPTION: A markdown table defining the key parameters available in the WithButton function, including their types and descriptions.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/buttons-in-depth.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description |\n|----------|---------------|----------------------------------------------------------------|\n| label | `string` | The label text for the button. |\n| customId | `string` | The custom id of the button. |\n| style | `ButtonStyle` | The style of the button. |\n| emote | `IEmote` | A IEmote to be used with this button. |\n| url | `string` | A URL to be used only if the `ButtonStyle` is a Link. |\n| disabled | `bool` | Whether or not the button is disabled. |\n| row | `int` | The row to place the button if it has enough room, otherwise 0 |\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Button Command in Discord.NET\nDESCRIPTION: Shows the complete implementation of a command that creates and sends a message with an interactive button component. Combines the ComponentBuilder with ReplyAsync to send the message.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/intro.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Command(\"spawner\")]\npublic async Task Spawn()\n{\n    var builder = new ComponentBuilder()\n        .WithButton(\"label\", \"custom-id\");\n\n    await ReplyAsync(\"Here is a button!\", components: builder.Build());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Service Implementations in C#\nDESCRIPTION: Demonstrates how to automatically register all types in an assembly that implement a specific interface. Uses reflection to find and register service implementations with the dependency injection container.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/scaling.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton(new ServiceActivator(serviceProvider));\n\nvar assembly = Assembly.GetEntryAssembly();\nvar types = assembly.GetTypes()\n    .Where(x => !x.IsInterface\n        && !x.IsAbstract\n        && x.GetInterface(interfaceType.Name) != null);\n\nforeach (var type in types)\n    services.AddTransient(interfaceType, type);\n\nservices.AddTransient(activatorType);\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Menu with SelectMenuBuilder in C#\nDESCRIPTION: This snippet demonstrates the creation of a select menu using the SelectMenuBuilder provided by the Discord.NET library. The menu includes placeholder, custom ID, and options for users to select.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/select-menus.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar menuBuilder = new SelectMenuBuilder()\\n    .WithPlaceholder(\"Select an option\")\\n    .WithCustomId(\"menu-1\")\\n    .WithMinValues(1)\\n    .WithMaxValues(1)\\n    .AddOption(\"Option A\", \"opt-a\", \"Option B is lying!\")\\n    .AddOption(\"Option B\", \"opt-b\", \"Option A is telling the truth!\");\\n\\nvar builder = new ComponentBuilder()\\n    .WithSelectMenu(menuBuilder);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Ratelimit Callback Function in C#\nDESCRIPTION: This method serves as a callback for handling Discord API ratelimit information. It prints all the ratelimit information properties to the console, including global status, limits, remaining requests, reset times, bucket information, and endpoint details.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/concepts/ratelimits.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task MyRatelimitCallback(IRateLimitInfo info)\n{\n    Console.WriteLine($\"{info.IsGlobal} {info.Limit} {info.Remaining} {info.RetryAfter} {info.Reset} {info.ResetAfter} {info.Bucket} {info.Lag} {info.Endpoint}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Service Activation in C#\nDESCRIPTION: Implements the service activation logic that iterates through all registered services of a specific type and executes their startup code.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/scaling.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task ActivateAsync()\n{\n    var services = _provider.GetServices<IService>();\n    foreach (var service in services)\n        await service.StartAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Text Input in Discord.NET\nDESCRIPTION: Demonstrates the creation of a simple text input component using TextInputBuilder with basic required properties including label and custom ID.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/text-input.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar tb = new TextInputBuilder()\n    .WithLabel(\"My Text\")\n    .WithCustomId(\"text_input\");\n```\n\n----------------------------------------\n\nTITLE: Creating Custom TypeReader in C#\nDESCRIPTION: Example implementation of a custom TypeReader class that parses a string into a custom data type. The ReadAsync method is overridden to provide custom parsing logic with success and error handling.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/typereaders.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PokemonTypeReader : TypeReader\n{\n    public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services)\n    {\n        // Implement a way to convert the input string into your type...\n        Pokemon result = PokemonFactory.Get(input);\n        \n        if (result != null)\n            return Task.FromResult(TypeReaderResult.FromSuccess(result));\n\n        return Task.FromResult(TypeReaderResult.FromError(CommandError.ParseFailed, \"Input could not be parsed as a Pokemon.\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor-Based Dependency Injection in C#\nDESCRIPTION: Demonstrates how to implement dependency injection through a constructor, which is the preferred approach as it ensures immutability and encapsulation of injected services.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/injection.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Constructor Injection](samples/ctor-injecting.cs)]\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord Command Handler in C#\nDESCRIPTION: This C# snippet illustrates the bare minimum structure for initializing a command handler using Discord.Net's CommandService. Dependencies such as CommandServiceConfig can be included to set default values. The primary purpose is to demonstrate the setup required to start handling commands in a Discord bot.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Command Handler](samples/intro/command_handler.cs)]\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering Discord Message Command\nDESCRIPTION: Demonstrates how to create a new message command and register it with a Discord guild using BulkOverwriteApplicationCommandAsync.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/advanced.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar command = new MessageCommandBuilder()\n    .WithName(\"testing\").Build();\n\nawait client.GetGuild(guildId).BulkOverwriteApplicationCommandAsync(new [] { command, buttonCommand });\n```\n\n----------------------------------------\n\nTITLE: Using IEnumerable in Named Arguments in C#\nDESCRIPTION: Demonstrates a property in a named arguments class allowing multiple integer values by using `IEnumerable<int>`. This setup permits a command invocation style where multiple numbers can be specified within a single named argument.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/namedarguments.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<int> Numbers { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Handling Select Menu Interactions\nDESCRIPTION: Implements a select menu handler that processes user interactions, updates the menu state, and modifies the original message content using UpdateAsync. The handler disables the menu after selection and displays the user's choice.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/advanced.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nclient.SelectMenuExecuted += SelectMenuHandler;\n\n...\n\npublic async Task SelectMenuHandler(SocketMessageComponent arg)\n{\n    switch (arg.Data.CustomId)\n    {\n        case \"select-1\":\n            var value = arg.Data.Values.First();\n            var menu = new SelectMenuBuilder()\n            {\n                CustomId = \"select-1\",\n                Placeholder = $\"{(arg.Message.Components.First().Components.First() as SelectMenu).Options.FirstOrDefault(x => x.Value == value).Label}\",\n                MaxValues = 1,\n                MinValues = 1,\n                Disabled = true\n            };\n    \n            menu.AddOption(\"Meh\", \"1\", \"Its not gaming.\")\n                .AddOption(\"Ish\", \"2\", \"Some would say that this is gaming.\")\n                .AddOption(\"Moderate\", \"3\", \"It could pass as gaming\")\n                .AddOption(\"Confirmed\", \"4\", \"We are gaming\")\n                .AddOption(\"Excellent\", \"5\", \"It is renowned as gaming nation wide\", new Emoji(\"🔥\"));\n    \n            // We use UpdateAsync to update the message and its original content and components.\n            await arg.UpdateAsync(x =>\n            {\n                x.Content = $\"Thank you {arg.User.Mention} for rating us {value}/5 on the gaming scale\";\n                x.Components = new ComponentBuilder().WithSelectMenu(menu).Build();\n            });\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies into Discord.NET Modules in C#\nDESCRIPTION: This code shows how to inject dependencies into Discord.NET modules. It demonstrates constructor injection and property injection, including the use of the DontInjectAttribute to prevent injection for specific properties.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/services.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleModule : InteractionModuleBase<SocketInteractionContext>\n{\n    public ExampleModule(ExampleService service)\n    {\n        Service = service;\n    }\n\n    public ExampleService Service { get; set; }\n    public InteractionService Commands { get; set; }\n\n    [DontInject]\n    public IServiceProvider Services { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Discord Commands in C#\nDESCRIPTION: Demonstrates different methods for registering Discord slash commands, including guild-specific and global commands. Shows examples of using CreateCommand and BulkOverwriteApplicationCommands methods.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/int_framework/manual.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Single command registration\nvar command = new SlashCommandBuilder()\n    .WithName(\"test\")\n    .WithDescription(\"Just a test command\")\n    .Build();\nawait client.Rest.CreateGuildCommand(command, guildId);\n\n// Global command registration\nawait client.Rest.CreateGlobalCommand(command);\n\n// Bulk overwrite guild commands\nvar commands = new ApplicationCommandProperties[]\n{\n    new SlashCommandBuilder()\n        .WithName(\"first\")\n        .WithDescription(\"first command\")\n        .Build(),\n    new SlashCommandBuilder()\n        .WithName(\"second\")\n        .WithDescription(\"second command\")\n        .Build()\n};\nawait client.Rest.BulkOverwriteGuildCommands(commands, guildId);\n\n// Bulk overwrite global commands\nawait client.Rest.BulkOverwriteGlobalCommands(commands);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom RuntimeResult Class - C#\nDESCRIPTION: Illustrates the creation of a subclass of RuntimeResult, allowing developers to centralize command result logic and extend it with additional information relevant to command execution.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/post-execution.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[!code[Base Use](samples/post-execution/customresult_base.cs)]\n```\n\n----------------------------------------\n\nTITLE: Handling Command Execution Errors in C# with Discord.NET\nDESCRIPTION: This snippet demonstrates how to handle post-execution logic for command execution errors in Discord.NET. It provides a structured way to log errors that occur during command execution. The function observes the CommandExecuted event to implement custom error handling.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/post-execution.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Error Review](samples/postexecution/error_review.cs)]\n```\n\n----------------------------------------\n\nTITLE: Logging Command Exceptions - C#\nDESCRIPTION: Shows how to capture and log exceptions during command execution using the CommandService.Log event, enabling better error handling and debugging for commands.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/post-execution.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[!code[Logger Sample](samples/post-execution/command_exception_log.cs)]\n```\n\n----------------------------------------\n\nTITLE: Adding Discord.Net to a .NET Project (XML)\nDESCRIPTION: Sample project file (.csproj) showing how to include Discord.Net as a dependency in a .NET project.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/getting_started/installing.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Discord.Net\" Version=\"3.4.1\" />\n  </ItemGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection with Services in Discord.Net\nDESCRIPTION: Example showing how to implement a service class and inject it into a module. The code demonstrates creating a persistent service for data storage and injecting it into a transient module.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/basics/dependency-injection.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[DI](samples/DI.cs)]\n```\n\n----------------------------------------\n\nTITLE: Service Provider Injection in C#\nDESCRIPTION: Demonstrates how to inject and use the IServiceProvider directly, useful for accessing the DI container, handling optional dependencies, and creating scopes.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/injection.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Provider Injection](samples/provider.cs)]\n```\n\n----------------------------------------\n\nTITLE: Creating Discord Embed with Local Image Attachment\nDESCRIPTION: Shows how to create an embed that includes a local image attachment. The image is referenced in the embed using the attachment protocol and sent along with the message.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/EmbedBuilder.Overwrites.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Command(\"embedimage\")]\npublic async Task SendEmbedWithImageAsync()\n{\n    var fileName = \"image.png\";\n    var embed = new EmbedBuilder()\n        {\n            ImageUrl = $\"attachment://{fileName}\"\n        }.Build();\n    await Context.Channel.SendFileAsync(fileName, embed: embed);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Module for Commands in C#\nDESCRIPTION: In this C# code snippet, an empty module is defined following the principles of Discord.Net modules, similar to ASP.NET Core's Controller pattern. The module must be public and inherit from ModuleBase, enabling automatic discovery and execution of commands within the module. It sets the stage for organizational patterns in command definitions.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/intro.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Empty Module](samples/intro/empty-module.cs)]\n```\n\n----------------------------------------\n\nTITLE: Modifying Guild Channel Properties with Discord.Net\nDESCRIPTION: Example demonstrating how to modify a guild channel's name and position properties using IGuildChannel.ModifyAsync. This retrieves a channel by ID, checks if it's a guild channel, then updates its properties.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/ObjectProperties.Overwrites.md#2025-04-21_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar channel = _client.GetChannel(id) as IGuildChannel;\nif (channel == null) return;\n\nawait channel.ModifyAsync(x =>\n{\n    x.Name = \"new-name\";\n    x.Position = channel.Position - 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Remainder Attribute in Discord.NET Commands\nDESCRIPTION: Demonstrates how to use the RemainderAttribute to handle text parameters in commands without requiring quotes. The attribute is applied to the last parameter in a command method to capture all remaining text as a single string.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/text_commands/general.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Command(\"say\")]\npublic async Task Say(string firstParameter, [Remainder] string theRest)\n{\n    // firstParameter will only contain the first word after the command\n    // theRest will contain everything else\n\n    await ReplyAsync($\"You said: {firstParameter} {theRest}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Message Properties with Discord.Net\nDESCRIPTION: Example demonstrating how to update a message's content using IUserMessage.ModifyAsync. This sends a message, waits for a second, then modifies the content of the sent message.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/ObjectProperties.Overwrites.md#2025-04-21_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nvar message = await channel.SendMessageAsync(\"boo\");\nawait Task.Delay(TimeSpan.FromSeconds(1));\nawait message.ModifyAsync(x => x.Content = \"boi\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Choice Attributes for Slash Commands\nDESCRIPTION: Shows how to add choices to slash command parameters using ChoiceAttribute.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// samples/intro/groupattribute.cs reference\n```\n\n----------------------------------------\n\nTITLE: Modifying Role Properties with Discord.Net\nDESCRIPTION: Example demonstrating how to update a role's name, color, hoist status, and mentionable status using IRole.ModifyAsync. This retrieves a role from a guild by ID, then modifies its properties.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/ObjectProperties.Overwrites.md#2025-04-21_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\nvar role = guild.GetRole(id);\nif (role == null) return;\n\nawait role.ModifyAsync(x =>\n{\n    x.Name = \"cool boi\";\n    x.Color = Color.Gold;\n    x.Hoist = true;\n    x.Mentionable = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Singleton Services for Discord.NET Modules in C#\nDESCRIPTION: This snippet illustrates the creation of a singleton service to hold persistent data across multiple command executions in Discord.NET. It includes an example of a service with a counter and methods to increment and retrieve the count.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/services.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleService\n{\n    private int _counter;\n\n    public ExampleService()\n    {\n        _counter = 0;\n    }\n\n    public Task IncrementCounterAsync()\n    {\n        _counter++;\n        return Task.CompletedTask;\n    }\n\n    public Task<int> GetCounterAsync() => Task.FromResult(_counter);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Guild Event Users with Discord.NET in C#\nDESCRIPTION: Shows two methods for retrieving users from a Discord Guild Event: getting all users in a flattened collection and getting users around a specific user ID with pagination. The GetUsersAsync method returns an async enumerable that can be flattened into a single collection.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/guild_events/getting-event-users.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// get all users and flatten the result into one collection.\nvar users = await event.GetUsersAsync().FlattenAsync();\n\n// get users around the 613425648685547541 id.\nvar aroundUsers = await event.GetUsersAsync(613425648685547541, Direction.Around).FlattenAsync();\n```\n\n----------------------------------------\n\nTITLE: Modifying Guild User Properties with Discord.Net\nDESCRIPTION: Example showing how to change a guild user's nickname using IGuildUser.ModifyAsync. This retrieves a user from a guild by ID, then updates their nickname.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/ObjectProperties.Overwrites.md#2025-04-21_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\nvar user = guild.GetUser(id);\nif (user == null) return;\n\nawait user.ModifyAsync(x =>\n{\n    x.Nickname = \"I need healing\";\n});\n```\n\n----------------------------------------\n\nTITLE: Creating User Commands\nDESCRIPTION: Shows the structure for implementing user commands that handle user-based interactions.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// samples/intro/usercommand.cs reference\n```\n\n----------------------------------------\n\nTITLE: Modifying Webhook Properties with Discord.Net\nDESCRIPTION: Example showing how to update a webhook's name and channel ID using IWebhook.ModifyAsync. This modifies both the name and the channel where the webhook will post.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/ObjectProperties.Overwrites.md#2025-04-21_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\nawait webhook.ModifyAsync(x =>\n{\n    x.Name = \"very fast fox\";\n    x.ChannelId = newChannelId;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating FFmpeg Process for Audio Streaming\nDESCRIPTION: Creates an FFmpeg process configured for streaming audio with PCM output at 48000hz sample rate. This setup is required for transmitting audio through Discord's voice system.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/voice/sending-voice.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate Process CreateStream(string path)\n{\n    return Process.Start(new ProcessStartInfo\n    {\n        FileName = \"ffmpeg\",\n        Arguments = $\"-hide_banner -loglevel panic -i \\\"{path}\\\" -ac 2 -f s16le -ar 48000 pipe:1\",\n        UseShellExecute = false,\n        RedirectStandardOutput = true,\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Property-Based Dependency Injection in C#\nDESCRIPTION: Shows how to implement dependency injection through properties. This approach is more flexible but less secure than constructor injection and may fail if services are missing.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/injection.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Property Injection](samples/property-injecting.cs)]\n```\n\n----------------------------------------\n\nTITLE: Basic Safety Casting in Discord.Net C#\nDESCRIPTION: Shows how to safely cast an entity by checking its type before accessing properties. This prevents null reference exceptions by verifying the entity is a SocketGuildUser before attempting to access guild-specific properties.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/casting.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// This function takes a IUser, but we want to see if it's a SocketGuildUser\npublic void DoSomething(IUser user)\n{\n    // We check if the boxed object is our type\n    if (user is SocketGuildUser)\n    {\n        // We cast from the interface to the definition itself\n        var guildUser = user as SocketGuildUser;\n        \n        // We can now access its properties\n        var nickname = guildUser.Nickname;\n        var roles = guildUser.Roles;\n        var guild = guildUser.Guild;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Preconditions in Discord.Net C#\nDESCRIPTION: This snippet demonstrates how to apply precondition attributes to command methods in Discord.Net. Preconditions like RequireContextAttribute or RequireRoleAttribute can be used for specifying the conditions a user or context must meet to execute the command.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/preconditions.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nsamples/preconditions/precondition_usage.cs\n```\n\n----------------------------------------\n\nTITLE: Modifying Discord Guild Events using ModifyAsync Properties\nDESCRIPTION: Lists the available properties that can be modified for a Discord guild event using the ModifyAsync method. Properties include ChannelId (ulong?), location (string), Name (string), PrivacyLevel (GuildScheduledEventPrivacyLevel), StartTime and EndTime (DateTimeOffset), Description (string), Type (GuildScheduledEventType), and Status (GuildScheduledEventStatus). All properties are optional when modifying an event.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/guild_events/modifying-events.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait guildEvent.ModifyAsync(props => {\n    props.ChannelId = 123456789;\n    props.Name = \"Updated Event Name\";\n    props.Description = \"Updated event description\";\n    props.StartTime = DateTimeOffset.Now.AddDays(1);\n    props.EndTime = DateTimeOffset.Now.AddDays(2);\n    props.PrivacyLevel = GuildScheduledEventPrivacyLevel.GuildOnly;\n    props.Type = GuildScheduledEventType.Voice;\n    props.Status = GuildScheduledEventStatus.Active;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Context Types in C#\nDESCRIPTION: Demonstrates working with different interaction context types and accessing interaction-specific information\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleModule : InteractionModuleBase<SocketInteractionContext<IComponentInteraction>>\n{\n    public async Task HandleButtonAsync()\n    {\n        await Context.Interaction.UpdateAsync(x =>\n        {\n            x.Content = \"Button Clicked!\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Comparer Implementation for Discord.NET\nDESCRIPTION: Gets an IEqualityComparer implementation for comparing IChannel objects in Discord.NET. Used to compare Discord channels based on their unique identifiers.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/DiscordComparers.Overwrites.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nDiscord.DiscordComparers.ChannelComparer\n```\n\n----------------------------------------\n\nTITLE: Configuring DM Restrictions in Discord.NET Commands\nDESCRIPTION: Demonstrates how to block commands from being executed in DMs using the EnabledInDm attribute. This only applies to global-level commands.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[EnabledInDm(false)]\npublic class ExampleModule : InteractionModuleBase<SocketInteractionContext>\n{\n    [SlashCommand(\"ban\", \"Ban a user from the server.\")]\n    public async Task BanAsync()\n    {\n        // Command implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Comparer Implementation for Discord.NET\nDESCRIPTION: Gets an IEqualityComparer implementation for comparing IMessage objects in Discord.NET. Used to compare Discord messages based on their unique identifiers.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/DiscordComparers.Overwrites.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nDiscord.DiscordComparers.MessageComparer\n```\n\n----------------------------------------\n\nTITLE: Using DbContext in Discord.NET Interaction Module\nDESCRIPTION: Shows how to inject and use the DbContext within a Discord.NET interaction module for database operations.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/efcore.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleModule : InteractionModuleBase<SocketInteractionContext>\n{\n    private readonly ExampleDbContext _context;\n\n    public ExampleModule(ExampleDbContext context)\n    {\n        _context = context;\n    }\n\n    [SlashCommand(\"example\", \"An example command\")]\n    public async Task ExampleCommand()\n    {\n        // Use your context here\n        await _context.SampleEntities.ToListAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Role Comparer Implementation for Discord.NET\nDESCRIPTION: Gets an IEqualityComparer implementation for comparing IRole objects in Discord.NET. Used to compare Discord roles based on their unique identifiers.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/DiscordComparers.Overwrites.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nDiscord.DiscordComparers.RoleComparer\n```\n\n----------------------------------------\n\nTITLE: Joining Voice Channel in Discord.NET\nDESCRIPTION: Example of joining a Discord voice channel using IAudioChannel.ConnectAsync(). Requires GatewayIntents.GuildVoiceStates and GatewayIntents.Guilds intents.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/voice/sending-voice.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Command(\"join\", RunMode = RunMode.Async)]\npublic async Task JoinChannel(IVoiceChannel channel = null)\n{\n    channel = channel ?? (Context.User as IGuildUser)?.VoiceChannel;\n    if (channel == null) { await Context.Channel.SendMessageAsync(\"User must be in a voice channel, or a voice channel must be passed as an argument.\"); return; }\n\n    var audioClient = await channel.ConnectAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Overwrite for Discord Slash Commands in C#\nDESCRIPTION: Demonstrates how to create and bulk overwrite multiple global slash commands for a Discord bot. The code shows creation of a simple help command and a command with parameters, then bulk overwrites them using BulkOverwriteGlobalApplicationCommandsAsync. Includes error handling for application command exceptions.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/bulk-overwrite-of-global-slash-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task Client_Ready()\n{\n    List<ApplicationCommandProperties> applicationCommandProperties = new();\n    try\n    {\n        // Simple help slash command.\n        SlashCommandBuilder globalCommandHelp = new SlashCommandBuilder();\n        globalCommandHelp.WithName(\"help\");\n        globalCommandHelp.WithDescription(\"Shows information about the bot.\");\n        applicationCommandProperties.Add(globalCommandHelp.Build());\n\n        // Slash command with name as its parameter.\n        SlashCommandOptionBuilder slashCommandOptionBuilder = new();\n        slashCommandOptionBuilder.WithName(\"name\");\n        slashCommandOptionBuilder.WithType(ApplicationCommandOptionType.String);\n        slashCommandOptionBuilder.WithDescription(\"Add a family\");\n        slashCommandOptionBuilder.WithRequired(true); // Only add this if you want it to be required\n\n        SlashCommandBuilder globalCommandAddFamily = new SlashCommandBuilder();\n        globalCommandAddFamily.WithName(\"add-family\");\n        globalCommandAddFamily.WithDescription(\"Add a family\");\n        globalCommandAddFamily.AddOptions(slashCommandOptionBuilder);\n        applicationCommandProperties.Add(globalCommandAddFamily.Build());\n\n        await _client.BulkOverwriteGlobalApplicationCommandsAsync(applicationCommandProperties.ToArray());\n    }\n    catch (ApplicationCommandException exception)\n    {\n        var json = JsonConvert.SerializeObject(exception.Error, Formatting.Indented);\n        Console.WriteLine(json);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering TypeReader in Discord.NET\nDESCRIPTION: Example showing how to register a custom TypeReader with the CommandService. TypeReaders must be registered before module discovery for proper functionality.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/typereaders.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nCommandService commands = new CommandService();\ncommands.AddTypeReader<Pokemon>(new PokemonTypeReader());\n```\n\n----------------------------------------\n\nTITLE: Registering Scoped Dependencies in Discord.NET\nDESCRIPTION: Shows how to register scoped services that create new instances per scope but maintain the same instance within that scope. Typically used for HTTP and database request handling.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/types.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddScoped<IService, ServiceImplementation>();\nservices.AddScoped<ServiceImplementation>();\nservices.AddScoped(provider => new ServiceImplementation());\n```\n\n----------------------------------------\n\nTITLE: Handling Command Exceptions in Discord.NET C#\nDESCRIPTION: Example demonstrating how to implement a log handler that processes CommandException instances. Shows how to extract information about the command that failed, including the base exception type, command alias, channel, and user.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Commands/CommandException.Overwrite.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task LogHandlerAsync(LogMessage logMessage)\n{\n    // Note that this casting method requires C#7 and up.\n    if (logMessage?.Exception is CommandException cmdEx)\n    {\n        Console.WriteLine($\"{cmdEx.GetBaseException().GetType()} was thrown while executing {cmdEx.Command.Aliases.First()} in {cmdEx.Context.Channel} by {cmdEx.Context.User}.\");\n    }\n    return Task.CompletedTask;\n}\n```\n\n----------------------------------------\n\nTITLE: User Entity Types in Discord.NET\nDESCRIPTION: Defines the various user types in Discord.NET including guild users, group users, and self users.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/glossary.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIGuildUser // User in a guild\nIGroupUser // User in a group\nISelfUser // Bot user\nIUser // Any user type\n```\n\n----------------------------------------\n\nTITLE: Stacking GatewayIntents using bitwise OR operator (C#)\nDESCRIPTION: This snippet demonstrates how to combine multiple `GatewayIntents` using the bitwise OR operator (`|`). This allows developers to selectively enable specific intents based on their application's needs.  It's crucial to understand which intents are required and to enable them both in the code and on the Discord developer portal to avoid unexpected behavior.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/v2_v3_guide/v2_to_v3_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n```cs\n\nGatewayIntents = GatewayIntents.AllUnprivileged | GatewayIntents.GuildMembers | ..\n\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring JSON Localization Resources in Discord.NET\nDESCRIPTION: Example JSON structure for localization resources used by JsonLocalizationManager. This nested data structure organizes commands, parameters, and their localized names and descriptions in a format similar to Discord's Application Commands schema.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"command_1\":{\n        \"name\": \"localized_name\",\n        \"description\": \"localized_description\",\n        \"parameter_1\":{\n            \"name\": \"localized_name\",\n            \"description\": \"localized_description\"\n        }\n    },\n    \"group_1\":{\n        \"name\": \"localized_name\",\n        \"description\": \"localized_description\",\n        \"command_1\":{\n            \"name\": \"localized_name\",\n             \"description\": \"localized_description\",\n             \"parameter_1\":{\n                 \"name\": \"localized_name\",\n                  \"description\": \"localized_description\"\n            },\n            \"parameter_2\":{\n                 \"name\": \"localized_name\",\n                  \"description\": \"localized_description\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordRestClient with Bearer Token in C#\nDESCRIPTION: Shows how to create and initialize a DiscordRestClient instance for Bearer token authentication. The client is configured with token type Bearer for OAuth2 authentication.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/bearer_token/bearer_token_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new DiscordRestClient();\nawait client.LoginAsync(TokenType.Bearer, \"token\");\n```\n\n----------------------------------------\n\nTITLE: Creating Button Component with ComponentBuilder\nDESCRIPTION: Demonstrates how to create a basic button component using ComponentBuilder. Specifies a label and custom ID for the button.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/intro.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = new ComponentBuilder()\n    .WithButton(\"label\", \"custom-id\");\n```\n\n----------------------------------------\n\nTITLE: Registering Transient Dependencies in Discord.NET\nDESCRIPTION: Illustrates registration of transient services that create new instances on each request. Suitable for lightweight, stateless operations like Discord.NET modules that are disposed after command execution.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/types.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<IService, ServiceImplementation>();\nservices.AddTransient<ServiceImplementation>();\nservices.AddTransient(provider => new ServiceImplementation());\n```\n\n----------------------------------------\n\nTITLE: Configuring Serilog in Discord.NET Bot\nDESCRIPTION: Configures Serilog at the application startup in the async Main method. Sets up console logging with minimum level and output template.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/serilog.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nLog.Logger = new LoggerConfiguration()\n    .MinimumLevel.Debug()\n    .WriteTo.Console(outputTemplate: \"[{Timestamp:yyyy-MM-dd HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}\")\n    .CreateLogger();\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with Basic Post-execution Logic - C#\nDESCRIPTION: Demonstrates storing the result after a command execution and sending it to the chat. This basic post-execution handler is fundamental for command development.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/post-execution.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code[Command Handler](samples/intro/command_handler.cs)]\n```\n\n----------------------------------------\n\nTITLE: Mapping Discord LogSeverity to Serilog LogEventLevel\nDESCRIPTION: Custom log method that maps Discord.NET's LogSeverity levels to corresponding Serilog LogEventLevel values for consistent logging across the application.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/serilog.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static Task OnLogAsync(LogMessage msg)\n{\n    var severity = msg.Severity switch\n    {\n        LogSeverity.Critical => LogEventLevel.Fatal,\n        LogSeverity.Error => LogEventLevel.Error,\n        LogSeverity.Warning => LogEventLevel.Warning,\n        LogSeverity.Info => LogEventLevel.Information,\n        LogSeverity.Verbose => LogEventLevel.Verbose,\n        LogSeverity.Debug => LogEventLevel.Debug,\n        _ => LogEventLevel.Information\n    };\n    Log.Write(severity, msg.Exception, msg.Message);\n    return Task.CompletedTask;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RunAsync with Dependency Injection\nDESCRIPTION: Demonstrates how to use the configured dependency injection system in the RunAsync method, showing how to access registered services through the provider.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/basics.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Applying DI in RunAsync](samples/runasync.cs)]\n```\n\n----------------------------------------\n\nTITLE: Running .NET Core Application with dotnet Runtime\nDESCRIPTION: Command to run a .NET Core application using the dotnet runtime. This is typically used after navigating to the program's folder, usually located in the Release directory.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/deployment/deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet program.dll\n```\n\n----------------------------------------\n\nTITLE: Using CommandExecuted Event for Post-execution Handling - C#\nDESCRIPTION: Shows the use of the CommandExecuted event to streamline post-execution workflows without the issues related to RunMode.Async, providing a cleaner pipeline for handling command results.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/post-execution.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[!code[CommandExecuted demo](samples/post-execution/command_executed_demo.cs)]\n```\n\n----------------------------------------\n\nTITLE: Discord Custom Emote Format Example\nDESCRIPTION: Demonstrates the format for Discord custom emotes using the format <:emoteName:emoteId>. Can be obtained by escaping an emote with \\ in Discord chat.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/IEmote.Overwrites.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<:emoteName:emoteId>\n```\n\n----------------------------------------\n\nTITLE: Setting RunMode via CommandAttribute in Discord.NET\nDESCRIPTION: Shows how to configure a command's RunMode through the CommandAttribute. Setting RunMode.Async allows the command to execute on a separate thread, preventing gateway blocking for long-running commands.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/text_commands/general.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Command(\"longrunning\", RunMode = RunMode.Async)]\npublic async Task LongRunning()\n{\n    // This command will be executed on a different thread\n    // than the gateway one.\n\n    await Task.Delay(10000);\n    await ReplyAsync(\"This command took a while!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Build Override in C#\nDESCRIPTION: Example showing how to add a build override and hook into its logging system. The code demonstrates setting up a log handler and adding an override asynchronously.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/build_overrides/what-are-they.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task MainAsync()\n{\n  // hook into the log function\n  BuildOverrides.Log += (buildOverride, message) =>\n  {\n    Console.WriteLine($\"{buildOverride.Name}: {message}\");\n    return Task.CompletedTask;\n  };\n\n  // add your overrides\n  await BuildOverrides.AddOverrideAsync(\"example-override-name\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Command Events in C#\nDESCRIPTION: Example showing how to execute commands from interaction events. Shows interaction service handling pattern.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nclient.InteractionCreated += async (interaction) =>\n{\n    var ctx = new SocketInteractionContext(client, interaction);\n    await _commands.ExecuteCommandAsync(ctx, services);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Precondition in Discord.NET\nDESCRIPTION: This example shows how to create a custom precondition by inheriting from PreconditionAttribute or ParameterPreconditionAttribute and overriding the CheckPermissionsAsync method to enforce custom logic.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/preconditions.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Custom Precondition](samples/preconditions/require_role.cs)]\n```\n\n----------------------------------------\n\nTITLE: Configuring MediatR Dependency Injection in C#\nDESCRIPTION: This code snippet demonstrates how to configure MediatR in the dependency injection container of a Discord bot project. It uses the MediatR.Extensions.Microsoft.DependencyInjection package to simplify the process. The main requirement is to have a type from the event handlers' assembly when calling .AddMediatR().\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/mediatr.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Configuring MediatR](samples/MediatrConfiguringDI.cs)]\n```\n\n----------------------------------------\n\nTITLE: ORing Preconditions in Discord.NET\nDESCRIPTION: This snippet illustrates how to group multiple preconditions and execute a command if at least one precondition passes, utilizing the Group property of a precondition attribute.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/preconditions.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[OR Precondition](samples/preconditions/group_precondition.cs)]\n```\n\n----------------------------------------\n\nTITLE: Grouping Preconditions for OR Logic in Discord.Net C#\nDESCRIPTION: This example illustrates how to use the Group property for ORing multiple preconditions in Discord.Net. By assigning preconditions to a group, the command can be executed if any of the preconditions in the group are met, providing flexible command handling.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/preconditions.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nsamples/preconditions/group_precondition.cs\n```\n\n----------------------------------------\n\nTITLE: Creating Polls in Discord.Net\nDESCRIPTION: Example showing how to create a poll using PollProperties object with SendMessageAsync method. Demonstrates setting poll options and duration.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/polls/polls.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Creating polls](samples/create-poll.cs)]\n```\n\n----------------------------------------\n\nTITLE: Adding DbContext to Dependency Injection Container\nDESCRIPTION: Demonstrates how to configure the DbContext in the dependency injection container with PostgreSQL connection settings.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/efcore.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddDbContext<ExampleDbContext>(options =>\n    options.UseNpgsql(\"Your connection string here\"));\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Listener with MediatR in C#\nDESCRIPTION: This code snippet illustrates the creation of a class that listens to Discord events and uses MediatR to publish those events. It retrieves the DiscordSocketClient from the dependency injection container to register and handle the MessageReceived event, publishing it via MediatR.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/mediatr.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Creating an event listener](samples/MediatrDiscordEventListener.cs)]\n```\n\n----------------------------------------\n\nTITLE: Nesting Permissions in Discord.NET Modules\nDESCRIPTION: Shows how to nest permissions across multiple levels of command modules, with permissions being inherited from parent classes.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/permissions.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[EnabledInDm(false)]\n[DefaultMemberPermissions(GuildPermission.Administrator)]\npublic class ParentModule : InteractionModuleBase<SocketInteractionContext>\n{\n    [DefaultMemberPermissions(GuildPermission.BanMembers)]\n    public class ChildModule : InteractionModuleBase<SocketInteractionContext>\n    {\n        // Commands here require both Administrator and BanMembers permissions\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Current User Details in Discord.NET\nDESCRIPTION: Demonstrates how to retrieve the currently authenticated user's information. Shows both direct property access and async fetch method.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/bearer_token/bearer_token_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar currentUser = client.CurrentUser;\n// or\nvar user = await client.GetCurrentUserAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Registration in C#\nDESCRIPTION: Example showing how to register Discord application commands globally and to specific guilds. Demonstrates command registration timing and scoping.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task Initialize()\n{\n    // Register commands globally\n    await _commands.RegisterCommandsGloballyAsync();\n    // Register commands to a specific guild\n    await _commands.RegisterCommandsToGuildAsync(guildId, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Handler with MediatR in C#\nDESCRIPTION: This code snippet demonstrates how to implement a notification handler for the MessageReceivedNotification. By implementing the INotificationHandler<> interface provided by MediatR, the handler class is set to process dispatched notifications.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/mediatr.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Creating an event listener](samples/MediatrMessageReceivedHandler.cs)]\n```\n\n----------------------------------------\n\nTITLE: Unboxing Entities in Discord.Net C#\nDESCRIPTION: Example showing how to unbox a Discord.Net entity from its interface to access its full properties. This direct method uses explicit casting with parentheses to convert an IUser to a SocketUser.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/casting.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// This function takes a IUser, but we want to get the SocketUser definition\npublic void DoSomething(IUser user)\n{\n    // We cast from the interface to the definition itself\n    var socketUser = (SocketUser)user;\n    \n    // We can now access its properties\n    var status = socketUser.Status;\n    var activities = socketUser.Activities;\n    var client = socketUser.Discord;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Dependencies in Discord.Net Modules\nDESCRIPTION: Example demonstrating how to properly register dependencies in the service container. Shows the correct way to register external dependencies to prevent missing dependency errors.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/basics/dependency-injection.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Missing Dependencies](samples/missing-dep.cs)]\n```\n\n----------------------------------------\n\nTITLE: Starting the MediatR Event Listener in C#\nDESCRIPTION: This snippet shows how to start the DiscordEventListener by adding it to the dependency injection container and invoking its StartAsync() method in the main function.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/mediatr.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Starting the event listener](samples/MediatrStartListener.cs)]\n```\n\n----------------------------------------\n\nTITLE: Stacking Gateway Intents in Discord.NET C#\nDESCRIPTION: Shows how to combine multiple gateway intents using the bitwise OR operator. This is useful when you need to specify several intents for your Discord bot.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/basics/client-basics.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nGatewayIntents = GatewayIntents.AllUnprivileged | GatewayIntents.GuildMembers | ..\n```\n\n----------------------------------------\n\nTITLE: Modifying Text Channel Properties with Discord.Net\nDESCRIPTION: Example showing how to update a text channel's name, topic, position, and NSFW status using ITextChannel.ModifyAsync. This retrieves a channel by ID, casts it to ITextChannel, then modifies its properties.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/ObjectProperties.Overwrites.md#2025-04-21_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar channel = _client.GetChannel(id) as ITextChannel;\nif (channel == null) return;\n\nawait channel.ModifyAsync(x =>\n{\n    x.Name = \"cool-guys-only\";\n    x.Topic = \"This channel is only for cool guys and adults!!!\";\n    x.Position = channel.Position - 1;\n    x.IsNsfw = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Safety Casting with Object Declaration in Discord.Net C#\nDESCRIPTION: Shows how to safely cast with inline variable declaration using pattern matching. This combines type checking and variable assignment in a single statement, allowing immediate access to properties when the cast succeeds.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/casting.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// This function takes a IUser, but we want to see if it's a SocketGuildUser\npublic void DoSomething(IUser user)\n{\n    // We check if the boxed object is our type, and if so, immediately create the object\n    if (user is SocketGuildUser guildUser)\n    {\n        // We can now access its properties\n        var nickname = guildUser.Nickname;\n        var roles = guildUser.Roles;\n        var guild = guildUser.Guild;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Click Handler in Discord.NET\nDESCRIPTION: Demonstrates how to implement a button click handler that responds to specific custom IDs. The handler checks the component's CustomId and responds with a message mentioning the user who clicked the button.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/responding-to-buttons.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task MyButtonHandler(SocketMessageComponent component)\n{\n    // We can now check for our custom id\n    switch(component.Data.CustomId)\n    {\n        // Since we set our buttons custom id as 'custom-id', we can check for it like this:\n        case \"custom-id\":\n            // Lets respond by sending a message saying they clicked the button\n            await component.RespondAsync($\"{component.User.Mention} has clicked the button!\");\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Voice Channel Properties with Discord.Net\nDESCRIPTION: Example demonstrating how to set a user limit on a voice channel using IVoiceChannel.ModifyAsync. This retrieves a channel by ID, checks if it's a voice channel, then updates its user limit property.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/ObjectProperties.Overwrites.md#2025-04-21_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nvar channel = _client.GetChannel(id) as IVoiceChannel;\nif (channel == null) return;\n\nawait channel.ModifyAsync(x =>\n{\n    x.UserLimit = 5;\n});\n```\n\n----------------------------------------\n\nTITLE: Message Entity Types in Discord.NET\nDESCRIPTION: Defines the different types of messages in Discord.NET including followup messages, interaction messages, user messages, and system messages.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/glossary.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nRestFollowupMessage // Interaction followup message\nRestInteractionMessage // Original interaction response\nRestUserMessage // REST-based user message\nIUserMessage // User-sent message\nISystemMessage // Discord system message\nIMessage // Any message type\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom WebSocket Providers for Discord.Net (C#)\nDESCRIPTION: Example code demonstrating how to configure Discord.Net to use custom WebSocket providers for environments that don't natively support WebSockets, such as older operating systems.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/getting_started/installing.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// If you're on .NET Standard 1.1, you may need to use a custom implementation\n// of WebSockets and UDP.\nvar config = new DiscordSocketConfig\n{\n    WebSocketProvider = WS4NetProvider.Instance,\n    UdpSocketProvider = UDPClientProvider.Instance\n};\nvar client = new DiscordSocketClient(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Command Structure for Discord.NET Component\nDESCRIPTION: Defines a basic command structure that will be used to spawn a message component. Uses the Command attribute to define a 'spawner' command.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/message-components/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Command(\"spawner\")]\npublic async Task Spawn()\n{\n    // Reply with some components\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Singleton Dependencies in Discord.NET\nDESCRIPTION: Demonstrates how to register singleton services that maintain a single instance throughout the application lifetime. Commonly used for Discord client and interaction/command services where state sharing is important.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/types.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<IService, ServiceImplementation>();\nservices.AddSingleton<ServiceImplementation>();\nservices.AddSingleton(new ServiceImplementation());\n```\n\n----------------------------------------\n\nTITLE: Accessing REST Entities in Discord.Net\nDESCRIPTION: Shows how to work with REST entities in Discord.Net using either DiscordSocketClient's Rest property or a standalone DiscordRestClient.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nrestentities.cs\n```\n\n----------------------------------------\n\nTITLE: Configuring Default RunMode in CommandServiceConfig\nDESCRIPTION: Demonstrates how to set the default RunMode for all commands through CommandServiceConfig. This approach allows global configuration of command execution behavior when initializing the CommandService.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/text_commands/general.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar commandService = new CommandService(new CommandServiceConfig\n{\n    DefaultRunMode = RunMode.Async,\n    // other configurations\n});\n```\n\n----------------------------------------\n\nTITLE: Getting User Connections in Discord.NET\nDESCRIPTION: Shows how to fetch user's connected platform accounts. Requires 'connections' scope in OAuth2 permissions.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/bearer_token/bearer_token_guide.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar connections = await client.GetConnectionsAsync();\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord.NET Context Command Handlers\nDESCRIPTION: Demonstrates how to set up event handlers for Discord.NET message and user context commands. Shows registration of event handlers and implementation of async handler methods that receive SocketMessageCommand and SocketUserCommand arguments.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/context-menu-commands/receiving-context-menu-command-events.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// For message commands\nclient.MessageCommandExecuted += MessageCommandHandler;\n\n// For user commands\nclient.UserCommandExecuted += UserCommandHandler;\n\n...\n\npublic async Task MessageCommandHandler(SocketMessageCommand arg)\n{\n    Console.WriteLine(\"Message command received!\");\n}\n\npublic async Task UserCommandHandler(SocketUserCommand arg)\n{\n    Console.WriteLine(\"User command received!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Interaction Entity Types in Discord.NET\nDESCRIPTION: Defines interaction types in Discord.NET including slash commands, message commands, user commands, and component interactions.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/glossary.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nISlashCommandInteraction // Slash command\nIMessageCommandInteraction // Message-targeting command\nIUserCommandInteraction // User-targeting command\nIApplicationCommandInteraction // Any application command\nIMessageComponent // Button/dropdown interaction\nIAutocompleteinteraction // Autocomplete interaction\nIDiscordInteraction // Any interaction type\n```\n\n----------------------------------------\n\nTITLE: Accessing Guild Events Through Socket Guilds in C#\nDESCRIPTION: Shows how to access guild events using the Events property when working with socket guilds. This provides a more direct access to guild events.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/guild_events/intro.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar guildEvents = guild.Events;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Guild Events Using GetEventsAsync in C#\nDESCRIPTION: Demonstrates how to retrieve guild events using the GetEventsAsync method on a guild object. This is the standard way to access guild events when not using socket guilds.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/guild_events/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar guildEvents = await guild.GetEventsAsync();\n```\n\n----------------------------------------\n\nTITLE: Registering Guild Event Gateway Handlers in C#\nDESCRIPTION: Demonstrates the available gateway events for guild scheduled events including cancellation, completion, creation, updates, and user interaction events.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/guild_events/intro.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Fired when a guild event is cancelled.\nclient.GuildScheduledEventCancelled += ...\n\n// Fired when a guild event is completed.\nclient.GuildScheduledEventCompleted += ...\n\n// Fired when a guild event is started.\nclient.GuildScheduledEventStarted += ...\n\n// Fired when a guild event is created.\nclient.GuildScheduledEventCreated += ...\n\n// Fired when a guild event is updated.\nclient.GuildScheduledEventUpdated += ...\n\n// Fired when a guild event has someone mark themselves as interested.\nclient.GuildScheduledEventUserAdd += ...\n\n// Fired when a guild event has someone remove their interested status.\nclient.GuildScheduledEventUserRemove += ...\n```\n\n----------------------------------------\n\nTITLE: Handling Slash Command Interactions in Discord.NET\nDESCRIPTION: Shows how to handle slash command interactions using a switch statement for multiple commands and specifically processes the feedback command by creating an embedded response with the user's rating.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_basics/application-commands/slash-commands/choice-slash-command.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task SlashCommandHandler(SocketSlashCommand command)\n{\n    // Let's add a switch statement for the command name so we can handle multiple commands in one event.\n    switch(command.Data.Name)\n    {\n        case \"list-roles\":\n            await HandleListRoleCommand(command);\n            break;\n        case \"settings\":\n            await HandleSettingsCommand(command);\n            break;\n        case \"feedback\":\n            await HandleFeedbackCommand(command);\n            break;\n    }\n}\n\nprivate async Task HandleFeedbackCommand(SocketSlashCommand command)\n{\n    var embedBuilder = new EmbedBuilder()\n        .WithAuthor(command.User)\n        .WithTitle(\"Feedback\")\n        .WithDescription($\"Thanks for your feedback! You rated us {command.Data.Options.First().Value}/5\")\n        .WithColor(Color.Green)\n        .WithCurrentTimestamp();\n\n    await command.RespondAsync(embed: embedBuilder.Build());\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Discord Custom Emotes in C#\nDESCRIPTION: This snippet shows how to parse a custom Discord emote (Emote) from its raw string representation. It uses Emote.Parse or Emote.TryParse to create a valid emote object from the Discord-specific emote format.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/emoji/emoji.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// The input should look something like <:name:id>\nEmote emote1 = Emote.Parse(\"<:thinking:289862570506338307>\");\nbool success = Emote.TryParse(\"<:thinking:289862570506338307>\", out var emote2);\n```\n\n----------------------------------------\n\nTITLE: Safety Casting with Reverse Passage in Discord.Net C#\nDESCRIPTION: Demonstrates early return pattern for safety casting, where the method returns if the cast fails. This approach declares the variable and continues execution only when the entity can be successfully cast to the desired type.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/casting.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// This function takes a IUser, but we want to see if it's a SocketGuildUser\npublic bool DoSomething(IUser user)\n{\n    // We check if the boxed object is NOT our type, and if so, returns for the entire method\n    if (user is not SocketGuildUser guildUser)\n        return false;\n    \n    // We can now access its properties\n    var nickname = guildUser.Nickname;\n    var roles = guildUser.Roles;\n    var guild = guildUser.Guild;\n    \n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Activator in C#\nDESCRIPTION: Shows how to retrieve and use the service activator from the dependency injection container to manage registered services.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/dependency_injection/scaling.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar services = new ServiceCollection();\n// Register services here\nvar provider = services.BuildServiceProvider();\n\nvar activator = provider.GetRequiredService<ServiceActivator>();\nawait activator.ActivateAsync();\n```\n\n----------------------------------------\n\nTITLE: Channel Entity Types in Discord.NET\nDESCRIPTION: Defines the hierarchy and relationships between different channel types in Discord.NET including text channels, thread channels, news channels, DM channels, group channels, voice channels, and category channels.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/glossary.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nITextChannel // Guild text channel\nIThreadChannel // Thread channel\nINewsChannel // News/announcement channel\nIDMChannel // Direct message channel\nIGroupChannel // Group channel\nIPrivateChannel // DM or Group channel\nIMessageChannel // Any message-capable channel\nIGuildChannel // Any guild channel\nIVoiceChannel // Voice channel\nIStageChannel // Stage channel\nICategoryChannel // Category channel\nINestedChannel // Sub-channel under category\n```\n\n----------------------------------------\n\nTITLE: Configuring NSFW Command Permissions in Discord.NET\nDESCRIPTION: Demonstrates how to restrict commands to age-restricted channels and DMs using the NSFWAttribute.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/permissions.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[NSFW]\npublic class ExampleModule : InteractionModuleBase<SocketInteractionContext>\n{\n    [SlashCommand(\"nsfw-command\", \"This is an NSFW command.\")]\n    public async Task NsfwCommandAsync()\n    {\n        // Command implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing InteractionService with DiscordSocketClient\nDESCRIPTION: Creates a new instance of InteractionService using a DiscordSocketClient's REST client.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// _client here is DiscordSocketClient.\n// A different approach to passing in a restclient is also possible.\nvar _interactionService = new InteractionService(_client.Rest);\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Emotes from a Discord Guild in C#\nDESCRIPTION: This code snippet demonstrates how to access custom emotes from a SocketGuild's Emotes collection. This is useful for WebSocket users who want to retrieve emotes from a specific guild.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/emoji/emoji.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Assuming `guild` is a SocketGuild instance\nEmote emote = guild.Emotes.FirstOrDefault(x => x.Name == \"thinking\");\n```\n\n----------------------------------------\n\nTITLE: Using Ratelimit Callback in a Discord.NET Command\nDESCRIPTION: This Discord.NET command demonstrates how to apply the ratelimit callback to a specific command. It creates a RequestOptions object with the callback assigned and passes it to the SendMessageAsync method to monitor ratelimits for this specific API call.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/concepts/ratelimits.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Command(\"ping\")]\npublic async Task ping()\n{\n    var options = new RequestOptions()\n    {\n        RatelimitCallback = MyRatelimitCallback\n    };\n\n    await Context.Channel.SendMessageAsync(\"Pong!\", options: options);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Arguments in Commands in C#\nDESCRIPTION: Illustrates the usage of a named arguments class in a Discord.Net command. The command accepts both a required integer and a `NamableArguments` object, allowing invocation with selectively specified named arguments.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/namedarguments.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[Command(\"act\")]\npublic async Task Act(int requiredArg, NamableArguments namedArgs)\n```\n\n----------------------------------------\n\nTITLE: Referencing Commonly Used Discord.Net Entities in Markdown\nDESCRIPTION: A markdown list of links to commonly used entities in the Discord.Net library, including the WebSocket namespace and key client/message objects. These references use DocFX's cross-reference syntax with the @ symbol.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* @Discord.WebSocket\n* @Discord.WebSocket.DiscordSocketClient\n* @Discord.WebSocket.SocketGuildChannel\n* @Discord.WebSocket.SocketGuildUser\n* @Discord.WebSocket.SocketMessage\n* @Discord.WebSocket.SocketRole\n```\n\n----------------------------------------\n\nTITLE: Ending Discord Polls Early\nDESCRIPTION: Demonstrates how to end a poll before its natural expiration using EndPollAsync method on an IUserMessage object.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/polls/polls.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Ending polls](samples/end-poll.cs)]\n```\n\n----------------------------------------\n\nTITLE: Publishing Self-contained Package for Windows 10 x64\nDESCRIPTION: Command to publish a self-contained package for .NET Core applications targeting Windows 10 x64 platforms. This creates an executable with all required dependencies included.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/deployment/deployment.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet publish -c Release -r win10-x64\n```\n\n----------------------------------------\n\nTITLE: Defining Named Arguments Class in C#\nDESCRIPTION: Defines a C# class `NamableArguments` with properties for named argument parsing. The class is annotated with [NamedArgumentTypeAttribute], making it suitable for optional named parameters in Discord.Net commands.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/namedarguments.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[NamedArgumentType]\npublic class NamableArguments\n{\n    public string First { get; set; }\n    public string Second { get; set; }\n    public string Third { get; set; }\n    public string Fourth { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User's Guild Summaries in Discord.NET\nDESCRIPTION: Shows how to fetch and flatten the list of guilds for the current user. Requires 'guilds' scope in OAuth2 permissions.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/bearer_token/bearer_token_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar guilds = await client.GetGuildSummariesAsync().FlattenAsync();\n```\n\n----------------------------------------\n\nTITLE: CanConvertTo() Method Implementation\nDESCRIPTION: This code snippet demonstrates the default implementation of the `CanConvertTo()` method when using the generic `TypeConverter<T>` base class. It checks if the target type is assignable from the type `T`.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/int_framework/typeconverters.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed override bool CanConvertTo (Type type) => \n    typeof(T).IsAssignableFrom(type);\n```\n\n----------------------------------------\n\nTITLE: Guild Comparer Implementation for Discord.NET\nDESCRIPTION: Gets an IEqualityComparer implementation for comparing IGuild objects in Discord.NET. Used to compare Discord guilds based on their unique identifiers.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/DiscordComparers.Overwrites.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nDiscord.DiscordComparers.GuildComparer\n```\n\n----------------------------------------\n\nTITLE: Regular Casting in Discord.Net C#\nDESCRIPTION: Demonstrates regular casting using the 'as' keyword to assign an entity to a specific type. This method converts an IUser to a SocketGuildUser to access guild-specific properties.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/entities/casting.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// This function takes a IUser, but we want to see if it's a SocketGuildUser\npublic void DoSomething(IUser user)\n{\n    // We cast from the interface to the definition itself\n    var guildUser = user as SocketGuildUser;\n    \n    // We can now access its properties\n    var nickname = guildUser.Nickname;\n    var roles = guildUser.Roles;\n    var guild = guildUser.Guild;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Injection in Discord.NET Module\nDESCRIPTION: Example demonstrating proper property injection setup in a Discord.NET interaction module. Shows how to declare public properties that can be populated by the dependency injection system.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/int_framework/framework.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Property Injection](samples/propertyinjection.cs)]\n```\n\n----------------------------------------\n\nTITLE: Fetching User's Guild Member Object in Discord.NET\nDESCRIPTION: Demonstrates how to retrieve the guild member object for the current user in a specific guild. Requires 'guilds.members.read' scope.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/bearer_token/bearer_token_guide.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar guildMember = await client.GetCurrentUserGuildMemberAsync(guildId);\n```\n\n----------------------------------------\n\nTITLE: Example Ratelimit Callback Output\nDESCRIPTION: This is an example of the console output produced by the ratelimit callback. It shows the ratelimit information returned by Discord's API when sending a message, including limits, remaining requests, reset times, and other diagnostic information.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/concepts/ratelimits.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nFalse 5 4  2021-09-09 3:48:14 AM +00:00 00:00:05 a06de0de4a08126315431cc0c55ee3dc 00:00:00.9891364 channels/848511736872828929/messages\n```\n\n----------------------------------------\n\nTITLE: Installing Discord.Net BuildOverrides Package\nDESCRIPTION: Command to install the Discord.Net.BuildOverrides package using NuGet Package Manager.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/build_overrides/what-are-they.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package Discord.Net.BuildOverrides\n```\n\n----------------------------------------\n\nTITLE: Implementing DontInjectAttribute in a Discord.NET Command Module\nDESCRIPTION: Shows how to use the DontInjectAttribute to manually initialize a service property instead of allowing automatic dependency injection. The example demonstrates creating a custom module that inherits from ModuleBase and manually instantiates a service in the constructor.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Commands/DontInjectAttribute.Overwrite.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyModule : ModuleBase<SocketCommandContext>\n{\n    [DontInject]\n    public MyService MyService { get; set; }\n\n    public MyModule()\n    {\n        MyService = new MyService();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Serilog Logger in Application Code\nDESCRIPTION: Example of using the configured Serilog logger to write debug messages in the application code.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/serilog.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nLog.Debug(\"Sample debug message\");\n```\n\n----------------------------------------\n\nTITLE: Using a Precondition in Discord.NET\nDESCRIPTION: This code snippet demonstrates how to apply a precondition to a command method in Discord.NET by using a valid precondition attribute.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/preconditions.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Precondition usage](samples/preconditions/precondition_usage.cs)]\n```\n\n----------------------------------------\n\nTITLE: Extending RuntimeResult for Enhanced Execution Information - C#\nDESCRIPTION: Demonstrates extending the RuntimeResult class with more information about command execution, providing a flexible way to manage and return results.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/post-execution.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[!code[Extended Use](samples/post-execution/customresult_extended.cs)]\n```\n\n----------------------------------------\n\nTITLE: Using Custom RuntimeResult in a Command - C#\nDESCRIPTION: Presents an example of a command that utilizes a custom RuntimeResult, illustrating how to correctly mark the return type to ensure compatibility during module building.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/text_commands/post-execution.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[!code[Usage](samples/post-execution/customresult_usage.cs)]\n```\n\n----------------------------------------\n\nTITLE: Example of a Well-Written Pull Request in Markdown\nDESCRIPTION: This snippet provides a link to an example of a well-written pull request description. It demonstrates the level of detail and explanation preferred for contributions to the Discord.Net project.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSee this [merge request](https://github.com/discord-net/Discord.Net/pull/793)\nfor an example of a well-written description.\n```\n\n----------------------------------------\n\nTITLE: Using Long Link Syntax in Markdown Documentation\nDESCRIPTION: Shows the recommended long-form link syntax for Markdown documentation, which separates the link reference from its target URL for better readability.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nPlease consult the [API Documentation] for more information.\n\n[API Documentation]: xref:System.String\n```\n\n----------------------------------------\n\nTITLE: Retrieving Poll Voters\nDESCRIPTION: Shows how to retrieve voters for a specific poll answer using GetPollAnswerVotersAsync method with an answer ID parameter.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/polls/polls.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Getting poll answer voters](samples/get-poll-voters.cs)]\n```\n\n----------------------------------------\n\nTITLE: Creating a MediatR Notification for Discord Bot in C#\nDESCRIPTION: This snippet shows the creation of a notification to handle the MessageReceived event using MediatR in a Discord bot. It involves defining a notification class that represents events the bot will handle using MediatR.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/mediatr.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Creating a notification](samples/MediatrCreatingMessageNotification.cs)]\n```\n\n----------------------------------------\n\nTITLE: Publishing Framework-dependent Package for .NET Core\nDESCRIPTION: Command to publish a framework-dependent package for .NET Core applications. This creates a package with minimal dependencies, requiring the dotnet runtime on the target machine.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/deployment/deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet publish -c Release\n```\n\n----------------------------------------\n\nTITLE: Configuring Interaction Syncing in Discord.NET\nDESCRIPTION: Code example showing how to configure interaction syncing by setting UseInteractionSnowflakeDate to false in DiscordSocketConfig. This is used to handle cases where the system clock is out of sync causing interaction timeout issues.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/int_framework/general.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar config = new DiscordSocketConfig\n{\n    UseInteractionSnowflakeDate = false\n};\n```\n\n----------------------------------------\n\nTITLE: Safe Type Casting in Discord.Net using C#\nDESCRIPTION: Demonstrates the recommended way to safely cast objects in Discord.Net using pattern matching with the 'is' and 'as' operators to avoid InvalidCastException errors.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/basics/basic-operations.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Good and bad practices for checking if a channel is a text channel\n\n// BAD EXAMPLE - don't do this, may throw InvalidCastException\n// if (channel is ITextChannel)\n// {\n//     var textChannel = (ITextChannel)channel;\n//     // textChannel is always an ITextChannel here\n// }\n\n// GOOD EXAMPLE #1 - pattern matching (C# 7.0+)\nif (channel is ITextChannel textChannel)\n{\n    // textChannel is always an ITextChannel here\n}\n\n// GOOD EXAMPLE #2 - as operator with null check\nvar textChannel = channel as ITextChannel;\nif (textChannel != null)\n{\n    // textChannel is always an ITextChannel here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Emoji Reactions to Self-Sent Messages in Discord.Net\nDESCRIPTION: Demonstrates how to send a message and immediately add emoji reactions to it in Discord.Net. The example shows handling for both Unicode emoji and custom emotes.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/basics/basic-operations.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Adding an emoji (unicode emoji) reaction to your own sent message\nvar message = await channel.SendMessageAsync(\"Hello!\") as IUserMessage;\nif (message != null)\n{\n    // Unicode emoji\n    Emoji emoji = new Emoji(\"👍\");\n    await message.AddReactionAsync(emoji);\n\n    // Custom emote\n    Emote emote = Emote.Parse(\"<:dotnet:232902710280716288>\");\n    await message.AddReactionAsync(emote);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cacheable for Gateway Events in Discord.Net 3.0\nDESCRIPTION: This reference demonstrates how to access entity data from cache using the Cacheable type in Discord.Net 3.0, which was introduced to improve caching. The GetOrDownloadAsync() method retrieves an entity from cache or downloads it if not available.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/faq/misc/legacy.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nGetOrDownloadAsync()\n```\n\n----------------------------------------\n\nTITLE: Modifying Emote Properties with Discord.Net\nDESCRIPTION: Example showing how to change an emote's name using IGuild.ModifyEmoteAsync. This action updates an emote's name property on a Discord guild.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/ObjectProperties.Overwrites.md#2025-04-21_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nawait guild.ModifyEmoteAsync(x =>\n{\n    x.Name = \"blobo\";\n});\n```\n\n----------------------------------------\n\nTITLE: Discord.NET 3.7.2 Release Notes\nDESCRIPTION: Changelog entry for version 3.7.2 documenting additions, fixes and improvements including new InteractionService method overloads and attachment support fixes.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.7.2] - 2022-06-02\n### Added\n- #2328 Add method overloads to InteractionService (0fad3e8)\n- #2336 Add support for attachments on interaction response type 7 (35db22e)\n- #2338 AddOptions no longer has an uneeded restriction, added AddOptions to SlashCommandOptionBuilder (3a37f89)\n\n### Fixed\n- #2342 Disable TIV restrictions for rollout of TIV (7adf516)\n```\n\n----------------------------------------\n\nTITLE: Modifying Guild Properties with Discord.Net\nDESCRIPTION: Example showing how to change a guild's name using IGuild.ModifyAsync. This retrieves a guild by ID, then updates its name property.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/ObjectProperties.Overwrites.md#2025-04-21_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nvar guild = _client.GetGuild(id);\nif (guild == null) return;\n\nawait guild.ModifyAsync(x =>\n{\n    x.Name = \"VERY Fast Discord Running at Incredible Hihg Speed\";\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DbContext with Entity Framework Core\nDESCRIPTION: Example of a DbContext implementation that includes a sample entity and database configuration. Shows basic entity relationship and context setup patterns.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/guides/other_libs/efcore.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SampleEntity\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class ExampleDbContext : DbContext\n{\n    public ExampleDbContext(DbContextOptions options)\n        : base(options) { }\n\n    public DbSet<SampleEntity> SampleEntities { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Self User Properties with Discord.Net\nDESCRIPTION: Example demonstrating how to change the bot's own username using ISelfUser.ModifyAsync. This updates the username property of the bot's user account.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/ObjectProperties.Overwrites.md#2025-04-21_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\nawait selfUser.ModifyAsync(x =>\n{\n    x.Username = \"Mercy\";\n});\n```\n\n----------------------------------------\n\nTITLE: Discord.NET 3.7.1 Release Notes\nDESCRIPTION: Changelog entry for version 3.7.1 documenting added interaction properties, voice permission fixes and cacheable download improvements.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.7.1] - 2022-05-27\n### Added\n- #2325 Add missing interaction properties (d3a693a)\n- #2330 Add better call control in ParseHttpInteraction (a890de9)\n\n### Fixed\n- #2329 Voice perms not retaining text perms. (712a4ae)\n- #2331 NRE with Cacheable.DownloadAsync() (e1f9b76)\n```\n\n----------------------------------------\n\nTITLE: Overriding TypeReader for IUser Parameter in Discord.NET Command\nDESCRIPTION: Example demonstrating how to use OverrideTypeReaderAttribute to specify a custom type reader (MyUserTypeReader) for an IUser parameter in a command method.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/OverrideTypeReaderAttribute.Overwrites.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task PrintUserAsync(\n    [OverrideTypeReader(typeof(MyUserTypeReader))] IUser user)\n{\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Example of XML Docstring Format in C#\nDESCRIPTION: Demonstrates the proper format for XML docstrings in C# code, showing a concise property summary that follows the recommendation of being under 3 lines.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary> Gets or sets the guild user in this object. </summary>\npublic IGuildUser GuildUser { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Discord Unicode Emoji Format Example\nDESCRIPTION: Shows the format for Unicode-based emojis in Discord, using either direct Unicode characters or Unicode escape sequences. Can be obtained via Discord chat escape or Emojipedia.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/IEmote.Overwrites.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n🙃\n\\U0001f643\n```\n\n----------------------------------------\n\nTITLE: User Comparer Implementation for Discord.NET\nDESCRIPTION: Gets an IEqualityComparer implementation for comparing IUser objects in Discord.NET. Used to compare Discord users based on their unique identifiers.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Common/DiscordComparers.Overwrites.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nDiscord.DiscordComparers.UserComparer\n```\n\n----------------------------------------\n\nTITLE: Discord.NET Command Context Reference Documentation\nDESCRIPTION: Documentation reference files for command context types using markdown includes, covering interface and implementation definitions.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Commands/ICommandContext.Overwrite.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nuid: Discord.Commands.ICommandContext\nexample: [*content]\n---\n\n[!include[Example Section](ICommandContext.Inclusion.md)]\n\n---\nuid: Discord.Commands.CommandContext\nexample: [*content]\n---\n\n[!include[Example Section](ICommandContext.Inclusion.md)]\n\n---\nuid: Discord.Commands.SocketCommandContext\nexample: [*content]\n---\n\n[!include[Example Section](ICommandContext.Inclusion.md)]\n\n---\nuid: Discord.Commands.ShardCommandContext\nexample: [*content]\n---\n\n[!include[Example Section](ICommandContext.Inclusion.md)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty Module in Discord.NET C#\nDESCRIPTION: Code example showing the structure of an empty module in Discord.NET. This serves as a basic template for creating command modules.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Commands/ICommandContext.Inclusion.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code[Sample module](../../guides/text_commands/samples/intro/empty-module.cs)]\n```\n\n----------------------------------------\n\nTITLE: Setting up Command Handler in Discord.NET C#\nDESCRIPTION: Implementation example of a command handler in Discord.NET. This demonstrates how to set up and process commands within the bot.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Commands/ICommandContext.Inclusion.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[!code[Command handler](../../guides/text_commands/samples/intro/command_handler.cs)]\n```\n\n----------------------------------------\n\nTITLE: Implementing DontAutoLoadAttribute in C#\nDESCRIPTION: This snippet demonstrates how to apply the DontAutoLoadAttribute to a module class. By using this attribute, the module will not be automatically discovered and added to the CommandService when using AddModulesAsync.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/_overwrites/Commands/DontAutoLoadAttribute.Overwrite.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[DontAutoLoad]\npublic class MyModule : ModuleBase<SocketCommandContext>\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Discord.Net Documentation with DocFX\nDESCRIPTION: Command to build documentation using DocFX from the repository root. The optional --serve parameter allows for local preview of the generated documentation site.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocfx docs/docfx.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 3.17.2\nDESCRIPTION: Shows the changelog entry for Discord.NET version 3.17.2, including added features and fixed issues.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.17.2] - 2025-03-09\n### Added \n- #3074 Add `excludeDeleted` argument to `GetEntitlementsAsync` (9c9407b)\n\n### Fixed\n- #3063 `SocketApplicationCommand` missing `GuildId` (c625f5f)\n- #3064 Correct empty value exception (6e7b3c2)\n- #3068 Consider `AutoServiceScopes` in autocomplete handler executions (7fb537f)\n- #3070 Possibly fix mute & deaf state for guild users (5f6c26b)\n- #3072 AutoServiceScopes strikes again (d71fcb1)\n- #3073 SocketGuild.GetApplicationCommandAsync was fetching global commands (aa66928)\n- #3078 Add `EmptyServiceScope` (54e8416) \n\n### Misc\n- #3075 Make Make GetShardFor(ulong guildId) & DiscordShardedClient.GetUserAsync() public (41ad6ac)\n- #3061 yeet `FluentAssertions` (52c2f0d)\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 3.17.1\nDESCRIPTION: Shows the changelog entry for Discord.NET version 3.17.1, including added features and fixed issues.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.17.1] - 2025-01-19\n\n### Added\n- #3056 Add IAutomodRule.MentionRaidProtectionEnabled (0e9caf3)\n- #3052 Added Header and Subtext to the Format class (0174745)\n\n### Fixed\n- #3057 Use 8.0.x dependencies for net6 support (50aa278)\n- #3049 `Task.Delay(0)` => `Task.CompletedTask` (b5f5df0)\n- #3014 An AddSlashCommand overload should be AddAutocompleteCommand in ModuleBuilder (35e8122)\n- #3053 `DiscordSocketClient.GetEntitlementsAsync` requiring unused `BaseDiscordClient` parameter (d828cd8)\n\n### Misc \n- #3046 Refactor & update member search v2 (36439b6)\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 3.17.0\nDESCRIPTION: Shows the changelog entry for Discord.NET version 3.17.0, including added features, fixed issues, and miscellaneous changes.\nSOURCE: https://github.com/discord-net/discord.net/blob/dev/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.17.0] - 2024-12-20\n\n### Added\n- #3025 Build with .NET 9 SDK (164a289)\n- #3032 Add `net8.0` and `net9.0` (d780d6c)\n- #3033 Add `net8.0` and `net9.0` to the metapackage (93229f6)\n\n- #3005 Add StickerId to REST and WebSocket Sticker audit log data classes (8a2ea4b)\n- #3023 Scheduled event recurrence rule (b7208d4)\n- #3024 Support sending voice messages (5904ecd)\n- #3036 Support for multiple subscription tiers (79fade6)\n- #3017 Add support for keyed services. (3017f6b)\n  \n### Fixed\n- #2974 rest client add webporxy config, keep the processing logic with WebSocketProvider (292f8c4)\n- #3008 fix webhook ctor (433bdc2)\n- #3015 Fixes incorrect cast of parameters in CommandBuilder (aaa8df9)\n- #3028 Create a new scope when building interaction service modules if `AutoServiceScopes = true` (a1e50c4)\n- #3035 NRE in message commands in user app contexts (c78296f)\n- #3034 Entitlements `starts_at` is nullable (d5879c8)\n- #3031 Interaction Service failing to create scopes with some DI providers (a884ad1)\n- #3030 NRE on thread member creation without a guild user in the payload (96a8327)\n\n### Misc\n- #3021 Expose channel type property on `IChannel` (8b92969)\n- #3006 Add missing permissions (6b92cc2)\n- #3007 Allow setting SuppressNotification in webhook client (682d87e)\n- #3027 Eliminate the waste of checking arguments under the same conditions. (f644e68)\n- #3037 add missing overwrite perms (d2d8d73)\n- #3038 Clamp cache size (438e31e)\n```"
  }
]