[
  {
    "owner": "elmassimo",
    "repo": "vite_ruby",
    "content": "TITLE: Installing Vite Ruby with Bundler\nDESCRIPTION: Add the Vite Ruby gem to your application's Gemfile. Use 'vite_rails' for Rails apps, 'vite_hanami' for Hanami apps, or 'vite_ruby' for basic Rack apps.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/README.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'vite_rails' # vite_hanami for Hanami apps, vite_ruby for Rack apps\n```\n\n----------------------------------------\n\nTITLE: Displaying Vite Project Structure in Ruby\nDESCRIPTION: Shows the typical directory structure for a Vite project in a Ruby web application, highlighting key directories like entrypoints, components, and assets.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/development.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napp/frontend: <kbd><a href=\"/config/#sourcecodedir\">sourceCodeDir</a></kbd>\n  ├── entrypoints: <kbd><a href=\"/config/#entrypointsdir\">entrypointsDir</a></kbd>\n  │   # only Vite entry files here\n  │   │── application.js\n  │   └── typography.css\n  │── components:\n  │   └── App.vue\n  │── channels:\n  │   │── index.js\n  │   └── chat.js\n  │── stylesheets:\n  │   └── my_styles.css\n  └── images:\n      └── logo.svg\n```\n\n----------------------------------------\n\nTITLE: Importing Components with Vite Aliases in JavaScript\nDESCRIPTION: Demonstrates how to use Vite's import aliases '~/' and '@/' to simplify imports from the sourceCodeDir in a JavaScript file.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/development.md#2025-04-05_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport App from '~/components/App.vue'\nimport '@/channels/index.js'\n```\n\n----------------------------------------\n\nTITLE: Importing Stylesheets in JavaScript with Vite\nDESCRIPTION: Shows how to import CSS files directly in JavaScript, which will automatically inject the styles on load when using Vite.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/development.md#2025-04-05_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '~/styles/theme.css'\n```\n\n----------------------------------------\n\nTITLE: Using Vite Stylesheet Tag in ERB Templates\nDESCRIPTION: Illustrates the use of the vite_stylesheet_tag helper in ERB templates to include stylesheets processed by Vite.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/development.md#2025-04-05_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= vite_stylesheet_tag 'styles.scss' %> # app/frontend/entrypoints/styles.scss\n```\n\n----------------------------------------\n\nTITLE: Vite Ruby Console Output\nDESCRIPTION: Example console output showing successful initialization of Vite with Ruby.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/index.md#2025-04-05_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nVite ⚡️ Ruby\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Rails Gem\nDESCRIPTION: Adding the vite_rails gem to a Ruby application's Gemfile for integrating Vite.js with Rails.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/index.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'vite_rails'\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Install\nDESCRIPTION: Command to install the required gem dependencies after adding vite_rails to the Gemfile.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/index.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Migrating Webpacker tag helpers to Vite tag helpers in Rails\nDESCRIPTION: Shows the necessary changes to replace Webpacker's tag helpers with Vite Ruby tag helpers in Rails views, including javascript, stylesheet, and asset path references.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migration.md#2025-04-05_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n+ <%= vite_client_tag %>\n\n- <%= stylesheet_pack_tag 'application' %>\n- <%= javascript_packs_with_chunks_tag 'application' %>\n+ <%= vite_javascript_tag 'application' %>\n\n- <%= stylesheet_pack_tag 'mobile' %>\n+ <%= vite_stylesheet_tag 'mobile' %>\n\n- <img src=\"<%= asset_pack_path('images/logo.svg') %>\">\n+ <img src=\"<%= vite_asset_path('images/logo.svg') %>\">\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Asset Tags in Rails Layout\nDESCRIPTION: Example showing how to include Vite-managed JavaScript and CSS assets in a Rails layout using tag helpers. Demonstrates basic usage of vite_client_tag, vite_javascript_tag and vite_stylesheet_tag.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/rails.md#2025-04-05_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<head>\n  <title>Example</title>\n  <%= csrf_meta_tags %>\n  <%= csp_meta_tag %>\n  <%= vite_client_tag %>\n\n  <%= vite_javascript_tag 'application' %>\n  <%= vite_stylesheet_tag 'typography', media: 'print' %>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Vite Asset Tags with Preprocessor Files\nDESCRIPTION: Example showing how to reference preprocessor files like TypeScript and SCSS explicitly in Vite tag helpers.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/rails.md#2025-04-05_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= vite_javascript_tag 'application.tsx' %>\n<%= vite_stylesheet_tag 'theme.scss' %>\n```\n\n----------------------------------------\n\nTITLE: Vite Image and Picture Tags\nDESCRIPTION: Examples of using vite_image_tag and vite_picture_tag helpers for handling image assets in Rails views.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/rails.md#2025-04-05_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= vite_image_tag 'images/logo.jpg' %>\n<%= vite_picture_tag 'images/logo.avif', 'images/logo.jpg', image: {alt: 'example'}) %>\n```\n\n----------------------------------------\n\nTITLE: Vite Asset Path Usage\nDESCRIPTION: Examples of using vite_asset_path helper to generate URIs for various asset types in Rails views.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/rails.md#2025-04-05_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<link rel=\"apple-touch-icon\" type=\"image/png\" href=\"<%= vite_asset_path 'images/favicon.png' %>\" />\n<link rel=\"prefetch\" href=\"<%= vite_asset_path 'typography.css' %>\" />\n```\n\n----------------------------------------\n\nTITLE: Vite Asset URL Usage\nDESCRIPTION: Example of using vite_asset_url helper to generate full URLs for assets in meta tags.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/rails.md#2025-04-05_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<meta property=\"twitter:image\" content=\"<%= vite_asset_url 'images/social-banner.png' %>\">\n```\n\n----------------------------------------\n\nTITLE: Using Vite Helpers with New Directory Structure in Ruby\nDESCRIPTION: Demonstrates the correct usage of Vite helpers with the new recommended directory structure for assets and entrypoints.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migrating-from-v2.md#2025-04-05_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n✅ vite_javascript_tag 'entrypoints/nested/application'\n✅ vite_asset_path 'images/logo.svg'\n```\n\n----------------------------------------\n\nTITLE: Vite Asset Resolution Examples\nDESCRIPTION: Ruby code examples showing how Vite resolves different asset paths relative to the entrypoints directory.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/rails.md#2025-04-05_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nvite_asset_path 'images/logo.svg' # app/frontend/images/logo.svg\nvite_asset_path 'typography.css'  # app/frontend/entrypoints/typography.css\nvite_asset_path 'logo.svg'        # app/frontend/entrypoints/logo.svg\n```\n\n----------------------------------------\n\nTITLE: Using Glob Imports for Component Registration in JavaScript\nDESCRIPTION: JavaScript example demonstrating how to use glob imports to bundle all components in a single entrypoint. This approach imports all component files eagerly, making them available throughout the application.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/advanced.md#2025-04-05_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// app/frontend/entrypoints/application.js\nimport.meta.glob('../../components/**/*_component.js', { eager: true })\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Additional Entrypoints in JSON\nDESCRIPTION: JSON configuration example showing how to set up multiple additional entrypoints including component files and asset directories using glob patterns.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/advanced.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"additionalEntrypoints\": [\n      \"app/components/**/*_component.{js,ts}\",\n      \"~/{assets,fonts,icons,images}/**/*\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Referencing Component JavaScript with Tag Helpers in ERB\nDESCRIPTION: ERB template example showing how to reference a component JavaScript file using the vite_javascript_tag helper. This approach works when components are configured as additional entrypoints.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/advanced.md#2025-04-05_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%= vite_javascript_tag '/app/components/comment_component' %>\n```\n\n----------------------------------------\n\nTITLE: Referencing Image Assets with Tag Helpers in Ruby\nDESCRIPTION: Example showing how to reference image files using vite_asset_path tag helper. This allows accessing assets like SVG files that are outside the main entrypoints directory.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/advanced.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nvite_asset_path 'images/logo.svg' # app/frontend/images/logo.svg\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Additional Entrypoints in JSON\nDESCRIPTION: JSON configuration to opt out from bundling additional files by setting additionalEntrypoints to an empty array in the Vite Ruby configuration file.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/advanced.md#2025-04-05_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"additionalEntrypoints\": []\n```\n\n----------------------------------------\n\nTITLE: Configuring vite-plugin-rails in Vite for Rails Applications\nDESCRIPTION: This snippet demonstrates how to configure the vite-plugin-rails plugin in a Vite configuration file. It sets up environment variables for Rails.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/plugins.md#2025-04-05_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nplugins: [\n  Rails({\n    envVars: { RAILS_ENV: 'development' },\n  }),\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring vite-plugin-windicss for Windi CSS Integration\nDESCRIPTION: This code demonstrates how to set up vite-plugin-windicss to integrate Windi CSS with a Vite project, including configuration for scanning various file types and directories.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/plugins.md#2025-04-05_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nplugins: [\n  WindiCSS({\n    root: __dirname,\n    scan: {\n      fileExtensions: ['erb', 'haml', 'html', 'vue', 'js', 'ts', 'jsx', 'tsx'],\n      dirs: ['app/views', 'app/frontend'], // or app/javascript, or app/packs\n    },\n  }),\n```\n\n----------------------------------------\n\nTITLE: Using React Refresh Tag Helper in ERB Template\nDESCRIPTION: ERB template snippet demonstrating the proper setup for React hot module replacement. It includes the client tag, React refresh tag, and JavaScript tag in the correct order.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/troubleshooting.md#2025-04-05_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n  <%= vite_client_tag %>\n  <%= vite_react_refresh_tag %>\n  <%= vite_javascript_tag 'application' %>\n```\n\n----------------------------------------\n\nTITLE: Configuring vite-plugin-full-reload for Automatic Page Reloads\nDESCRIPTION: This snippet demonstrates the setup of vite-plugin-full-reload to automatically reload the page when changes are made to specified files, with a delay.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/plugins.md#2025-04-05_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nplugins: [\n  FullReload(['config/routes.rb', 'app/views/**/*'], { delay: 200 })\n```\n\n----------------------------------------\n\nTITLE: Converting relative imports to absolute imports with @ prefix\nDESCRIPTION: Shows how to update import paths when migrating from Webpacker to Vite, using the @ prefix for absolute imports from the sourceCodeDir.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migration.md#2025-04-05_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import TextInput from '@/components/TextInput'\n+ import TextInput from '@/components/TextInput.vue'\n```\n\n----------------------------------------\n\nTITLE: Using js_from_routes to Generate Path Helpers and API Methods\nDESCRIPTION: This example shows how to use js_from_routes to generate and use path helpers and API methods based on Rails routes in JavaScript code.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/plugins.md#2025-04-05_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { videoClips } from '~/api'\n\nconst video = await videoClips.get({ id: '5' })\n\nconst path = videoClips.download.path(video) // \"/video_clips/5/download\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Stimulus HMR with vite-plugin-stimulus-hmr\nDESCRIPTION: This snippet shows how to configure vite-plugin-stimulus-hmr to enable Hot Module Replacement for Stimulus controllers in a Vite project.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/plugins.md#2025-04-05_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nplugins: [\n  StimulusHMR(),\n```\n\n----------------------------------------\n\nTITLE: Registering Stimulus Controllers with stimulus-vite-helpers\nDESCRIPTION: This code demonstrates how to use stimulus-vite-helpers to easily register all Stimulus controllers in a Vite project using import.meta.glob.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/plugins.md#2025-04-05_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst controllers = import.meta.glob('./**/*_controller.js', { eager: true })\nregisterControllers(application, controllers)\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Output for Vite Commands in Bash\nDESCRIPTION: Demonstrates how to use the DEBUG environment variable to enable debug output for Vite and its plugins. This can be used to filter specific debug output using globs.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/debugging.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=*\nDEBUG=vite:*\nDEBUG=vite-plugin-ruby:*\n```\n\n----------------------------------------\n\nTITLE: Setting Up vite-plugin-environment for Exposing Environment Variables\nDESCRIPTION: This code shows how to use vite-plugin-environment to expose specific environment variables to client-side code in a Vite project.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/plugins.md#2025-04-05_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nplugins: [\n  Environment(['NODE_ENV', 'API_KEY', 'APP_VERSION']),\n```\n\n----------------------------------------\n\nTITLE: Smart Output Example with Vite JavaScript Helper\nDESCRIPTION: Example of using vite_javascript helper and its smart output generation for both development and production environments.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/hanami.md#2025-04-05_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= vite_javascript 'application' %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<script src=\"/vite/assets/application.a0ba047e.js\" type=\"module\" crossorigin=\"anonymous\"/>\n<link rel=\"modulepreload\" href=\"/vite/assets/example_import.8e1fddc0.js\" as=\"script\" type=\"text/javascript\" crossorigin=\"anonymous\">\n<link rel=\"stylesheet\" media=\"screen\" href=\"/vite/assets/application.cccfef34.css\">\n```\n\nLANGUAGE: erb\nCODE:\n```\n<script src=\"/vite/assets/application.js\" type=\"module\" crossorigin=\"anonymous\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Home Component in Vite Ruby\nDESCRIPTION: This snippet imports and sets up the Home component from the theme directory. It's likely part of a Vue.js single-file component used to render the project's home page.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/index.md#2025-04-05_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Home from '/@theme/components/Home.vue'\n</script>\n\n<Home />\n```\n\n----------------------------------------\n\nTITLE: Using Vite Tag Helpers in Hanami Views\nDESCRIPTION: Example showing how to include Vite-managed assets in a Hanami view's head section using tag helpers for JavaScript, TypeScript and CSS files.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/hanami.md#2025-04-05_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<head>\n  <title>Example</title>\n  <%= favicon %>\n  <%= vite_client %>\n\n  <%= vite_stylesheet 'styles' %>\n  <%= vite_typescript 'application' %>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Using Vite Asset Path Helpers\nDESCRIPTION: Examples of using vite_asset_path helper to reference static assets like images and CSS files in Hanami views.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/hanami.md#2025-04-05_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<img src=\"<%= vite_asset_path 'images/logo.svg' %>\" />\n<link rel=\"prefetch\" href=\"<%= vite_asset_path 'typography.css' %>\" />\n```\n\n----------------------------------------\n\nTITLE: Asset Path Resolution Examples\nDESCRIPTION: Ruby code demonstrating how Vite resolves asset paths in the entrypoints directory versus other directories.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/hanami.md#2025-04-05_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nvite_asset_path 'logo.svg'        # app/frontend/entrypoints/logo.svg\nvite_asset_path 'images/logo.svg' # app/frontend/images/logo.svg\n```\n\n----------------------------------------\n\nTITLE: Asset Path Resolution Examples in Ruby\nDESCRIPTION: Shows how vite_asset_path resolves paths differently based on whether they include a directory or not.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/padrino.md#2025-04-05_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nvite_asset_path 'logo.svg'        # app/frontend/entrypoints/logo.svg\nvite_asset_path 'images/logo.svg' # app/frontend/images/logo.svg\n```\n\n----------------------------------------\n\nTITLE: Using Debugger in Ruby\nDESCRIPTION: Demonstrates how to use the 'tap' method with binding.pry to inject breakpoints in Ruby code without affecting the outcome. This is useful for debugging Ruby gems and applications.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/debugging.md#2025-04-05_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n.tap { |val| binding.pry }\n```\n\n----------------------------------------\n\nTITLE: Custom Asset Path Usage in HAML\nDESCRIPTION: Demonstrates how to use vite_asset_path helper for custom asset types like images and additional stylesheets.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/padrino.md#2025-04-05_snippet_1\n\nLANGUAGE: haml\nCODE:\n```\n%img{ src: vite_asset_path('images/logo.svg') }\n%link{ rel: 'prefetch', href: vite_asset_path('typography.css') }\n```\n\n----------------------------------------\n\nTITLE: Development Server Asset Output Example\nDESCRIPTION: Shows the simplified HTML output when running in development mode with Vite dev server.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/padrino.md#2025-04-05_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/vite/assets/application.js\" type=\"module\" crossorigin=\"anonymous\"/>\n```\n\n----------------------------------------\n\nTITLE: Production Asset Output Example\nDESCRIPTION: Shows the generated HTML output for production environment with all necessary asset tags.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/padrino.md#2025-04-05_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/vite/assets/application.a0ba047e.js\" type=\"module\" crossorigin=\"anonymous\"/>\n<link rel=\"modulepreload\" href=\"/vite/assets/example_import.8e1fddc0.js\" as=\"script\" type=\"text/javascript\" crossorigin=\"anonymous\">\n<link rel=\"stylesheet\" media=\"screen\" href=\"/vite/assets/application.cccfef34.css\">\n```\n\n----------------------------------------\n\nTITLE: Single JavaScript Entry Point with Smart Output\nDESCRIPTION: Example of using vite_javascript_tag helper which automatically handles dependent assets.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/padrino.md#2025-04-05_snippet_3\n\nLANGUAGE: haml\nCODE:\n```\n= vite_javascript_tag 'application'\n```\n\n----------------------------------------\n\nTITLE: Configuring Local NPM Package with PNPM in JSON\nDESCRIPTION: Shows how to use the 'file:' protocol in package.json to link to a local copy of an NPM package when using PNPM. This is a safe way to use a local version of a package for debugging.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/debugging.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n  \"vite\": \"file:../vite/packages/vite\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Asset Loading with Vite Helpers in HAML\nDESCRIPTION: Example showing how to load JavaScript, TypeScript and CSS assets in a Padrino application using vite_padrino helpers in the page head.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/padrino.md#2025-04-05_snippet_0\n\nLANGUAGE: haml\nCODE:\n```\n%head\n  %title Example\n  = vite_client_tag\n\n  = vite_stylesheet_tag 'styles'\n  = vite_typescript_tag 'application'\n```\n\n----------------------------------------\n\nTITLE: Using Aliases with import.meta.glob - TypeScript\nDESCRIPTION: Demonstrates the recommended approach of using aliases with import.meta.glob for more explicit and robust path resolution that works regardless of file location.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migrating-to-vite-3.md#2025-04-05_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst controllers = import.meta.glob('~/controllers/**/*_controller.js', { eager: true })\n```\n\n----------------------------------------\n\nTITLE: Using import.meta.glob in Vite 3 - TypeScript\nDESCRIPTION: Demonstrates how import.meta.glob path resolution has changed in Vite 3, where keys are now relative to the current module instead of absolute paths.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migrating-to-vite-3.md#2025-04-05_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// app/frontend/controllers/index.js\nconst controllers = import.meta.glob('../**/*_controller.js', { eager: true })\n```\n\n----------------------------------------\n\nTITLE: Path Resolution Changes in Vite 3 - TypeScript\nDESCRIPTION: Shows the difference in path resolution between old and new versions of Vite, illustrating how relative paths are now used instead of full paths.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migrating-to-vite-3.md#2025-04-05_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst controllers = {\n-  '../controllers/home_controller.js': () => {}\n+  './home_controller.js': () => {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring directory aliases in Vite for JavaScript imports\nDESCRIPTION: JavaScript code that creates aliases for directories under sourceCodeDir to maintain compatibility with imports that don't use absolute paths in a Vite configuration.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migration.md#2025-04-05_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nimport path from 'path';\nimport fs from 'fs'\n\nconst sourceCodeDir = \"app/javascript\"\nconst items = fs.readdirSync(sourceCodeDir)\nconst directories = items.filter(item => fs.lstatSync(path.join(sourceCodeDir, item)).isDirectory())\nconst aliasesFromJavascriptRoot = {}\ndirectories.forEach(directory => {\n  aliasesFromJavascriptRoot[directory] = path.resolve(__dirname, sourceCodeDir, directory)\n})\nexport default defineConfig({\n  resolve: {\n    alias: {\n      ...aliasesFromJavascriptRoot,\n      // can add more aliases, as \"old\" images or \"@assets\", see below\n      images: path.resolve(__dirname, './app/assets/images'),\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Migrating assets from app/assets to sourceCodeDir in Vite\nDESCRIPTION: Shows the final step of migrating assets completely to the Vite sourceCodeDir, changing from @assets alias to the @/ prefix for assets that have been moved.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migration.md#2025-04-05_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n@font-face {\n  font-family: 'OpenSans';\n- src: url('@assets/fonts/OpenSans.woff2');\n+ src: url('@/fonts/OpenSans.woff2');\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing require.context with import.meta.glob in Vite\nDESCRIPTION: Demonstrates how to replace Webpack's require.context with Vite's import.meta.glob for dynamically importing modules like Stimulus controllers.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migration.md#2025-04-05_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- const context = require.context(\"./controllers\", true, /\\.js$/)\n+ const controllers = import.meta.glob('./**/*_controller.js', { eager: true })\n```\n\n----------------------------------------\n\nTITLE: Defining custom import aliases for assets in Vite\nDESCRIPTION: Example of configuring Vite with aliases to reference assets located outside the sourceCodeDir, such as those in the app/assets directory.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migration.md#2025-04-05_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resolve } from 'path'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      '@assets': resolve(__dirname, 'app/assets'),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite JSON with custom sourceCodeDir for Webpacker migration\nDESCRIPTION: Example configuration showing how Vite Ruby detects and uses the app/javascript directory from Webpacker during installation, setting it as the sourceCodeDir in the vite.json configuration file.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migration.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"all\": {\n    \"sourceCodeDir\": \"app/javascript\",\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Updating relative imports to absolute imports with @ prefix\nDESCRIPTION: Example of converting relative imports without path prefix to absolute imports with the @ prefix when migrating to Vite.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migration.md#2025-04-05_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import MyModule from \"admin/components/MyModule.vue\"\n+ import MyModule from \"@/admin/components/MyModule.vue\"\n```\n\n----------------------------------------\n\nTITLE: Updating CSS font-url references for Vite\nDESCRIPTION: Diff showing how to update font references in CSS from Sprockets' font-url helper to Vite's URL format, first using @assets alias and then moving to sourceCodeDir.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migration.md#2025-04-05_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n@font-face {\n  font-family: 'OpenSans';\n- src: font-url('OpenSans.woff2');\n+ src: url('@assets/fonts/OpenSans.woff2');\n}\n```\n\n----------------------------------------\n\nTITLE: Correct and Incorrect Usage of Vite Helpers in Ruby\nDESCRIPTION: Illustrates the correct and incorrect ways to reference nested entrypoints and assets using Vite helpers after the v3 update.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migrating-from-v2.md#2025-04-05_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n❌ vite_javascript_tag 'nested/application'\n✅ vite_javascript_tag 'entrypoints/nested/application'\n\n❌ vite_asset_path 'images/logo.svg'\n✅ vite_asset_path 'entrypoints/images/logo.svg'\n```\n\n----------------------------------------\n\nTITLE: Using Vite JavaScript Tag Helper in Ruby\nDESCRIPTION: Shows how to reference JavaScript entrypoints using the vite_javascript_tag helper, highlighting the need for explicit paths for nested directories.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migrating-from-v2.md#2025-04-05_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nvite_javascript_tag 'application' # entrypoints/application.js\n```\n\n----------------------------------------\n\nTITLE: Referencing Assets with Tag Helpers in Ruby\nDESCRIPTION: Demonstrates how to use the vite_asset_path helper to reference images in the new additional entrypoints directory structure.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/migrating-from-v2.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nvite_asset_path 'images/logo.svg' # app/frontend/images/logo.svg\n```\n\n----------------------------------------\n\nTITLE: Referencing CSS File with Source Code Directory Alias in ERB\nDESCRIPTION: ERB template snippet showing how to reference a CSS file using the source code directory alias (~/) when cssCodeSplit is disabled. This prevents ambiguity in asset resolution.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/troubleshooting.md#2025-04-05_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= vite_stylesheet_tag '~/style.css' unless ViteRuby.instance.dev_server_running? %>\n```\n\n----------------------------------------\n\nTITLE: Disabling Preload Links Header in Rails Development\nDESCRIPTION: Ruby configuration snippet that disables the preload links header in Rails development environment. This fixes a Safari bug where CSS and JS changes aren't reflected due to aggressive caching.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/troubleshooting.md#2025-04-05_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/development.rb\n\nRails.application.configure do\n  # Disable `Link: ... rel=preload` header to workaround Safari caching bug\n  # https://bugs.webkit.org/show_bug.cgi?id=193533\n  config.action_view.preload_links_header = false\nend\n```\n\n----------------------------------------\n\nTITLE: NPM Double Installation Commands on Deployment\nDESCRIPTION: Bash commands showing a scenario where double installation of NPM packages can occur during deployment. This helps identify deployment configuration issues that need correction.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/troubleshooting.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n# later\nNPM_CONFIG_INCLUDE=\"dev\" npm ci\n```\n\n----------------------------------------\n\nTITLE: Checking Vite Server Status in Ruby Console\nDESCRIPTION: Code snippet to verify if the Vite development server is running by checking its status in a Ruby console. This helps troubleshoot build triggering issues when the dev server should be handling assets.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/troubleshooting.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n> ViteRuby.instance.dev_server_running?\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Host in JSON Configuration\nDESCRIPTION: JSON configuration that explicitly sets the host to IPv4 localhost address for systems where localhost might default to IPv6 (::1). This resolves connection issues with Vite.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/troubleshooting.md#2025-04-05_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"development\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 3036,\n```\n\n----------------------------------------\n\nTITLE: Running Hanami Tests\nDESCRIPTION: Command to execute test suite using Rake\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/examples/hanami_bookshelf/README.md#2025-04-05_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% bundle exec rake\n```\n\n----------------------------------------\n\nTITLE: Installing Rake Tasks in Ruby Applications\nDESCRIPTION: Code to manually add Vite Ruby rake tasks in non-Rails applications by requiring vite_ruby and installing tasks\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/deployment.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'vite_ruby'\nViteRuby.install_tasks\n```\n\n----------------------------------------\n\nTITLE: Configuring Capistrano for Vite Ruby Assets\nDESCRIPTION: Configuration for Capistrano deployment to handle Vite Ruby asset manifests and linked directories\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/deployment.md#2025-04-05_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nappend :linked_dirs, \"public/vite\"\nappend :assets_manifests, \"public/vite/.vite/manifest*.*\"\n```\n\n----------------------------------------\n\nTITLE: Implementing vite_legacy_javascript_tag in an ERB template\nDESCRIPTION: Example ERB template showing how to properly implement both modern and legacy JavaScript support with Vite. The legacy tags should be placed at the end of the body while modern module tags remain in the head.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/plugin-legacy.md#2025-04-05_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<head>\n  <title>Example</title>\n  <%= csrf_meta_tags %>\n  <%= csp_meta_tag %>\n  <%= vite_client_tag %>\n\n  <%= vite_javascript_tag 'application' %>\n</head>\n<body>\n  <%= yield %>\n  <%= vite_legacy_javascript_tag 'application' %>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Running bundle install command\nDESCRIPTION: Command to install the vite_plugin_legacy gem after adding it to the Gemfile.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/plugin-legacy.md#2025-04-05_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Installing vite_plugin_legacy via Gemfile\nDESCRIPTION: Instructions for adding the vite_plugin_legacy gem to your Ruby application's Gemfile. This is needed to enable support for legacy browsers with Vite.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/guide/plugin-legacy.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'vite_plugin_legacy'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Ruby Environment Settings\nDESCRIPTION: JSON configuration file that defines environment-specific settings for Vite Ruby, including development and test environments with watch paths and output directories.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/config/index.md#2025-04-05_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"all\": {\n    \"watchAdditionalPaths\": []\n  },\n  \"development\": {\n    \"autoBuild\": true,\n    \"publicOutputDir\": \"vite-dev\",\n    \"port\": 3036\n  },\n  \"test\": {\n    \"autoBuild\": true,\n    \"publicOutputDir\": \"vite-test\",\n    \"port\": 3037\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Vite Config\nDESCRIPTION: JavaScript code showing how to access Ruby-defined environment variables in the Vite configuration file.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/config/index.md#2025-04-05_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.ts\nconst adminAssetsPath = process.env.ADMINISTRATOR_ASSETS_PATH\n```\n\n----------------------------------------\n\nTITLE: Initializing Vite Configuration with Ruby Plugin\nDESCRIPTION: Basic Vite configuration setup with the Ruby plugin. This is the main configuration file that Vite uses when running from the command line.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/config/index.md#2025-04-05_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport RubyPlugin from 'vite-plugin-ruby'\n\nexport default defineConfig({\n  plugins: [\n    RubyPlugin(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Environment Variables in Ruby\nDESCRIPTION: Ruby configuration file for setting environment variables that need to be resolved at runtime, demonstrating how to configure ViteRuby environment settings.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/config/index.md#2025-04-05_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/vite.rb\nViteRuby.env['ADMINISTRATOR_ASSETS_PATH'] =\n  \"#{ Gem.loaded_specs['administrator'].full_gem_path }/app/frontend\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite.js Path Aliases\nDESCRIPTION: Example configuration for setting up path aliases in Vite.js to reference assets directory. Uses defineConfig to create a configuration object with resolve.alias settings.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/docs/src/config/index.md#2025-04-05_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resolve } from 'path'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      '@assets': resolve(__dirname, 'app/assets'),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite\nDESCRIPTION: This command runs the entire test suite for the Vite Ruby project. Ensuring all tests pass is a critical step before submitting a pull request.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/CONTRIBUTING.md#2025-04-05_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbin/m\n```\n\n----------------------------------------\n\nTITLE: Running Ruby Linter\nDESCRIPTION: This command runs the Ruby linter (RuboCop) to check for style violations and automatically fix them where possible. It's another step in the quality assurance process for Ruby code.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/CONTRIBUTING.md#2025-04-05_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbin/rubocop -A\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Linter\nDESCRIPTION: This command runs the JavaScript linter to check for style violations and automatically fix them where possible. It's part of the quality assurance process before submitting a pull request.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/CONTRIBUTING.md#2025-04-05_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm lint --fix\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies with PNPM\nDESCRIPTION: This command installs all the JavaScript dependencies for the project using PNPM. It's another important step in setting up the development environment for the Vite Ruby project.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/CONTRIBUTING.md#2025-04-05_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment with Bundle\nDESCRIPTION: This command installs all the Ruby dependencies for the project using Bundler. It's a crucial step in setting up the development environment for contributing to the Vite Ruby project.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/CONTRIBUTING.md#2025-04-05_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Ruby and Vite Rails from GitHub\nDESCRIPTION: This snippet shows how to install the latest development versions of Vite Ruby and Vite Rails gems directly from GitHub. This is useful for testing recent fixes or features that are not yet released.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/CONTRIBUTING.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"vite_ruby\", github: \"ElMassimo/vite_ruby\"\ngem \"vite_rails\", github: \"ElMassimo/vite_rails\"\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Rails Gem in Ruby\nDESCRIPTION: This snippet shows how to add the Vite Rails gem to a Ruby on Rails application's Gemfile. It includes a note for using the legacy version with Rails 4.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_rails/README.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'vite_rails' # vite_rails_legacy if using Rails 4\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Rails in Bash\nDESCRIPTION: These bash commands install the Vite Rails gem and run the initial setup. It uses Bundler to install the gem and then executes the vite install command.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_rails/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\nbundle exec vite install\n```\n\n----------------------------------------\n\nTITLE: Configuring vite-plugin-ruby in Vite\nDESCRIPTION: Example configuration for adding vite-plugin-ruby to the plugins array in vite.config.js. It demonstrates how to import and use the plugin alongside other plugins like Vue.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite-plugin-ruby/README.md#2025-04-05_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.js\nimport Vue from '@vitejs/plugin-vue' // Example, could be using other plugins.\nimport ViteRuby from 'vite-plugin-ruby'\n\nexport default {\n  plugins: [\n    Vue(),\n    ViteRuby(),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-ruby via npm or yarn\nDESCRIPTION: Command to install the vite-plugin-ruby package using npm or yarn. This is typically not needed if using vite_rails, vite_hanami, or vite_ruby, which install the plugin automatically.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite-plugin-ruby/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i vite-plugin-ruby # yarn add vite-plugin-ruby\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Rails Plugin\nDESCRIPTION: Basic configuration setup for vite.config.ts showing how to add the ViteRails plugin alongside other plugins like Vue.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite-plugin-rails/README.md#2025-04-05_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport Vue from '@vitejs/plugin-vue' // Example, could be using other plugins.\nimport ViteRails from 'vite-plugin-rails'\n\nexport default {\n  plugins: [\n    Vue(),\n    ViteRails(),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in ViteRails\nDESCRIPTION: Example showing how to configure environment variables with defaults and required values using vite-plugin-environment.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite-plugin-rails/README.md#2025-04-05_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    ViteRails({\n      envVars: {\n        API_KEY: null,\n        OPTIONAL_KEY: '<opt-value>',\n      },\n    }),\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Reload Paths in ViteRails\nDESCRIPTION: Example showing how to configure additional paths for the full-reload feature.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite-plugin-rails/README.md#2025-04-05_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n    ViteRails({\n      fullReload: {\n        additionalPaths: ['app/serializers/**/*']\n      },\n    }),\n```\n\n----------------------------------------\n\nTITLE: Disabling Brotli Compression in ViteRails\nDESCRIPTION: Configuration example showing how to disable brotli compression while keeping gzip enabled.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite-plugin-rails/README.md#2025-04-05_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    ViteRails({\n      compress: { brotli: false }\n    }),\n```\n\n----------------------------------------\n\nTITLE: Disabling All Compression in ViteRails\nDESCRIPTION: Configuration example showing how to disable all compression features.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite-plugin-rails/README.md#2025-04-05_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    ViteRails({\n      compress: false\n    }),\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-rails using NPM or Yarn\nDESCRIPTION: Command to install the vite-plugin-rails package using either npm or yarn package managers.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite-plugin-rails/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i vite-plugin-rails # yarn add vite-plugin-rails\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Setting Up Database (Shell)\nDESCRIPTION: Commands to install Ruby gems, npm packages, and set up the database for the Rails application using Vite.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/examples/rails/README.md#2025-04-05_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbundle install\nyarn install\nbin/rake db:create db:migrate\n```\n\n----------------------------------------\n\nTITLE: Starting Development Servers (Shell)\nDESCRIPTION: Commands to start the Rails development server and the Vite.js development server for asset compilation.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/examples/rails/README.md#2025-04-05_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/rails s\nbin/vite dev\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Console\nDESCRIPTION: Command to launch the Hanami development console for interactive Ruby commands\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/examples/hanami_bookshelf/README.md#2025-04-05_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n% bundle exec hanami console\n```\n\n----------------------------------------\n\nTITLE: Running Hanami Development Server\nDESCRIPTION: Command to start the Hanami web server in development mode\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/examples/hanami_bookshelf/README.md#2025-04-05_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n% bundle exec hanami server\n```\n\n----------------------------------------\n\nTITLE: Preparing Hanami Database\nDESCRIPTION: Commands to prepare databases for both development and test environments, including creation and migration\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/examples/hanami_bookshelf/README.md#2025-04-05_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n% bundle exec hanami db prepare\n\n% HANAMI_ENV=test bundle exec hanami db prepare\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 3.0.0\nDESCRIPTION: Major version release notes referencing external documentation for features and breaking changes.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_plugin_legacy/CHANGELOG.md#2025-04-05_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# [3.0.0](https://github.com/ElMassimo/vite_ruby/compare/vite_plugin_legacy@0.5.6...vite_plugin_legacy@3.0.0) (2021-08-16)\n\nSee https://github.com/ElMassimo/vite_ruby/pull/116 for features and breaking changes.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 3.0.1\nDESCRIPTION: Release notes for version 3.0.1 mentioning support for vite@2.7.0 and changes to legacy polyfills entry naming.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_plugin_legacy/CHANGELOG.md#2025-04-05_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.1](https://github.com/ElMassimo/vite_ruby/compare/vite_plugin_legacy@3.0.0...vite_plugin_legacy@3.0.1) (2021-12-17)\n\n- Support vite@2.7.0, which added a null character to the legacy polyfills entry name.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 3.0.2\nDESCRIPTION: Release notes detailing bug fixes in version 3.0.2, focusing on upgrade command compatibility.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_plugin_legacy/CHANGELOG.md#2025-04-05_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.2](https://github.com/ElMassimo/vite_ruby/compare/vite_plugin_legacy@3.0.1...vite_plugin_legacy@3.0.2) (2021-12-17)\n\n### Bug Fixes\n\n* ensure vite_plugin_legacy is upgraded by the upgrade command ([2f9437d](https://github.com/ElMassimo/vite_ruby/commit/2f9437d248e27aa03b5b8a1df3e3d6a52c791cd1))\n```\n\n----------------------------------------\n\nTITLE: Running Vite Installation Commands\nDESCRIPTION: Terminal commands to install Vite dependencies and generate initial configuration files for the project.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_padrino/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\nbundle exec vite install\n```\n\n----------------------------------------\n\nTITLE: Installing vite_padrino Gem\nDESCRIPTION: Instructions for adding the vite_padrino gem to a Padrino application's Gemfile to enable Vite integration.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_padrino/README.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'vite_padrino'\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Plugin Legacy Gem in Ruby\nDESCRIPTION: This snippet shows how to add the vite_plugin_legacy gem to a Ruby project's Gemfile. It's the first step in integrating the plugin with a Ruby application.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_plugin_legacy/README.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'vite_plugin_legacy'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bundler in Ruby\nDESCRIPTION: This bash command installs the necessary dependencies, including the vite_plugin_legacy gem, using Bundler. It should be run after adding the gem to the Gemfile.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_plugin_legacy/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Running Vite Installation Commands\nDESCRIPTION: Terminal commands to install and initialize Vite in a Hanami application. Installs dependencies and generates configuration files.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_hanami/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\nbundle exec vite install\n```\n\n----------------------------------------\n\nTITLE: Installing vite_hanami Gem\nDESCRIPTION: Adding the vite_hanami gem to a Hanami application's Gemfile for Vite integration.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_hanami/README.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'vite_hanami'\n```\n\n----------------------------------------\n\nTITLE: Git commit and version history in Markdown format\nDESCRIPTION: Lists version changes, bug fixes, and features added to vite-plugin-ruby package with Git commit references and links\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite-plugin-ruby/CHANGELOG.md#2025-04-05_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.1.1](https://github.com/ElMassimo/vite_ruby/compare/vite-plugin-ruby@5.1.0...vite-plugin-ruby@5.1.1) (2024-11-05)\n\n### Bug Fixes\n\n* do not override userConfig.server.origin when provided ([#505](https://github.com/ElMassimo/vite_ruby/issues/505)) ([57a6e7a](https://github.com/ElMassimo/vite_ruby/commit/57a6e7ace701cc5d1199d3e5a6fcd7276b29a693))\n```\n\n----------------------------------------\n\nTITLE: Documenting Vite Ruby Changelog in Markdown\nDESCRIPTION: This snippet provides a structured changelog for Vite Ruby, detailing version 0.5.0 changes and the initial release of vite-plugin-rails. It includes information about bug fixes, new features, and links to related issues and commits.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite-plugin-rails/CHANGELOG.md#2025-04-05_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.5.0 (2023-11-16)\n\n\n### Bug Fixes\n\n* ssr incompatibility with vite 4 ([#345](https://github.com/ElMassimo/vite_ruby/issues/345)) ([3491bde](https://github.com/ElMassimo/vite_ruby/commit/3491bdedad2b0fcb8a1895efa4dafb3874d14efd)), closes [#333](https://github.com/ElMassimo/vite_ruby/issues/333)\n\n\n### Features\n\n* create vite-plugin-rails, an opinionated version of `vite-plugin-ruby` ([#282](https://github.com/ElMassimo/vite_ruby/issues/282)) ([16375fb](https://github.com/ElMassimo/vite_ruby/commit/16375fb1f6f2bf86dff935ca3aaf91c333a796ff))\n* upgrade vite-plugin-rails dependencies to support vite 5 ([b4eade9](https://github.com/ElMassimo/vite_ruby/commit/b4eade9b92413172501df8f762a9c0164633ee95))\n\n\n\n## vite-plugin-rails 0.1.0  (2022-10-19)\n\n- Initial Release\n```\n\n----------------------------------------\n\nTITLE: Setting up Vite Rails Legacy in a Rails 4 Project\nDESCRIPTION: These commands install the gem and run the Vite installation script. This process will generate the necessary configuration files and set up a sample Vite integration in the Rails 4 project.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_rails_legacy/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\nbundle exec vite install\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Rails Legacy in Ruby on Rails 4\nDESCRIPTION: This snippet shows how to add the vite_rails_legacy gem to a Rails 4 application's Gemfile. It's the first step in integrating Vite with a legacy Rails project.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/vite_rails_legacy/README.md#2025-04-05_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'vite_rails_legacy'\n```\n\n----------------------------------------\n\nTITLE: Running Vite Ruby Installation Commands\nDESCRIPTION: Commands to install Vite Ruby after adding it to your Gemfile. First runs bundle install to install the gem, then runs the vite install command to set up configuration files and a sample setup.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\nbundle exec vite install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Robots.txt File with Documentation Reference\nDESCRIPTION: A robots.txt file with a comment that points users to the official robots.txt documentation.\nSOURCE: https://github.com/ElMassimo/vite_ruby/blob/main/examples/rails/public/robots.txt#2025-04-05_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# See https://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file\n```"
  }
]