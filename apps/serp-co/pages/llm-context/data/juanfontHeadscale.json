[
  {
    "owner": "juanfont",
    "repo": "headscale",
    "content": "TITLE: Configuring Headscale OIDC Authentication in YAML\nDESCRIPTION: Defines the OIDC authentication parameters in Headscale's config.yaml file, including issuer URL, client credentials, allowed domains, groups, users, and optional PKCE settings. This snippet controls the main OIDC integration behavior, scopes for authentication, and supports multiple secret loading methods. It expects the correct OIDC provider URLs and credentials as input and outputs Headscale's OIDC integration config. Requires a proper OIDC provider and Headscale environment.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/oidc.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noidc:\n  # Block further startup until the OIDC provider is healthy and available\n  only_start_if_oidc_is_available: true\n  # Specified by your OIDC provider\n  issuer: \"https://your-oidc.issuer.com/path\"\n  # Specified/generated by your OIDC provider\n  client_id: \"your-oidc-client-id\"\n  client_secret: \"your-oidc-client-secret\"\n  # alternatively, set `client_secret_path` to read the secret from the file.\n  # It resolves environment variables, making integration to systemd's\n  # `LoadCredential` straightforward:\n  #client_secret_path: \"${CREDENTIALS_DIRECTORY}/oidc_client_secret\"\n  # as third option, it's also possible to load the oidc secret from environment variables\n  # set HEADSCALE_OIDC_CLIENT_SECRET to the required value\n\n  # Customize the scopes used in the OIDC flow, defaults to \"openid\", \"profile\" and \"email\" and add custom query\n  # parameters to the Authorize Endpoint request. Scopes default to \"openid\", \"profile\" and \"email\".\n  scope: [\"openid\", \"profile\", \"email\", \"custom\"]\n  # Optional: Passed on to the browser login request â€“ used to tweak behaviour for the OIDC provider\n  extra_params:\n    domain_hint: example.com\n\n  # Optional: List allowed principal domains and/or users. If an authenticated user's domain is not in this list,\n  # the authentication request will be rejected.\n  allowed_domains:\n    - example.com\n  # Optional. Note that groups from Keycloak have a leading '/'.\n  allowed_groups:\n    - /headscale\n  # Optional.\n  allowed_users:\n    - alice@example.com\n\n  # Optional: PKCE (Proof Key for Code Exchange) configuration\n  # PKCE adds an additional layer of security to the OAuth 2.0 authorization code flow\n  # by preventing authorization code interception attacks\n  # See https://datatracker.ietf.org/doc/html/rfc7636\n  pkce:\n    # Enable or disable PKCE support (default: false)\n    enabled: false\n    # PKCE method to use:\n    # - plain: Use plain code verifier\n    # - S256: Use SHA256 hashed code verifier (default, recommended)\n    method: S256\n```\n\n----------------------------------------\n\nTITLE: TLS Certificate Paths Configuration - YAML\nDESCRIPTION: This snippet configures the paths to the TLS certificate and key files. If the paths are relative, they are interpreted as relative to the directory where the configuration file is located.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/tls.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntls_cert_path: \"\"\ntls_key_path: \"\"\n```\n\n----------------------------------------\n\nTITLE: Initiating Tailscale Login - headscale - Command Line\nDESCRIPTION: This command is used to configure the Tailscale Windows client to connect to a specified headscale server instead of the default Tailscale service. It takes the URL of the headscale instance as an argument, overrides the default connection, and initiates the authentication flow, typically by opening a browser window. Requires the Tailscale client to be installed and accessible from the command line or PowerShell.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/usage/connect/windows.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntailscale login --login-server <YOUR_HEADSCALE_URL>\n```\n\n----------------------------------------\n\nTITLE: Creating Headscale Users in Native and Container Environments\nDESCRIPTION: Commands for creating a new headscale user, which serves as a namespace for managing nodes. Users can have multiple nodes (machines/devices) assigned to them.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/usage/getting-started.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nheadscale users create <USER>\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it headscale \\\n  headscale users create <USER>\n```\n\n----------------------------------------\n\nTITLE: Registering and Advertising an Exit Node with Tailscale (console)\nDESCRIPTION: This command registers a node with a specified login server and enables the node to advertise itself as an exit node using the Tailscale CLI. The prerequisite is that 'tailscale' is installed and the user has appropriate privileges (usually root). The --login-server parameter specifies the Headscale server URL, and --advertise-exit-node enables the exit node functionality. No input parameters aside from those provided on the command line are required. The expected outcome is that the node becomes registered and begins advertising as an exit node.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/exit-node.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsudo tailscale up --login-server https://headscale.example.com --advertise-exit-node\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Policy for Headscale with huJSON - JSON\nDESCRIPTION: This JSON snippet demonstrates how to define ACL policies for a Headscale deployment using the huJSON format. It includes group definitions mapping logical roles to users, tagOwners associating tags with authorized groups, host entries linking names to CIDR addresses, and a comprehensive set of ACL rules specifying permitted actions for each user group and tag. Required dependencies include a running Headscale server with policy path specified in config.yaml and administrative permissions to apply changes. Inputs are the group and tag assignments, protocol/port definitions, and destination objects in the network; outputs are applied network restrictions, enforced at reload or restart. Limitations include strict IP/CIDR host specification (no DNS) and the need for server reload after configuration changes.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/acls.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // groups are collections of users having a common scope. A user can be in multiple groups\n  // groups cannot be composed of groups\n  \"groups\": {\n    \"group:boss\": [\"boss\"],\n    \"group:dev\": [\"dev1\", \"dev2\"],\n    \"group:admin\": [\"admin1\"],\n    \"group:intern\": [\"intern1\"]\n  },\n  // tagOwners in tailscale is an association between a TAG and the people allowed to set this TAG on a server.\n  // This is documented [here](https://tailscale.com/kb/1068/acl-tags#defining-a-tag)\n  // and explained [here](https://tailscale.com/blog/rbac-like-it-was-meant-to-be/)\n  \"tagOwners\": {\n    // the administrators can add servers in production\n    \"tag:prod-databases\": [\"group:admin\"],\n    \"tag:prod-app-servers\": [\"group:admin\"],\n\n    // the boss can tag any server as internal\n    \"tag:internal\": [\"group:boss\"],\n\n    // dev can add servers for dev purposes as well as admins\n    \"tag:dev-databases\": [\"group:admin\", \"group:dev\"],\n    \"tag:dev-app-servers\": [\"group:admin\", \"group:dev\"]\n\n    // interns cannot add servers\n  },\n  // hosts should be defined using its IP addresses and a subnet mask.\n  // to define a single host, use a /32 mask. You cannot use DNS entries here,\n  // as they're prone to be hijacked by replacing their IP addresses.\n  // see https://github.com/tailscale/tailscale/issues/3800 for more information.\n  \"hosts\": {\n    \"postgresql.internal\": \"10.20.0.2/32\",\n    \"webservers.internal\": \"10.20.10.1/29\"\n  },\n  \"acls\": [\n    // boss have access to all servers\n    {\n      \"action\": \"accept\",\n      \"src\": [\"group:boss\"],\n      \"dst\": [\n        \"tag:prod-databases:*\",\n        \"tag:prod-app-servers:*\",\n        \"tag:internal:*\",\n        \"tag:dev-databases:*\",\n        \"tag:dev-app-servers:*\"\n      ]\n    },\n\n    // admin have only access to administrative ports of the servers, in tcp/22\n    {\n      \"action\": \"accept\",\n      \"src\": [\"group:admin\"],\n      \"proto\": \"tcp\",\n      \"dst\": [\n        \"tag:prod-databases:22\",\n        \"tag:prod-app-servers:22\",\n        \"tag:internal:22\",\n        \"tag:dev-databases:22\",\n        \"tag:dev-app-servers:22\"\n      ]\n    },\n\n    // we also allow admin to ping the servers\n    {\n      \"action\": \"accept\",\n      \"src\": [\"group:admin\"],\n      \"proto\": \"icmp\",\n      \"dst\": [\n        \"tag:prod-databases:*\",\n        \"tag:prod-app-servers:*\",\n        \"tag:internal:*\",\n        \"tag:dev-databases:*\",\n        \"tag:dev-app-servers:*\"\n      ]\n    },\n\n    // developers have access to databases servers and application servers on all ports\n    // they can only view the applications servers in prod and have no access to databases servers in production\n    {\n      \"action\": \"accept\",\n      \"src\": [\"group:dev\"],\n      \"dst\": [\n        \"tag:dev-databases:*\",\n        \"tag:dev-app-servers:*\",\n        \"tag:prod-app-servers:80,443\"\n      ]\n    },\n    // developers have access to the internal network through the router.\n    // the internal network is composed of HTTPS endpoints and Postgresql\n    // database servers. There's an additional rule to allow traffic to be\n    // forwarded to the internal subnet, 10.20.0.0/16. See this issue\n    // https://github.com/juanfont/headscale/issues/502\n    {\n      \"action\": \"accept\",\n      \"src\": [\"group:dev\"],\n      \"dst\": [\"10.20.0.0/16:443,5432\", \"router.internal:0\"]\n    },\n\n    // servers should be able to talk to database in tcp/5432. Database should not be able to initiate connections to\n    // applications servers\n    {\n      \"action\": \"accept\",\n      \"src\": [\"tag:dev-app-servers\"],\n      \"proto\": \"tcp\",\n      \"dst\": [\"tag:dev-databases:5432\"]\n    },\n    {\n      \"action\": \"accept\",\n      \"src\": [\"tag:prod-app-servers\"],\n      \"dst\": [\"tag:prod-databases:5432\"]\n    },\n\n    // interns have access to dev-app-servers only in reading mode\n    {\n      \"action\": \"accept\",\n      \"src\": [\"group:intern\"],\n      \"dst\": [\"tag:dev-app-servers:80,443\"]\n    },\n\n    // We still have to allow internal users communications since nothing guarantees that each user have\n    // their own users.\n    { \"action\": \"accept\", \"src\": [\"boss\"], \"dst\": [\"boss:*\"] },\n    { \"action\": \"accept\", \"src\": [\"dev1\"], \"dst\": [\"dev1:*\"] },\n    { \"action\": \"accept\", \"src\": [\"dev2\"], \"dst\": [\"dev2:*\"] },\n    { \"action\": \"accept\", \"src\": [\"admin1\"], \"dst\": [\"admin1:*\"] },\n    { \"action\": \"accept\", \"src\": [\"intern1\"], \"dst\": [\"intern1:*\"] }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Tailscale Client to Headscale with Preauthkey\nDESCRIPTION: Command for non-interactively connecting a Tailscale client to a headscale server using a preauthkey. This method is useful for automated deployments or scripts.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/usage/getting-started.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntailscale up --login-server <YOUR_HEADSCALE_URL> --authkey <YOUR_AUTH_KEY>\n```\n\n----------------------------------------\n\nTITLE: Connecting to headscale with a Pre-Authenticated Key (Shell)\nDESCRIPTION: Executed on a client machine, this command registers a node using Tailscale's 'up' command, authenticating with a pre-generated key. Both the headscale URL and authentication key must be populated. Requires Tailscale installed on the client.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ntailscale up --login-server <YOUR_HEADSCALE_URL> --authkey <YOUR_AUTH_KEY>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy for Headscale\nDESCRIPTION: Nginx configuration for proxying requests to Headscale. Includes WebSocket support, TLS settings, and proper header forwarding to ensure compatibility with the Tailscale protocol.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/integration/reverse-proxy.md#_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nmap $http_upgrade $connection_upgrade {\n    default      upgrade;\n    ''           close;\n}\n\nserver {\n    listen 80;\n\tlisten [::]:80;\n\n\tlisten 443      ssl http2;\n\tlisten [::]:443 ssl http2;\n\n    server_name <YOUR_SERVER_NAME>;\n\n    ssl_certificate <PATH_TO_CERT>;\n    ssl_certificate_key <PATH_CERT_KEY>;\n    ssl_protocols TLSv1.2 TLSv1.3;\n\n    location / {\n        proxy_pass http://<IP:PORT>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_set_header Host $server_name;\n        proxy_redirect http:// https://;\n        proxy_buffering off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\" always;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Reverse Proxy for Headscale\nDESCRIPTION: Simple Caddy configuration for proxying requests to Headscale. Caddy automatically handles TLS certificate provisioning, HTTPS redirection, and WebSocket proxying.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/integration/reverse-proxy.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n<YOUR_SERVER_NAME> {\n    reverse_proxy <IP:PORT>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Headscale OIDC Authentication for Google OAuth in YAML\nDESCRIPTION: Demonstrates the minimal Headscale OIDC configuration required to integrate Google OAuth by specifying the Google issuer URL and inserting your Google OAuth client ID and secret. The snippet applies default scopes of openid, profile, and email. Users can optionally restrict authentication through allowed_domains or allowed_users in Headscale's config. Input values must be obtained from Google Cloud Console OAuth client credentials.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/oidc.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noidc:\n  issuer: \"https://accounts.google.com\"\n  client_id: \"\"\n  client_secret: \"\"\n  scope: [\"openid\", \"profile\", \"email\"]\n```\n\n----------------------------------------\n\nTITLE: Registering Nodes with Machine Key in Native and Container Environments\nDESCRIPTION: Commands for registering a node to a headscale user using a machine key obtained from the interactive login process. This completes the node registration initiated by the tailscale up command.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/usage/getting-started.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nheadscale nodes register --user <USER> --key <YOUR_MACHINE_KEY>\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it headscale \\\n  headscale nodes register --user <USER> --key <YOUR_MACHINE_KEY>\n```\n\n----------------------------------------\n\nTITLE: Configuring Headscale OIDC Authentication for Azure AD in YAML\nDESCRIPTION: This YAML snippet shows the Headscale OIDC configuration for integrating with Azure Active Directory after provisioning an app via Terraform. It includes the Azure issuer URL, client ID, client secret, scopes, and additional parameters like domain hints and login prompts to tailor the authentication flow. Inputs must be replaced with tenant-specific values generated during the Azure AD provisioning step. It supports group membership inclusion in authentication claims.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/oidc.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noidc:\n  issuer: \"https://login.microsoftonline.com/<tenant-UUID>/v2.0\"\n  client_id: \"<client-id-from-terraform>\"\n  client_secret: \"<client-secret-from-terraform>\"\n\n  # Optional: add \"groups\"\n  scope: [\"openid\", \"profile\", \"email\"]\n  extra_params:\n    # Use your own domain, associated with Azure AD\n    domain_hint: example.com\n    # Optional: Force the Azure AD account picker\n    prompt: select_account\n```\n\n----------------------------------------\n\nTITLE: Configuring a Client to Use an Exit Node with Tailscale (console)\nDESCRIPTION: This command configures a client device to use a designated Tailscale exit node via the CLI. The 'tailscale' application must be installed, and the device must be registered in the same Tailscale/Headscale network as the exit node. The --exit-node parameter specifies the hostname of the exit node to use. After this command, the client's internet-bound traffic will route through the specified exit node. Replace 'phobos' with the actual exit node's name as appropriate.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/exit-node.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nsudo tailscale set --exit-node phobos\n```\n\n----------------------------------------\n\nTITLE: Creating Preauthkeys for Non-interactive Registration in Native and Container Environments\nDESCRIPTION: Commands for generating preauthkeys that allow non-interactive node registration. By default, keys are valid for one hour and can only be used once.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/usage/getting-started.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nheadscale preauthkeys create --user <USER>\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it headscale \\\n  headscale preauthkeys create --user <USER>\n```\n\n----------------------------------------\n\nTITLE: Provisioning Azure AD Application for Headscale Using Terraform HCL\nDESCRIPTION: This Terraform snippet provisions an Azure AD Application, service principal, and secrets for integrating Headscale OIDC authentication with Azure Active Directory. It configures required Microsoft Graph scopes, redirect URIs, and group membership claims to support authentication workflows. The resource outputs expose the client ID and secret for use in Headscale config. Prerequisites include having an Azure subscription and Terraform environment for applying the configuration.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/oidc.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuread_application\" \"headscale\" {\n  display_name = \"Headscale\"\n\n  sign_in_audience = \"AzureADMyOrg\"\n  fallback_public_client_enabled = false\n\n  required_resource_access {\n    // Microsoft Graph\n    resource_app_id = \"00000003-0000-0000-c000-000000000000\"\n\n    resource_access {\n      // scope: profile\n      id   = \"14dad69e-099b-42c9-810b-d002981feec1\"\n      type = \"Scope\"\n    }\n    resource_access {\n      // scope: openid\n      id   = \"37f7f235-527c-4136-accd-4a02d197296e\"\n      type = \"Scope\"\n    }\n    resource_access {\n      // scope: email\n      id   = \"64a6cdd6-aab1-4aaf-94b8-3cc8405e90d0\"\n      type = \"Scope\"\n    }\n  }\n  web {\n    # Points at your running headscale instance\n    redirect_uris = [\"https://headscale.example.com/oidc/callback\"]\n\n    implicit_grant {\n      access_token_issuance_enabled = false\n      id_token_issuance_enabled = true\n    }\n  }\n\n  group_membership_claims = [\"SecurityGroup\"]\n  optional_claims {\n    # Expose group memberships\n    id_token {\n      name = \"groups\"\n    }\n  }\n}\n\nresource \"azuread_application_password\" \"headscale-application-secret\" {\n  display_name          = \"Headscale Server\"\n  application_object_id = azuread_application.headscale.object_id\n}\n\nresource \"azuread_service_principal\" \"headscale\" {\n  application_id = azuread_application.headscale.application_id\n}\n\nresource \"azuread_service_principal_password\" \"headscale\" {\n  service_principal_id = azuread_service_principal.headscale.id\n  end_date_relative    = \"44640h\"\n}\n\noutput \"headscale_client_id\" {\n  value = azuread_application.headscale.application_id\n}\n\noutput \"headscale_client_secret\" {\n  value = azuread_application_password.headscale-application-secret.value\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New User in headscale via Docker Exec (Shell)\nDESCRIPTION: This command runs 'headscale users create myfirstuser' inside the headscale container using 'docker exec'. It creates a new headscale user named 'myfirstuser' and requires the target container to be running and Docker installed. Adjust the username as needed for your environment.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it headscale \\\n  headscale users create myfirstuser\n```\n\n----------------------------------------\n\nTITLE: Generating a Pre-Authenticated Key in headscale (Shell)\nDESCRIPTION: This command creates a reusable pre-authentication key for node registration, executing inside the headscale container with 'docker exec'. It uses options to set the target user, key reusability, and expiration (24h). Requires headscale running in Docker and the specified user to exist.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it headscale \\\n  headscale preauthkeys create --user myfirstuser --reusable --expiration 24h\n```\n\n----------------------------------------\n\nTITLE: Registering a Machine with headscale in a Container (Shell)\nDESCRIPTION: This command registers a node with headscale by executing 'headscale nodes register' with user and key parameters inside the active container. It assumes Docker, the headscale container, and an existing user. Replace <YOUR_MACHINE_KEY> with your device's node register key for successful operation.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it headscale \\\n  headscale nodes register --user myfirstuser --key <YOUR_MACHINE_KEY>\n```\n\n----------------------------------------\n\nTITLE: Initializing headscale Data Directories on Host with Shell\nDESCRIPTION: This snippet creates the necessary local directories for storing headscale's configuration and state before container launch. It uses basic shell commands \"mkdir\" and \"cd\" to generate the folder structure, which will later be mounted into the Docker container as persistent volumes. No dependencies are required other than a standard shell and filesystem access. It must be run on the host where the Docker container will execute.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ./headscale/{config,lib,run}\ncd ./headscale\n```\n\n----------------------------------------\n\nTITLE: Listing Available and Approved Exit Node Routes with Headscale (console)\nDESCRIPTION: This command uses the Headscale CLI to list all available and approved routes on nodes, displaying which nodes are advertising exit node routes. Requires 'headscale' installed and configured to access your Headscale server. The command outputs a table with node IDs, hostnames, route approvals, and serving status. It is useful for administrators to check route availability before approval.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/exit-node.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nheadscale nodes list-routes\nID | Hostname           | Approved | Available       | Serving\n1  | ts-head-ruqsg8     |          | 0.0.0.0/0, ::/0 |\n2  | ts-unstable-fq7ob4 |          | 0.0.0.0/0, ::/0 |\n```\n\n----------------------------------------\n\nTITLE: Approving an Exit Node Route with Headscale (console)\nDESCRIPTION: This command approves a specific exit node route for a node using the Headscale CLI. It requires a valid node identifier and route (in this case, 0.0.0.0/0 for IPv4). After execution, the specified route is approved for the node, enabling it to serve as an exit node. Dependencies include a Headscale server with node registration, and the capability to approve routes. Approval of one IP family route is sufficient, as the other is auto-included.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/exit-node.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nheadscale nodes approve-routes --identifier 1 --routes 0.0.0.0/0\nNode updated\n```\n\n----------------------------------------\n\nTITLE: Configuring Static DNS Records in Headscale YAML Configuration\nDESCRIPTION: Example of configuring static DNS records in the Headscale configuration file. This approach requires a restart of Headscale when records are changed and is suitable for entries that don't change frequently.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/dns.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndns:\n  ...\n  extra_records:\n    - name: \"grafana.myvpn.example.com\"\n      type: \"A\"\n      value: \"100.64.0.3\"\n\n    - name: \"prometheus.myvpn.example.com\"\n      type: \"A\"\n      value: \"100.64.0.3\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Starting headscale with Docker Compose (YAML Configuration)\nDESCRIPTION: This Docker Compose YAML defines a service for running headscale, specifying image, restart policy, container name, port mappings, and mounted volumes for persistence. The <HEADSCALE_PATH> placeholder must be replaced with the correct absolute path on the host. This approach requires docker-compose and appropriate permissions to the given directories. The 'serve' command is passed as the container entrypoint.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\n\nservices:\n  headscale:\n    image: headscale/headscale:<VERSION>\n    restart: unless-stopped\n    container_name: headscale\n    ports:\n      - \"127.0.0.1:8080:8080\"\n      - \"127.0.0.1:9090:9090\"\n    volumes:\n      # Please set <HEADSCALE_PATH> to the absolute path\n      # of the previously created headscale directory.\n      - <HEADSCALE_PATH>/config:/etc/headscale\n      - <HEADSCALE_PATH>/lib:/var/lib/headscale\n      - <HEADSCALE_PATH>/run:/var/run/headscale\n    command: serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic DNS Records with JSON File in Headscale\nDESCRIPTION: Example of configuring dynamic DNS records using a JSON file that Headscale watches for changes. This approach allows adding, updating, or removing DNS records without restarting Headscale.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/dns.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"grafana.myvpn.example.com\",\n    \"type\": \"A\",\n    \"value\": \"100.64.0.3\"\n  },\n  {\n    \"name\": \"prometheus.myvpn.example.com\",\n    \"type\": \"A\",\n    \"value\": \"100.64.0.3\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Connecting Tailscale Client to Headscale Server\nDESCRIPTION: Command for connecting a Tailscale client to a headscale server. This initiates an interactive login process where the user will receive a machine key for registration.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/usage/getting-started.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntailscale up --login-server <YOUR_HEADSCALE_URL>\n```\n\n----------------------------------------\n\nTITLE: Creating an API Key for Headscale Remote Authentication - Shell\nDESCRIPTION: This snippet shows how to create, list, and expire API keys on a Headscale server to authenticate remote CLI sessions. The 'headscale apikeys create' command generates a new API key with a specified expiration period, which must be saved as it cannot be retrieved again. The 'headscale apikeys list' command displays all existing keys, and 'headscale apikeys expire' revokes keys by prefix. These commands require access to the Headscale server and are prerequisites for remote CLI control.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/remote-cli.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nheadscale apikeys create --expiration 90d\n```\n\nLANGUAGE: shell\nCODE:\n```\nheadscale apikeys list\n```\n\nLANGUAGE: shell\nCODE:\n```\nheadscale apikeys expire --prefix \"<PREFIX>\"\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Headscale Service (Shell)\nDESCRIPTION: Enables and starts the Headscale systemd service. This ensures that Headscale starts automatically on boot and is running immediately. Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl enable --now headscale\n```\n\n----------------------------------------\n\nTITLE: Let's Encrypt Configuration - YAML\nDESCRIPTION: This snippet configures Headscale to obtain a TLS certificate automatically using Let's Encrypt. It includes settings for the hostname, listen address, cache directory, and challenge type.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/tls.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntls_letsencrypt_hostname: \"\"\ntls_letsencrypt_listen: \":http\"\ntls_letsencrypt_cache_dir: \".cache\"\ntls_letsencrypt_challenge_type: HTTP-01\n```\n\n----------------------------------------\n\nTITLE: Starting headscale Using Docker Run Command in Shell\nDESCRIPTION: This command launches a headscale container using Docker, mounting configuration and database directories from the host, and exposing ports for web and metrics access. The Docker image, version, and other parameters should be substituted as needed. Required prerequisites include Docker installed and configured directories as performed in earlier steps. The command runs headscale in detached mode, meaning it executes in the background.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n  --name headscale \\\n  --detach \\\n  --volume $(pwd)/config:/etc/headscale \\\n  --volume $(pwd)/lib:/var/lib/headscale \\\n  --volume $(pwd)/run:/var/run/headscale \\\n  --publish 127.0.0.1:8080:8080 \\\n  --publish 127.0.0.1:9090:9090 \\\n  headscale/headscale:<VERSION> \\\n  serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Headscale CLI Connection via Environment Variables - Shell\nDESCRIPTION: This snippet shows how to configure the headscale CLI to connect to a remote Headscale server by setting environment variables. The 'HEADSCALE_CLI_ADDRESS' variable sets the server address and port, while 'HEADSCALE_CLI_API_KEY' provides the API key for authentication. Note that currently, an empty configuration file is also required for this method to work due to a known bug.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/remote-cli.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport HEADSCALE_CLI_ADDRESS=\"<HEADSCALE_ADDRESS>:<PORT>\"\nexport HEADSCALE_CLI_API_KEY=\"<API_KEY_FROM_PREVIOUS_STEP>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Headscale DEB Package (Shell)\nDESCRIPTION: Installs the downloaded Headscale DEB package using apt.  Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install ./headscale.deb\n```\n\n----------------------------------------\n\nTITLE: Downloading Headscale Binary (Shell)\nDESCRIPTION: Downloads the latest Headscale binary from GitHub's release page. The HEADSCALE VERSION and ARCH variables need to be replaced with the correct values.  Requires sudo privileges. The binary is saved to /usr/local/bin/headscale.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo wget --output-document=/usr/local/bin/headscale \\\nhttps://github.com/juanfont/headscale/releases/download/v<HEADSCALE VERSION>/headscale_<HEADSCALE VERSION>_linux_<ARCH>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Headscale Service (Shell)\nDESCRIPTION: Enables and starts the Headscale systemd service, ensuring it starts on boot and is running immediately. Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl enable --now headscale\n```\n\n----------------------------------------\n\nTITLE: Headscale Unix Socket Configuration (YAML)\nDESCRIPTION: Overrides the default Headscale unix socket path in the configuration file.  This ensures that the `headscale` user has write access to the socket.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nunix_socket: /var/run/headscale/headscale.sock\n```\n\n----------------------------------------\n\nTITLE: Registering a Tailscale Client with headscale (Shell)\nDESCRIPTION: Executed on a client device, this command registers the machine with a specified headscale login server using 'tailscale up'. It requires Tailscale installed on the client and the correct YOUR_HEADSCALE_URL provided as input. The expected output is a successful authentication and connection to headscale.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntailscale up --login-server YOUR_HEADSCALE_URL\n```\n\n----------------------------------------\n\nTITLE: Verifying DNS Records with dig Command in Shell\nDESCRIPTION: Example of using the dig command to verify that the DNS records are properly set in Headscale. The command queries for the A record of a specific domain and should return the configured IP address.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/dns.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndig +short grafana.myvpn.example.com\n100.64.0.3\n```\n\n----------------------------------------\n\nTITLE: Testing Remote Headscale CLI Connection by Listing Nodes - Shell\nDESCRIPTION: This shell command tests connectivity to a remote Headscale server by listing the registered nodes. Successful execution confirms that the CLI is properly configured and can communicate with the server using the provided API key and connection parameters.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/remote-cli.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nheadscale nodes list\n```\n\n----------------------------------------\n\nTITLE: Accessing Headscale CLI Help in Native and Container Environments\nDESCRIPTION: Commands for accessing the built-in help functionality of the headscale CLI tool in both native and containerized installations. This allows users to discover available commands and their options.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/usage/getting-started.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Show help\nheadscale help\n\n# Show help for a specific command\nheadscale <COMMAND> --help\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Show help\ndocker exec -it headscale \\\n  headscale help\n\n# Show help for a specific command\ndocker exec -it headscale \\\n  headscale <COMMAND> --help\n```\n\n----------------------------------------\n\nTITLE: Checking Headscale Service Status (Shell)\nDESCRIPTION: Checks the status of the Headscale systemd service to verify that it is running as intended. Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl status headscale\n```\n\n----------------------------------------\n\nTITLE: Listing Node Routes (Headscale CLI)\nDESCRIPTION: Shows the command to list network routes for registered nodes using the Headscale CLI after the route handling rewrite. This command provides information about approved, available, and serving routes for each node identifier.\nSOURCE: https://github.com/juanfont/headscale/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ headscale nodes list-routes\n```\n\n----------------------------------------\n\nTITLE: Logging into Headscale via Command Line\nDESCRIPTION: This command allows users to log in to a Headscale instance using the Tailscale command-line interface (CLI). It requires the user to specify the URL of their Headscale instance as a parameter. The output is a successful login to the instance with the Tailscale client. A dependency is having the Tailscale client installed and configured to run from the command line. The command also requires the user's Headscale instance URL.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/usage/connect/apple.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntailscale login --login-server <YOUR_HEADSCALE_URL>\n```\n\n----------------------------------------\n\nTITLE: Advertising Exit Node Capabilities for an Already Registered Node (console)\nDESCRIPTION: This Tailscale CLI command enables an already registered node to advertise exit node capabilities, allowing it to serve as an exit node. This requires 'tailscale' to be installed and the node to be registered with a control server. No input parameters are needed besides the command itself. After execution, the node will begin advertising itself as an exit node.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/exit-node.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsudo tailscale set --advertise-exit-node\n```\n\n----------------------------------------\n\nTITLE: Querying headscale Metrics Endpoint Using curl (Shell)\nDESCRIPTION: This curl command queries the /metrics endpoint served by headscale, verifying operational status and exposing service metrics. It assumes headscale is exposing port 9090 on localhost. No dependencies beyond curl and network connectivity to the appropriate port.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9090/metrics\n```\n\n----------------------------------------\n\nTITLE: Approving Node Routes (Headscale CLI)\nDESCRIPTION: Demonstrates how to approve specific network routes (e.g., 0.0.0.0/0 and ::/0 for exit routes) for a node using the Headscale CLI after the route handling rewrite. The --identifier flag specifies the target node ID.\nSOURCE: https://github.com/juanfont/headscale/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ headscale nodes approve-routes --identifier 1 --routes 0.0.0.0/0,::/0\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Provider Claims in YAML\nDESCRIPTION: This snippet configures Authelia's OIDC identity provider claims policy to restore default claims in the ID token and define client applications with PKCE requirements. It specifies claims like groups, email, and username to be included in tokens and uses standard OAuth parameters such as redirect URIs and supported scopes. The configuration targets Authelia version 4.39.0+, where claims are no longer provided by default in the ID token but are available via the UserInfo Endpoint.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/oidc.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    claims_policies:\n      default:\n        id_token: ['groups', 'email', 'email_verified', 'alt_emails', 'preferred_username', 'name']\n    clients:\n      - client_id: 'headscale'\n        client_name: 'headscale'\n        client_secret: ''\n        public: false\n        claims_policy: 'default'\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'https://headscale.example.com/oidc/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Verifying Exit Node Route Approval with Headscale (console)\nDESCRIPTION: This command re-lists the node routes after approval, letting administrators verify that the node is now approved for serving exit node routes. The same requirements and dependencies as the previous list command apply. The output now indicates approved routes next to the relevant node.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/exit-node.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nheadscale nodes list-routes\nID | Hostname           | Approved        | Available       | Serving\n1  | ts-head-ruqsg8     | 0.0.0.0/0, ::/0 | 0.0.0.0/0, ::/0 | 0.0.0.0/0, ::/0\n2  | ts-unstable-fq7ob4 |                 | 0.0.0.0/0, ::/0 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Headscale CLI Connection via Minimal YAML - YAML\nDESCRIPTION: This snippet demonstrates a minimal YAML configuration file for the headscale CLI to connect remotely to a Headscale server. The configuration requires specifying the server address and port under 'cli.address', and the API key under 'cli.api_key'. This file provides the necessary credentials and connection details for TLS-encrypted remote access using gRPC.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/remote-cli.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncli:\n    address: <HEADSCALE_ADDRESS>:<PORT>\n    api_key: <API_KEY_FROM_PREVIOUS_STEP>\n```\n\n----------------------------------------\n\nTITLE: Verifying Approved Node Routes (Headscale CLI)\nDESCRIPTION: Shows the command to re-list network routes for registered nodes after approving routes, confirming the update. This command is used to display the current state of approved, available, and serving routes via the Headscale CLI.\nSOURCE: https://github.com/juanfont/headscale/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ headscale nodes list-routes\n```\n\n----------------------------------------\n\nTITLE: Checking Headscale Service Status (Shell)\nDESCRIPTION: Checks the status of the Headscale systemd service to verify that it is running as intended. Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl status headscale\n```\n\n----------------------------------------\n\nTITLE: Following Docker Logs to Verify headscale is Running (Shell)\nDESCRIPTION: This command tails the logs of the running headscale container, allowing for real-time verification of its operation or error monitoring. It requires Docker to be installed and the container to have been started previously under the name 'headscale'. No inputs or outputs beyond log lines in the terminal.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker logs --follow headscale\n```\n\n----------------------------------------\n\nTITLE: Installing Headscale on OpenBSD with pkg_add\nDESCRIPTION: This command installs the headscale package on OpenBSD using the pkg_add package manager. It downloads and installs the latest version of headscale available in the OpenBSD repositories. The package installs headscale as a system service with `rc.d`. Requires pkg_add to be configured and the user to have root privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/community.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npkg_add headscale\n```\n\n----------------------------------------\n\nTITLE: Checking Certificate Expiry using OpenSSL - Bash\nDESCRIPTION: This snippet uses OpenSSL to connect to a server and retrieve the certificate expiry dates. The hostname and port 443 are used to establish the connection.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/tls.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl s_client -servername [hostname] -connect [hostname]:443 | openssl x509 -noout -dates\n```\n\n----------------------------------------\n\nTITLE: Making Headscale Executable (Shell)\nDESCRIPTION: Makes the downloaded Headscale binary executable. This is necessary for the system to run the binary. Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo chmod +x /usr/local/bin/headscale\n```\n\n----------------------------------------\n\nTITLE: Configure Metrics Listen Address (YAML)\nDESCRIPTION: This snippet shows how to set the address and port where the headscale metrics endpoint will listen. It is required to update the `config.yaml` file to enable or configure the metrics endpoint. The example sets the listener to the local loopback interface and port 9090.\nSOURCE: https://github.com/juanfont/headscale/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_listen_addr: 127.0.0.1:9090\n```\n\n----------------------------------------\n\nTITLE: Verifying DNS Records with drill Command in Shell\nDESCRIPTION: Example of using the drill command as an alternative way to verify DNS records. The command performs a DNS query for a specific domain and should return the configured IP address.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/dns.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndrill -Q grafana.myvpn.example.com\n100.64.0.3\n```\n\n----------------------------------------\n\nTITLE: Downloading Headscale DEB Package (Shell)\nDESCRIPTION: Downloads the latest Headscale DEB package for the specified platform. The HEADSCALE_VERSION and HEADSCALE_ARCH variables need to be set before running the command. It uses wget to download the package from the GitHub releases page.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nHEADSCALE_VERSION=\"\" # See above URL for latest version, e.g. \"X.Y.Z\" (NOTE: do not add the \"v\" prefix!)\nHEADSCALE_ARCH=\"\" # Your system architecture, e.g. \"amd64\"\nwget --output-document=headscale.deb \\\n \"https://github.com/juanfont/headscale/releases/download/v${HEADSCALE_VERSION}/headscale_${HEADSCALE_VERSION}_linux_${HEADSCALE_ARCH}.deb\"\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers to Verify headscale (Shell)\nDESCRIPTION: This shell command lists all currently running Docker containers, making it possible to visually confirm that the headscale container is active. Requires Docker installed and running.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Adding Headscale User (Shell)\nDESCRIPTION: Adds a dedicated system user to run Headscale. This user has a home directory, is part of a system group, and has no login shell. Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo useradd \\\n --create-home \\\n --home-dir /var/lib/headscale/ \\\n --system \\\n --user-group \\\n --shell /usr/sbin/nologin \\\n headscale\n```\n\n----------------------------------------\n\nTITLE: Configuring Headscale for Reverse Proxy\nDESCRIPTION: Basic Headscale configuration to disable TLS and let the reverse proxy handle it. Specifies the server URL, listening addresses, and empty paths for TLS certificates.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/integration/reverse-proxy.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver_url: https://<YOUR_SERVER_NAME> # This should be the FQDN at which headscale will be served\nlisten_addr: 0.0.0.0:8080\nmetrics_listen_addr: 0.0.0.0:9090\ntls_cert_path: \"\"\ntls_key_path: \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Headscale Configuration Directory (Shell)\nDESCRIPTION: Creates the /etc/headscale directory if it doesn't exist. Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo mkdir -p /etc/headscale\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Reverse Proxy for Headscale\nDESCRIPTION: Apache configuration for proxying requests to Headscale. Includes 'upgrade=any' parameter to properly handle WebSockets for Tailscale Control Protocol communication.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/integration/reverse-proxy.md#_snippet_4\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:443>\n\tServerName <YOUR_SERVER_NAME>\n\n\tProxyPreserveHost On\n\tProxyPass / http://<IP:PORT>/ upgrade=any\n\n\tSSLEngine On\n\tSSLCertificateFile <PATH_TO_CERT>\n\tSSLCertificateKeyFile <PATH_CERT_KEY>\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Building Headscale Directly on OpenBSD using Go Build\nDESCRIPTION: This snippet outlines the steps to build Headscale directly on an OpenBSD machine. It involves installing necessary prerequisites like Go using `pkg_add`, cloning the Headscale Git repository, checking out the latest release or tag, compiling the binary using `go build` while embedding version information via ldflags, making the resulting executable, and copying it to a standard system location.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/source.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Install prerequisites\npkg_add go\n\ngit clone https://github.com/juanfont/headscale.git\n\ncd headscale\n\n# optionally checkout a release\n# option a. you can find official release at https://github.com/juanfont/headscale/releases/latest\n# option b. get latest tag, this may be a beta release\nlatestTag=$(git describe --tags `git rev-list --tags --max-count=1`)\n\ngit checkout $latestTag\n\ngo build -ldflags=\"-s -w -X github.com/juanfont/headscale/hscontrol/types.Version=$latestTag\" -X github.com/juanfont/headscale/hscontrol/types.GitCommitHash=HASH\" github.com/juanfont/headscale\n\n# make it executable\nchmod a+x headscale\n\n# copy it to /usr/local/sbin\ncp headscale /usr/local/sbin\n```\n\n----------------------------------------\n\nTITLE: Reloading Systemd Configuration (Shell)\nDESCRIPTION: Reloads the systemd daemon to apply changes to service files. This is necessary after modifying the Headscale systemd service file. Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Building Headscale with Make\nDESCRIPTION: This snippet shows how to build the Headscale program using the `make build` command.  This relies on the Makefile configurations for compilation.\nSOURCE: https://github.com/juanfont/headscale/blob/main/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Installing Headscale on Arch Linux with Pacman\nDESCRIPTION: This command installs the headscale package on Arch Linux using the pacman package manager. It downloads and installs the latest version of headscale available in the Arch Linux repositories. Requires pacman to be configured and the user to have root privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/community.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npacman -S headscale\n```\n\n----------------------------------------\n\nTITLE: Listing Headscale Users in Native and Container Environments\nDESCRIPTION: Commands for displaying all existing headscale users in the system. This provides an overview of the namespaces available for node assignment.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/usage/getting-started.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nheadscale users list\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it headscale \\\n  headscale users list\n```\n\n----------------------------------------\n\nTITLE: Installing Headscale on Gentoo with emerge\nDESCRIPTION: This command installs the headscale package on Gentoo Linux using the emerge package manager. The `--ask` flag prompts the user for confirmation before proceeding with the installation. Requires emerge to be configured and the user to have root privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/community.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nemerge --ask net-vpn/headscale\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio EnvoyFilter for Headscale\nDESCRIPTION: Istio configuration that adds the 'tailscale-control-protocol' upgrade type to enable WebSocket communication between Tailscale clients and Headscale through Istio's ingress gateway.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/integration/reverse-proxy.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: EnvoyFilter\nmetadata:\n  name: headscale-behind-istio-ingress\n  namespace: istio-system\nspec:\n  configPatches:\n    - applyTo: NETWORK_FILTER\n      match:\n        listener:\n          filterChain:\n            filter:\n              name: envoy.filters.network.http_connection_manager\n      patch:\n        operation: MERGE\n        value:\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n            upgrade_configs:\n              - upgrade_type: tailscale-control-protocol\n```\n\n----------------------------------------\n\nTITLE: Making the Headscale CLI Executable - Shell\nDESCRIPTION: This shell command modifies the permissions for the headscale binary to make it executable. It is a required step after downloading the binary to ensure it can be run from the command line on Unix-like systems.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/remote-cli.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x /usr/local/bin/headscale\n```\n\n----------------------------------------\n\nTITLE: Generating Go code from Protobuf\nDESCRIPTION: This snippet demonstrates how to generate Go code from Protobuf definitions within the Headscale project. It is required after making changes to the `proto/` directory. Generated files should be committed separately for easier review.\nSOURCE: https://github.com/juanfont/headscale/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake generate\n```\n\n----------------------------------------\n\nTITLE: Running Arbitrary Commands in the headscale Debug Container (Shell)\nDESCRIPTION: This command example shows how to run arbitrary commands, such as listing files in /ko-app, inside the debug version of the headscale Docker container. Replace 'ls /ko-app' with other diagnostic commands as needed. Requires the debug variant of the headscale container image.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker run headscale/headscale:x.x.x-debug ls /ko-app\n```\n\n----------------------------------------\n\nTITLE: NGINX Reverse Proxy Configuration for Headscale DNS\nDESCRIPTION: Example NGINX configuration that sets up a reverse proxy for accessing internal services via custom DNS names. This allows accessing services without specifying ports in the URL, making them more user-friendly.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/dns.md#_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    listen [::]:80;\n\n    server_name grafana.myvpn.example.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Headscale Configuration (Shell)\nDESCRIPTION: Opens the Headscale configuration file in nano for editing.  Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo nano /etc/headscale/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Autocert Missing Server Name Log - Plaintext\nDESCRIPTION: This snippet shows a log message from the autocert library indicating a missing server name in an incoming connection, likely due to a direct IP request or an unexpected hostname.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/tls.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nacme/autocert: missing server name\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with act\nDESCRIPTION: This command uses `act` to run the integration tests defined in the specified GitHub Actions workflow file. `act` is a local GitHub Actions runner, allowing tests to be executed without pushing to a remote repository. The `-W` flag specifies the workflow file to use.\nSOURCE: https://github.com/juanfont/headscale/blob/main/integration/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nact pull_request -W .github/workflows/test-integration.yaml\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling Headscale for OpenBSD using Make\nDESCRIPTION: This snippet details how to cross-compile Headscale from a different operating system targeting OpenBSD. It requires Go version 1.20+ and GNU make (`gmake`). The process involves cloning the repository, checking out a specific release or tag, and then running the `make build` command with the `GOOS=openbsd` environment variable set to specify the target platform. The resulting binary must then be manually transferred to the OpenBSD machine.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/source.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Install prerequisites\n# 1. go v1.20+: headscale newer than 0.21 needs go 1.20+ to compile\n# 2. gmake: Makefile in the headscale repo is written in GNU make syntax\n\ngit clone https://github.com/juanfont/headscale.git\n\ncd headscale\n\n# optionally checkout a release\n# option a. you can find official release at https://github.com/juanfont/headscale/releases/latest\n# option b. get latest tag, this may be a beta release\nlatestTag=$(git describe --tags `git rev-list --tags --max-count=1`)\n\ngit checkout $latestTag\n\nmake build GOOS=openbsd\n\n# copy headscale to openbsd machine and put it in /usr/local/sbin\n```\n\n----------------------------------------\n\nTITLE: Autocert Host Not Configured Log - Plaintext\nDESCRIPTION: This snippet displays a log message from the autocert library indicating that the requested host is not configured in the HostWhitelist, likely caused by an invalid request for an incorrect hostname.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/ref/tls.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nacme/autocert: host \"[foo]\" not configured in HostWhitelist\n```\n\n----------------------------------------\n\nTITLE: Launching a Shell in the headscale Debug Docker Container (Shell)\nDESCRIPTION: This command runs the headscale debug Docker container and opens a Busybox shell session inside it for debugging purposes. Substitute the x.x.x with your desired headscale version. The debug image is required and provides additional troubleshooting tools compared to the standard image.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it headscale/headscale:x.x.x-debug sh\n```\n\n----------------------------------------\n\nTITLE: Editing Headscale Configuration File (Shell)\nDESCRIPTION: Opens the Headscale configuration file in nano for editing. Requires sudo privileges.\nSOURCE: https://github.com/juanfont/headscale/blob/main/docs/setup/install/official.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo nano /etc/headscale/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment with Nix\nDESCRIPTION: This snippet shows how to use Nix to create a consistent development environment for Headscale. Using `nix develop` will install all necessary tools and provide a shell with the correct environment variables, ensuring that developers have the same setup as the maintainers.\nSOURCE: https://github.com/juanfont/headscale/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnix develop\n```\n\n----------------------------------------\n\nTITLE: Building Headscale with Nix\nDESCRIPTION: This snippet demonstrates how to build the Headscale program using Nix. It leverages the Nix package manager to create a reproducible build environment and generate the executable.\nSOURCE: https://github.com/juanfont/headscale/blob/main/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnix build\n```\n\n----------------------------------------\n\nTITLE: Running tests\nDESCRIPTION: This snippet shows how to run the tests for the Headscale project using the `make test` command. This command executes the test suite to ensure the codebase functions as expected.\nSOURCE: https://github.com/juanfont/headscale/blob/main/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```"
  }
]