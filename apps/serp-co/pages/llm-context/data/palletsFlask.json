[
  {
    "owner": "pallets",
    "repo": "flask",
    "content": "TITLE: Preventing XSS with Proper HTML Attribute Quoting in Jinja Templates\nDESCRIPTION: Demonstrates the correct way to use Jinja2 expressions in HTML attributes to prevent XSS attacks through attribute injection.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input value=\"{{ value }}\">\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Decorator in Flask\nDESCRIPTION: Implements a login_required decorator to protect views that require authentication.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef login_required(view):\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for('auth.login'))\n\n        return view(**kwargs)\n\n    return wrapped_view\n```\n\n----------------------------------------\n\nTITLE: Handling Form Data in Flask\nDESCRIPTION: Example of handling form data in a login route that accepts both GET and POST methods. Shows how to access form data from request.form and handle different HTTP methods appropriately.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/login', methods=['POST', 'GET'])\ndef login():\n    error = None\n    if request.method == 'POST':\n        if valid_login(request.form['username'],\n                       request.form['password']):\n            return log_the_user_in(request.form['username'])\n        else:\n            error = 'Invalid username/password'\n    # the code below is executed if the request method\n    # was GET or the credentials were invalid\n    return render_template('login.html', error=error)\n```\n\n----------------------------------------\n\nTITLE: Minimal Flask Application\nDESCRIPTION: This snippet demonstrates a minimal Flask application. It imports the Flask class, creates an instance of the Flask class, defines a route using the route decorator, and defines a function that returns a string to be displayed in the user's browser. It shows the basic structure of a Flask web application.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello_world():\n    return \"<p>Hello, World!</p>\"\n```\n\n----------------------------------------\n\nTITLE: Returning JSON API Errors in Flask\nDESCRIPTION: This snippet shows how to customize HTTP 404 error responses as JSON for a Flask API. It makes use of Flask's jsonify function to return a descriptive message and status code when resources are not found.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import abort, jsonify\n\n@app.errorhandler(404)\ndef resource_not_found(e):\n    return jsonify(error=str(e)), 404\n\n@app.route(\"/cheese\")\ndef get_one_cheese():\n    resource = get_resource()\n\n    if resource is None:\n        abort(404, description=\"Resource not found\")\n\n    return jsonify(resource)\n```\n\n----------------------------------------\n\nTITLE: Defining a Registration Form with WTForms - Python\nDESCRIPTION: This snippet demonstrates how to define a registration form using WTForms in Python. It includes fields for username, email, password, and terms of service acceptance. Dependencies include the WTForms package.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wtforms import Form, BooleanField, StringField, PasswordField, validators\n\nclass RegistrationForm(Form):\n    username = StringField('Username', [validators.Length(min=4, max=25)])\n    email = StringField('Email Address', [validators.Length(min=6, max=35)])\n    password = PasswordField('New Password', [\n        validators.DataRequired(),\n        validators.EqualTo('confirm', message='Passwords must match')\n    ])\n    confirm = PasswordField('Repeat Password')\n    accept_tos = BooleanField('I accept the TOS', [validators.DataRequired()])\n```\n\n----------------------------------------\n\nTITLE: JSON API Endpoints in Flask\nDESCRIPTION: Demonstrates creating JSON API endpoints by returning dictionaries and lists that Flask automatically converts to JSON responses.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/me\")\ndef me_api():\n    user = get_current_user()\n    return {\n        \"username\": user.username,\n        \"theme\": user.theme,\n        \"image\": url_for(\"user_image\", filename=user.image),\n    }\n\n@app.route(\"/users\")\ndef users_api():\n    users = get_all_users()\n    return [user.to_json() for user in users]\n```\n\n----------------------------------------\n\nTITLE: Flask HTTP Methods Handling\nDESCRIPTION: This snippet demonstrates how to handle different HTTP methods in Flask routes using the `methods` argument of the `@app.route` decorator.  It shows how to define a route that handles both `GET` and `POST` requests, allowing for different logic based on the request method. The `request` object is used to determine the method.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        return do_the_login()\n    else:\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Flask\nDESCRIPTION: Defines a function to validate file extensions and a route to handle file uploads. The endpoint ensures that only files with allowed extensions are uploaded and stores them securely using `secure_filename`. Redirects users after successful upload. A HTML form is provided for users to select files for upload.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        # check if the post request has the file part\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        # If the user does not select a file, the browser submits an\n        # empty file without a filename.\n        if file.filename == '':\n            flash('No selected file')\n            return redirect(request.url)\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            return redirect(url_for('download_file', name=filename))\n    return '''\n    <!doctype html>\n    <title>Upload new File</title>\n    <h1>Upload new File</h1>\n    <form method=post enctype=multipart/form-data>\n      <input type=file name=file>\n      <input type=submit value=Upload>\n    </form>\n    '''\n```\n\n----------------------------------------\n\nTITLE: Running Flask Application\nDESCRIPTION: This snippet shows how to run a Flask application using the `flask` command.  It uses the `--app` option to specify the application file. The command starts a development server that listens for incoming requests. Use CTRL+C to stop the server.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app hello run\n * Serving Flask app 'hello'\n * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: XSS Attack Vector Example Through HTML Attribute Injection\nDESCRIPTION: Shows a potential XSS attack vector that could be injected if HTML attributes are not properly quoted.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nonmouseover=alert(document.cookie)\n```\n\n----------------------------------------\n\nTITLE: Flask URL Building with url_for\nDESCRIPTION: This snippet demonstrates how to use the `url_for` function in Flask to build URLs to specific functions. The `test_request_context` method is used to simulate a request context, enabling the use of `url_for` outside of a request. It also shows how variable parts of the URL and query parameters are handled.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import url_for\n\n@app.route('/')\ndef index():\n    return 'index'\n\n@app.route('/login')\ndef login():\n    return 'login'\n\n@app.route('/user/<username>')\ndef profile(username):\n    return f'{username}\\'s profile'\n\nwith app.test_request_context():\n    print(url_for('index'))\n    print(url_for('login'))\n    print(url_for('login', next='/'))\n    print(url_for('profile', username='John Doe'))\n```\n\n----------------------------------------\n\nTITLE: HTML Escaping in Flask\nDESCRIPTION: This snippet shows how to use `markupsafe.escape` to escape user-provided values when returning HTML in Flask. This prevents injection attacks by rendering potentially harmful HTML as text. It's essential for securing Flask applications against malicious input.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom markupsafe import escape\n\n@app.route(\"/<name>\")\ndef hello(name):\n    return f\"Hello, {escape(name)}!\"\n```\n\n----------------------------------------\n\nTITLE: Secure File Upload with Filename Sanitization\nDESCRIPTION: Shows how to securely handle file uploads by sanitizing filenames using Werkzeug's secure_filename utility.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.utils import secure_filename\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        file = request.files['the_file']\n        file.save(f\"/var/www/uploads/{secure_filename(file.filename)}\")\n    ...\n```\n\n----------------------------------------\n\nTITLE: Returning JSON from Flask View (jsonify)\nDESCRIPTION: This Python snippet shows how to return a JSON response from a Flask view using the `jsonify` function. This is useful when you need more control over the response object, such as setting headers or status codes.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import jsonify\n\n@app.route(\"/users\")\ndef user_list():\n    users = User.query.order_by(User.name).all()\n    return jsonify([u.to_json() for u in users])\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates in Flask\nDESCRIPTION: Example of using Flask's render_template function to render HTML templates with dynamic data. This example demonstrates how to pass variables to templates and handle optional parameters in route definitions.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/<name>')\ndef hello(name=None):\n    return render_template('hello.html', person=name)\n```\n\n----------------------------------------\n\nTITLE: Session Management in Flask\nDESCRIPTION: Comprehensive example of session handling in Flask including login, logout, and session access.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import session\n\n# Set the secret key to some random bytes. Keep this really secret!\napp.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/'\n\n@app.route('/')\ndef index():\n    if 'username' in session:\n        return f'Logged in as {session[\"username\"]}'\n    return 'You are not logged in'\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        session['username'] = request.form['username']\n        return redirect(url_for('index'))\n    return '''\n        <form method=\"post\">\n            <p><input type=text name=username>\n            <p><input type=submit value=Login>\n        </form>\n    '''\n\n@app.route('/logout')\ndef logout():\n    # remove the username from the session if it's there\n    session.pop('username', None)\n    return redirect(url_for('index'))\n```\n\n----------------------------------------\n\nTITLE: Running a Flask Application from Command Line\nDESCRIPTION: This command-line snippet shows how to run a Flask application using the 'flask run' command. It starts a development server that listens on http://127.0.0.1:5000/.\nSOURCE: https://github.com/pallets/flask/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ flask run\n  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Database in Flask Application\nDESCRIPTION: This Python code defines functions to initialize the database using the SQL schema, register a CLI command for database initialization, and register a converter for timestamp values. It uses Flask's current_app and click for CLI integration.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef init_db():\n    db = get_db()\n\n    with current_app.open_resource('schema.sql') as f:\n        db.executescript(f.read().decode('utf8'))\n\n\n@click.command('init-db')\ndef init_db_command():\n    \"\"\"Clear the existing data and create new tables.\"\"\"\n    init_db()\n    click.echo('Initialized the database.')\n\n\nsqlite3.register_converter(\n    \"timestamp\", lambda v: datetime.fromisoformat(v.decode())\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Database Schema for Flask Application\nDESCRIPTION: This SQL script defines the schema for the application's database. It creates two tables: 'user' for storing user information and 'post' for storing blog posts. The script includes DROP TABLE statements to ensure clean table creation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS user;\nDROP TABLE IF EXISTS post;\n\nCREATE TABLE user (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  username TEXT UNIQUE NOT NULL,\n  password TEXT NOT NULL\n);\n\nCREATE TABLE post (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  author_id INTEGER NOT NULL,\n  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  title TEXT NOT NULL,\n  body TEXT NOT NULL,\n  FOREIGN KEY (author_id) REFERENCES user (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Flask Application in Python\nDESCRIPTION: This snippet demonstrates how to create a basic Flask application that responds with 'Hello, World!' when accessed at the root URL. It showcases the minimal setup required to get a Flask app running.\nSOURCE: https://github.com/pallets/flask/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# save this as app.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Dispatching for APIs using MethodView in Flask\nDESCRIPTION: This comprehensive example demonstrates how to use MethodView to create a RESTful API with separate methods for different HTTP verbs, including get, patch, delete, and post operations.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask.views import MethodView\n\nclass ItemAPI(MethodView):\n    init_every_request = False\n\n    def __init__(self, model):\n        self.model = model\n        self.validator = generate_validator(model)\n\n    def _get_item(self, id):\n        return self.model.query.get_or_404(id)\n\n    def get(self, id):\n        item = self._get_item(id)\n        return jsonify(item.to_json())\n\n    def patch(self, id):\n        item = self._get_item(id)\n        errors = self.validator.validate(item, request.json)\n\n        if errors:\n            return jsonify(errors), 400\n\n        item.update_from_json(request.json)\n        db.session.commit()\n        return jsonify(item.to_json())\n\n    def delete(self, id):\n        item = self._get_item(id)\n        db.session.delete(item)\n        db.session.commit()\n        return \"\", 204\n\nclass GroupAPI(MethodView):\n    init_every_request = False\n\n    def __init__(self, model):\n        self.model = model\n        self.validator = generate_validator(model, create=True)\n\n    def get(self):\n        items = self.model.query.all()\n        return jsonify([item.to_json() for item in items])\n\n    def post(self):\n        errors = self.validator.validate(request.json)\n\n        if errors:\n            return jsonify(errors), 400\n\n        db.session.add(self.model.from_json(request.json))\n        db.session.commit()\n        return jsonify(item.to_json())\n\ndef register_api(app, model, name):\n    item = ItemAPI.as_view(f\"{name}-item\", model)\n    group = GroupAPI.as_view(f\"{name}-group\", model)\n    app.add_url_rule(f\"/{name}/<int:id>\", view_func=item)\n    app.add_url_rule(f\"/{name}/\", view_func=group)\n\nregister_api(app, User, \"users\")\nregister_api(app, Story, \"stories\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Flask Application Factory\nDESCRIPTION: A function that creates and configures a Flask application instance. It initializes the app with a configuration file, sets up the database, and registers blueprints before returning the application object.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    from yourapplication.model import db\n    db.init_app(app)\n\n    from yourapplication.views.admin import admin\n    from yourapplication.views.frontend import frontend\n    app.register_blueprint(admin)\n    app.register_blueprint(frontend)\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Secure Filename Handling in Flask\nDESCRIPTION: Demonstrates the importance of using `secure_filename` to sanitize uploaded filenames and prevent directory traversal attacks. Shows how a potentially dangerous filename is transformed into a safe format for storage on the server.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> secure_filename('../../../../home/username/.bashrc')\n'home_username_.bashrc'\n```\n\n----------------------------------------\n\nTITLE: Flask Variable Rules\nDESCRIPTION: This snippet demonstrates how to use variable rules in Flask routes, using `<variable_name>` to capture parts of the URL and pass them as keyword arguments to the view function. It also shows how to use converters like `<int:post_id>` to specify the type of the argument.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom markupsafe import escape\n\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return f'User {escape(username)}'\n\n@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return f'Post {post_id}'\n\n@app.route('/path/<path:subpath>')\ndef show_subpath(subpath):\n    # show the subpath after /path/\n    return f'Subpath {escape(subpath)}'\n```\n\n----------------------------------------\n\nTITLE: Helper function for database queries\nDESCRIPTION: Creates a utility function that simplifies database queries by handling cursor creation, query execution, and result fetching in one call. Supports both single-result and multiple-result queries.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef query_db(query, args=(), one=False):\n    cur = get_db().execute(query, args)\n    rv = cur.fetchall()\n    cur.close()\n    return (rv[0] if rv else None) if one else rv\n```\n\n----------------------------------------\n\nTITLE: Mapping Tables to Classes in Manual ORM\nDESCRIPTION: Defines a User class and maps it to a SQLAlchemy Table, demonstrating how to manually bridge tables and classes in SQLAlchemy. It includes the model's constructor and a query property for facilitating database operations.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import Table, Column, Integer, String\nfrom sqlalchemy.orm import mapper\nfrom yourapplication.database import metadata, db_session\n\nclass User(object):\n    query = db_session.query_property()\n\n    def __init__(self, name=None, email=None):\n        self.name = name\n        self.email = email\n\n    def __repr__(self):\n        return f'<User {self.name!r}>'\n\nusers = Table('users', metadata,\n    Column('id', Integer, primary_key=True),\n    Column('name', String(50), unique=True),\n    Column('email', String(120), unique=True)\n)\nmapper(User, users)\n```\n\n----------------------------------------\n\nTITLE: File Upload Handler in Flask\nDESCRIPTION: Demonstrates basic file upload handling using Flask's request.files object to save uploaded files to the server filesystem.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        f = request.files['the_file']\n        f.save('/var/www/uploads/uploaded_file.txt')\n    ...\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Flask Application for File Uploads\nDESCRIPTION: Initializes a basic Flask application with necessary configurations for handling file uploads. The snippet shows how to import required modules, configure upload directories, and define allowed file extensions. Ensures that the server only accepts files with specified extensions to prevent security issues related to execution of malicious files.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nfrom flask import Flask, flash, request, redirect, url_for\nfrom werkzeug.utils import secure_filename\n\nUPLOAD_FOLDER = '/path/to/the/uploads'\nALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n```\n\n----------------------------------------\n\nTITLE: Minimal Flask Application\nDESCRIPTION: This code defines a basic Flask application within a single Python file. It imports the Flask class, creates an instance of the application, defines a route for the root URL ('/'), and returns a \"Hello, World!\" message.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    from flask import Flask\n\n    app = Flask(__name__)\n\n\n    @app.route('/')\n    def hello():\n        return 'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Generating a Secure Secret Key for Flask\nDESCRIPTION: Demonstrates how to generate a secure random secret key for use in Flask configuration using Python's secrets module.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ python -c 'import secrets; print(secrets.token_hex())'\n'192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Login Required Decorator in Flask\nDESCRIPTION: A decorator that checks if a user is logged in before allowing access to a view function. If the user is not logged in, they are redirected to the login page. This implementation uses functools.wraps to preserve the original function's information.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom flask import g, request, redirect, url_for\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if g.user is None:\n            return redirect(url_for('login', next=request.url))\n        return f(*args, **kwargs)\n    return decorated_function\n```\n\n----------------------------------------\n\nTITLE: Custom 404 Error Handler in Flask\nDESCRIPTION: Provides a custom 404 Error handler for a Flask application, rendering a custom '404.html' page. This handler can be registered to any Flask app, either directly or via an app factory pattern.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import render_template\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    # note that we set the 404 status explicitly\n    return render_template('404.html'), 404\n```\n\n----------------------------------------\n\nTITLE: Receiving JSON in Flask View\nDESCRIPTION: This Python snippet demonstrates how to receive JSON data in a Flask view using the `request.json` property. It assumes the request has a `Content-Type` header of `application/json` and a valid JSON body.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request\n\n@app.post(\"/user/<int:id>\")\ndef user_update(id):\n    user = User.query.get_or_404(id)\n    user.update_from_json(request.json)\n    db.session.commit()\n    return user.to_json()\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask Application in Python\nDESCRIPTION: The code initializes a Flask application using the application factory pattern. It sets up default configurations, handles instance configuration, ensures the instance folder exists, and defines a basic route that returns a static response.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/factory.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom flask import Flask\n\ndef create_app(test_config=None):\n    # create and configure the app\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY='dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        # load the test config if passed in\n        app.config.from_mapping(test_config)\n\n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError:\n        pass\n\n    # a simple page that says hello\n    @app.route('/hello')\n    def hello():\n        return 'Hello, World!'\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Handling Internal Server Errors in Flask\nDESCRIPTION: Implements a handler for 500 Internal Server Errors, rendering a custom error page using Flask's errorhandler decorator. It can be used in both regular apps and those following the app factory pattern.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import render_template\n\n@app.errorhandler(500)\ndef internal_server_error(e):\n    # note that we set the 500 status explicitly\n    return render_template('500.html'), 500\n```\n\n----------------------------------------\n\nTITLE: Limiting Upload File Size in Flask\nDESCRIPTION: Configures a Flask application to enforce a maximum upload size limit. The example shows setting `MAX_CONTENT_LENGTH` to restrict uploads to a specified size, preventing the server from accepting overly large files that could exhaust memory.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1000 * 1000\n```\n\n----------------------------------------\n\nTITLE: Base Layout Template\nDESCRIPTION: This code defines the base HTML layout for a Flask application using Jinja templating. It includes common elements like the page title, navigation, and a section for displaying flashed messages. The template utilizes blocks for customization in child templates and uses `url_for` to generate URLs.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/templates.rst#2025-04-20_snippet_0\n\nLANGUAGE: html+jinja\nCODE:\n```\n\"<!doctype html>\\n<title>{% block title %}{% endblock %} - Flaskr</title>\\n<link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n<nav>\\n  <h1>Flaskr</h1>\\n  <ul>\\n    {% if g.user %}\\n      <li><span>{{ g.user['username'] }}</span>\\n      <li><a href=\\\"{{ url_for('auth.logout') }}\\\">Log Out</a>\\n    {% else %}\\n      <li><a href=\\\"{{ url_for('auth.register') }}\\\">Register</a>\\n      <li><a href=\\\"{{ url_for('auth.login') }}\\\">Log In</a>\\n    {% endif %}\\n  </ul>\\n</nav>\\n<section class=\\\"content\\\">\\n  <header>\\n    {% block header %}{% endblock %}\\n  </header>\\n  {% for message in get_flashed_messages() %}\\n    <div class=\\\"flash\\\">{{ message }}</div>\\n  {% endfor %}\\n  {% block content %}{% endblock %}\\n</section>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Uploaded Files in Flask\nDESCRIPTION: Shows a Flask view function to serve uploaded files for download using a specific route template. The function uses `send_from_directory` to retrieve files from the upload folder, allowing users to download files securely.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import send_from_directory\n\n@app.route('/uploads/<name>')\ndef download_file(name):\n    return send_from_directory(app.config[\"UPLOAD_FOLDER\"], name)\n```\n\n----------------------------------------\n\nTITLE: Setting up SQLite connection with Flask app context\nDESCRIPTION: Demonstrates how to establish a SQLite connection within Flask and properly close it when the context ends. This pattern creates database connections on demand and ensures they are properly closed when the application context terminates.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\nfrom flask import g\n\nDATABASE = '/path/to/database.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.teardown_appcontext\ndef close_connection(exception):\n    db = getattr(g, '_database', None)\n    if db is not None:\n        db.close()\n```\n\n----------------------------------------\n\nTITLE: Flask Routing Examples\nDESCRIPTION: This snippet provides examples of basic Flask routing using the `@app.route` decorator to bind functions to different URLs.  It illustrates how to define routes for the index page, a hello page, and how to handle static routes. These routes return simple string responses.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/')\ndef index():\n    return 'Index Page'\n\n@app.route('/hello')\ndef hello():\n    return 'Hello, World'\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with url_for in Flask\nDESCRIPTION: Demonstrates how to use the url_for function to generate URLs for views in Flask. It shows examples of generating URLs for simple views and views with arguments.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nurl_for('hello')\n```\n\nLANGUAGE: python\nCODE:\n```\nurl_for('hello', who='World')\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Route in Flask\nDESCRIPTION: This code snippet demonstrates how to define an asynchronous route in Flask using the `async` and `await` keywords. It shows a route decorator defining the `/get-data` endpoint, querying data asynchronously from a database using `async_db_query`, and returning the result as a JSON response. To use this feature, Flask must be installed with the `async` extra (`pip install flask[async]`).\nSOURCE: https://github.com/pallets/flask/blob/main/docs/async-await.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    @app.route(\"/get-data\")\n    async def get_data():\n        data = await async_db_query(...)\n        return jsonify(data)\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Query Parameters in Flask\nDESCRIPTION: Example of safely accessing URL query parameters using request.args.get() method. This approach is recommended as it handles missing parameters gracefully without raising exceptions.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsearchword = request.args.get('key', '')\n```\n\n----------------------------------------\n\nTITLE: Testing JSON API Requests\nDESCRIPTION: Demonstrates sending and receiving JSON data in a test request, including GraphQL-style query with variables. Verifies response JSON content and structure.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_json_data(client):\n    response = client.post(\"/graphql\", json={\n        \"query\": \"\"\"\n            query User($id: String!) {\n                user(id: $id) {\n                    name\n                    theme\n                    picture_url\n                }\n            }\n        \"\"\",\n        variables={\"id\": 2},\n    })\n    assert response.json[\"data\"][\"user\"][\"name\"] == \"Flask\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Template with Data in Python\nDESCRIPTION: This Python code snippet demonstrates how to pass data to a Jinja template from a Flask view function. The `generate_report()` function presumably returns data that is then passed as the `chart_data` variable to the `report.html` template.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndata = generate_report()\nreturn render_template(\"report.html\", chart_data=data)\n```\n\n----------------------------------------\n\nTITLE: Implementing User Login View in Flask\nDESCRIPTION: Handles user authentication with password verification and session management. Validates credentials and establishes user sessions.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@bp.route('/login', methods=('GET', 'POST'))\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n        user = db.execute(\n            'SELECT * FROM user WHERE username = ?', (username,)\n        ).fetchone()\n\n        if user is None:\n            error = 'Incorrect username.'\n        elif not check_password_hash(user['password'], password):\n            error = 'Incorrect password.'\n\n        if error is None:\n            session.clear()\n            session['user_id'] = user['id']\n            return redirect(url_for('index'))\n\n        flash(error)\n\n    return render_template('auth/login.html')\n```\n\n----------------------------------------\n\nTITLE: Custom API Exception Class in Flask\nDESCRIPTION: Defines a custom exception class 'InvalidAPIUsage' in Flask, designed to handle API errors with customizable error messages, status codes, and additional contextual payload. The class includes a method for converting the exception to a dictionary format.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import jsonify, request\n\nclass InvalidAPIUsage(Exception):\n    status_code = 400\n\n    def __init__(self, message, status_code=None, payload=None):\n        super().__init__()\n        self.message = message\n        if status_code is not None:\n            self.status_code = status_code\n        self.payload = payload\n\n    def to_dict(self):\n        rv = dict(self.payload or ())\n        rv['message'] = self.message\n        return rv\n\n@app.errorhandler(InvalidAPIUsage)\ndef invalid_api_usage(e):\n    return jsonify(e.to_dict()), e.status_code\n\n# an API app route for getting user information\n# a correct request might be /api/user?user_id=420\n@app.route(\"/api/user\")\ndef user_api(user_id):\n    user_id = request.arg.get(\"user_id\")\n    if not user_id:\n        raise InvalidAPIUsage(\"No user id provided!\")\n\n    user = get_user(user_id=user_id)\n    if not user:\n        raise InvalidAPIUsage(\"No such user!\", status_code=404)\n\n    return jsonify(user.to_dict())\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQLAlchemy Declarative with Flask\nDESCRIPTION: This snippet demonstrates how to set up SQLAlchemy using the declarative extension with Flask. It involves creating an engine and session, and defines an `init_db` function to initialize the database with models. Dependencies include SQLAlchemy and Flask. This setup removes the need for manual thread handling as SQLAlchemy abstracts this.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import scoped_session, sessionmaker, declarative_base\n\nengine = create_engine('sqlite:////tmp/test.db')\ndb_session = scoped_session(sessionmaker(autocommit=False,\n                                         autoflush=False,\n                                         bind=engine))\nBase = declarative_base()\nBase.query = db_session.query_property()\n\ndef init_db():\n    import yourapplication.models\n    Base.metadata.create_all(bind=engine)\n```\n\n----------------------------------------\n\nTITLE: Implementing User Session Loader in Flask\nDESCRIPTION: Creates a before_app_request handler to load the logged-in user's data from the session for each request.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@bp.before_app_request\ndef load_logged_in_user():\n    user_id = session.get('user_id')\n\n    if user_id is None:\n        g.user = None\n    else:\n        g.user = get_db().execute(\n            'SELECT * FROM user WHERE id = ?', (user_id,)\n        ).fetchone()\n```\n\n----------------------------------------\n\nTITLE: Rendering Create Post Template with Jinja\nDESCRIPTION: This snippet renders a form for creating a new post. It uses Jinja2 to embed dynamic content such as form fields for the post's title and body, which display previous form input if validation fails.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_4\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}New Post{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"title\">Title</label>\n    <input name=\"title\" id=\"title\" value=\"{{ request.form['title'] }}\" required>\n    <label for=\"body\">Body</label>\n    <textarea name=\"body\" id=\"body\">{{ request.form['body'] }}</textarea>\n    <input type=\"submit\" value=\"Save\">\n  </form>\n{% endblock %}\n\n```\n\n----------------------------------------\n\nTITLE: Using Flask's Request Context in Tests\nDESCRIPTION: Example of using Flask's test_request_context for testing code that depends on the request object. This allows simulating request contexts in test environments outside of an actual HTTP request.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request\n\nwith app.test_request_context('/hello', method='POST'):\n    # now you can do something with the request until the\n    # end of the with block, such as basic assertions:\n    assert request.path == '/hello'\n    assert request.method == 'POST'\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Extension in Python\nDESCRIPTION: Demonstrates how to configure and initialize a Flask extension using Python. It requires the extension to be installed and imported, along with an existing Flask application instance. The example updates the app configuration and initializes the extension with this instance.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/extensions.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask_foo import Foo\n\nfoo = Foo()\n\napp = Flask(__name__)\napp.config.update(\n    FOO_BAR='baz',\n    FOO_SPAM='eggs',\n)\n\nfoo.init_app(app)\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication Login and Session Handling in Flask with pytest\nDESCRIPTION: Tests the login functionality of a Flask auth system, verifying successful login redirects to root, session contains the correct user ID, and validating incorrect login credentials generate appropriate error messages.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef test_login(client, auth):\n    assert client.get('/auth/login').status_code == 200\n    response = auth.login()\n    assert response.headers[\"Location\"] == \"/\"\n\n    with client:\n        client.get('/')\n        assert session['user_id'] == 1\n        assert g.user['username'] == 'test'\n\n\n@pytest.mark.parametrize(('username', 'password', 'message'), (\n    ('a', 'test', b'Incorrect username.'),\n    ('test', 'a', b'Incorrect password.'),\n))\ndef test_login_validate_input(auth, username, password, message):\n    response = auth.login(username, password)\n    assert message in response.data\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication Requirements for Blog Actions in Flask\nDESCRIPTION: Tests that login is required for create, update, and delete actions, and that only the post author can update or delete their posts. Also verifies 404 handling for non-existent posts.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.parametrize('path', (\n    '/create',\n    '/1/update',\n    '/1/delete',\n))\ndef test_login_required(client, path):\n    response = client.post(path)\n    assert response.headers[\"Location\"] == \"/auth/login\"\n\n\ndef test_author_required(app, client, auth):\n    # change the post author to another user\n    with app.app_context():\n        db = get_db()\n        db.execute('UPDATE post SET author_id = 2 WHERE id = 1')\n        db.commit()\n\n    auth.login()\n    # current user can't modify other user's post\n    assert client.post('/1/update').status_code == 403\n    assert client.post('/1/delete').status_code == 403\n    # current user doesn't see edit link\n    assert b'href=\"/1/update\"' not in client.get('/').data\n\n\n@pytest.mark.parametrize('path', (\n    '/2/update',\n    '/2/delete',\n))\ndef test_exists_required(client, auth, path):\n    auth.login()\n    assert client.post(path).status_code == 404\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite Database in Flask\nDESCRIPTION: This snippet defines functions to connect to a SQLite database, create a connection, and close it. It uses Flask's g object for request-scoped storage and current_app for accessing the application context.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\nfrom datetime import datetime\n\nimport click\nfrom flask import current_app, g\n\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db\n\n\ndef close_db(e=None):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n```\n\n----------------------------------------\n\nTITLE: Using Jinja to pass data to JavaScript\nDESCRIPTION: This Jinja template snippet demonstrates how to use the `tojson` filter to safely pass data from the server-side template to JavaScript running in the browser. The `chart_data` variable is converted to a valid JavaScript object, preventing syntax errors and ensuring HTML characters are properly escaped.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_1\n\nLANGUAGE: jinja\nCODE:\n```\n<script>\n    const chart_data = {{ chart_data|tojson }}\n    chartLib.makeChart(chart_data)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Flask Application Config in Blueprints\nDESCRIPTION: Blueprint implementation showing how to access the application configuration using Flask's current_app proxy when the application object isn't available at import time.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import current_app, Blueprint, render_template\nadmin = Blueprint('admin', __name__, url_prefix='/admin')\n\n@admin.route('/')\ndef index():\n    return render_template(current_app.config['INDEX_TEMPLATE'])\n```\n\n----------------------------------------\n\nTITLE: Running Flask Development Server with Python\nDESCRIPTION: Demonstrates how to start the Flask development server using the 'flask run' command. The server will run on http://127.0.0.1:5000/ by default.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flask --app hello run\n * Serving Flask app \"hello\"\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Responses for HTTP Exceptions in Flask\nDESCRIPTION: Error handler for HTTPException that converts the default HTML error pages into JSON responses, preserving the HTTP status code, name, and description.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import json\nfrom werkzeug.exceptions import HTTPException\n\n@app.errorhandler(HTTPException)\ndef handle_exception(e):\n    \"\"\"Return JSON instead of HTML for HTTP errors.\"\"\"\n    # start with the correct headers and status code from the error\n    response = e.get_response()\n    # replace the body with JSON\n    response.data = json.dumps({\n        \"code\": e.code,\n        \"name\": e.name,\n        \"description\": e.description,\n    })\n    response.content_type = \"application/json\"\n    return response\n```\n\n----------------------------------------\n\nTITLE: Defining a Model using SQLAlchemy Declarative\nDESCRIPTION: Defines a User model using SQLAlchemy's declarative system. The model includes fields for the user ID, name, and email, and provides a constructor and a string representation method. This class needs SQLAlchemy's Base to be subclassed.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import Column, Integer, String\nfrom yourapplication.database import Base\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), unique=True)\n    email = Column(String(120), unique=True)\n\n    def __init__(self, name=None, email=None):\n        self.name = name\n        self.email = email\n\n    def __repr__(self):\n        return f'<User {self.name!r}>'\n```\n\n----------------------------------------\n\nTITLE: Implementing User Language Detection with Deferred Callbacks in Flask\nDESCRIPTION: This example demonstrates how to use Flask's after_this_request decorator to remember a user's language preference. The code detects the user's language in a before_request handler and sets a cookie in a deferred callback that will run after the request is processed but before the response is sent to the client.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/deferredcallbacks.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request, after_this_request\n\n@app.before_request\ndef detect_user_language():\n    language = request.cookies.get('user_lang')\n\n    if language is None:\n        language = guess_language_from_request()\n\n        # when the response exists, set a cookie with the language\n        @after_this_request\n        def remember_language(response):\n            response.set_cookie('user_lang', language)\n            return response\n\n    g.language = language\n```\n\n----------------------------------------\n\nTITLE: Redirect and Error Handling in Flask\nDESCRIPTION: Shows how to implement redirects and handle errors using Flask's redirect and abort functions.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import abort, redirect, url_for\n\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n\n@app.route('/login')\ndef login():\n    abort(401)\n    this_is_never_executed()\n```\n\n----------------------------------------\n\nTITLE: Creating a Caching Decorator for Flask Views\nDESCRIPTION: A decorator that caches the results of a view function for a specified amount of time. It generates a unique cache key based on the request path and uses an external cache object to store and retrieve cached values.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom flask import request\n\ndef cached(timeout=5 * 60, key='view/{}'): \n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            cache_key = key.format(request.path)\n            rv = cache.get(cache_key)\n            if rv is not None:\n                return rv\n            rv = f(*args, **kwargs)\n            cache.set(cache_key, rv, timeout=timeout)\n            return rv\n        return decorated_function\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Route for Blog Posts in Flask\nDESCRIPTION: This code defines a Flask route for deleting blog posts. It requires user login, retrieves the post first to verify it exists, executes a DELETE SQL query, and redirects back to the index page after successful deletion.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@bp.route('/<int:id>/delete', methods=('POST',))\n@login_required\ndef delete(id):\n    get_post(id)\n    db = get_db()\n    db.execute('DELETE FROM post WHERE id = ?', (id,))\n    db.commit()\n    return redirect(url_for('blog.index'))\n```\n\n----------------------------------------\n\nTITLE: Using the PathDispatcher with a Flask Application Factory in Python\nDESCRIPTION: Example showing how to use the PathDispatcher to create applications based on URL path prefixes. This implementation falls back to a default application when no specific application is found for a path prefix.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom myapplication import create_app, default_app, get_user_for_prefix\n\ndef make_app(prefix):\n    user = get_user_for_prefix(prefix)\n    if user is not None:\n        return create_app(user)\n\napplication = PathDispatcher(default_app, make_app)\n```\n\n----------------------------------------\n\nTITLE: Example Flask Configuration File\nDESCRIPTION: Shows an example of a Flask configuration file with a secret key. Only uppercase values are stored in the config object.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example configuration\nSECRET_KEY = '192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP GET Request with Test Client\nDESCRIPTION: Demonstrates how to use Flask's test client to make a GET request and assert response content. Verifies route behavior by checking the response data.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_request_example(client):\n    response = client.get(\"/posts\")\n    assert b\"<h2>Hello, World!</h2>\" in response.data\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Flask Application in Python\nDESCRIPTION: A simple Flask application example that serves as the starting point for the dispatching techniques. It defines a basic route that returns 'Hello World!' when the root URL is accessed.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Initializing Celery with Flask\nDESCRIPTION: This Python code snippet demonstrates how to integrate a Celery application with a Flask application by creating a Celery app object and configuring it with Flask's settings. It sets the Celery app as the default to be used with each request, allowing task functions to run with an active Flask app context.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom celery import Celery, Task\n\ndef celery_init_app(app: Flask) -> Celery:\n    class FlaskTask(Task):\n        def __call__(self, *args: object, **kwargs: object) -> object:\n            with app.app_context():\n                return self.run(*args, **kwargs)\n\n    celery_app = Celery(app.name, task_cls=FlaskTask)\n    celery_app.config_from_object(app.config[\"CELERY\"])\n    celery_app.set_default()\n    app.extensions[\"celery\"] = celery_app\n    return celery_app\n```\n\n----------------------------------------\n\nTITLE: Defining Method-Specific Route Handlers in Flask\nDESCRIPTION: Example of using Flask's HTTP method decorators (@app.get and @app.post) to define separate handlers for different HTTP methods on the same route. This approach allows for cleaner separation of concerns compared to handling all methods in a single function.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@app.get('/login')\ndef login_get():\n    return show_the_login_form()\n\n@app.post('/login')\ndef login_post():\n    return do_the_login()\n```\n\n----------------------------------------\n\nTITLE: Logging Security Exception Signal in Flask\nDESCRIPTION: Example of handling and logging a specific type of security exception using the got_request_exception signal\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import got_request_exception\n\ndef log_security_exception(sender, exception, **extra):\n    if not isinstance(exception, SecurityException):\n        return\n\n    security_logger.exception(\n        f\"SecurityException at {request.url!r}\",\n        exc_info=exception,\n    )\n\ngot_request_exception.connect(log_security_exception, app)\n```\n\n----------------------------------------\n\nTITLE: Handling Session Modifications with Mutable Objects in Flask\nDESCRIPTION: Example demonstrating how to properly handle modifications to mutable objects in a Flask session. Since Flask doesn't automatically detect changes to mutable structures like lists, you need to explicitly set session.modified to True after modifying such objects.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout View in Flask\nDESCRIPTION: Handles user logout by clearing the session and redirecting to the index page.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@bp.route('/logout')\ndef logout():\n    session.clear()\n    return redirect(url_for('index'))\n```\n\n----------------------------------------\n\nTITLE: Setting Flask Configuration Values in Python\nDESCRIPTION: Demonstrates how to set and update configuration values in a Flask application using the config dictionary and update method.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Flask(__name__)\napp.config['TESTING'] = True\n\napp.testing = True\n\napp.config.update(\n    TESTING=True,\n    SECRET_KEY='192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Database Resources with Flask's g Object\nDESCRIPTION: Implements a pattern for managing database connections using Flask's g object for storage during a request. Includes a get_db() function to retrieve or create connections and a teardown handler to close them when the context ends.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = connect_to_database()\n\n    return g.db\n\n@app.teardown_appcontext\ndef teardown_db(exception):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n```\n\n----------------------------------------\n\nTITLE: Generating Large CSV Data Stream in Flask\nDESCRIPTION: A basic Flask view function that generates a large CSV file on the fly using a generator function. Each yield statement sends data directly to the browser without storing the entire file in memory.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/large.csv')\ndef generate_large_csv():\n    def generate():\n        for row in iter_all_rows():\n            yield f\"{','.join(row)}\\n\"\n    return generate(), {\"Content-Type\": \"text/csv\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Blog Post Creation and Update Functionality in Flask\nDESCRIPTION: Tests creating and updating blog posts, verifying that the data is properly stored in the database. Also checks validation on required fields by trying to submit empty titles.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef test_create(client, auth, app):\n    auth.login()\n    assert client.get('/create').status_code == 200\n    client.post('/create', data={'title': 'created', 'body': ''})\n\n    with app.app_context():\n        db = get_db()\n        count = db.execute('SELECT COUNT(id) FROM post').fetchone()[0]\n        assert count == 2\n\n\ndef test_update(client, auth, app):\n    auth.login()\n    assert client.get('/1/update').status_code == 200\n    client.post('/1/update', data={'title': 'updated', 'body': ''})\n\n    with app.app_context():\n        db = get_db()\n        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()\n        assert post['title'] == 'updated'\n\n\n@pytest.mark.parametrize('path', (\n    '/create',\n    '/1/update',\n))\ndef test_create_update_validate(client, auth, path):\n    auth.login()\n    response = client.post(path, data={'title': '', 'body': ''})\n    assert b'Title is required.' in response.data\n```\n\n----------------------------------------\n\nTITLE: Handling Database Sessions in Flask\nDESCRIPTION: This snippet explains how to manage database sessions in a Flask application when using SQLAlchemy. It shows the setup for automatically closing the database session after each request or when the application context shuts down. Dependencies include Flask and SQLAlchemy.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom yourapplication.database import db_session\n\n@app.teardown_appcontext\ndef shutdown_session(exception=None):\n    db_session.remove()\n```\n\n----------------------------------------\n\nTITLE: Get Post Helper Function in Flask\nDESCRIPTION: The 'get_post' function retrieves a post by ID from the database and optionally checks if the current user is the author. It raises exceptions via 'abort' for invalid access or missing posts. This is useful for reuse in view functions requiring post access and validation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_post(id, check_author=True):\n    post = get_db().execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' WHERE p.id = ?',\n        (id,)\n    ).fetchone()\n\n    if post is None:\n        abort(404, f\"Post id {id} doesn't exist.\")\n\n    if check_author and post['author_id'] != g.user['id']:\n        abort(403)\n\n    return post\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Templating Decorator in Flask\nDESCRIPTION: A decorator that automatically renders a template with the return value of a view function. The function should return a dictionary to be passed to the template, or None for an empty dictionary. If no template name is provided, it uses the endpoint name.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom flask import request, render_template\n\ndef templated(template=None):\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            template_name = template\n            if template_name is None:\n                template_name = f\"{request.endpoint.replace('.', '/')}.html\"\n            ctx = f(*args, **kwargs)\n            if ctx is None:\n                ctx = {}\n            elif not isinstance(ctx, dict):\n                return ctx\n            return render_template(template_name, **ctx)\n        return decorated_function\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ListView Class in Flask\nDESCRIPTION: This snippet shows how to create a reusable ListView class that can be used for different models and templates. It demonstrates passing arguments to the view class to customize its behavior.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ListView(View):\n    def __init__(self, model, template):\n        self.model = model\n        self.template = template\n\n    def dispatch_request(self):\n        items = self.model.query.all()\n        return render_template(self.template, items=items)\n\napp.add_url_rule(\n    \"/users/\",\n    view_func=ListView.as_view(\"user_list\", User, \"users.html\"),\n)\napp.add_url_rule(\n    \"/stories/\",\n    view_func=ListView.as_view(\"story_list\", Story, \"stories.html\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Application-Level Error Handlers with Request Object\nDESCRIPTION: Implements application-level error handlers that differentiate responses based on URL paths using the request proxy object in Flask, providing varied error pages for 404 and 405 status codes.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import jsonify, render_template\n\n# at the application level\n# not the blueprint level\n@app.errorhandler(404)\ndef page_not_found(e):\n    # if a request is in our blog URL space\n    if request.path.startswith('/blog/'):\n        # we return a custom blog 404 page\n        return render_template(\"blog/404.html\"), 404\n    else:\n        # otherwise we return our generic site-wide 404 page\n        return render_template(\"404.html\"), 404\n\n@app.errorhandler(405)\ndef method_not_allowed(e):\n    # if a request has the wrong method to our API\n    if request.path.startswith('/api/'):\n        # we return a json saying so\n        return jsonify(message=\"Method Not Allowed\"), 405\n    else:\n        # otherwise we return a generic site-wide 405 page\n        return render_template(\"405.html\"), 405\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Blueprint in Flask with Template Rendering\nDESCRIPTION: Demonstrates how to create a simple blueprint that renders static templates. The blueprint handles routes for a default page and dynamic pages, with error handling for missing templates.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import Blueprint, render_template, abort\nfrom jinja2 import TemplateNotFound\n\nsimple_page = Blueprint('simple_page', __name__,\n                        template_folder='templates')\n\n@simple_page.route('/', defaults={'page': 'index'})\n@simple_page.route('/<page>')\ndef show(page):\n    try:\n        return render_template(f'pages/{page}.html')\n    except TemplateNotFound:\n        abort(404)\n```\n\n----------------------------------------\n\nTITLE: Manual Object-Relational Mapping Setup\nDESCRIPTION: This snippet shows how to manually setup ORM with SQLAlchemy in a Flask application by creating the engine, metadata, and database session. It contrasts the declarative approach by separately defining tables and mapping them to classes.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import create_engine, MetaData\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nengine = create_engine('sqlite:////tmp/test.db')\nmetadata = MetaData()\ndb_session = scoped_session(sessionmaker(autocommit=False,\n                                         autoflush=False,\n                                         bind=engine))\n\ndef init_db():\n    metadata.create_all(bind=engine)\n```\n\n----------------------------------------\n\nTITLE: Handling All Exceptions with Pass-through for HTTP Errors\nDESCRIPTION: Generic exception handler that passes through HTTP exceptions unchanged while handling all other exceptions with a custom 500 error template.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.exceptions import HTTPException\n\n@app.errorhandler(Exception)\ndef handle_exception(e):\n    # pass through HTTP errors\n    if isinstance(e, HTTPException):\n        return e\n\n    # now you're handling non-HTTP exceptions only\n    return render_template(\"500_generic.html\", e=e), 500\n```\n\n----------------------------------------\n\nTITLE: Example of querying multiple rows\nDESCRIPTION: Demonstrates how to use the query_db helper function to retrieve and process multiple rows from a database query. The example iterates through all users in the database.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor user in query_db('select * from users'):\n    print(user['username'], 'has the id', user['user_id'])\n```\n\n----------------------------------------\n\nTITLE: Subclassing Flask to Customize Request Parameter Handling\nDESCRIPTION: This example demonstrates how to create custom Request and Flask subclasses to override the default parameter storage behavior. It uses ImmutableOrderedMultiDict to preserve the order of request parameters, which isn't done by Flask's default implementation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/subclassing.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, Request\nfrom werkzeug.datastructures import ImmutableOrderedMultiDict\nclass MyRequest(Request):\n    \"\"\"Request subclass to override request parameter storage\"\"\"\n    parameter_storage_class = ImmutableOrderedMultiDict\nclass MyFlask(Flask):\n    \"\"\"Flask subclass using the custom request class\"\"\"\n    request_class = MyRequest\n```\n\n----------------------------------------\n\nTITLE: Injecting Request Information into Logs in Flask\nDESCRIPTION: This snippet demonstrates how to inject request-specific information (URL, remote address) into log messages. It defines a custom formatter that adds the URL and remote address to the log record if a request context is available. The formatter is then set for both the default handler and the mail handler. Dependencies: flask.has_request_context, flask.request, flask.logging.default_handler, logging.Formatter, Flask.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n \"from flask import has_request_context, request\n    from flask.logging import default_handler\n\n    class RequestFormatter(logging.Formatter):\n        def format(self, record):\n            if has_request_context():\n                record.url = request.url\n                record.remote_addr = request.remote_addr\n            else:\n                record.url = None\n                record.remote_addr = None\n\n            return super().format(record)\n\n    formatter = RequestFormatter(\n        '[%(asctime)s] %(remote_addr)s requested %(url)s\\n'\n        '%(levelname)s in %(module)s: %(message)s'\n    )\n    default_handler.setFormatter(formatter)\n    mail_handler.setFormatter(formatter)\"\n```\n\n----------------------------------------\n\nTITLE: Template Rendering with JSON Data in Flask using Jinja\nDESCRIPTION: Example showing how to render JSON data within HTML script tags using Jinja's tojson filter. This filter ensures proper JSON encoding and marks the output as safe for inclusion in HTML.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_1\n\nLANGUAGE: html+jinja\nCODE:\n```\n<script>\n    const names = {{ names|tojson }};\n    renderChart(names, {{ axis_data|tojson }});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask for MongoDB with MongoEngine\nDESCRIPTION: Sets up a basic Flask application to use MongoDB through MongoEngine. Defines MongoDB database settings in app.config and initializes a MongoEngine instance with the Flask app. Required dependencies include flask and flask_mongoengine.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import Flask\nfrom flask_mongoengine import MongoEngine\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    \"db\": \"myapp\",\n}\ndb = MongoEngine(app)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build-Only URL Rules in Flask\nDESCRIPTION: Illustrates how to add a URL rule in Flask that is only used for URL generation and not for routing to view functions. Useful for setups where the server or middleware handles the file serving, allowing `url_for` to generate download links without a defined view function.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\napp.add_url_rule(\n    \"/uploads/<name>\", endpoint=\"download_file\", build_only=True\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Headers in Flask\nDESCRIPTION: Examples of setting various security headers in Flask responses to enhance application security.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\nresponse.headers['Content-Security-Policy'] = \"default-src 'self'\"\nresponse.headers['X-Content-Type-Options'] = 'nosniff'\nresponse.headers['X-Frame-Options'] = 'SAMEORIGIN'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging with dictConfig in Flask\nDESCRIPTION: This snippet demonstrates how to configure Python's logging using `dictConfig`. It sets up a basic configuration including a formatter, a stream handler, and the root logger. The handler logs to the WSGI errors stream, and the root logger is set to the INFO level. Dependencies: logging.config.dictConfig, Flask.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n \"from logging.config import dictConfig\n\n    dictConfig({\n        'version': 1,\n        'formatters': {'default': {\n            'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',\n        }},\n        'handlers': {'wsgi': {\n            'class': 'logging.StreamHandler',\n            'stream': 'ext://flask.logging.wsgi_errors_stream',\n            'formatter': 'default'\n        }},\n        'root': {\n            'level': 'INFO',\n            'handlers': ['wsgi']\n        }\n    })\n\n    app = Flask(__name__)\"\n```\n\n----------------------------------------\n\nTITLE: Handling User Profile Request Errors in Flask\nDESCRIPTION: This snippet demonstrates how to handle errors for a user profile endpoint in a Flask application. It uses Flask's abort function to handle 400 and 404 errors when a username is absent or cannot be found, respectively. Dependencies include Flask, with routes and a request context established.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import abort, render_template, request\n\n# a username needs to be supplied in the query args\n# a successful request would be like /profile?username=jack\n@app.route(\"/profile\")\ndef user_profile():\n    username = request.arg.get(\"username\")\n    # if a username isn't supplied in the request, return a 400 bad request\n    if username is None:\n        abort(400)\n\n    user = get_user(username=username)\n    # if a user can't be found by their username, return 404 not found\n    if user is None:\n        abort(404)\n\n    return render_template(\"profile.html\", user=user)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handler in Flask\nDESCRIPTION: Example of creating a custom error handler for 404 errors using Flask's errorhandler decorator.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import render_template\n\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template('page_not_found.html'), 404\n```\n\n----------------------------------------\n\nTITLE: Configuring Celery in Flask Application\nDESCRIPTION: This Python code example sets up a Flask app with Celery using Redis as a broker and result backend. It ignores task results by default, storing results only when necessary.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config.from_mapping(\n    CELERY=dict(\n        broker_url=\"redis://localhost\",\n        result_backend=\"redis://localhost\",\n        task_ignore_result=True,\n    ),\n)\ncelery_app = celery_init_app(app)\n```\n\n----------------------------------------\n\nTITLE: Testing Blog Index View in Flask Application\nDESCRIPTION: Tests the index view of a Flask blog application, verifying the presence of login/register links when not logged in, and post content and edit links when logged in as the author.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom flaskr.db import get_db\n\n\ndef test_index(client, auth):\n    response = client.get('/')\n    assert b\"Log In\" in response.data\n    assert b\"Register\" in response.data\n\n    auth.login()\n    response = client.get('/')\n    assert b'Log Out' in response.data\n    assert b'test title' in response.data\n    assert b'by test on 2018-01-01' in response.data\n    assert b'test\\nbody' in response.data\n    assert b'href=\"/1/update\"' in response.data\n```\n\n----------------------------------------\n\nTITLE: Logging with Flask Logger Example\nDESCRIPTION: Demonstrates how to use Flask's built-in logger for different logging levels including debug, warning and error messages. Shows standard logging patterns using app.logger.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_28\n\nLANGUAGE: python\nCODE:\n```\napp.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Cookie Settings in Flask\nDESCRIPTION: Shows how to configure secure cookie settings for both session cookies and custom cookies in Flask applications.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.config.update(\n    SESSION_COOKIE_SECURE=True,\n    SESSION_COOKIE_HTTPONLY=True,\n    SESSION_COOKIE_SAMESITE='Lax',\n)\n\nresponse.set_cookie('username', 'flask', secure=True, httponly=True, samesite='Lax')\n```\n\n----------------------------------------\n\nTITLE: Example of querying a single row\nDESCRIPTION: Shows how to retrieve a single row from the database using the query_db helper function with parametrized queries. This pattern safely handles the case where no matching row is found.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nuser = query_db('select * from users where username = ?',\n                [the_username], one=True)\nif user is None:\n    print('No such user')\nelse:\n    print(the_username, 'has the id', user['user_id'])\n```\n\n----------------------------------------\n\nTITLE: Running Flask Applications with Waitress\nDESCRIPTION: Examples of running a Flask application with Waitress, including direct application loading and using the app factory pattern with the --call option.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/waitress.rst#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# equivalent to 'from hello import app'\n$ waitress-serve --host 127.0.0.1 hello:app\n\n# equivalent to 'from hello import create_app; create_app()'\n$ waitress-serve --host 127.0.0.1 --call hello:create_app\n\nServing on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Registering Flask Blueprints with an Application\nDESCRIPTION: Shows how to register a blueprint with a Flask application. The example imports a blueprint and registers it with the main application instance.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import Flask\nfrom yourapplication.simple_page import simple_page\n\napp = Flask(__name__)\napp.register_blueprint(simple_page)\n```\n\n----------------------------------------\n\nTITLE: Returning JSON from Flask View (dict)\nDESCRIPTION: This Python snippet demonstrates how to return a JSON response from a Flask view by directly returning a Python dictionary. Flask automatically serializes the dictionary to JSON.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/user/<int:id>\")\ndef user_detail(id):\n    user = User.query.get_or_404(id)\n    return {\n        \"username\": User.username,\n        \"email\": User.email,\n        \"picture\": url_for(\"static\", filename=f\"users/{id}/profile.png\"),\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Flask Development Server in Debug Mode\nDESCRIPTION: Shows how to start the Flask development server in debug mode, which enables the interactive debugger and reloader. The server will run on http://127.0.0.1:5000/.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flask --app hello run --debug\n * Serving Flask app \"hello\"\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with inotify reloader\n * Debugger is active!\n * Debugger PIN: 223-456-919\n```\n\n----------------------------------------\n\nTITLE: Implementing Path-Based Dispatching for Flask Applications in Python\nDESCRIPTION: A PathDispatcher class that creates and manages Flask applications based on the URL path. This implementation extracts the first path segment and uses it to determine which application should handle the request.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import Lock\nfrom wsgiref.util import shift_path_info\n\nclass PathDispatcher:\n\n    def __init__(self, default_app, create_app):\n        self.default_app = default_app\n        self.create_app = create_app\n        self.lock = Lock()\n        self.instances = {}\n\n    def get_application(self, prefix):\n        with self.lock:\n            app = self.instances.get(prefix)\n            if app is None:\n                app = self.create_app(prefix)\n                if app is not None:\n                    self.instances[prefix] = app\n            return app\n\n    def __call__(self, environ, start_response):\n        app = self.get_application(_peek_path_info(environ))\n        if app is not None:\n            shift_path_info(environ)\n        else:\n            app = self.default_app\n        return app(environ, start_response)\n\ndef _peek_path_info(environ):\n    segments = environ.get(\"PATH_INFO\", \"\").lstrip(\"/\").split(\"/\", 1)\n    if segments:\n        return segments[0]\n\n    return None\n```\n\n----------------------------------------\n\nTITLE: Checksum Calculation Stream\nDESCRIPTION: This Python code defines a `ChecksumCalcStream` class that wraps an input stream and calculates a SHA1 checksum of the data as it is read. The `read` and `readline` methods update the hash with the data read from the underlying stream. It uses hashlib for SHA1 hashing.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/requestchecksum.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\n\nclass ChecksumCalcStream(object):\n\n    def __init__(self, stream):\n        self._stream = stream\n        self._hash = hashlib.sha1()\n\n    def read(self, bytes):\n        rv = self._stream.read(bytes)\n        self._hash.update(rv)\n        return rv\n\n    def readline(self, size_hint):\n        rv = self._stream.readline(size_hint)\n        self._hash.update(rv)\n        return rv\n```\n\n----------------------------------------\n\nTITLE: Fetching Task Results\nDESCRIPTION: In this Python code, a GET endpoint is set up to check the status of a background task initiated previously. It informs whether the task is ready, if it was successful, and fetches the result once available.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom celery.result import AsyncResult\n\n@app.get(\"/result/<id>\")\ndef task_result(id: str) -> dict[str, object]:\n    result = AsyncResult(id)\n    return {\n        \"ready\": result.ready(),\n        \"successful\": result.successful(),\n        \"value\": result.result if result.ready() else None,\n    }\n```\n\n----------------------------------------\n\nTITLE: Calling a Task from a Flask Route\nDESCRIPTION: This Python snippet shows how to call a Celery task in the background using Flask. A POST route is created to start an addition task, returning the task's result ID to the client for further querying.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request\n\n@app.post(\"/add\")\ndef start_add() -> dict[str, object]:\n    a = request.form.get(\"a\", type=int)\n    b = request.form.get(\"b\", type=int)\n    result = add_together.delay(a, b)\n    return {\"result_id\": result.id}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Session in Tests\nDESCRIPTION: Demonstrates techniques for accessing and manipulating Flask session during testing, including setting session values before requests and checking session state.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import session\n\ndef test_modify_session(client):\n    with client.session_transaction() as session:\n        # set a user id without going through the login route\n        session[\"user_id\"] = 1\n\n    # session is saved now\n\n    response = client.get(\"/users/me\")\n    assert response.json[\"username\"] == \"flask\"\n```\n\n----------------------------------------\n\nTITLE: Login Template\nDESCRIPTION: This Jinja template extends the `base.html` template and defines the content for the user login page. It includes a form with fields for username and password, both marked as required.  The template overrides the `header` and `content` blocks from the base template.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/templates.rst#2025-04-20_snippet_2\n\nLANGUAGE: html+jinja\nCODE:\n```\n\"{% extends 'base.html' %}\\n\\n{% block header %}\\n  <h1>{% block title %}Log In{% endblock %}</h1>\\n{% endblock %}\\n\\n{% block content %}\\n  <form method=\\\"post\\\">\\n    <label for=\\\"username\\\">Username</label>\\n    <input name=\\\"username\\\" id=\\\"username\\\" required>\\n    <label for=\\\"password\\\">Password</label>\\n    <input type=\\\"password\\\" name=\\\"password\\\" id=\\\"password\\\" required>\\n    <input type=\\\"submit\\\" value=\\\"Log In\\\">\\n  </form>\\n{% endblock %}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Combining Flask Applications with DispatcherMiddleware in Python\nDESCRIPTION: Example of using Werkzeug's DispatcherMiddleware to combine multiple Flask applications. This code shows how to mount a frontend application at the root URL and a backend application at the '/backend' path.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\napplication = DispatcherMiddleware(frontend, {\n    '/backend': backend\n})\n```\n\n----------------------------------------\n\nTITLE: Flask Route Definitions with URL Parameters\nDESCRIPTION: Examples of defining Flask routes with various URL parameter types and default values\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/')\ndef index():\n    pass\n\n@app.route('/<username>')\ndef show_user(username):\n    pass\n\n@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    pass\n\n@app.route('/users/', defaults={'page': 1})\n@app.route('/users/page/<int:page>')\ndef show_users(page):\n    pass\n\n@app.route('/region/', defaults={'id': 1})\n@app.route('/region/<int:id>', methods=['GET', 'POST'])\ndef region(id):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Subdomain Dispatching for Flask Applications in Python\nDESCRIPTION: A SubdomainDispatcher class that dynamically creates and manages Flask applications based on subdomains. This implementation uses thread-safe instance caching to avoid recreating applications for the same subdomain.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import Lock\n\nclass SubdomainDispatcher:\n\n    def __init__(self, domain, create_app):\n        self.domain = domain\n        self.create_app = create_app\n        self.lock = Lock()\n        self.instances = {}\n\n    def get_application(self, host):\n        host = host.split(':')[0]\n        assert host.endswith(self.domain), 'Configuration error'\n        subdomain = host[:-len(self.domain)].rstrip('.')\n        with self.lock:\n            app = self.instances.get(subdomain)\n            if app is None:\n                app = self.create_app(subdomain)\n                self.instances[subdomain] = app\n            return app\n\n    def __call__(self, environ, start_response):\n        app = self.get_application(environ['HTTP_HOST'])\n        return app(environ, start_response)\n```\n\n----------------------------------------\n\nTITLE: Converting Function-based View to Class-based View in Flask\nDESCRIPTION: This snippet demonstrates how to convert a simple function-based view that renders a list of users into a class-based view using Flask's View class.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/users/\")\ndef user_list():\n    users = User.query.all()\n    return render_template(\"users.html\", users=users)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom flask.views import View\n\nclass UserList(View):\n    def dispatch_request(self):\n        users = User.query.all()\n        return render_template(\"users.html\", objects=users)\n\napp.add_url_rule(\"/users/\", view_func=UserList.as_view(\"user_list\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask Application with Message Flashing\nDESCRIPTION: Sets up a Flask application with a secret key and basic routing for login functionality. Demonstrates how to use flash() for user notifications.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, flash, redirect, render_template, \n         request, url_for\n\napp = Flask(__name__)\napp.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/'\\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    error = None\n    if request.method == 'POST':\n        if request.form['username'] != 'admin' or \\\n                request.form['password'] != 'secret':\n            error = 'Invalid credentials'\n        else:\n            flash('You were successfully logged in')\n            return redirect(url_for('index'))\n    return render_template('login.html', error=error)\n```\n\n----------------------------------------\n\nTITLE: Creating Data in MongoDB with MongoEngine\nDESCRIPTION: This snippet demonstrates instantiating a MongoEngine document with field values and saving it to the database. Assigns values to field attributes before saving. 'doc.save()' must be called to persist the document.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nbttf = Movie(title=\"Back To The Future\", year=1985)\nbttf.actors = [\n    \"Michael J. Fox\",\n    \"Christopher Lloyd\"\n]\nbttf.imdb = Imdb(imdb_id=\"tt0088763\", rating=8.5)\nbttf.save()\n```\n\n----------------------------------------\n\nTITLE: Running Flask Applications with Gunicorn\nDESCRIPTION: Examples of running Gunicorn with a Flask application, including both direct app import and application factory patterns. The -w flag specifies 4 workers for handling concurrent requests.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# equivalent to 'from hello import app'\n$ gunicorn -w 4 'hello:app'\n\n# equivalent to 'from hello import create_app; create_app()'\n$ gunicorn -w 4 'hello:create_app()'\n\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: sync\nBooting worker with pid: x\nBooting worker with pid: x\nBooting worker with pid: x\nBooting worker with pid: x\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication Views\nDESCRIPTION: Tests for user registration including validation and error handling.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom flask import g, session\nfrom flaskr.db import get_db\n\n\ndef test_register(client, app):\n    assert client.get('/auth/register').status_code == 200\n    response = client.post(\n        '/auth/register', data={'username': 'a', 'password': 'a'}\n    )\n    assert response.headers[\"Location\"] == \"/auth/login\"\n\n    with app.app_context():\n        assert get_db().execute(\n            \"SELECT * FROM user WHERE username = 'a'\",\n        ).fetchone() is not None\n\n\n@pytest.mark.parametrize(('username', 'password', 'message'), (\n    ('', '', b'Username is required.'),\n    ('a', '', b'Password is required.'),\n    ('test', 'test', b'already registered'),\n))\ndef test_register_validate_input(client, username, password, message):\n    response = client.post(\n        '/auth/register',\n        data={'username': username, 'password': password}\n    )\n    assert message in response.data\n```\n\n----------------------------------------\n\nTITLE: Running Flask Development Server in Debug Mode (Command Line)\nDESCRIPTION: Command to run a Flask application in debug mode using the command line interface. This enables the interactive debugger and auto-reloader for development purposes.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app hello run --debug\n```\n\n----------------------------------------\n\nTITLE: Running Flask Application with Waitress WSGI Server\nDESCRIPTION: Illustrates how to run a Flask application using the Waitress WSGI server in a production environment. Waitress must be installed within the virtual environment. Input: application name; Output: Waitress serves the application on a specified address.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#2025-04-20_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n$ pip install waitress\n$ waitress-serve --call 'flaskr:create_app'\n\nServing on http://0.0.0.0:8080\n```\n\n----------------------------------------\n\nTITLE: Implementing User Registration View in Flask\nDESCRIPTION: Handles user registration with form validation, password hashing, and database operations. Supports both GET and POST methods.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@bp.route('/register', methods=('GET', 'POST'))\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        if not username:\n            error = 'Username is required.'\n        elif not password:\n            error = 'Password is required.'\n\n        if error is None:\n            try:\n                db.execute(\n                    \"INSERT INTO user (username, password) VALUES (?, ?)\",\n                    (username, generate_password_hash(password)),\n                )\n                db.commit()\n            except db.IntegrityError:\n                error = f\"User {username} is already registered.\"\n            else:\n                return redirect(url_for(\"auth.login\"))\n\n        flash(error)\n\n    return render_template('auth/register.html')\n```\n\n----------------------------------------\n\nTITLE: Wrapping Flask App with WsgiToAsgi Adapter\nDESCRIPTION: This Python code snippet demonstrates how to wrap a Flask application with the WsgiToAsgi adapter from the asgiref library. This allows a Flask app to be served using an ASGI server, facilitating Flask's async/await support. Dependencies include asgiref and Flask libraries. The input is a Flask app instance and the output is an ASGI-compatible app wrapped by WsgiToAsgi.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/asgi.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom asgiref.wsgi import WsgiToAsgi\\nfrom flask import Flask\\n\\napp = Flask(__name__)\\n\\n...\\n\\nasgi_app = WsgiToAsgi(app)\n```\n\n----------------------------------------\n\nTITLE: Creating Application Fixture in pytest\nDESCRIPTION: Defines a pytest fixture for creating and configuring a Flask application instance with testing configuration. Supports application factory pattern and provides setup and teardown capabilities.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom my_project import create_app\n\n@pytest.fixture()\ndef app():\n    app = create_app()\n    app.config.update({\n        \"TESTING\": True,\n    })\n\n    # other setup can go here\n\n    yield app\n\n    # clean up / reset resources here\n```\n\n----------------------------------------\n\nTITLE: Creating a dictionary row factory for SQLite results\nDESCRIPTION: Implements a row factory function to convert SQLite query results into dictionaries. This makes the results more convenient to work with by providing named access to columns.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef make_dicts(cursor, row):\n    return dict((cursor.description[idx][0], value)\n                for idx, value in enumerate(row))\n\ndb.row_factory = make_dicts\n```\n\n----------------------------------------\n\nTITLE: Manually Pushing Flask Application Context\nDESCRIPTION: Demonstrates how to manually push an application context using the app.app_context() method in a with block, allowing code within the block to access current_app. This example shows initializing a database during app creation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef create_app():\n    app = Flask(__name__)\n\n    with app.app_context():\n        init_db()\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Blueprint Views in Flask\nDESCRIPTION: Shows how to generate URLs for views that are part of a blueprint in Flask. The blueprint name is prepended to the function name when using url_for.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nurl_for('auth.login')\n```\n\n----------------------------------------\n\nTITLE: Testing Functions with Active Context\nDESCRIPTION: Demonstrates creating application and request contexts for testing functions that depend on Flask context-local objects like current_app, request, and session.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef test_db_post_model(app):\n    with app.app_context():\n        post = db.session.query(Post).get(1)\n\ndef test_validate_user_edit(app):\n    with app.test_request_context(\n        \"/user/2/edit\", method=\"POST\", data={\"name\": \"\"}\n    ):\n        # call a function that accesses `request`\n        messages = validate_edit_user()\n\n    assert messages[\"name\"][0] == \"Name cannot be empty.\"\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Celery Tasks\nDESCRIPTION: This Python code snippet defines a task that accepts a user ID and fetches the user object from the database to create an archive. It demonstrates passing simple data types to tasks to avoid serialization issues.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@shared_task\ndef generate_user_archive(user_id: str) -> None:\n    user = db.session.get(User, user_id)\n    ...\n\ngenerate_user_archive.delay(current_user.id)\n```\n\n----------------------------------------\n\nTITLE: Loading Flask Configuration from Environment Variables\nDESCRIPTION: Demonstrates how to load Flask configuration from environment variables with a specific prefix using the from_prefixed_env method.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.config.from_prefixed_env()\napp.config[\"SECRET_KEY\"]  # Is \"5f352379324c22463451387a0aec5d2f\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Flask Configuration for External Debuggers with Error Passthrough\nDESCRIPTION: Python code that configures Flask for external debuggers with error passthrough, allowing unhandled exceptions to propagate to the external debugger rather than being caught by the development server.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.run(\n    debug=True, passthrough_errors=True,\n    use_debugger=False, use_reloader=False\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation in Flask View - Python\nDESCRIPTION: This snippet shows how to integrate a WTForms-defined form into a Flask view function, handling POST requests for form submission and validating form data. Dependencies include Flask and WTForms.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegistrationForm(request.form)\n    if request.method == 'POST' and form.validate():\n        user = User(form.username.data, form.email.data,\n                    form.password.data)\n        db_session.add(user)\n        flash('Thanks for registering')\n        return redirect(url_for('login'))\n    return render_template('register.html', form=form)\n```\n\n----------------------------------------\n\nTITLE: Implementing ProxyFix Middleware for Flask Behind a Proxy\nDESCRIPTION: This code snippet demonstrates how to wrap a Flask application with Werkzeug's ProxyFix middleware to handle X-Forwarded headers. It configures the middleware to trust one proxy for forwarded client IP, protocol, host, and path prefix information.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/proxy_fix.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\napp.wsgi_app = ProxyFix(\n    app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1\n)\n```\n\n----------------------------------------\n\nTITLE: Streaming with Request Context in Flask\nDESCRIPTION: Example of using stream_with_context to maintain the request context while streaming data. This allows access to request data within the generator function that produces the streamed response.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import stream_with_context, request\nfrom markupsafe import escape\n\n@app.route('/stream')\ndef streamed_response():\n    def generate():\n        yield '<p>Hello '\n        yield escape(request.args['name'])\n        yield '!</p>'\n    return stream_with_context(generate())\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handlers in Flask\nDESCRIPTION: Two examples of registering an error handler for Bad Request (400) errors, using both decorator and direct registration approaches.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.errorhandler(werkzeug.exceptions.BadRequest)\ndef handle_bad_request(e):\n    return 'bad request!', 400\n\n# or, without the decorator\napp.register_error_handler(400, handle_bad_request)\n```\n\n----------------------------------------\n\nTITLE: Layout Template with Flash Message Rendering\nDESCRIPTION: Implements a Jinja2 layout template that retrieves and displays flash messages across all pages using get_flashed_messages() function.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#2025-04-20_snippet_1\n\nLANGUAGE: html+jinja\nCODE:\n```\n<!doctype html>\n<title>My Application</title>\n{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    <ul class=flashes>\n    {% for message in messages %}\n      <li>{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}\n{% block body %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Registering Internal Server Error Handler in App Factory\nDESCRIPTION: Illustrates how to register a 500 error handler in a Flask app created via an app factory pattern. The 'internal_server_error' function is linked to 500 errors during the creation process.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, render_template\n\ndef internal_server_error(e):\n  return render_template('500.html'), 500\n\ndef create_app():\n    app = Flask(__name__)\n    app.register_error_handler(500, internal_server_error)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Logging Before Template Rendering with Flask Signals\nDESCRIPTION: Example of using Flask's before_render_template signal to log information before template rendering begins. This subscriber will be called just before any template rendering process starts.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef log_template_renders(sender, template, context, **extra):\n    sender.logger.debug('Rendering template \"%s\" with context %s',\n                        template.name or 'string template',\n                        context)\n\nfrom flask import before_render_template\nbefore_render_template.connect(log_template_renders, app)\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Documents in MongoEngine\nDESCRIPTION: Demonstrates the use of embedded documents to represent nested data in MongoEngine. Declares fields within EmbeddedDocument and uses EmbeddedDocumentField in the main document.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass Imdb(me.EmbeddedDocument):\n    imdb_id = me.StringField()\n    rating = me.DecimalField()\n    votes = me.IntField()\n\nclass Movie(me.Document):\n    ...\n    imdb = me.EmbeddedDocumentField(Imdb)\n```\n\n----------------------------------------\n\nTITLE: Registering Database Functions with Flask Application\nDESCRIPTION: This function registers the database close function and CLI command with the Flask application. It uses Flask's teardown_appcontext and cli.add_command methods for integration.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef init_app(app):\n    app.teardown_appcontext(close_db)\n    app.cli.add_command(init_db_command)\n```\n\n----------------------------------------\n\nTITLE: Emailing Errors to Admins with SMTPHandler in Flask\nDESCRIPTION: This snippet demonstrates how to configure an SMTPHandler to send email notifications when errors or higher severity messages are logged.  It sets up the handler with the SMTP server details, the sender and recipient addresses, and the subject of the email. The handler is added to the application logger if the app is not in debug mode. Dependencies: logging, logging.handlers.SMTPHandler, Flask.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n \"import logging\n    from logging.handlers import SMTPHandler\n\n    mail_handler = SMTPHandler(\n        mailhost='127.0.0.1',\n        fromaddr='server-error@example.com',\n        toaddrs=['admin@example.com'],\n        subject='Application Error'\n    )\n    mail_handler.setLevel(logging.ERROR)\n    mail_handler.setFormatter(logging.Formatter(\n        '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'\n    ))\n\n    if not app.debug:\n        app.logger.addHandler(mail_handler)\"\n```\n\n----------------------------------------\n\nTITLE: Registering Flask Blueprints with a URL Prefix\nDESCRIPTION: Demonstrates how to register a blueprint with a specific URL prefix. This allows mounting the blueprint at a different location in the URL hierarchy.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\napp.register_blueprint(simple_page, url_prefix='/pages')\n```\n\n----------------------------------------\n\nTITLE: Fetching JSON data with JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the `fetch` API to make a GET request to a Flask endpoint that returns JSON data. It demonstrates how to parse the JSON response and use the data in a callback function.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst room_url = {{ url_for(\"room_detail\", id=room.id)|tojson }}\nfetch(room_url)\n    .then(response => response.json())\n    .then(data => {\n        // data is a parsed JSON object\n    })\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Flask Application Code\nDESCRIPTION: Python code to enable debug mode when running a Flask application programmatically. This is equivalent to using the --debug flag with the command line.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Blueprint Error Handler for Internal Server Errors\nDESCRIPTION: Demonstrates the use of a blueprint-specific error handler for 500 Internal Server Errors in a Flask app, where it can be applied using decorators or explicit registration.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Blueprint\n\nblog = Blueprint('blog', __name__)\n\n# as a decorator\n@blog.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n\n# or with register_error_handler\nblog.register_error_handler(500, internal_server_error)\n```\n\n----------------------------------------\n\nTITLE: Externally Visible Flask Server\nDESCRIPTION: This snippet shows how to make the Flask development server externally visible by adding `--host=0.0.0.0` to the `flask run` command.  This configures the server to listen on all public IPs. It makes the server accessible from other machines on the network, which is helpful for debugging and development.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ flask run --host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Template with Blocks in Jinja2\nDESCRIPTION: This HTML+Jinja2 code defines a base template (layout.html) with block tags that child templates can override. It creates a skeleton HTML document with blocks for head content, title, main content, and footer that can be customized in child templates.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/templateinheritance.rst#2025-04-20_snippet_0\n\nLANGUAGE: html+jinja\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    {% block head %}\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n    <title>{% block title %}{% endblock %} - My Webpage</title>\n    {% endblock %}\n  </head>\n  <body>\n    <div id=\"content\">{% block content %}{% endblock %}</div>\n    <div id=\"footer\">\n      {% block footer %}\n      &copy; Copyright 2010 by <a href=\"http://domain.invalid/\">you</a>.\n      {% endblock %}\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Logging User Activity in Flask\nDESCRIPTION: This snippet demonstrates how to log user login attempts (both successful and failed) using Flask's built-in logger. It retrieves user information from the request, checks the password, and logs an informational message based on the authentication result.  Dependencies: Flask, url_for, redirect, abort, get_user, login_user.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"@app.route('/login', methods=['POST'])\n    def login():\n        user = get_user(request.form['username'])\n\n        if user.check_password(request.form['password']):\n            login_user(user)\n            app.logger.info('%s logged in successfully', user.username)\n            return redirect(url_for('index'))\n        else:\n            app.logger.info('%s failed to log in', user.username)\n            abort(401)\"\n```\n\n----------------------------------------\n\nTITLE: Sending Form Data with JavaScript Fetch\nDESCRIPTION: This JavaScript snippet demonstrates how to send form data using the `fetch` API with the POST method.  A `FormData` object is created and populated with data, then passed as the `body` option to the `fetch` function.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet data = new FormData()\ndata.append(\"name\", \"Flask Room\")\ndata.append(\"description\", \"Talk about Flask here.\")\nfetch(room_url, {\n    \"method\": \"POST\",\n    \"body\": data,\n}).then(...)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Blog Post in Flask\nDESCRIPTION: The 'create' function handles both GET and POST requests for creating a new blog post. It uses 'login_required' as a decorator to enforce authentication. It validates inputs and interacts with the database to insert new records, and flashes errors if validation fails.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'INSERT INTO post (title, body, author_id)'\n                ' VALUES (?, ?, ?)',\n                (title, body, g.user['id'])\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/create.html')\n\n```\n\n----------------------------------------\n\nTITLE: Creating Request Context in Flask Shell - Python\nDESCRIPTION: This snippet demonstrates how to create and activate a RequestContext manually using Flask's test_request_context method. It shows how to push and pop the context in a Python shell, which enables access to request-specific variables while testing or programming interactively.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/shell.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> ctx = app.test_request_context()\n>>> ctx.push()\n>>> ctx.pop()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Flask Extension with init_app\nDESCRIPTION: This code snippet demonstrates the basic structure of a Flask extension class. It includes an `__init__` method that optionally accepts a Flask application instance and an `init_app` method to perform extension-specific initialization tasks. The `init_app` function configures the application.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass HelloExtension:\n    def __init__(self, app=None):\n        if app is not None:\n            self.init_app(app)\n\n    def init_app(self, app):\n        app.before_request(...)\n```\n\n----------------------------------------\n\nTITLE: Defining Template Folders for Blueprints\nDESCRIPTION: Shows how to make a blueprint expose templates by providing the template_folder parameter. This allows blueprints to render their own templates.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nadmin = Blueprint('admin', __name__, template_folder='templates')\n```\n\n----------------------------------------\n\nTITLE: Supporting Async Functions in Flask Extensions\nDESCRIPTION: This code snippet demonstrates how Flask extension authors can support async functions by utilizing the `flask.Flask.ensure_sync` method. The example shows a decorator (`extension`) that wraps a function (`func`), adds extension-specific logic, and then calls the decorated function using `current_app.ensure_sync`. This ensures that the extension logic works correctly with both synchronous and asynchronous view functions.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/async-await.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    def extension(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            ...  # Extension logic\n            return current_app.ensure_sync(func)(*args, **kwargs)\n\n        return wrapper\n```\n\n----------------------------------------\n\nTITLE: Using the SQLAlchemy SQL Abstraction Layer\nDESCRIPTION: This snippet illustrates the setup and basic usage of SQLAlchemy's SQL abstraction layer to interact with a database. It shows engine creation, metadata binding, and table interaction, including data insertion and querying.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import create_engine, MetaData, Table\n\nengine = create_engine('sqlite:////tmp/test.db')\nmetadata = MetaData(bind=engine)\n\nfrom sqlalchemy import Table\n\nusers = Table('users', metadata, autoload=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing Authentication Blueprint in Flask\nDESCRIPTION: Creates a Blueprint named 'auth' for handling authentication-related routes with a URL prefix of '/auth'. Imports necessary Flask components and security utilities.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport functools\n\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, session, url_for\n)\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\nfrom flaskr.db import get_db\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Data with JavaScript Fetch\nDESCRIPTION: This JavaScript snippet shows how to send JSON data using the `fetch` API with the POST method. It demonstrates how to serialize the data using `JSON.stringify()` and set the `Content-Type` header to `application/json`.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet data = {\n    \"name\": \"Flask Room\",\n    \"description\": \"Talk about Flask here.\",\n}\nfetch(room_url, {\n    \"method\": \"POST\",\n    \"headers\": {\"Content-Type\": \"application/json\"},\n    \"body\": JSON.stringify(data),\n}).then(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in JavaScript Fetch\nDESCRIPTION: This JavaScript snippet demonstrates how to handle redirects in a `fetch` response. It checks the `response.redirected` property and, if true, redirects the page using `window.location = response.url`.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfetch(\"/login\", {\"body\": ...}).then(\n    response => {\n        if (response.redirected) {\n            window.location = response.url\n        } else {\n            showLoginError()\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Value Preprocessor for Language Code Extraction\nDESCRIPTION: This URL value preprocessor extracts the language code from URL values and stores it in the g object. This eliminates the need to manually assign the language code in each route function.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\n    g.lang_code = values.pop('lang_code', None)\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Nested Blueprints\nDESCRIPTION: Demonstrates how to generate URLs for views in nested blueprints using url_for. The endpoint name includes both parent and child blueprint names.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nurl_for('parent.child.create')\n/parent/child/create\n```\n\n----------------------------------------\n\nTITLE: Loading Flask Configuration from TOML File\nDESCRIPTION: Demonstrates how to load Flask configuration from a TOML file using the from_file method and the tomllib library.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport tomllib\napp.config.from_file(\"config.toml\", load=tomllib.load, text=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Flask App with Celery using Factory Pattern\nDESCRIPTION: This Python snippet demonstrates using the Flask application factory pattern to create and configure a Flask app instance with Celery. It assigns the Celery app as an extension, enabling background task handling.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef create_app() -> Flask:\n    app = Flask(__name__)\n    app.config.from_mapping(\n        CELERY=dict(\n            broker_url=\"redis://localhost\",\n            result_backend=\"redis://localhost\",\n            task_ignore_result=True,\n        ),\n    )\n    app.config.from_prefixed_env()\n    celery_init_app(app)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Stories API Endpoints\nDESCRIPTION: REST API routes for managing stories. Provides endpoints for listing all stories, creating new stories, viewing individual stories, updating existing stories, and deleting stories. Uses standard HTTP methods GET, POST, PATCH and DELETE.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_7\n\nLANGUAGE: rest\nCODE:\n```\n/stories/     GET    List all stories\n/stories/     POST   Create a new story\n/stories/<id> GET    Show a single story\n/stories/<id> PATCH  Update a story\n/stories/<id> DELETE Delete a story\n```\n\n----------------------------------------\n\nTITLE: Initializing database with schema\nDESCRIPTION: Provides a function to initialize the database using a schema file. This pattern is useful for setting up the initial database structure from a SQL script.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef init_db():\n    with app.app_context():\n        db = get_db()\n        with app.open_resource('schema.sql', mode='r') as f:\n            db.cursor().executescript(f.read())\n        db.commit()\n```\n\n----------------------------------------\n\nTITLE: Applying Decorators to Class-based Views in Flask\nDESCRIPTION: This example demonstrates how to apply decorators to class-based views using the decorators class attribute.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass UserList(View):\n    decorators = [cache(minutes=2), login_required]\n\napp.add_url_rule('/users/', view_func=UserList.as_view())\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask to Serve a Single-Page Application with API Endpoints\nDESCRIPTION: This code demonstrates how to set up a Flask application that serves both a Single-Page Application and API endpoints. It configures static file serving for the SPA assets, includes a sample API endpoint (/heartbeat), and creates a catch-all route to handle SPA navigation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/singlepageapplications.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, jsonify\n\napp = Flask(__name__, static_folder='app', static_url_path=\"/app\")\n\n\n@app.route(\"/heartbeat\")\ndef heartbeat():\n    return jsonify({\"status\": \"healthy\"})\n\n\n@app.route('/', defaults={'path': ''})\n@app.route('/<path:path>')\ndef catch_all(path):\n    return app.send_static_file(\"index.html\")\n```\n\n----------------------------------------\n\nTITLE: Testing Logout Functionality in Flask Authentication System\nDESCRIPTION: Tests the logout functionality of a Flask authentication system by verifying that the user_id is removed from the session after logout.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef test_logout(client, auth):\n    auth.login()\n\n    with client:\n        auth.logout()\n        assert 'user_id' not in session\n```\n\n----------------------------------------\n\nTITLE: Decorator Based Signal Subscription\nDESCRIPTION: This snippet shows how to subscribe to a signal using the `connect_via` decorator. The decorated function will be called whenever the `template_rendered` signal is emitted by the specified sender (`app`).  The function receives the sender, template, context and extra arguments.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"from flask import template_rendered\n\n@template_rendered.connect_via(app)\ndef when_template_rendered(sender, template, context, **extra):\n    print(f'Template {template.name} is rendered with {context}')\"\n```\n\n----------------------------------------\n\nTITLE: Register Template\nDESCRIPTION: This Jinja template extends the `base.html` template and defines the content for the user registration page. It includes a form with fields for username and password, both marked as required. The template overrides the `header` and `content` blocks from the base template.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/templates.rst#2025-04-20_snippet_1\n\nLANGUAGE: html+jinja\nCODE:\n```\n\"{% extends 'base.html' %}\\n\\n{% block header %}\\n  <h1>{% block title %}Register{% endblock %}</h1>\\n{% endblock %}\\n\\n{% block content %}\\n  <form method=\\\"post\\\">\\n    <label for=\\\"username\\\">Username</label>\\n    <input name=\\\"username\\\" id=\\\"username\\\" required>\\n    <label for=\\\"password\\\">Password</label>\\n    <input type=\\\"password\\\" name=\\\"password\\\" id=\\\"password\\\" required>\\n    <input type=\\\"submit\\\" value=\\\"Register\\\">\\n  </form>\\n{% endblock %}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Complete Flask Application with URL Processors for Internationalization\nDESCRIPTION: This complete example shows a Flask application with both URL defaults and URL value preprocessors implemented. The route functions no longer need to handle the language code parameter directly, as it's automatically extracted and stored in g.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, g\n\napp = Flask(__name__)\n\n@app.url_defaults\ndef add_language_code(endpoint, values):\n    if 'lang_code' in values or not g.lang_code:\n        return\n    if app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n        values['lang_code'] = g.lang_code\n\n@app.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\n    g.lang_code = values.pop('lang_code', None)\n\n@app.route('/<lang_code>/')\ndef index():\n    ...\n\n@app.route('/<lang_code>/about')\ndef about():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Template that Extends a Base Template in Jinja2\nDESCRIPTION: This HTML+Jinja2 code demonstrates a child template that extends the base layout.html template. It overrides the title, head, and content blocks while using super() to include the parent's head block content. The template adds custom CSS and welcome content.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/templateinheritance.rst#2025-04-20_snippet_1\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% extends \"layout.html\" %}\n{% block title %}Index{% endblock %}\n{% block head %}\n  {{ super() }}\n  <style type=\"text/css\">\n    .important { color: #336699; }\n  </style>\n{% endblock %}\n{% block content %}\n  <h1>Index</h1>\n  <p class=\"important\">\n    Welcome on my awesome homepage.\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating URL Defaults Function for Language Code Injection\nDESCRIPTION: This snippet defines a url_defaults function that automatically injects language codes into URL generation. It checks if the endpoint expects a lang_code parameter and injects the value from g.lang_code when appropriate.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.url_defaults\ndef add_language_code(endpoint, values):\n    if 'lang_code' in values or not g.lang_code:\n        return\n    if app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n        values['lang_code'] = g.lang_code\n```\n\n----------------------------------------\n\nTITLE: Testing Blog Post Deletion in Flask Application\nDESCRIPTION: Tests deleting a blog post, verifying that the user is redirected to the index page and that the post is removed from the database after deletion.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef test_delete(client, auth, app):\n    auth.login()\n    response = client.post('/1/delete')\n    assert response.headers[\"Location\"] == \"/\"\n\n    with app.app_context():\n        db = get_db()\n        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()\n        assert post is None\n```\n\n----------------------------------------\n\nTITLE: Loading Flask Configuration from JSON File\nDESCRIPTION: Shows how to load Flask configuration from a JSON file using the from_file method and the json library.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport json\napp.config.from_file(\"config.json\", load=json.load)\n```\n\n----------------------------------------\n\nTITLE: Loading Flask Configuration from Python Files\nDESCRIPTION: Demonstrates how to load Flask configuration from a separate Python file and an environment variable. This allows for flexible configuration management across different deployments.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp = Flask(__name__)\napp.config.from_object('yourapplication.default_settings')\napp.config.from_envvar('YOURAPPLICATION_SETTINGS')\n```\n\n----------------------------------------\n\nTITLE: Generating URL with Jinja and Flask's url_for\nDESCRIPTION: This JavaScript snippet shows how to generate a URL using Flask's `url_for` function within a Jinja template and pass it to Javascript.  The `tojson` filter is applied to ensure the generated URL is properly escaped for use in JavaScript.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst user_url = {{ url_for(\"user\", id=current_user.id)|tojson }}\nfetch(user_url).then(...)\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalized URLs with Flask Blueprints\nDESCRIPTION: This example shows how to implement internationalized URLs using Flask blueprints. Blueprints simplify the process by automatically prefixing all URLs with the language code and providing per-blueprint URL processors.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Blueprint, g\n\nbp = Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n\n@bp.url_defaults\ndef add_language_code(endpoint, values):\n    values.setdefault('lang_code', g.lang_code)\n\n@bp.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\n    g.lang_code = values.pop('lang_code')\n\n@bp.route('/')\ndef index():\n    ...\n\n@bp.route('/about')\ndef about():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Simulating Requests with Flask Test Client Python\nDESCRIPTION: This code snippet shows how to use Flask's test request context to simulate a request for testing purposes. It allows testing view functions with specified parameters inside a with block.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/reqcontext.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef generate_report(year):\n    format = request.args.get(\"format\")\n    ...\n\nwith app.test_request_context(\n    \"/make_report/2017\", query_string={\"format\": \"short\"}\n):\n    generate_report()\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Static Files in Flask\nDESCRIPTION: Example of using Flask's url_for function to generate URLs for static files. The 'static' endpoint name is a special endpoint that Flask provides for serving static files from the static directory.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nurl_for('static', filename='style.css')\n```\n\n----------------------------------------\n\nTITLE: Generating URL Dynamically in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to generate a URL dynamically within JavaScript code, using a global `SCRIPT_ROOT` variable passed from the template. This is useful when the URL depends on information only available in the browser.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst SCRIPT_ROOT = {{ request.script_root|tojson }}\nlet user_id = ...  // do something to get a user id from the page\nlet user_url = `${SCRIPT_ROOT}/user/${user_id}`\nfetch(user_url).then(...)\n```\n\n----------------------------------------\n\nTITLE: Querying Documents with MongoEngine\nDESCRIPTION: Explains how to retrieve MongoDB documents using MongoEngine. Utilizes the 'objects' attribute on the document class to find records matching specified criteria, supports query operators like '__in' and '__gte'.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nbttf = Movie.objects(title=\"Back To The Future\").get_or_404()\n```\n\nLANGUAGE: Python\nCODE:\n```\nsome_theron_movie = Movie.objects(actors__in=[\"Charlize Theron\"]).first()\n\nfor recents in Movie.objects(year__gte=2017):\n    print(recents.title)\n```\n\n----------------------------------------\n\nTITLE: Using MarkupSafe for HTML Escaping in Flask\nDESCRIPTION: Examples of using the MarkupSafe library's Markup class to work with HTML content safely. This demonstrates how to mark content as safe HTML, escape HTML, and strip HTML tags when needed.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from markupsafe import Markup\n>>> Markup('<strong>Hello %s!</strong>') % '<blink>hacker</blink>'\nMarkup('<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>')\n>>> Markup.escape('<blink>hacker</blink>')\nMarkup('&lt;blink&gt;hacker&lt;/blink&gt;')\n>>> Markup('<em>Marked up</em> &raquo; HTML').striptags()\n'Marked up » HTML'\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Route Options and Methods\nDESCRIPTION: Example demonstrating how to customize a Flask route's HTTP methods and automatic OPTIONS handling. Shows setting method attributes and disabling automatic OPTIONS response generation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef index():\n    if request.method == 'OPTIONS':\n        # custom options handling here\n        ...\n    return 'Hello World!'\nindex.provide_automatic_options = False\nindex.methods = ['GET', 'OPTIONS']\n\napp.add_url_rule('/', index)\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Method Override Middleware in Python\nDESCRIPTION: This code defines a middleware class `HTTPMethodOverrideMiddleware` that enables the use of HTTP method overrides by intercepting requests and modifying the request method based on the `X-HTTP-Method-Override` header. It checks against allowed and bodyless methods and modifies the `CONTENT_LENGTH` accordingly.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/methodoverrides.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass HTTPMethodOverrideMiddleware(object):\n    allowed_methods = frozenset([\n        'GET',\n        'HEAD',\n        'POST',\n        'DELETE',\n        'PUT',\n        'PATCH',\n        'OPTIONS'\n    ])\n    bodyless_methods = frozenset(['GET', 'HEAD', 'OPTIONS', 'DELETE'])\n\n    def __init__(self, app):\n        self.app = app\n\n    def __call__(self, environ, start_response):\n        method = environ.get('HTTP_X_HTTP_METHOD_OVERRIDE', '').upper()\n        if method in self.allowed_methods:\n            environ['REQUEST_METHOD'] = method\n        if method in self.bodyless_methods:\n            environ['CONTENT_LENGTH'] = '0'\n        return self.app(environ, start_response)\n```\n\n----------------------------------------\n\nTITLE: Proper Extension Initialization in Flask Model\nDESCRIPTION: The recommended approach for initializing extensions where the extension object is created without binding to a specific app, allowing it to be used with multiple application instances.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndb = SQLAlchemy()\n```\n\n----------------------------------------\n\nTITLE: Basic Flask Decorator Route Example\nDESCRIPTION: Demonstrates the traditional Flask decorator-based routing approach with two route examples.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    pass\n\n@app.route('/user/<username>')\ndef user(username):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Static Files for Blueprints\nDESCRIPTION: Demonstrates how to expose a folder with static files in a blueprint by providing the static_folder parameter. This allows blueprints to serve their own static files.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nadmin = Blueprint('admin', __name__, static_folder='static')\n```\n\n----------------------------------------\n\nTITLE: Importing Database Module in Flask Application Factory\nDESCRIPTION: This code snippet shows how to import and initialize the database module within the Flask application factory function. It demonstrates the integration of the database setup with the main application.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef create_app():\n    app = ...\n    # existing code omitted\n\n    from . import db\n    db.init_app(app)\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Using stream_with_context as a Decorator in Flask\nDESCRIPTION: Example of using stream_with_context as a decorator for a generator function. This is an alternative syntax for maintaining request context while streaming data.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@stream_with_context\ndef generate():\n    ...\n\nreturn generate()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTTP Exception Classes in Flask\nDESCRIPTION: Example of defining a custom HTTP exception class (InsufficientStorage) with a non-standard HTTP code (507), registering a handler for it, and raising the exception.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass InsufficientStorage(werkzeug.exceptions.HTTPException):\n    code = 507\n    description = 'Not enough storage space.'\n\napp.register_error_handler(InsufficientStorage, handle_507)\n\nraise InsufficientStorage()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Internationalized Routes in Flask\nDESCRIPTION: This code demonstrates a basic Flask application with internationalized routes that manually handle language codes. Each route function must explicitly store the language code in the g object, showing the repetitive pattern that URL processors aim to solve.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, g\n\napp = Flask(__name__)\n\n@app.route('/<lang_code>/')\ndef index(lang_code):\n    g.lang_code = lang_code\n    ...\n\n@app.route('/<lang_code>/about')\ndef about(lang_code):\n    g.lang_code = lang_code\n    ...\n```\n\n----------------------------------------\n\nTITLE: Sending Form Data in Test Request\nDESCRIPTION: Shows how to send form data including file uploads using the test client. Demonstrates using pathlib to reference test resource files and posting form data with file attachments.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\n# get the resources folder in the tests folder\nresources = Path(__file__).parent / \"resources\"\n\ndef test_edit_user(client):\n    response = client.post(\"/user/2/edit\", data={\n        \"name\": \"Flask\",\n        \"theme\": \"dark\",\n        \"picture\": (resources / \"picture.png\").open(\"rb\"),\n    })\n    assert response.status_code == 200\n```\n\n----------------------------------------\n\nTITLE: Using database connection outside request context\nDESCRIPTION: Demonstrates how to use the database connection outside a request context by manually creating an application context. This is useful for scripts or shell interactions.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith app.app_context():\n    # now you can use get_db()\n```\n\n----------------------------------------\n\nTITLE: Rendering a Registration Form in a Template - HTML+Jinja2\nDESCRIPTION: This HTML+Jinja2 snippet demonstrates how to utilize a defined macro to render a registration form within a template. It illustrates integrating WTForms and Jinja2 for streamlined HTML generation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#2025-04-20_snippet_3\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% from \"_formhelpers.html\" import render_field %}\n<form method=post>\n  <dl>\n    {{ render_field(form.username) }}\n    {{ render_field(form.email) }}\n    {{ render_field(form.password) }}\n    {{ render_field(form.confirm) }}\n    {{ render_field(form.accept_tos) }}\n  </dl>\n  <p><input type=submit value=Register>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding App Context to Custom CLI Commands\nDESCRIPTION: This snippet illustrates the use of app context with custom commands in Flask using the `with_appcontext` decorator. It allows access to the application context parameters when executing commands.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport click\nfrom flask.cli import with_appcontext\n\n@click.command()\n@with_appcontext\ndef do_work():\n    ...\n\napp.cli.add_command(do_work)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Fixtures in Flask\nDESCRIPTION: Python code setting up test fixtures including app configuration, client setup, and CLI runner for testing.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport tempfile\n\nimport pytest\nfrom flaskr import create_app\nfrom flaskr.db import get_db, init_db\n\nwith open(os.path.join(os.path.dirname(__file__), 'data.sql'), 'rb') as f:\n    _data_sql = f.read().decode('utf8')\n\n\n@pytest.fixture\ndef app():\n    db_fd, db_path = tempfile.mkstemp()\n\n    app = create_app({\n        'TESTING': True,\n        'DATABASE': db_path,\n    })\n\n    with app.app_context():\n        init_db()\n        get_db().executescript(_data_sql)\n\n    yield app\n\n    os.close(db_fd)\n    os.unlink(db_path)\n\n\n@pytest.fixture\ndef client(app):\n    return app.test_client()\n\n\n@pytest.fixture\ndef runner(app):\n    return app.test_cli_runner()\n```\n\n----------------------------------------\n\nTITLE: Calling database initialization from shell\nDESCRIPTION: Shows how to initialize the database by calling the init_db function from a Python shell. This is typically done during application setup or testing.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from yourapplication import init_db\n>>> init_db()\n```\n\n----------------------------------------\n\nTITLE: Template Rendering Capture with Context Manager\nDESCRIPTION: This code snippet demonstrates how to create a context manager in Python to capture template rendering events in a Flask application. It uses the `template_rendered` signal to record the template and context whenever a template is rendered within the context. The `captured_templates` context manager connects to the `template_rendered` signal when entering the `with` statement and disconnects when exiting. It yields a list of (template, context) tuples.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from flask import template_rendered\nfrom contextlib import contextmanager\n\n@contextmanager\ndef captured_templates(app):\n    recorded = []\n    def record(sender, template, context, **extra):\n        recorded.append((template, context))\n    template_rendered.connect(record, app)\n    try:\n        yield recorded\n    finally:\n        template_rendered.disconnect(record, app)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask Application in Python\nDESCRIPTION: Defines the Flask application object and imports view modules in `__init__.py`, ensuring proper import order to avoid circular dependencies.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\napp = Flask(__name__)\n\nimport yourapplication.views\n```\n\n----------------------------------------\n\nTITLE: Adding Context Processors to Flask Templates\nDESCRIPTION: This snippet illustrates how to create a context processor to inject variables or functions into the Jinja2 template context. The example injects a user variable and a format_price function.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.context_processor\ndef inject_user():\n    return dict(user=g.user)\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.context_processor\n def utility_processor():\n    def format_price(amount, currency=\"€\"):\n        return f\"{amount:.2f}{currency}\"\n    return dict(format_price=format_price)\n```\n\n----------------------------------------\n\nTITLE: Adding data to HTML data attribute with Jinja\nDESCRIPTION: This Jinja template snippet shows how to add data to a `data-` attribute on an HTML tag using the `tojson` filter.  Single quotes must be used around the value to avoid invalid or unsafe HTML.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_2\n\nLANGUAGE: jinja\nCODE:\n```\n<div data-chart='{{ chart_data|tojson }}'></div>\n```\n\n----------------------------------------\n\nTITLE: Centralized URL Mapping Setup\nDESCRIPTION: Example of setting up Flask application with centralized URL mapping using add_url_rule.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom yourapplication import views\napp = Flask(__name__)\napp.add_url_rule('/', view_func=views.index)\napp.add_url_rule('/user/<username>', view_func=views.user)\n```\n\n----------------------------------------\n\nTITLE: WSGI Script for Flask Application Factory Pattern\nDESCRIPTION: Example of a WSGI script file that uses the Flask application factory pattern. This approach calls a function that creates and returns the Flask application instance.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom hello import create_app\n\napplication = create_app()\n```\n\n----------------------------------------\n\nTITLE: Running Flask Factory Applications with CLI\nDESCRIPTION: Command line examples showing how to run Flask applications that use the factory pattern, including how to pass arguments to the factory function.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ flask --app hello run\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ flask --app 'hello:create_app(local_auth=True)' run\n```\n\n----------------------------------------\n\nTITLE: Creating a Direct Favicon Serving Route in Flask\nDESCRIPTION: This snippet shows how to create a Flask route that directly serves the favicon file using send_from_directory. It includes the optional mimetype specification to avoid content-type guessing by the server.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/favicon.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom flask import send_from_directory\n\n@app.route('/favicon.ico')\ndef favicon():\n    return send_from_directory(os.path.join(app.root_path, 'static'),\n                               'favicon.ico', mimetype='image/vnd.microsoft.icon')\n```\n\n----------------------------------------\n\nTITLE: Cookie Setting in Flask\nDESCRIPTION: Demonstrates how to set cookies in a Flask response object.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import make_response\n\n@app.route('/')\ndef index():\n    resp = make_response(render_template(...))\n    resp.set_cookie('username', 'the username')\n    return resp\n```\n\n----------------------------------------\n\nTITLE: Adding Command Create-User with Flask CLI using Click\nDESCRIPTION: This snippet defines a Flask command named 'create-user', which takes an argument 'name' for creating a user. The command is integrated with Flask's CLI using the Click library, allowing for user creation through the command line.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport click\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.cli.command(\"create-user\")\n@click.argument(\"name\")\ndef create_user(name):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Filtering Flash Messages by Category\nDESCRIPTION: Shows how to filter and render flash messages of specific categories using the category_filter parameter.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#2025-04-20_snippet_3\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% with errors = get_flashed_messages(category_filter=[\"error\"]) %}\n{% if errors %}\n<div class=\"alert-message block-message error\">\n  <a class=\"close\" href=\"#\">×</a>\n  <ul>\n    {%- for msg in errors %}\n    <li>{{ msg }}</li>\n    {% endfor -%}\n  </ul>\n</div>\n{% endif %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Autoescaping in Jinja2 Templates\nDESCRIPTION: This snippet demonstrates how to disable autoescaping in Jinja2 templates by using a specific block. It highlights the need for caution with variables.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#2025-04-20_snippet_0\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% autoescape false %}\n        <p>autoescaping is disabled here\n        <p>{{ will_not_be_escaped }}\n    {% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Click Scripts for Flask Applications\nDESCRIPTION: This snippet outlines how to create a custom Click script for a Flask application to manage commands without using the built-in Flask command loader. It illustrates the setup for a management script via an entry point.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport click\nfrom flask import Flask\nfrom flask.cli import FlaskGroup\n\ndef create_app():\n    app = Flask('wiki')\n    # other setup\n    return app\n\n@click.group(cls=FlaskGroup, create_app=create_app)\ndef cli():\n    \"\"\"Management script for the Wiki application.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Blog Post in Flask\nDESCRIPTION: This snippet updates a post object based on form input. It requires a logged-in user, confirmed by the 'login_required' decorator, and uses a function 'get_post' to retrieve and validate post ownership. It commits changes to the database and redirects to the index page if successful.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@bp.route('/<int:id>/update', methods=('GET', 'POST'))\n@login_required\ndef update(id):\n    post = get_post(id)\n\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'UPDATE post SET title = ?, body = ?'\n                ' WHERE id = ?',\n                (title, body, id)\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/update.html', post=post)\n\n```\n\n----------------------------------------\n\nTITLE: Registering CLI Commands with Flask Blueprints\nDESCRIPTION: This snippet shows how to register CLI commands with Flask Blueprints, which allows related commands to be grouped under the blueprint's name. This helps to cleanly organize commands in larger applications.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Blueprint\n\nbp = Blueprint('students', __name__)\n\n@bp.cli.command('create')\n@click.argument('name')\ndef create(name):\n    ...\n\napp.register_blueprint(bp)\n```\n\n----------------------------------------\n\nTITLE: Running Flask App with Gevent WSGIServer\nDESCRIPTION: This Python code snippet demonstrates how to serve a Flask application using Gevent's WSGIServer. It imports the WSGIServer from gevent.pywsgi, creates a Flask app instance using a factory function, and then starts the server, listening on the specified host and port.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gevent.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom gevent.pywsgi import WSGIServer\nfrom hello import create_app\n\napp = create_app()\nhttp_server = WSGIServer((\"127.0.0.1\", 8000), app)\nhttp_server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask Application\nDESCRIPTION: This code snippet demonstrates how to initialize a basic Flask application. It imports the Flask class, creates an instance of it, configures a secret key, loads configurations from environment variables, and defines a simple route that returns \"Hello, World!\".\nSOURCE: https://github.com/pallets/flask/blob/main/docs/lifecycle.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config.from_mapping(\n    SECRET_KEY=\"dev\",\n)\napp.config.from_prefixed_env()\n\n@app.route(\"/\")\ndef index():\n    return \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Testing Template Rendering\nDESCRIPTION: This code snippet shows how to use the `captured_templates` context manager created in the previous snippet to test template rendering in a Flask application. It uses the `app.test_client()` to make a request and asserts that the correct template was rendered with the expected context.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"with captured_templates(app) as templates:\n    rv = app.test_client().get('/')\n    assert rv.status_code == 200\n    assert len(templates) == 1\n    template, context = templates[0]\n    assert template.name == 'index.html'\n    assert len(context['items']) == 10\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Loggers Separately in Flask\nDESCRIPTION: This snippet demonstrates how to configure multiple loggers separately by iterating through a list of loggers and adding handlers to each. This allows you to control the logging behavior of specific components of your application, e.g., app logger, sqlalchemy logger, other package logger. Dependencies: logging.getLogger, flask.logging.default_handler, Flask.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n \"for logger in (\n        logging.getLogger(app.name),\n        logging.getLogger('sqlalchemy'),\n        logging.getLogger('other_package'),\n    ):\n        logger.addHandler(default_handler)\n        logger.addHandler(mail_handler)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Blueprint Resource Folder\nDESCRIPTION: Shows how to access resources from a blueprint's folder using the open_resource method, which is useful for reading files within the blueprint's directory.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nwith simple_page.open_resource('static/style.css') as f:\n    code = f.read()\n```\n\n----------------------------------------\n\nTITLE: Flask API Endpoint Example\nDESCRIPTION: This Flask route example demonstrates how to use the `generate_checksum` function within a Flask view function to calculate the checksum of the request data before accessing it. It calculates the checksum, then retrieves `request.files` to parse the input stream, and finally retrieves the hex digest representation of the calculated checksum.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/requestchecksum.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/special-api', methods=['POST'])\ndef special_api():\n    hash = generate_checksum(request)\n    # Accessing this parses the input stream\n    files = request.files\n    # At this point the hash is fully constructed.\n    checksum = hash.hexdigest()\n    return f\"Hash was: {checksum}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Template Macro for WTForms Fields - HTML+Jinja2\nDESCRIPTION: This HTML+Jinja2 snippet defines a macro to render form fields using WTForms within a template. It includes error handling and supports passing HTML attributes via keyword arguments. Prerequisite: Jinja2 and WTForms integration.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#2025-04-20_snippet_2\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% macro render_field(field) %}\n  <dt>{{ field.label }}\n  <dd>{{ field(**kwargs)|safe }}\n  {% if field.errors %}\n    <ul class=errors>\n    {% for error in field.errors %}\n      <li>{{ error }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n  </dd>\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Adding Handlers to Root Logger in Flask\nDESCRIPTION: This snippet demonstrates how to add handlers to the root logger, allowing you to see messages from other libraries that use logging extensively. This is useful for capturing logs from dependencies.  Dependencies: flask.logging.default_handler, logging.getLogger, Flask.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n \"from flask.logging import default_handler\n\n    root = logging.getLogger()\n    root.addHandler(default_handler)\n    root.addHandler(mail_handler)\"\n```\n\n----------------------------------------\n\nTITLE: Sending a Signal\nDESCRIPTION: This code demonstrates how to send or emit a signal using the `send()` method of a `Signal` object.  The first argument should be the sender, and keyword arguments are passed to the signal subscribers. Here the `model_saved` signal is sent from within the `save` method of the `Model` class, passing `self` as the sender.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"class Model(object):\n    ...\n\n    def save(self):\n        model_saved.send(self)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Posts with an Index View in Flask\nDESCRIPTION: This function defines the index view for displaying posts, which fetches and orders posts by creation date using an SQL query. It requires 'get_db()' to interface with the database and returns a rendered HTML template with the query results.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@bp.route('/')\ndef index():\n    db = get_db()\n    posts = db.execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' ORDER BY created DESC'\n    ).fetchall()\n    return render_template('blog/index.html', posts=posts)\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Template Rendering Logger with Flask Signals\nDESCRIPTION: Example of using Flask's template_rendered signal to log template renderings. This subscriber function will be called whenever a template is rendered, providing access to the template instance and context dictionary.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef log_template_renders(sender, template, context, **extra):\n    sender.logger.debug('Rendering template \"%s\" with context %s',\n                        template.name or 'string template',\n                        context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication Test Fixtures\nDESCRIPTION: Authentication helper class and fixture for testing login functionality.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass AuthActions(object):\n    def __init__(self, client):\n        self._client = client\n\n    def login(self, username='test', password='test'):\n        return self._client.post(\n            '/auth/login',\n            data={'username': username, 'password': password}\n        )\n\n    def logout(self):\n        return self._client.get('/auth/logout')\n\n\n@pytest.fixture\ndef auth(client):\n    return AuthActions(client)\n```\n\n----------------------------------------\n\nTITLE: Mapping Documents with MongoEngine\nDESCRIPTION: This snippet shows how to define a MongoEngine document by inheriting from Document and specifying fields with types and constraints. Dependencies include the mongoengine module.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport mongoengine as me\n\nclass Movie(me.Document):\n    title = me.StringField(required=True)\n    year = me.IntField()\n    rated = me.StringField()\n    director = me.StringField()\n    actors = me.ListField()\n```\n\n----------------------------------------\n\nTITLE: Processing and Shutting Down Requests in Flask Shell - Python\nDESCRIPTION: Demonstrates how to manually trigger Flask's response-processing and teardown mechanisms. This involves processing a dummy response object with process_response and ensures that teardown_request functions are called when the context is popped.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/shell.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> app.process_response(app.response_class())\n<Response 0 bytes [200 OK]>\n>>> ctx.pop()\n```\n\n----------------------------------------\n\nTITLE: Applying the Login Required Decorator to a Flask Route\nDESCRIPTION: An example showing how to apply the login_required decorator to a Flask route. The decorator is applied as the innermost decorator, with the route decorator as the outermost.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/secret_page')\n@login_required\ndef secret_page():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Flask Debug Mode\nDESCRIPTION: This snippet demonstrates how to enable debug mode in Flask using the `--debug` option. Debug mode provides automatic reloading on code changes and an interactive debugger in the browser if an error occurs during a request. This should only be used for development purposes.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app hello run --debug\n * Serving Flask app 'hello'\n * Debug mode: on\n * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: nnn-nnn-nnn\n```\n\n----------------------------------------\n\nTITLE: Flashing Messages with Categories\nDESCRIPTION: Demonstrates how to flash messages with custom categories and render them with different styling or handling in templates.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nflash('Invalid password provided', 'error')\n```\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% with messages = get_flashed_messages(with_categories=true) %}\n  {% if messages %}\n    <ul class=flashes>\n    {% for category, message in messages %}\n      <li class=\"{{ category }}\">{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Handling URL Variables in Class-based Views in Flask\nDESCRIPTION: This example demonstrates how to handle URL variables in a class-based view. The variables are passed as arguments to the dispatch_request method.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass DetailView(View):\n    def __init__(self, model):\n        self.model = model\n        self.template = f\"{model.__name__.lower()}/detail.html\"\n\n    def dispatch_request(self, id):\n        item = self.model.query.get_or_404(id)\n        return render_template(self.template, item=item)\n\napp.add_url_rule(\n    \"/users/<int:id>\",\n    view_func=DetailView.as_view(\"user_detail\", User)\n)\n```\n\n----------------------------------------\n\nTITLE: Teardown Callbacks Example in Flask\nDESCRIPTION: This snippet demonstrates how to define a route and a teardown callback that executes after a request is processed. It highlights the context management in Flask and how teardown functions are called after the request context ends.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/reqcontext.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    print('during view')\n    return 'Hello, World!'\n\n@app.teardown_request\ndef show_teardown(exception):\n    print('after with block')\n\nwith app.test_request_context():\n    print('during with block')\n\n# teardown functions are called after the context with block exits\n\nwith app.test_client() as client:\n    client.get('/')\n    # the contexts are not popped even though the request ended\n    print(request.path)\n\n# the contexts are popped and teardown functions are called after\n# the client with block exits\n```\n\n----------------------------------------\n\nTITLE: Initializing Celery in Factory Pattern\nDESCRIPTION: This code in Python shows how to create a module that instantiates the Flask and Celery apps using the Flask factory pattern, to be used when starting Celery commands.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom example import create_app\n\nflask_app = create_app()\ncelery_app = flask_app.extensions[\"celery\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a LocalProxy for Flask Database Connection\nDESCRIPTION: Shows how to use Werkzeug's LocalProxy to create a context-local proxy for the database connection. This allows direct access to the db variable which will internally call get_db() when accessed.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.local import LocalProxy\ndb = LocalProxy(get_db)\n```\n\n----------------------------------------\n\nTITLE: Binding Gunicorn to External IPs\nDESCRIPTION: Command to bind Gunicorn to all external IPs on a non-privileged port using the -b flag. This allows the server to accept connections from any network interface, not just localhost.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ gunicorn -w 4 -b 0.0.0.0 'hello:create_app()'\nListening at: http://0.0.0.0:8000 (x)\n```\n\n----------------------------------------\n\nTITLE: Referencing Static Files in Jinja2 Templates\nDESCRIPTION: This snippet demonstrates how to generate the URL for a static file within a Jinja2 template using the `url_for` function. This function is provided by Flask and simplifies the process of creating correct URLs for static assets.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/static.rst#2025-04-20_snippet_0\n\nLANGUAGE: html+jinja\nCODE:\n```\n\n    {{ url_for('static', filename='style.css') }}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Database Operations\nDESCRIPTION: Tests for database operations including connection management and initialization commands.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\n\nimport pytest\nfrom flaskr.db import get_db\n\n\ndef test_get_close_db(app):\n    with app.app_context():\n        db = get_db()\n        assert db is get_db()\n\n    with pytest.raises(sqlite3.ProgrammingError) as e:\n        db.execute('SELECT 1')\n\n    assert 'closed' in str(e.value)\n\ndef test_init_db_command(runner, monkeypatch):\n    class Recorder(object):\n        called = False\n\n    def fake_init_db():\n        Recorder.called = True\n\n    monkeypatch.setattr('flaskr.db.init_db', fake_init_db)\n    result = runner.invoke(args=['init-db'])\n    assert 'Initialized' in result.output\n    assert Recorder.called\n```\n\n----------------------------------------\n\nTITLE: Testing CLI Commands with FlaskCliRunner\nDESCRIPTION: Shows how to test custom Flask CLI commands using the test CLI runner. Demonstrates invoking commands with and without arguments and asserting command output.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@app.cli.command(\"hello\")\n@click.option(\"--name\", default=\"World\")\ndef hello_command(name):\n    click.echo(f\"Hello, {name}!\")\n\ndef test_hello_command(runner):\n    result = runner.invoke(args=\"hello\")\n    assert \"World\" in result.output\n\n    result = runner.invoke(args=[\"hello\", \"--name\", \"Flask\"])\n    assert \"Flask\" in result.output\n```\n\n----------------------------------------\n\nTITLE: Generate Checksum\nDESCRIPTION: This function `generate_checksum` takes a Flask request object, retrieves the WSGI input stream, wraps it with the `ChecksumCalcStream`, and updates the WSGI environment with the wrapped stream. It returns the hashlib object which has the checksum data.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/requestchecksum.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef generate_checksum(request):\n    env = request.environ\n    stream = ChecksumCalcStream(env['wsgi.input'])\n    env['wsgi.input'] = stream\n    return stream._hash\n```\n\n----------------------------------------\n\nTITLE: Nesting Blueprints in Flask\nDESCRIPTION: Shows how to register one blueprint on another blueprint, creating a hierarchy. The child blueprint inherits URL prefixes and naming from the parent.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nparent = Blueprint('parent', __name__, url_prefix='/parent')\nchild = Blueprint('child', __name__, url_prefix='/child')\nparent.register_blueprint(child)\napp.register_blueprint(parent)\n```\n\n----------------------------------------\n\nTITLE: Generating and Configuring a Random Secret Key in Python\nDESCRIPTION: Explains how to generate a random secret key using Python's `secrets` module and save it in a `config.py` file for securing a Flask application. Requires Python to be installed. Input: none; Output: random secret key string.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n$ python -c 'import secrets; print(secrets.token_hex())'\n\n'192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n```\n\n----------------------------------------\n\nTITLE: Response Modification in Flask\nDESCRIPTION: Shows how to modify response objects using make_response function.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import make_response\n\n@app.errorhandler(404)\ndef not_found(error):\n    resp = make_response(render_template('error.html'), 404)\n    resp.headers['X-Something'] = 'A value'\n    return resp\n```\n\n----------------------------------------\n\nTITLE: Creating Test Request Context and Manual Preprocessing in Flask Python\nDESCRIPTION: This code snippet demonstrates how to create a test request context for a Flask application, manually call the preprocessing function, and perform assertions. It simulates a request to edit a user with an authentication token.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef test_auth_token(app):\n    with app.test_request_context(\"/user/2/edit\", headers={\"X-Auth-Token\": \"1\"}):\n        app.preprocess_request()\n        assert g.user.name == \"Flask\"\n```\n\n----------------------------------------\n\nTITLE: Creating Flask Application Instance - Python\nDESCRIPTION: This code snippet demonstrates how to create an instance of the Flask application class. The instance is essential for defining routes and handling requests in the Flask web application.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/design.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Registering Blueprint in Flask Application Factory\nDESCRIPTION: Demonstrates how to register the authentication blueprint within the Flask application factory function.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef create_app():\n    app = ...\n    # existing code omitted\n\n    from . import auth\n    app.register_blueprint(auth.bp)\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering Blog Blueprint in Flask\nDESCRIPTION: This snippet shows how to define a blog blueprint using Flask's Blueprint class, and then register it within the application's factory function. Necessary imports include 'Blueprint' from 'flask' and custom modules 'auth' and 'db'. The blueprint is associated with root URL endpoints using 'app.add_url_rule'.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, url_for\n)\nfrom werkzeug.exceptions import abort\n\nfrom flaskr.auth import login_required\nfrom flaskr.db import get_db\n\nbp = Blueprint('blog', __name__)\n\n```\n\nLANGUAGE: python\nCODE:\n```\ndef create_app():\n    app = ...\n    # existing code omitted\n\n    from . import blog\n    app.register_blueprint(blog.bp)\n    app.add_url_rule('/', endpoint='index')\n\n    return app\n\n```\n\n----------------------------------------\n\nTITLE: Running Flask Application in Debug Mode\nDESCRIPTION: This command runs the Flask application located in the 'flaskr' directory in debug mode, providing an interactive debugger and auto-reloading when code changes.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/factory.rst#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app flaskr run --debug\n```\n\n----------------------------------------\n\nTITLE: Adding Favicon Link in HTML Templates with Jinja2\nDESCRIPTION: This snippet shows how to add a shortcut icon link in an HTML template using Jinja2 templating with Flask's url_for helper to reference the favicon stored in the static directory.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/favicon.rst#2025-04-20_snippet_0\n\nLANGUAGE: html+jinja\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Expiration in Flask\nDESCRIPTION: This snippet demonstrates how to set a cookie with an expiration time of 10 minutes using the max_age parameter in Flask.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# cookie expires after 10 minutes\nresponse.set_cookie('snakes', '3', max_age=600)\n```\n\n----------------------------------------\n\nTITLE: Following HTTP Redirects in Tests\nDESCRIPTION: Shows how to test redirect behavior by using follow_redirects parameter in test client requests. Demonstrates checking redirect history and final request path.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_logout_redirect(client):\n    response = client.get(\"/logout\", follow_redirects=True)\n    # Check that there was one redirect response.\n    assert len(response.history) == 1\n    # Check that the second request was to the index page.\n    assert response.request.path == \"/index\"\n```\n\n----------------------------------------\n\nTITLE: Defining Project Metadata with pyproject.toml\nDESCRIPTION: Sets up project metadata and dependencies for a Flask application using a `pyproject.toml` file, necessary for building and installing the application. Key dependencies include Flask and flit_core for the build system.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"yourapplication\"\ndependencies = [\n    \"flask\",\n]\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n```\n\n----------------------------------------\n\nTITLE: Flask URL Building Output\nDESCRIPTION: This snippet shows the output of using `url_for` function in Flask to build URLs to specific functions. It includes examples with and without variable arguments and query parameters. It demonstrates how Flask handles escaping special characters.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n/\n/login\n/login?next=/\n/user/John%20Doe\n```\n\n----------------------------------------\n\nTITLE: LazyView Implementation\nDESCRIPTION: Implementation of LazyView class that enables lazy loading of view functions on first use.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.utils import import_string, cached_property\n\nclass LazyView(object):\n\n    def __init__(self, import_name):\n        self.__module__, self.__name__ = import_name.rsplit('.', 1)\n        self.import_name = import_name\n\n    @cached_property\n    def view(self):\n        return import_string(self.import_name)\n\n    def __call__(self, *args, **kwargs):\n        return self.view(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Setting Flask Command Options with Environment Variables\nDESCRIPTION: Shows how to set Flask command options using environment variables in different shells (Bash, Fish, CMD, and Powershell). The example sets the port for the development server to 8000.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export FLASK_RUN_PORT=8000\n$ flask run\n * Running on http://127.0.0.1:8000/\n```\n\nLANGUAGE: fish\nCODE:\n```\n$ set -x FLASK_RUN_PORT 8000\n$ flask run\n * Running on http://127.0.0.1:8000/\n```\n\nLANGUAGE: cmd\nCODE:\n```\n> set FLASK_RUN_PORT=8000\n> flask run\n * Running on http://127.0.0.1:8000/\n```\n\nLANGUAGE: powershell\nCODE:\n```\n> $env:FLASK_RUN_PORT = 8000\n> flask run\n * Running on http://127.0.0.1:8000/\n```\n\n----------------------------------------\n\nTITLE: Cookie Reading in Flask\nDESCRIPTION: Example of reading cookies from a request using Flask's request.cookies dictionary.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request\n\n@app.route('/')\ndef index():\n    username = request.cookies.get('username')\n    # use cookies.get(key) instead of cookies[key] to not get a\n    # KeyError if the cookie is missing.\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry with Flask Application\nDESCRIPTION: Code to initialize Sentry SDK in a Flask application. The DSN value needs to be replaced with the actual DSN from your Sentry installation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sentry_sdk\nfrom sentry_sdk.integrations.flask import FlaskIntegration\n\nsentry_sdk.init('YOUR_DSN_HERE', integrations=[FlaskIntegration()])\n```\n\n----------------------------------------\n\nTITLE: Configuring Permanent Session Lifetime in Flask\nDESCRIPTION: This code shows how to configure the PERMANENT_SESSION_LIFETIME in Flask to set the expiration time for permanent sessions, which can help mitigate replay attacks.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napp.config.update(\n    PERMANENT_SESSION_LIFETIME=600\n)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    ...\n    session.clear()\n    session['user_id'] = user.id\n    session.permanent = True\n    ...\n```\n\n----------------------------------------\n\nTITLE: Nesting Blueprints with Subdomains\nDESCRIPTION: Shows how subdomains are handled with nested blueprints. Child blueprints gain their parent's subdomain as a prefix to their own subdomain.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nparent = Blueprint('parent', __name__, subdomain='parent')\nchild = Blueprint('child', __name__, subdomain='child')\nparent.register_blueprint(child)\napp.register_blueprint(parent)\n\nurl_for('parent.child.create', _external=True)\n\"child.parent.domain.tld\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as a Reverse Proxy for Flask WSGI Application\nDESCRIPTION: This configuration sets up Nginx to forward requests to a WSGI server running locally. It includes essential proxy headers that maintain information about the original request, which is needed by the Flask application.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/nginx.rst#2025-04-20_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name _;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000/;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Prefix /;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment\nDESCRIPTION: This code snippet demonstrates how to create a Python virtual environment, activate it, install the necessary dependencies using pip, and then install the current project in editable mode. This ensures a clean environment for running the Flask application and Celery worker.\nSOURCE: https://github.com/pallets/flask/blob/main/examples/celery/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 -m venv .venv\n$ . ./.venv/bin/activate\n$ pip install -r requirements.txt && pip install -e .\n$ celery -A make_celery worker --loglevel INFO\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates as Streams with Flask\nDESCRIPTION: This code demonstrates how to use Flask's built-in streaming functionality to render a template piece by piece, which can optimize loading performance.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import stream_template\n\n@app.get(\"/timeline\")\ndef timeline():\n    return stream_template(\"timeline.html\")\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment and Running Flask Development Server\nDESCRIPTION: This shell script activates the virtual environment created previously and then starts the Flask development server in debug mode.  The `flask -A task_app run --debug` command tells Flask to run the `task_app` application, enabling debugging features.\nSOURCE: https://github.com/pallets/flask/blob/main/examples/celery/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ . ./.venv/bin/activate\n$ flask -A task_app run --debug\n```\n\n----------------------------------------\n\nTITLE: Proper Extension Registration in Flask Factory\nDESCRIPTION: The correct way to register extensions in a factory function by importing the extension instance and calling its init_app method with the application instance.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    from yourapplication.model import db\n    db.init_app(app)\n\n```\n\n----------------------------------------\n\nTITLE: Testing Flask Factory Configuration\nDESCRIPTION: Tests for the Flask application factory, including configuration testing and basic route testing.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flaskr import create_app\n\n\ndef test_config():\n    assert not create_app().testing\n    assert create_app({'TESTING': True}).testing\n\n\ndef test_hello(client):\n    response = client.get('/hello')\n    assert response.data == b'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Creating a Signal within Namespace\nDESCRIPTION: This code demonstrates how to create a new signal within a custom namespace. It uses the `signal()` method of the `Namespace` object to create a named signal. The signal name should be unique and descriptive.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"model_saved = my_signals.signal('model-saved')\"\n```\n\n----------------------------------------\n\nTITLE: Binding mod_wsgi to Privileged Ports with User/Group Configuration\nDESCRIPTION: Command to run mod_wsgi as root to bind to port 80, while configuring worker processes to run as a non-privileged user. This setup ensures the application runs securely while still being able to use standard HTTP ports.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ sudo /home/hello/.venv/bin/mod_wsgi-express start-server \\\n    /home/hello/wsgi.py \\\n    --user hello --group hello --port 80 --processes 4\n```\n\n----------------------------------------\n\nTITLE: Adding Grouped Command User Create with Flask CLI using Click\nDESCRIPTION: This snippet demonstrates adding a command called 'create' under a 'user' group in Flask's CLI. It allows organization of multiple commands related to user management under a single command group.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport click\nfrom flask import Flask\nfrom flask.cli import AppGroup\n\napp = Flask(__name__)\nuser_cli = AppGroup('user')\n\n@user_cli.command('create')\n@click.argument('name')\ndef create_user(name):\n    ...\n\napp.cli.add_command(user_cli)\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn for Flask Applications\nDESCRIPTION: Steps to create a virtual environment and install both a Flask application and Gunicorn. This process creates an isolated environment for your dependencies and installs Gunicorn which doesn't require external dependencies.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install gunicorn\n```\n\n----------------------------------------\n\nTITLE: Streaming Templates in Flask\nDESCRIPTION: Example of using Flask's stream_template function to render a Jinja2 template piece by piece, returning an iterator of strings to the client without loading the entire rendered template in memory.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import stream_template\n\n@app.get(\"/timeline\")\ndef timeline():\n    return stream_template(\"timeline.html\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Shared Task with Celery\nDESCRIPTION: The Python code snippet shows how to define a shared task with Celery using the @shared_task decorator. The task adds two numbers and returns the result, with the option to ignore the result set to False.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom celery import shared_task\n\n@shared_task(ignore_result=False)\ndef add_together(a: int, b: int) -> int:\n    return a + b\n```\n\n----------------------------------------\n\nTITLE: Custom 404 Error Handler Registration with App Factory\nDESCRIPTION: Demonstrates how to register a custom 404 error handler in a Flask app using the app factory pattern, where the 'page_not_found' function is explicitly linked to 404 errors during app creation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, render_template\n\ndef page_not_found(e):\n  return render_template('404.html'), 404\n\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.register_error_handler(404, page_not_found)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Signal Namespace\nDESCRIPTION: This code shows how to create a namespace for custom signals using the Blinker library. It imports the `Namespace` class from `blinker` and instantiates it. This namespace will be used to create named signals within the application.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"from blinker import Namespace\nmy_signals = Namespace()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Route Decorators for HTTP Methods\nDESCRIPTION: Introduces shortcut route decorators for common HTTP methods, simplifying route definitions by providing concise method-specific decorators\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.post(\"/login\")\n```\n\n----------------------------------------\n\nTITLE: Running uWSGI with Flask Application\nDESCRIPTION: Command to run uWSGI with a Flask application. It starts an HTTP server on localhost:8000 with 4 worker processes.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w hello:app\n```\n\n----------------------------------------\n\nTITLE: Running Flask Shell for Interactive Exploration\nDESCRIPTION: Demonstrates how to start an interactive Python shell with the Flask application context active, allowing for data exploration and debugging.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flask shell\nPython 3.10.0 (default, Oct 27 2021, 06:59:51) [GCC 11.1.0] on linux\nApp: example [production]\nInstance: /home/david/Projects/pallets/flask/instance\n>>>\n```\n\n----------------------------------------\n\nTITLE: Installing Gevent\nDESCRIPTION: This snippet demonstrates how to install Gevent using pip after creating and activating a virtual environment, along with installing your application's dependencies. This setup ensures a clean environment for your project and its dependencies.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gevent.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install gevent\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Template Example with Conditional Rendering\nDESCRIPTION: A basic Jinja2 template showing conditional content rendering based on provided variables. This example demonstrates the use of Jinja2's template syntax for conditional blocks and variable interpolation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_13\n\nLANGUAGE: html+jinja\nCODE:\n```\n<!doctype html>\n<title>Hello from Flask</title>\n{% if person %}\n  <h1>Hello {{ person }}!</h1>\n{% else %}\n  <h1>Hello, World!</h1>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: HTML Template for 404 Page Not Found\nDESCRIPTION: An HTML template designed for rendering a 'Page Not Found' error, extending from a base layout template. It includes a title block and a body block with user navigation options.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_9\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% extends \"layout.html\" %}\n{% block title %}Page Not Found{% endblock %}\n{% block body %}\n  <h1>Page Not Found</h1>\n  <p>What you were looking for is just not there.\n  <p><a href=\"{{ url_for('index') }}\">go somewhere nice</a>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Replacing Content with HTML from Fetch\nDESCRIPTION: This code shows how to replace the content of a div element with HTML retrieved from a fetch request. It uses the response.text() method to extract the HTML and sets the innerHTML of the div.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"geology-fact\">\n    {{ include \"geology_fact.html\" }}\n</div>\n<script>\n    const geology_url = {{ url_for(\"geology_fact\")|tojson }}\n    const geology_div = getElementById(\"geology-fact\")\n    fetch(geology_url)\n        .then(response => response.text)\n        .then(text => geology_div.innerHTML = text)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Alternative Template Capture with Context Manager\nDESCRIPTION: This is an alternative approach to capture templates using `connected_to` context manager from blinker.  It subscribes a function to a signal with a context manager. The `captured_templates` function connects to the `template_rendered` signal for the duration of the `with` statement.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from flask import template_rendered\n\ndef captured_templates(app, recorded, **extra):\n    def record(sender, template, context):\n        recorded.append((template, context))\n    return template_rendered.connected_to(record, app)\"\n```\n\n----------------------------------------\n\nTITLE: Example of Flask URL Prefix Nesting\nDESCRIPTION: Demonstrates the new feature of nesting blueprints with URL prefixes, allowing more complex and hierarchical routing configurations\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nblueprint.register_blueprint(nested_blueprint, url_prefix=\"/admin\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Favicon Redirect Route in Flask\nDESCRIPTION: This snippet demonstrates how to set up a URL rule that redirects requests for /favicon.ico to the static file location. This approach helps support older browsers that look for the favicon at the root path.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/favicon.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.add_url_rule(\n    \"/favicon.ico\",\n    endpoint=\"favicon\",\n    redirect_to=url_for(\"static\", filename=\"favicon.ico\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring pytest and Coverage Settings in pyproject.toml\nDESCRIPTION: Configuration for pytest and coverage tools in pyproject.toml, specifying test directories and coverage measurement settings for a Flask application.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\n\n[tool.coverage.run]\nbranch = true\nsource = [\"flaskr\"]\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Wheel File with Python and Pip\nDESCRIPTION: Demonstrates how to use Python's build tool to create a `.whl` distribution file for the Flask application and how to install it using pip. Requires the 'build' package and pip to be installed. Input: command-line commands; Output: wheel file in `dist` folder.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n$ pip install build\n$ python -m build --wheel\n```\n\nLANGUAGE: none\nCODE:\n```\n$ pip install flaskr-1.0.0-py3-none-any.whl\n```\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app flaskr init-db\n```\n\n----------------------------------------\n\nTITLE: Using database connection in a Flask route\nDESCRIPTION: Shows how to use the database connection within a Flask route handler. This pattern accesses the database connection in a request context.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/')\ndef index():\n    cur = get_db().cursor()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Identifying Port Usage with lsof (macOS / Linux)\nDESCRIPTION: This snippet illustrates how to check which process is using a specific port (e.g., 5000) on macOS or Linux using the `lsof` command. It requires `lsof` to be installed and shows the pid listening on the port, which can then be stopped if necessary.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ lsof -P -i :5000\nPython 6847 IPv4 TCP localhost:5000 (LISTEN)\n```\n\n----------------------------------------\n\nTITLE: Running Flask Development Server with CLI\nDESCRIPTION: This snippet shows how to start a Flask development server from the command line using the `flask run` command. The command includes options to specify the application module using `--app` and to enable debug mode with `--debug`. This starts the server on http://localhost:5000/ and includes an interactive debugger and reloader. It requires Flask to be installed and assumes `hello` is the name of the application module.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app hello run --debug\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filters in Jinja2\nDESCRIPTION: This example shows two methods to register a custom filter in Jinja2: using a decorator and directly modifying the jinja_env filters. The filter reverses a string.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.template_filter('reverse')\ndef reverse_filter(s):\n    return s[::-1]\n```\n\nLANGUAGE: python\nCODE:\n```\ndef reverse_filter(s):\n    return s[::-1]\napp.jinja_env.filters['reverse'] = reverse_filter\n```\n\n----------------------------------------\n\nTITLE: Safely Joining Paths in Flask\nDESCRIPTION: Using safe_join to securely join path components to prevent directory traversal attacks when constructing file paths.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsafe_join\n```\n\n----------------------------------------\n\nTITLE: Render Index Template with Jinja\nDESCRIPTION: This template extends a base HTML template to render a list of posts. It includes functionality for logged-in users to create new posts and edit their own posts, with links generated by 'url_for'.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_2\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Posts{% endblock %}</h1>\n  {% if g.user %}\n    <a class=\"action\" href=\"{{ url_for('blog.create') }}\">New</a>\n  {% endif %}\n{% endblock %}\n\n{% block content %}\n  {% for post in posts %}\n    <article class=\"post\">\n      <header>\n        <div>\n          <h1>{{ post['title'] }}</h1>\n          <div class=\"about\">by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}</div>\n        </div>\n        {% if g.user['id'] == post['author_id'] %}\n          <a class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\">Edit</a>\n        {% endif %}\n      </header>\n      <p class=\"body\">{{ post['body'] }}</p>\n    </article>\n    {% if not loop.last %}\n      <hr>\n    {% endif %}\n  {% endfor %}\n{% endblock %}\n\n```\n\n----------------------------------------\n\nTITLE: Describing Flask Project with pyproject.toml\nDESCRIPTION: This TOML configuration file defines the project metadata, including name, version, description, and dependencies.  It also specifies the build system to use `flit_core` for building the project.  The `dependencies` array lists the project's runtime dependencies which will be installed along with the project.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/install.rst#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n\n[project]\nname = \"flaskr\"\nversion = \"1.0.0\"\ndescription = \"The basic blog app built in the Flask tutorial.\"\ndependencies = [\n    \"flask\",\n]\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Environment (macOS/Linux)\nDESCRIPTION: This command creates a virtual environment named '.venv' within the current directory (myproject).  The 'python3 -m venv' command uses the venv module to set up an isolated environment for Python packages, ensuring that project dependencies are managed separately from the system-wide Python installation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n$ python3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Integrating Flask Extensions with Views and Models\nDESCRIPTION: This code illustrates how to integrate a Flask extension with views and models, particularly when dealing with dependencies like Flask-SQLAlchemy. It demonstrates a method of creating the model within the extension and then passing the model to the view class's `as_view` method.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass PostAPI(MethodView):\n    def __init__(self, model):\n        self.model = model\n\n    def get(self, id):\n        post = self.model.query.get(id)\n        return jsonify(post.to_json())\n\nclass BlogExtension:\n    def __init__(self, db):\n        class Post(db.Model):\n            id = db.Column(primary_key=True)\n            title = db.Column(db.String, nullable=False)\n\n        self.post_model = Post\n\n    def init_app(self, app):\n        api_view = PostAPI.as_view(model=self.post_model)\n\ndb = SQLAlchemy()\nblog = BlogExtension(db)\ndb.init_app(app)\nblog.init_app(app)\n```\n\n----------------------------------------\n\nTITLE: Starting Flask Server in Python Script\nDESCRIPTION: This Python snippet shows how to start a Flask development server from within a Python script using the `Flask.run` method. It demonstrates enabling debug mode by passing `debug=True` as an argument, which provides an interactive debugging environment. This method is typically placed inside the `main` block to prevent interference with production server imports.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Using an Endpoint Decorator with Werkzeug Routing in Flask\nDESCRIPTION: An example showing how to use the endpoint decorator to map a Werkzeug routing endpoint to a view function. This provides more flexibility in routing compared to the standard Flask route decorator.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom werkzeug.routing import Rule\n\napp = Flask(__name__)\napp.url_map.add(Rule('/', endpoint='index'))\n\n@app.endpoint('index')\ndef my_index():\n    return \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Key in Flask Configuration File\nDESCRIPTION: Describes updating the `config.py` file with the generated secret key to enhance security for the Flask application. The `config.py` file should be placed in the instance folder to be read by the application factory. Input: secret key; Output: updated configuration file.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSECRET_KEY = '192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n```\n\n----------------------------------------\n\nTITLE: Custom 500 Error Page in HTML\nDESCRIPTION: Defines an HTML template for a custom internal server error page in Flask, offering users a message when a 500 error occurs and redirect options.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_10\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% extends \"layout.html\" %}\n{% block title %}Internal Server Error{% endblock %}\n{% block body %}\n  <h1>Internal Server Error</h1>\n  <p>Oops... we seem to have made a mistake, sorry!</p>\n  <p><a href=\"{{ url_for('index') }}\">Go somewhere nice instead</a>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Running mod_wsgi-express Server with Process Configuration\nDESCRIPTION: Command to start the mod_wsgi-express server with the specified WSGI script and number of worker processes. The --processes flag defines how many worker processes to use for handling requests.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ mod_wsgi-express start-server wsgi.py --processes 4\n```\n\n----------------------------------------\n\nTITLE: Creating WSGI File for Flask App Factory\nDESCRIPTION: Python code to create a WSGI file when using the Flask app factory pattern. This file imports the create_app function and instantiates the app.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom hello import create_app\n\napp = create_app()\n```\n\n----------------------------------------\n\nTITLE: Applying HTTP Method Override Middleware to a Flask Application\nDESCRIPTION: This snippet demonstrates how to integrate the `HTTPMethodOverrideMiddleware` into a Flask application by wrapping the Flask app's WSGI application with the middleware, allowing it to process overridden HTTP methods seamlessly.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/methodoverrides.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\napp.wsgi_app = HTTPMethodOverrideMiddleware(app.wsgi_app)\n```\n\n----------------------------------------\n\nTITLE: Running Flask with External Debugger Support (Command Line)\nDESCRIPTION: Command to run Flask in debug mode while disabling the built-in debugger and reloader to prevent interference with external debuggers like those in IDEs.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app hello run --debug --no-debugger --no-reload\n```\n\n----------------------------------------\n\nTITLE: Logging Response Finish Signal in Flask\nDESCRIPTION: Demonstrates connecting a subscriber function to the request_finished signal to log details before response is sent\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef log_response(sender, response, **extra):\n    sender.logger.debug('Request context is about to close down. '\n                        'Response: %s', response)\n\nfrom flask import request_finished\nrequest_finished.connect(log_response, app)\n```\n\n----------------------------------------\n\nTITLE: Optimized URL Registration Helper\nDESCRIPTION: Helper function to simplify URL registration with LazyView and support multiple routes per view.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef url(import_name, url_rules=[], **options):\n    view = LazyView(f\"yourapplication.{import_name}\")\n    for url_rule in url_rules:\n        app.add_url_rule(url_rule, view_func=view, **options)\n\n# add a single route to the index view\nurl('views.index', ['/'])\n\n# add two routes to a single function endpoint\nurl_rules = ['/user/','/user/<username>']\nurl('views.user', url_rules)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RuntimeError Outside Application Context in Python\nDESCRIPTION: This shows the error message that occurs when attempting to access Flask's current_app outside an application context. The error provides guidance on how to solve the issue using app.app_context().\nSOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#2025-04-20_snippet_0\n\nLANGUAGE: pytb\nCODE:\n```\nRuntimeError: Working outside of application context.\n\nThis typically means that you attempted to use functionality that\nneeded to interface with the current application object in some way.\nTo solve this, set up an application context with app.app_context().\n```\n\n----------------------------------------\n\nTITLE: Installing Waitress for a Flask Application\nDESCRIPTION: Commands to create a virtual environment, install a Flask application, and install the Waitress WSGI server.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/waitress.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install waitress\n```\n\n----------------------------------------\n\nTITLE: Running Celery Worker and Beat\nDESCRIPTION: These commands start a Celery worker and beat instance to process tasks and run tasks on a schedule, respectively, for the Flask application configured with Celery.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ celery -A example worker --loglevel INFO\n$ celery -A example beat --loglevel INFO\n```\n\n----------------------------------------\n\nTITLE: Running ASGI App with Hypercorn\nDESCRIPTION: This text command illustrates how to serve a wrapped ASGI application using the Hypercorn server, which is capable of handling ASGI applications. The prerequisite is to have Hypercorn installed and the ASGI app properly configured. The command expects a module name and the ASGI app callable name as inputs, and it initiates the server process.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/asgi.rst#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ hypercorn module:asgi_app\n```\n\n----------------------------------------\n\nTITLE: Using Flask's Request Context with WSGI Environment\nDESCRIPTION: Example of using Flask's request_context method with a WSGI environment to create a request context. This is useful for testing or when working with WSGI environments directly.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nwith app.request_context(environ):\n    assert request.method == 'POST'\n```\n\n----------------------------------------\n\nTITLE: Using sqlite3.Row as row factory\nDESCRIPTION: Shows how to use SQLite's built-in Row factory which provides both dictionary-like and tuple-like access to query results. This approach is simpler than creating a custom row factory.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndb.row_factory = sqlite3.Row\n```\n\n----------------------------------------\n\nTITLE: Alternative Template Capture Testing\nDESCRIPTION: This code tests the alternative template capture with context manager. The `captured_templates` function connects to the `template_rendered` signal for the duration of the `with` statement, recording template and context.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"templates = []\nwith captured_templates(app, templates, **extra):\n    ...\n    template, context = templates[0]\"\n```\n\n----------------------------------------\n\nTITLE: Install Flask with pip\nDESCRIPTION: This command installs the Flask package using pip, the Python package installer. It assumes that a virtual environment has already been activated to isolate the project's dependencies. Flask and its dependencies are downloaded and installed into the active virtual environment.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n    $ pip install Flask\n```\n\n----------------------------------------\n\nTITLE: Running Gunicorn with Gevent Async Worker\nDESCRIPTION: Command to run Gunicorn with the gevent worker using the -k flag. This enables asynchronous processing with gevent, which is beneficial for applications that use gevent in their code.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ gunicorn -k gevent 'hello:create_app()'\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: gevent\nBooting worker with pid: x\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Blueprint Static Files\nDESCRIPTION: Shows how to generate URLs to static files provided by a blueprint using the url_for function with the blueprint's static endpoint.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nurl_for('admin.static', filename='style.css')\n```\n\n----------------------------------------\n\nTITLE: Running uWSGI with Gevent for Async Support\nDESCRIPTION: Command to run uWSGI with gevent for asynchronous support. This requires using gevent in the application code to see benefits.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ uwsgi --http 127.0.0.1:8000 --master --gevent 100 -w wsgi:app\n```\n\n----------------------------------------\n\nTITLE: Closing Database Connection on Request Teardown\nDESCRIPTION: Demonstrates connecting a subscriber function to request_tearing_down signal to close database session\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef close_db_connection(sender, **extra):\n    session.close()\n\nfrom flask import request_tearing_down\nrequest_tearing_down.connect(close_db_connection, app)\n```\n\n----------------------------------------\n\nTITLE: Application Context User Setup for Testing\nDESCRIPTION: Context manager for setting a user in application context during unit testing using appcontext_pushed signal\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import contextmanager\nfrom flask import appcontext_pushed\n\n@contextmanager\ndef user_set(app, user):\n    def handler(sender, **kwargs):\n        g.user = user\n    with appcontext_pushed.connected_to(handler, app):\n        yield\n\ndef test_user_me(self):\n    with user_set(app, 'john'):\n        c = app.test_client()\n        resp = c.get('/users/me')\n        assert resp.data == 'username=john'\n```\n\n----------------------------------------\n\nTITLE: Defining Flask View Function in Python\nDESCRIPTION: Example of a Flask view function defined in `views.py` with the route decorator, responding with a 'Hello World!' message.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom yourapplication import app\n\n@app.route('/')\ndef index():\n    return 'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Filtering Backspace Characters for Copy-Paste Safety\nDESCRIPTION: This snippet demonstrates how to remove backspace characters from a body of text to prevent potential security issues when users copy and paste code from a webpage to a terminal.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbody = body.replace(\"\\b\", \"\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flask Project in Editable Mode with pip\nDESCRIPTION: This command installs the Flask project in editable mode, linking the project source code to the Python environment. Changes to the code are immediately reflected without re-installation. It reads the `pyproject.toml` file in the current directory to install the project and its dependencies.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/install.rst#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n$ pip install -e .\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Domain Name in hosts File for Flask Development\nDESCRIPTION: This snippet shows how to edit the hosts file on Linux to associate a domain name with the local IP address. This allows for local testing of domain-based applications without registering an actual domain.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/nginx.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n127.0.0.1 hello.localhost\n```\n\n----------------------------------------\n\nTITLE: Running Flask Application with Command-Line\nDESCRIPTION: Describes the command to run the Flask application using Flask’s CLI, specifying the application path with the `--app` option.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app yourapplication run\n```\n\n----------------------------------------\n\nTITLE: Binding uWSGI to All External IPs\nDESCRIPTION: Command to bind uWSGI to all external IPs on a non-privileged port. This should not be used with a reverse proxy setup.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ uwsgi --http 0.0.0.0:8000 --master -p 4 -w wsgi:app\n```\n\n----------------------------------------\n\nTITLE: Using Method Hints in Flask Class-based Views\nDESCRIPTION: This snippet shows how to use method hints in a class-based view to specify which HTTP methods are allowed for the view.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyView(View):\n    methods = [\"GET\", \"POST\"]\n\n    def dispatch_request(self):\n        if request.method == \"POST\":\n            ...\n        ...\n\napp.add_url_rule('/my-view', view_func=MyView.as_view('my-view'))\n```\n\n----------------------------------------\n\nTITLE: Logging Request Start Signal in Flask\nDESCRIPTION: Example of connecting a subscriber function to the request_started signal to log when a request context is set up\nSOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef log_request(sender, **extra):\n    sender.logger.debug('Request context is set up')\n\nfrom flask import request_started\nrequest_started.connect(log_request, app)\n```\n\n----------------------------------------\n\nTITLE: Render Update Post Template with Jinja\nDESCRIPTION: This template provides a form for editing a blog post's details. The current values of the post being edited populate the form's input fields, and it features a secondary form for delete operations, guarded by a confirmation dialog.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_7\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Edit \"{{ post['title'] }}\"{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"title\">Title</label>\n    <input name=\"title\" id=\"title\"\n      value=\"{{ request.form['title'] or post['title'] }}\" required>\n    <label for=\"body\">Body</label>\n    <textarea name=\"body\" id=\"body\">{{ request.form['body'] or post['body'] }}</textarea>\n    <input type=\"submit\" value=\"Save\">\n  </form>\n  <hr>\n  <form action=\"{{ url_for('blog.delete', id=post['id']) }}\" method=\"post\">\n    <input class=\"danger\" type=\"submit\" value=\"Delete\" onclick=\"return confirm('Are you sure?');\">\n  </form>\n{% endblock %}\n\n```\n\n----------------------------------------\n\nTITLE: Running Gunicorn with Eventlet Async Worker\nDESCRIPTION: Command to run Gunicorn with the eventlet worker using the -k flag. This enables asynchronous processing with eventlet, which is beneficial for applications that use eventlet in their code.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ gunicorn -k eventlet 'hello:create_app()'\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: eventlet\nBooting worker with pid: x\n```\n\n----------------------------------------\n\nTITLE: Running uWSGI with WSGI File\nDESCRIPTION: Command to run uWSGI using the WSGI file created for the app factory pattern.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w wsgi:app\n```\n\n----------------------------------------\n\nTITLE: Disabling Flask dotenv Support\nDESCRIPTION: Demonstrates how to disable Flask's dotenv support by setting the FLASK_SKIP_DOTENV environment variable in different shells (Bash, Fish, CMD, and Powershell).\nSOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export FLASK_SKIP_DOTENV=1\n$ flask run\n```\n\nLANGUAGE: fish\nCODE:\n```\n$ set -x FLASK_SKIP_DOTENV 1\n$ flask run\n```\n\nLANGUAGE: cmd\nCODE:\n```\n> set FLASK_SKIP_DOTENV=1\n> flask run\n```\n\nLANGUAGE: powershell\nCODE:\n```\n> $env:FLASK_SKIP_DOTENV = 1\n> flask run\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Packages with pip\nDESCRIPTION: This command lists all installed packages in the current Python environment. This output is useful to verify that the project and its dependencies have been installed correctly. The output shows package names, versions, and installation locations.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/install.rst#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n$ pip list\n\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Flask Application\nDESCRIPTION: This CSS code provides basic styling for the Flask application, including font, background, colors, and layout. It targets HTML elements such as body, header, navigation, content, forms, and flash messages.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/static.rst#2025-04-20_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nhtml { font-family: sans-serif; background: #eee; padding: 1rem; }\nbody { max-width: 960px; margin: 0 auto; background: white; }\nh1 { font-family: serif; color: #377ba8; margin: 1rem 0; }\na { color: #377ba8; }\nhr { border: none; border-top: 1px solid lightgray; }\nnav { background: lightgray; display: flex; align-items: center; padding: 0 0.5rem; }\nnav h1 { flex: auto; margin: 0; }\nnav h1 a { text-decoration: none; padding: 0.25rem 0.5rem; }\nnav ul  { display: flex; list-style: none; margin: 0; padding: 0; }\nnav ul li a, nav ul li span, header .action { display: block; padding: 0.5rem; }\n.content { padding: 0 1rem 1rem; }\n.content > header { border-bottom: 1px solid lightgray; display: flex; align-items: flex-end; }\n.content > header h1 { flex: auto; margin: 1rem 0 0.25rem 0; }\n.flash { margin: 1em 0; padding: 1em; background: #cae6f6; border: 1px solid #377ba8; }\n.post > header { display: flex; align-items: flex-end; font-size: 0.85em; }\n.post > header > div:first-of-type { flex: auto; }\n.post > header h1 { font-size: 1.5em; margin-bottom: 0; }\n.post .about { color: slategray; font-style: italic; }\n.post .body { white-space: pre-line; }\n.content:last-child { margin-bottom: 0; }\n.content form { margin: 1em 0; display: flex; flex-direction: column; }\n.content label { font-weight: bold; margin-bottom: 0.5em; }\n.content input, .content textarea { margin-bottom: 1em; }\n.content textarea { min-height: 12em; resize: vertical; }\ninput.danger { color: #cc2f2e; }\ninput[type=submit] { align-self: start; min-width: 10em; }\n\n```\n\n----------------------------------------\n\nTITLE: Optimizing View Lifetime in Flask Class-based Views\nDESCRIPTION: This snippet shows how to optimize the view lifetime by setting init_every_request to False, creating only one instance of the class for all requests.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ListView(View):\n    init_every_request = False\n\n    def __init__(self, model, template):\n        self.model = model\n        self.template = template\n\n    def dispatch_request(self):\n        items = self.model.query.all()\n        return render_template(self.template, items=items)\n```\n\n----------------------------------------\n\nTITLE: Removing Default Logging Handler in Flask\nDESCRIPTION: This snippet shows how to remove the default logging handler that Flask automatically adds to the application logger. This is useful if you configure logging after the logger has been accessed.  Dependencies: flask.logging.default_handler, Flask.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n \"from flask.logging import default_handler\n\n    app.logger.removeHandler(default_handler)\"\n```\n\n----------------------------------------\n\nTITLE: Running Celery Commands with Factory Pattern\nDESCRIPTION: These text commands demonstrate how to start the Celery worker and beat using a make_celery.py module, which retrieves the Celery app from a Flask app using the factory pattern.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ celery -A make_celery worker --loglevel INFO\n$ celery -A make_celery beat --loglevel INFO\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosts File for Local Domain Testing with Python\nDESCRIPTION: A sample hosts file configuration that maps a local domain name to the loopback IP address (127.0.0.1). This allows for testing domain-based applications locally without an actual DNS entry.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/apache-httpd.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n127.0.0.1 hello.localhost\n```\n\n----------------------------------------\n\nTITLE: Registering Teardown Request Handlers in Flask\nDESCRIPTION: Using teardown_request decorator to register functions that should run at the end of a request regardless of whether an exception occurred.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nteardown_request\n```\n\n----------------------------------------\n\nTITLE: Activate Virtual Environment (Windows)\nDESCRIPTION: This command activates the virtual environment on Windows. It executes the 'activate' script located in the '.venv\\Scripts' directory, modifying the shell's environment to use the virtual environment's Python interpreter and installed packages.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n> .venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: These commands create the project directory and navigate into it using shell commands. This sets up the initial workspace for the Flask application.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n    $ mkdir flask-tutorial\n    $ cd flask-tutorial\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Requests in Flask Shell - Python\nDESCRIPTION: This snippet shows how to manually call Flask's preprocess_request within an interactive shell to simulate before-request actions, such as database connections. It warns that preprocess_request might return a response object, which should be ignored.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/shell.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> ctx = app.test_request_context()\n>>> ctx.push()\n>>> app.preprocess_request()\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache httpd as a Reverse Proxy for WSGI Applications\nDESCRIPTION: Essential Apache httpd configuration to set up a reverse proxy that forwards requests to a WSGI server running locally. Includes loading proxy modules and setting necessary headers for proper forwarding.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/apache-httpd.rst#2025-04-20_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nProxyPass / http://127.0.0.1:8000/\nRequestHeader set X-Forwarded-Proto http\nRequestHeader set X-Forwarded-Prefix /\n```\n\n----------------------------------------\n\nTITLE: Checking for Request Context in Flask\nDESCRIPTION: Using has_request_context to determine if a request context is active, useful for code that might run both during requests and outside of requests.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nhas_request_context\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Environment (Windows)\nDESCRIPTION: This command creates a virtual environment named '.venv' within the current directory on Windows. It leverages the 'py -3 -m venv' command, specifying Python 3, to initialize an isolated environment for the project's dependencies.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n> py -3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Creating URL Adapters in Flask\nDESCRIPTION: Using Flask.create_url_adapter method to customize the way URL adapters are created, providing more flexibility in URL routing.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nFlask.create_url_adapter\n```\n\n----------------------------------------\n\nTITLE: Flask Project Structure Directory Listing\nDESCRIPTION: This shows the directory structure of a complete Flask project including the application package, tests, templates, static files, and other configuration files.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n    /home/user/Projects/flask-tutorial\n    ├── flaskr/\n    │   ├── __init__.py\n    │   ├── db.py\n    │   ├── schema.sql\n    │   ├── auth.py\n    │   ├── blog.py\n    │   ├── templates/\n    │   │   ├── base.html\n    │   │   ├── auth/\n    │   │   │   ├── login.html\n    │   │   │   └── register.html\n    │   │   └── blog/\n    │   │       ├── create.html\n    │   │       ├── index.html\n    │   │       └── update.html\n    │   └── static/\n    │       └── style.css\n    ├── tests/\n    │   ├── conftest.py\n    │   ├── data.sql\n    │   ├── test_factory.py\n    │   ├── test_db.py\n    │   ├── test_auth.py\n    │   └── test_blog.py\n    ├── .venv/\n    ├── pyproject.toml\n    └── MANIFEST.in\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage\nDESCRIPTION: Commands for running tests with coverage reporting and generating HTML report\nSOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ coverage run -m pytest\n$ coverage report\n$ coverage html  # open htmlcov/index.html in a browser\n```\n\n----------------------------------------\n\nTITLE: Registering First Request Callbacks in Flask\nDESCRIPTION: Using the Flask.before_first_request decorator to register callbacks that are only triggered once at the beginning of the first request.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nFlask.before_first_request\n```\n\n----------------------------------------\n\nTITLE: Running Python Script for Flask Application\nDESCRIPTION: A simple command snippet illustrating how to execute a Python file (`hello.py`) which internally runs the Flask application with a development server. This assumes `hello.py` is structured to run a Flask app from its `main` section.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ python hello.py\n```\n\n----------------------------------------\n\nTITLE: Disabled Autoescaping Block\nDESCRIPTION: Demonstrates explicitly disabling autoescaping for a block of template content using autoescape false directive\nSOURCE: https://github.com/pallets/flask/blob/main/tests/templates/non_escaping_template.txt#2025-04-20_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n{% autoescape false %}{{ text }}\n{{ html }}{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-MongoEngine\nDESCRIPTION: This snippet provides the command to install Flask-MongoEngine, a library that facilitates interaction between Flask and MongoDB using MongoEngine. Ensure you have a running MongoDB server before proceeding.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flask-mongoengine\n```\n\n----------------------------------------\n\nTITLE: Installing Flaskr Package\nDESCRIPTION: Commands for installing the Flaskr package in development mode\nSOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing uWSGI and Flask Application\nDESCRIPTION: Commands to create a virtual environment, install the Flask application, and install uWSGI. Two options are provided: using pyuwsgi for precompiled wheels, or uwsgi for full SSL support.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install pyuwsgi\n```\n\nLANGUAGE: text\nCODE:\n```\n$ pip install uwsgi\n\n# or\n$ pip install --no-binary pyuwsgi pyuwsgi\n```\n\n----------------------------------------\n\nTITLE: Defining Flask Test Dependencies with pip-compile\nDESCRIPTION: Specifies the minimum required package versions for Flask's test environment. Generated automatically by pip-compile from tests-min.in source file. Lists core dependencies including Blinker 1.9.0, Click 8.1.3, ItsDangerous 2.2.0, Jinja2 3.1.2, MarkupSafe 2.1.1, and Werkzeug 3.1.0.\nSOURCE: https://github.com/pallets/flask/blob/main/requirements/tests-min.txt#2025-04-20_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nblinker==1.9.0\n    # via -r tests-min.in\nclick==8.1.3\n    # via -r tests-min.in\nitsdangerous==2.2.0\n    # via -r tests-min.in\njinja2==3.1.2\n    # via -r tests-min.in\nmarkupsafe==2.1.1\n    # via\n    #   -r tests-min.in\n    #   jinja2\n    #   werkzeug\nwerkzeug==3.1.0\n    # via -r tests-min.in\n```\n\n----------------------------------------\n\nTITLE: Identifying Port Usage with netstat (Windows)\nDESCRIPTION: This snippet demonstrates how to use the `netstat` command on Windows to identify the process occupying a specific port (e.g., 5000). The `findstr` command helps quickly locate the relevant line, and the pid can be used to terminate the process if needed. Requires `netstat` accessible within the command line environment.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> netstat -ano | findstr 5000\nTCP 127.0.0.1:5000 0.0.0.0:0 LISTENING 6847\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry SDK for Flask Error Tracking\nDESCRIPTION: Command to install the Sentry SDK client with Flask dependencies for error tracking and monitoring.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ pip install sentry-sdk[flask]\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment (Windows)\nDESCRIPTION: Commands for creating and activating a Python virtual environment on Windows command prompt\nSOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ py -3 -m venv .venv\n$ .venv\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Generating Dependencies with pip-compile for Flask Project\nDESCRIPTION: This code snippet shows the command used to generate the requirements file using pip-compile. It uses the backtracking resolver and reads from the pyproject.toml file.\nSOURCE: https://github.com/pallets/flask/blob/main/examples/celery/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip-compile --resolver=backtracking pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Running Flask in Debug Mode via Command Line\nDESCRIPTION: Shows how to enable debug mode when running a Flask application using the command line interface.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app hello run --debug\n```\n\n----------------------------------------\n\nTITLE: Installing mod_wsgi in a Virtual Environment for Flask Applications\nDESCRIPTION: Command sequence for setting up a virtual environment, installing a Flask application and mod_wsgi. This shows the standard process of activating a virtual environment and installing the necessary packages.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install mod_wsgi\n```\n\n----------------------------------------\n\nTITLE: LazyView URL Registration\nDESCRIPTION: Example of registering URLs using LazyView for deferred view loading.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom yourapplication.helpers import LazyView\napp = Flask(__name__)\napp.add_url_rule('/',\n                 view_func=LazyView('yourapplication.views.index'))\napp.add_url_rule('/user/<username>',\n                 view_func=LazyView('yourapplication.views.user'))\n```\n\n----------------------------------------\n\nTITLE: Creating Flask App Directory\nDESCRIPTION: This command creates a directory named 'flaskr' which will contain the Flask application package.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/factory.rst#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n$ mkdir flaskr\n```\n\n----------------------------------------\n\nTITLE: Running Flaskr Application\nDESCRIPTION: Commands for initializing the database and running the Flask application in debug mode\nSOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app flaskr init-db\n$ flask --app flaskr run --debug\n```\n\n----------------------------------------\n\nTITLE: Testing the Flask Ajax Example\nDESCRIPTION: Commands to install test dependencies, run tests with pytest, and generate coverage report\nSOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ pip install -e '.[test]'\n$ coverage run -m pytest\n$ coverage report\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Flask Repository\nDESCRIPTION: Commands for cloning the Flask repository and checking out the correct version for the tutorial\nSOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# clone the repository\n$ git clone https://github.com/pallets/flask\n$ cd flask\n# checkout the correct version\n$ git tag  # shows the tagged versions\n$ git checkout latest-tag-found-above\n$ cd examples/tutorial\n```\n\n----------------------------------------\n\nTITLE: Defining Flask Build Requirements with pip-compile\nDESCRIPTION: Requirements file specifying exact versions of Python packages needed for building Flask. Lists build, packaging, and pyproject-hooks as primary dependencies with their specific versions.\nSOURCE: https://github.com/pallets/flask/blob/main/requirements/build.txt#2025-04-20_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nbuild==1.2.2.post1\n    # via -r build.in\npackaging==24.2\n    # via build\npyproject-hooks==1.2.0\n    # via build\n```\n\n----------------------------------------\n\nTITLE: Identifying Port Usage with netstat (Linux)\nDESCRIPTION: This snippet shows how to identify the process using a specific port (e.g., 5000) on Linux using the `netstat` command. The process id (pid) is displayed, which can be used to stop the process if necessary. The command assumes you have `netstat` installed and accessible in your PATH.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ netstat -nlp | grep 5000\ntcp 0 0 127.0.0.1:5000 0.0.0.0:* LISTEN 6847/python\n```\n\n----------------------------------------\n\nTITLE: Executing Gevent Server Script\nDESCRIPTION: This command executes the Python script (`wsgi.py`) that initializes and runs the Gevent WSGI server for serving the Flask application. It assumes that the `wsgi.py` file contains the necessary code to import and configure the Flask app with Gevent.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gevent.rst#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ python wsgi.py\n```\n\n----------------------------------------\n\nTITLE: Centralized View Functions Definition\nDESCRIPTION: Shows view function definitions without decorators for use with centralized URL mapping.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef index():\n    pass\n\ndef user(username):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing Flask from Source\nDESCRIPTION: Commands for installing Flask from source and Flaskr when using the main branch\nSOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e ../..\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Generating Flask Project Dependencies with pip-compile\nDESCRIPTION: This code snippet shows the command used to generate the requirements file using pip-compile. It specifies the input file 'dev.in' and uses Python 3.13 for compilation.\nSOURCE: https://github.com/pallets/flask/blob/main/requirements/dev.txt#2025-04-20_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#    pip-compile dev.in\n```\n\n----------------------------------------\n\nTITLE: Unsafe HTML Anchor Tag Example with JavaScript URI\nDESCRIPTION: Demonstrates unsafe HTML anchor tags that could execute JavaScript through the href attribute if not properly secured.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ value }}\">click here</a>\n<a href=\"javascript:alert('unsafe');\">click here</a>\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements Configuration\nDESCRIPTION: Auto-generated pip requirements file listing package dependencies with exact versions. Contains testing tools like pytest, type checking tools like mypy and pyright, and other dependencies like cryptography and python-dotenv.\nSOURCE: https://github.com/pallets/flask/blob/main/requirements/typing.txt#2025-04-20_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nasgiref==3.8.1\n    # via -r typing.in\ncffi==1.17.1\n    # via cryptography\ncryptography==44.0.2\n    # via -r typing.in\niniconfig==2.1.0\n    # via pytest\nmypy==1.15.0\n    # via -r typing.in\nmypy-extensions==1.0.0\n    # via mypy\nnodeenv==1.9.1\n    # via pyright\npackaging==24.2\n    # via pytest\nplugin==1.5.0\n    # via pytest\npycparser==2.22\n    # via cffi\npyright==1.1.398\n    # via -r typing.in\npytest==8.3.5\n    # via -r typing.in\npython-dotenv==1.1.0\n    # via -r typing.in\ntypes-contextvars==2.4.7.3\n    # via -r typing.in\ntypes-dataclasses==0.6.6\n    # via -r typing.in\ntyping-extensions==4.13.0\n    # via\n    #   mypy\n    #   pyright\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Flask Extension\nDESCRIPTION: Examples of specifying dependency requirements with lower bounds for Flask extensions.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsqlalchemy>=1.4\npython_requires=\">=version\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Eventlet WSGI Server\nDESCRIPTION: Python script demonstrating how to set up an Eventlet WSGI server for a Flask application. Creates a server listening on localhost port 8000.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/eventlet.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport eventlet\nfrom eventlet import wsgi\nfrom hello import create_app\n\napp = create_app()\nwsgi.server(eventlet.listen((\"127.0.0.1\", 8000)), app)\n```\n\n----------------------------------------\n\nTITLE: Creating Responses in Flask Views\nDESCRIPTION: Using make_response function to simplify creating response object instances in views, allowing easier manipulation of the response before returning.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmake_response\n```\n\n----------------------------------------\n\nTITLE: Running the Flask Ajax Example Application\nDESCRIPTION: Command to start the Flask development server\nSOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ flask --app js_example run\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Options Response in Flask\nDESCRIPTION: Using Flask.make_default_options_response which can be used by subclasses to alter the default behavior for OPTIONS responses.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nFlask.make_default_options_response\n```\n\n----------------------------------------\n\nTITLE: Enabled Autoescaping Block\nDESCRIPTION: Shows explicitly enabling autoescaping for a block of template content using autoescape true directive\nSOURCE: https://github.com/pallets/flask/blob/main/tests/templates/non_escaping_template.txt#2025-04-20_snippet_2\n\nLANGUAGE: jinja2\nCODE:\n```\n{% autoescape true %}{{ text }}\n{{ html }}{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands for installing test dependencies and running tests\nSOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install '.[test]'\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Data in SQL\nDESCRIPTION: SQL script to initialize test data including user accounts and sample posts for testing.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO user (username, password)\nVALUES\n  ('test', 'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f'),\n  ('other', 'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79');\n\nINSERT INTO post (title, body, author_id, created)\nVALUES\n  ('test title', 'test' || x'0a' || 'body', 1, '2018-01-01 00:00:00');\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with pip-compile\nDESCRIPTION: Requirements file specifying exact versions of Python packages needed for testing. Generated automatically by pip-compile from tests.in. Includes packages like pytest, python-dotenv, and asgiref with their pinned versions.\nSOURCE: https://github.com/pallets/flask/blob/main/requirements/tests.txt#2025-04-20_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nasgiref==3.8.1\n    # via -r tests.in\niniconfig==2.1.0\n    # via pytest\npackaging==24.2\n    # via pytest\npluggy==1.5.0\n    # via pytest\npytest==8.3.5\n    # via -r tests.in\npython-dotenv==1.1.0\n    # via -r tests.in\n```\n\n----------------------------------------\n\nTITLE: Including CHANGES.rst File in reStructuredText Documentation\nDESCRIPTION: This directive includes the content of CHANGES.rst from the parent directory into the current document. This is a common pattern in documentation systems to maintain a single source of truth for changelog information.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/changes.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CHANGES.rst\n```\n\n----------------------------------------\n\nTITLE: Flask Version 0.3 Release Notes\nDESCRIPTION: Release notes for Flask 0.3 (Schnaps) from 2010-05-28, including new features like message categories, logging handler support, and context binding improvements.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nVersion 0.3\n-----------\n\nReleased 2010-05-28, codename Schnaps\n\n-   Added support for categories for flashed messages.\n-   The application now configures a ``logging.Handler`` and will log\n    request handling exceptions to that logger when not in debug mode.\n-   Added support for context binding that does not require the use of\n    the with statement for playing in the console.\n-   The request context is now available within the with statement\n    making it possible to further push the request context or pop it.\n-   Added support for configurations.\n```\n\n----------------------------------------\n\nTITLE: Create Project Directory (macOS/Linux)\nDESCRIPTION: This command creates a new project directory named 'myproject' and navigates into it.  This is the first step in setting up a new Flask project within a virtual environment. It prepares the file system for subsequent environment creation and package installation.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n$ mkdir myproject\n$ cd myproject\n```\n\n----------------------------------------\n\nTITLE: Incorrect Extension Initialization in Flask Factory\nDESCRIPTION: An anti-pattern showing how not to initialize Flask extensions in a factory function. This approach binds the extension to a specific app instance, limiting reusability.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    db = SQLAlchemy(app)\n```\n\n----------------------------------------\n\nTITLE: Installing Celery using pip\nDESCRIPTION: This command installs the Celery library from PyPI using the pip package manager. It prepares the environment to run Celery tasks in a Flask application.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ pip install celery\n```\n\n----------------------------------------\n\nTITLE: Silent Configuration Loading in Flask\nDESCRIPTION: Using config.from_pyfile with a silent flag to load configuration from Python files without raising errors if the file doesn't exist.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconfig.from_pyfile\n```\n\n----------------------------------------\n\nTITLE: Flask Version 0.1 Release Notes\nDESCRIPTION: Initial public preview release of Flask from 2010-04-16.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nVersion 0.1\n-----------\n\nReleased 2010-04-16\n\n-   First public preview release.\n```\n\n----------------------------------------\n\nTITLE: Running Eventlet Server\nDESCRIPTION: Command to start the Eventlet WSGI server using the configuration script.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/eventlet.rst#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ python wsgi.py\n(x) wsgi starting up on http://127.0.0.1:8000\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration\nDESCRIPTION: This configuration file specifies files and directories that should be ignored by Git version control, such as virtual environment directories, compiled Python files, instance folders, and other temporary or build-related files.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#2025-04-20_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n    .venv/\n\n    *.pyc\n    __pycache__/\n\n    instance/\n\n    .pytest_cache/\n    .coverage\n    htmlcov/\n\n    dist/\n    build/\n    *.egg-info/\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Jinja Loaders in Flask\nDESCRIPTION: Using create_jinja_loader to override the Jinja template loader creation process in Flask applications.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncreate_jinja_loader\n```\n\n----------------------------------------\n\nTITLE: Activate Virtual Environment (macOS/Linux)\nDESCRIPTION: This command activates the virtual environment located in the '.venv' directory on macOS or Linux. Activating the environment modifies the shell's PATH so that the project's Python interpreter and installed packages are used instead of the system-wide versions.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n$ . .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Registering Endpoint Callbacks with Decorators\nDESCRIPTION: Using the endpoint method on Flask application objects to register callbacks to arbitrary endpoints with decorators.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nendpoint\n```\n\n----------------------------------------\n\nTITLE: Create Project Directory (Windows)\nDESCRIPTION: This command creates a new project directory named 'myproject' and navigates into it on Windows. It's the initial step in isolating project dependencies within a virtual environment, preventing conflicts with system-level packages.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n> mkdir myproject\n> cd myproject\n```\n\n----------------------------------------\n\nTITLE: Installing Eventlet with Virtual Environment\nDESCRIPTION: Commands for creating a virtual environment and installing the application with Eventlet dependencies. Requires Python and pip to be installed.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/eventlet.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install eventlet\n```\n\n----------------------------------------\n\nTITLE: Basic Jinja Variable Output\nDESCRIPTION: Shows basic variable output syntax in Jinja templates for text and HTML variables\nSOURCE: https://github.com/pallets/flask/blob/main/tests/templates/non_escaping_template.txt#2025-04-20_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ text }}\n{{ html }}\n```\n\n----------------------------------------\n\nTITLE: Installing Flask Ajax Example Dependencies\nDESCRIPTION: Commands to set up a Python virtual environment and install the project dependencies\nSOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ python3 -m venv .venv\n$ . .venv/bin/activate\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment (Unix)\nDESCRIPTION: Commands for creating and activating a Python virtual environment on Unix-like systems\nSOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m venv .venv\n$ . .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Pip Requirements List for Flask Documentation\nDESCRIPTION: Auto-generated requirements file created by pip-compile from docs.in. Lists all required Python packages with their exact versions and dependency relationships for building Flask documentation.\nSOURCE: https://github.com/pallets/flask/blob/main/requirements/docs.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.13\n# by the following command:\n#\n#    pip-compile docs.in\n#\nalabaster==1.0.0\n    # via sphinx\nbabel==2.17.0\n    # via sphinx\ncertifi==2025.1.31\n    # via requests\ncharset-normalizer==3.4.1\n    # via requests\ndocutils==0.21.2\n    # via\n    #   sphinx\n    #   sphinx-tabs\nidna==3.10\n    # via requests\nimagesize==1.4.1\n    # via sphinx\njinja2==3.1.6\n    # via sphinx\nmarkupsafe==3.0.2\n    # via jinja2\npackaging==24.2\n    # via\n    #   pallets-sphinx-themes\n    #   sphinx\npallets-sphinx-themes==2.3.0\n    # via -r docs.in\npygments==2.19.1\n    # via\n    #   sphinx\n    #   sphinx-tabs\nrequests==2.32.3\n    # via sphinx\nroman-numerals-py==3.1.0\n    # via sphinx\nsnowballstemmer==2.2.0\n    # via sphinx\nsphinx==8.2.3\n    # via\n    #   -r docs.in\n    #   pallets-sphinx-themes\n    #   sphinx-notfound-page\n    #   sphinx-tabs\n    #   sphinxcontrib-log-cabinet\nsphinx-notfound-page==1.1.0\n    # via pallets-sphinx-themes\nsphinx-tabs==3.4.7\n    # via -r docs.in\nsphinxcontrib-applehelp==2.0.0\n    # via sphinx\nsphinxcontrib-devhelp==2.0.0\n    # via sphinx\nsphinxcontrib-htmlhelp==2.1.0\n    # via sphinx\nsphinxcontrib-jsmath==1.0.1\n    # via sphinx\nsphinxcontrib-log-cabinet==1.0.1\n    # via -r docs.in\nsphinxcontrib-qthelp==2.0.0\n    # via sphinx\nsphinxcontrib-serializinghtml==2.0.0\n    # via sphinx\nurllib3==2.3.0\n    # via requests\n```\n\n----------------------------------------\n\nTITLE: Configuring WSGI Middleware in Flask\nDESCRIPTION: Shows how to add WSGI middleware to a Flask application by wrapping the wsgi_app attribute. Uses ProxyFix middleware from Werkzeug as an example for running behind Nginx.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.middleware.proxy_fix import ProxyFix\napp.wsgi_app = ProxyFix(app.wsgi_app)\n```\n\n----------------------------------------\n\nTITLE: Using the SubdomainDispatcher with a Flask Application Factory in Python\nDESCRIPTION: Example showing how to use the SubdomainDispatcher to create applications based on subdomains. This implementation handles cases where no user exists for a subdomain by returning a 404 response.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom myapplication import create_app, get_user_for_subdomain\nfrom werkzeug.exceptions import NotFound\n\ndef make_app(subdomain):\n    user = get_user_for_subdomain(subdomain)\n    if user is None:\n        # if there is no user for that subdomain we still have\n        # to return a WSGI application that handles that request.\n        # We can then just return the NotFound() exception as\n        # application which will render a default 404 page.\n        # You might also redirect the user to the main page then\n        return NotFound()\n\n    # otherwise create the application for the specific user\n    return create_app(user)\n\napplication = SubdomainDispatcher('example.com', make_app)\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Data Using Flask's g Object\nDESCRIPTION: This example demonstrates how to use Flask's `g` object to store data during a request. It shows two methods: using an internal prefix with the extension name and using an internal prefix as a namespace. The g object stores data for the lifetime of an application context.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# an internal prefix with the extension name\ng._hello_user_id = 2\n\n# or an internal prefix as a namespace\nfrom types import SimpleNamespace\ng._hello = SimpleNamespace()\ng._hello.user_id = 2\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Flask Extension Instance\nDESCRIPTION: This snippet shows how to create an instance of a Flask extension and then initialize it with a Flask application instance within an application factory function. This allows the extension to exist independently of the app, supporting the application factory pattern.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhello = HelloExtension()\n\ndef create_app():\n    app = Flask(__name__)\n    hello.init_app(app)\n    return app\n```\n\n----------------------------------------\n\nTITLE: WSGI Script for Direct Flask Application Import\nDESCRIPTION: Example of a WSGI script file that imports a Flask application directly. This approach works when the app is already instantiated in the imported module.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hello import app\n\napplication = app\n```\n\n----------------------------------------\n\nTITLE: Flask Version 0.2 Release Notes\nDESCRIPTION: Release notes for Flask 0.2 (Jägermeister) from 2010-05-12, detailing various improvements including JSON support, template helpers, and Google App Engine support.\nSOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nVersion 0.2\n-----------\n\nReleased 2010-05-12, codename J?germeister\n\n-   Various bugfixes\n-   Integrated JSON support\n-   Added ``get_template_attribute`` helper function.\n-   ``Flask.add_url_rule`` can now also register a view function.\n-   Refactored internal request dispatching.\n-   Server listens on 127.0.0.1 by default now to fix issues with\n    chrome.\n-   Added external URL support.\n-   Added support for ``send_file``.\n-   Module support and internal request handling refactoring to better\n    support pluggable applications.\n-   Sessions can be set to be permanent now on a per-session basis.\n-   Better error reporting on missing secret keys.\n-   Added support for Google Appengine.\n```\n\n----------------------------------------\n\nTITLE: Installing Flask Application Locally\nDESCRIPTION: Illustrates the command to install a Flask application locally for development, allowing it to be importable as a module and enables the use of Flask command-line tools.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask for External Debugger in Code\nDESCRIPTION: Python code to configure Flask for use with an external debugger by disabling the built-in debugger and auto-reloader while maintaining debug mode.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp.run(debug=True, use_debugger=False, use_reloader=False)\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies with pip\nDESCRIPTION: Commands to install pytest and coverage packages for testing Flask applications.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install pytest coverage\n```\n\n----------------------------------------\n\nTITLE: Running Flask Extension Tests\nDESCRIPTION: Common commands for running Flask extension test suites using different test runners.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntox -e py\nnox -s test\npytest\n```\n\n----------------------------------------\n\nTITLE: Installing Flask Extension in Editable Mode\nDESCRIPTION: Command for installing a Flask extension in editable mode from a local repository clone.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Flask Extension Module Naming\nDESCRIPTION: Required Python module naming pattern for Flask extensions.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nflask_extension_name\n```\n\n----------------------------------------\n\nTITLE: Including License File\nDESCRIPTION: This snippet includes the content of the LICENSE.txt file directly into the document. The `:language: text` directive specifies that the included file should be treated as plain text.\nSOURCE: https://github.com/pallets/flask/blob/main/docs/license.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.. literalinclude:: ../LICENSE.txt\n    :language: text\n```"
  }
]