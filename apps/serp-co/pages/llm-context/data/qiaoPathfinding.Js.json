[
  {
    "owner": "qiao",
    "repo": "pathfinding.js",
    "content": "TITLE: Finding Path with AStarFinder JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of PathFinding.js to find a path on a grid. It initializes a grid from a walkability matrix (0 for walkable, 1 for blocked), creates an A* finder instance, and then uses it to calculate the path between specified start and end coordinates.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/introduction.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n//Walkability matrix. Zero is walkable, One is not\nvar matrix = [\n    [0, 0, 0, 1, 0],\n    [1, 0, 0, 0, 1],\n    [0, 0, 1, 0, 0],\n];\nvar grid = new PF.Grid(matrix);\nvar finder = new PF.AStarFinder();\n//Find path from (1, 2) to (4, 2)\nvar path = finder.findPath(1, 2, 4, 2, grid);\n```\n\n----------------------------------------\n\nTITLE: Finding Path with AStar - PathFinding.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the A* pathfinding algorithm provided by PathFinding.js. It creates an AStarFinder instance and calls its findPath method, providing the start coordinates (0, 0), end coordinates (4, 6), and the grid object containing obstacles. The method returns an array representing the found path.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/obstacles.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar finder = new PF.AStarFinder();\nvar path = finder.findPath(0, 0, 4, 6, grid);\n```\n\n----------------------------------------\n\nTITLE: Finding a Path Between Two Points Using a Finder - JavaScript\nDESCRIPTION: Executes the pathfinder's findPath method to calculate a path from start coordinates (1, 2) to end coordinates (4, 2) on the provided grid. The method returns an array of coordinate pairs representing the path including start and end points.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar path = finder.findPath(1, 2, 4, 2, grid);\n```\n\n----------------------------------------\n\nTITLE: Installing PathFinding.js using npm\nDESCRIPTION: This command installs PathFinding.js using npm (Node Package Manager). The package is downloaded and placed in the `node_modules` folder within the current directory. No parameters are required beyond the package name.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pathfinding\n```\n\n----------------------------------------\n\nTITLE: Installing PathFinding.js with npm in Node.js Environment - bash\nDESCRIPTION: Shows how to install the PathFinding.js library via npm for use in Node.js projects. This snippet assumes npm is installed and will add PathFinding.js to your project's dependencies, allowing require/import usage.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pathfinding\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Map with PathFinding.js - JavaScript\nDESCRIPTION: Illustrates how to instantiate a grid map of specified width and height using the PF.Grid constructor. The default grid marks all nodes as walkable, forming the base structure for pathfinding algorithms.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar grid = new PF.Grid(5, 3);\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid from a Matrix of Walkability Flags - JavaScript\nDESCRIPTION: Shows grid instantiation from a 2D matrix where each element indicates if a cell is walkable (0) or blocked (1). This method initializes the grid based on predefined terrain or obstacles.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar matrix = [\n    [0, 0, 0, 1, 0],\n    [1, 0, 0, 0, 1],\n    [0, 0, 1, 0, 0],\n];\nvar grid = new PF.Grid(matrix);\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Matrix - PathFinding.js - JavaScript\nDESCRIPTION: This snippet demonstrates creating a PF.Grid instance by passing a 2D array (matrix) to its constructor. The matrix defines the grid's structure and initial walkability, where 0 represents walkable cells and 1 represents obstacles. This is a common way to set up a grid with predefined obstacles.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/obstacles.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar walkabilityMatrix = [[0, 0, 0, 0, 0],\n                         [1, 1, 1, 1, 0],\n                         [0, 0, 0, 0, 0],\n                         [0, 1, 1, 1, 1],\n                         [0, 0, 0, 0, 0],\n                         [1, 1, 1, 1, 0],\n                         [0, 0, 0, 0, 0]];\nvar grid = new PF.Grid(matrix);\n```\n\n----------------------------------------\n\nTITLE: Instantiating an A* Path Finder - JavaScript\nDESCRIPTION: Creates an instance of the AStarFinder class from the PF namespace. This finder implements the A* pathfinding algorithm suitable for shortest path computations on grid-based maps.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar finder = new PF.AStarFinder();\n```\n\n----------------------------------------\n\nTITLE: Setting Node Walkability in Grid - JavaScript\nDESCRIPTION: Demonstrates how to change the walkability status of a specific node in the grid using the setWalkableAt(x, y, boolean) method. Coordinates x and y determine the node position, and the boolean indicates if the node is walkable (true) or blocked (false).\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.setWalkableAt(0, 1, false);\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Obstacles - PathFinding.js - JavaScript\nDESCRIPTION: This snippet shows how to create a grid with specific dimensions (5 columns, 7 rows) and then individually mark cells as non-walkable (obstacles) using the setWalkableAt(x, y, walkable) method. This is useful for dynamically adding or removing obstacles after grid creation.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/obstacles.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar grid = new PF.Grid(5, 7);\ngrid.setWalkableAt(0, 1, false);\ngrid.setWalkableAt(1, 1, false);\ngrid.setWalkableAt(2, 1, false);\n...\n```\n\n----------------------------------------\n\nTITLE: Including PathFinding.js in Browser HTML via Script Tag - HTML\nDESCRIPTION: Provides an example of how to include the PathFinding.js compiled script in a webpage by referencing the minified file from the bower_components folder. This allows use of the library directly in browser scripts.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"path/to/bower_components/pathfinding/pathfinding-browser.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Requiring PathFinding.js Module in Node.js - JavaScript\nDESCRIPTION: Demonstrates how to import the PathFinding.js library in a Node.js environment using require syntax. This setup is necessary before utilizing any classes or functions provided by PathFinding.js.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar PF = require('pathfinding');\n```\n\n----------------------------------------\n\nTITLE: Preventing Corner Cutting When Using Diagonal Movement - JavaScript\nDESCRIPTION: Configures AStarFinder to avoid path segments that pass through the corners where two blocked nodes meet diagonally. This applies when allowDiagonal is true and helps ensure physically plausible paths for objects with size.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar finder = new PF.AStarFinder({\n    allowDiagonal: true,\n    dontCrossCorners: true\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Diagonal Movement in AStarFinder (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the `PF.AStarFinder` with diagonal movement explicitly disabled. It passes a configuration object to the constructor, setting the `diagonalMovement` property to the predefined constant `PF.DiagonalMovement.Never`.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/diagonal-movement.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar finder = new PF.AStarFinder({\n    diagonalMovement: PF.DiagonalMovement.Never\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Diagonal Movement in A* Finder - JavaScript\nDESCRIPTION: Initializes an AStarFinder instance with the allowDiagonal option enabled to permit movement along diagonal neighbors in addition to orthogonal movements, allowing more natural paths.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar finder = new PF.AStarFinder({\n    allowDiagonal: true\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning a Grid to Preserve Original Walkability - JavaScript\nDESCRIPTION: Clones the current state of a grid to preserve its nodes' walkability for reuse after pathfinding operations. Since findPath modifies the grid, cloning ensures that the original grid remains unchanged for repeated computations.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar gridBackup = grid.clone();\n```\n\n----------------------------------------\n\nTITLE: Smoothing a Path Using PF.Util.smoothenPath - JavaScript\nDESCRIPTION: Processes an existing path array to produce a new, smoother path by removing unnecessary points and compressing straight segments, improving path quality for movement animations without altering the original path.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar newPath = PF.Util.smoothenPath(grid, path);\n```\n\n----------------------------------------\n\nTITLE: Compressing a Path Using PF.Util.compressPath - JavaScript\nDESCRIPTION: Takes a path composed of sequential points and returns a compressed version by removing intermediate points on straight lines, which reduces the number of waypoints but preserves the overall route shape.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar newPath = PF.Util.compressPath(path);\n```\n\n----------------------------------------\n\nTITLE: Expanding a Compressed Path to Full Coordinates - JavaScript\nDESCRIPTION: Restores a compressed path back to a detailed series of coordinates that include all intermediate points between defined nodes, allowing full retracing of the original uncompressed route.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar newPath = PF.Util.expandPath(path);\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Heuristic Function in BestFirstFinder - JavaScript\nDESCRIPTION: Creates a BestFirstFinder with diagonal movement enabled and a custom heuristic returning the minimum of dx and dy, allowing users to tweak pathfinding behavior by defining their own cost estimation functions.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar finder = new PF.BestFirstFinder({\n    allowDiagonal: true,\n    heuristic: function(dx, dy) {\n        return Math.min(dx, dy);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Different Heuristic Function for A* Finder - JavaScript\nDESCRIPTION: Constructs an AStarFinder using the chebyshev heuristic instead of the default manhattan heuristic to influence how the algorithm estimates path costs, which may affect path shapes and performance.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar finder = new PF.AStarFinder({\n    heuristic: PF.Heuristic.chebyshev\n});\n```\n\n----------------------------------------\n\nTITLE: Installing PathFinding.js with Bower for Browser Use - bash\nDESCRIPTION: Shows the command to install the PathFinding.js library using Bower, a package manager for front-end dependencies. This command downloads PathFinding.js into the bower_components directory for browser inclusion.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbower install pathfinding\n```\n\n----------------------------------------\n\nTITLE: Installing PathFinding.js using Bower\nDESCRIPTION: This command installs the PathFinding.js package using Bower. It downloads and places the package in the `bower_components` folder in the current directory. No parameters are necessary, only the package name.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbower install pathfinding\n```\n\n----------------------------------------\n\nTITLE: Heuristic Function for A* Algorithm in JavaScript\nDESCRIPTION: This snippet calculates the heuristic estimate (typically Manhattan distance) between two grid points to guide the A* search efficiently. It requires the current node and target node coordinates and returns a numeric estimate for path cost.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/contributor-guide/developing.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction heuristic(nodeA, nodeB) {\n    return Math.abs(nodeA.x - nodeB.x) + Math.abs(nodeA.y - nodeB.y);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic A* Pathfinding Algorithm in JavaScript\nDESCRIPTION: This code snippet implements the A* algorithm for finding the shortest path on a grid. It requires start and end coordinates, a grid map, and heuristic functions. The implementation manages open and closed lists, calculates costs, and reconstructs the shortest path upon completion.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/contributor-guide/developing.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction aStar(start, end, grid) {\n    const openSet = new Set();\n    const cameFrom = new Map();\n    const gScore = new Map();\n    const fScore = new Map();\n    \n    // Initialize scores\n    gScore.set(start.toString(), 0);\n    fScore.set(start.toString(), heuristic(start, end));\n    openSet.add(start.toString());\n    \n    while (openSet.size > 0) {\n        // Get node with lowest fScore\n        let current = getLowestFScoreNode(openSet, fScore);\n        if (current.toString() === end.toString()) {\n            return reconstructPath(cameFrom, current);\n        }\n        openSet.delete(current.toString());\n        for (let neighbor of getNeighbors(current, grid)) {\n            let tentative_gScore = gScore.get(current.toString()) + 1;\n            if (tentative_gScore < (gScore.get(neighbor.toString()) || Infinity)) {\n                cameFrom.set(neighbor.toString(), current);\n                gScore.set(neighbor.toString(), tentative_gScore);\n                fScore.set(neighbor.toString(), tentative_gScore + heuristic(neighbor, end));\n                if (!openSet.has(neighbor.toString())) {\n                    openSet.add(neighbor.toString());\n                }\n            }\n        }\n    }\n    return []; // No path found\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid Data Structure in JavaScript\nDESCRIPTION: This snippet initializes a two-dimensional grid structure to represent navigable space for pathfinding. It sets up grid dimensions, creates the grid array, and populates it with default values indicating walkable or blocked cells.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/contributor-guide/developing.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction initializeGrid(width, height) {\n    const grid = Array.from({ length: height }, () => Array(width).fill(0));\n    // 0 indicates walkable cell, 1 indicates obstacle\n    return grid;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bower\nDESCRIPTION: This command installs Bower, a front-end package manager, globally using npm.  The `-g` flag indicates global installation. This makes the bower command available from any directory on the system.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g bower\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (Manual Installation)\nDESCRIPTION: This command installs all the dependencies required by PathFinding.js, after manual download and extraction.  It's essential to ensure the package functions correctly, using npm to handle all dependent modules.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Temp Folder\nDESCRIPTION: This bash command changes the current directory to a temporary folder. This is relevant for manual installation, specifically when working with the downloaded and extracted zip archive.  Replace `<temp_folder>` with the path to the extracted archive.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd <temp_folder>\n```\n\n----------------------------------------\n\nTITLE: Compiling Browser Builds (Manual Installation)\nDESCRIPTION: This command compiles the browser-compatible versions of PathFinding.js. It uses Gulp to generate the necessary `*.js` and `*.min.js` files, optimized for use in web browsers, which are placed in the `/lib` folder.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngulp compile\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project Folder\nDESCRIPTION: This bash command changes the current directory to the project folder.  This is a prerequisite step before installing PathFinding.js with bower. Replace `<my_new_project>` with the project's actual path.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd <my_new_project>\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project Folder\nDESCRIPTION: This bash command navigates the user to their project directory, essential before installing the PathFinding.js package. It uses the `cd` (change directory) command, replacing `<my_new_project>` with the actual project folder's path.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd <my_new_project>\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: This bash command checks the installed version of Node.js on the server. It's a prerequisite check to ensure Node.js is correctly installed and accessible from the command line. The output is the Node.js version.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Checking Bower Version\nDESCRIPTION: This bash command verifies the installation of bower and its version. It checks that bower is installed correctly and is accessible. The output displays the installed bower version.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbower -v\n```\n\n----------------------------------------\n\nTITLE: Checking npm Version\nDESCRIPTION: This bash command verifies the installation and version of npm (Node Package Manager). npm is essential for installing packages for Node.js.  The output confirms npm's presence and version.\nSOURCE: https://github.com/qiao/pathfinding.js/blob/master/docs/user-guide/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm -v\n```"
  }
]