[
  {
    "owner": "codegen-sh",
    "repo": "codegen",
    "content": "TITLE: Initializing and Manipulating a Codebase with Codegen in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Codebase object, which builds a complete graph of code elements, and perform basic operations like removing unused functions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n\n# Codegen builds a complete graph connecting\n# functions, classes, imports and their relationships\ncodebase = Codebase(\"./\")\n\n# Work with code without dealing with syntax trees or parsing\nfor function in codebase.functions:\n    # Comprehensive static analysis for references, dependencies, etc.\n    if not function.usages:\n        # Auto-handles references and imports to maintain correctness\n        function.remove()\n\n# Fast, in-memory code index\ncodebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Creating Import Dependency Graph and Finding Circular Dependencies with NetworkX in Python\nDESCRIPTION: This code builds a directed graph from codebase imports, adding edges between files with import relationships and identifying strongly connected components to detect import cycles. It includes logic to distinguish between static and dynamic imports using edge colors and labels.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_236\n\nLANGUAGE: python\nCODE:\n```\nG = nx.MultiDiGraph()\n\n# Add all edges to the graph\nfor imp in codebase.imports:\n    if imp.from_file and imp.to_file:\n        edge_color = \"red\" if imp.is_dynamic else \"black\"\n        edge_label = \"dynamic\" if imp.is_dynamic else \"static\"\n\n        # Store the import statement and its metadata\n        G.add_edge(\n            imp.to_file.filepath,\n            imp.from_file.filepath,\n            color=edge_color,\n            label=edge_label,\n            is_dynamic=imp.is_dynamic,\n            import_statement=imp,  # Store the whole import object\n            key=id(imp.import_statement),\n        )\n# Find strongly connected components\ncycles = [scc for scc in nx.strongly_connected_components(G) if len(scc) > 1]\n\nprint(f\"🔄 Found {len(cycles)} import cycles:\")\nfor i, cycle in enumerate(cycles, 1):\n    print(f\"\\nCycle #{i}:\")\n    print(f\"Size: {len(cycle)} files\")\n\n    # Create subgraph for this cycle to count edges\n    cycle_subgraph = G.subgraph(cycle)\n\n    # Count total edges\n    total_edges = cycle_subgraph.number_of_edges()\n    print(f\"Total number of imports in cycle: {total_edges}\")\n\n    # Count dynamic and static imports separately\n    dynamic_imports = sum(1 for u, v, data in cycle_subgraph.edges(data=True) if data.get(\"color\") == \"red\")\n    static_imports = sum(1 for u, v, data in cycle_subgraph.edges(data=True) if data.get(\"color\") == \"black\")\n\n    print(f\"Number of dynamic imports: {dynamic_imports}\")\n    print(f\"Number of static imports: {static_imports}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Codegen Agent and Running Tasks via API - Python\nDESCRIPTION: Demonstrates how to use the Codegen SDK to authenticate, initialize an agent, assign a development task for review, and check its status. Dependencies include the \\\"codegen\\\" Python package, which must be installed beforehand. Key parameters are \\\"org_id\\\" and \\\"token\\\" for organization authentication, and \\\"prompt\\\" for describing the task. The example covers starting a task, refreshing its status, and accessing the agent's result. Output may contain code snippets, summaries, or URLs depending on the agent's response. Make sure API credentials are valid and tasks may be asynchronous, requiring refresh.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Agent\n\n# Initialize the Agent with your organization ID and API token\nagent = Agent(org_id=\"...\", token=\"...\")\n\n# Run an agent with a prompt\ntask = agent.run(prompt=\"Leave a review on PR #123\")\n\n# Check the initial status\nprint(task.status)\n\n# Refresh the task to get updated status (tasks can take time)\ntask.refresh()\n\nif task.status == \"completed\":\n    print(task.result)  # Result often contains code, summaries, or links\n```\n\n----------------------------------------\n\nTITLE: Gathering Comprehensive Context for AI Operations in Python\nDESCRIPTION: Shows how to gather relevant contextual information before making AI calls. The example includes a helper function to collect class, call sites, dependencies, and related methods information for more effective AI-powered refactoring.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_157\n\nLANGUAGE: python\nCODE:\n```\n# Gather relevant information before AI call\ndef get_method_context(method):\n    return {\n        \"class\": method.parent,\n        \"call_sites\": list(method.call_sites),\n        \"dependencies\": list(method.dependencies),\n        \"related_methods\": [m for m in method.parent.methods\n                          if m.name != method.name]\n    }\n\n# Use gathered context in AI call\nnew_impl = codebase.ai(\n    \"Refactor this method to be more efficient\",\n    target=method,\n    context=get_method_context(method)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Codebase with Custom Configuration in Python\nDESCRIPTION: This code snippet shows how to create a Codebase object with custom configuration settings. It specifies various options such as graph verification, method usage tracking, and import resolution overrides.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Initialize a Codebase with custom configuration\ncodebase = Codebase(\n    \"path/to/git/repo\"\",\n    config=CodebaseConfig(\n        verify_graph=True,\n        method_usages=False,\n        sync_enabled=True,\n        generics=False,\n        import_resolution_overrides={\n          \"old_module\": \"new_module\"\n        },\n        ts_language_engine=True,\n        v8_ts_engine=True\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Leveraging Graph Relations for Code Analysis with Codegen in Python\nDESCRIPTION: This snippet shows how to use Codegen's graph structure to analyze relationships between code elements across files. It demonstrates finding dead code, analyzing import relationships, and exploring class hierarchies within the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Find dead code\nfor func in codebase.functions:\n    if len(func.usages) == 0:\n        print(f'🗑️ Dead code: {func.name}')\n        func.remove()\n\n# Analyze import relationships\nfile = codebase.get_file('api/endpoints.py')\nprint(\"\\nFiles that import endpoints.py:\")\nfor import_stmt in file.inbound_imports:\n    print(f\"  {import_stmt.file.path}\")\n\nprint(\"\\nFiles that endpoints.py imports:\")\nfor import_stmt in file.imports:\n    if import_stmt.resolved_symbol:\n        print(f\"  {import_stmt.resolved_symbol.file.path}\")\n\n# Explore class hierarchies\nbase_class = codebase.get_class('BaseModel')\nif base_class:\n    print(f\"\\nClasses that inherit from {base_class.name}:\")\n    for subclass in base_class.subclasses:\n        print(f\"  {subclass.name}\")\n        # We can go deeper in the inheritance tree\n        for sub_subclass in subclass.subclasses:\n            print(f\"    └─ {sub_subclass.name}\")\n```\n\n----------------------------------------\n\nTITLE: Migrating to Modern Hooks in React Components\nDESCRIPTION: This script identifies and converts legacy patterns to modern React hooks. It focuses on converting withRouter to useNavigate and transforming lifecycle methods into effects.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_224\n\nLANGUAGE: python\nCODE:\n```\n# Find components using legacy patterns\nfor function in codebase.functions:\n    if not function.is_jsx:\n        continue\n\n    # Look for common legacy patterns\n    for call in function.function_calls:\n        # Convert withRouter to useNavigate\n        if call.name == \"withRouter\":\n            # Add useNavigate import\n            function.file.add_import(\n                \"import { useNavigate } from 'react-router-dom';\"\n            )\n            # Add navigate hook\n            function.insert_before_first_return(\"const navigate = useNavigate();\")\n            # Replace history.push calls\n            for history_call in function.function_calls:\n                if \"history.push\" in history_call.source:\n                    history_call.edit(\n                        history_call.source.replace(\"history.push\", \"navigate\")\n                    )\n\n        # Convert lifecycle methods in hooks\n        elif call.name == \"componentDidMount\":\n            call.parent.edit(\"\"\"\nuseEffect(() => {\n    // Your componentDidMount logic here\n}, []);\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Automating Safe Refactoring Operations with Codegen in Python\nDESCRIPTION: This example highlights how Codegen automates complex refactoring changes such as moving functions and renaming classes, handling secondary effects like import updates, dependency preservation, and string references automatically. It demonstrates intent-driven operations ('move_to_file', 'rename') that trigger multi-faceted changes. Required dependencies are Codegen and a suitably structured Python codebase, with parameters including the objects to be moved or renamed and their target names or locations. Inputs are existing function/class references; outputs are updated source files and references. The snippet assumes edge cases are handled by Codegen, with limitations depending on project complexity.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/guiding-principles.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Moving a function? Codegen handles:\nfunction.move_to_file(\"new_file.py\")\n# ✓ Updating all import statements\n# ✓ Preserving dependencies\n# ✓ Maintaining references\n# ✓ Fixing relative imports\n# ✓ Resolving naming conflicts\n\n# Renaming a symbol? Codegen manages:\nclass_def.rename(\"NewName\")\n# ✓ Updating all usages\n# ✓ Handling string references\n# ✓ Preserving docstrings\n# ✓ Maintaining inheritance\n```\n\n----------------------------------------\n\nTITLE: Complete Python Codemod for Processing Exports in Shared Files\nDESCRIPTION: A complete codemod that processes files in a codebase, finds matching non-shared files for shared files, and converts default exports in the non-shared files based on re-exports in the shared files. It prints status messages throughout the process.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_218\n\nLANGUAGE: python\nCODE:\n```\nfor file in codebase.files:\n    target_file = file.filepath\n    if not target_file:\n        print(f\"⚠️ Target file not found: {filepath}\")\n        continue\n\n    # Get corresponding non-shared file\n    non_shared_path = target_file.filepath.replace('/shared/', '/')\n    if not codebase.has_file(non_shared_path):\n        print(f\"⚠️ No matching non-shared file for: {filepath}\")\n        continue\n\n    non_shared_file = codebase.get_file(non_shared_path)\n    print(f\"📄 Processing {target_file.filepath}\")\n\n    # Process individual exports\n    for export in target_file.exports:\n        # Handle default exports\n        if export.is_reexport() and export.is_default_export():\n            print(f\"  🔄 Converting default export '{export.name}'\")\n            default_export = next((e for e in non_shared_file.default_exports), None)\n            if default_export:\n                default_export.make_non_default()\n\n    print(f\"✨ Fixed exports in {target_file.filepath}\")\n```\n\n----------------------------------------\n\nTITLE: Using High-Level Refactoring APIs with Codegen in Python\nDESCRIPTION: This snippet demonstrates Codegen's Python API for performing codebase refactorings such as renaming functions, moving them between files, and iterating over symbol usages. It emphasizes how the API mirrors natural language and developer intent, bypassing the need to manipulate AST nodes directly. Dependencies include Codegen itself and a codebase prepared for transformation, with key parameters being the target symbol (e.g., function) and desired operations such as 'rename' or 'move_to_file'. Outputs include updated code files with corrected imports, references, and symbol properties, while limitations are primarily governed by Codegen's project and file structure awareness.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/guiding-principles.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Methods that read like English\nfunction.rename(\"new_name\")  # Not ast.update_node(function_node, \"name\", \"new_name\")\nfunction.move_to_file(\"new_file.py\")  # Not ast.relocate_node(function_node, \"new_file.py\")\n\n# Clean, readable properties\nif function.is_async:  # Not ast.get_node_attribute(function_node, \"async\")\n    print(function.name)  # Not ast.get_node_name(function_node)\n\n# Natural iteration patterns\nfor usage in function.usages:  # Not ast.find_references(function_node)\n    print(f\"Used in {usage.file.name}\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Codegen Function with Decorator in Python\nDESCRIPTION: Illustrates how to use the @codegen.function decorator to define a Codegen function. This example shows a basic function structure with a 'codebase' parameter.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n@codegen.function('my-function')\ndef run(codebase):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Performing Safe Code Transformations with Codegen in Python\nDESCRIPTION: This code demonstrates various code transformation operations using Codegen, including moving classes to dedicated files, renaming functions and parameters, changing function signatures, and modifying call sites while maintaining correctness.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Move all Enum classes to a dedicated file\nfor cls in codebase.classes:\n    if cls.is_subclass_of('Enum'):\n        # Codegen automatically:\n        # - Updates all imports that reference this class\n        # - Maintains the class's dependencies\n        # - Preserves comments and decorators\n        # - Generally performs this in a sane manner\n        cls.move_to_file(f'enums.py')\n\n# Rename a function and all its usages\nold_function = codebase.get_function('process_data')\nold_function.rename('process_resource')  # Updates all references automatically\n\n# Change a function's signature\nhandler = codebase.get_function('event_handler')\nhandler.get_parameter('e').rename('event') # Automatically updates all call-sites\nhandler.add_parameter('timeout: int = 30')  # Handles formatting and edge cases\nhandler.add_return_type('Response | None')\n\n# Perform surgery on call-sites\nfor fcall in handler.call_sites:\n    arg = fcall.get_arg_by_parameter_name('env')\n    # f(..., env={ data: x }) => f(..., env={ data: x or None })\n    if isinstance(arg.value, Collection):\n        data_key = arg.value.get('data')\n        data_key.value.edit(f'{data_key.value} or None')\n```\n\n----------------------------------------\n\nTITLE: Breaking Up Import Cycles with NetworkX and Codegen SDK\nDESCRIPTION: This code uses NetworkX to detect import cycles between files in a codebase, then resolves them by moving shared functions to a dedicated directory. It builds a dependency graph based on imports, identifies cycles, and moves functions causing the cycles to break the circular dependencies.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_197\n\nLANGUAGE: python\nCODE:\n```\n# Create a graph to detect cycles\nimport networkx as nx\n\n# Build dependency graph\nG = nx.DiGraph()\n\n# Add edges for imports between files\nfor file in codebase.files:\n    for imp in file.imports:\n        if imp.from_file:\n            G.add_edge(file.filepath, imp.from_file.filepath)\n\n# Find cycles in the graph\ncycles = list(nx.simple_cycles(G))\n\nif not cycles:\n    print(\"✅ No import cycles found!\")\n    exit()\n\nprint(f\"🔍 Found {len(cycles)} import cycles\")\n\n# Process each cycle\nfor cycle in cycles:\n    print(f\"\\n⭕ Processing cycle: {' -> '.join(cycle)}\")\n\n    # Get the first two files in the cycle\n    file1 = codebase.get_file(cycle[0])\n    file2 = codebase.get_file(cycle[1])\n\n    # Find functions in file1 that are used by file2\n    for function in file1.functions:\n        if any(usage.file == file2 for usage in function.usages):\n            # Create new file for the shared function\n            new_filepath = f\"shared/{function.name}.py\"\n            print(f\"  ➡️ Moving {function.name} to {new_filepath}\")\n\n            if not codebase.has_directory(\"shared\"):\n                codebase.create_directory(\"shared\")\n\n            new_file = codebase.create_file(new_filepath)\n            function.move_to_file(new_file, include_dependencies=True)\n\nprint(\"\\n✅ Import cycles resolved!\")\n```\n\n----------------------------------------\n\nTITLE: Basic Codebase Manipulation with Codegen in Python\nDESCRIPTION: Demonstrates how to use Codegen to build a codebase graph and perform operations like identifying unused functions and moving them to a different file. The example shows how Codegen handles references and imports automatically.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n\n# Codegen builds a complete graph connecting\n# functions, classes, imports and their relationships\ncodebase = Codebase(\"./\")\n\n# Work with code without dealing with syntax trees or parsing\nfor function in codebase.functions:\n    # Comprehensive static analysis for references, dependencies, etc.\n    if not function.usages:\n        # Auto-handles references and imports to maintain correctness\n        function.move_to_file(\"deprecated.py\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing and Refactoring a Codebase with Codegen Python Library\nDESCRIPTION: Demonstrates connecting to a codebase using the Codegen Python library, iterating through detected functions, performing static analysis, and removing unused functions before committing changes. Requires the 'codegen' Python package and Python 3.12+ as dependencies. Input is a path to a codebase; output is a refactored codebase and updated in-memory index. Modifications are performed in memory and must be committed to persist changes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n\n# Codegen builds a complete graph connecting\n# functions, classes, imports and their relationships\ncodebase = Codebase(\"./\")\n\n# Work with code without dealing with syntax trees or parsing\nfor function in codebase.functions:\n    # Comprehensive static analysis for references, dependencies, etc.\n    if not function.usages:\n        # Auto-handles references and imports to maintain correctness\n        function.remove()\n\n# Fast, in-memory code index\ncodebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Contributors and AI Impact in Python Codebase\nDESCRIPTION: This comprehensive example demonstrates how to analyze contributors to a codebase, including AI contributors. It uses the codegen library to parse the codebase, add attribution information to symbols, and generate statistics about human and AI contributions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_264\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom collections import Counter\n\nfrom codegen import Codebase\nfrom codegen.extensions.attribution.main import add_attribution_to_symbols\nfrom codegen.git.repo_operator.repo_operator import RepoOperator\nfrom codegen.git.schemas.repo_config import RepoConfig\nfrom codegen.sdk.codebase.config import ProjectConfig\nfrom codegen.shared.enums.programming_language import ProgrammingLanguage\n\ndef analyze_contributors(codebase):\n    \"\"\"Analyze contributors to the codebase and their impact.\"\"\"\n    print(\"\\n🔍 Contributor Analysis:\")\n\n    # Define which authors are considered AI\n    ai_authors = ['devin[bot]', 'codegen[bot]', 'github-actions[bot]', 'dependabot[bot]']\n\n    # Add attribution information to all symbols\n    print(\"Adding attribution information to symbols...\")\n    add_attribution_to_symbols(codebase, ai_authors)\n\n    # Collect statistics about contributors\n    contributor_stats = Counter()\n    ai_contributor_stats = Counter()\n\n    print(\"Analyzing symbol attributions...\")\n    for symbol in codebase.symbols:\n        if hasattr(symbol, 'last_editor') and symbol.last_editor:\n            contributor_stats[symbol.last_editor] += 1\n\n            # Track if this is an AI contributor\n            if any(ai in symbol.last_editor for ai in ai_authors):\n                ai_contributor_stats[symbol.last_editor] += 1\n\n    # Print top contributors overall\n    print(\"\\n👥 Top Contributors by Symbols Authored:\")\n    for contributor, count in contributor_stats.most_common(10):\n        is_ai = any(ai in contributor for ai in ai_authors)\n        ai_indicator = \"🤖\" if is_ai else \"👤\"\n        print(f\"  {ai_indicator} {contributor}: {count} symbols\")\n\n    # Print top AI contributors if any\n    if ai_contributor_stats:\n        print(\"\\n🤖 Top AI Contributors:\")\n        for contributor, count in ai_contributor_stats.most_common(5):\n            print(f\"  • {contributor}: {count} symbols\")\n\n# Initialize codebase from current directory\nif os.path.exists(\".git\"):\n    repo_path = os.getcwd()\n    repo_config = RepoConfig.from_repo_path(repo_path)\n    repo_operator = RepoOperator(repo_config=repo_config)\n\n    project = ProjectConfig.from_repo_operator(\n        repo_operator=repo_operator,\n        programming_language=ProgrammingLanguage.PYTHON\n    )\n    codebase = Codebase(projects=[project])\n\n    # Run the contributor analysis\n    analyze_contributors(codebase)\n```\n\n----------------------------------------\n\nTITLE: Creating an AI Research Agent with LangChain in Python\nDESCRIPTION: Defines a prompt for the AI research agent and initializes it using LangChain's create_agent_with_tools function. The agent is equipped with Codegen tools for code analysis.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_171\n\nLANGUAGE: python\nCODE:\n```\nRESEARCH_AGENT_PROMPT = \"\"\"You are a code research expert. Your goal is to help users understand codebases by:\n1. Finding relevant code through semantic and text search\n2. Analyzing symbol relationships and dependencies\n3. Exploring directory structures\n4. Reading and explaining code\n\nAlways explain your findings in detail and provide context about how different parts of the code relate to each other.\nWhen analyzing code, consider:\n- The purpose and functionality of each component\n- How different parts interact\n- Key patterns and design decisions\n- Potential areas for improvement\n\nBreak down complex concepts into understandable pieces and use examples when helpful.\"\"\"\n\n# Initialize the agent\nagent = create_agent_with_tools(\n    codebase=codebase,\n    tools=tools,\n    chat_history=[SystemMessage(content=RESEARCH_AGENT_PROMPT)],\n    verbose=True\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with AI in Python\nDESCRIPTION: This code shows how to use AI to generate docstrings for all methods in a class, providing context about the class itself and specifying the desired docstring format (Google style in this example).\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_153\n\nLANGUAGE: python\nCODE:\n```\n# Generate docstrings for a class\nclass_def = codebase.get_class(\"MyClass\")\nfor method in class_def.methods:\n    docstring = codebase.ai(\n        \"Generate a docstring describing this method\",\n        target=method,\n        context={\n            \"class\": class_def,\n            \"style\": \"Google docstring format\"\n        }\n    )\n    method.set_docstring(docstring)\n```\n\n----------------------------------------\n\nTITLE: Organizing React Components into Individual Files\nDESCRIPTION: This script identifies files with multiple React components and splits them into individual files. It creates a new directory structure based on the original file and moves each non-default exported component to its own file, preserving imports and dependencies.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_228\n\nLANGUAGE: python\nCODE:\n```\n# Initialize a dictionary to store files and their corresponding JSX components\nfiles_with_jsx_components = {}\n\n# Iterate through all files in the codebase\nfor file in codebase.files:\n    # Check if the file is in the components directory\n    if 'components' not in file.filepath:\n        continue\n\n    # Count the number of JSX components in the file\n    jsx_count = sum(1 for function in file.functions if function.is_jsx)\n\n    # Only proceed if there are multiple JSX components\n    if jsx_count > 1:\n        # Identify non-default exported components\n        non_default_components = [\n            func for func in file.functions\n            if func.is_jsx and not func.is_exported\n        ]\n        default_components = [\n            func for func in file.functions\n            if func.is_jsx and func.is_exported and func.export.is_default_export()\n        ]\n\n        # Log the file path and its components\n        print(f\"📁 {file.filepath}:\")\n        for component in default_components:\n            print(f\"  🟢 {component.name} (default)\")\n        for component in non_default_components:\n            print(f\"  🔵 {component.name}\")\n\n            # Create a new directory path based on the original file's directory\n            new_dir_path = \"/\".join(file.filepath.split(\"/\")[:-1]) + \"/\" + file.name.split(\".\")[0]\n            codebase.create_directory(new_dir_path, exist_ok=True)\n\n            # Create a new file path for the component\n            new_file_path = f\"{new_dir_path}/{component.name}.tsx\"\n            new_file = codebase.create_file(new_file_path)\n\n            # Log the movement of the component\n            print(f\"    🫸 Moved to: {new_file_path}\")\n\n            # Move the component to the new file\n            component.move_to_file(new_file, strategy=\"add_back_edge\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Agent with Custom Model\nDESCRIPTION: This example demonstrates how to create a CodeAgent with a custom model provider and name.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_167\n\nLANGUAGE: python\nCODE:\n```\nagent = CodeAgent(\n    codebase=codebase,\n    model_provider=\"openai\",\n    model_name=\"gpt-4o\",\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Code Elements in Python\nDESCRIPTION: Shows how to access and work with code elements like functions, classes, imports, and variables from source files and directories using the Codegen SDK.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n# Get all functions in a file\nfor function in file.functions:\n    print(f\"Found function: {function.name}\")\n    print(f\"Parameters: {[p.name for p in function.parameters]}\")\n    print(f\"Return type: {function.return_type}\")\n\n# Get all classes\nfor cls in file.classes:\n    print(f\"Found class: {cls.name}\")\n    print(f\"Methods: {[m.name for m in cls.methods]}\")\n    print(f\"Attributes: {[a.name for a in cls.attributes]}\")\n\n# Get imports (can also do `file.import_statements`)\nfor imp in file.imports:\n    print(f\"Import from: {imp.module}\")\n    print(f\"Imported symbol: {[s.name for s in imp.imported_symbol]}\")\n\n# Get specific symbols\nmain_function = file.get_function(\"main\")\nuser_class = file.get_class(\"User\")\nconfig = file.get_global_var(\"CONFIG\")\n\n# Access code blocks\nif main_function:\n    for statement in main_function.code_block.statements:\n        print(f\"Statement type: {statement.statement_type}\")\n\n# Get local variables in a function\nif main_function:\n    local_vars = main_function.code_block.get_local_var_assignments()\n    for var in local_vars:\n        print(f\"Local var: {var.name} = {var.value}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Parsing a Codebase with Codegen in Python\nDESCRIPTION: This Python snippet demonstrates how to instantiate and parse a codebase using Codegen's Codebase class. It can clone and parse a remote GitHub repo or analyze a local git repository. It automatically infers the codebase's programming language and parses all relevant files, providing an object interface for further exploration and transformation. Dependencies: codegen package. Key parameters: repository URL or filesystem path. Outputs a Codebase instance.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n\n# Clone + parse fastapi/fastapi\ncodebase = Codebase.from_repo('fastapi/fastapi')\n\n# Or, parse a local repository\ncodebase = Codebase(\"path/to/git/repo\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Accessing a Codebase Graph in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Codebase instance to analyze code and access pre-computed relationships between code elements. It shows the basic usage pattern for interacting with Codegen's graph representation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# Initialize and analyze the codebase\nfrom codegen import Codebase\ncodebase = Codebase(\"./\")\n\n# Access pre-computed relationships\nfunction = codebase.get_symbol(\"process_data\")\nprint(f\"Dependencies: {function.dependencies}\")  # Instant lookup\nprint(f\"Usages: {function.usages}\")  # No parsing needed\n```\n\n----------------------------------------\n\nTITLE: Initializing and Detecting Language in Python Codebase\nDESCRIPTION: Shows how to create a Codebase instance in Python, which automatically detects the programming language of the project. It also demonstrates how to access the detected language.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n\n# Automatically detects Python or TypeScript\ncodebase = Codebase(\"./\")\n\n# View language with `codebase.language`\nprint(codebase.language)  # \"python\" or \"typescript\"\n```\n\n----------------------------------------\n\nTITLE: Breaking Circular Dependencies in Python Codebase\nDESCRIPTION: Python function that resolves circular dependencies by identifying shared code between files and extracting it into a separate shared module.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_204\n\nLANGUAGE: python\nCODE:\n```\ndef break_circular_dependency(cycle):\n    # Get the first two files in the cycle\n    file1 = codebase.get_file(cycle[0])\n    file2 = codebase.get_file(cycle[1])\n\n    # Create a shared module for common code\n    shared_dir = \"shared\"\n    if not codebase.has_directory(shared_dir):\n        codebase.create_directory(shared_dir)\n\n    # Find symbols used by both files\n    shared_symbols = []\n    for symbol in file1.symbols:\n        if any(usage.file == file2 for usage in symbol.usages):\n            shared_symbols.append(symbol)\n\n    # Move shared symbols to a new file\n    if shared_symbols:\n        shared_file = codebase.create_file(f\"{shared_dir}/shared_types.py\")\n        for symbol in shared_symbols:\n            symbol.move_to_file(shared_file, strategy=\"update_all_imports\")\n\n# Break each cycle found\nfor cycle in cycles:\n    break_circular_dependency(cycle)\n```\n\n----------------------------------------\n\nTITLE: Defining Main Codegen Function with Decorator\nDESCRIPTION: Demonstrates the standard pattern for creating the main transformation function in a Codegen example, using the @codegen.function decorator and including a comprehensive docstring.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/STRUCTURE.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@codegen.function(\"your-function-name\")\ndef run(codebase: Codebase):\n    \"\"\"Clear docstring explaining what the function does.\n\n    Include:\n    1. Purpose of the function\n    2. Key steps or transformations\n    3. Expected output\n    \"\"\"\n    # Implementation...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Modal App for GitHub Webhooks in Python\nDESCRIPTION: Initializes a Modal application to handle GitHub webhooks. Sets up a base image with required dependencies including Git, Codegen, OpenAI, FastAPI, and Slack SDK.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_169\n\nLANGUAGE: python\nCODE:\n```\nimport modal\nfrom codegen.extensions.events.app import CodegenApp\nfrom fastapi import Request\n\n# Set up the base image with required dependencies\nbase_image = (\n    modal.Image.debian_slim(python_version=\"3.12\")\n    .apt_install(\"git\")\n    .pip_install(\n        \"codegen>=0.18\",\n        \"openai>=1.1.0\",\n        \"fastapi[standard]\",\n        \"slack_sdk\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Resolving Import Cycles by Moving Symbols to a Utils File in Python\nDESCRIPTION: This code resolves circular dependencies by creating a new utility file and moving shared symbols to break the import cycle. It identifies symbols imported from one file to another and relocates them to the new common file.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_242\n\nLANGUAGE: python\nCODE:\n```\n# Create new utils file\nutils_file = codebase.create_file(\"torch/_inductor/kernel/flex_utils.py\")\n\n# Get the two files involved in the import cycle\ndecoding_file = codebase.get_file(\"torch/_inductor/kernel/flex_decoding.py\")\nattention_file = codebase.get_file(\"torch/_inductor/kernel/flex_attention.py\")\nattention_file_path = \"torch/_inductor/kernel/flex_attention.py\"\ndecoding_file_path = \"torch/_inductor/kernel/flex_decoding.py\"\n\n# Track symbols to move\nsymbols_to_move = set()\n\n# Find imports from flex_attention in flex_decoding\nfor imp in decoding_file.imports:\n    if imp.from_file and imp.from_file.filepath == attention_file_path:\n        # Get the actual symbol from flex_attention\n        if imp.imported_symbol:\n            symbols_to_move.add(imp.imported_symbol)\n\n# Move identified symbols to utils file\nfor symbol in symbols_to_move:\n    symbol.move_to_file(utils_file)\n\nprint(f\"🔄 Moved {len(symbols_to_move)} symbols to flex_utils.py\")\nfor symbol in symbols_to_move:\n    print(symbol.name)\n\n# Commit changes\ncodebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Providing Relevant Context for AI Queries in Python\nDESCRIPTION: Demonstrates best practices for providing specific, relevant context when making AI queries. The example shows how to supply class, usage, dependency, and style information to improve AI-generated summaries.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_156\n\nLANGUAGE: python\nCODE:\n```\n# Good: Providing specific, relevant context\nsummary = codebase.ai(\n    \"Generate a summary of this method's purpose\",\n    target=method,\n    context={\n        \"class\": method.parent,              # Class containing the method\n        \"usages\": list(method.usages),       # How the method is used\n        \"dependencies\": method.dependencies,  # What the method depends on\n        \"style\": \"concise\"\n    }\n)\n\n# Bad: Missing context that could help the AI\nsummary = codebase.ai(\n    \"Generate a summary\",\n    target=method  # AI only sees the method's code\n)\n```\n\n----------------------------------------\n\nTITLE: Renaming Unused JSX Components with a Semantic Framework in Python\nDESCRIPTION: This Python snippet demonstrates the use of a high-level semantic codebase representation to perform batch refactoring of React JSX components. It iterates through all components in the codebase, detects those with no usages, and appends 'Page' to their names using a provided rename method. Dependencies may include a specialized codebase object (likely from the showcased framework) that exposes attributes such as jsx_components and per-component usages. Key parameters include each component's name and usage count; inputs are inferred as in-memory representations of code components. Output is the systematic renaming of all unused components, with the operation being fast and reliable due to in-memory processing and semantic understanding of code relationships.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/act-via-code.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor component in codebase.jsx_components:\n    # Rich structural analysis built-in\n    if len(component.usages) == 0:\n        # Systematic operations across the codebase\n        component.rename(component.name + 'Page')\n```\n\n----------------------------------------\n\nTITLE: Tracking Code Dependencies and Usages\nDESCRIPTION: Shows how to analyze code dependencies and usages for variable assignments using Codegen's API methods.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_114\n\nLANGUAGE: python\nCODE:\n```\nassignment = file.code_block.get_local_var_assignment(\"userId\")\n\n# Get all usages of the assignment\nusages = assignment.usages\n\n# Get all dependencies of the assignment\ndependencies = assignment.dependencies\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Codebase in Python\nDESCRIPTION: Illustrates how to make changes to a codebase using Codegen APIs and then commit those changes to disk. It demonstrates adding a comment to a file and using the commit() method.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n\ncodebase = Codebase(\"./\")\n\n# Make some changes\nfile = codebase.get_file(\"src/app.py\")\nfile.before(\"# 🌈 hello, world!\")\n\n# Changes aren't on disk yet\ncodebase.commit()  # Now they are!\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing a Semantic File Index in Python\nDESCRIPTION: Demonstrates how to create, save, load, and update a semantic code search index at the file level. The example shows the complete workflow from parsing a codebase to updating the index after code changes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_161\n\nLANGUAGE: python\nCODE:\n```\n# Parse a codebase\ncodebase = Codebase.from_repo('fastapi/fastapi', language='python')\n\n# Create index\nindex = FileIndex(codebase)\nindex.create() # computes per-file embeddings\n\n# Save index to .pkl\nindex.save('index.pkl')\n\n# Load index into memory\nindex.load('index.pkl')\n\n# Update index after changes\ncodebase.files[0].edit('# 🌈 Replacing File Content 🌈')\ncodebase.commit()\nindex.update() # re-computes 1 embedding\n```\n\n----------------------------------------\n\nTITLE: Finding Promise Chains in Twilio Codebase Methods\nDESCRIPTION: Scans through all classes and methods in the codebase to find promise chains that use operationPromise. It collects these chains along with their containing methods and files, skipping certain method names like 'each' and 'setPromiseCallback'.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/convert_promises_twilio_repository.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# loop through all files -> classes -> methods to find promise the operationPromise chains\noperation_promise_chains = []\nunique_files = set()\n\ni = 0\n\nfor _class in codebase.classes:\n    for method in _class.methods:\n        if method.name in [\"each\", \"setPromiseCallback\"]:\n            print(\"skipping method\", method.name, \"...\")\n            continue\n\n        # Only process methods containing operationPromise\n        if not method.find(\"operationPromise\"):\n            continue\n\n        # Find the first promise chain with then blocks\n        for promise_chain in method.promise_chains:\n            promise_statement = promise_chain.parent_statement\n            operation_promise_chains.append({\"function_name\": method.name, \"promise_chain\": promise_chain, \"promise_statement\": promise_statement})\n            unique_files.add(method.file.filepath)\n            i += 1\n            if i < 10:\n                print(f\"Found operation promise in the {method.name} method in {method.file.filepath} file.\")\n```\n\n----------------------------------------\n\nTITLE: Creating Dependency Graph Visualization in Python\nDESCRIPTION: This function builds a dependency graph visualization for a given symbol, recursively processing its dependencies up to a maximum depth.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_189\n\nLANGUAGE: python\nCODE:\n```\ndef create_dependencies_visualization(symbol: Symbol, depth: int = 0):\n    \"\"\"Creates visualization of symbol dependencies\n\n    Args:\n        symbol (Symbol): Starting symbol to analyze\n        depth (int): Current recursion depth\n    \"\"\"\n    # Prevent excessive recursion\n    if depth >= MAX_DEPTH:\n        return\n\n    # Process each dependency\n    for dep in symbol.dependencies:\n        dep_symbol = None\n\n        # Handle different dependency types\n        if isinstance(dep, Symbol):\n            # Direct symbol reference\n            dep_symbol = dep\n        elif isinstance(dep, Import):\n            # Import statement - get resolved symbol\n            dep_symbol = dep.resolved_symbol if dep.resolved_symbol else None\n\n        if dep_symbol:\n            # Add node with appropriate styling\n            G.add_node(dep_symbol,\n                      color=COLOR_PALETTE.get(dep_symbol.__class__.__name__,\n                                            \"#f694ff\"))\n\n            # Add dependency relationship\n            G.add_edge(symbol, dep_symbol)\n\n            # Recurse unless it's a class (avoid complexity)\n            if not isinstance(dep_symbol, PyClass):\n                create_dependencies_visualization(dep_symbol, depth + 1)\n```\n\n----------------------------------------\n\nTITLE: Safe Code Transformations: Moving, Renaming, and Editing Symbols in Python\nDESCRIPTION: This Python snippet showcases multiple safe code transformations provided by Codegen: moving Enum classes to a dedicated file (with automatic update of references/imports), renaming a function and its usages, changing function signatures, and programmatically editing arguments at call-sites. Relies on the Codegen API for change propagation and integrity. Inputs: codebase object. Outputs: Filesystem and codebase changes (upon commit). Handles formatting and edge cases.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Move all Enum classes to a dedicated file\nfor cls in codebase.classes:\n    if cls.is_subclass_of('Enum'):\n        # Codegen automatically:\n        # - Updates all imports that reference this class\n        # - Maintains the class's dependencies\n        # - Preserves comments and decorators\n        # - Generally performs this in a sane manner\n        cls.move_to_file(f'enums.py')\n\n# Rename a function and all its usages\nold_function = codebase.get_function('process_data')\nold_function.rename('process_resource')  # Updates all references automatically\n\n# Change a function's signature\nhandler = codebase.get_function('event_handler')\nhandler.get_parameter('e').rename('event') # Automatically updates all call-sites\nhandler.add_parameter('timeout: int = 30')  # Handles formatting and edge cases\nhandler.add_return_type('Response | None')\n\n# Perform surgery on call-sites\nfor fcall in handler.call_sites:\n    arg = fcall.get_arg_by_parameter_name('env')\n    # f(..., env={ data: x }) => f(..., env={ data: x or None })\n    if isinstance(arg.value, Collection):\n        data_key = arg.value.get('data')\n        data_key.value.edit(f'{data_key.value} or None')\n```\n\n----------------------------------------\n\nTITLE: Exploring Codebase Statistics and Structure in Python\nDESCRIPTION: This code analyzes a codebase, printing statistics about classes, functions, and imports. It also identifies the class with the deepest inheritance chain and lists recursive functions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Print overall stats\nprint(\"🔍 Codebase Analysis\")\nprint(\"=\" * 50)\nprint(f\"📚 Total Classes: {len(codebase.classes)}\")\nprint(f\"⚡ Total Functions: {len(codebase.functions)}\")\nprint(f\"🔄 Total Imports: {len(codebase.imports)}\")\n\n# Find class with most inheritance\nif codebase.classes:\n    deepest_class = max(codebase.classes, key=lambda x: len(x.superclasses))\n    print(f\"\\n🌳 Class with most inheritance: {deepest_class.name}\")\n    print(f\"   📊 Chain Depth: {len(deepest_class.superclasses)}\")\n    print(f\"   ⛓️ Chain: {' -> '.join(s.name for s in deepest_class.superclasses)}\")\n\n# Find first 5 recursive functions\nrecursive = [f for f in codebase.functions\n            if any(call.name == f.name for call in f.function_calls)][:5]\nif recursive:\n    print(f\"\\n🔄 Recursive functions:\")\n    for func in recursive:\n        print(f\"  - {func.name}\")\n```\n\n----------------------------------------\n\nTITLE: Import Resolution in Python using Codegen SDK\nDESCRIPTION: Shows how to trace imports to their original symbols and access file relationship information. This allows for analyzing import chains and determining where symbols are originally defined.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_87\n\nLANGUAGE: python\nCODE:\n```\n# Follow import chain to source\nimport_stmt = file.get_import(\"MyComponent\")\noriginal = import_stmt.resolved_symbol\n\nif original:\n    print(f\"Defined in: {original.file.filepath}\")\n    print(f\"Original name: {original.name}\")\n\n# Get file relationships\nprint(f\"From file: {import_stmt.from_file.filepath}\")\nprint(f\"To file: {import_stmt.to_file.filepath}\")\n```\n\n----------------------------------------\n\nTITLE: Providing Context to LLMs Using Static Analysis in Python\nDESCRIPTION: This code shows how to gather information about a function using GraphSitter's static analysis capabilities and pass it as context to the AI, providing valuable information like call sites, dependencies, and documentation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_151\n\nLANGUAGE: python\nCODE:\n```\nfunction = codebase.get_function(\"process_data\")\ncontext = {\n    \"call_sites\": function.call_sites,      # Where the function is called\n    \"dependencies\": function.dependencies,   # What the function depends on\n    \"parent\": function.parent,              # Class/module containing the function\n    \"docstring\": function.docstring,        # Existing documentation\n}\n\nresult = codebase.ai(\n    \"Improve this function's implementation\",\n    target=function,\n    context=context  # AI will see the gathered information\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Promise Chains to Async/Await with Try/Catch\nDESCRIPTION: Transforms all identified promise chains to async/await syntax and wraps them in try/catch blocks to handle errors. This process also cleans up the original callback handler and return statements, effectively modernizing the code while maintaining functionality.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/convert_promises_twilio_repository.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ni = 0\nassignment_variable_name = \"operation\"\n\nfor promise_chain_dict in operation_promise_chains:\n    promise_chain = promise_chain_dict[\"promise_chain\"]\n    promise_statement = promise_chain_dict[\"promise_statement\"]\n    function_name = promise_chain_dict[\"function_name\"]\n    # ---------- CONVERT PROMISE CHAIN TO ASYNC AWAIT ----------\n    async_await_code = promise_chain.convert_to_async_await(assignment_variable_name=assignment_variable_name, inplace_edit=False)\n\n    if i < 10:\n        print(f\"converting {function_name} promise chain to async/await.\")\n\n    i += 1\n    # ---------- ADD TRY CATCH BLOCK INSTEAD OF CALLBACK HANDLER ----------\n    new_code = f\"\"\"\\\n        try {{\n            {async_await_code}\n\n            if (callback) {{\n                callback(null, {assignment_variable_name});\n            }}\n\n            return {assignment_variable_name};\n        }} catch(err: any) {{\n            if (callback) {{\n                callback(err);\n            }}\n            throw err;\n        }}\"\"\"\n\n    promise_statement.edit(new_code)\n\n    # ---------- CLEAN UP CALLBACK HANDLER ASSIGNMENT AND SUBSEQUENT RETURN STATEMENT ----------\n    statements = promise_statement.parent.get_statements()\n    return_stmt = next((stmt for stmt in statements if stmt.statement_type == StatementType.RETURN_STATEMENT), None)\n    assign_stmt = next((stmt for stmt in reversed(statements) if stmt.statement_type == StatementType.ASSIGNMENT), None)\n\n    if return_stmt:\n        return_stmt.remove()\n    if assign_stmt:\n        assign_stmt.remove()\n\ncodebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Code Analysis and Improvement with AI in Python\nDESCRIPTION: This code demonstrates how to use AI to analyze function names for clarity and suggest improvements, automatically renaming functions whose names don't clearly describe their purpose.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_154\n\nLANGUAGE: python\nCODE:\n```\n# Improve function names\nfor function in codebase.functions:\n    if codebase.ai(\n        \"Does this function name clearly describe its purpose? Answer yes/no\",\n        target=function\n    ).lower() == \"no\":\n        new_name = codebase.ai(\n            \"Suggest a better name for this function\",\n            target=function,\n            context={\"call_sites\": function.call_sites}\n        )\n        function.rename(new_name)\n```\n\n----------------------------------------\n\nTITLE: Advanced Codebase Initialization\nDESCRIPTION: Shows advanced initialization using ProjectConfig for fine-grained control over repository configuration, base paths, and subdirectory filtering.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\nfrom codegen.git.repo_operator.local_repo_operator import LocalRepoOperator\nfrom codegen.git.schemas.repo_config import BaseRepoConfig\nfrom codegen.sdk.codebase.config import ProjectConfig\n\ncodebase = Codebase(\n    projects = [\n        ProjectConfig(\n            repo_operator=LocalRepoOperator(\n                repo_path=\"/tmp/codegen-sdk\",\n                repo_config=BaseRepoConfig(),\n                bot_commit=True\n            ),\n            language=\"typescript\",\n            base_path=\"src/codegen/sdk/typescript\",\n            subdirectories=[\"src/codegen/sdk/typescript\"]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Codebase from GitHub or Local Repository in Python\nDESCRIPTION: This snippet shows how to initialize a Codebase object either from a GitHub repository or a local directory, automatically parsing the codebase for analysis.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n\n# Clone + parse fastapi/fastapi\ncodebase = Codebase.from_repo('fastapi/fastapi')\n\n# Or, parse a local repository\ncodebase = Codebase(\"path/to/git/repo\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Codebase Analysis with Codegen in Python\nDESCRIPTION: This Python snippet demonstrates how to initialize the Codegen Codebase object for a local project directory and instantly access pre-computed relationships for a symbol such as dependencies and usages. It requires the codegen package and expects the specified codebase directory (e.g., \"./\") to be present. The get_symbol method retrieves a code entity (e.g., function), and its dependencies and usages can be accessed directly as properties. This example assumes the codebase has been analyzed and indexed, enabling real-time queries for backend usage such as refactoring or code insight tools.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/how-it-works.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Initialize and analyze the codebase\\nfrom codegen import Codebase\\ncodebase = Codebase(\"./\")\\n\\n# Access pre-computed relationships\\nfunction = codebase.get_symbol(\"process_data\")\\nprint(f\"Dependencies: {function.dependencies}\")  # Instant lookup\\nprint(f\"Usages: {function.usages}\")  # No parsing needed\\n\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Code Searches in Python\nDESCRIPTION: Shows how to search a codebase using natural language queries with a semantic index. The example demonstrates retrieving and displaying search results with relevance scores and content previews.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_162\n\nLANGUAGE: python\nCODE:\n```\n# Search with natural language\nresults = index.similarity_search(\n    \"How does FastAPI handle dependency injection?\",\n    k=5  # number of results\n)\n\n# Print results\nfor file, score in results:\n    print(f\"\\nScore: {score:.3f} | File: {file.filepath}\")\n    print(f\"Preview: {file.content[:200]}...\")\n```\n\n----------------------------------------\n\nTITLE: Creating Function Call Trace Visualization in Python\nDESCRIPTION: Recursively traces and visualizes downstream function call relationships from a target method. Handles depth limiting and adds nodes/edges to a graph with metadata for visualization.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/visualize_codebases/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef create_downstream_call_trace(src_func: Function, depth: int = 0):\n    \"\"\"Creates call graph for parent function by recursively traversing all function calls\"\"\"\n    if MAX_DEPTH <= depth:\n        return\n    if isinstance(src_func, ExternalModule):\n        return\n\n    for call in src_func.function_calls:\n        # Skip recursive calls\n        if call.name == src_func.name:\n            continue\n\n        func = call.function_definition\n        if not func:\n            continue\n\n        # Add node and edge to graph with metadata\n        G.add_node(func, name=func_name, color=COLOR_PALETTE.get(func.__class__.__name__))\n        G.add_edge(src_func, func, **generate_edge_meta(call))\n\n        # Recurse for nested calls\n        if isinstance(func, Function):\n            create_downstream_call_trace(func, depth + 1)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Codegen Codemod\nDESCRIPTION: Command to generate boilerplate for a new code manipulation program using Codegen create, with a description that triggers an LLM expert to compose an initial version.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncodegen create organize-types \\\n  -d \"Move all TypeScript types to \\\n      into a centralized types.ts file\"\n```\n\n----------------------------------------\n\nTITLE: Converting unittest Parameterized Tests to pytest\nDESCRIPTION: This snippet shows how to convert unittest's subTest-based parameterized tests to pytest's parametrize decorator. The pytest approach is more concise and makes it clear what parameters are being tested.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_233\n\nLANGUAGE: python\nCODE:\n```\n# From:\ndef test_validation(self):\n    test_cases = [(\"valid@email.com\", True), (\"invalid\", False)]\n    for email, expected in test_cases:\n        with self.subTest(email=email):\n            self.assertEqual(is_valid_email(email), expected)\n\n# To:\n@pytest.mark.parametrize(\"email,expected\", [\n    (\"valid@email.com\", True),\n    (\"invalid\", False)\n])\ndef test_validation(email, expected):\n    assert is_valid_email(email) == expected\n```\n\n----------------------------------------\n\nTITLE: Moving a Function Between Files with Codegen SDK\nDESCRIPTION: This code snippet shows how to move a function from one file to another using Codegen SDK. It gets a symbol from the source file and moves it to a destination file, showing both the basic approach and options for handling dependencies.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_194\n\nLANGUAGE: python\nCODE:\n```\n# Get the symbol\nsymbol_to_move = source_file.get_symbol(\"my_function\")\n# Pick a destination file\ndst_file = codebase.get_file(\"path/to/dst/location.py\")\n```\n\n----------------------------------------\n\nTITLE: Creating Function Modularity Graphs in Python using NetworkX\nDESCRIPTION: This function creates an undirected graph that groups functions based on shared dependencies. The weight of each edge is determined by the number of common dependencies between two functions, helping identify closely related functionality.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_140\n\nLANGUAGE: python\nCODE:\n```\ndef create_modularity_graph(functions: list[Function]):\n    graph = nx.Graph()\n\n    # Group functions by shared dependencies\n    for func in functions:\n        for dep in func.dependencies:\n            if isinstance(dep, Function):\n                weight = len(set(func.dependencies) & set(dep.dependencies))\n                if weight > 0:\n                    graph.add_edge(func.name, dep.name, weight=weight)\n\n    return graph\n\n# Visualize function modularity\nfuncs = codebase.functions\nmodularity_graph = create_modularity_graph(funcs)\ncodebase.visualize(modularity_graph)\n```\n\n----------------------------------------\n\nTITLE: Initializing Codegen Tools for Code Analysis in Python\nDESCRIPTION: Sets up the necessary imports and creates a function to initialize a Codebase object from a GitHub repository. It also defines a list of Codegen tools for various code analysis tasks.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_170\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\nfrom codegen.extensions.langchain.agent import create_agent_with_tools\nfrom codegen.extensions.langchain.tools import (\n    ListDirectoryTool,\n    RevealSymbolTool,\n    SearchTool,\n    SemanticSearchTool,\n    ViewFileTool,\n)\nfrom langchain_core.messages import SystemMessage\n\ndef initialize_codebase(repo_name: str) -> Optional[Codebase]:\n    \"\"\"Initialize a codebase with a spinner showing progress.\"\"\"\n    with console.status(\"\") as status:\n        try:\n            status.update(f\"[bold blue]Cloning {repo_name}...[/bold blue]\")\n            codebase = Codebase.from_repo(repo_name)\n            status.update(\"[bold green]✓ Repository cloned successfully![/bold green]\")\n            return codebase\n        except Exception as e:\n            console.print(f\"[bold red]Error initializing codebase:[/bold red] {e}\")\n            return None\n\n# Create research tools\ntools = [\n    ViewFileTool(codebase),      # View file contents\n    ListDirectoryTool(codebase),  # Explore directory structure\n    SearchTool(codebase),        # Text-based search\n    SemanticSearchTool(codebase), # Natural language search\n    RevealSymbolTool(codebase),  # Analyze symbol relationships\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Files and Directories in Python\nDESCRIPTION: Demonstrates how to access and check for files and directories in the codebase, including getting files by path and iterating over all files.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_61\n\nLANGUAGE: python\nCODE:\n```\n# Get a file from the codebase\nfile = codebase.get_file(\"path/to/file.py\")\n\n# Iterate over all files in the codebase\nfor file in codebase.files:\n    pass\n\n# Check if a file exists\nexists = codebase.has_file(\"path/to/file.py\")\n```\n\n----------------------------------------\n\nTITLE: Converting Promise Chains to Async/Await with Error Handling - Python\nDESCRIPTION: This Python script demonstrates how each located promise chain in the codebase is transformed to use async/await syntax. For every chain_info, it converts the promise chain using convert_to_async_await(), injects the result into a try/catch block for backward-compatible callback support, then mutates the codebase by editing or removing prior statements. Dependencies include code representation objects and the ability to edit abstract syntax trees. Inputs include the list of chain_info objects; outputs are code modifications per match. Limitations: Assumes a certain code structure for safe editing.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/promise-to-async-await-twilio.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor chain_info in operation_promise_chains:\n    promise_chain = chain_info[\"promise_chain\"]\n    promise_statement = chain_info[\"promise_statement\"]\n    \n    # Convert the chain\n    async_code = promise_chain.convert_to_async_await(\n        assignment_variable_name=\"operation\"\n    )\n    \n    # Add try-catch with callback handling\n    new_code = f\"\"\"\n        try {{\n            {async_code}\n            if (callback) {{\n                callback(null, operation);\n            }}\n            return operation;\n        }} catch(err: any) {{\n            if (callback) {{\n                callback(err);\n            }}\n            throw err;\n        }}\n    \"\"\"\n    promise_statement.edit(new_code)\n\n    # Clean up old statements\n    statements = promise_statement.parent.get_statements()\n    return_stmt = next((stmt for stmt in statements \n        if stmt.statement_type == StatementType.RETURN_STATEMENT), None)\n    assign_stmt = next((stmt for stmt in reversed(statements) \n        if stmt.statement_type == StatementType.ASSIGNMENT), None)\n\n    if return_stmt:\n        return_stmt.remove()\n    if assign_stmt:\n        assign_stmt.remove()\n```\n\n----------------------------------------\n\nTITLE: Using Sync Enabled Flag in Codegen Python\nDESCRIPTION: This example demonstrates how enabling the 'sync_enabled' flag affects graph synchronization during 'codebase.commit' in Codegen. It shows the difference between having the flag enabled and disabled and its implications on symbol availability after a commit. Understanding this feature helps manage codebase updates and their performance impact.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/advanced-settings.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfile = codebase.get_file(...)\nfile.insert_after(\"foobar = 1\")\ncodebase.commit()\n\nfoobar = codebase.get_symbol(\"foobar\")\nassert foobar  # foobar is available after commit / graph sync\n\n# Example with `sync_enabled` disabled:\nfile = codebase.get_file(...)\nfile.insert_after(\"foobar = 1\")\n\nfoobar = codebase.get_symbol(\"foobar\", optional=True)\nassert not foobar  # foobar is not available after commit\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Basic Code Agent\nDESCRIPTION: This snippet shows how to create a CodeAgent instance, load a codebase from a GitHub repo, and run the agent with a prompt.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_166\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import CodeAgent, Codebase\n\n# Grab a repo from Github\ncodebase = Codebase.from_repo('fastapi/fastapi')\n\n# Create a code agent with read/write codebase access\nagent = CodeAgent(codebase)\n\n# Run the agent with a prompt\nagent.run(\"Tell me about this repo\")\n```\n\n----------------------------------------\n\nTITLE: Splitting Large Test Files into Separate Modules with Codegen in Python\nDESCRIPTION: This code splits large test files into separate modules by grouping test functions based on naming patterns. It uses Codegen's move_to_file functionality to reorganize tests while automatically updating imports and maintaining code correctness.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfilename = 'tests/test_path.py'\nprint(f\"📦 Splitting Test File: {filename}\")\nprint(\"=\" * 50)\n\n# Grab a file\nfile = codebase.get_file(filename)\nbase_name = filename.replace('.py', '')\n\n# Group tests by subpath\ntest_groups = {}\nfor test_function in file.functions:\n    if test_function.name.startswith('test_'):\n        test_subpath = '_'.join(test_function.name.split('_')[:3])\n        if test_subpath not in test_groups:\n            test_groups[test_subpath] = []\n        test_groups[test_subpath].append(test_function)\n\n# Print and process each group\nfor subpath, tests in test_groups.items():\n    print(f\"\\n{subpath}/\")\n    new_filename = f\"{base_name}/{subpath}.py\"\n\n    # Create file if it doesn't exist\n    if not codebase.has_file(new_filename):\n        new_file = codebase.create_file(new_filename)\n    file = codebase.get_file(new_filename)\n\n    # Move each test in the group\n    for test_function in tests:\n        print(f\"    - {test_function.name}\")\n        test_function.move_to_file(new_file, strategy=\"add_back_edge\")\n\n# Commit changes to disk\ncodebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Initializing Codegen Project in Bash\nDESCRIPTION: Demonstrates the command to initialize a Codegen project using the CLI. The command includes optional flags for fetching documentation, specifying a repository name, and setting an organization name.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncodegen init [--fetch-docs] [--repo-name NAME] [--organization-name ORG]\n```\n\n----------------------------------------\n\nTITLE: Transforming Flask template rendering to FastAPI's Jinja2Templates\nDESCRIPTION: This code transforms Flask's render_template function calls to FastAPI's Jinja2Templates.TemplateResponse. It modifies the function name, converts template variables to a context dictionary, and adds the required request parameter.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_259\n\nLANGUAGE: python\nCODE:\n```\nfor func_call in file.function_calls:\n    if func_call.name == \"render_template\":\n        # Convert to FastAPI's template response\n        func_call.set_name(\"Jinja2Templates(directory='templates').TemplateResponse\")\n        if len(func_call.args) > 1:\n            # Convert template variables to context dict\n            context_arg = \", \".join(\n                f\"{arg.name}={arg.value}\" for arg in func_call.args[1:]\n            )\n            func_call.set_kwarg(\"context\", f\"{'{'}\"}{context_arg}{\"{'}\")\n        # Add required request parameter\n        func_call.set_kwarg(\"request\", \"request\")\n```\n\n----------------------------------------\n\nTITLE: Leveraging Graph Relations for Analysis and Cleanup in Python\nDESCRIPTION: This Python snippet shows how to leverage Codegen's graph-based representation for higher-level analysis: identifying dead code, examining import relationships, and exploring class inheritance trees. It iterates over the codebase to find unused functions for deletion, lists files importing a specific module, and prints subclass hierarchies. Inputs: codebase object, file/class names as strings. Outputs: Console output for analysis and cleanup, or changes to codebase state.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Find dead code\nfor func in codebase.functions:\n    if len(func.usages) == 0:\n        print(f'🗑️ Dead code: {func.name}')\n        func.remove()\n\n# Analyze import relationships\nfile = codebase.get_file('api/endpoints.py')\nprint(\"\\nFiles that import endpoints.py:\")\nfor import_stmt in file.inbound_imports:\n    print(f\"  {import_stmt.file.path}\")\n\nprint(\"\\nFiles that endpoints.py imports:\")\nfor import_stmt in file.imports:\n    if import_stmt.resolved_symbol:\n        print(f\"  {import_stmt.resolved_symbol.file.path}\")\n\n# Explore class hierarchies\nbase_class = codebase.get_class('BaseModel')\nif base_class:\n    print(f\"\\nClasses that inherit from {base_class.name}:\")\n    for subclass in base_class.subclasses:\n        print(f\"  {subclass.name}\")\n        # We can go deeper in the inheritance tree\n        for sub_subclass in subclass.subclasses:\n            print(f\"    └─ {sub_subclass.name}\")\n```\n\n----------------------------------------\n\nTITLE: Converting Default Exports to Named Exports in TypeScript with Codegen\nDESCRIPTION: A codemod that finds and converts default exports to named exports in a TypeScript codebase. It maps shared files to their non-shared counterparts, identifies default exports, and converts them using the make_non_default() method.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_217\n\nLANGUAGE: python\nCODE:\n```\nfor file in codebase.files:\n    target_file = file.filepath\n    if not target_file:\n        print(f\"⚠️ Target file not found: {filepath}\")\n        continue\n\n    # Get corresponding non-shared file\n    non_shared_path = target_file.filepath.replace('/shared/', '/')\n    if not codebase.has_file(non_shared_path):\n        print(f\"⚠️ No matching non-shared file for: {filepath}\")\n        continue\n\n    non_shared_file = codebase.get_file(non_shared_path)\n    print(f\"📄 Processing {target_file.filepath}\")\n\n    # Process individual exports\n    for export in target_file.exports:\n        # Handle default exports\n        if export.is_reexport() and export.is_default_export():\n            print(f\"  🔄 Converting default export '{export.name}'\")\n            default_export = next((e for e in non_shared_file.default_exports), None)\n            if default_export:\n                default_export.make_non_default()\n\n    print(f\"✨ Fixed exports in {target_file.filepath}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Symbol Dependency Visualization in Python\nDESCRIPTION: Maps and visualizes symbol dependencies throughout the codebase by recursively traversing symbol relationships and creating a dependency graph.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/visualize_codebases/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef create_dependencies_visualization(symbol: Symbol, depth: int = 0):\n    \"\"\"Creates a visualization of symbol dependencies in the codebase\"\"\"\n    if depth >= MAX_DEPTH:\n        return\n\n    for dep in symbol.dependencies:\n        dep_symbol = None\n        if isinstance(dep, Symbol):\n            dep_symbol = dep\n        elif isinstance(dep, Import):\n            dep_symbol = dep.resolved_symbol if dep.resolved_symbol else None\n\n        if dep_symbol:\n            G.add_node(dep_symbol, color=COLOR_PALETTE.get(dep_symbol.__class__.__name__, \"#f694ff\"))\n            G.add_edge(symbol, dep_symbol)\n\n            if not isinstance(dep_symbol, Class):\n                create_dependencies_visualization(dep_symbol, depth + 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Call Graphs for Visualization\nDESCRIPTION: This Python function creates a call graph for a given entry point function. It recursively adds nodes and edges to represent function calls, enabling visualization of execution paths.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_136\n\nLANGUAGE: python\nCODE:\n```\ndef create_call_graph(entry_point: Function):\n    graph = nx.DiGraph()\n\n    def add_calls(func):\n        for call in func.call_sites:\n            called_func = call.resolved_symbol\n            if called_func:\n                # Add function objects for rich previews\n                graph.add_node(func)\n                graph.add_node(called_func)\n                graph.add_edge(func, called_func)\n                add_calls(called_func)\n\n    add_calls(entry_point)\n    return graph\n\n# Visualize API endpoint call graph\nendpoint = codebase.get_function(\"handle_request\")\ncall_graph = create_call_graph(endpoint)\ncodebase.visualize(call_graph, root=endpoint)\n```\n\n----------------------------------------\n\nTITLE: Querying Dependencies with Different Usage Types in Python\nDESCRIPTION: This snippet demonstrates how to query dependencies using different usage types. It shows how to get direct, chained, indirect, and aliased dependencies, as well as how to combine usage types.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_109\n\nLANGUAGE: python\nCODE:\n```\n# Get all direct dependencies\ndeps = my_class.dependencies  # Shorthand for dependencies(UsageType.DIRECT)\n\n# Get dependencies of specific types\ndirect_deps = my_class.dependencies(UsageType.DIRECT)\nchained_deps = my_class.dependencies(UsageType.CHAINED)\nindirect_deps = my_class.dependencies(UsageType.INDIRECT)\n\n# Get both direct and indirect dependencies\ndeps = my_class.dependencies(UsageType.DIRECT | UsageType.INDIRECT)\n\n# Get all types of dependencies\ndeps = my_class.dependencies(\n    UsageType.DIRECT | UsageType.CHAINED |\n    UsageType.INDIRECT | UsageType.ALIASED\n)\n```\n\n----------------------------------------\n\nTITLE: Exploring a Codebase: Printing Stats and Class Inheritance in Python\nDESCRIPTION: This Python snippet prints overall statistics about the parsed codebase, including class/function/import counts, finds the class with the deepest inheritance, and locates recursive functions. Requires a Codebase instance (as above). Outputs information to the console for quick insight. Key features: iteration over Codegen's classes/functions, basic analytics, terminal output.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Print overall stats\nprint(\"🔍 Codebase Analysis\")\nprint(\"=\" * 50)\nprint(f\"📚 Total Classes: {len(codebase.classes)}\")\nprint(f\"⚡ Total Functions: {len(codebase.functions)}\")\nprint(f\"🔄 Total Imports: {len(codebase.imports)}\")\n\n# Find class with most inheritance\nif codebase.classes:\n    deepest_class = max(codebase.classes, key=lambda x: len(x.superclasses))\n    print(f\"\\n🌳 Class with most inheritance: {deepest_class.name}\")\n    print(f\"   📊 Chain Depth: {len(deepest_class.superclasses)}\")\n    print(f\"   ⛓️ Chain: {' -> '.join(s.name for s in deepest_class.superclasses)}\")\n\n# Find first 5 recursive functions\nrecursive = [f for f in codebase.functions\n            if any(call.name == f.name for call in f.function_calls)][:5]\nif recursive:\n    print(f\"\\n🔄 Recursive functions:\")\n    for func in recursive:\n        print(f\"  - {func.name}\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Class Inheritance Graphs\nDESCRIPTION: This Python function creates a graph representation of class inheritance relationships. It recursively adds edges between base classes and their subclasses, enabling visualization of the inheritance hierarchy.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_138\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\n\nG = nx.DiGraph()\nbase = codebase.get_class(\"BaseModel\")\n\ndef add_subclasses(cls):\n    for subclass in cls.subclasses:\n        G.add_edge(cls, subclass)\n        add_subclasses(subclass)\n\nadd_subclasses(base)\n\ncodebase.visualize(G, root=base)\n```\n\n----------------------------------------\n\nTITLE: Creating Symbol-Level Semantic Index in Python\nDESCRIPTION: Demonstrates how to import and initialize a SymbolIndex for more granular semantic code search. This experimental index operates at the symbol level (functions, classes, methods) for more specific searches.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_164\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen.extensions.index.symbol_index import SymbolIndex\n\nindex = SymbolIndex(codebase)\nindex.create()\n```\n\n----------------------------------------\n\nTITLE: Intuitive Code Transformation APIs in Python\nDESCRIPTION: These Python code snippets demonstrate Codegen's API designed for readability and simplicity, providing natural language-like methods for renaming functions, moving code between files, and iterating over usages. This approach abstracts away the complexities of syntax trees and parsing, focusing on direct developer intentions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/guiding-principles.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Methods that read like English\nfunction.rename(\"new_name\")  # Not ast.update_node(function_node, \"name\", \"new_name\")\nfunction.move_to_file(\"new_file.py\")  # Not ast.relocate_node(function_node, \"new_file.py\")\n\n# Clean, readable properties\nif function.is_async:  # Not ast.get_node_attribute(function_node, \"async\")\n    print(function.name)  # Not ast.get_node_name(function_node)\n\n# Natural iteration patterns\nfor usage in function.usages:  # Not ast.find_references(function_node)\n    print(f\"Used in {usage.file.name}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Codebase Settings in Python\nDESCRIPTION: This Python snippet demonstrates how to import configuration classes from Codegen and outlines support for advanced codebase configuration. Allows users to tailor graph construction, debug problematic repositories, and enable experimental features. Inputs: None. Outputs: Definitions and imports for later configuration usage.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\nfrom codegen.configs import CodebaseConfig\n```\n\n----------------------------------------\n\nTITLE: Building and Traversing Call Graphs with Codegen's Python API\nDESCRIPTION: Demonstrates how to build and analyze function call graphs using Codegen's API and NetworkX. This snippet includes creating a call graph, filtering paths, and visualizing the results.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_129\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\nfrom codegen.sdk.core.interfaces.callable import FunctionCallDefinition\nfrom codegen.sdk.core.function import Function\nfrom codegen.sdk.core.external_module import ExternalModule\n\ndef create_call_graph(start_func, end_func, max_depth=5):\n    G = nx.DiGraph()\n\n    def traverse_calls(parent_func, current_depth):\n        if current_depth > max_depth:\n            return\n\n        # Determine source node\n        if isinstance(parent_func, Function):\n            src_call = src_func = parent_func\n        else:\n            src_func = parent_func.function_definition\n            src_call = parent_func\n\n        # Skip external modules\n        if isinstance(src_func, ExternalModule):\n            return\n\n        # Traverse all function calls\n        for call in src_func.function_calls:\n            func = call.function_definition\n\n            # Skip recursive calls\n            if func.name == src_func.name:\n                continue\n\n            # Add nodes and edges\n            G.add_node(call)\n            G.add_edge(src_call, call)\n\n            # Check if we reached the target\n            if func == end_func:\n                G.add_edge(call, end_func)\n                return\n\n            # Continue traversal\n            traverse_calls(call, current_depth + 1)\n\n    # Initialize graph\n    G.add_node(start_func, color=\"blue\")  # Start node\n    G.add_node(end_func, color=\"red\")     # End node\n\n    # Start traversal\n    traverse_calls(start_func, 1)\n    return G\n\n# Usage example\nstart = codebase.get_function(\"create_skill\")\nend = codebase.get_function(\"auto_define_skill_description\")\ngraph = create_call_graph(start, end)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Find all paths between start and end\nall_paths = nx.all_simple_paths(graph, source=start, target=end)\n\n# Create subgraph of only the nodes in these paths\nnodes_in_paths = set()\nfor path in all_paths:\n    nodes_in_paths.update(path)\nfiltered_graph = graph.subgraph(nodes_in_paths)\n\n# Visualize the graph\ncodebase.visualize(filtered_graph)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef find_dead_code(codebase):\n    dead_functions = []\n    for function in codebase.functions:\n        if not any(function.function_calls):\n            # No other functions call this one\n            dead_functions.append(function)\n    return dead_functions\n```\n\n----------------------------------------\n\nTITLE: Converting Query to Select in SQLAlchemy 2.0\nDESCRIPTION: Demonstrates how to replace legacy query() syntax with modern select() statements in SQLAlchemy 2.0. This transformation updates filter conditions to use explicit comparison operators and adds the proper execute() and scalars() method chain.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_1.6_to_2.0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# From:\nsession.query(User).filter_by(name=\"john\").all()\n\n# To:\nsession.execute(select(User).where(User.name == \"john\")).scalars().all()\n```\n\n----------------------------------------\n\nTITLE: Query Transformation Logic\nDESCRIPTION: Transformation logic to combine multiple useSuspenseQuery calls into a single useSuspenseQueries call while maintaining variable names and configurations.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/usesuspensequery_to_usesuspensequeries/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnew_query = f\"const [{', '.join(results)}] = useSuspenseQueries({{queries: [{', '.join(queries)}]}})\"\n```\n\n----------------------------------------\n\nTITLE: Processing Shared Directory Reexports in TypeScript with Codegen\nDESCRIPTION: A complete codemod that processes files in a shared directory, handling reexports by creating appropriate export statements and updating import usages. It manages wildcard exports, type exports, and normal exports while maintaining the correct relative paths.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_216\n\nLANGUAGE: python\nCODE:\n```\nprocessed_imports = set()\n\nfor file in codebase.files:\n    # Only process files under /src/shared\n    if '/src/shared' not in file.filepath:\n        continue\n\n    # Gather all reexports that are not external exports\n    all_reexports = []\n    for export_stmt in file.export_statements:\n        for export in export_stmt.exports:\n            if export.is_reexport() and not export.is_external_export:\n                all_reexports.append(export)\n\n    # Skip if there are none\n    if not all_reexports:\n        continue\n\n    for export in all_reexports:\n        has_wildcard = False\n\n        # Replace \"src/\" with \"src/shared/\"\n        resolved_public_file = export.resolved_symbol.filepath.replace(\"src/\", \"src/shared/\")\n\n        # Get relative path from the \"public\" file back to the original file\n        relative_path = codebase.get_relative_path(\n            from_file=resolved_public_file,\n            to_file=export.resolved_symbol.filepath\n        )\n\n        # Ensure the \"public\" file exists\n        if not codebase.has_file(resolved_public_file):\n            target_file = codebase.create_file(resolved_public_file, sync=True)\n        else:\n            target_file = codebase.get_file(resolved_public_file)\n\n        # If target file already has a wildcard export for this relative path, skip\n        if target_file.has_export_statement_for_path(relative_path, \"WILDCARD\"):\n            has_wildcard = True\n            continue\n\n        # Compare \"public\" path to the local file's export.filepath\n        if codebase._remove_extension(resolved_public_file) != codebase._remove_extension(export.filepath):\n\n            # A) Wildcard export, e.g. `export * from \"...\"`\n            if export.is_wildcard_export():\n                target_file.insert_before(f'export * from \"{relative_path}\"')\n\n            # B) Type export, e.g. `export type { Foo, Bar } from \"...\"`\n            elif export.is_type_export():\n                # Does this file already have a type export statement for the path?\n                statement = file.get_export_statement_for_path(relative_path, \"TYPE\")\n                if statement:\n                    # Insert into existing statement\n                    if export.is_aliased():\n                        statement.insert(0, f\"{export.resolved_symbol.name} as {export.name}\")\n                    else:\n                        statement.insert(0, f\"{export.name}\")\n                else:\n                    # Insert a new type export statement\n                    if export.is_aliased():\n                        target_file.insert_before(\n                            f'export type {{ {export.resolved_symbol.name} as {export.name} }} '\n                            f'from \"{relative_path}\"'\n                        )\n                    else:\n                        target_file.insert_before(\n                            f'export type {{ {export.name} }} from \"{relative_path}\"'\n                        )\n\n            # C) Normal export, e.g. `export { Foo, Bar } from \"...\"`\n            else:\n                statement = file.get_export_statement_for_path(relative_path, \"EXPORT\")\n                if statement:\n                    # Insert into existing statement\n                    if export.is_aliased():\n                        statement.insert(0, f\"{export.resolved_symbol.name} as {export.name}\")\n                    else:\n                        statement.insert(0, f\"{export.name}\")\n                else:\n                    # Insert a brand-new normal export statement\n                    if export.is_aliased():\n                        target_file.insert_before(\n                            f'export {{ {export.resolved_symbol.name} as {export.name} }} '\n                            f'from \"{relative_path}\"'\n                        )\n                    else:\n                        target_file.insert_before(\n                            f'export {{ {export.name} }} from \"{relative_path}\"'\n                        )\n\n        # Now update all import usages that refer to this export\n        for usage in export.symbol_usages():\n            if isinstance(usage, TSImport) and usage not in processed_imports:\n                processed_imports.add(usage)\n\n                # Translate the resolved_public_file to the usage file's TS config import path\n                new_path = usage.file.ts_config.translate_import_path(resolved_public_file)\n\n                if has_wildcard and export.name != export.resolved_symbol.name:\n                    name = f\"{export.resolved_symbol.name} as {export.name}\"\n                else:\n                    name = usage.name\n\n                if usage.is_type_import():\n                    new_import = f'import type {{ {name} }} from \"{new_path}\"'\n                else:\n                    new_import = f'import {{ {name} }} from \"{new_path}\"'\n\n                usage.file.insert_before(new_import)\n                usage.remove()\n\n        # Remove the old export from the original file\n        export.remove()\n\n    # If the file ends up with no exports, remove it entirely\n    if not file.export_statements and len(file.symbols) == 0:\n        file.remove()\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Codegen\nDESCRIPTION: Shows various installation commands for Codegen using UV package manager, including installing it in an existing project, as a global CLI tool, and using it to create and run codemods.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install inside existing project\nuv pip install codegen\n\n# Install global CLI\nuv tool install codegen --python 3.13\n\n# Create a codemod for a given repo\ncd path/to/repo\ncodegen init\ncodegen create test-function\n\n# Run the codemod\ncodegen run test-function\n\n# Create an isolated venv with codegen => open jupyter\ncodegen notebook\n```\n\n----------------------------------------\n\nTITLE: Creating Pydantic Schema Classes from Dictionary Content\nDESCRIPTION: Generates a Pydantic BaseModel class definition based on the content of a dictionary. It creates a meaningful class name by capitalizing the variable name and converts dictionary key-value pairs to class attributes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/dict_to_schema/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass_name = global_var.name.title() + \"Schema\"\nmodel_def = f\"\"\"class {class_name}(BaseModel):\n    {dict_content.replace(\",\", \"\\n    \")}\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing React Component Trees\nDESCRIPTION: This Python function creates a tree representation of React component hierarchy. It recursively adds edges between parent and child components, enabling visualization of the component structure.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_137\n\nLANGUAGE: python\nCODE:\n```\ndef create_component_tree(root_component: Class):\n    graph = nx.DiGraph()\n\n    def add_children(component):\n        for usage in component.usages:\n            if isinstance(usage.parent, Class) and \"Component\" in usage.parent.bases:\n                graph.add_edge(component.name, usage.parent.name)\n                add_children(usage.parent)\n\n    add_children(root_component)\n    return graph\n\n# Visualize component hierarchy\napp = codebase.get_class(\"App\")\ncomponent_tree = create_component_tree(app)\ncodebase.visualize(component_tree, root=app)\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen Python SDK with pip or uv - Bash\nDESCRIPTION: Provides the commands to install the Codegen SDK in a Python environment using pip or uv. The instructions cover standard and alternative installation methods to suit different developer workflows. Ensure you have Python and pip or uv installed on your system before running these commands. No arguments are required; simply run the preferred command in your terminal to add the SDK to your environment.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install codegen\n# or\nuv pip install codegen\n```\n\n----------------------------------------\n\nTITLE: Visualizing Codebase Structure with NetworkX and d3\nDESCRIPTION: This Python snippet demonstrates how to create and visualize a graph representation of a codebase using NetworkX and d3. It shows basic graph creation and node addition.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_135\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\n\n# Basic visualization\nG = nx.grid_2d_graph(5, 5)\n# Or start with an empty graph\n# G = nx.DiGraph()\ncodebase.visualize(G)\n\n# Adding nodes\nfunction = codebase.get_function(\"my_function\")\n\n# Add the function object directly - enables source code preview\ngraph.add_node(function)  # Will show function's source code on click\n\n# Add just the name - no extra features\ngraph.add_node(function.name)  # Will only show the name\n```\n\n----------------------------------------\n\nTITLE: Getting Agent Task Status\nDESCRIPTION: The get_status() method retrieves the current status information of a task. It returns a dictionary with task information or None if no task has been run.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/agents/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nget_status() -> Optional[Dict[str, Any]]\n```\n\n----------------------------------------\n\nTITLE: Example Semantic Search Queries in Python\nDESCRIPTION: Shows examples of different semantic search queries for finding authentication-related code, error handling patterns, and configuration management. These demonstrate how the semantic search can understand concepts beyond exact keyword matches.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_165\n\nLANGUAGE: python\nCODE:\n```\n# Find authentication-related code\nresults = index.similarity_search(\n    \"How is user authentication implemented?\",\n    k=3\n)\n\n# Find error handling patterns\nresults = index.similarity_search(\n    \"Show me examples of error handling and custom exceptions\",\n    k=3\n)\n\n# Find configuration management\nresults = index.similarity_search(\n    \"Where is the application configuration and settings handled?\",\n    k=3\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Codebase with Configuration in Python\nDESCRIPTION: This code snippet demonstrates how to initialize a Codebase object with a custom configuration using CodebaseConfig in Python. Required dependencies include the 'codegen' library and its respective modules. The snippet allows setting various flags to customize the graph construction process, useful for optimizing performance or testing experimental features.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/advanced-settings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\nfrom codegen.configs import CodebaseConfig\n\n# Initialize a Codebase with custom configuration\ncodebase = Codebase(\n    \"<repo_path>\",\n    config=CodebaseConfig(\n        flag1=...,\n        flag2=...,\n        ...\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: File Content and Metadata Access in Python Codegen\nDESCRIPTION: Shows how to access file content and metadata properties including name, extension, filepath, and directory information.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_69\n\nLANGUAGE: python\nCODE:\n```\n# Grab raw file string content\ncontent = file.content # For text files\nprint('Length:', len(content))\nprint('# of functions:', len(file.functions))\n\n# Access file metadata\nname = file.name # Base name without extension\nextension = file.extension # File extension with dot\nfilepath = file.filepath # Full relative path\ndir = file.directory # Parent directory\n\n# Access directory metadata\nname = dir.name # Base name without extension\npath = dir.path # Full relative path from repository root\nparent = dir.parent # Parent directory\n```\n\n----------------------------------------\n\nTITLE: Customizing Graph Visualizations with NetworkX in Python\nDESCRIPTION: This function demonstrates how to create customized graphs that preserve smart node features while adding custom attributes like color, shape, and edge styles based on function properties such as visibility and execution conditions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_141\n\nLANGUAGE: python\nCODE:\n```\ndef create_custom_graph(codebase):\n    graph = nx.DiGraph()\n\n    # Add nodes with custom attributes while preserving source preview\n    for func in codebase.functions:\n        graph.add_node(func,\n            color='red' if func.is_public else 'blue',\n            shape='box' if func.is_async else 'oval'\n        )\n\n    # Add edges between actual function objects\n    for func in codebase.functions:\n        for call in func.call_sites:\n            if call.resolved_symbol:\n                graph.add_edge(func, call.resolved_symbol,\n                    style='dashed' if call.is_conditional else 'solid',\n                    weight=call.count\n                )\n\n    return graph\n```\n\n----------------------------------------\n\nTITLE: Checking Out Git Branches and Commits in Python\nDESCRIPTION: Shows how to switch between Git branches and commits, create new branches, and pull from remote repositories using the Codebase.checkout method.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_60\n\nLANGUAGE: python\nCODE:\n```\n# Checkout a branch\nresult = codebase.checkout(branch=\"feature/new-api\")\n\n# Create a new branch if it doesn't exist\nresult = codebase.checkout(branch=\"feature/new-api\", create_if_missing=True)\n\n# Checkout a specific commit\nresult = codebase.checkout(commit=\"abc123\")\n\n# Checkout and pull from remote\nresult = codebase.checkout(branch=\"main\", remote=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Codemods\nDESCRIPTION: Demonstrates how to create reusable code transformations using the @codegen.function decorator with and without arguments.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport codegen\nfrom codegen import Codebase\n\n@codegen.function(\"update-imports\")\ndef run(codebase: Codebase):\n    \"\"\"Update import statements to use new package names.\"\"\"\n    for file in codebase.files:\n        for imp in file.imports:\n            if imp.module == \"old_package\":\n                imp.rename(\"new_package\")\n    codebase.commit()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass RenameArgs(BaseModel):\n    old_name: str\n    new_name: str\n\n@codegen.function(\"rename-function\")\ndef run(codebase: Codebase, arguments: RenameArgs):\n    \"\"\"Rename a function across the codebase.\"\"\"\n    old_func = codebase.get_function(arguments.old_name)\n    if old_func:\n        old_func.rename(arguments.new_name)\n    codebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Refactoring React Components into Separate Files\nDESCRIPTION: This Python script identifies React components in a codebase, filters out non-default exports, and moves them to separate files. It also updates imports accordingly.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_133\n\nLANGUAGE: python\nCODE:\n```\n# Find (named) React components\nreact_components = [\n    func for func in codebase.functions\n    if func.is_jsx and func.name is not None\n]\n\n# Filter out those that are not the default export\nnon_default_components = [\n    comp for comp in react_components\n    if not comp.export or not comp.export.is_default_export()\n]\n\n# Move these non-default components to new files\nfor component in react_components:\n    if component != default_component:\n        # Create new file\n        new_file_path = '/'.join(component.filepath.split('/')[:-1]) + f\"{component.name}.tsx\"\n        new_file = codebase.create_file(new_file_path)\n\n        # Move component and update imports\n        component.move_to_file(new_file, strategy=\"add_back_edge\")\n```\n\n----------------------------------------\n\nTITLE: Determining Documentation Coverage in Python Codebase\nDESCRIPTION: A Python script that analyzes a codebase to determine documentation coverage by counting functions and classes with docstrings. It calculates and displays percentages for function documentation, class documentation, and overall documentation coverage.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_219\n\nLANGUAGE: python\nCODE:\n```\n# Initialize counters\ntotal_functions = 0\nfunctions_with_docs = 0\ntotal_classes = 0\nclasses_with_docs = 0\n\n# Check functions\nfor function in codebase.functions:\n    total_functions += 1\n    if function.docstring:\n        functions_with_docs += 1\n\n# Check classes\nfor cls in codebase.classes:\n    total_classes += 1\n    if cls.docstring:\n        classes_with_docs += 1\n\n# Calculate percentages\nfunc_coverage = (functions_with_docs / total_functions * 100) if total_functions > 0 else 0\nclass_coverage = (classes_with_docs / total_classes * 100) if total_classes > 0 else 0\n\n# Print results with emojis\nprint(\"\\n📊 Documentation Coverage Report:\")\nprint(f\"\\n📝 Functions:\")\nprint(f\"  • Total: {total_functions}\")\nprint(f\"  • Documented: {functions_with_docs}\")\nprint(f\"  • Coverage: {func_coverage:.1f}%\")\n\nprint(f\"\\n📚 Classes:\")\nprint(f\"  • Total: {total_classes}\")\nprint(f\"  • Documented: {classes_with_docs}\")\nprint(f\"  • Coverage: {class_coverage:.1f}%\")\n\nprint(f\"\\n🎯 Overall Coverage: {((functions_with_docs + classes_with_docs) / (total_functions + total_classes) * 100):.1f}%\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Maintainability Index in Python\nDESCRIPTION: Function to compute the Maintainability Index, a metric indicating code maintainability. It uses Halstead Volume, Cyclomatic Complexity, and Lines of Code in its calculation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_176\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_maintainability_index(\n    halstead_volume: float, cyclomatic_complexity: float, loc: int\n) -> int:\n    \"\"\"Calculate the normalized maintainability index for a given function.\"\"\"\n    if loc <= 0:\n        return 100\n\n    try:\n        raw_mi = (\n            171\n            - 5.2 * math.log(max(1, halstead_volume))\n            - 0.23 * cyclomatic_complexity\n            - 16.2 * math.log(max(1, loc))\n        )\n        normalized_mi = max(0, min(100, raw_mi * 100 / 171))\n        return int(normalized_mi)\n    except (ValueError, TypeError):\n        return 0\n```\n\n----------------------------------------\n\nTITLE: Manipulating JSX Elements in Python\nDESCRIPTION: This code snippet shows how to work with JSX elements in a React component. It demonstrates accessing, modifying, and wrapping JSX elements, as well as manipulating their props.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_132\n\nLANGUAGE: python\nCODE:\n```\n# Get all JSX elements in a component\nfor element in component.jsx_elements:\n    # Access element name\n    if element.name == \"Button\":\n        # Wrap element in a div\n        element.wrap(\"<div className='wrapper'>\", \"</div>\")\n\n    # Get specific prop\n    specific_prop = element.get_prop(\"className\")\n\n    # Iterate over all props\n    for prop in element.props:\n        if prop.name == \"className\":\n            # Set prop value\n            prop.set_value('\"my-classname\"')\n\n    # Modify element\n    element.set_name(\"NewComponent\")\n    element.add_prop(\"newProp\", \"{value}\")\n\n    # Get child JSX elements\n    child_elements = element.jsx_elements\n\n    # Wrap element in a JSX expression (preserves whitespace)\n    element.wrap(\"<div className='wrapper'>\", \"</div>\")\n```\n\n----------------------------------------\n\nTITLE: Moving Symbols with Dependencies and Import Updates in Python and TypeScript\nDESCRIPTION: Demonstrates how to move a symbol to another file with dependencies and update references. The example shows moving a function with its dependencies while adding an import back to the original file location.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_198\n\nLANGUAGE: python\nCODE:\n```\n# Move the symbol, move all of its dependencies with it (remove from old file), and add an import of symbol into old file\nsymbol_to_move.move_to_file(dst_file, include_dependencies=True, strategy=\"add_back_edge\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\n# Get the symbol\nsymbol_to_move = source_file.get_symbol(\"myFunction\")\n# Pick a destination file\ndst_file = codebase.get_file(\"path/to/dst/location.ts\")\n# Move the symbol, move all of its dependencies with it (remove from old file), and add an import of symbol into old file\nsymbol_to_move.move_to_file(dst_file, include_dependencies=True, strategy=\"add_back_edge\")\n```\n\n----------------------------------------\n\nTITLE: Identifying Strongly Connected Components in Import Graph using NetworkX\nDESCRIPTION: This snippet uses NetworkX to identify strongly connected components (cycles) in the import graph, filtering for components with more than one node to find actual cycles.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/github_checks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncycles = [scc for scc in nx.strongly_connected_components(G) if len(scc) > 1]\n```\n\n----------------------------------------\n\nTITLE: Filtering File Types in Python\nDESCRIPTION: Shows how to get all files (including non-code files) and how to filter for source files in the codebase using the Codegen SDK.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_63\n\nLANGUAGE: python\nCODE:\n```\n# Get all source files in the codebase\nsource_files = codebase.files\n\n# Get all files in the codebase (including non-code files)\nall_files = codebase.files(extensions=\"*\")\n```\n\n----------------------------------------\n\nTITLE: Traversing Dependency Graphs in Python with Codegen\nDESCRIPTION: This snippet demonstrates how to use the dependencies method to traverse and analyze dependency graphs, including handling of cyclic dependencies.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_111\n\nLANGUAGE: python\nCODE:\n```\n# Get only direct dependencies\ndeps = symbol.dependencies(max_depth=1)\n\n# Get deep dependencies (up to 5 levels)\ndeps = symbol.dependencies(max_depth=5)\n\n# Print the dependency tree\nfor sym, direct_deps in deps.items():\n    print(f\"{sym.name} depends on: {[d.name for d in direct_deps]}\")\n```\n\nLANGUAGE: python\nCODE:\n```\nclass A:\n    def method_a(self): pass\n\nclass B(A):\n    def method_b(self):\n        self.method_a()\n\nclass C(B):\n    def method_c(self):\n        self.method_b()\n\n# Get the full inheritance chain\nsymbol = codebase.get_class(\"C\")\ndeps = symbol.dependencies(\n    max_depth=3\n)\n\n# Will show:\n# C depends on: [B]\n# B depends on: [A]\n# A depends on: []\n```\n\nLANGUAGE: python\nCODE:\n```\nclass A:\n    def method_a(self):\n        return B()\n\nclass B:\n    def method_b(self):\n        return A()\n\n# Get dependencies including cycles\nsymbol = codebase.get_class(\"A\")\ndeps = symbol.dependencies()\n\n# Will show:\n# A depends on: [B]\n```\n\n----------------------------------------\n\nTITLE: Handling Edge Cases in Python with Codegen\nDESCRIPTION: This Python code showcases how Codegen manages edge cases during code transformations like moving functions across files and renaming symbols. It automatically updates imports, preserves dependencies, and maintains references, reducing the risk of breaking lint and other code integrity issues.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/guiding-principles.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Moving a function? Codegen handles:\nfunction.move_to_file(\"new_file.py\")\n# ✓ Updating all import statements\n# ✓ Preserving dependencies\n# ✓ Maintaining references\n# ✓ Fixing relative imports\n# ✓ Resolving naming conflicts\n\n# Renaming a symbol? Codegen manages:\nclass_def.rename(\"NewName\")\n# ✓ Updating all usages\n# ✓ Handling string references\n# ✓ Preserving docstrings\n# ✓ Maintaining inheritance\n```\n\n----------------------------------------\n\nTITLE: Organizing Imports in Python Files\nDESCRIPTION: Python function that reorganizes imports in a file by grouping them into standard library, third-party, and local imports, and then sorts each group alphabetically.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_205\n\nLANGUAGE: python\nCODE:\n```\ndef organize_file_imports(file):\n    # Group imports by type\n    std_lib_imports = []\n    third_party_imports = []\n    local_imports = []\n\n    for imp in file.imports:\n        if imp.is_standard_library:\n            std_lib_imports.append(imp)\n        elif imp.is_third_party:\n            third_party_imports.append(imp)\n        else:\n            local_imports.append(imp)\n\n    # Sort each group\n    for group in [std_lib_imports, third_party_imports, local_imports]:\n        group.sort(key=lambda x: x.module_name)\n\n    # Remove all existing imports\n    for imp in file.imports:\n        imp.remove()\n\n    # Add imports back in organized groups\n    if std_lib_imports:\n        for imp in std_lib_imports:\n            file.add_import(imp.source)\n        file.insert_after_imports(\"\")  # Add newline\n\n    if third_party_imports:\n        for imp in third_party_imports:\n            file.add_import(imp.source)\n        file.insert_after_imports(\"\")  # Add newline\n\n    if local_imports:\n        for imp in local_imports:\n            file.add_import(imp.source)\n\n# Organize imports in all files\nfor file in codebase.files:\n    organize_file_imports(file)\n```\n\n----------------------------------------\n\nTITLE: Converting Flask Imports and Initialization to FastAPI\nDESCRIPTION: Demonstrates how to update import statements and initialize a FastAPI application instead of a Flask app. This is the first step in migrating from Flask to FastAPI.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/flask_to_fastapi_migration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# From:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n# To:\nfrom fastapi import FastAPI\n\napp = FastAPI()\n```\n\n----------------------------------------\n\nTITLE: Finding Promise Chains in Codebase - Python\nDESCRIPTION: This Python script iterates through all classes and methods in the Twilio Node.js codebase, collecting information on methods that use the 'operationPromise' variable. It ignores specific method names, checks for the presence of the target variable, and aggregates related promise chains and their parent statements for further processing. Dependencies include Codegen's code parsing and reflection utilities, and this code expects an indexed codebase representation. Inputs are classes and methods from the codebase; outputs are lists of matching promise chains and file paths. Its effectiveness relies on a consistent code pattern across the repository.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/promise-to-async-await-twilio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noperation_promise_chains = []\nunique_files = set()\n\n# loop through all classes\nfor _class in codebase.classes:\n\n    # loop through all methods\n    for method in _class.methods:\n    \n        # Skip certain methods\n        if method.name in [\"each\", \"setPromiseCallback\"]:\n            continue\n\n        # Only process methods with operationPromise\n        if not method.find(\"operationPromise\"):\n            continue\n\n        # Collect all promise chains\n        for promise_chain in method.promise_chains:\n            operation_promise_chains.append({\n                \"function_name\": method.name,\n                \"promise_chain\": promise_chain,\n                \"promise_statement\": promise_chain.parent_statement\n            })\n            unique_files.add(method.file.filepath)\n\nprint(f\"Found {len(operation_promise_chains)} Promise chains\")\nprint(f\"Across {len(unique_files)} files\")\n```\n\n----------------------------------------\n\nTITLE: Creating File-Level Semantic Index in Python\nDESCRIPTION: Shows how to import and initialize a FileIndex for semantic code search. This index operates at the file level and is simpler and faster to create and update.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_163\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen.extensions.index.file_index import FileIndex\n\nindex = FileIndex(codebase)\nindex.create()\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Content in Codebase with Codegen in Python\nDESCRIPTION: This snippet demonstrates how to filter and find specific code elements in a codebase using Codegen's graph structure. It shows techniques for finding symbols by name, classes by inheritance, functions with specific decorators, and files matching patterns.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Grab specific content by name\nmy_resource = codebase.get_symbol('TestResource')\n\n# Find classes that inherit from a specific base\nresource_classes = [\n    cls for cls in codebase.classes\n    if cls.is_subclass_of('Resource')\n]\n\n# Find functions with specific decorators\ntest_functions = [\n    f for f in codebase.functions\n    if any('pytest' in d.source for d in f.decorators)\n]\n\n# Find files matching certain patterns\ntest_files = [\n    f for f in codebase.files\n    if f.name.startswith('test_')\n]\n```\n\n----------------------------------------\n\nTITLE: Error Handling Example for Codegen Agent API\nDESCRIPTION: Demonstrates how to handle potential API errors using try/except blocks when working with the Agent class. This example shows proper error handling when running an agent task and refreshing its status.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/agents/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    task = agent.run(prompt=\"Your prompt here\")\n    task.refresh()\n    print(task.status)\nexcept Exception as e:\n    print(f\"Error: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Import Cycles with NetworkX in Python\nDESCRIPTION: This function creates a subgraph from a detected import cycle and visualizes it using Codegen's visualization capabilities. It preserves edge attributes including the type of import (dynamic or static).\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_239\n\nLANGUAGE: python\nCODE:\n```\ncycle = cycles[0]\n\ndef create_single_loop_graph(cycle):\n    cycle_graph = nx.MultiDiGraph()  # Changed to MultiDiGraph to support multiple edges\n    cycle = list(cycle)\n    for i in range(len(cycle)):\n        for j in range(len(cycle)):\n            # Get all edges between these nodes from original graph\n            edge_data_dict = G.get_edge_data(cycle[i], cycle[j])\n            if edge_data_dict:\n                # For each edge between these nodes\n                for edge_key, edge_data in edge_data_dict.items():\n                    # Add edge with all its attributes to cycle graph\n                    cycle_graph.add_edge(cycle[i], cycle[j], **edge_data)\n    return cycle_graph\n\n\ncycle_graph = create_single_loop_graph(cycle)\ncodebase.visualize(cycle_graph)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dependency Graph in Python\nDESCRIPTION: This code snippet demonstrates how to visualize a dependency graph starting from a specific function using NetworkX and Codegen.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_190\n\nLANGUAGE: python\nCODE:\n```\n# Get target symbol\ntarget_func = codebase.get_function(\"get_query_runner\")\n\n# Add root node\nG.add_node(target_func, color=COLOR_PALETTE[\"StartFunction\"])\n\n# Generate dependency graph\ncreate_dependencies_visualization(target_func)\n\n# Render visualization\ncodebase.visualize(G)\n```\n\n----------------------------------------\n\nTITLE: Detecting React Components in Python\nDESCRIPTION: This snippet demonstrates how to check if a function or class is a React component using the 'is_jsx' property. It works for both function components and class components.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_131\n\nLANGUAGE: python\nCODE:\n```\n# Check if a function is a React component\nfunction = file.get_function(\"MyComponent\")\nis_component = function.is_jsx  # True for React components\n\n# Check if a class is a React component\nclass_def = file.get_class(\"MyClassComponent\")\nis_component = class_def.is_jsx  # True for React class components\n```\n\n----------------------------------------\n\nTITLE: Loading Codebase in Python using Codegen\nDESCRIPTION: This snippet demonstrates how to load a codebase into Codegen's intelligent code analysis engine. It supports specific commit targeting for version control.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/freezegun_to_timemachine_migration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncodebase = Codebase.from_repo(\"getmoto/moto\", commit=\"786a8ada7ed0c7f9d8b04d49f24596865e4b7901\")\n```\n\n----------------------------------------\n\nTITLE: Converting React Class Components to Functional Components\nDESCRIPTION: This script identifies React class components and converts them to functional components using hooks. It extracts state from constructors, converts lifecycle methods to effects, and updates the component structure.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_223\n\nLANGUAGE: python\nCODE:\n```\n# Find all React class components\nfor class_def in codebase.classes:\n    # Skip if not a React component\n    if not class_def.is_jsx or \"Component\" not in [base.name for base in class_def.bases]:\n        continue\n\n    print(f\"Converting {class_def.name} to functional component\")\n\n    # Extract state from constructor\n    constructor = class_def.get_method(\"constructor\")\n    state_properties = []\n    if constructor:\n        for statement in constructor.code_block.statements:\n            if \"this.state\" in statement.source:\n                # Extract state properties\n                state_properties = [prop.strip() for prop in\n                    statement.source.split(\"{\")[1].split(\"}\")[0].split(\",\")]\n\n    # Create useState hooks for each state property\n    state_hooks = []\n    for prop in state_properties:\n        hook_name = f\"[{prop}, set{prop[0].upper()}{prop[1:]}]\"\n        state_hooks.append(f\"const {hook_name} = useState(null);\")\n\n    # Convert lifecycle methods to effects\n    effects = []\n    if class_def.get_method(\"componentDidMount\"):\n        effects.append(\"\"\"\n    useEffect(() => {\n        // TODO: Move componentDidMount logic here\n    }, []);\n    \"\"\")\n\n    if class_def.get_method(\"componentDidUpdate\"):\n        effects.append(\"\"\"\n    useEffect(() => {\n        // TODO: Move componentDidUpdate logic here\n    });\n    \"\"\")\n\n    # Get the render method\n    render_method = class_def.get_method(\"render\")\n\n    # Create the functional component\n    func_component = f\"\"\"\nconst {class_def.name} = ({class_def.get_method(\"render\").parameters[0].name}) => {{\n    {chr(10).join(state_hooks)}\n    {chr(10).join(effects)}\n\n    {render_method.code_block.source}\n}}\n\"\"\"\n\n    # Replace the class with the functional component\n    class_def.edit(func_component)\n\n    # Add required imports\n    file = class_def.file\n    if not any(\"useState\" in imp.source for imp in file.imports):\n        file.add_import(\"import { useState, useEffect } from 'react';\")\n```\n\n----------------------------------------\n\nTITLE: Consolidating Re-exports in Python\nDESCRIPTION: Script that consolidates multiple re-exports from the same source file into a single export statement. It uses defaultdict to group exports by their source file and combines them when multiple exports exist from the same source.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import defaultdict\n\nfile_exports = defaultdict(list)\nfor exp in file.exports:\n    if exp.is_reexport():\n        file_exports[exp.from_file].append(exp)\n\nfor from_file, exports in file_exports.items():\n    if len(exports) > 1:\n        # Create consolidated re-export\n        names = [exp.name for exp in exports]\n        file.add_export_from_source(\n            f\"export {{ {', '.join(names)} }} from '{from_file.filepath}'\"\n        )\n        # Remove individual exports\n        for exp in exports:\n            exp.remove()\n```\n\n----------------------------------------\n\nTITLE: Managing Code Comments and Docstrings\nDESCRIPTION: Examples of accessing, modifying and managing comments and docstrings in code while preserving proper formatting.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_117\n\nLANGUAGE: python\nCODE:\n```\n# Find all comments in a file\nfile = codebase.get_file(\"my_file.py\")\nfor comment in file.code_block.comments:\n    print(comment.text)\n\n# Access comments associated with a symbol\nsymbol = file.get_symbol(\"my_function\")\nif symbol.comment:\n    print(symbol.comment.text)  # Comment text without delimiters\n    print(symbol.comment.source)  # Full comment including delimiters\n\n# Access inline comments\nif symbol.inline_comment:\n    print(symbol.inline_comment.text)\n\n# Accessing all comments in a function\nfor comment in symbol.code_block.comments:\n    print(comment.text)\n```\n\n----------------------------------------\n\nTITLE: Creating Class Method Relationship Visualization in Python\nDESCRIPTION: Generates a visualization of class method interactions by creating a graph of all methods in a class and their call relationships.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/visualize_codebases/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef graph_class_methods(target_class: Class):\n    \"\"\"Creates a graph visualization of all methods in a class and their call relationships\"\"\"\n    G.add_node(target_class, color=COLOR_PALETTE[\"StartClass\"])\n\n    # Add all methods as nodes\n    for method in target_class.methods:\n        method_name = f\"{target_class.name}.{method.name}\"\n        G.add_node(method, name=method_name, color=COLOR_PALETTE[\"StartMethod\"])\n        visited.add(method)\n        G.add_edge(target_class, method)\n\n    # Create call traces for each method\n    for method in target_class.methods:\n        create_downstream_call_trace(method)\n```\n\n----------------------------------------\n\nTITLE: Basic Local Variable Management\nDESCRIPTION: Demonstrates basic operations for working with local variables including accessing, listing and renaming variables in a code block.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_115\n\nLANGUAGE: python\nCODE:\n```\n# Get all local variables in a function\nfunction = codebase.get_function(\"process_data\")\nlocal_vars = function.code_block.local_var_assignments\nfor var in local_vars:\n    print(var.name)\n\n# Find a specific variable\nconfig_var = function.code_block.get_local_var_assignment(\"config\")\nconfig_var.rename(\"settings\")  # Updates all references safely\n\n# Rename a variable used in this scope (but not necessarily declared here)\nfunction.rename_local_variable(\"foo\", \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of Codegen Agent API\nDESCRIPTION: Shows how to initialize an Agent, run a task with a prompt, check status, and get results. This example demonstrates the complete workflow from creating an agent to retrieving its output.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/agents/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen.agents.agent import Agent\n\n# Initialize the Agent with your organization ID and API token\nagent = Agent(\n    org_id=\"11\",  # Your organization ID\n    token=\"your_api_token_here\",  # Your API authentication token\n    base_url=\"https://codegen-sh-rest-api.modal.run\",  # Optional - defaults to this URL\n)\n\n# Run an agent with a prompt\ntask = agent.run(prompt=\"Which github repos can you currently access?\")\n\n# Check the initial status\nprint(task.status)  # Returns the current status of the task (e.g., \"queued\", \"in_progress\", etc.)\n\n# Refresh the task to get updated status\ntask.refresh()\n\n# Check the updated status\nprint(task.status)\n\n# Once task is complete, you can access the result\nif task.status == \"completed\":\n    print(task.result)\n```\n\n----------------------------------------\n\nTITLE: Bulk Import Operations in Python using Codegen SDK\nDESCRIPTION: Provides patterns for working with multiple imports at once, including updating import paths, removing unused imports, and consolidating duplicate imports. These operations help maintain clean import statements.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_89\n\nLANGUAGE: python\nCODE:\n```\n# Update imports from a specific module\nold_path = \"./old/path\"\nnew_path = \"./new/path\"\n\nfor imp in file.imports:\n    if imp.module == old_path:\n        imp.set_module(new_path)\n\n# Remove unused imports (excluding external)\nfor imp in file.imports:\n    if not imp.usages and not isinstance(imp.resolved_symbol, ExternalModule):\n        print(f\"Removing: {imp.name}\")\n        imp.remove()\n\n# Consolidate duplicate imports\nfrom collections import defaultdict\n\nmodule_imports = defaultdict(list)\nfor imp in file.imports:\n    module_imports[imp.module].append(imp)\n\nfor module, imports in module_imports.items():\n    if len(imports) > 1:\n        # Create combined import\n        symbols = [imp.name for imp in imports]\n        file.add_import(\n            f\"import {{ {', '.join(symbols)} }} from '{module}'\"\n        )\n        # Remove old imports\n        for imp in imports:\n            imp.remove()\n```\n\n----------------------------------------\n\nTITLE: Complete Reference Implementation for Codegen Examples\nDESCRIPTION: Provides a comprehensive reference implementation that demonstrates all the best practices for Codegen examples, including utility functions, the main transformation function, and the entry point.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/STRUCTURE.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Focused utility function\ndef get_function_context(function) -> dict:\n    \"\"\"Get the implementation, dependencies, and usages of a function.\"\"\"\n    # Clear, focused implementation...\n\n\n# Main transformation with decorator\n@codegen.function(\"generate-training-data\")\ndef run(codebase: Codebase):\n    \"\"\"Generate training data using a node2vec-like approach...\n\n    This codemod:\n    1. Finds all functions...\n    2. For each function...\n    3. Outputs structured JSON...\n    \"\"\"\n    # Clear implementation with good structure...\n\n\n# Clean entry point\nif __name__ == \"__main__\":\n    print(\"Initializing codebase...\")\n    codebase = Codebase.from_repo(\"fastapi/fastapi\")\n    run(codebase)\n    # ... rest of execution\n```\n\n----------------------------------------\n\nTITLE: Calculating Function Documentation Coverage in Python\nDESCRIPTION: This Python script analyzes the documentation coverage of a codebase by counting the total number of functions and how many have docstrings. It calculates and prints the documentation coverage as a percentage. The code assumes access to a 'codebase' object that provides an iterable collection of functions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_125\n\nLANGUAGE: python\nCODE:\n```\ntotal = 0\ndocumented = 0\nfor function in codebase.functions:\n    total += 1\n    if function.docstring:\n        documented += 1\n\ncoverage = (documented / total * 100) if total > 0 else 0\nprint(f\"Documentation coverage: {coverage:.1f}%\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing Functions and Methods in Python\nDESCRIPTION: Code snippet that processes both standalone functions and class methods to calculate their cyclomatic complexity. It iterates through all callable entities in the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/cyclomatic_complexity/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncallables = codebase.functions + [m for c in codebase.classes for m in c.methods]\nfor function in callables:\n    complexity = calculate_cyclomatic_complexity(function.code_block)\n```\n\n----------------------------------------\n\nTITLE: Checking Git State in Python\nDESCRIPTION: Demonstrates how to check the current Git state, including getting the default branch and current commit information using the Codegen SDK.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_59\n\nLANGUAGE: python\nCODE:\n```\n# Get the default branch (e.g. 'main' or 'master')\ndefault = codebase.default_branch\nprint(f\"Default branch: {default}\")\n\n# Get the current commit\ncurrent = codebase.current_commit\nif current:\n    print(f\"Current commit: {current.hexsha}\")\n```\n\n----------------------------------------\n\nTITLE: Resolving Nested Imports to Find Root Symbol in Python\nDESCRIPTION: This Python utility function traces through potentially nested `Import` objects to locate the actual underlying `Symbol` or `ExternalModule` being imported. It is used to ensure the correct symbol definition is analyzed for context gathering when generating docstrings.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/document_functions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef hop_through_imports(imp: Import) -> Symbol | ExternalModule:\n    \"\"\"Finds the root symbol for an import\"\"\"\n    if isinstance(imp.imported_symbol, Import):\n        return hop_through_imports(imp.imported_symbol)\n    return imp.imported_symbol\n```\n\n----------------------------------------\n\nTITLE: Moving Symbols Between Files Using Codegen's Python API\nDESCRIPTION: Illustrates how to move symbols (functions, classes, variables) between files using Codegen's API. This snippet demonstrates basic symbol movement, handling of dependencies and imports, and bulk symbol movement strategies.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_127\n\nLANGUAGE: python\nCODE:\n```\n# Manipulation code:\nfile1 = codebase.get_file(\"file1.py\")\nfile2 = codebase.get_file(\"file2.py\")\n\nhelper_func = file1.get_symbol(\"helper\")\n\n# Ensure the destination file exists\nif not file2.exists():\n    file2 = codebase.create_file('file2.py')\n\n# Move the symbol\nhelper_func.move_to_file(file2)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Move all functions with a specific prefix\nfor file in codebase.files:\n    for function in file.functions:\n        if function.name.startswith(\"pylsp_\"):\n            function.move_to_file(\n                shared_file,\n                include_dependencies=True,\n                strategy=\"update_all_imports\"\n            )\n\n# Commit the changes once, at the end\ncodebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen Project with Environment Variables\nDESCRIPTION: Shows the structure of the .env file used to configure a Codegen project. It includes settings for the repository owner, path, and programming language.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_43\n\nLANGUAGE: env\nCODE:\n```\nREPOSITORY_OWNER = \"your-org\"\nREPOSITORY_PATH = \"/root/git/your-repo\"\nREPOSITORY_LANGUAGE = \"python\"  # or other supported language\n```\n\n----------------------------------------\n\nTITLE: Filtering External Imports in Python using Codegen SDK\nDESCRIPTION: Filters imports from a codebase to find only those that are external modules (from third-party packages) using the Codegen SDK.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen.sdk import ExternalModule\n\nexternal_imports = [i for i in codebase.imports if isinstance(i, ExternalModule)]\n```\n\n----------------------------------------\n\nTITLE: Refactoring PyTorch Import Loop by Moving Shared Code using Codegen (Python)\nDESCRIPTION: This Codegen script addresses a specific import loop between `torch/_inductor/kernel/flex_decoding.py` and `torch/_inductor/kernel/flex_attention.py` in PyTorch. It identifies symbols imported by `flex_decoding.py` from `flex_attention.py`, creates a new `torch/_inductor/kernel/flex_utils.py` file using `codebase.create_file`, and moves these shared symbols to the new utils file via `symbol.move_to_file`. This automatically updates imports in the original files to point to `flex_utils.py`, resolving the circular dependency. Assumes a `codebase` object from Codegen is available.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/fixing-import-loops.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create new utils file\nutils_file = codebase.create_file(\"torch/_inductor/kernel/flex_utils.py\")\n\n# Get the two files involved in the import cycle\ndecoding_file = codebase.get_file(\"torch/_inductor/kernel/flex_decoding.py\")\nattention_file = codebase.get_file(\"torch/_inductor/kernel/flex_attention.py\")\nattention_file_path = \"torch/_inductor/kernel/flex_attention.py\"\ndecoding_file_path = \"torch/_inductor/kernel/flex_decoding.py\"\n\n# Track symbols to move\nsymbols_to_move = set()\n\n# Find imports from flex_attention in flex_decoding\nfor imp in decoding_file.imports:\n    if imp.from_file and imp.from_file.filepath == attention_file_path:\n        # Get the actual symbol from flex_attention\n        if imp.imported_symbol:\n            symbols_to_move.add(imp.imported_symbol)\n\n# Move identified symbols to utils file\nfor symbol in symbols_to_move:\n    symbol.move_to_file(utils_file)\n\nprint(f\" Moved {len(symbols_to_move)} symbols to flex_utils.py\")\nfor symbol in symbols_to_move:\n    print(symbol.name)\n```\n\n----------------------------------------\n\nTITLE: Combined Behavior Usage in Python\nDESCRIPTION: Demonstrates how multiple behaviors can be combined in a single code element. Shows interaction between HasName, HasBlock and Editable behaviors.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_101\n\nLANGUAGE: python\nCODE:\n```\n# Functions combine multiple behaviors\nfunction = codebase.get_function(\"process_data\")\n\n# HasName behavior\nprint(function.name)\nfunction.rename(\"process_input\")\n\n# HasBlock behavior\nprint(len(function.code_block.statements))\nfunction.add_decorator(\"@timer\")\n\n# Editable behavior\nfunction.edit(\"def process_input():\\n    pass\")\n```\n\n----------------------------------------\n\nTITLE: Working with Symbol Attribution in Python\nDESCRIPTION: Retrieves and displays attribution information for a specific symbol, including its last editor, complete editor history, and AI authorship status, and demonstrates how to find all AI-authored symbols in the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get attribution information for a specific symbol\nsymbol = codebase.get_symbol(\"path/to/file.py:MyClass.my_method\")\n\n# Access attribution data\nprint(f\"Last editor: {symbol.last_editor}\")\nprint(f\"Editor history: {symbol.editor_history}\")\nprint(f\"AI authored: {symbol.is_ai_authored}\")\n\n# Find all AI-authored symbols\nai_symbols = [s for s in codebase.get_symbols() if s.is_ai_authored]\nfor symbol in ai_symbols:\n    print(f\"AI symbol: {symbol.name}\")\n```\n\n----------------------------------------\n\nTITLE: Import Statement Operations in Python\nDESCRIPTION: Shows how to work with import statements, including accessing import details and removing imports.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_106\n\nLANGUAGE: python\nCODE:\n```\n# Access import statements\nfor import_stmt in file.import_statements:\n    print(f\"Module: {import_stmt.module}\")\n    for imported in import_stmt.imports:\n        print(f\"  Imported: {imported.name}\")\n\n# Remove specific imports\nimport_stmt = file.import_statements[0]\nimport_stmt.imports[0].remove()  # Remove first import\n\n# Remove entire import statement\nimport_stmt.remove()\n```\n\n----------------------------------------\n\nTITLE: File Editing Operations with Python Codegen\nDESCRIPTION: Demonstrates various file editing operations including searching, replacing text, inserting content, and removing files.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_70\n\nLANGUAGE: python\nCODE:\n```\n# Get a file\nfile = codebase.get_file(\"path/to/file.py\")\n\n# Replace all instances of a string\nfile.replace(\"name\", \"new_name\")\nfile.replace(\"name\", \"new_name\", include_comments=False) # Don't edit comments\n\n# Replace entire text of the file\nfile.edit('hello, world!')\n\n# Get + delete all instances of a string\nfor editable in file.search(\"foo\"):\n    editable.remove()\n\n# Insert text at the top of the file\nfile.insert_before(\"def main():\\npass\")\n# ... or at the bottom\nfile.insert_after(\"def end():\\npass\")\n\n# Delete the file\nfile.remove()\n```\n\n----------------------------------------\n\nTITLE: Code Generation and Refactoring Using LLMs in Python\nDESCRIPTION: This code demonstrates using AI to break up a large function into smaller ones and to generate tests for existing functions, showcasing how to apply AI-generated code modifications to the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_152\n\nLANGUAGE: python\nCODE:\n```\n# Break up a large function\nfunction = codebase.get_function(\"large_function\")\nnew_code = codebase.ai(\n    \"Break this function into smaller, more focused functions\",\n    target=function\n)\nfunction.edit(new_code)\n\n# Generate a test\nmy_function = codebase.get_function(\"my_function\")\ntest_code = codebase.ai(\n    f\"Write a test for the function {my_function.name}\",\n    target=my_function\n)\nmy_function.insert_after(test_code)\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with AI for Python Functions\nDESCRIPTION: A Python script that uses AI to generate or update docstrings for functions in a codebase. It adds a timestamp to each new or updated docstring, and uses the codebase.ai method to create comprehensive documentation including parameters, return types, and descriptions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_221\n\nLANGUAGE: python\nCODE:\n```\n# Import datetime for timestamp\nfrom datetime import datetime\n\n# Get current timestamp\ntimestamp = datetime.now().strftime(\"%B %d, %Y\")\n\nprint(\"📚 Generating and Updating Function Documentation\")\n\n# Process all functions in the codebase\nfor function in codebase.functions:\n    current_docstring = function.docstring()\n\n    if current_docstring:\n        # Update existing docstring to be more descriptive\n        new_docstring = codebase.ai(\n            f\"Update the docstring for {function.name} to be more descriptive and comprehensive.\",\n            target=function\n        )\n        new_docstring += f\"\\n\\nUpdated on: {timestamp}\"\n    else:\n        # Generate new docstring for function\n        new_docstring = codebase.ai(\n            f\"Generate a comprehensive docstring for {function.name} including parameters, return type, and description.\",\n            target=function\n        )\n        new_docstring += f\"\\n\\nCreated on: {timestamp}\"\n\n    # Set the new or updated docstring\n    function.set_docstring(new_docstring)\n```\n\n----------------------------------------\n\nTITLE: Extracting Inline Props to Separate Type Declarations in React Components\nDESCRIPTION: This script identifies React components with inline prop type definitions and extracts them to separate type declarations. It improves code readability and maintainability by separating type definitions from component logic.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_226\n\nLANGUAGE: python\nCODE:\n```\n# Iterate over all files in the codebase\nfor file in codebase.files:\n    # Iterate over all functions in the file\n    for function in file.functions:\n        # Check if the function is a React functional component\n        if function.is_jsx:  # Assuming is_jsx indicates a function component\n            # Check if the function has inline props definition\n            if len(function.parameters) == 1 and isinstance(function.parameters[0].type, Dict):\n                # Extract the inline prop type\n                inline_props: TSObjectType = function.parameters[0].type.source\n                # Create a new type definition for the props\n                props_type_name = f\"{function.name}Props\"\n                props_type_definition = f\"type {props_type_name} = {inline_props};\"\n\n                # Set the new type for the parameter\n                function.parameters[0].set_type_annotation(props_type_name)\n                # Add the new type definition to the file\n                function.insert_before('\\n' + props_type_definition + '\\n')\n```\n\n----------------------------------------\n\nTITLE: Updating React Fragment Syntax in Components\nDESCRIPTION: This script modernizes React Fragment syntax by replacing 'React.Fragment' with the shorthand '<>' syntax. It improves code readability and follows modern React best practices.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_227\n\nLANGUAGE: python\nCODE:\n```\nfor function in codebase.functions:\n    if not function.is_jsx:\n        continue\n\n    # Replace React.Fragment with <>\n    for element in function.jsx_elements:\n        if element.name == \"React.Fragment\":\n            element.edit(element.source.replace(\n                \"<React.Fragment>\",\n                \"<>\"\n            ).replace(\n                \"</React.Fragment>\",\n                \"</>\"\n            ))\n```\n\n----------------------------------------\n\nTITLE: Importing Codegen in Python\nDESCRIPTION: Shows the basic import statement to get started with using Codegen in a Python script.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n```\n\n----------------------------------------\n\nTITLE: Manipulating Collections Using Codegen's Python API\nDESCRIPTION: Shows how to work with collections (lists and dictionaries) using Codegen's API. This snippet covers basic operations, iteration, and bulk modifications while preserving formatting and structure.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_128\n\nLANGUAGE: python\nCODE:\n```\n# Basic operations\nitems_list = file.get_symbol(\"items\").value  # Get list value\nfirst = items_list[0]        # Access elements\nlength = len(items_list)     # Get length\nitems_list[0] = \"new\"       # Modify element\nitems_list.append(\"d\")      # Add to end\nitems_list.insert(1, \"x\")   # Insert at position\ndel items_list[1]           # Remove element\n\n# Iteration\nfor item in items_list:\n    print(item.source)\n\n# Bulk operations\nitems_list.clear()          # Remove all elements\n```\n\nLANGUAGE: python\nCODE:\n```\n# Basic operations\nsettings = file.get_symbol(\"settings\").value  # Get dict value\nvalue = settings[\"key\"]     # Get value\nsettings[\"key\"] = \"value\"   # Set value\ndel settings[\"key\"]         # Remove key\nhas_key = \"key\" in settings # Check existence\n\n# Iteration\nfor key in settings:\n    print(f\"{key}: {settings[key]}\")\n\n# Bulk operations\nsettings.clear()           # Remove all entries\n```\n\n----------------------------------------\n\nTITLE: Visualizing Call Graph in Python\nDESCRIPTION: This code snippet demonstrates how to visualize a call graph starting from a specific function using NetworkX and Codegen.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_188\n\nLANGUAGE: python\nCODE:\n```\n# Get target function to analyze\ntarget_class = codebase.get_class('SharingConfigurationViewSet')\ntarget_method = target_class.get_method('patch')\n\n# Add root node\nG.add_node(target_method,\n           name=f\"{target_class.name}.{target_method.name}\",\n           color=COLOR_PALETTE[\"StartFunction\"])\n\n# Build the call graph\ncreate_downstream_call_trace(target_method)\n\n# Render the visualization\ncodebase.visualize(G)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Variable Assignments in TypeScript using Codegen\nDESCRIPTION: Demonstrates how to access variable assignments using get_local_var_assignment() and modify them using set_value() and rename() methods in Codegen.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = 123;\nconst [userName, userAge] = [\"Eve\", 25];\n```\n\nLANGUAGE: python\nCODE:\n```\nid_assignment = file.code_block.get_local_var_assignment(\"userId\")\nid_assignment.set_value(\"456\")\n\nname_assignment = file.code_block.get_local_var_assignment(\"name\")\nname_assignment.rename(\"userName\")\n```\n\n----------------------------------------\n\nTITLE: Basic Statement Operations in Python\nDESCRIPTION: Shows how to access and work with statements in files and functions. Demonstrates iteration over statements and accessing statement properties.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_102\n\nLANGUAGE: python\nCODE:\n```\n# Access statements in a file\nfile = codebase.get_file(\"main.py\")\nfor statement in file.code_block.statements:\n    print(f\"Statement type: {statement.statement_type}\")\n\n# Access statements in a function\nfunction = file.get_function(\"process_data\")\nfor statement in function.code_block.statements:\n    print(f\"Statement: {statement.source}\")\n```\n\n----------------------------------------\n\nTITLE: Nested Statement Analysis in Python\nDESCRIPTION: Shows how to check for nested statement structures and navigate statement hierarchies using is_wrapped_in and parent_statement.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_104\n\nLANGUAGE: python\nCODE:\n```\nfunc = codebase.get_function(\"process_data\")\nfor usage in func.local_variable_usages:\n    if usage.is_wrapped_in(IfStatement):\n        print(f\"Usage of {usage.name} is inside an if block\")\n\nfunc = codebase.get_function(\"process_data\")\nfor usage in func.local_variable_usages:\n    if isinstance(usage.parent_statement, IfStatement):\n        print(f\"Usage of {usage.name} is directly beneath an IfStatement\")\n```\n\n----------------------------------------\n\nTITLE: Updating Iterator Methods for Python 3 Migration\nDESCRIPTION: Function that updates Python 2 iterator classes to use Python 3's __next__() method name instead of next(). It finds next methods in classes and replaces them with __next__ methods.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_255\n\nLANGUAGE: python\nCODE:\n```\ndef update_iterators(file):\n    \"\"\"Update iterator methods from Python 2 to Python 3\"\"\"\n    for cls in file.classes:\n        next_method = cls.get_method(\"next\")\n        if next_method:\n            # Create new __next__ method with same content\n            new_method_source = next_method.source.replace(\"def next\", \"def __next__\")\n            cls.add_source(new_method_source)\n            next_method.remove()\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with CodebaseConfig in Python\nDESCRIPTION: This snippet shows how to customize the behavior of Codegen's graph construction by passing a CodebaseConfig object with specific configuration flags when initializing a Codebase instance.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\nfrom codegen.configs import CodebaseConfig\n\n# Initialize a Codebase with custom configuration\ncodebase = Codebase(\n    \"<repo_path>\",\n    config=CodebaseConfig(\n        flag1=...,\n        flag2=...,\n        ...\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Test Classes and Setup Methods in Python\nDESCRIPTION: Shows how to convert unittest.TestCase classes and setUp methods to pytest fixtures and standalone functions. Demonstrates the transformation of class-based tests to pytest's functional style.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/unittest_to_pytest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# From:\nclass TestUsers(unittest.TestCase):\n    def setUp(self):\n        self.db = setup_test_db()\n\n    def test_create_user(self):\n        user = self.db.create_user(\"test\")\n        self.assertEqual(user.name, \"test\")\n\n\n# To:\n@pytest.fixture\ndef db():\n    db = setup_test_db()\n    yield db\n\n\ndef test_create_user(db):\n    user = db.create_user(\"test\")\n    assert user.name == \"test\"\n```\n\n----------------------------------------\n\nTITLE: Code Analysis with Symbol Flagging in Python\nDESCRIPTION: This function demonstrates practical use of symbol flags for code analysis, automatically flagging functions that are missing docstrings or async functions lacking error handling, which helps identify areas needing improvement.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_148\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_codebase(codebase):\n    for function in codebase.functions:\n        # Check documentation\n        if not function.docstring:\n            function.flag(\n                message=\"Missing docstring\",\n            )\n\n        # Check error handling\n        if function.is_async and not function.has_try_catch:\n            function.flag(\n                message=\"Async function missing error handling\",\n            )\n```\n\n----------------------------------------\n\nTITLE: Contextual Code Modification with AI in Python\nDESCRIPTION: This code shows how to refactor a class method with full context awareness, providing the AI with information about the parent class, call sites, and dependencies to ensure the refactoring is appropriate and compatible.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_155\n\nLANGUAGE: python\nCODE:\n```\n# Refactor a class method\nmethod = codebase.get_class(\"MyClass\").get_method(\"target_method\")\nnew_impl = codebase.ai(\n    \"Refactor this method to be more efficient\",\n    target=method,\n    context={\n        \"parent_class\": method.parent,\n        \"call_sites\": method.call_sites,\n        \"dependencies\": method.dependencies\n    }\n)\nmethod.edit(new_impl)\n```\n\n----------------------------------------\n\nTITLE: Organizing Code into Modules with Codegen SDK\nDESCRIPTION: This code organizes functions into different modules based on their naming patterns. It creates module directories, processes each file, determines the appropriate module for each function based on its name, and moves the function to the corresponding module directory.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_196\n\nLANGUAGE: python\nCODE:\n```\n# Dictionary to track modules and their functions\nmodule_map = {\n    \"utils\": lambda f: f.name.startswith(\"util_\") or f.name.startswith(\"helper_\"),\n    \"api\": lambda f: f.name.startswith(\"api_\") or f.name.startswith(\"endpoint_\"),\n    \"data\": lambda f: f.name.startswith(\"data_\") or f.name.startswith(\"db_\"),\n    \"core\": lambda f: True  # Default module for other functions\n}\n\nprint(\"🔍 Starting code organization...\")\n\n# Create module directories if they don't exist\nfor module in module_map.keys():\n    if not codebase.has_directory(module):\n        print(f\"📁 Creating module directory: {module}\")\n        codebase.create_directory(module, exist_ok=True)\n\n# Process each file in the codebase\nfor file in codebase.files:\n    print(f\"\\n📄 Processing file: {file.filepath}\")\n\n    # Skip if file is already in a module directory\n    if any(file.filepath.startswith(module) for module in module_map.keys()):\n        continue\n\n    # Process each function in the file\n    for function in file.functions:\n        # Determine which module this function belongs to\n        target_module = next(\n            (module for module, condition in module_map.items()\n             if condition(function)),\n            \"core\"\n        )\n\n        # Create the new file path\n        new_filepath = f\"{target_module}/{function.name}.py\"\n\n        print(f\"  ➡️ Moving {function.name} to {target_module} module\")\n\n        # Create new file and move function\n        if not codebase.has_file(new_filepath):\n            new_file = codebase.create_file(new_filepath)\n            function.move_to_file(new_file, include_dependencies=True)\n\nprint(\"\\n✅ Code organization complete!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Repository and Codebase in Python\nDESCRIPTION: Sets up the repository and codebase for analysis by creating a repo configuration from the current path, initializing a repo operator, creating a project configuration, and initializing a codebase with the project.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Basic repository setup\nrepo_path = os.getcwd()\nrepo_config = RepoConfig.from_repo_path(repo_path)\nrepo_operator = RepoOperator(repo_config=repo_config)\nproject = ProjectConfig.from_repo_operator(repo_operator=repo_operator, programming_language=ProgrammingLanguage.PYTHON)\ncodebase = Codebase(projects=[project])\n```\n\n----------------------------------------\n\nTITLE: Transforming Variables using Python's AST Module\nDESCRIPTION: This Python code snippet demonstrates how to use the AST module for renaming variables. It involves creating a subclass of NodeTransformer to traverse and modify Python's syntax tree. No external dependencies are needed, but it requires knowledge of Python's AST.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/codemod-frameworks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ast\n\nclass NameTransformer(ast.NodeTransformer):\n    def visit_Name(self, node):\n        if node.id == 'old_name':\n            return ast.Name(id='new_name', ctx=node.ctx)\n        return node\n```\n\n----------------------------------------\n\nTITLE: Resetting Codebase State in Python\nDESCRIPTION: Demonstrates how to reset the codebase to its original state, reverting both in-memory state and uncommitted filesystem changes while preserving codemod implementation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_57\n\nLANGUAGE: python\nCODE:\n```\n# Reset everything\ncodebase.reset()\n\n# Changes are reverted\nassert codebase.get_file(\"src/app.py\") is not None\nassert codebase.get_file(\"src/new_file.py\", optional=True) is None\n```\n\n----------------------------------------\n\nTITLE: Transforming Function Calls in Python using Codegen\nDESCRIPTION: This code snippet shows how to use Codegen's function call analysis to find all usages of a specific function and transform them. It adds required TimeMachine parameters while maintaining existing arguments and formatting.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/freezegun_to_timemachine_migration/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor fcall in file.function_calls:\n    if \"freeze_time\" not in fcall.source:\n        continue\n    # Transform freeze_time to travel with tick=False\n```\n\n----------------------------------------\n\nTITLE: Analyzing Type Coverage Statistics in Python\nDESCRIPTION: Script that analyzes and calculates type coverage percentages for function parameters, return types, and class attributes. Includes counting typed elements and calculating coverage percentages.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_210\n\nLANGUAGE: python\nCODE:\n```\n# Count class attribute coverage\nfor cls in codebase.classes:\n    for attr in cls.attributes:\n        total_attributes += 1\n        if attr.is_typed:\n            typed_attributes += 1\n\n# Calculate percentages\nparam_percentage = (typed_parameters / total_parameters * 100) if total_parameters > 0 else 0\nreturn_percentage = (typed_returns / total_functions * 100) if total_functions > 0 else 0\nattr_percentage = (typed_attributes / total_attributes * 100) if total_attributes > 0 else 0\n\n# Print results\nprint(\"\\nType Coverage Analysis\")\nprint(\"---------------------\")\nprint(f\"Parameters: {param_percentage:.1f}% ({typed_parameters}/{total_parameters} typed)\")\nprint(f\"Return types: {return_percentage:.1f}% ({typed_returns}/{total_functions} typed)\")\nprint(f\"Class attributes: {attr_percentage:.1f}% ({typed_attributes}/{total_attributes} typed)\")\n```\n\n----------------------------------------\n\nTITLE: Identifying Export Types in TypeScript using Codegen SDK\nDESCRIPTION: Shows how to identify and filter different types of exports in TypeScript using the Export API methods. Useful for distinguishing between type exports, default exports, and wildcard exports.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_93\n\nLANGUAGE: python\nCODE:\n```\n# Check export types\nfor exp in file.exports:\n    if exp.is_type_export():\n        print(f\"Type export: {exp.name}\")\n    elif exp.is_default_export():\n        print(f\"Default export: {exp.name}\")\n    elif exp.is_wildcard_export():\n        print(f\"Wildcard export from: {exp.from_file.filepath}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Dead Code and Used Imports in Python\nDESCRIPTION: This snippet shows how to use the usages and dependencies APIs to find dead code (unused symbols) and determine which imports a symbol uses.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_110\n\nLANGUAGE: python\nCODE:\n```\n# Check if a symbol is unused\ndef is_dead_code(symbol):\n    return not symbol.usages\n\n# Find all unused functions in a file\ndead_functions = [f for f in file.functions if not f.usages]\n\n# Get all imports a class depends on\nclass_imports = [dep for dep in my_class.dependencies if isinstance(dep, Import)]\n\n# Get all imports used by a function, including indirect ones\nall_function_imports = [\n    dep for dep in my_function.dependencies(UsageType.DIRECT | UsageType.INDIRECT)\n    if isinstance(dep, Import)\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Codebase Graph with Codegen Python\nDESCRIPTION: This Python snippet demonstrates how to initialize a codebase using Codegen and access pre-computed relationships such as dependencies and usages for a given symbol. It relies on the Codegen package and assumes the existence of a directory structure from which it can analyze the code.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/how-it-works.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Initialize and analyze the codebase\nfrom codegen import Codebase\ncodebase = Codebase(\"./\")\n\n# Access pre-computed relationships\nfunction = codebase.get_symbol(\"process_data\")\nprint(f\"Dependencies: {function.dependencies}\")  # Instant lookup\nprint(f\"Usages: {function.usages}\")  # No parsing needed\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Variables in Python with Codegen\nDESCRIPTION: Cleans up unused local variables within functions. Iterates through each function in the codebase, identifies variable assignments with no local usages, and removes them.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/delete_dead_code/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor func in codebase.functions:\n    for var_assignments in func.code_block.local_var_assignments:\n        if not var_assignments.local_usages:\n            print(f\"🧹 Removing unused variable: {var_assignments.name}\")\n            var_assignments.remove()\n```\n\n----------------------------------------\n\nTITLE: Detecting Promise Chains in a Specific Function with Python\nDESCRIPTION: Code that retrieves promise chains within a specific function rather than the entire codebase. This allows for targeted transformations of promise patterns in a particular function.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Or get all promise chains in the current function\nfunction = codebase.get_function(\"function_name\")\npromise_chains = function.promise_chains\n```\n\n----------------------------------------\n\nTITLE: Customizing Agent Behavior with Custom Prompt in Python\nDESCRIPTION: Demonstration of how to modify an agent's behavior by adjusting its prompt. This example focuses the agent on specific code review aspects like security, performance, and maintainability.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_179\n\nLANGUAGE: python\nCODE:\n```\nCUSTOM_PROMPT = \"\"\"You are a specialized code reviewer focused on:\n1. Security best practices\n2. Performance optimization\n3. Code maintainability\n...\n\"\"\"\n\nagent = create_agent_with_tools(\n    codebase=codebase,\n    tools=tools,\n    chat_history=[SystemMessage(content=CUSTOM_PROMPT)],\n)\n```\n\n----------------------------------------\n\nTITLE: Reviewing Generated Code Before Application in Python\nDESCRIPTION: Shows a pattern for generating code with AI, displaying it for review, and only applying changes after confirmation. This is a crucial safety practice to ensure AI-generated code meets requirements.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_159\n\nLANGUAGE: python\nCODE:\n```\n# Generate and review before applying\nnew_code = codebase.ai(\n    \"Optimize this function\",\n    target=function\n)\nprint(\"Review generated code:\")\nprint(new_code)\nif input(\"Apply changes? (y/n): \").lower() == 'y':\n    function.edit(new_code)\n```\n\n----------------------------------------\n\nTITLE: Adding Google-style Docstrings to Python Functions\nDESCRIPTION: A Python script that adds Google-style docstrings to functions without existing documentation. It automatically includes parameter names, types, and a basic structure for return values. The script skips functions that already have docstrings.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_222\n\nLANGUAGE: python\nCODE:\n```\n# Iterate through all functions in the codebase\nfor function in codebase.functions:\n    # Skip if function already has a docstring\n    if function.docstring:\n        continue\n\n    # Build parameter documentation\n    param_docs = []\n    for param in function.parameters:\n        param_type = param.type.source if param.is_typed else \"Any\"\n        param_docs.append(f\"    {param.name} ({param_type}): Description of {param.name}\")\n\n    # Get return type if present\n    return_type = function.return_type.source if function.return_type else \"None\"\n\n    # Create Google-style docstring\n    docstring = f'''\"\"\"\\n    Description of {function.name}.\\n\\n    Args:\\n{chr(10).join(param_docs)}\\n\\n    Returns:\\n        {return_type}: Description of return value\\n    \"\"\"'''\n\n    # Set the new docstring\n    function.set_docstring(docstring)\n```\n\n----------------------------------------\n\nTITLE: Working with Named Elements in Python\nDESCRIPTION: Demonstrates usage of the HasName behavior API for accessing and modifying element names. Shows how to work with base names, fully qualified names, and name nodes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_97\n\nLANGUAGE: python\nCODE:\n```\n# Access the name\nprint(function.name)  # Base name without namespace\nprint(function.full_name)  # Full qualified name with namespace\n\n# Modify the name\nfunction.set_name(\"new_name\")  # Changes just the name\nfunction.rename(\"new_name\")    # Changes name and updates all usages\n\n# Get the underlying name node\nname_node = function.get_name()\n```\n\n----------------------------------------\n\nTITLE: Converting Print Statements in Python 3 Migration\nDESCRIPTION: Function that transforms Python 2 print statements into Python 3 function calls. It parses file content line by line, identifies print statements, and converts them to the equivalent function call syntax with parentheses.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_243\n\nLANGUAGE: python\nCODE:\n```\ndef convert_print_statements(file):\n    \"\"\"Convert Python 2 print statements to Python 3 function calls\"\"\"\n    lines = file.content.split('\\n')\n    new_content = []\n\n    for line in lines:\n        stripped = line.strip()\n        if stripped.startswith('print '):\n            indent = line[:len(line) - len(line.lstrip())]\n            args = stripped[6:].strip()\n            new_content.append(f\"{indent}print({args})\")\n        else:\n            new_content.append(line)\n\n    if new_content != lines:\n        file.edit('\\n'.join(new_content))\n```\n\n----------------------------------------\n\nTITLE: Processing TypeScript Exports\nDESCRIPTION: Script for collecting and processing TypeScript exports from source files, focusing on reexports that are not external exports.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_213\n\nLANGUAGE: python\nCODE:\n```\nprocessed_imports = set()\n\nfor file in codebase.files:\n    # Only process files under /src/shared\n    if '/src/shared' not in file.filepath:\n        continue\n\n    # Gather all reexports that are not external exports\n    all_reexports = []\n    for export_stmt in file.export_statements:\n        for export in export_stmt.exports:\n            if export.is_reexport() and not export.is_external_export:\n                all_reexports.append(export)\n\n    # Skip if there are none\n    if not all_reexports:\n        continue\n```\n\n----------------------------------------\n\nTITLE: Generating Edge Metadata for Blast Radius Visualization in Python\nDESCRIPTION: This function generates metadata for graph edges in a blast radius visualization, including usage information and location details.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_191\n\nLANGUAGE: python\nCODE:\n```\ndef generate_edge_meta(usage: Usage) -> dict:\n    \"\"\"Generate metadata for graph edges\n\n    Args:\n        usage (Usage): Usage relationship information\n\n    Returns:\n        dict: Edge metadata including name and location\n    \"\"\"\n    return {\n        \"name\": usage.match.source,\n        \"file_path\": usage.match.filepath,\n        \"start_point\": usage.match.start_point,\n        \"end_point\": usage.match.end_point,\n        \"symbol_name\": usage.match.__class__.__name__\n    }\n\ndef is_http_method(symbol: PySymbol) -> bool:\n    \"\"\"Check if a symbol is an HTTP endpoint method\n\n    Args:\n        symbol (PySymbol): Symbol to check\n\n    Returns:\n        bool: True if symbol is an HTTP method\n    \"\"\"\n    if isinstance(symbol, PyFunction) and symbol.is_method:\n        return symbol.name in HTTP_METHODS\n    return False\n```\n\n----------------------------------------\n\nTITLE: Splitting Large Files into Smaller Files in Python\nDESCRIPTION: This code snippet demonstrates how to break up a large Python file by moving each function into its own file. It iterates through all functions in the source file, creates new files named after each function, and moves the functions while preserving dependencies.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_195\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"🔍 Processing file: {filepath}\")\nfile = codebase.get_file(filepath)\n\n# Get the directory path for creating new files\ndir_path = file.directory.path if file.directory else \"\"\n\n# Iterate through all functions in the file\nfor function in file.functions:\n    # Create new filename based on function name\n    new_filepath = f\"{dir_path}/{function.name}.py\"\n    print(f\"📝 Creating new file: {new_filepath}\")\n\n    # Create the new file\n    new_file = codebase.create_file(new_filepath)\n\n    # Move the function to the new file, including dependencies\n    print(f\"➡️ Moving function: {function.name}\")\n    function.move_to_file(new_file, include_dependencies=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Type Annotations in TypeScript Files\nDESCRIPTION: Example showing how to set type annotations and values for TypeScript variables using Codegen's Python API. Demonstrates modifying both type annotations and values of assignments.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nlet status;\nconst data = fetchData();\n```\n\nLANGUAGE: python\nCODE:\n```\nstatus_assignment = file.code_block.get_local_var_assignment(\"status\")\nstatus_assignment.set_type_annotation(\"Status\")\nstatus_assignment.set_value(\"Status.ACTIVE\")\n\ndata_assignment = file.code_block.get_local_var_assignment(\"data\")\ndata_assignment.set_type_annotation(\"ResponseData<T>\")\n\n# Result:\nlet status: Status = Status.ACTIVE;\nconst data: ResponseData<T> = fetchData();\n```\n\n----------------------------------------\n\nTITLE: Analyzing Module Coupling in Python Codebase\nDESCRIPTION: Python function that identifies highly coupled modules by calculating a coupling score based on the number of imported files and files that import a module.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_206\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import defaultdict\n\ndef analyze_module_coupling():\n    coupling_scores = defaultdict(int)\n\n    for file in codebase.files:\n        # Count unique files imported from\n        imported_files = {imp.from_file for imp in file.imports if imp.from_file}\n        coupling_scores[file.filepath] = len(imported_files)\n\n        # Count files that import this file\n        importing_files = {usage.file for symbol in file.symbols\n                         for usage in symbol.usages if usage.file != file}\n        coupling_scores[file.filepath] += len(importing_files)\n\n    # Sort by coupling score\n    sorted_files = sorted(coupling_scores.items(),\n                         key=lambda x: x[1],\n                         reverse=True)\n\n    print(\"\\n🔍 Module Coupling Analysis:\")\n    print(\"\\nMost coupled files:\")\n    for filepath, score in sorted_files[:5]:\n        print(f\"  • {filepath}: {score} connections\")\n\nanalyze_module_coupling()\n```\n\n----------------------------------------\n\nTITLE: Example of FastAPI template rendering style\nDESCRIPTION: This demonstrates the FastAPI style of template rendering where Jinja2Templates is used with a context dictionary and the request parameter. This is the target pattern for the migration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_261\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/users\")\ndef list_users(request: Request):\n    return Jinja2Templates(directory=\"templates\").TemplateResponse(\n        \"users.html\",\n        context={\"users\": users},\n        request=request\n    )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dependencies and Usages in Python\nDESCRIPTION: This snippet shows how dependencies and usages are related using a simple class inheritance example. It demonstrates that if MyClass depends on BaseClass, then BaseClass is used by MyClass.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_108\n\nLANGUAGE: python\nCODE:\n```\n# Input code\nfrom module import BaseClass\n\nclass MyClass(BaseClass):\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\nbase = codebase.get_symbol(\"BaseClass\")\nmy_class = codebase.get_symbol(\"MyClass\")\n\n# MyClass depends on BaseClass\nassert base in my_class.dependencies\n\n# BaseClass is used by MyClass\nassert my_class in base.usages\n```\n\n----------------------------------------\n\nTITLE: Adding Return Type Annotations in TypeScript\nDESCRIPTION: Script that adds null return type annotations to functions without return statements in TypeScript files within the app directory.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_212\n\nLANGUAGE: python\nCODE:\n```\nfor file in codebase.files:\n    # Check if 'app' is in the file's filepath\n    if \"app\" in file.filepath:\n        # Iterate through all functions in the file\n        for function in file.functions:\n            # Check if the function has no return statements\n            if len(function.return_statements) == 0:\n                # Set the return type to None\n                function.set_return_type(\"null\")\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Git in Python\nDESCRIPTION: Shows how to make changes to the codebase, commit them to disk, and then commit those changes to Git with a message. It also demonstrates how to verify commits by running pre-commit hooks.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_58\n\nLANGUAGE: python\nCODE:\n```\n# Make some changes and call `commit()` to sync them to disk\ncodebase.functions[0].rename('foo')\ncodebase.commit()\n\n# Commit all staged changes to git with a message\ncommit = codebase.git_commit(\"feat: update function signatures\")\n\n# You can also verify the commit (runs pre-commit hooks)\ncommit = codebase.git_commit(\"feat: update signatures\", verify=True)\n\n# The method returns the commit object if changes were committed, None otherwise\nif commit:\n    print(f\"Created commit: {commit.hexsha}\")\n```\n\n----------------------------------------\n\nTITLE: Detecting and Analyzing Import Cycles in PyTorch using Codegen and NetworkX (Python)\nDESCRIPTION: This script utilizes the Codegen library to access codebase import information and the `networkx` library to build a dependency graph (`nx.MultiDiGraph`). It then identifies strongly connected components (representing import cycles) in the graph for the PyTorch codebase, counts them, and details the number of static and dynamic imports within each cycle. Assumes a `codebase` object (representing the parsed PyTorch code) from Codegen is available.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/fixing-import-loops.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nG = nx.MultiDiGraph()\n\n# Add all edges to the graph\nfor imp in codebase.imports:\n    if imp.from_file and imp.to_file:\n        edge_color = \"red\" if imp.is_dynamic else \"black\"\n        edge_label = \"dynamic\" if imp.is_dynamic else \"static\"\n\n        # Store the import statement and its metadata\n        G.add_edge(\n            imp.to_file.filepath,\n            imp.from_file.filepath,\n            color=edge_color,\n            label=edge_label,\n            is_dynamic=imp.is_dynamic,\n            import_statement=imp,  # Store the whole import object\n            key=id(imp.import_statement),\n        )\n# Find strongly connected components\ncycles = [scc for scc in nx.strongly_connected_components(G) if len(scc) > 1]\n\nprint(f\" Found {len(cycles)} import cycles:\")\nfor i, cycle in enumerate(cycles, 1):\n    print(f\"\\nCycle #{i}:\")\n    print(f\"Size: {len(cycle)} files\")\n\n    # Create subgraph for this cycle to count edges\n    cycle_subgraph = G.subgraph(cycle)\n\n    # Count total edges\n    total_edges = cycle_subgraph.number_of_edges()\n    print(f\"Total number of imports in cycle: {total_edges}\")\n\n    # Count dynamic and static imports separately\n    dynamic_imports = sum(1 for u, v, data in cycle_subgraph.edges(data=True) if data.get(\"color\") == \"red\")\n    static_imports = sum(1 for u, v, data in cycle_subgraph.edges(data=True) if data.get(\"color\") == \"black\")\n\n    print(f\"Number of dynamic imports: {dynamic_imports}\")\n    print(f\"Number of static imports: {static_imports}\")\n```\n\n----------------------------------------\n\nTITLE: Counting Source Code Lines - Codegen Analytics - Python\nDESCRIPTION: Implements a function to count various types of lines in a source code string, distinguishing between total lines, logical lines (statements), source lines, and comments. Requires only Python standard library. Expected input is source code as a string, and the output includes metrics such as LOC and SLOC. The snippet assumes that additional logic will be filled in for counting logical lines and comments, and is designed to be part of an analytics suite.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/repo_analytics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef count_lines(source: str):\\n    \\\"\\\"\\\"Count different types of lines in source code.\\\"\\\"\\\"\\n    lines = [line.strip() for line in source.splitlines()]\\n    loc = len(lines)\\n    sloc = len([line for line in lines if line])\\n    # ... additional line counting logic ...\\n    return loc, lloc, sloc, comments\n```\n\n----------------------------------------\n\nTITLE: Managing Code Docstrings\nDESCRIPTION: Examples of working with docstrings including accessing content, adding new docstrings and handling language-specific formatting.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_120\n\nLANGUAGE: python\nCODE:\n```\nfunction = file.get_symbol(\"my_function\")\nif function.docstring:\n    print(function.docstring.text)  # Docstring content\n    print(function.docstring.source)  # Full docstring with delimiters\n```\n\nLANGUAGE: python\nCODE:\n```\n# Add a single-line docstring\nfunction.set_docstring(\"A brief description\")\n\n# Add a multi-line docstring\nfunction.set_docstring(\"\"\"\n    A longer description that\n    spans multiple lines.\n\n    Args:\n        param1: Description of first parameter\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Language-Specific Symbol Flagging in Python and TypeScript\nDESCRIPTION: This code illustrates how the flag system adapts to different programming languages, showing examples of how flags appear in Python and TypeScript with the appropriate comment syntax for each language.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_147\n\nLANGUAGE: python\nCODE:\n```\n# Python\n# Results in: def my_function():  # 🚩 Review needed\npython_function.flag(message=\"Review needed\")\n\n# TypeScript\n# Results in: function myFunction() {  // 🚩 Review needed\ntypescript_function.flag(message=\"Review needed\")\n```\n\n----------------------------------------\n\nTITLE: Example Output of Repository Analytics - Console\nDESCRIPTION: Shows a sample formatted report output after analytics execution. The output presents statistics including file count, function and class metrics, line and code metrics, complexity indices, Halstead volume, and maintainability metrics. The template is intended for illustrative purposes and may vary depending on repository and analysis options.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/repo_analytics/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\\ud83d\\udcca Repository Analysis Report \\ud83d\\udcca\\n==================================================\\n\\ud83d\\udcc1 Repository: codegen-sh/codegen\\n\\ud83d\\udcdd Description: [Repository description from GitHub]\\n\\n\\ud83d\\udcc8 Basic Metrics:\\n  \\u2022 Files: 42\\n  \\u2022 Functions: 156\\n  \\u2022 Classes: 23\\n\\n\\ud83d\\udccd Line Metrics:\\n  \\u2022 Lines of Code: 4,521\\n  \\u2022 Logical Lines: 2,845\\n  \\u2022 Source Lines: 3,892\\n  \\u2022 Comments: 629\\n  \\u2022 Comment Density: 13.9%\\n\\n\\ud83d\\uddef\\ufe0f Complexity Metrics:\\n  \\u2022 Average Cyclomatic Complexity: 3.2\\n  \\u2022 Average Maintainability Index: 72\\n  \\u2022 Average Depth of Inheritance: 1.4\\n  \\u2022 Total Halstead Volume: 52,436\\n  \\u2022 Average Halstead Volume: 336\n```\n\n----------------------------------------\n\nTITLE: Calculating Halstead Volume Metrics - Codegen Analytics - Python\nDESCRIPTION: Calculates Halstead metrics based on a collection of operators and operands from code. The function computes unique and total counts for both, then returns the Halstead volume and the raw counts. The snippet requires that code has been parsed to extract operator and operand tokens. It is designed to be part of advanced code metric suites for measuring cognitive load and code comprehension effort.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/repo_analytics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_halstead_volume(operators, operands):\\n    n1 = len(set(operators))  # unique operators\\n    n2 = len(set(operands))  # unique operands\\n    N1 = len(operators)  # total operators\\n    N2 = len(operands)  # total operands\\n    N = N1 + N2\\n    n = n1 + n2\\n    # ... volume calculation ...\\n    return volume, N1, N2, n1, n2\n```\n\n----------------------------------------\n\nTITLE: Creating a Directed Graph of Import Relationships in Python\nDESCRIPTION: This code creates a directed graph representing import relationships in the codebase, distinguishing between static and dynamic imports by color and labels in the graph edges.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/github_checks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor imp in codebase.imports:\n    if imp.from_file and imp.to_file:\n        G.add_edge(\n            imp.to_file.filepath,\n            imp.from_file.filepath,\n            color=\"red\" if getattr(imp, \"is_dynamic\", False) else \"black\",\n            label=\"dynamic\" if getattr(imp, \"is_dynamic\", False) else \"static\",\n            is_dynamic=getattr(imp, \"is_dynamic\", False),\n        )\n```\n\n----------------------------------------\n\nTITLE: Extracting Shared Code to Improve Modularity in Python\nDESCRIPTION: Python function that identifies symbols used by multiple files and extracts them into appropriate shared modules based on their type (e.g., types, constants, utilities).\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_207\n\nLANGUAGE: python\nCODE:\n```\ndef extract_shared_code(file, min_usages=3):\n    # Find symbols used by multiple files\n    for symbol in file.symbols:\n        # Get unique files using this symbol\n        using_files = {usage.file for usage in symbol.usages\n                      if usage.file != file}\n\n        if len(using_files) >= min_usages:\n            # Create appropriate shared module\n            module_name = determine_shared_module(symbol)\n            if not codebase.has_file(f\"shared/{module_name}.py\"):\n                shared_file = codebase.create_file(f\"shared/{module_name}.py\")\n            else:\n                shared_file = codebase.get_file(f\"shared/{module_name}.py\")\n\n            # Move symbol to shared module\n            symbol.move_to_file(shared_file, strategy=\"update_all_imports\")\n\ndef determine_shared_module(symbol):\n    # Logic to determine appropriate shared module name\n    if symbol.is_type:\n        return \"types\"\n    elif symbol.is_constant:\n        return \"constants\"\n    elif symbol.is_utility:\n        return \"utils\"\n    else:\n        return \"common\"\n```\n\n----------------------------------------\n\nTITLE: Updating React Component Names and Props\nDESCRIPTION: This Python script updates React component names and props throughout a codebase. It replaces old component names, updates prop names and values, and adds necessary imports.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_134\n\nLANGUAGE: python\nCODE:\n```\n# Find target component\nnew_component = codebase.get_symbol(\"NewComponent\")\n\nfor function in codebase.functions:\n    if function.is_jsx:\n        # Update JSX elements\n        for element in function.jsx_elements:\n            if element.name == \"OldComponent\":\n                # Update name\n                element.set_name(\"NewComponent\")\n\n                # Edit props\n                needs_clsx = not file.has_import(\"clsx\")\n                for prop in element.props:\n                    if prop.name == \"className\":\n                        prop.set_value('clsx(\"new-classname\")')\n                        needs_clsx = True\n                    elif prop.name == \"onClick\":\n                        prop.set_name('handleClick')\n\n                # Add import if needed\n                if needs_clsx:\n                    file.add_import_from_import_source(\"import clsx from 'clsx'\")\n\n                # Add import if needed\n                if not file.has_import(\"NewComponent\"):\n                    file.add_import(new_component)\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations to Untyped Elements in Python\nDESCRIPTION: This snippet demonstrates how to add type annotations to untyped function parameters, return types, and class attributes. It uses Codegen SDK's type manipulation APIs to modify the AST and add annotations.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_209\n\nLANGUAGE: python\nCODE:\n```\n# Add type annotations to untyped parameters\nfor function in codebase.functions:\n    for param in function.parameters:\n        if not param.is_typed:\n            # Infer or add a default type (e.g., 'Any')\n            param.type = 'Any'\n\n# Add return type annotations to untyped functions\nfor function in codebase.functions:\n    if not function.return_type or not function.return_type.is_typed:\n        # Infer or add a default return type (e.g., 'None')\n        function.return_type = 'None'\n\n# Add type annotations to untyped class attributes\nfor class_def in codebase.classes:\n    for attr in class_def.attributes:\n        if not attr.is_typed:\n            # Infer or add a default type (e.g., 'Any')\n            attr.type = 'Any'\n\n# Commit changes\ncodebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Method Chaining with Return Type Resolution in Python\nDESCRIPTION: Illustrates how return types must be resolved to determine the available methods in chained calls. Demonstrates the relationship between function definitions and their return types.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/E. Function Calls.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Foo:\n    def foo(self) -> int:\n        return 1\n\n\nclass Bar:\n    def bar(self) -> Foo: ...\n\n\na = Bar()\na.bar().foo()\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Functions in Python with Codegen\nDESCRIPTION: Identifies and removes unused functions from the codebase. The script skips test files and functions with decorators, only removing functions that have no usages or call sites.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/delete_dead_code/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor function in codebase.functions:\n    if \"test\" in function.file.filepath:\n        continue\n    if function.decorators:\n        continue\n    if not function.usages and not function.call_sites:\n        print(f\"🗑️ Removing unused function: {function.name}\")\n        function.remove()\n```\n\n----------------------------------------\n\nTITLE: Class Method Access and Usage\nDESCRIPTION: Shows how to access and analyze class methods and their usages through the Class API.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_78\n\nLANGUAGE: python\nCODE:\n```\n# Access methods\nfor method in class_def.methods:\n    print(f\"Method: {method.name}\")\n    # Find all usages of this method\n    for usage in method.usages:\n        print(f\"Used in {usage.file.name}\")\n\n# Get specific methods\ninit_method = class_def.constructor  # Get __init__ method\nprocess_method = class_def.get_method(\"process_data\")\n\n# Filter methods\npublic_methods = class_def.methods(private=False)  # Exclude private methods\nregular_methods = class_def.methods(magic=False)   # Exclude magic methods\n```\n\n----------------------------------------\n\nTITLE: Calculating Cyclomatic Complexity in Python\nDESCRIPTION: A function that calculates the cyclomatic complexity of a code block by analyzing control flow structures. It iterates through statements and increments complexity based on decision points.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/cyclomatic_complexity/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_cyclomatic_complexity(code_block):\n    complexity = 1  # Base complexity\n    for statement in code_block.statements:\n        if isinstance(statement, IfBlockStatement):\n            complexity += 1 + len(statement.elif_statements)\n```\n\n----------------------------------------\n\nTITLE: Inferring and Standardizing Props in React Components\nDESCRIPTION: This script analyzes React components to infer prop types based on usage and creates TypeScript interfaces for them. It helps in standardizing and typing props across the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_225\n\nLANGUAGE: python\nCODE:\n```\n# Add TypeScript interfaces for props\nfor function in codebase.functions:\n    if not function.is_jsx:\n        continue\n\n    # Get props parameter\n    props_param = function.parameters[0] if function.parameters else None\n    if not props_param:\n        continue\n\n    # Collect used props\n    used_props = set()\n    for prop_access in function.function_calls:\n        if f\"{props_param.name}.\" in prop_access.source:\n            prop_name = prop_access.source.split(\".\")[1]\n            used_props.add(prop_name)\n\n    # Create interface\n    if used_props:\n        interface_def = f\"\"\"\ninterface {function.name}Props {{\n    {chr(10).join(f'    {prop}: any;' for prop in used_props)}\n}}\n\"\"\"\n        function.insert_before(interface_def)\n        # Update function signature\n        function.edit(function.source.replace(\n            f\"({props_param.name})\",\n            f\"({props_param.name}: {function.name}Props)\"\n        ))\n```\n\n----------------------------------------\n\nTITLE: Converting unittest Test Class to pytest Functions with Fixtures\nDESCRIPTION: This example demonstrates how to convert a unittest TestCase class with setUp and tearDown methods to pytest's function-based style with fixtures. The fixture replaces the setup and teardown logic, making it available to test functions as parameters.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_229\n\nLANGUAGE: python\nCODE:\n```\n# From:\nclass TestUsers(unittest.TestCase):\n    def setUp(self):\n        self.db = setup_test_db()\n\n    def tearDown(self):\n        self.db.cleanup()\n\n    def test_create_user(self):\n        user = self.db.create_user(\"test\")\n        self.assertEqual(user.name, \"test\")\n\n# To:\nimport pytest\n\n@pytest.fixture\ndef db():\n    db = setup_test_db()\n    yield db\n    db.cleanup()\n\ndef test_create_user(db):\n    user = db.create_user(\"test\")\n    assert user.name == \"test\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Python Function with Tree-sitter\nDESCRIPTION: Demonstrates how Tree-sitter parses a simple Python function into a concrete syntax tree, showing the hierarchical node structure with function definition, name, parameters, and body elements.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/2. parsing/A. Tree Sitter.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef my_function():\n    pass\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule [0, 0] - [3, 0]\n  function_definition [0, 0] - [1, 8]\n    name: identifier [0, 4] - [0, 15]\n    parameters: parameters [0, 15] - [0, 17]\n    body: block [1, 4] - [1, 8]\n      pass_statement [1, 4] - [1, 8]\n```\n\n----------------------------------------\n\nTITLE: Model Detection and Analysis in Python\nDESCRIPTION: Script snippet that demonstrates how to identify SQLAlchemy model files in a repository for analysis and type annotation enhancement.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_type_annotations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncodebase = Codebase.from_repo(\"your/repo\")\nfor file in codebase.files:\n    if \"models\" not in file.filepath:\n        continue\n```\n\n----------------------------------------\n\nTITLE: Initializing and Accessing CodegenSession Properties in Python\nDESCRIPTION: This code initializes a CodegenSession object and prints its identity, configuration, and profile properties multiple times. It demonstrates how to import the session module and access the key properties of a session instance.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/auth/session.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen.cli.auth.session import CodegenSession\n\n\nsession = CodegenSession()\nprint(session.identity)\nprint(session.identity)\nprint(session.config)\nprint(session.config)\nprint(session.profile)\nprint(session.profile)\n```\n\n----------------------------------------\n\nTITLE: Calculating Halstead Volume in Python\nDESCRIPTION: Function to compute Halstead Volume, a software metric measuring code complexity. It calculates the volume based on unique operators and operands in the code.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_174\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_halstead_volume(operators, operands):\n    n1 = len(set(operators))\n    n2 = len(set(operands))\n\n    N1 = len(operators)\n    N2 = len(operands)\n\n    N = N1 + N2\n    n = n1 + n2\n\n    if n > 0:\n        volume = N * math.log2(n)\n        return volume, N1, N2, n1, n2\n    return 0, N1, N2, n1, n2\n```\n\n----------------------------------------\n\nTITLE: Setting Custom AI Request Limits in Python\nDESCRIPTION: Demonstrates how to configure custom AI request limits for large operations. This snippet shows how to increase the maximum allowed AI requests in a session.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_158\n\nLANGUAGE: python\nCODE:\n```\n# Set custom AI request limits for large operations\ncodebase.set_session_options(max_ai_requests=200)\n```\n\n----------------------------------------\n\nTITLE: Detecting Promise Chains in Codebase with Python\nDESCRIPTION: Code that identifies all promise chains across the entire codebase and stores them in a list for further processing. This is the first step in the migration process to find all instances that need transformation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Get all promise chains in the codebase\npromise_chains = []\nfor file in codebase.files:\n    promise_chains = promise_chains + file.promise_chains\n```\n\n----------------------------------------\n\nTITLE: Analyzing High-Impact AI Code in Python\nDESCRIPTION: Accesses and displays information about high-impact AI symbols and top AI-contributed files, including symbol names, file paths, usage counts, and AI contribution percentages.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Access high-impact AI symbols\nfor symbol in results[\"high_impact_symbols\"]:\n    print(f\"Symbol: {symbol['name']} ({symbol['filepath']})\")\n    print(f\"Used by {symbol['usage_count']} other symbols\")\n    print(f\"Last edited by: {symbol['last_editor']}\")\n\n# View top AI-contributed files\nfor file_path, percentage in stats[\"top_ai_files\"]:\n    print(f\"{file_path}: {percentage:.1f}% AI contribution\")\n```\n\n----------------------------------------\n\nTITLE: Basic Tree Walking Algorithm in Python\nDESCRIPTION: A recursive function that walks through all child nodes in an AST to compute dependencies. This represents the core algorithm for traversing the entire syntax tree.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/B. Tree Walking.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef compute_dependencies(self):\n    for child in self.children:\n        compute_dependencies(child)\n```\n\n----------------------------------------\n\nTITLE: Filtering and Querying Codebase Content in Python\nDESCRIPTION: This Python snippet shows how to extract specific resources, filter classes by inheritance, find functions with decorators, and locate files matching a naming pattern. Uses high-level filtering and querying APIs from Codegen. Inputs: codebase object. Outputs: Variables holding filtered resources; typically followed by additional processing or output.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Grab specific content by name\nmy_resource = codebase.get_symbol('TestResource')\n\n# Find classes that inherit from a specific base\nresource_classes = [\n    cls for cls in codebase.classes\n    if cls.is_subclass_of('Resource')\n]\n\n# Find functions with specific decorators\ntest_functions = [\n    f for f in codebase.functions\n    if any('pytest' in d.source for d in f.decorators)\n]\n\n# Find files matching certain patterns\ntest_files = [\n    f for f in codebase.files\n    if f.name.startswith('test_')\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Unittest Assertions to Pytest Style\nDESCRIPTION: Demonstrates how to convert various unittest assertions to pytest's assert statements. Includes examples of boolean assertions, equality checks, and exception testing.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/unittest_to_pytest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# From:\ndef test_validation(self):\n    self.assertTrue(is_valid(\"test\"))\n    self.assertEqual(count_items(), 0)\n    self.assertRaises(ValueError, parse_id, \"invalid\")\n\n\n# To:\ndef test_validation():\n    assert is_valid(\"test\")\n    assert count_items() == 0\n    with pytest.raises(ValueError):\n        parse_id(\"invalid\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Remote Repository Codebase\nDESCRIPTION: Shows how to fetch and parse a repository from GitHub using the from_repo function with customization options for temporary directory, clone depth, and specific commits.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n# Fetch and parse a repository (defaults to /tmp/codegen/{repo_name})\ncodebase = Codebase.from_repo('fastapi/fastapi')\n\n# Customize temp directory, clone depth, specific commit, or programming language\ncodebase = Codebase.from_repo(\n    'fastapi/fastapi',\n    tmp_dir='/custom/temp/dir',  # Optional: custom temp directory\n    commit='786a8ada7ed0c7f9d8b04d49f24596865e4b7901',  # Optional: specific commit\n    shallow=False,  # Optional: full clone instead of shallow\n    language=\"python\"  # Optional: override language detection\n)\n```\n\n----------------------------------------\n\nTITLE: Recursively Collecting Function Context with Codegen in Python\nDESCRIPTION: This Python function recursively collects dependencies and usages for a given `Symbol` up to a specified `degree`. It handles imports using `hop_through_imports` and aggregates the symbols found in `dependencies` and `usages` sets. This provides comprehensive context for automatic docstring generation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/document_functions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_extended_context(symbol: Symbol, degree: int) -> tuple[set[Symbol], set[Symbol]]:\n    \"\"\"Recursively collect dependencies and usages up to the specified degree.\"\"\"\n    dependencies = set()\n    usages = set()\n\n    if degree > 0:\n        for dep in symbol.dependencies:\n            if isinstance(dep, Import):\n                dep = hop_through_imports(dep)\n            if isinstance(dep, Symbol):\n                dependencies.add(dep)\n                # Recursively collect nested context\n                dep_deps, dep_usages = get_extended_context(dep, degree - 1)\n                dependencies.update(dep_deps)\n                usages.update(dep_usages)\n```\n\n----------------------------------------\n\nTITLE: Transforming Promise Chain with Custom Logic in Python\nDESCRIPTION: Code that converts a promise chain to async/await syntax and returns the transformed code for further customization. This allows adding additional business logic before committing changes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Or return the transformed code + clean up additonal business logic from .then blocks\npromise_statement = promise_chain.parent_statement\nnew_code = promise_chain.convert_to_async_await(inplace_edit=False)\n\npromise_statement.edit(\n    f\"\"\"\n{new_code}\n\n# handle additional business logic here\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Exception Testing from unittest to pytest\nDESCRIPTION: This example demonstrates how to convert unittest's exception testing methods to pytest's raises context manager. The pytest approach provides a clearer syntax for testing exceptions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_234\n\nLANGUAGE: python\nCODE:\n```\n# From:\ndef test_exceptions(self):\n    self.assertRaises(ValueError, process_data, None)\n    with self.assertRaises(TypeError):\n        process_data(123)\n\n# To:\ndef test_exceptions():\n    with pytest.raises(ValueError):\n        process_data(None)\n    with pytest.raises(TypeError):\n        process_data(123)\n```\n\n----------------------------------------\n\nTITLE: Example of a Problematic Import Cycle with Mixed Static and Dynamic Imports\nDESCRIPTION: This code demonstrates a problematic circular dependency where a file has both static (top-level) and dynamic imports from the same module, which can lead to initialization issues.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_240\n\nLANGUAGE: python\nCODE:\n```\n# In flex_decoding.py\nfrom .flex_attention import (\n    compute_forward_block_mn,\n    compute_forward_inner,\n    # ... more static imports\n)\n\n# Also in flex_decoding.py\ndef create_flex_decoding_kernel(*args, **kwargs):\n    from .flex_attention import set_head_dim_values  # dynamic import\n```\n\n----------------------------------------\n\nTITLE: Training Data Output Format in JSON\nDESCRIPTION: The structure of the generated training_data.json file, showing how functions, their implementations, dependencies, usages, and metadata are organized.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/generate_training_data/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": [\n    {\n      \"implementation\": {\n        \"source\": \"...\",\n        \"filepath\": \"...\"\n      },\n      \"dependencies\": [\n        {\n          \"source\": \"...\",\n          \"filepath\": \"...\"\n        }\n      ],\n      \"usages\": [\n        {\n          \"source\": \"...\",\n          \"filepath\": \"...\"\n        }\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"total_functions\": 100,\n    \"total_processed\": 85,\n    \"avg_dependencies\": 2.5,\n    \"avg_usages\": 3.2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Iterating Symbols\nDESCRIPTION: Demonstrates how to access and iterate over different types of symbols in the codebase including functions and classes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_74\n\nLANGUAGE: python\nCODE:\n```\n# Core symbol types\nsymbol = codebase.get_symbol(\"process_data\") # will return a Function, Class, etc.\nfunction = codebase.get_function(\"process_data\")\nclass_def = codebase.get_class(\"DataProcessor\")\n\n# Iterate over all symbols (includes functions + classes)\nfor symbol in codebase.symbols:\n    print(symbol.name)\n\n# Iterate over all functions and classes\nfor symbol in codebase.functions + codebase.classes:\n    print(symbol.name)\n```\n\n----------------------------------------\n\nTITLE: Working with External Modules in Python using Codegen SDK\nDESCRIPTION: Demonstrates how to identify imports that reference external modules versus local imports. This is useful for distinguishing between project code and third-party dependencies.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_88\n\nLANGUAGE: python\nCODE:\n```\n# Check if import is from external package\nfor imp in file.imports:\n    if isinstance(imp.imported_symbol, ExternalModule):\n        print(f\"External import: {imp.name} from {imp.module}\")\n    else:\n        print(f\"Local import: {imp.name}\")\n```\n\n----------------------------------------\n\nTITLE: Converting Default Exports to Named Exports in Python\nDESCRIPTION: A Python code snippet that loops through exports in a file and converts default exports to named exports. This is the core transformation logic of the migration script.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/remove_default_exports/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor export in file.exports:\n    if export.is_default_export():\n        export.make_non_default()\n```\n\n----------------------------------------\n\nTITLE: Calculating General Codebase Statistics in Python\nDESCRIPTION: Code snippet to calculate basic codebase statistics such as number of files, functions, and classes using Codegen's codebase object.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_177\n\nLANGUAGE: python\nCODE:\n```\nnum_files = len(codebase.files(extensions=\"*\"))\nnum_functions = len(codebase.functions)\nnum_classes = len(codebase.classes)\n```\n\n----------------------------------------\n\nTITLE: Filtering for Specific File Types in Python\nDESCRIPTION: Shows how to filter for specific file types such as Markdown documentation files using file extensions with the Codegen SDK.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_67\n\nLANGUAGE: python\nCODE:\n```\n# Get only markdown documentation files\ndocs = codebase.files(extensions=[\".md\", \".mdx\"])\n```\n\n----------------------------------------\n\nTITLE: Running SWEBench Evaluation with Claude Model\nDESCRIPTION: Executes an evaluation on the SWEBench lite dataset using Claude 3 Sonnet, targeting the Django repository and processing 5 examples across 10 workers.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/swebench_agent_run/local_run.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait run_eval(use_existing_preds=None, dataset=\"lite\", length=5, repo=\"django/django\", num_workers=10, model=\"claude-3-7-sonnet-latest\")\n```\n\n----------------------------------------\n\nTITLE: Finding Longest Call Chain in Python using NetworkX\nDESCRIPTION: This function builds a directed graph of function calls and finds the longest path. It uses NetworkX for graph operations and includes safeguards against infinite recursion. The function relies on a custom '.function_calls' property for efficient traversal.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_130\n\nLANGUAGE: python\nCODE:\n```\ndef get_max_call_chain(function):\n    G = nx.DiGraph()\n\n    def build_graph(func, depth=0):\n        if depth > 10:  # Prevent infinite recursion\n            return\n        for call in func.function_calls:\n            called_func = call.function_definition\n            G.add_edge(func, called_func)\n            build_graph(called_func, depth + 1)\n\n    build_graph(function)\n    return nx.dag_longest_path(G)\n```\n\n----------------------------------------\n\nTITLE: Creating Blast Radius Visualization in Python\nDESCRIPTION: This function builds a blast radius visualization for a given symbol, recursively processing its usages up to a maximum depth.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_192\n\nLANGUAGE: python\nCODE:\n```\ndef create_blast_radius_visualization(symbol: PySymbol, depth: int = 0):\n    \"\"\"Create visualization of symbol usage relationships\n\n    Args:\n        symbol (PySymbol): Starting symbol to analyze\n        depth (int): Current recursion depth\n    \"\"\"\n    # Prevent excessive recursion\n    if depth >= MAX_DEPTH:\n        return\n\n    # Process each usage of the symbol\n    for usage in symbol.usages:\n        usage_symbol = usage.usage_symbol\n\n        # Determine node color based on type\n        if is_http_method(usage_symbol):\n            color = COLOR_PALETTE.get(\"HTTP_METHOD\")\n        else:\n            color = COLOR_PALETTE.get(usage_symbol.__class__.__name__, \"#f694ff\")\n\n        # Add node and edge to graph\n        G.add_node(usage_symbol, color=color)\n        G.add_edge(symbol, usage_symbol, **generate_edge_meta(usage))\n\n        # Recursively process usage symbol\n        create_blast_radius_visualization(usage_symbol, depth + 1)\n```\n\n----------------------------------------\n\nTITLE: Google Style Docstrings and AI Integration\nDESCRIPTION: Demonstrates working with Google-style docstrings and using AI to generate and improve documentation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_124\n\nLANGUAGE: python\nCODE:\n```\n# Edit while preserving Google style\nsymbol_a = file.get_symbol(\"SymbolA\")\nfunc_b = symbol_a.get_method(\"funcB\")\nfunc_b.docstring.to_google_docstring(func_b)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Generate a docstring using AI\nfunction = codebase.get_function(\"my_function\")\n\nnew_docstring = codebase.ai(\n    \"Generate a comprehensive docstring in Google style\",\n    target=function\n    context={\n        # provide additional context to the LLM\n        'usages': function.usages,\n        'dependencies': function.dependencies\n    }\n)\nfunction.set_docstring(new_docstring)\n```\n\n----------------------------------------\n\nTITLE: Creating Module Dependency Graphs in Python using NetworkX\nDESCRIPTION: This function builds a directed graph representing module dependencies by recursively analyzing imports between files. It starts with a single file and traverses all its imports to create a complete dependency graph.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_139\n\nLANGUAGE: python\nCODE:\n```\ndef create_module_graph(start_file: File):\n    G = nx.DiGraph()\n\n    def add_imports(file):\n        for imp in file.imports:\n            if imp.resolved_symbol and imp.resolved_symbol.file:\n                graph.add_edge(file, imp.resolved_symbol.file)\n                add_imports(imp.resolved_symbol.file)\n\n    add_imports(start_file)\n    return graph\n\n# Visualize module dependencies\nmain = codebase.get_file(\"main.py\")\nmodule_graph = create_module_graph(main)\ncodebase.visualize(module_graph, root=main)\n```\n\n----------------------------------------\n\nTITLE: Utilizing Python for Codebase Manipulation\nDESCRIPTION: This Python snippet shows how code can systematically organize existing structures within a codebase, akin to implementing Unix `grep` functionality. It leverages an API to relocate functions, showcasing extensibility through programmatic actions. Dependencies include a structured set of APIs reflecting codebase functions. It inputs function names and outputs restructured file organizations.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/act-via-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Implement `grep` via for loops and if statements\nfor function in codebase.functions:\n   if 'Page' in function.name:  \n      \n      # Implement systematic actions, like moving things around, through an API\n      function.move_to_file('/pages/' + function.name + '.tsx')\n```\n\n----------------------------------------\n\nTITLE: Initializing Codebase Analysis in Python\nDESCRIPTION: Demonstrates how to initialize a codebase object from a repository directory for analysis. Uses the Codegen library to parse Python files.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/symbol-attributions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n\n# Initialize codebase object from directory\ncodebase = Codebase.from_repo(\"your-org/your-repo\", language=\"python\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository Access with PyGit2\nDESCRIPTION: Sets up access to a Git repository using PyGit2 and imports required modules for patch operations. Initializes a Repository object with a specific path and prints the repository path.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/git/reop.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# test apply_patch\nfrom pygit2 import Diff\nfrom pygit2.repository import Repository\n\nfrom codegen.cli.git.patch import apply_patch\n\ngit_repo = Repository(\"/Users/christinewang/git/customer_repos/codegen-staging\")\nprint(git_repo.path)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Test Files and Classes Statistically in Python\nDESCRIPTION: This Python snippet filters the codebase to locate test functions and classes, computes stats such as totals and test distribution, ranks files by test class counts, and outputs the information. It requires the codegen package and a parsed Codebase object. Uses the collections.Counter class. Inputs: codebase object. Outputs: Console analytics for understanding test organization.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import Counter\n\n# Filter to all test functions and classes\ntest_functions = [x for x in codebase.functions if x.name.startswith('test_')]\ntest_classes = [x for x in codebase.classes if x.name.startswith('Test')]\n\nprint(\"🧪 Test Analysis\")\nprint(\"=\" * 50)\nprint(f\"📝 Total Test Functions: {len(test_functions)}\")\nprint(f\"🔬 Total Test Classes: {len(test_classes)}\")\nprint(f\"📊 Tests per File: {len(test_functions) / len(codebase.files):.1f}\")\n\n# Find files with the most tests\nprint(\"\\n📚 Top Test Files by Class Count\")\nprint(\"-\" * 50)\nfile_test_counts = Counter([x.file for x in test_classes])\nfor file, num_tests in file_test_counts.most_common()[:5]:\n    print(f\"🔍 {num_tests} test classes: {file.filepath}\")\n    print(f\"   📏 File Length: {len(file.source)} lines\")\n    print(f\"   💡 Functions: {len(file.functions)}\")\n```\n\n----------------------------------------\n\nTITLE: Function Statement Manipulation\nDESCRIPTION: Demonstrates how to add statements to the beginning and end of function bodies using the Function API.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_76\n\nLANGUAGE: python\nCODE:\n```\n# Add statements at the start of a function\nfunction.prepend_statements(\"print('Starting function')\")\nmethod.prepend_statements(\"self.validate_input()\")\n\n# Add statements at the end of a function\nfunction.add_statements(\"print('Done')\")\nmethod.add_statements(\"return self.result\")\n```\n\n----------------------------------------\n\nTITLE: Creating Dependency Graph for Code Modularity Analysis in Python\nDESCRIPTION: Python function that builds a directed graph representing file dependencies in a codebase, which can be used to analyze import relationships and identify circular dependencies.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_203\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\nfrom collections import defaultdict\n\n# Create a graph of file dependencies\ndef create_dependency_graph():\n    G = nx.DiGraph()\n\n    for file in codebase.files:\n        # Add node for this file\n        G.add_node(file.filepath)\n\n        # Add edges for each import\n        for imp in file.imports:\n            if imp.from_file:  # Skip external imports\n                G.add_edge(file.filepath, imp.from_file.filepath)\n\n    return G\n\n# Create and analyze the graph\ngraph = create_dependency_graph()\n\n# Find circular dependencies\ncycles = list(nx.simple_cycles(graph))\nif cycles:\n    print(\"🔄 Found circular dependencies:\")\n    for cycle in cycles:\n        print(f\"  • {' -> '.join(cycle)}\")\n\n# Calculate modularity metrics\nprint(\"\\n📊 Modularity Metrics:\")\nprint(f\"  • Number of files: {len(graph.nodes)}\")\nprint(f\"  • Number of imports: {len(graph.edges)}\")\nprint(f\"  • Average imports per file: {len(graph.edges)/len(graph.nodes):.1f}\")\n```\n\n----------------------------------------\n\nTITLE: Updating Imports in Python using Codegen\nDESCRIPTION: This snippet demonstrates how to use Codegen's import analysis to find and update imports. It handles both direct and aliased imports while preserving import structure and formatting.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/freezegun_to_timemachine_migration/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor imp in file.imports:\n    if imp.symbol_name and \"freezegun\" in imp.source:\n        if imp.name == \"freeze_time\":\n            imp.edit(\"from time_machine import travel\")\n```\n\n----------------------------------------\n\nTITLE: Processing Codebase for Training Data Generation in Python\nDESCRIPTION: This function processes all functions in a codebase to generate training data. It collects function contexts and computes metadata such as average dependencies and usages.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_184\n\nLANGUAGE: python\nCODE:\n```\ndef run(codebase: Codebase):\n    \"\"\"Generate training data using a node2vec-like approach for code embeddings.\"\"\"\n    # Track all function contexts\n    training_data = {\n        \"functions\": [],\n        \"metadata\": {\n            \"total_functions\": len(codebase.functions),\n            \"total_processed\": 0,\n            \"avg_dependencies\": 0,\n            \"avg_usages\": 0,\n        },\n    }\n\n    # Process each function in the codebase\n    for function in codebase.functions:\n        # Skip if function is too small\n        if len(function.source.split(\"\\n\")) < 2:\n            continue\n\n        # Get function context\n        context = get_function_context(function)\n\n        # Only keep functions with enough context\n        if len(context[\"dependencies\"]) + len(context[\"usages\"]) > 0:\n            training_data[\"functions\"].append(context)\n\n    # Update metadata\n    training_data[\"metadata\"][\"total_processed\"] = len(training_data[\"functions\"])\n    if training_data[\"functions\"]:\n        training_data[\"metadata\"][\"avg_dependencies\"] = sum(\n            len(f[\"dependencies\"]) for f in training_data[\"functions\"]\n        ) / len(training_data[\"functions\"])\n        training_data[\"metadata\"][\"avg_usages\"] = sum(\n            len(f[\"usages\"]) for f in training_data[\"functions\"]\n        ) / len(training_data[\"functions\"])\n\n    return training_data\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Codemods with CLI\nDESCRIPTION: Shows how to create and execute codemods using the Codegen CLI, including basic usage and AI-powered generation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncodegen create rename-function\ncodegen create rename-function -d \"Rename the getUserData function to fetchUserProfile\"\ncodegen run rename-function\n```\n\n----------------------------------------\n\nTITLE: Loading Environment-Specific Configuration with ENV=prod\nDESCRIPTION: This snippet tests loading environment-specific configuration when ENV is set to 'prod'. It sets the ENV environment variable to 'prod', imports the GlobalEnv class, and prints the ALGOLIA_SEARCH_KEY value from the loaded configuration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/env/global_env.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# test: ENV=prod loads .env.prod\nimport os\n\nos.environ[\"ENV\"] = \"prod\"\nfrom codegen.cli.env.global_env import GlobalEnv\n\nglobal_env = GlobalEnv()\nprint(global_env.ALGOLIA_SEARCH_KEY)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Session Options for Complex Operations in Python\nDESCRIPTION: Shows how to configure additional session parameters for handling larger tasks or complex operations. This example increases the allowed execution time and transaction count.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_160\n\nLANGUAGE: python\nCODE:\n```\ncodebase.set_session_options(max_seconds=300, max_transactions=500)\n```\n\n----------------------------------------\n\nTITLE: Exploring Codebase with Jupyter in Python\nDESCRIPTION: Demonstrates how to use the Codegen library within a Jupyter notebook to initialize a codebase and print basic statistics about the project's files and functions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n\n# Initialize codebase\ncodebase = Codebase('../../')\n\n# Print stats\nprint(f\"📚 Total Files: {len(codebase.files)}\")\nprint(f\"⚡ Total Functions: {len(codebase.functions)}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM Integration with API Key in Python\nDESCRIPTION: This code shows how to set up an OpenAI API key for use with GraphSitter's AI capabilities, which is a prerequisite for using any of the LLM-powered code generation or analysis features.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_149\n\nLANGUAGE: python\nCODE:\n```\n# Set your OpenAI API key\ncodebase.set_ai_key(\"your-openai-api-key\")\n```\n\n----------------------------------------\n\nTITLE: Adding Soft Delete Conditions to SQLAlchemy Joins in Python\nDESCRIPTION: This function adds a 'deleted_at.is_(None)' check to qualifying joins. It handles different join condition patterns, including simple joins with no conditions and joins with existing conditions, combining them using 'and_'.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_soft_delete/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef add_deleted_at_check(file, call, model_name):\n    call_args = list(call.args)\n    deleted_at_check = f\"{model_name}.deleted_at.is_(None)\"\n\n    if len(call_args) == 1:\n        call_args.append(deleted_at_check)\n        return\n\n    second_arg = call_args[1].value\n    if isinstance(second_arg, FunctionCall) and second_arg.name == \"and_\":\n        second_arg.args.append(deleted_at_check)\n    else:\n        call_args[1].edit(f\"and_({second_arg.source}, {deleted_at_check})\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Depth of Inheritance in Python\nDESCRIPTION: Simple function to calculate the Depth of Inheritance (DOI) for a given class by counting the length of its superclasses list.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_175\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_doi(cls):\n    return len(cls.superclasses)\n```\n\n----------------------------------------\n\nTITLE: Resetting Codebase State in Python\nDESCRIPTION: Demonstrates how to use the reset() method to revert a codebase to its initial state after making changes. It includes examples of removing and creating files, then verifying the reset.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_56\n\nLANGUAGE: python\nCODE:\n```\n# Make some changes\ncodebase.get_file(\"src/app.py\").remove()\ncodebase.create_file(\"src/new_file.py\", \"x = 1\")\n\n# Check the changes\nassert codebase.get_file(\"src/app.py\", optional=True) is None\nassert codebase.get_file(\"src/new_file.py\") is not None\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Model Before Type Annotation Migration in Python\nDESCRIPTION: Complete example of SQLAlchemy models before the migration to typed annotations, showing traditional column and relationship definitions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_type_annotations/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import relationship, backref\nfrom database import Base\n\n\nclass Publisher(Base):\n    __tablename__ = \"publishers\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, unique=True, index=True)\n    books = relationship(\"Book\", backref=\"publisher\")\n\n\nclass Book(Base):\n    __tablename__ = \"books\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    author = Column(String, index=True)\n    description = Column(String)\n    publisher_id = Column(Integer, ForeignKey(\"publishers.id\"))\n```\n\n----------------------------------------\n\nTITLE: Transforming Promise Chain to Async/Await In-Place with Python\nDESCRIPTION: Code that converts a promise chain to async/await syntax and commits the changes directly to the codebase. This performs an in-place transformation without returning the modified code.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Transform a promise chain to async/await (inplace)\npromise_chain.convert_to_async_await()\ncodebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Import Statement Access\nDESCRIPTION: Shows how to access and work with import statements in Python files.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_84\n\nLANGUAGE: python\nCODE:\n```\n# Direct access to imports via file\nfor imp in file.imports:\n    ...\n\n# Grab by name of symbol being imported\nimp = file.get_import('math')\n```\n\n----------------------------------------\n\nTITLE: Calculating Cyclomatic Complexity - Codegen Analytics - Python\nDESCRIPTION: Defines a function to compute the cyclomatic complexity of a given function object by analyzing its code statements for control structures such as if-blocks. Relies on the function's structural representation, possibly classes like IfBlockStatement. Returns a complexity score indicating the number of unique code paths. Requires an AST-like representation and is suitable for integration into static code analyzers.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/repo_analytics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_cyclomatic_complexity(function):\\n    def analyze_statement(statement):\\n        complexity = 0\\n        if isinstance(statement, IfBlockStatement):\\n            complexity += 1\\n            if hasattr(statement, \\\"elif_statements\\\"):\\n                complexity += len(statement.elif_statements)\\n        # ... additional complexity calculations ...\\n        return complexity\\n\\n    return 1 + analyze_block(function.code_block)\n```\n\n----------------------------------------\n\nTITLE: Adding Return Type Annotations in Python\nDESCRIPTION: Script that adds None return type annotations to functions without return statements in Python files within the app directory.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_211\n\nLANGUAGE: python\nCODE:\n```\nfor file in codebase.files:\n    # Check if 'app' is in the file's filepath\n    if \"app\" in file.filepath:\n        # Iterate through all functions in the file\n        for function in file.functions:\n            # Check if the function has no return statements\n            if len(function.return_statements) == 0:\n                # Set the return type to None\n                function.set_return_type(\"None\")\n```\n\n----------------------------------------\n\nTITLE: Updating Code with New Pydantic Models\nDESCRIPTION: Inserts the newly created Pydantic model definition and updates the original dictionary assignment to use the model. This transformation maintains the original functionality while adding type safety.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/dict_to_schema/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nglobal_var.insert_before(model_def + \"\\n\\n\")\nglobal_var.set_value(f\"{class_name}(**{global_var.value.source})\")\n```\n\n----------------------------------------\n\nTITLE: Detecting Problematic Import Loops with Mixed Import Types in Python\nDESCRIPTION: This function identifies potentially problematic import cycles by finding files with both static and dynamic imports between them. It analyzes the graph structure and reports detailed information about the mixed imports.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_241\n\nLANGUAGE: python\nCODE:\n```\ndef find_problematic_import_loops(G, sccs):\n    \"\"\"Find cycles where files have both static and dynamic imports between them.\"\"\"\n    problematic_cycles = []\n\n    for i, scc in enumerate(sccs):\n        if i == 2:  # skipping the second import loop as it's incredibly long (it's also invalid)\n            continue\n        mixed_import_files = {}  # (from_file, to_file) -> {dynamic: count, static: count}\n\n        # Check all file pairs in the cycle\n        for from_file in scc:\n            for to_file in scc:\n                if G.has_edge(from_file, to_file):\n                    # Get all edges between these files\n                    edges = G.get_edge_data(from_file, to_file)\n\n                    # Count imports by type\n                    dynamic_count = sum(1 for e in edges.values() if e[\"color\"] == \"red\")\n                    static_count = sum(1 for e in edges.values() if e[\"color\"] == \"black\")\n\n                    # If we have both types between same files, this is problematic\n                    if dynamic_count > 0 and static_count > 0:\n                        mixed_import_files[(from_file, to_file)] = {\"dynamic\": dynamic_count, \"static\": static_count, \"edges\": edges}\n\n        if mixed_import_files:\n            problematic_cycles.append({\"files\": scc, \"mixed_imports\": mixed_import_files, \"index\": i})\n\n    # Print findings\n    print(f\"Found {len(problematic_cycles)} cycles with mixed imports:\")\n    for i, cycle in enumerate(problematic_cycles):\n        print(f\"\\n⚠️  Problematic Cycle #{i + 1}:\")\n        print(f\"\\n⚠️  Index #{cycle['index']}:\")\n        print(f\"Size: {len(cycle['files'])} files\")\n\n        for (from_file, to_file), data in cycle[\"mixed_imports\"].items():\n            print(\"\\n📁 Mixed imports detected:\")\n            print(f\"  From: {from_file}\")\n            print(f\"  To:   {to_file}\")\n            print(f\"  Dynamic imports: {data['dynamic']}\")\n            print(f\"  Static imports: {data['static']}\")\n\n    return problematic_cycles\n\nproblematic_cycles = find_problematic_import_loops(G, cycles)\n```\n\n----------------------------------------\n\nTITLE: Generating Complexity Analysis Report in Python\nDESCRIPTION: Snippet showcasing how to generate a comprehensive report of the cyclomatic complexity analysis. It prints overall statistics including total functions and average complexity.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/cyclomatic_complexity/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"\\n📊 Cyclomatic Complexity Analysis\")\nprint(f\"  • Total Functions: {total_functions}\")\nprint(f\"  • Average Complexity: {average:.2f}\")\n```\n\n----------------------------------------\n\nTITLE: File Detection Algorithm in Python\nDESCRIPTION: Script to detect files containing useSuspenseQuery calls in the codebase. Uses Codegen's analysis engine to identify relevant files and skip those without query usage.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/usesuspensequery_to_usesuspensequeries/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor file in codebase.files:\n    if \"useSuspenseQuery\" not in file.source:\n        continue\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Codegen Agent in Python\nDESCRIPTION: This example demonstrates how to initialize the Agent with organization credentials, submit a task, check its status, and retrieve results. It shows the basic workflow for interacting with Codegen's AI code agents programmatically.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen.agents.agent import Agent\n\n# Initialize the Agent with your organization ID and API token\nagent = Agent(\n    org_id=\"YOUR_ORG_ID\",  # Find this at codegen.com/developer\n    token=\"YOUR_API_TOKEN\",  # Get this from codegen.com/developer\n    # base_url=\"https://codegen-sh-rest-api.modal.run\",  # Optional - defaults to production\n)\n\n# Run an agent with a prompt\ntask = agent.run(prompt=\"Implement a new feature to sort users by last login.\")\n\n# Check the initial status\nprint(task.status)\n\n# Refresh the task to get updated status (tasks can take time)\ntask.refresh()\n\n# Check the updated status\nprint(task.status)\n\n# Once task is complete, you can access the result\nif task.status == \"completed\":\n    print(task.result)  # Result often contains code, summaries, or links\n```\n\n----------------------------------------\n\nTITLE: Migrating Time Movement from FreezeGun to TimeMachine in Python\nDESCRIPTION: This snippet demonstrates the conversion of FreezeGun's time movement methods to TimeMachine's equivalent. It shows how 'move_to()' with datetime strings is replaced by 'shift()' with timedelta objects.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/freezegun_to_timemachine_migration/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# FreezeGun\nfreezer = freeze_time(\"2023-01-01\")\nfreezer.start()\nfreezer.move_to(\"2023-01-02\")\nfreezer.stop()\n\n# Automatically converted to:\ntraveller = travel(\"2023-01-01\", tick=False)\ntraveller.start()\ntraveller.shift(datetime.timedelta(days=1))\ntraveller.stop()\n```\n\n----------------------------------------\n\nTITLE: Implementing a CLI Interface for Code Research in Python\nDESCRIPTION: Creates a command-line interface using rich-click to interact with the code research agent. It allows users to specify a GitHub repository and start a research session with optional initial queries.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_172\n\nLANGUAGE: python\nCODE:\n```\nimport rich_click as click\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\n@click.group()\ndef cli():\n    \"\"\"🔍 Codegen Code Research CLI\"\"\"\n    pass\n\n@cli.command()\n@click.argument(\"repo_name\", required=False)\n@click.option(\"--query\", \"-q\", default=None, help=\"Initial research query.\")\ndef research(repo_name: Optional[str] = None, query: Optional[str] = None):\n    \"\"\"Start a code research session.\"\"\"\n    # Initialize codebase\n    codebase = initialize_codebase(repo_name)\n\n    # Create and run the agent\n    agent = create_research_agent(codebase)\n\n    # Main research loop\n    while True:\n        if not query:\n            query = Prompt.ask(\"[bold cyan]Research query[/bold cyan]\")\n\n        result = agent.invoke(\n            {\"input\": query},\n            config={\"configurable\": {\"thread_id\": 1}}\n        )\n        console.print(Markdown(result[\"messages\"][-1].content))\n\n        query = None  # Clear for next iteration\n```\n\n----------------------------------------\n\nTITLE: Using Generic Type Resolution in Python Codemod\nDESCRIPTION: Demonstrates how the generics flag affects the ability to track usages of generic types in a codemod. When enabled, it allows for more comprehensive usage tracking.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nbar_func = codebase.get_class(\"Point\").get_method(\"scale\")\nlen(bar_func.usages)  # 1\nbar_func.usages  # [l.pop().scale(1)]\n```\n\n----------------------------------------\n\nTITLE: Launching Jupyter Notebook with Codegen Demo in Bash\nDESCRIPTION: This command uses Codegen's CLI to launch a Jupyter notebook with a pre-configured demo, which includes the FastAPI codebase for exploration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncodegen notebook --demo\n```\n\n----------------------------------------\n\nTITLE: Export Resolution in TypeScript using Codegen SDK\nDESCRIPTION: Demonstrates how to trace exports to their original symbols, showing the relationship between re-exported symbols and their sources. Useful for following export chains across files.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nfor exp in file.exports:\n    if exp.is_reexport():\n        # Get original and current symbols\n        current = exp.exported_symbol\n        original = exp.resolved_symbol\n\n        print(f\"Re-exporting {original.name} from {exp.from_file.filepath}\")\n        print(f\"Through: {' -> '.join(e.file.filepath for e in exp.export_chain)}\")\n```\n\n----------------------------------------\n\nTITLE: Code Block Operations in Python\nDESCRIPTION: Demonstrates usage of the HasBlock behavior API for working with code blocks. Shows how to access block contents and statements.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_99\n\nLANGUAGE: python\nCODE:\n```\n# Access the code block\nblock = function.code_block\nprint(len(block.statements))  # Number of statements\nprintS(block.source)\n```\n\n----------------------------------------\n\nTITLE: Defining Language-Specific Type Aliases in Python\nDESCRIPTION: Illustrates the type aliases used for Python and TypeScript codebases in Codegen. These aliases define the specific types used for various code elements in each language.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n# Python codebases use PyCodebaseType\nPyCodebaseType = Codebase[\n    PyFile, Directory, PySymbol, PyClass, PyFunction,\n    PyImport, PyAssignment, Interface, TypeAlias,\n    PyParameter, PyCodeBlock\n]\n\n# TypeScript codebases use TSCodebaseType\nTSCodebaseType = Codebase[\n    TSFile, Directory, TSSymbol, TSClass, TSFunction,\n    TSImport, TSAssignment, TSInterface, TSTypeAlias,\n    TSParameter, TSCodeBlock\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Test Discovery Pattern for pytest\nDESCRIPTION: This example shows how to update the test discovery pattern from unittest to pytest. Unlike unittest, pytest doesn't require the unittest.main() block and follows a naming convention for test files (test_*.py or *_test.py).\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_231\n\nLANGUAGE: python\nCODE:\n```\n# From:\nif __name__ == '__main__':\n    unittest.main()\n\n# To:\n# Remove the unittest.main() block entirely\n# Rename test files to test_*.py or *_test.py\n```\n\n----------------------------------------\n\nTITLE: Loading Codebase for Analysis in Python\nDESCRIPTION: Demonstrates how to load a Python codebase into Codegen's analysis engine. This step is crucial for initiating the complexity analysis process.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/cyclomatic_complexity/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncodebase = Codebase.from_repo(\"fastapi/fastapi\")\n```\n\n----------------------------------------\n\nTITLE: Creating a New Codemod\nDESCRIPTION: Generate a new codemod using 'codegen create' to move TypeScript types into a centralized file, utilizing options like '-d' for description to leverage LLM expert assistance.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/ide-usage.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncodegen create organize-types \\\n  -d \"Move all TypeScript types to \\\n      into a centralized types.ts file\"\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component Modernization Codemod\nDESCRIPTION: Command to create a codemod specifically for converting class components to functional components with hooks in React.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncodegen create modernize-components --description \"Convert class components to functional components with hooks\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Context Manager Usage from FreezeGun to TimeMachine in Python\nDESCRIPTION: This code snippet shows the automatic conversion of a FreezeGun context manager to its TimeMachine equivalent. It demonstrates how the 'tick=False' parameter is added to match FreezeGun's default behavior.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/freezegun_to_timemachine_migration/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# FreezeGun\nwith freeze_time(\"2023-01-01\"):\n    # test code\n\n# Automatically converted to:\nwith travel(\"2023-01-01\", tick=False):\n    # test code\n```\n\n----------------------------------------\n\nTITLE: Generating GitHub Pull Request Comments with Import Analysis Results\nDESCRIPTION: This code formats the analysis results into a markdown message to be posted as a comment on the GitHub pull request, including summaries of problematic import cycles if found.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/github_checks/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage = [\"### Import Cycle Analysis - GitHub Check\\n\"]\n\nif problematic_loops:\n    message.append(\"\\n### ⚠️ Potentially Problematic Import Cycles\")\n    message.append(\"Cycles with mixed static and dynamic imports, which might recquire attention.\")\n    for i, cycle in enumerate(problematic_loops, 1):\n        message.append(f\"\\n#### Problematic Cycle {i}\")\n        for (from_file, to_file), imports in cycle[\"mixed_imports\"].items():\n            message.append(f\"\\nFrom: `{from_file}`\")\n            message.append(f\"To: `{to_file}`\")\n            message.append(f\"- Static imports: {imports['static']}\")\n            message.append(f\"- Dynamic imports: {imports['dynamic']}\")\nelse:\n    message.append(\"\\nNo problematic import cycles found! 🎉\")\n```\n\n----------------------------------------\n\nTITLE: Executing Promise Chain Conversion with Codegen SDK in Python\nDESCRIPTION: Python code using Codegen SDK to convert a Promise chain to async/await syntax by accessing the function and its promise chains.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_200\n\nLANGUAGE: python\nCODE:\n```\npromise_chain = codebase.get_function(\"create\").promise_chains[0]\npromise_chain.convert_to_async_await()\ncodebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Graph Cleanup to Enhance Visualization - Python\nDESCRIPTION: This snippet identifies and removes isolated nodes from the directed graph to streamline the visualization process, ensuring focus on meaningful module dependencies. It requires the previously initialized directed graph.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modules_dependencies/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnodes_to_remove = [node for node, degree in G.degree() if degree == 1]\nG.remove_nodes_from(nodes_to_remove)\n```\n\n----------------------------------------\n\nTITLE: Focusing on Relevant Subgraphs for Better Visualization in Python\nDESCRIPTION: This code snippet illustrates how to create focused visualizations by selecting specific subsets of code (like API functions) rather than visualizing an entire codebase, which would be too complex and difficult to interpret.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_143\n\nLANGUAGE: python\nCODE:\n```\n# Better: Visualize specific subsystem\napi_funcs = [f for f in codebase.functions if \"api\" in f.filepath]\napi_graph = create_call_graph(api_funcs)\ncodebase.visualize(api_graph)\n\n# Avoid: Visualizing entire codebase\nfull_graph = create_call_graph(codebase.functions)  # Too complex\n```\n\n----------------------------------------\n\nTITLE: Deploying the Codegen Slack Bot to Production in Bash\nDESCRIPTION: Deploys the Slack bot to Modal's production environment. This command publishes the latest version of the bot for continuous operation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/slack_chatbot/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmodal deploy api.py\n```\n\n----------------------------------------\n\nTITLE: Managing Re-exports in TypeScript using Codegen SDK\nDESCRIPTION: Shows how to create public APIs by re-exporting symbols from internal files and how to convert default exports to named exports. Useful for organizing and exposing module interfaces.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_95\n\nLANGUAGE: python\nCODE:\n```\n# Create public API\nindex_file = codebase.get_file(\"index.ts\")\n\n# Re-export from internal files\nfor internal_file in codebase.files:\n    if internal_file.name != \"index\":\n        for symbol in internal_file.symbols:\n            if symbol.is_public:\n                index_file.add_export(\n                    symbol,\n                    from_file=internal_file\n                )\n\n# Convert default to named exports\nfor exp in file.exports:\n    if exp.is_default_export():\n        exp.make_named_export()\n```\n\n----------------------------------------\n\nTITLE: Attribute Access in Python\nDESCRIPTION: Shows how to work with class attributes using the get_attribute method. Demonstrates common patterns for accessing and checking attribute values.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_100\n\nLANGUAGE: python\nCODE:\n```\n# Common patterns\nclass_attr = class_def.get_attribute(\"attribute_name\")\nif class_attr:\n    print(f\"Class variable value: {class_attr.value.source}\")\n```\n\n----------------------------------------\n\nTITLE: Modernizing Fixture Usage with pytest Scopes\nDESCRIPTION: This example demonstrates how to convert unittest's class-level setup and instance-level setup/teardown methods to pytest fixtures with appropriate scopes. pytest fixtures support different scopes like function, class, module, and session.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_232\n\nLANGUAGE: python\nCODE:\n```\n# From:\nclass TestDatabase(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.db_conn = create_test_db()\n\n    def setUp(self):\n        self.transaction = self.db_conn.begin()\n\n    def tearDown(self):\n        self.transaction.rollback()\n\n# To:\n@pytest.fixture(scope=\"session\")\ndef db_conn():\n    return create_test_db()\n\n@pytest.fixture\ndef transaction(db_conn):\n    transaction = db_conn.begin()\n    yield transaction\n    transaction.rollback()\n```\n\n----------------------------------------\n\nTITLE: Converting unittest Assertions to pytest Plain Assert Statements\nDESCRIPTION: This snippet shows how to convert unittest's assertion methods to pytest's plain assert statements. pytest provides better error messages through its assertion introspection, making tests more readable and easier to debug.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_230\n\nLANGUAGE: python\nCODE:\n```\n# From:\ndef test_user_validation(self):\n    self.assertTrue(is_valid_email(\"user@example.com\"))\n    self.assertFalse(is_valid_email(\"invalid\"))\n    self.assertEqual(get_user_count(), 0)\n    self.assertIn(\"admin\", get_roles())\n    self.assertRaises(ValueError, parse_user_id, \"invalid\")\n\n# To:\ndef test_user_validation():\n    assert is_valid_email(\"user@example.com\")\n    assert not is_valid_email(\"invalid\")\n    assert get_user_count() == 0\n    assert \"admin\" in get_roles()\n    with pytest.raises(ValueError):\n        parse_user_id(\"invalid\")\n```\n\n----------------------------------------\n\nTITLE: Common Export Operations in Python using Codegen SDK for TypeScript\nDESCRIPTION: Demonstrates common operations for working with exports in TypeScript, including adding exports from source code, exporting existing symbols, converting to type exports, and updating export properties.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_92\n\nLANGUAGE: python\nCODE:\n```\n# Add exports from source code\nfile.add_export_from_source(\"export { MyComponent };\")\nfile.add_export_from_source(\"export type { MyType } from './types';\")\n\n# Export existing symbols\ncomponent = file.get_function(\"MyComponent\")\nfile.add_export(component)  # export { MyComponent }\nfile.add_export(component, alias=\"default\")  # export { MyComponent as default }\n\n# Convert to type export\nexport = file.get_export(\"MyType\")\nexport.make_type_export()\n\n# Remove exports\nexport = file.get_export(\"MyComponent\")\nexport.remove()  # Removes export but keeps the symbol\n\n# Remove multiple exports\nfor export in file.exports:\n    if not export.is_type_export():\n        export.remove()\n\n# Update export properties\nexport.update(\n    name=\"NewName\",\n    is_type=True,\n    is_default=False\n)\n\n# Export from another file\nother_file = codebase.get_file(\"./components.ts\")\ncomponent = other_file.get_class(\"Button\")\nfile.add_export(component, from_file=other_file)  # export { Button } from './components';\n\n# Analyze symbols being exported\nfor export in file.exports:\n    if isinstance(export.exported_symbol, ExternalModule):\n        print('Exporting ExternalModule')\n    else:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating a New Codemod in Bash\nDESCRIPTION: Illustrates the command to create a new codemod using the Codegen CLI. It includes an optional description flag to generate a system prompt for the codemod.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncodegen create my-codemod [--description \"what it does\"]\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Error Message with Rich\nDESCRIPTION: Uses Rich library's JSON class to format a JSON string within an HTTP 422 error message. Demonstrates string interpolation with f-strings and JSON text formatting.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/commands/run/render.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.json import JSON\n\nprint(f\"422 UnprocessableEntity: {JSON('{\"a\": \"1\"}').text}\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing Type Coverage in Python\nDESCRIPTION: This snippet calculates the percentage of typed function parameters, return types, and class attributes across the codebase. It iterates through functions and classes to count typed and untyped elements.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_208\n\nLANGUAGE: python\nCODE:\n```\n# Initialize counters for parameters\ntotal_parameters = 0\ntyped_parameters = 0\n\n# Initialize counters for return types\ntotal_functions = 0\ntyped_returns = 0\n\n# Initialize counters for class attributes\ntotal_attributes = 0\ntyped_attributes = 0\n\n# Count parameter and return type coverage\nfor function in codebase.functions:\n    # Count parameters\n    total_parameters += len(function.parameters)\n    typed_parameters += sum(1 for param in function.parameters if param.is_typed)\n\n    # Count return types\n    total_functions += 1\n    if function.return_type and function.return_type.is_typed:\n        typed_returns += 1\n```\n\n----------------------------------------\n\nTITLE: Visualizing Blast Radius in Python\nDESCRIPTION: This code snippet demonstrates how to visualize a blast radius graph starting from a specific function using NetworkX and Codegen.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_193\n\nLANGUAGE: python\nCODE:\n```\n# Get target function to analyze\ntarget_func = codebase.get_function('export_asset')\n\n# Add root node\nG.add_node(target_func, color=COLOR_PALETTE.get(\"StartFunction\"))\n\n# Build the visualization\ncreate_blast_radius_visualization(target_func)\n\n# Render graph to show impact flow\n# Note: a -> b means changes to a will impact b\ncodebase.visualize(G)\n```\n\n----------------------------------------\n\nTITLE: Detecting Dictionary Literals in Python Code\nDESCRIPTION: Identifies dictionary literals in Python code by checking for curly braces and extracting the dictionary content. This part of the script skips empty dictionaries to avoid unnecessary conversions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/dict_to_schema/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif \"{\" in global_var.source and \"}\" in global_var.source:\n    dict_content = global_var.value.source.strip(\"{}\")\n```\n\n----------------------------------------\n\nTITLE: Running AI Impact Analysis in Python\nDESCRIPTION: Runs the AI impact analysis on the codebase, specifying AI authors to identify, and accesses statistics about total commits, AI commits percentage, and files with significant AI contributions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Run the analysis\nai_authors = [\"github-actions[bot]\", \"dependabot[bot]\"]\nresults = analyze_ai_impact(codebase, ai_authors)\n\n# Access statistics\nstats = results[\"stats\"]\nprint(f\"Total commits: {stats['total_commits']}\")\nprint(f\"AI commits: {stats['ai_commits']} ({stats['ai_percentage']:.1f}%)\")\nprint(f\"Files with >50% AI: {stats['ai_file_count']} of {stats['total_file_count']}\")\n\n# View contributors\nfor author, count in results[\"contributors\"]:\n    is_ai = any(ai_name in author for ai_name in ai_authors)\n    print(f\"{'🤖' if is_ai else '👤'} {author}: {count} commits\")\n```\n\n----------------------------------------\n\nTITLE: Resolving Import Chains in Python\nDESCRIPTION: This function recursively follows import chains to find the root symbol for an import. It handles cases where symbols are re-exported through multiple files.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_182\n\nLANGUAGE: python\nCODE:\n```\ndef hop_through_imports(imp: Import) -> Symbol | ExternalModule:\n    \"\"\"Finds the root symbol for an import.\"\"\"\n    if isinstance(imp.imported_symbol, Import):\n        return hop_through_imports(imp.imported_symbol)\n    return imp.imported_symbol\n```\n\n----------------------------------------\n\nTITLE: Identifying Areas of Low Documentation Coverage in Python Codebase\nDESCRIPTION: A Python script that analyzes directories in a codebase to identify areas with low documentation coverage. It skips certain directories (tests, SQL, alembic), counts functions with docstrings in each directory, and displays statistics for directories with more than 10 functions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_220\n\nLANGUAGE: python\nCODE:\n```\n# Track directory stats\ndir_stats = {}\n\n# Analyze each directory\nfor directory in codebase.directories:\n    # Skip test, sql and alembic directories\n    if any(x in directory.path.lower() for x in ['test', 'sql', 'alembic']):\n        continue\n\n    # Get undecorated functions\n    funcs = [f for f in directory.functions if not f.is_decorated]\n    total = len(funcs)\n\n    # Only analyze dirs with >10 functions\n    if total > 10:\n        documented = sum(1 for f in funcs if f.docstring)\n        coverage = (documented / total * 100)\n        dir_stats[directory.path] = {\n            'total': total,\n            'documented': documented,\n            'coverage': coverage\n        }\n\n# Find lowest coverage directory\nif dir_stats:\n    lowest_dir = min(dir_stats.items(), key=lambda x: x[1]['coverage'])\n    path, stats = lowest_dir\n\n    print(f\"📉 Lowest coverage directory: '{path}'\")\n    print(f\"  • Total functions: {stats['total']}\")\n    print(f\"  • Documented: {stats['documented']}\")\n    print(f\"  • Coverage: {stats['coverage']:.1f}%\")\n\n    # Print all directory stats for comparison\n    print(\"\\n📊 All directory coverage rates:\")\n    for path, stats in sorted(dir_stats.items(), key=lambda x: x[1]['coverage']):\n        print(f\"  '{path}': {stats['coverage']:.1f}% ({stats['documented']}/{stats['total']} functions)\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving SWEBench Test Examples\nDESCRIPTION: Fetches a subset of examples from the SWEBench LITE dataset's test split, starting at offset 0 and retrieving 10 examples.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/swebench_agent_run/local_run.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nexamples = get_swe_bench_examples(dataset=SWEBenchDataset.LITE, split=\"test\", offset=0, length=10)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Column Definition Type Annotation Examples in Python\nDESCRIPTION: Examples showing the transformation of column definitions before and after adding type annotations.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_type_annotations/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Before\nid = Column(Integer, primary_key=True)\nname = Column(String)\n\n# After\nid: Mapped[int] = mapped_column(primary_key=True)\nname: Mapped[str] = mapped_column()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unpacking Assignment Partial Removal in Python\nDESCRIPTION: Examples showing the difference in behavior when using the unpacking_assignment_partial_removal flag for removing symbols from unpacking assignments. With the flag enabled, it smartly removes individual elements while preserving the structure, whereas without the flag, it removes the entire statement.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/advanced-settings.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\na, b, c = (1, 2, 3)\n```\n\nLANGUAGE: python\nCODE:\n```\nfile = codebase.get_file(...)\nb = file.get_symbol(\"b\")\nb.remove()\ncodebase.commit()\n\nfile.symbols  # [a, c]\nfile.source  # \"a, c = (1, 3)\"\n```\n\nLANGUAGE: python\nCODE:\n```\nfile = codebase.get_file(...)\nb = file.get_symbol(\"b\")\nb.remove()\ncodebase.commit()\n\nfile.symbols  # []\nfile.source  # \"\"\n```\n\n----------------------------------------\n\nTITLE: Running the Flask to FastAPI migration script\nDESCRIPTION: This bash script clones the Codegen SDK repository and runs the Flask to FastAPI migration example. It processes all Python files, applying the transformations in the correct order while maintaining code functionality.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_262\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/codegen-sh/codegen-sdk.git\ncd codegen-examples/examples/flask_to_fastapi_migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Updating Exception Handling in Python 3\nDESCRIPTION: This snippet shows how to update the exception handling syntax from Python 2 to Python 3. It replaces the comma-separated exception and variable with the 'as' keyword.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/python2_to_python3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# From:\ntry:\n    process_data()\nexcept ValueError, e:\n    print(e)\n\n# To:\ntry:\n    process_data()\nexcept ValueError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Resetting Filesystem Changes with Codegen CLI in Bash\nDESCRIPTION: Runs the 'codegen reset' command, which reverts all filesystem changes made by codemods except for files in the .codegen/ directory. Useful for restoring project state after experimental codemods. Codegen must be set up in the project.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/installation.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncodegen reset\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Codegen Dead Code Removal Script\nDESCRIPTION: Command-line instructions for installing Codegen via pip and executing the dead code removal script (run.py).\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/delete_dead_code/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the script\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Updating Import References\nDESCRIPTION: Script for updating all import references after moving exports, including handling different import types and cleaning up empty files.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_215\n\nLANGUAGE: python\nCODE:\n```\n# Now update all import usages that refer to this export\nfor usage in export.symbol_usages():\n    if isinstance(usage, TSImport) and usage not in processed_imports:\n        processed_imports.add(usage)\n\n        # Translate the resolved_public_file to the usage file's TS config import path\n        new_path = usage.file.ts_config.translate_import_path(resolved_public_file)\n\n        if has_wildcard and export.name != export.resolved_symbol.name:\n            name = f\"{export.resolved_symbol.name} as {export.name}\"\n        else:\n            name = usage.name\n\n        if usage.is_type_import():\n            new_import = f'import type {{ {name} }} from \"{new_path}\"'\n        else:\n            new_import = f'import {{ {name} }} from \"{new_path}\"'\n\n        usage.file.insert_before(new_import)\n        usage.remove()\n\n# Remove the old export from the original file\nexport.remove()\n\n# If the file ends up with no exports, remove it entirely\nif not file.export_statements and len(file.symbols) == 0:\n    file.remove()\n```\n\n----------------------------------------\n\nTITLE: Calculating Cyclomatic Complexity in Python\nDESCRIPTION: Function to calculate cyclomatic complexity by analyzing statement types in a given function. It increments complexity for control flow statements and boolean operators.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_173\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_cyclomatic_complexity(function):\n    def analyze_statement(statement):\n        complexity = 0\n\n        if isinstance(statement, IfBlockStatement):\n            complexity += 1\n            if hasattr(statement, \"elif_statements\"):\n                complexity += len(statement.elif_statements)\n\n        elif isinstance(statement, (ForLoopStatement, WhileStatement)):\n            complexity += 1\n\n        return complexity\n```\n\n----------------------------------------\n\nTITLE: Implementation of Experimental Lazy Graph Parsing in Python\nDESCRIPTION: This snippet highlights the experimental lazy graph parsing feature by using the 'exp_lazy_graph' flag in Codegen. When initialized with this flag, the Codebase object delays graph creation until necessary. This is especially useful in scenarios where reducing initial parsing time is critical.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/advanced-settings.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\nfrom codegen.configs import CodebaseConfig\n\n# Enable lazy graph parsing\ncodebase = Codebase(\"<repo_path>\", config=CodebaseConfig(exp_lazy_graph=True))\n\n# The codebase object will be created immediately with no parsing done\n# These all do not require graph parsing\ncodebase.files\ncodebase.directories\ncodebase.get_file(\"...\")\n\n# These do require graph parsing, and will create the graph only if called\ncodebase.get_function(\"...\")\ncodebase.get_class(\"...\")\ncodebase.imports\n```\n\n----------------------------------------\n\nTITLE: Symbol Name and Source Operations\nDESCRIPTION: Shows various operations that can be performed on symbols including renaming, source code modification, documentation updates, and symbol movement.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_75\n\nLANGUAGE: python\nCODE:\n```\n# Name operations\nprint(symbol.name)\nsymbol.rename(\"new_name\")\n\n# Source code\nprint(symbol.source)  # Get source code\nsymbol.edit(\"new source code\")  # Modify source\n\n# Documentation\nprint(symbol.docstring)  # Get docstring\nsymbol.set_docstring(\"New documentation\")\n\n# Move symbol to new file\nsymbol.move_to_file(new_file)\n\n# Add before/after other symbols\nsymbol.insert_before(\"# deprecated\")\nsymbol.insert_after(\"# end deprecated\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Function Context in Python\nDESCRIPTION: This function extracts the implementation, dependencies, and usages of a given function. It creates a structured representation of the function's context within the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_181\n\nLANGUAGE: python\nCODE:\n```\ndef get_function_context(function) -> dict:\n    \"\"\"Get the implementation, dependencies, and usages of a function.\"\"\"\n    context = {\n        \"implementation\": {\"source\": function.source, \"filepath\": function.filepath},\n        \"dependencies\": [],\n        \"usages\": [],\n    }\n\n    # Add dependencies\n    for dep in function.dependencies:\n        # Hop through imports to find the root symbol source\n        if isinstance(dep, Import):\n            dep = hop_through_imports(dep)\n\n        context[\"dependencies\"].append({\"source\": dep.source, \"filepath\": dep.filepath})\n\n    # Add usages\n    for usage in function.usages:\n        context[\"usages\"].append({\n            \"source\": usage.usage_symbol.source,\n            \"filepath\": usage.usage_symbol.filepath,\n        })\n\n    return context\n```\n\n----------------------------------------\n\nTITLE: Calculating Maintainability Index - Codegen Analytics - Python\nDESCRIPTION: Implements the normalized maintainability index calculation based on Halstead volume, cyclomatic complexity, and lines of code. Requires the standard 'math' module and accepts the three metrics as inputs. The function computes a raw score, normalizes it between 0 and 100, and returns the resulting integer, providing a single indicator for maintainability health.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/repo_analytics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_maintainability_index(halstead_volume: float, cyclomatic_complexity: float, loc: int) -> int:\\n    \\\"\\\"\\\"Calculate the normalized maintainability index for a given function.\\\"\\\"\\\"\\n    raw_mi = 171 - 5.2 * math.log(max(1, halstead_volume)) - 0.23 * cyclomatic_complexity - 16.2 * math.log(max(1, loc))\\n    normalized_mi = max(0, min(100, raw_mi * 100 / 171))\\n    return int(normalized_mi)\n```\n\n----------------------------------------\n\nTITLE: Running the SQLAlchemy Type Annotation Migration Script\nDESCRIPTION: Bash commands for installing Codegen and running the migration script to add type annotations to SQLAlchemy models.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_type_annotations/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Transforming SQLAlchemy Relationships with Type Annotations in Python\nDESCRIPTION: Script that updates relationship definitions with proper typing, converting backref to back_populates.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_type_annotations/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor rel in model.relationships:\n    if isinstance(rel, relationship):\n        rel.edit(to_typed_relationship(rel))\n```\n\n----------------------------------------\n\nTITLE: Disabling Unpacking Assignment Partial Removal in Python Codemod\nDESCRIPTION: Shows the effect of disabling the unpacking_assignment_partial_removal flag, which results in less precise removal of elements from unpacking assignments.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfile = codebase.get_file(...)\nb = file.get_symbol(\"b\")\nb.remove()\ncodebase.commit()\n\nfile.symbols  # []\nfile.source  # \"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations in SQLAlchemy 2.0\nDESCRIPTION: Demonstrates how to introduce Mapped[] type wrappers for columns in SQLAlchemy 2.0. This transformation converts Column() to mapped_column() and handles nullable fields with Optional[] types.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_1.6_to_2.0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# From:\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    addresses = relationship(\"Address\")\n\n\n# To:\nclass User(Base):\n    __tablename__ = \"users\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column()\n    addresses: Mapped[List[\"Address\"]] = relationship()\n```\n\n----------------------------------------\n\nTITLE: Modernizing Iterator Methods in Python 3\nDESCRIPTION: This snippet demonstrates how to update iterator methods for Python 3 compatibility. It replaces the 'next' method with '__next__' in iterator classes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/python2_to_python3/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# From:\nclass MyIterator:\n    def next(self):\n        return self.value\n\n\n# To:\nclass MyIterator:\n    def __next__(self):\n        return self.value\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Relationship Type Annotation Example in Python\nDESCRIPTION: Example showing how to properly annotate relationships with List types and convert backref to back_populates.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_type_annotations/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Before\naddresses = relationship(\"Address\", backref=\"user\")\n\n# After\naddresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n```\n\n----------------------------------------\n\nTITLE: Detecting Mixed Static and Dynamic Import Cycles in Python\nDESCRIPTION: This code identifies cycles that contain both static and dynamic imports by counting each type and flagging those with a mix of both, which could cause potential issues in the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/github_checks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndynamic_count = sum(1 for e in edges.values() if e[\"color\"] == \"red\")\nstatic_count = sum(1 for e in edges.values() if e[\"color\"] == \"black\")\n\nif dynamic_count > 0 and static_count > 0:\n    mixed_imports[(from_file, to_file)] = {\n        \"dynamic\": dynamic_count,\n        \"static\": static_count,\n        \"edges\": edges,\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Visual Hints to Graphs Using Node Attributes in Python\nDESCRIPTION: This code shows how to add visual cues like color coding to graph nodes based on function types or classifications while preserving rich preview features, making visualizations more informative and easier to interpret.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_145\n\nLANGUAGE: python\nCODE:\n```\n# Color code by type while preserving rich previews\nfor node in codebase.functions:\n    if \"Controller\" in node.name:\n        graph.add_node(node, color=\"red\")\n    elif \"Service\" in node.name:\n        graph.add_node(node, color=\"blue\")\n```\n\n----------------------------------------\n\nTITLE: Creating Function Blast Radius Visualization in Python\nDESCRIPTION: Visualizes the impact radius of potential changes by showing all code paths affected by modifying a particular function or symbol.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/visualize_codebases/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef create_blast_radius_visualization(symbol: PySymbol, depth: int = 0):\n    \"\"\"Recursively build a graph visualization showing how a symbol is used\"\"\"\n    if depth >= MAX_DEPTH:\n        return\n\n    for usage in symbol.usages:\n        usage_symbol = usage.usage_symbol\n\n        # Color code HTTP methods specially\n        if is_http_method(usage_symbol):\n            color = COLOR_PALETTE.get(\"HTTP_METHOD\")\n        else:\n            color = COLOR_PALETTE.get(usage_symbol.__class__.__name__, \"#f694ff\")\n\n        G.add_node(usage_symbol, color=color)\n        G.add_edge(symbol, usage_symbol, **generate_edge_meta(usage))\n\n        create_blast_radius_visualization(usage_symbol, depth + 1)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom AI Authors and Analyzing AI Impact in Python\nDESCRIPTION: This snippet defines a list of custom AI authors and runs an analysis to measure their impact on the codebase. It uses the analyze_ai_impact function from an unspecified module.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_263\n\nLANGUAGE: python\nCODE:\n```\n# Define custom AI authors\nai_authors = [\n    'github-actions[bot]',\n    'dependabot[bot]',\n    'copilot[bot]',\n    'devin[bot]',\n    'your-custom-ai-email@example.com'\n]\n\n# Run analysis with custom AI authors\nresults = analyze_ai_impact(codebase, ai_authors)\n```\n\n----------------------------------------\n\nTITLE: Creating a Codegen Script Entry Point\nDESCRIPTION: Shows the standard pattern for the entry point in a Codegen example script, which initializes the codebase and runs the transformation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/STRUCTURE.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    # Initialize codebase\n    # Run transformation\n    # Save/display results\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Promise Migration Script with Bash\nDESCRIPTION: Instructions for installing Codegen and running the promise to async/await migration script. This bash snippet shows the complete workflow for executing the migration on a codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the promise to async/await migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Example Output of Dead Code Removal Script\nDESCRIPTION: Sample terminal output showing the results of running the dead code removal script, including which functions and variables were removed and final statistics.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/delete_dead_code/README.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n� Deleting dead code...\n\n🗑️ Removing unused function: _get_parser_doc\n🧹 Removing unused variable: decoded\n🧹 Removing unused variable: shebang_line\n...\n🧹 Removing unused variable: _\n\n🔧 Total functions removed: 2\n📦 Total variables removed: 240\n```\n\n----------------------------------------\n\nTITLE: Configuring Cline MCP Settings for Codegen\nDESCRIPTION: JSON configuration for setting up Codegen CLI as an MCP server in Cline. Specifies the command and arguments needed to run different Codegen MCP servers.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/extensions/mcp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"codegen-cli\": {\n        \"command\": \"uv\",\n        \"args\": [\n            \"--directory\",\n            \"<path to codegen installation>/codegen-sdk/src/codegen/extensions/mcp\",\n            \"run\",\n            \"codebase_agent.py | codebase_mods | codebase_tools\"\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Top Test Files by Class Count in Python\nDESCRIPTION: This snippet counts and displays the test files with the most test classes, showing their file paths, line counts, and number of functions. It uses the Counter class to aggregate test classes by file.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(\"\\n📚 Top Test Files by Class Count\")\nprint(\"-\" * 50)\nfile_test_counts = Counter([x.file for x in test_classes])\nfor file, num_tests in file_test_counts.most_common()[:5]:\n    print(f\"🔍 {num_tests} test classes: {file.filepath}\")\n    print(f\"   📏 File Length: {len(file.source)} lines\")\n    print(f\"   💡 Functions: {len(file.functions)}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Resolution Paths in Python Codemod\nDESCRIPTION: Demonstrates how to use the import_resolution_paths flag to control alternative paths for resolving imports in the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ncodebase.ctx.config.import_resolution_paths = [\"a/b\"]\n```\n\n----------------------------------------\n\nTITLE: Modernizing ORM Relationships in SQLAlchemy 2.0\nDESCRIPTION: Shows how to replace deprecated backref with explicit back_populates in SQLAlchemy 2.0. This transformation creates bidirectional relationship definitions and adds the use_list parameter for collection relationships.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_1.6_to_2.0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# From:\nclass User(Base):\n    addresses = relationship(\"Address\", backref=\"user\")\n\n\n# To:\nclass User(Base):\n    addresses = relationship(\"Address\", back_populates=\"user\", use_list=True)\n\n\nclass Address(Base):\n    user = relationship(\"User\", back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: Updating Unicode to str in Python 3\nDESCRIPTION: This snippet shows how to update Unicode handling in Python 2 to the str type in Python 3. It removes the unicode_literals import and changes unicode() calls to str().\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/python2_to_python3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# From:\nfrom __future__ import unicode_literals\n\ntext = unicode(\"Hello\")\nprefix = \"prefix\"\n\n# To:\ntext = str(\"Hello\")\nprefix = \"prefix\"\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Nullable Field Type Annotation Example in Python\nDESCRIPTION: Code example demonstrating how nullable fields are properly typed with Optional.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_type_annotations/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Before\ndescription = Column(String, nullable=True)\n\n# After\ndescription: Mapped[Optional[str]] = mapped_column(nullable=True)\n```\n\n----------------------------------------\n\nTITLE: Splitting Up Large Test Files by Grouping in Python\nDESCRIPTION: This Python snippet demonstrates grouping test functions by prefix within a file, creating destination modules, and moving each group to a new file using Codegen's move_to_file operation. It updates imports and dependencies, then commits all changes. Designed for reorganizing large test files for maintainability and is dependent on the codegen package and a parsed Codebase. Inputs: filename, codebase instance. Effects: filesystem changes after commit().\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilename = 'tests/test_path.py'\nprint(f\"📦 Splitting Test File: {filename}\")\nprint(\"=\" * 50)\n\n# Grab a file\nfile = codebase.get_file(filename)\nbase_name = filename.replace('.py', '')\n\n# Group tests by subpath\ntest_groups = {}\nfor test_function in file.functions:\n    if test_function.name.startswith('test_'):\n        test_subpath = '_'.join(test_function.name.split('_')[:3])\n        if test_subpath not in test_groups:\n            test_groups[test_subpath] = []\n        test_groups[test_subpath].append(test_function)\n\n# Print and process each group\nfor subpath, tests in test_groups.items():\n    print(f\"\\n{subpath}/\")\n    new_filename = f\"{base_name}/{subpath}.py\"\n\n    # Create file if it doesn't exist\n    if not codebase.has_file(new_filename):\n        new_file = codebase.create_file(new_filename)\n    file = codebase.get_file(new_filename)\n\n    # Move each test in the group\n    for test_function in tests:\n        print(f\"    - {test_function.name}\")\n        test_function.move_to_file(new_file, strategy=\"add_back_edge\")\n\n# Commit changes to disk\ncodebase.commit()\n```\n\n----------------------------------------\n\nTITLE: Running the Codegen Conversion Using Bash Commands\nDESCRIPTION: These bash commands show how to install Codegen using pip and then run the conversion script.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_soft_delete/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the conversion\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Using Symbol Objects for Rich Graph Features in Python\nDESCRIPTION: This code snippet demonstrates best practices for adding nodes to graphs, comparing approaches that use symbol objects for rich previews versus using just names. Symbol objects provide additional features like source code previews and syntax highlighting.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_142\n\nLANGUAGE: python\nCODE:\n```\n# Better: Add symbol objects for rich previews\n# This will include source code previews, syntax highlighting, type information, etc.\nfor func in api_funcs:\n    graph.add_node(func)\n\n# Basic: Just names, no extra features\nfor func in api_funcs:\n    graph.add_node(func.name)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Test Files in a Codebase using Python\nDESCRIPTION: This snippet demonstrates how to use Codegen to analyze test files in a codebase. It filters test functions and classes, then prints statistics about the tests.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import Counter\n\n# Filter to all test functions and classes\ntest_functions = [x for x in codebase.functions if x.name.startswith('test_')]\ntest_classes = [x for x in codebase.classes if x.name.startswith('Test')]\n\nprint(\"🧪 Test Analysis\")\nprint(\"=\" * 50)\nprint(f\"📝 Total Test Functions: {len(test_functions)}\")\nprint(f\"🔬 Total Test Classes: {len(test_classes)}\")\nprint(f\"📊 Tests per File: {len(test_functions) / len(codebase.files):.1f}\")\n```\n\n----------------------------------------\n\nTITLE: Class Inheritance Operations\nDESCRIPTION: Shows how to work with class inheritance hierarchies including traversal and modification.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nclass_def = codebase.get_class(\"Cube\")\n\n# View ancestors\nall_ancestors = class_def.superclasses # All classes inherited\nimmediate_parents = class_def.superclasses(max_depth=1)  # Direct parents only\n\n# Inheritance-aware method lookup\nmethod = class_def.get_method(\"process\")  # Searches up inheritance chain\nif method.parent_class != class_def:\n    print(f\"Method inherited from {method.parent_class.name}\")\n\n# Handle external dependencies\nif class_def.is_subclass_of(\"Enum\"):  # Works with stdlib/external classes\n    print(\"This is an enum class\")\n```\n\n----------------------------------------\n\nTITLE: Running a Codemod with Codegen CLI in Bash\nDESCRIPTION: Invokes the 'codegen run' command to apply the created 'organize-imports' codemod to the current project. This applies code transformations as defined by the codemod implementation, operating on targeted source files. Codegen and codemod must be initialized first.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/installation.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncodegen run organize-imports\n```\n\n----------------------------------------\n\nTITLE: Extending Agent with Custom Analysis Tool in Python\nDESCRIPTION: Example of creating a custom tool for specialized code analysis and adding it to the agent's toolset. This allows for extending the agent's capabilities with domain-specific analysis.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_178\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.tools import BaseTool\nfrom pydantic import BaseModel, Field\n\nclass CustomAnalysisTool(BaseTool):\n    \"\"\"Custom tool for specialized code analysis.\"\"\"\n    name = \"custom_analysis\"\n    description = \"Performs specialized code analysis\"\n\n    def _run(self, query: str) -> str:\n        # Custom analysis logic\n        return results\n\n# Add to tools list\ntools.append(CustomAnalysisTool())\n```\n\n----------------------------------------\n\nTITLE: Example of Converting Global Variable Dictionary to Pydantic Schema\nDESCRIPTION: Demonstrates the before and after states when converting a global dictionary variable to a Pydantic model. The example shows how a config dictionary is transformed into a ConfigSchema class while maintaining the original values.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/dict_to_schema/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Before\nconfig = {\"host\": \"localhost\", \"port\": 8080}\n\n\n# After\nclass ConfigSchema(BaseModel):\n    host: str = \"localhost\"\n    port: int = 8080\n\n\nconfig = ConfigSchema(**{\"host\": \"localhost\", \"port\": 8080})\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen CLI with Python 3.13\nDESCRIPTION: This Bash command installs the Codegen CLI on a Devin instance, making it possible to utilize devin-specific codemods. It sets up the environment for interacting with Devin's code modification mechanisms by specifying Python 3.13 as the environment in use. Ensuring the CLI is installed is a prerequisite for running codemods programmatically.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/devin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install codegen --python 3.13\n```\n\n----------------------------------------\n\nTITLE: Visualizing Codemod Execution Flow with Mermaid\nDESCRIPTION: This snippet illustrates the workflow process of a codemod operation similar to the one undertaken by Devin. It highlights the cycle of editing, running, linting, and refining codemods until successful transformation is achieved. The diagram aids in understanding the iterative process of handling and eliminating errors.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/devin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    style EditRun fill:#ff6b6b,stroke:#000,stroke-width:3px,color:#000,font-weight:bold,font-size:16px\n    style Linter fill:#4dabf7,stroke:#000,stroke-width:3px,color:#000,font-weight:bold,font-size:16px\n    style Success fill:#cc5de8,stroke:#000,stroke-width:3px,color:#000,font-weight:bold,font-size:16px\n    \n    EditRun[\"Edit + Run<br/>Codemod\"] --> Linter[\"Run<br/>Linter\"]\n    Linter --\"success?\"--- Success[\"Success\"]\n    Linter --\"errors found\"--- EditRun\n    \n    linkStyle default stroke-width:2px\n    classDef edgeLabel fill:#e9ecef,color:#000,font-weight:bold\n    class success?,errors edgeLabel\n```\n\n----------------------------------------\n\nTITLE: Updating Session Execution in SQLAlchemy 2.0\nDESCRIPTION: Shows how to modernize session query methods with the execute() pattern in SQLAlchemy 2.0. This transformation adds proper result handling with scalars() and updates common operations like all(), first(), and one().\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_1.6_to_2.0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# From:\nusers = session.query(User).all()\nfirst_user = session.query(User).first()\n\n# To:\nusers = session.execute(select(User)).scalars().all()\nfirst_user = session.execute(select(User)).scalars().first()\n```\n\n----------------------------------------\n\nTITLE: Converting Promise Chain with Ambiguous Returns to Async/Await in TypeScript\nDESCRIPTION: Example of how Codegen handles a Promise chain with multiple return statements by introducing an anonymous function to ensure deterministic conversion when converting to async/await syntax.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_199\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nfunction create(opts: any): Promise<any> {\n\tlet qResponse = request(opts);\n\tqResponse = qResponse.then(function success(response) {\n\t\tif (response.statusCode < 200 || response.statusCode >= 300) {\n\t\t\tthrow new Error(JSON.stringify(response));\n\t\t}\n\t\tif (typeof response.body === \"string\") {\n\t\t\treturn JSON.parse(response.body);\n\t\t}\n\t\treturn response.body;\n\t});\n\n\treturn qResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up React Fragment Import (TypeScript)\nDESCRIPTION: Demonstrates the removal of the `Fragment` named import from the 'react' package in TypeScript. This cleanup occurs automatically when the Codegen script converts all `Fragment` usages to the shorthand syntax, as the explicit import is no longer needed.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/fragment_to_shorthand/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// From:\nimport React, { Fragment } from 'react';\n\n// To:\nimport React from 'react';\n```\n\n----------------------------------------\n\nTITLE: Converting SQLAlchemy Columns to Typed Mapped Columns in Python\nDESCRIPTION: Code snippet that shows how to iterate through model columns and convert traditional Column definitions to typed Mapped columns.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_type_annotations/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor column in model.columns:\n    if isinstance(column, Column):\n        column.edit(to_mapped_column(column))\n```\n\n----------------------------------------\n\nTITLE: Importing Required Types from Codegen in Python\nDESCRIPTION: This snippet imports the necessary types and classes from the Codegen library to work with codebases and symbols.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_180\n\nLANGUAGE: python\nCODE:\n```\nimport codegen\nfrom codegen import Codebase\nfrom codegen.sdk.core.external_module import ExternalModule\nfrom codegen.sdk.core.import_resolution import Import\nfrom codegen.sdk.core.symbol import Symbol\n```\n\n----------------------------------------\n\nTITLE: Starting the Repository Analyzer API Server (Bash)\nDESCRIPTION: Command to start the API server using Modal, pointing to the specific Python file containing the API implementation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_analytics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmodal serve src/codegen/extensions/modal/api.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Codebase with Python\nDESCRIPTION: Demonstrates how to create a Codebase instance from a local git repository with different configuration options including language specification.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\n\n# Parse from a git repository root\ncodebase = Codebase(\"path/to/repository\")\n\n# Parse from a subfolder within a git repository\ncodebase = Codebase(\"path/to/repository/src/subfolder\")\n\n# Parse from current directory (must be within a git repo)\ncodebase = Codebase(\"./\")\n\n# Specify programming language (instead of inferring from file extensions)\ncodebase = Codebase(\"./\", language=\"typescript\")\n```\n\n----------------------------------------\n\nTITLE: Attribute Manipulation and Analysis\nDESCRIPTION: Shows detailed operations that can be performed on class attributes including value modification, type changes, and usage analysis.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_80\n\nLANGUAGE: python\nCODE:\n```\n# Modify attribute values and types\nattr = class_def.get_attribute(\"count\")\nattr.set_value(\"42\")  # Change value\nattr.assignment.set_type_annotation(\"float\")  # Change type\nattr.assignment.type.remove()  # Remove type annotation\n\n# Find attribute usages\nfor usage in attr.usages:\n    print(f\"Used in {usage.file.name}\")\n\n# Find local usages (within the class)\nfor usage in attr.local_usages:\n    print(f\"Used in method: {usage.parent_function.name}\")\n\n# Rename attributes (updates all references)\nattr.rename(\"new_name\")  # Also updates self.count -> self.new_name\n\n# Remove attributes\nattr.remove()  # Removes the attribute definition\n\n# Check attribute properties\nif attr.is_private:  # Starts with underscore\n    print(\"Private attribute\")\nif attr.is_optional:  # Optional[Type] or Type | None\n    print(\"Optional attribute\")\n\n# Access underlying value\nif attr.value:  # The expression assigned to the attribute\n    print(f\"Default value: {attr.value.source}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Codegen in a Project\nDESCRIPTION: This command initializes Codegen in your current project directory. It sets up the necessary configuration files and structures for Codegen to work with your codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncodegen init\n```\n\n----------------------------------------\n\nTITLE: Creating a New Codemod with Codegen CLI in Bash\nDESCRIPTION: Executes the Codegen CLI 'create' command to set up a new codemod called 'organize-imports' with a description. The '-d' flag provides a description for AI-powered code generation. This requires a codegen.sh Github account for AI backend access. Outputs scripts and support materials in the codemods directory.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/installation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncodegen create organize-imports \\\n  -d \"Sort and organize imports according to PEP8\"\n```\n\n----------------------------------------\n\nTITLE: Example of Converting Class Attribute Dictionary to Pydantic Schema\nDESCRIPTION: Shows how a dictionary used as a class attribute is converted to a Pydantic model. The example transforms a Service class's defaults dictionary into a DefaultsSchema class while preserving the original functionality.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/dict_to_schema/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Before\nclass Service:\n    defaults = {\"timeout\": 30, \"retries\": 3}\n\n\n# After\nclass DefaultsSchema(BaseModel):\n    timeout: int = 30\n    retries: int = 3\n\n\nclass Service:\n    defaults = DefaultsSchema(**{\"timeout\": 30, \"retries\": 3})\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Cline\nDESCRIPTION: JSON configuration for Cline MCP settings to enable AI agent interaction with Codegen-specific tools.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"codegen-cli\": {\n        \"command\": \"uv\",\n        \"args\": [\n            \"--directory\",\n            \"<path to codegen installation>/codegen-sdk/src/codegen/cli/mcp\",\n            \"run\",\n            \"server.py\"\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Variables in Try Blocks\nDESCRIPTION: Code snippet that analyzes local variable assignments within try blocks and prints warnings for variables defined in unsafe contexts.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nfor var in function.code_block.get_local_var_assignments():\n    if var.is_wrapped_in(TryStatement):\n        print(f\"Warning: {var.name} defined in try block\")\n```\n\n----------------------------------------\n\nTITLE: Migrating Decorator Usage from FreezeGun to TimeMachine in Python\nDESCRIPTION: This snippet demonstrates the automatic conversion of a FreezeGun decorator to its TimeMachine equivalent. It shows how the 'tick=False' parameter is added to match FreezeGun's default behavior.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/freezegun_to_timemachine_migration/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# FreezeGun\n@freeze_time(\"2023-01-01\")\ndef test_function():\n    pass\n\n\n# Automatically converted to:\n@travel(\"2023-01-01\", tick=False)\ndef test_function():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Converting Flask Template Rendering to FastAPI\nDESCRIPTION: Shows how to update template rendering from Flask's simple render_template function to FastAPI's Jinja2Templates class with proper request context handling.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/flask_to_fastapi_migration/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# From:\nreturn render_template(\"users.html\", users=users)\n\n# To:\nreturn Jinja2Templates(directory=\"templates\").TemplateResponse(\"users.html\", context={\"users\": users}, request=request)\n```\n\n----------------------------------------\n\nTITLE: Symbol Usage Analysis in Python\nDESCRIPTION: Analyzes and collects symbols with usage information from the codebase. Tracks symbols that have been used in the code and counts their occurrences.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/symbol-attributions/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsymbols_with_usages = []\nfor symbol in codebase.symbols:\n    if hasattr(symbol, \"usages\") and len(symbol.usages) > 0:\n        symbols_with_usages.append((symbol, len(symbol.usages)))\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Delete Models and Join Methods in Python\nDESCRIPTION: This code snippet defines the set of models that should be considered for soft delete and the SQLAlchemy join methods that the codemod will process.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_soft_delete/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsoft_delete_models = {\"User\", \"Update\", \"Proposal\", \"Comment\", \"Project\", \"Team\", \"SavedSession\"}\n\njoin_methods = {\"join\", \"outerjoin\", \"innerjoin\"}\n```\n\n----------------------------------------\n\nTITLE: Working with TypeScript-Specific Features in Python\nDESCRIPTION: Demonstrates how to work with TypeScript-specific features like interfaces and type aliases in a Codegen Python script. It includes type checking to ensure the codebase is TypeScript.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n# Only works with TypeScript codebases\nif isinstance(codebase, TSCodebaseType):\n    # Work with TypeScript interfaces\n    for interface in codebase.interfaces:\n        print(f\"Interface: {interface.name}\")\n        print(f\"Extends: {[i.name for i in interface.parent_interfaces]}\")\n\n    # Work with type aliases\n    for type_alias in codebase.type_aliases:\n        print(f\"Type alias: {type_alias.name}\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated System Prompt\nDESCRIPTION: Command to view the AI context that Codegen generated for a transformation task.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncat codegen-sh/codemods/modernize-components/prompt.md\n```\n\n----------------------------------------\n\nTITLE: Recording Function Usages in Python\nDESCRIPTION: Shows how function usage instances are tracked with their source code and filepath.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/generate_training_data/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\"usages\": [{\"source\": \"result = process_data()\", \"filepath\": \"src/main.py\"}]}\n```\n\n----------------------------------------\n\nTITLE: Running an Agent Task with a Prompt\nDESCRIPTION: The run() method initiates an agent task with the given prompt. It returns an AgentTask object representing the running task.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/agents/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrun(prompt: str) -> AgentTask\n```\n\n----------------------------------------\n\nTITLE: Class Attribute Management\nDESCRIPTION: Demonstrates operations for working with class attributes including access, modification, and analysis.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_79\n\nLANGUAGE: python\nCODE:\n```\n# Access all attributes\nfor attr in class_def.attributes:\n    print(f\"Attribute: {attr.name}\")\n\n# Add new attributes\nclass_def.add_attribute_from_source(\"count: int = 0\")\n\n# Get specific attribute\nname_attr = class_def.get_attribute(\"name\")\n\n# Add attribute from another class\nother_class = codebase.get_class(\"OtherClass\")\nclass_def.add_attribute(\n    other_class.get_attribute(\"config\"),\n    include_dependencies=True  # Also adds required imports\n)\n```\n\n----------------------------------------\n\nTITLE: Import Statements vs Imports in Python and TypeScript\nDESCRIPTION: Explains the difference between ImportStatement (complete import statement) and Import (individual imported symbols) in both Python and TypeScript. Shows how to access both through the Codegen API.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_90\n\nLANGUAGE: python\nCODE:\n```\n# One ImportStatement containing multiple Import objects\nfrom math import sin, cos as cosine\n# Creates:\n# - Import for 'sin'\n# - Import for 'cos' with alias 'cosine'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// One ImportStatement containing multiple Import objects\nimport { sin, cos as cosine } from 'math';\n// Creates:\n// - Import for 'sin'\n// - Import for 'cos' with alias 'cosine'\n```\n\n----------------------------------------\n\nTITLE: Modifying Names with LibCST in Python\nDESCRIPTION: This code snippet shows how to use the LibCST library to transform Python code while preserving formatting and comments. It uses a transformer class to change variable names, requiring knowledge of the visitor pattern and LibCST's API.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/codemod-frameworks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport libcst as cst\n\nclass NameTransformer(cst.CSTTransformer):\n    def leave_Name(self, original_node, updated_node):\n        if original_node.value == \"old_name\":\n            return updated_node.with_changes(value=\"new_name\")\n        return updated_node\n```\n\n----------------------------------------\n\nTITLE: Bulk Comment Operations\nDESCRIPTION: Example of performing operations on multiple comments across a codebase, such as removing specific types of comments.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_123\n\nLANGUAGE: python\nCODE:\n```\n# Example: Remove eslint disable comments for a specific rule\nfor file in codebase.files:\n    for comment in file.code_block.comments:\n        if \"eslint-disable\" in comment.source:\n            # Check if comment disables specific rule\n            if \"@typescript-eslint/no-explicit-any\" in comment.text:\n                comment.remove()\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Diff File Location\nDESCRIPTION: Specifies the location for storing expected diff files for test cases. The diff file is named 'expected_diff.patch' and is placed in the test case folder.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codemods/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`{codemod_tests_folder}/test_{repo_name}/expected_diff.patch`\n```\n\n----------------------------------------\n\nTITLE: Working with Non-Code Files in Python\nDESCRIPTION: Demonstrates how to access and filter non-code files like README, JSON, and configuration files in the codebase using the Codegen SDK.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_66\n\nLANGUAGE: python\nCODE:\n```\n# Get all files in the codebase (including README, docs, config files)\nfiles = codebase.files(extensions=\"*\")\n\n# Print files that are not source code (documentation, config, etc)\nfor file in files:\n    if not file.filepath.endswith(('.py', '.ts', '.js')):\n        print(f\"📄 Non-code file: {file.filepath}\")\n```\n\n----------------------------------------\n\nTITLE: Detecting SQLAlchemy Join Calls for Soft Delete Models in Python\nDESCRIPTION: This function determines whether a join call should be processed based on the join method and the model involved. It checks if the join method is in the specified list and if the model is in the soft delete models set.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_soft_delete/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef should_process_join_call(call, soft_delete_models, join_methods):\n    if str(call.name) not in join_methods:\n        return False\n\n    call_args = list(call.args)\n    if not call_args:\n        return False\n\n    model_name = str(call_args[0].value)\n    return model_name in soft_delete_models\n```\n\n----------------------------------------\n\nTITLE: Converting Test Discovery Methods\nDESCRIPTION: Shows how to remove unittest.main() calls and adapt test discovery to pytest's conventions. Includes file naming requirements for pytest.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/unittest_to_pytest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# From:\nif __name__ == \"__main__\":\n    unittest.main()\n\n# To:\n# Remove unittest.main() and rename files to test_*.py\n```\n\n----------------------------------------\n\nTITLE: Running the Training Data Generator in Python\nDESCRIPTION: This script demonstrates how to run the training data generator on a specific codebase (FastAPI in this case). It initializes the codebase, generates the training data, and saves it to a JSON file.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_185\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(\"Initializing codebase...\")\n    codebase = Codebase.from_repo(\"fastapi/fastapi\")\n\n    print(\"Generating training data...\")\n    training_data = run(codebase)\n\n    print(\"Saving training data...\")\n    with open(\"training_data.json\", \"w\") as f:\n        json.dump(training_data, f, indent=2)\n    print(\"Training data saved to training_data.json\")\n```\n\n----------------------------------------\n\nTITLE: Running Codemod Integration Tests\nDESCRIPTION: Command to run integration tests that verify larger program transformations in the Codegen project.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest tests/integration/codemod/test_codemods.py -n auto\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with Advanced Settings in Python\nDESCRIPTION: This code demonstrates how to initialize a Codebase with custom configuration options, including debugging flags, performance optimizations, and experimental features for customizing Codegen's behavior when handling problematic repositories.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\nfrom codegen.configs import CodebaseConfig\n\n# Initialize a Codebase with custom configuration\ncodebase = Codebase(\n    \"path/to/git/repo\"\",\n    config=CodebaseConfig(\n        verify_graph=True,\n        method_usages=False,\n        sync_enabled=True,\n        generics=False,\n        import_resolution_overrides={\n          \"old_module\": \"new_module\"\n        },\n        ts_language_engine=True,\n        v8_ts_engine=True\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Refreshing AgentTask Status\nDESCRIPTION: The refresh() method updates the task object with the latest status from the API. It doesn't return any values but updates the object's attributes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/agents/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrefresh() -> None\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of AI Calls in GraphSitter\nDESCRIPTION: This code demonstrates the structure of the codebase.ai() method, showing the three main parameters: prompt (instruction for the AI), target (the code being operated on), and context (additional information from static analysis).\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_150\n\nLANGUAGE: python\nCODE:\n```\nresult = codebase.ai(\n    prompt=\"Your instruction to the AI\",\n    target=symbol_to_modify,  # Optional: The code being operated on\n    context=additional_info   # Optional: Extra context from static analysis\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Codebase with Custom Settings\nDESCRIPTION: Demonstrates configuration of a Codebase instance using CodebaseConfig and SecretsConfig for customizing features and providing API keys.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\nfrom codegen.configs.models.codebase import CodebaseConfig\nfrom codegen.configs.models.secrets import SecretsConfig\n\ncodebase = Codebase(\n    \"path/to/repository\",\n    config=CodebaseConfig(debug=True),\n    secrets=SecretsConfig(openai_api_key=\"your-openai-key\")   # For AI-powered features\n)\n```\n\n----------------------------------------\n\nTITLE: Working with Directories in Python\nDESCRIPTION: Shows how to access directories, iterate over files within directories, get the directory containing a file, and check for directory existence using the Codegen SDK.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_62\n\nLANGUAGE: python\nCODE:\n```\n# Get a directory\ndir = codebase.get_directory(\"path/to/dir\")\n\n# Iterate over all files in the directory\nfor file in dir.files:\n    pass\n\n# Get the directory containing a file:\ndir = file.directory\n\n# Check if a directory exists\nexists = codebase.has_directory(\"path/to/dir\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Imports in Python using Codegen SDK\nDESCRIPTION: Shows how to access imports directly and via statements using the File API. This demonstrates the relationship between ImportStatement objects and Import objects.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_91\n\nLANGUAGE: python\nCODE:\n```\n# Direct access to imports\nfor imp in file.imports:\n    ...\n\n# Access to imports via statements\nfor stmt in file.import_statements:\n    for imp in stmt.imports:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Detecting Flask-RESTx Resource Classes in Python\nDESCRIPTION: Code snippet that demonstrates how to identify and process Flask-RESTx resource classes in the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/openapi_decorators/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor cls in codebase.classes:\n    if cls.is_subclass_of(\"Resource\"):\n        # Process Flask-RESTx resource classes\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen SDK via Package Managers\nDESCRIPTION: Shows how to install the Codegen SDK using pip or uv package managers. This is the initial step required before using the Codegen API in Python applications.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install codegen\n# or\nuv pip install codegen\n```\n\n----------------------------------------\n\nTITLE: Disabling Graph Mode in Codegen Python Configuration\nDESCRIPTION: This code snippet demonstrates how to configure Codegen to run without the graph feature enabled, which can be useful for faster processing of large codebases and reduced memory usage.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_soft_delete/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncodebase = Codebase(str(repo_path), language=\"python\", config=CodebaseConfig(disable_graph=True))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Default Export to Named Export Conversion Example\nDESCRIPTION: Shows before and after examples of converting a default exported function to a named export in TypeScript. This demonstrates the transformation the script performs.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/remove_default_exports/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nexport default function myFunction() {}\n\n// After\nexport function myFunction() {}\n```\n\n----------------------------------------\n\nTITLE: Language-Specific Docstring Examples\nDESCRIPTION: Shows how Codegen handles docstring formatting differently for Python and TypeScript.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_121\n\nLANGUAGE: python\nCODE:\n```\n# Python: Uses triple quotes\ndef my_function():\n    \"\"\"Docstring is formatted with triple quotes.\"\"\"\n    pass\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript: Uses JSDoc style\nfunction myFunction() {\n  /** Docstring is formatted as JSDoc */\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Exception Handling Syntax for Python 3 Migration\nDESCRIPTION: Function that updates Python 2's exception handling syntax to Python 3's. It converts the comma syntax for exception variable assignment to the 'as' keyword.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_252\n\nLANGUAGE: python\nCODE:\n```\ndef update_exception_syntax(file):\n    \"\"\"Update Python 2 exception handling to Python 3 syntax\"\"\"\n    for editable in file.find(\"except \"):\n        if editable.source.lstrip().startswith(\"except\") and \", \" in editable.source and \" as \" not in editable.source:\n            parts = editable.source.split(\",\", 1)\n            new_source = f\"{parts[0]} as{parts[1]}\"\n            editable.edit(new_source)\n```\n\n----------------------------------------\n\nTITLE: Initializing Directed Graph with NetworkX - Python\nDESCRIPTION: This snippet initializes a directed graph using NetworkX and adds nodes representing major application modules. The nodes are enriched with metadata for potential visualization strategies. It requires the NetworkX library and a predefined list of application modules.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modules_dependencies/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nG = nx.DiGraph()\nlist_apps = [\"src/sentry/api\", \"src/sentry/auth\", \"src/sentry/flags\"]\nfor app in list_apps:\n    G.add_node(app, metadata={\"color\": \"red\"})\n```\n\n----------------------------------------\n\nTITLE: Running the Flask to FastAPI Migration\nDESCRIPTION: Command-line instructions for installing Codegen and executing the migration script to convert a Flask application to FastAPI.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/flask_to_fastapi_migration/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Working with Codebases in Codegen\nDESCRIPTION: Demonstrates different approaches for initializing codebases in Codegen examples, including using public repositories or creating custom minimal examples.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/STRUCTURE.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Preferred: Use a well-known public repo that demonstrates the concept well\ncodebase = Codebase.from_repo(\"fastapi/fastapi\")\n\n# Alternative: Create a minimal example repo when you need specific code structure\n# 1. Create an input_repo/ directory in your example\n# 2. Add minimal code that clearly demonstrates the transformation\ncodebase = Codebase(\"./input_repo\")\n```\n\n----------------------------------------\n\nTITLE: Referencing Codegen Context in IDE Chat Assistants\nDESCRIPTION: Command pattern to leverage Codegen's context when using IDE chat assistants like Copilot, Cursor, or Windsurf.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n@.codegen/codemods/upgrade-react18 @.codegen/prompts/system-prompt.md\n```\n\n----------------------------------------\n\nTITLE: Testing get_codebase_session Function with Temporary Files in Python\nDESCRIPTION: This code tests the get_codebase_session function by creating a temporary directory with a Python file, then accessing and verifying file properties. It creates a temporary codebase with a simple Python file containing an addition operation, and checks that the file has no owners.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/codebase/factory/get_session.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# test get_codebase_session\nfrom codegen.sdk.codebase.factory.get_session import get_codebase_session\nimport time\n\nwith get_codebase_session(tmpdir=f\"/tmp/{int(time.time())}\", files={\"file.py\": \"a = 1 + 2\"}) as codebase:\n    file = codebase.get_file(\"file.py\")\n    owners = file.owners\n    assert len(owners) == 0\n```\n\n----------------------------------------\n\nTITLE: Codegen RAG Q&A API Response Format\nDESCRIPTION: This JSON snippet illustrates the expected response format from the API. It includes status, error message, answer, and context with file paths and relevant code snippets.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_rag/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"error\": \"\",\n  \"answer\": \"Detailed answer based on the code...\",\n  \"context\": [\n    {\n      \"filepath\": \"path/to/file.py\",\n      \"snippet\": \"Relevant code snippet...\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Symbol Flagging in Python Using GraphSitter\nDESCRIPTION: This code demonstrates how to flag different types of symbols (functions, classes, variables) with custom messages, which adds a visual indicator and creates a CodeFlag object for tracking in the system.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_146\n\nLANGUAGE: python\nCODE:\n```\n# Flag a function\nfunction.flag(message=\"This function needs optimization\")\n\n# Flag a class\nmy_class.flag(message=\"Consider breaking this into smaller classes\")\n\n# Flag a variable\nvariable.flag(message=\"Type hints needed here\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing Method Returns in Flask-RESTx\nDESCRIPTION: Code for analyzing return statements and extracting response schemas from methods.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/openapi_decorators/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse_schemas = analyze_method_returns(method)\n```\n\n----------------------------------------\n\nTITLE: Running the Dictionary to Schema Conversion Script\nDESCRIPTION: Command-line instructions for installing Codegen and running the dictionary-to-schema conversion script. These bash commands help users execute the transformation on their own codebases.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/dict_to_schema/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the conversion\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Displaying Company Card with Image (JSX/MDX)\nDESCRIPTION: Uses a custom 'Card' component to display Codegen, Inc.'s name, logo, and a link to their website. The component takes 'img', 'title', and 'href' props to render the card within a Markdown file processed potentially by MDX or a similar framework.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/about.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Card\n  img=\"/images/codegen.jpeg\"\n  title=\"Codegen, Inc.\"\n  href=\"https://codegen.com\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Capturing Implementation Context in Python\nDESCRIPTION: Shows the format for capturing function implementation information including source code and filepath.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/generate_training_data/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\"implementation\": {\"source\": \"def process_data():\\n    ...\", \"filepath\": \"src/process.py\"}}\n```\n\n----------------------------------------\n\nTITLE: Working with Comment Groups\nDESCRIPTION: Demonstrates handling multiple consecutive comments as a group, allowing editing them as a single unit.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_119\n\nLANGUAGE: python\nCODE:\n```\n# Original comments:\n# First line\n# Second line\n# Third line\n\ncomment_group = symbol.comment\nprint(comment_group.text)  # \"First line\\nSecond line\\nThird line\"\n\n# Edit the entire group at once\ncomment_group.edit_text(\"New first line\\nNew second line\")\n```\n\n----------------------------------------\n\nTITLE: Example Exception Handling Before Python 3 Migration\nDESCRIPTION: Sample code showing Python 2's exception handling syntax using a comma to assign the exception to a variable.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_253\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    process_data()\nexcept ValueError, e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Import Statements for Module Dependencies - Python\nDESCRIPTION: This code snippet scans through files in specified application modules to analyze import statements and build edges representing module dependencies. The snippet depends on access to a structure of file paths and import statements, typically within a given codebase context.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modules_dependencies/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor file in codebase.files:\n    if app in file.filepath:\n        for import_statement in file.import_statements:\n            # Analyze imports and build edges\n```\n\n----------------------------------------\n\nTITLE: Converting Flask Route Decorators to FastAPI Format\nDESCRIPTION: Shows how to transform Flask route decorators with HTTP method specifications to FastAPI's more concise method-specific decorators.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/flask_to_fastapi_migration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# From:\n@app.route(\"/users\", methods=[\"POST\"])\n\n# To:\n@app.post(\"/users\")\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen via uv in Bash\nDESCRIPTION: This Bash snippet demonstrates how to install the Codegen Python package using the 'uv' tool. It requires both uv (a Python package/venv manager) and network access to pypi.org. The installation command prepares the environment for use in later Python snippets. Input: Shell command. Output: Codegen installed and ready for import in Python.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install codegen\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen and Running the Documentation Script using Bash\nDESCRIPTION: These Bash commands demonstrate how to install the required Codegen library using pip and then execute the Python script (`run.py`) that performs the automatic docstring generation. Requires `pip` and `python` to be installed.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/document_functions/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the conversion\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent Class in Python\nDESCRIPTION: Shows the Agent class constructor with its parameters. The Agent class is the main entry point for interacting with Codegen AI agents and requires a token, with optional organization ID and base URL.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/agents/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nAgent(token: str, org_id: Optional[int] = None, base_url: Optional[str] = CODEGEN_BASE_API_URL)\n```\n\n----------------------------------------\n\nTITLE: Extracting Dependencies in Python\nDESCRIPTION: Demonstrates the structure for storing function dependencies, including their source code and filepath.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/generate_training_data/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\"dependencies\": [{\"source\": \"def helper_function():\\n    ...\", \"filepath\": \"src/helpers.py\"}]}\n```\n\n----------------------------------------\n\nTITLE: Resolving Generic and Union Type Annotations in Python\nDESCRIPTION: Demonstrates how to traverse and resolve generic type parameters and union type options using Python's type annotation system. This snippet shows how to access resolved values for both generic type parameters and union type options.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_126\n\nLANGUAGE: python\nCODE:\n```\n# For generic types, resolve each parameter\nif hasattr(type_annotation, \"parameters\"):\n    for param in type_annotation.parameters:\n        param_types = param.resolved_value # Get symbols for each parameter\n\n# For union types, resolve each option\nif hasattr(type_annotation, \"options\"):\n    for option in type_annotation.options:\n        option_types = option.resolved_value # Get symbols for each union option\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Author Attribution in Python\nDESCRIPTION: Sets up AI bot identification and applies attribution tracking to codebase symbols. Identifies commits made by automated systems versus human contributors.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/symbol-attributions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nai_authors = [\"devin[bot]\", \"codegen[bot]\", \"github-actions[bot]\"]\nadd_attribution_to_symbols(codebase, ai_authors)\n```\n\n----------------------------------------\n\nTITLE: Python Decorator Example and Its Tree-sitter CST Representation\nDESCRIPTION: Demonstrates how a Python decorator is represented in tree-sitter's syntax tree, showing the decorated_definition node with separate decorator and function definition children.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/2. parsing/B. AST Construction.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@decorator\ndef my_function():\n    pass\n```\n\nLANGUAGE: text\nCODE:\n```\nmodule [0, 0] - [3, 0]\n  decorated_definition [0, 0] - [2, 8]\n    decorator [0, 0] - [0, 10]\n      identifier [0, 1] - [0, 10]\n    definition: function_definition [1, 0] - [2, 8]\n      name: identifier [1, 4] - [1, 15]\n      parameters: parameters [1, 15] - [1, 17]\n      body: block [2, 4] - [2, 8]\n        pass_statement [2, 4] - [2, 8]\n\n```\n\n----------------------------------------\n\nTITLE: Computing Dependencies with Usage Kind in Python Function Class\nDESCRIPTION: Implementation of dependency computation in a PyFunction class that applies different usage kinds to different parts of the function. The return type is processed with RETURN_TYPE usage kind while the body is processed with BODY usage kind.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/B. Tree Walking.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PyFunction(...):\n    ...\n\n    def _compute_dependencies(self, usage_kind: UsageKind):\n        self.return_type._compute_dependencies(UsageKind.RETURN_TYPE)\n        self.body._compute_dependencies(UsageKind.BODY)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Model After Type Annotation Migration in Python\nDESCRIPTION: Complete example showing properly annotated SQLAlchemy models with Mapped types, mapped_column, and typed relationships after migration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_type_annotations/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Optional\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\nfrom database import Base\n\n\nclass Publisher(Base):\n    __tablename__ = \"publishers\"\n\n    id: Mapped[int] = mapped_column(primary_key=True, index=True)\n    name: Mapped[str] = mapped_column(unique=True, index=True)\n    books: Mapped[List[\"Book\"]] = relationship(\"Book\", back_populates=\"publisher\")\n\n\nclass Book(Base):\n    __tablename__ = \"books\"\n\n    id: Mapped[int] = mapped_column(primary_key=True, index=True)\n    title: Mapped[str] = mapped_column(index=True)\n    author: Mapped[str] = mapped_column(index=True)\n    description: Mapped[Optional[str]] = mapped_column(nullable=True)\n    publisher_id: Mapped[Optional[int]] = mapped_column(ForeignKey(\"publishers.id\"), nullable=True)\n    publisher: Mapped[Optional[\"Publisher\"]] = relationship(\"Publisher\", back_populates=\"books\")\n```\n\n----------------------------------------\n\nTITLE: If/Else Statement Operations in Python\nDESCRIPTION: Demonstrates working with if/else statements, including condition access, block type checking, and condition reduction.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_107\n\nLANGUAGE: python\nCODE:\n```\n# Access if/else blocks\nif_block = file.code_block.statements[0]\nprint(f\"Condition: {if_block.condition.source}\")\n\n# Check block types\nif if_block.is_if_statement:\n    print(\"Main if block\")\nelif if_block.is_elif_statement:\n    print(\"Elif block\")\nelif if_block.is_else_statement:\n    print(\"Else block\")\n\n# Access alternative blocks\nfor elif_block in if_block.elif_statements:\n    print(f\"Elif condition: {elif_block.condition.source}\")\n\nif else_block := if_block.else_statement:\n    print(\"Has else block\")\n\n# Access nested code blocks\nfor block in if_block.nested_code_blocks:\n    print(f\"Block statements: {len(block.statements)}\")\n\n# Reduce if condition to True\nif_block.reduce_condition(True)\n# Before:\n#   if condition:\n#       print(\"a\")\n#   else:\n#       print(\"b\")\n# After:\n#   print(\"a\")\n\n# Reduce elif condition to False\nelif_block.reduce_condition(False)\n# Before:\n#   if a:\n#       print(\"a\")\n#   elif condition:\n#       print(\"b\")\n#   else:\n#       print(\"c\")\n# After:\n#   if a:\n#       print(\"a\")\n#   else:\n```\n\n----------------------------------------\n\nTITLE: Detecting Module Dependencies in Python\nDESCRIPTION: The code snippet exemplifies how module dependencies are detected by examining import statements, resulting in an edge in the directed graph for each detected relationship. This process relies on the correct usage of import statements within the module.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modules_dependencies/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# The script will detect dependencies like:\nfrom src.sentry.api import endpoint  # Creates edge from current module to api\nfrom src.sentry.auth import tokens  # Creates edge from current module to auth\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Migration Script\nDESCRIPTION: Command-line instructions for installing Codegen and executing the migration script to convert unittest tests to pytest format.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/unittest_to_pytest/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Testing GitHub Repository Name Retrieval in Python\nDESCRIPTION: This script tests the extraction of a GitHub repository's full name using two utility functions: get_git_repo to initialize a repository object from a local path, and get_repo_full_name to extract the full repository name from that object.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/git/url.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# test get_repo_full_name\n\nfrom codegen.cli.git.repo import get_git_repo\nfrom codegen.cli.git.url import get_repo_full_name\n\n\ngit_repo = get_git_repo(\"/Users/christinewang/git/customer_repos/codegen-staging\")\nget_repo_full_name(git_repo)\n```\n\n----------------------------------------\n\nTITLE: Fixing Python Module Import Errors\nDESCRIPTION: Command to synchronize and reinstall the Codegen package to fix import errors related to Cython extensions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --reinstall-package codegen\n```\n\n----------------------------------------\n\nTITLE: Validating RunCodemodOutput Model with Valid Data in Python\nDESCRIPTION: This code imports the RunCodemodOutput model from codegen.cli.api.schemas and validates a dictionary containing success status, web link, logs, and a diff observation. The model_validate method is used to ensure the data matches the expected schema.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/utils/schema.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# with model that should validate\nfrom codegen.cli.api.schemas import RunCodemodOutput\n\n\nres = RunCodemodOutput.model_validate(\n    {\n        \"success\": True,\n        \"web_link\": \"https://chadcode.sh/codemod/13264/code/21435/run/28349/playground/diff\",\n        \"logs\": \"\",\n        \"observation\": 'diff --git a/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py b/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py\\nindex 2dce963196b418caad011d175fb3110e03a8fe73..77c430a5acfb1613ac42c5712cc2859f31d7d773 100644\\n--- a/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py\\n+++ b/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py\\n@@ -1,12 +1,1 @@\\n-from sqlalchemy.orm import Session\\n-\\n-\\n-class BaseSlackInteractiveActionHandler:\\n-    db: Session\\n-\\n-    def __init__(self, db: Session) -> None:\\n-        self.db = db\\n-\\n-    # TODO: convert the message information into a shared schema\\n-    def process_action(self, action_payload: str, channel_id: str, thread_ts: str):\\n-        raise NotImplementedError(f\"process_action not implemented for {self.__class__.__name__}!\")\\n+update\\n\\\\ No newline at end of file\\n',\n    },\n)\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Applying Git Patch with pygit2 in Python\nDESCRIPTION: Tests the apply_patch function by applying a diff patch that removes a list_to_comma_separated function from a CSV utilities file. Uses pygit2's Repository and Diff classes to handle the patch application.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/git/patch.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# test apply_patch\nfrom pygit2 import Diff\nfrom pygit2.repository import Repository\n\nfrom codegen.cli.git.patch import apply_patch\n\nobservation = '''\ndiff --git a/codegen-backend/app/utils/csv_utils.py b/codegen-backend/app/utils/csv_utils.py\nindex 3cd4fd366f7a67a8e294ad3a4e6c6139305067d0..6f268a82218a74f652ded2ace909842f75a9ef54 100644\n--- a/codegen-backend/app/utils/csv_utils.py\n+++ b/codegen-backend/app/utils/csv_utils.py\n@@ -1,8 +1,3 @@\n-def list_to_comma_separated(items: list[str]) -> str:\n-    \"\"\"Given a list of items, returns a comma separated string of the items\"\"\"\n-    return \",\".join(items)\n-\n-\ndef comma_separated_to_list(comma_separated: str) -> list[str]:\n    \"\"\"Given a comma separated string, returns a list of the comma separated items.\n    Strips whitespace from each item, drops any items that are whitespace only\n'''\ngit_repo = Repository(\"/Users/christinewang/git/customer_repos/codegen-staging\")\napply_patch(git_repo, observation)\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Matching for Variable Operations\nDESCRIPTION: Shows how to use fuzzy matching when searching for and manipulating variables, allowing for partial name matches rather than exact matches only.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_116\n\nLANGUAGE: python\nCODE:\n```\n# Get all local variables containing \"config\"\nfunction = codebase.get_function(\"process_data\")\n\n# Exact match - only finds variables named exactly \"config\"\nexact_matches = function.code_block.get_local_var_assignments(\"config\")\n# Returns: config = {...}\n\n# Fuzzy match - finds any variable containing \"config\"\nfuzzy_matches = function.code_block.get_local_var_assignments(\"config\", fuzzy_match=True)\n# Returns: config = {...}, app_config = {...}, config_settings = {...}\n\n# Fuzzy matching also works for variable usages\nusages = function.code_block.get_variable_usages(\"config\", fuzzy_match=True)\n\n# And for renaming variables\nfunction.code_block.rename_variable_usages(\"config\", \"settings\", fuzzy_match=True)\n# Renames: config -> settings, app_config -> app_settings, config_settings -> settings_settings\n```\n\n----------------------------------------\n\nTITLE: Detecting and Filtering TypeScript Files in Python with Codegen\nDESCRIPTION: A Python code snippet that initializes a Codebase object and filters files to only process those in the shared directory. This is the first step of the migration process.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/remove_default_exports/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncodebase = Codebase(\"./\")\nfor file in codebase.files:\n    if \"/shared/\" not in file.filepath:\n        continue\n```\n\n----------------------------------------\n\nTITLE: Converting raw_input to input for Python 3 Migration\nDESCRIPTION: Function that converts Python 2's raw_input() function calls to Python 3's input() function. It finds all raw_input calls and replaces them with input.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_249\n\nLANGUAGE: python\nCODE:\n```\ndef convert_raw_input(file):\n    \"\"\"Convert raw_input() calls to input()\"\"\"\n    for call in file.function_calls:\n        if call.name == \"raw_input\":\n            call.edit(f\"input{call.source[len('raw_input'):]}\")\n```\n\n----------------------------------------\n\nTITLE: Generic Function Call in Python\nDESCRIPTION: Shows how generic type parameters are resolved based on the argument types passed to a function. The generic type T is determined by the element type of the list argument.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/E. Function Calls.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef foo[T](a: list[T]) -> T: ...\n\n\nfoo([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Example of Backward Transaction Application (Correct)\nDESCRIPTION: Demonstrates how applying file operations in backward order (from last byte range to first) produces the correct result. This is the key concept of the Transaction Manager.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/5. performing-edits/B. Transaction Manager.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nResult: FooBar\nOperation: Remove \"Bar\" (bytes 3-6), Insert \"World\" (bytes 3-7)\nResult: FooWorld\nOperation: Remove \"Foo\" (bytes 0-3), Insert \"Hello\" (bytes 0-5)\nResult: HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Editing Code Comments\nDESCRIPTION: Shows how to modify both regular and inline comments while maintaining proper formatting and delimiters.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_118\n\nLANGUAGE: python\nCODE:\n```\n# Edit a regular comment\nsymbol.comment.edit_text(\"Updated comment text\")\n\n# Edit an inline comment\nsymbol.set_inline_comment(\"New inline comment\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Depth of Inheritance - Codegen Analytics - Python\nDESCRIPTION: Calculates the depth of inheritance (DOI) for a given class by returning the length of its superclass chain. Assumes that the class object exposes a 'superclasses' attribute. This metric provides insight into object-oriented depth and is used in maintainability analysis.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/repo_analytics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_doi(cls):\\n    \\\"\\\"\\\"Calculate the depth of inheritance for a given class.\\\"\\\"\\\"\\n    return len(cls.superclasses)\n```\n\n----------------------------------------\n\nTITLE: Migration Script Installation and Execution\nDESCRIPTION: Commands for installing Codegen and running the migration script to perform the query transformation across the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/usesuspensequery_to_usesuspensequeries/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Settings for Codegen\nDESCRIPTION: JSON configuration for VSCode settings.json to set up the Python interpreter path and extra paths for the Codegen virtual environment.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"python.defaultInterpreterPath\": \"${workspaceFolder}/.codegen/.venv/bin/python\",\n  \"python.analysis.extraPaths\": [\n    \"${workspaceFolder}/.codegen/.venv/lib/python3.12/site-packages\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Codemod with Codegen CLI (Bash)\nDESCRIPTION: This command uses the Codegen CLI to create a new codemod named 'delete-dead-imports' in the current directory (.). It includes a description specifying the codemod's purpose. Codegen automatically generates an optimized system prompt file for this codemod upon creation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/work-with-ai.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncodegen create delete-dead-imports . --description \"Delete unused imports\"\n```\n\n----------------------------------------\n\nTITLE: Defining Base and Language-Specific Classes in Python\nDESCRIPTION: Demonstrates the inheritance pattern used in Codegen for defining base classes and language-specific implementations. This example shows the structure for the Function class.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_52\n\nLANGUAGE: python\nCODE:\n```\n# Base class (core/function.py)\nclass Function:\n    \"\"\"Abstract representation of a Function.\"\"\"\n    pass\n\n# Python implementation (python/function.py)\nclass PyFunction(Function):\n    \"\"\"Extends Function for Python codebases.\"\"\"\n    pass\n\n# TypeScript implementation (typescript/function.py)\nclass TSFunction(Function):\n    \"\"\"Extends Function for TypeScript codebases.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Customizing Variable Names in Promise Chain Conversion with Python\nDESCRIPTION: Example of how to specify custom variable names when converting Promise chains that involve top-level assignment variables.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_202\n\nLANGUAGE: python\nCODE:\n```\n# Convert with custom variable names for clarity\nchain.convert_to_async_await(\n    assignment_variable_name=\"operationResult\",\n)\n```\n\n----------------------------------------\n\nTITLE: Common Import Operations in Python using Codegen SDK\nDESCRIPTION: Demonstrates basic import operations including getting specific imports, changing import sources, setting aliases, and working with type imports in TypeScript. Shows how to manipulate imports with the Codegen Import API.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_86\n\nLANGUAGE: python\nCODE:\n```\n# Get a specific import\nimport_stmt = file.get_import(\"MyComponent\")\n\n# Change import source\nimport_stmt.set_module(\"./new/path\")\n\n# Add/update alias\nimport_stmt.set_alias(\"MyAlias\")  # import X as MyAlias\n\n# TypeScript-specific operations\nimport_stmt.make_type_import()  # Convert to 'import type'\nimport_stmt.make_value_import() # Remove 'type' modifier\n\n# Update multiple properties\nimport_stmt.update(\n    module=\"./new/path\",\n    alias=\"NewAlias\",\n    is_type=True\n)\n```\n\n----------------------------------------\n\nTITLE: Example Python 3 Print Function Calls After Migration\nDESCRIPTION: Sample code showing how Python 2 print statements are converted to Python 3 print function calls with parentheses.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_245\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hello, world!\")\nprint(x, y, z)\n```\n\n----------------------------------------\n\nTITLE: Using Unpacking Assignment Partial Removal in Python Codemod\nDESCRIPTION: Demonstrates how the unpacking_assignment_partial_removal flag affects the removal of elements from unpacking assignments in a codemod. When enabled, it allows for more granular modifications.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfile = codebase.get_file(...)\nb = file.get_symbol(\"b\")\nb.remove()\ncodebase.commit()\n\nfile.symbols  # [a, c]\nfile.source  # \"a, c = (1, 3)\"\n```\n\n----------------------------------------\n\nTITLE: Tree Sitter Parse Result for Python Import and Function Call\nDESCRIPTION: This snippet shows the Tree Sitter parse result for the previous Python code. It demonstrates how the parser breaks down the import statement and function call into a structured tree.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/C. Name Resolution.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmodule [0, 0] - [2, 0]\n  import_from_statement [0, 0] - [0, 25]\n    module_name: dotted_name [0, 5] - [0, 14]\n      identifier [0, 5] - [0, 14]\n    name: dotted_name [0, 22] - [0, 25]\n      identifier [0, 22] - [0, 25]\n  expression_statement [1, 0] - [1, 5]\n    call [1, 0] - [1, 5]\n      function: identifier [1, 0] - [1, 3]\n      arguments: argument_list [1, 3] - [1, 5]\n```\n\n----------------------------------------\n\nTITLE: Method Resolution Order Operations\nDESCRIPTION: Shows how to work with Python's method resolution order (MRO) for inheritance traversal.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_83\n\nLANGUAGE: python\nCODE:\n```\n# Access superclasses\nfor parent in class_def.superclasses:\n    print(f\"Parent: {parent.name}\")\n\n# Check inheritance\nif class_def.is_subclass_of(\"BaseClass\"):\n    print(\"This is a subclass of BaseClass\")\n\n# Get all subclasses\nfor child in class_def.subclasses:\n    print(f\"Child class: {child.name}\")\n\n# Access inherited methods/attributes\nall_methods = class_def.methods(max_depth=None)  # Include inherited methods\nall_attrs = class_def.attributes(max_depth=None)  # Include inherited attributes\n```\n\n----------------------------------------\n\nTITLE: Editing Docstrings\nDESCRIPTION: Shows how to modify existing docstrings while preserving formatting and indentation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_122\n\nLANGUAGE: python\nCODE:\n```\n# Edit a docstring\nfunction.docstring.edit_text(\"Updated documentation\")\n\n# Edit a multi-line docstring\nfunction.docstring.edit_text(\"\"\"\n    Updated multi-line documentation\n    that preserves indentation and formatting.\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Updating Names with TypeScript's ts-morph\nDESCRIPTION: This TypeScript code snippet uses the ts-morph library for updating identifier names in a project. It demonstrates project analysis capabilities, requiring TypeScript and knowledge of ts-morph.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/codemod-frameworks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Project } from \"ts-morph\";\n\nconst project = new Project();\nproject.addSourceFileAtPath(\"src/**/*.ts\");\nproject.getSourceFiles().forEach((sourceFile) => {\n  sourceFile\n    .getDescendantsOfKind(SyntaxKind.Identifier)\n    .filter((node) => node.getText() === \"old_name\")\n    .forEach((node) => node.replaceWithText(\"new_name\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Repository Structure Before Dependency Management\nDESCRIPTION: Shows the initial directory structure of a repository before the Dependency Manager processes it. This includes the main package.json file and nested package.json files in various subdirectories.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/external/dependency-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrepo/\n├── package.json\n├── node_modules/\n├── src/\n│   ├── frontend/\n│   │   └── package.json\n│   └── backend/\n│       └── package.json\n└── tests/\n    └── package.json\n```\n\n----------------------------------------\n\nTITLE: Renaming Identifiers with JavaScript's jscodeshift\nDESCRIPTION: This JavaScript code snippet utilises jscodeshift to rename identifiers in source code, leveraging a jQuery-like API. It requires Node.js and familiarity with the jscodeshift API.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/codemod-frameworks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function transformer(file, api) {\n  const j = api.jscodeshift;\n  return j(file.source)\n    .find(j.Identifier)\n    .filter((path) => path.node.name === \"old_name\")\n    .replaceWith((path) => j.identifier(\"new_name\"))\n    .toSource();\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Generic Type Resolution in Python\nDESCRIPTION: Shows the impact of the generics flag on resolving generic type usage. When enabled, it allows for more accurate tracking of generic type usages in the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass Point:\n    def scale(cls, n: int):\n        pass\n\nclass List[T]():\n    def pop(self) -> T:\n        ...\n\nl: List[Point] = []\nl.pop().scale(1)  # Generic Usage\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Functions with Docstrings in Codegen\nDESCRIPTION: Shows how to create well-documented utility functions with clear docstrings that explain their purpose, a key practice for Codegen examples.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/STRUCTURE.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef hop_through_imports(imp: Import) -> Symbol | ExternalModule:\n    \"\"\"Finds the root symbol for an import\"\"\"\n    # Implementation...\n```\n\n----------------------------------------\n\nTITLE: Updating Unicode to String Type in Python 3 Migration\nDESCRIPTION: Function that handles Unicode-related code updates for Python 3 compatibility. It modifies imports, function calls, arguments, and string literals to use Python 3's unified string type.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_246\n\nLANGUAGE: python\nCODE:\n```\ndef update_unicode_to_str(file):\n    \"\"\"Convert Unicode-related code to str for Python 3\"\"\"\n    # Update imports from 'unicode' to 'str'\n    for imp in file.imports:\n        if imp.name == 'unicode':\n            imp.set_name(\"str\")\n\n    # Update function calls from Unicode to str\n    for func_call in file.function_calls:\n        if func_call.name == \"unicode\":\n            func_call.set_name(\"str\")\n\n        # Check function arguments for Unicode references\n        for arg in func_call.args:\n            if arg.value == \"unicode\":\n                arg.set_value(\"str\")\n\n    # Find and update Unicode string literals (u\"...\")\n    for string_literal in file.find('u\"'):\n        if string_literal.source.startswith('u\"') or string_literal.source.startswith(\"u'\"):\n            new_string = string_literal.source[1:]  # Remove the 'u' prefix\n            string_literal.edit(new_string)\n```\n\n----------------------------------------\n\nTITLE: Example Python 2 Print Statements Before Migration\nDESCRIPTION: Sample code showing Python 2 print statements before migration. These statements do not use parentheses as print is a statement rather than a function in Python 2.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_244\n\nLANGUAGE: python\nCODE:\n```\nprint \"Hello, world!\"\nprint x, y, z\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authentication Token using TokenManager in Python\nDESCRIPTION: This snippet demonstrates how to import the TokenManager class, instantiate it, and retrieve a token. It first imports the TokenManager from the codegen.cli.auth.token_manager module, creates an instance, and then calls the get_token() method to retrieve and print the authentication token.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/auth/token_manager.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen.cli.auth.token_manager import TokenManager\n\n\ntoken_manager = TokenManager()\nprint(token_manager.get_token())\n```\n\n----------------------------------------\n\nTITLE: Creating Prompt for Notion Integration\nDESCRIPTION: Defines a prompt for adding a Notion integration to the codebase, requesting the AI to examine existing Linear integrations as a reference for implementation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/swebench_agent_run/local_run.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# prompt = \"\"\"\n# Please write integration tests for github tools. Below are paths to relevant files:\n# Existing integration tests for linear (use these as an example):\n#  - codegen-backend/codegen_integration/test_linear_tools.py\n# Github Langchain Interface:\n#  - codegen-backend/app/modal_app/gen/github_utils/tools.py\n# Directory Containing github tools:\n#  - codegen-backend/app/modal_app/gen/tools/github\n# \"\"\"\nprompt = \"\"\"\nAdd a notion integration to the codebase. View similar integrations for linear.\nPlease view the existing integrations for linear.\n- src/codegen/extensions/clients/linear.py\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Edge Metadata for Call Graph in Python\nDESCRIPTION: This function generates metadata for call graph edges, including the function name, file path, start and end points, and symbol type.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_187\n\nLANGUAGE: python\nCODE:\n```\ndef generate_edge_meta(call: FunctionCall) -> dict:\n    \"\"\"Generate metadata for call graph edges\n\n    Args:\n        call (FunctionCall): Function call information\n\n    Returns:\n        dict: Edge metadata including name and location\n    \"\"\"\n    return {\n        \"name\": call.name,\n        \"file_path\": call.filepath,\n        \"start_point\": call.start_point,\n        \"end_point\": call.end_point,\n        \"symbol_name\": \"FunctionCall\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Detecting Promise Chain for a Specific Function Call with Python\nDESCRIPTION: Code that identifies the promise chain associated with a particular function call. This provides fine-grained control for transforming individual promise instances within a function.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Or get the promise chain for the current function call\nfunction_call = codebase.get_function(\"function_name\").function_calls[0]\npromise_chain = function_call.promise_chain\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unpacking Assignment Partial Removal in Python\nDESCRIPTION: Shows the effect of the unpacking_assignment_partial_removal flag on removing elements from unpacking assignments. When enabled, it allows for more precise removal of individual elements.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\na, b, c = (1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Creating Masked Prediction Examples in Python\nDESCRIPTION: This function demonstrates how to create masked prediction examples from the generated training data. It can be used for training language models to predict function implementations based on dependencies and usages.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_186\n\nLANGUAGE: python\nCODE:\n```\ndef create_training_example(function_data):\n    \"\"\"Create a masked prediction example from function data.\"\"\"\n    return {\n        \"context\": {\n            \"dependencies\": function_data[\"dependencies\"],\n            \"usages\": function_data[\"usages\"]\n        },\n        \"target\": function_data[\"implementation\"]\n    }\n\n# Create training examples\nexamples = [create_training_example(f) for f in training_data[\"functions\"]]\n```\n\n----------------------------------------\n\nTITLE: Importing Available Code Analysis Tools\nDESCRIPTION: This snippet shows how to import the various tools available for code analysis and manipulation in the Codegen package.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_168\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen.extensions.langchain.tools import (\n    CreateFileTool,\n    DeleteFileTool,\n    EditFileTool,\n    ListDirectoryTool,\n    MoveSymbolTool,\n    RenameFileTool,\n    ReplacementEditTool,\n    RevealSymbolTool,\n    SearchTool,\n    SemanticEditTool,\n    ViewFileTool,\n)\n```\n\n----------------------------------------\n\nTITLE: Working with Functions in Python and TypeScript Codebases\nDESCRIPTION: Shows a code snippet that works with functions in both Python and TypeScript codebases. It demonstrates how to iterate over functions and access their properties.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n# Works for both Python and TypeScript\nfor function in codebase.functions:\n    print(f\"Function: {function.name}\")\n    print(f\"Parameters: {[p.name for p in function.parameters]}\")\n    print(f\"Return type: {function.return_type}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Codegen Dependencies for Typescript Analysis\nDESCRIPTION: Imports the necessary modules from the Codegen library to analyze and modify a codebase. This includes the Codebase class, ProgrammingLanguage enum, and StatementType for analyzing code structures.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/convert_promises_twilio_repository.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\nfrom codegen.sdk.enums import ProgrammingLanguage\nfrom codegen.sdk.core.statements.statement import StatementType\n```\n\n----------------------------------------\n\nTITLE: Rendering a GitHub Link in React\nDESCRIPTION: This React functional component, GithubLinkNote, renders a styled link to a GitHub repository. It takes a single prop, 'link', which is the URL to the GitHub repository. The component utilizes flexbox for layout and includes attributes to open the link in a new tab while ensuring security best practices with 'noopener noreferrer'.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/snippets/GithubLinkNote.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const GithubLinkNote = ({link}) => (\n   <Info>\n      <div className=\"flex gap-2 items-center\">View Source on <a target=\"_blank\"  rel=\"noopener noreferrer\" href={link}>Github</a></div>\n   </Info>\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Print Statements in Python 2 to Python 3\nDESCRIPTION: This snippet demonstrates how to convert Python 2 print statements to Python 3 print function calls. It shows the transformation of both simple and multiple argument print statements.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/python2_to_python3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# From:\nprint \"Hello, world!\"\nprint x, y, z\n\n# To:\nprint(\"Hello, world!\")\nprint(x, y, z)\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen CLI Globally with uv\nDESCRIPTION: This command installs the Codegen command-line interface globally using the uv package manager. This is the first step in setting up Codegen for use in your projects.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install codegen\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Local vs Global Scope in Python\nDESCRIPTION: This Python code snippet illustrates the concept of local vs global scope. It shows how function definitions and imports interact with scoping rules, demonstrating the complexity of name resolution in nested functions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/C. Name Resolution.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Local vs global scope\nfrom my_module import foo, bar, fuzz\n\n\ndef outer():\n    def foo(): ...\n\n    foo()\n    bar()\n    fuzz()\n\n    def fuzz(): ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Generic Type Resolution in Python Codemod\nDESCRIPTION: Shows the effect of disabling the generics flag, which results in less comprehensive tracking of generic type usages in the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nbar_func = codebase.get_class(\"Point\").get_method(\"scale\")\nlen(bar_func.usages)  # 0\nbar_func.usages  # []\n```\n\n----------------------------------------\n\nTITLE: Using Meaningful Layouts for Graph Visualization in Python\nDESCRIPTION: This code demonstrates how to group related nodes together using the cluster attribute, which helps organize visualization by grouping nodes that belong to similar categories or subsystems.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_144\n\nLANGUAGE: python\nCODE:\n```\n# Group related nodes together\ngraph.add_node(controller_class, cluster=\"api\")\ngraph.add_node(service_class, cluster=\"db\")\n```\n\n----------------------------------------\n\nTITLE: Running and Resetting Codegen Codemods\nDESCRIPTION: Commands to run a Codegen codemod to write changes to disk and to reset those changes afterward.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# Run => write changes to disk\ncodegen run organize-types\n\n# Reset changes on disk\ncodegen reset\n```\n\n----------------------------------------\n\nTITLE: Setting Up Static File Handling in FastAPI\nDESCRIPTION: Demonstrates how to configure static file serving in FastAPI, which has a different approach than Flask for handling static files.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/flask_to_fastapi_migration/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Adds:\nfrom fastapi.staticfiles import StaticFiles\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n```\n\n----------------------------------------\n\nTITLE: Launching Codegen Notebook Demo in Bash\nDESCRIPTION: This Bash snippet launches the Codegen Jupyter notebook demo via the CLI. It requires an existing Python environment with Codegen and Jupyter installed. The command spins up a new virtual environment and opens a notebook pre-loaded to explore a sample codebase (e.g., FastAPI). Input: Shell command. Output: Jupyter notebook opened with demo.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Launch Jupyter with a demo notebook\ncodegen notebook --demo\n```\n\n----------------------------------------\n\nTITLE: Initializing Twilio Node.js Codebase in Codegen\nDESCRIPTION: Initializes the Twilio Node.js repository as a Codegen Codebase object with TypeScript as the programming language. This setup allows Codegen to parse and analyze the TypeScript code in the repository.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/convert_promises_twilio_repository.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Initializing codebase...\")\ncodebase = Codebase(\"twilio/twilio-node\", programming_language=ProgrammingLanguage.TYPESCRIPT)\nprint(\"Twilio repository initialized!\")\n```\n\n----------------------------------------\n\nTITLE: Ensuring SQLAlchemy 'and_' Import in Python\nDESCRIPTION: This function checks if the 'and_' import from SQLAlchemy is present in the file. If not, it adds the import to ensure the necessary function is available for combining join conditions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_soft_delete/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef ensure_and_import(file):\n    if not any(\"and_\" in imp.name for imp in file.imports):\n        file.add_import(\"from sqlalchemy import and_\")\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in MDX Documentation\nDESCRIPTION: Importing URL constants from an external snippets file to be used in the Community & Contributing page of the Codegen documentation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  COMMUNITY_SLACK_URL,\n  CODEGEN_SDK_GITHUB_URL,\n} from \"/snippets/links.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up Codegen Development Environment\nDESCRIPTION: Commands to create a virtual environment, activate it, and synchronize dependencies for Codegen development using UV package manager.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\nuv sync --dev\n```\n\n----------------------------------------\n\nTITLE: Class Constructor Call in Python\nDESCRIPTION: Demonstrates how Python class definitions can be called as functions (constructors), showing the distinction between the name resolution to the class definition and the constructor behavior.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/E. Function Calls.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Foo:\n    def __init__(self): ...\n\n\na = Foo()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Module to Shared Exports in TypeScript\nDESCRIPTION: This code snippet shows the before and after states of importing a function, demonstrating how the script changes direct module imports to imports through shared exports.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/reexport_management/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Before: Direct module import\nimport { validateEmail } from '../module_a/src/functions';\n\n// After: Import through shared\nimport { validateEmail } from '../module_a/src/shared';\n```\n\n----------------------------------------\n\nTITLE: Example Output Log from the Documentation Generation Script\nDESCRIPTION: This text snippet shows sample output from the documentation generation script, displaying progress updates for each function. It indicates whether a function was skipped (already documented), successfully processed, or encountered an error during docstring generation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/document_functions/README.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[1/150] Skipping my_function - already has docstring\n[2/150] Generating docstring for process_data at src/utils.py\n  ✓ Generated docstring\n[3/150] Generating docstring for validate_input at src/validation.py\n  ✗ Failed to generate docstring\n```\n\n----------------------------------------\n\nTITLE: Generating a Codemod with Description\nDESCRIPTION: Command to create a new codemod with a detailed description, which will generate an optimized system prompt for AI assistants.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncodegen create delete-dead-imports --description \"Delete unused imports\"\n```\n\n----------------------------------------\n\nTITLE: Example of Method Usages Resolution in Python\nDESCRIPTION: This snippet illustrates how method usage resolution can be enabled or disabled when working with Codemod in Python. By toggling the 'method_usages' flag in CodebaseConfig, the code showcases the effect on accessing method usages within a codebase. It is useful for selectively enabling this feature based on performance requirements.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/advanced-settings.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Foo:\n    def bar():\n        ...\n\nobj = Foo()\nobj.bar()  # Method Usage\n\n# Codemod with `method_usages` on:\nbar_func = codebase.get_class(\"Foo\").get_method(\"bar\")\nlen(bar_func.usages)  # 1\nbar_func.usages  # [obj.bar()]\n\n# Codemod with `method_usages` off:\nbar_func = codebase.get_class(\"Foo\").get_method(\"bar\")\nlen(bar_func.usages)  # 0\nbar_func.usages  # []\n```\n\n----------------------------------------\n\nTITLE: Managing Temporary Resources with pytest Fixtures\nDESCRIPTION: This example shows how to convert unittest's setup/teardown methods for temporary resources to pytest fixtures. pytest fixtures provide a cleaner way to manage resources with automatic cleanup.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_235\n\nLANGUAGE: python\nCODE:\n```\n# From:\ndef setUp(self):\n    self.temp_dir = tempfile.mkdtemp()\n\ndef tearDown(self):\n    shutil.rmtree(self.temp_dir)\n\n# To:\n@pytest.fixture\ndef temp_dir():\n    dir = tempfile.mkdtemp()\n    yield dir\n    shutil.rmtree(dir)\n```\n\n----------------------------------------\n\nTITLE: Common Symbol Manipulation Patterns\nDESCRIPTION: Shows typical patterns for finding and modifying symbols in a codebase, including function renaming and method logging.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_77\n\nLANGUAGE: python\nCODE:\n```\n# Find and modify functions\nfor function in codebase.functions:\n    if function.name.startswith(\"old_\"):\n        # Rename function\n        function.rename(function.name.replace(\"old_\", \"new_\"))\n        # Update docstring\n        function.set_docstring(\"Updated version of function\")\n\n# Update class methods\nfor method in class_def.methods:\n    # Add logging\n    method.prepend_statements(\"logger.info('Called {}'\".format(method.name))\n```\n\n----------------------------------------\n\nTITLE: Importing and Calling a Function in Python\nDESCRIPTION: This snippet demonstrates importing a function 'foo' from 'my_module' and then calling it. It shows how names are used in Python for imports and function calls.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/C. Name Resolution.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom my_module import foo\n\nfoo()\n```\n\n----------------------------------------\n\nTITLE: React Query Migration Example\nDESCRIPTION: Example showing the before and after states of the query transformation, demonstrating how multiple individual queries are consolidated into a single useSuspenseQueries call.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/usesuspensequery_to_usesuspensequeries/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nconst result1 = useSuspenseQuery(queryConfig1)\nconst result2 = useSuspenseQuery(queryConfig2)\nconst result3 = useSuspenseQuery(queryConfig3)\n\n// Automatically converted to:\nconst [result1, result2, result3] = useSuspenseQueries({\n  queries: [queryConfig1, queryConfig2, queryConfig3]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager on macOS\nDESCRIPTION: Command to install the UV package manager, a fast Python package installer and resolver, using Homebrew on macOS.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install uv\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Symbol Dependencies in Python Files Before and After Refactoring\nDESCRIPTION: This set of code snippets demonstrates how code refactoring with symbol movements requires incremental graph updates. It shows the initial file with two functions, followed by the result after moving 'bar' to file2.py and 'foo' to file3.py, with proper import statements.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/6. incremental-computation/A. Overview.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# file1.py\ndef foo():\n    return bar()\n\n\ndef bar():\n    return 42\n```\n\nLANGUAGE: python\nCODE:\n```\n# file2.py\ndef bar():\n    return 42\n```\n\nLANGUAGE: python\nCODE:\n```\n# file3.py\nfrom file2 import bar\n\n\ndef foo():\n    return bar()\n```\n\n----------------------------------------\n\nTITLE: Displaying Promise Chain Analysis Results\nDESCRIPTION: Prints the total number of operation promise chains found and the count of files that would be affected by the transformation. This provides a summary of the scope of changes to be made.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/convert_promises_twilio_repository.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Number of Operation Promise Chains found:\", len(operation_promise_chains))\nprint(\"Number of files affected:\", len(unique_files))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Codegen RAG Q&A API\nDESCRIPTION: This snippet shows how to install the required Python packages for the Codegen RAG Q&A API using pip. It includes Modal client, Codegen, and OpenAI libraries.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_rag/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install modal-client codegen openai\n```\n\n----------------------------------------\n\nTITLE: Defining Codemod Folder Structure\nDESCRIPTION: Specifies the folder structure for storing codemods and their corresponding tests. The codemod folder is located in the src directory, while tests are in the tests/integration directory.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codemods/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`{codemod_folder} = src/codemods/{type}/{name}`\n`{codemod_tests_folder} = tests/integration/codemod/{type}/{name}`\n```\n\n----------------------------------------\n\nTITLE: TypeScript Re-export Conversion Example\nDESCRIPTION: Shows before and after examples of converting a default re-export to a named re-export in TypeScript. This demonstrates another type of transformation the script handles.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/remove_default_exports/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nexport { default } from './module';\n\n// After\nexport { myFunction } from './module';\n```\n\n----------------------------------------\n\nTITLE: Value Manipulation in Python\nDESCRIPTION: Shows how to use the HasValue behavior API for working with value elements. Includes examples of accessing and modifying values, and checking for null values.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_98\n\nLANGUAGE: python\nCODE:\n```\n# Access the value\nvalue = variable.value  # Gets the value Expression node\nprint(value.source)     # Gets the string content\n\n# Modify the value\nvariable.set_value(\"new_value\")\n\n# Common patterns\nif variable.value is not None:\n    print(f\"{variable.name} = {variable.value.source}\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing Export Statements in Python\nDESCRIPTION: This snippet demonstrates how to analyze export statements in a file, identifying re-exports that are not external exports. It uses Codegen's code analysis engine to process each export statement.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/reexport_management/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor export_stmt in file.export_statements:\n    for export in export_stmt.exports:\n        if export.is_reexport() and not export.is_external_export:\n            all_reexports.append(export)\n```\n\n----------------------------------------\n\nTITLE: Basic Class Method Call Example in Python\nDESCRIPTION: A simple Python example showing a class with a method and how it's instantiated and called, which forms the basis for explaining chained attribute resolution.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/D. Chained Attributes.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Foo:\n    def foo(self): ...\n\n\na = Foo()\na.foo()\n```\n\n----------------------------------------\n\nTITLE: Example raw_input Usage Before Python 3 Migration\nDESCRIPTION: Sample code showing how Python 2's raw_input() function is used to get string input from users.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_250\n\nLANGUAGE: python\nCODE:\n```\nname = raw_input(\"Enter your name: \")\n```\n\n----------------------------------------\n\nTITLE: Activating the Codegen Virtual Environment\nDESCRIPTION: This command activates the Python virtual environment created by Codegen during initialization. Activating this environment ensures you have access to all the dependencies required by Codegen.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource .codegen/.venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Constructing Directory Tree in Python\nDESCRIPTION: The build_directory_tree method in CodebaseContext class builds the directory tree by iterating through all files, creating directory objects, and adding files to their respective parent directories. It uses the get_directory method with create_on_missing=True for recursive directory creation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/2. parsing/C. Directory Parsing.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbuild_directory_tree()\n```\n\nLANGUAGE: python\nCODE:\n```\nget_directory(create_on_missing=True)\n```\n\nLANGUAGE: python\nCODE:\n```\n_add_file()\n```\n\n----------------------------------------\n\nTITLE: Statement Type Filtering in Python\nDESCRIPTION: Demonstrates how to filter statements by their type using isinstance. Shows example with ImportStatement type.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_103\n\nLANGUAGE: python\nCODE:\n```\n# Filter statements by type\nfor stmt in file.code_block.statements:\n    if isinstance(stmt, ImportStatement):\n        print(stmt)\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Volume for Codegen Indices\nDESCRIPTION: This command creates a Modal volume named 'codegen-indices' for storing indices used by the Codegen RAG Q&A API.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_rag/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmodal volume create codegen-indices\n```\n\n----------------------------------------\n\nTITLE: Running and Deploying Codemods in Bash\nDESCRIPTION: Shows the commands to run a codemod locally and deploy it for team use using the Codegen CLI. These steps are typically performed after creating a new codemod.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncodegen run my-codemod --apply-local\n```\n\nLANGUAGE: bash\nCODE:\n```\ncodegen deploy my-codemod\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Codegen\nDESCRIPTION: Command to run unit tests that verify atomic functionality in the Codegen project using pytest with parallelization.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest tests/unit -n auto\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Files with Python Codegen\nDESCRIPTION: Demonstrates how to retrieve configuration files with specific extensions using Codegen's file access API.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nconfig_files = codebase.files(extensions=[\".json\", \".yaml\", \".toml\"])\n```\n\n----------------------------------------\n\nTITLE: Managing Shared Files in Python\nDESCRIPTION: This code snippet shows how to create or update shared export files. It resolves the public file path and creates a new file if it doesn't exist, using Codegen's file management capabilities.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/reexport_management/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresolved_public_file = export.resolved_symbol.filepath.replace(\"src/\", \"src/shared/\")\nif not codebase.has_file(resolved_public_file):\n    target_file = codebase.create_file(resolved_public_file, sync=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing Codebase from Repository\nDESCRIPTION: Imports the Codebase class and initializes a codebase object from the 'codegen-sh/cloud' repository for further processing.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/swebench_agent_run/local_run.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen.sdk.core.codebase import Codebase  # noqa: E402\n\ncodebase = Codebase.from_repo(repo_full_name=\"codegen-sh/cloud\")\n```\n\n----------------------------------------\n\nTITLE: Converting React Fragment Tag to Shorthand Syntax (JSX)\nDESCRIPTION: Illustrates the transformation of a React `Fragment` component into the shorthand `<>` syntax within JSX code. This shows the 'before' and 'after' state handled by the Codegen script during fragment detection and conversion.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/fragment_to_shorthand/README.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// From:\n<Fragment>\n  <div>Hello</div>\n  <div>World</div>\n</Fragment>\n\n// To:\n<>\n  <div>Hello</div>\n  <div>World</div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Selecting Python Interpreter in VSCode\nDESCRIPTION: Configure VSCode to use Codegen's custom Python environment to enable LSP and debugging. This is achieved by selecting the interpreter path in Python extensions settings.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/ide-usage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.codegen/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Example of Usage Kind Identification in Python\nDESCRIPTION: A code example showing how usage contexts are differentiated in dependency analysis. The function declaration contains a return type annotation and a function call, each with different usage kinds.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/B. Tree Walking.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef foo() -> c:\n    c()\n```\n\n----------------------------------------\n\nTITLE: Running Evaluation Script with Options in Bash\nDESCRIPTION: This snippet shows the usage of the run_eval.py script, including available options for customizing the evaluation process. It demonstrates how to view help information and lists the various command-line arguments that can be used.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/swebench_agent_run/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python run_eval.py --help\nUsage: run_eval.py [OPTIONS]\n\nOptions:\n--use-existing-preds TEXT       The run ID of the existing predictions to\n                                use.\n--dataset [lite|full|verified|lite_small|lite_medium|lite_large]\n                                The dataset to use.\n--length INTEGER                The number of examples to process.\n--instance-id TEXT              The instance ID of the example to process.\n--repo TEXT                     The repo to use.\n--instance-ids LIST_OF_STRINGS  The instance IDs of the examples to process.\n                                Example: --instance-ids <instance_id1>,<instance_id2>,...\n--help                          Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Executing Codegen MCP Server using uvx\nDESCRIPTION: Command to run the Codegen MCP Server directly without installation. This command can be executed in the terminal or added to an MCP config file.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/codegen-mcp-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvx --from 'git+https://github.com/codegen-sh/codegen-sdk.git#egg=codegen-mcp-server&subdirectory=codegen-examples/examples/codegen-mcp-server' codegen-mcp-server\n```\n\n----------------------------------------\n\nTITLE: Reviewing Generated System Prompt (Bash)\nDESCRIPTION: This command uses the 'cat' utility to display the contents of the system prompt file automatically generated by Codegen for the 'modernize-components' codemod. This allows reviewing the context provided to AI assistants. This is the second step in the example workflow.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/work-with-ai.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat codegen-sh/codemods/modernize-components/prompt.md\n```\n\n----------------------------------------\n\nTITLE: Modernizing Test Fixtures for Pytest\nDESCRIPTION: Demonstrates how to convert unittest's class-level setup methods to pytest's session-scoped fixtures. Shows the transformation of setUpClass to pytest fixture decorators.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/unittest_to_pytest/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# From:\n@classmethod\ndef setUpClass(cls):\n    cls.conn = create_db()\n\n\n# To:\n@pytest.fixture(scope=\"session\")\ndef conn():\n    return create_db()\n```\n\n----------------------------------------\n\nTITLE: Class with Function Assignment Example in Python\nDESCRIPTION: A Python example showing a class with an attribute that's assigned to a function, demonstrating a more complex case for chained attribute resolution where the attribute itself needs to be resolved.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/D. Chained Attributes.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef fuzz(): ...\n\n\nclass Foo:\n    foo = fuzz\n\n\na = Foo()\na.foo()\n```\n\n----------------------------------------\n\nTITLE: Defining Dangerous Modules in Python\nDESCRIPTION: Creates a set of Python modules that are considered dangerous for user-provided code execution. These modules could potentially be used to access system resources or perform harmful operations.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/shared/compilation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nDANGEROUS_MODULES = {\n    'os',\n    'sys',\n    'builtins',\n    'subprocess',\n    'shutil',\n    'importlib',\n    'pathlib',\n    'typing',\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Instance with Promise Chain - TypeScript\nDESCRIPTION: This TypeScript function demonstrates the common promise chain pattern present in Twilio's Node.js SDK where an update operation is executed using operationVersion.update(), transformed with a .then() call, passed through setPromiseCallback for legacy callback compatibility, then returned as a promise. It depends on objects like operationVersion, instance, and setPromiseCallback, and optionally takes a callback for traditional Node.js-style error handling. Input is an optional callback; output is a promise resolving to an Instance. Limitations include promise nesting that can impact readability and testability.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/promise-to-async-await-twilio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction update(callback?: (error: Error | null, item?: Instance) => any): Promise<Instance> {\n  let operationPromise = operationVersion.update({\n    uri: instance._uri,\n    method: \"post\",\n    headers,\n  });\n\n  operationPromise = operationPromise.then(\n    (payload) => new Instance(operationVersion, payload)\n  );\n\n  operationPromise = instance._version.setPromiseCallback(\n    operationPromise,\n    callback\n  );\n  return operationPromise;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Local Test Case Folder Structure\nDESCRIPTION: Specifies the folder structure for creating local test cases within the codemod tests folder. The original state of the repository is stored in an 'original' subfolder.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codemods/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`{codemod_tests_folder}/test_{repo_name}/original`\n```\n\n----------------------------------------\n\nTITLE: Parsing Environment Names in codegen CLI\nDESCRIPTION: This snippet demonstrates how to parse an environment name using the Environment enum from the codegen.cli.env.enums module. It creates an Environment instance with the value 'staging'.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/env/global_env.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# test: parse environment\nfrom codegen.cli.env.enums import Environment\n\n\nEnvironment(\"staging\")\n```\n\n----------------------------------------\n\nTITLE: Processing Code Generation Response in Python\nDESCRIPTION: Creates and processes a response object containing success status, web link, logs and code diff observation. Uses the requests library Response class and json encoding to handle the response data.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/commands/run/main.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom requests import Response\nfrom codegen.cli.commands.run import run_200_handler\n\nres = {\n    \"success\": True,\n    \"web_link\": \"https://chadcode.sh/codemod/13264/code/21435/run/28349/playground/diff\",\n    \"logs\": \"\",\n    \"observation\": 'diff --git a/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py b/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py\\nindex 2dce963196b418caad011d175fb3110e03a8fe73..77c430a5acfb1613ac42c5712cc2859f31d7d773 100644\\n--- a/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py\\n+++ b/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py\\n@@ -1,12 +1,1 @@\\n-from sqlalchemy.orm import Session\\n-\\n-\\n-class BaseSlackInteractiveActionHandler:\\n-    db: Session\\n-\\n-    def __init__(self, db: Session) -> None:\\n-        self.db = db\\n-\\n-    # TODO: convert the message information into a shared schema\\n-    def process_action(self, action_payload: str, channel_id: str, thread_ts: str):\\n-        raise NotImplementedError(f\"process_action not implemented for {self.__class__.__name__}!\")\\n+update\\n\\\\ No newline at end of file\\n',\n}\n\nresp = Response()\nresp._content = json.dumps(res).encode(\"utf-8\")\n\nrun_200_handler(\n    payload={\"web\": True},\n    response=resp,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen Package with pip\nDESCRIPTION: Demonstrates how to install the Codegen package using pip, which includes the Agents SDK.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/agents/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install codegen\n```\n\n----------------------------------------\n\nTITLE: Retrieving Codegen SDK README with Curl\nDESCRIPTION: Command to download and display the Codegen SDK README file from GitHub's raw content. This provides installation instructions for the MCP server.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/codegen-mcp-server/llms-install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/codegen-sh/codegen-sdk/refs/heads/develop/README.md\" | cat\n```\n\n----------------------------------------\n\nTITLE: Installing the Codegen SDK using Pip (Bash)\nDESCRIPTION: This command installs the Codegen SDK, which is a standard Python package, using the pip package manager. It allows users to integrate Codegen functionality into Python scripts, CI/CD pipelines, or other tools that execute Python code. Requires Python and pip to be installed.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install codegen\n```\n\n----------------------------------------\n\nTITLE: Detecting Test Files in Python using Codegen\nDESCRIPTION: This code snippet shows how to automatically identify test files using Codegen's file APIs. It skips non-test files to avoid unnecessary processing.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/freezegun_to_timemachine_migration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif \"tests\" not in file.filepath:\n    continue\n```\n\n----------------------------------------\n\nTITLE: Loading Codebase from Repository in Codegen\nDESCRIPTION: Loads a Git repository into Codegen's code analysis engine to prepare for codebase-wide transformations. This is the first step in the dictionary-to-schema conversion process.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/dict_to_schema/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncodebase = Codebase.from_repo(\"modal-labs/modal-client\")\n```\n\n----------------------------------------\n\nTITLE: File Movement and Renaming in Python Codegen\nDESCRIPTION: Shows how to move, rename, and remove files, including bulk operations on test files.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_71\n\nLANGUAGE: python\nCODE:\n```\n# Move/rename a file\nfile.update_filepath(\"/path/to/foo.py\")  # Move to new location\nfile.rename(\"bar\")  # Rename preserving extension, e.g. `bar.py`\n\n# Remove a file (potentially destructive)\nfile.remove()\n\n# Move all tests to a tests directory\nfor file in codebase.files:\n    if 'test_' in file.name:\n        # This will handle updating imports and other references\n        file.update_filepath('tests/' + file.filepath.replace(\"test_\", \"\"))\n```\n\n----------------------------------------\n\nTITLE: Visualizing Repository Structure After Cleaning Package.json Files\nDESCRIPTION: Shows the directory structure after the Dependency Manager has modified the package.json files to create clean versions that only include validated dependencies and essential configuration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/external/dependency-manager.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nrepo/\n├── package.json (modified)\n├── package.json.gs_internal.bak\n├── src/\n│   ├── frontend/\n│   │   └── package.json (modified)\n│   │   └── package.json.gs_internal.bak\n│   └── backend/\n│       └── package.json (modified)\n│       └── package.json.gs_internal.bak\n└── tests/\n    └── package.json (modified)\n    └── package.json.gs_internal.bak\n```\n\n----------------------------------------\n\nTITLE: Typical Codegen Project Directory Structure\nDESCRIPTION: Lists the default directory structure created after running 'codegen init'. Shows the files and folders generated, serving as a reference for expected contents and clean setup for codemods.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/installation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n.codegen/\n├── .venv/            # Python virtual environment (gitignored)\n├── config.toml       # Project configuration\n├── codemods/         # Your codemod implementations\n├── jupyter/          # Jupyter notebooks for exploration\n└── codegen-system-prompt.txt  # AI system prompt\n```\n\n----------------------------------------\n\nTITLE: Configuring Cursor MCP Server for Codegen\nDESCRIPTION: Plain text configuration instructions for setting up Codegen as an MCP server in Cursor's Settings interface. Includes server name, type, and command configuration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/extensions/mcp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nName: codegen-mcp\nType: Command\nCommand: uv --directory <path to codegen installation>/codegen-sdk/src/codegen/cli/mcp run <codebase_agent.py | codebase_mods | codebase_tools>\n```\n\n----------------------------------------\n\nTITLE: Running the SQLAlchemy Migration with Codegen\nDESCRIPTION: Installation and execution commands for running the SQLAlchemy migration using Codegen. This requires installing the codegen package via pip and then executing the run.py script.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/sqlalchemy_1.6_to_2.0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen via UV Tool on Python 3.13\nDESCRIPTION: Shows the recommended method to install the Codegen library using the 'uv' package manager with Python 3.13. Assumes 'uv' is installed as a prerequisite and requires an environment with Python 3.13 available. Command installs the 'codegen' package for scripting and codebase manipulation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install codegen --python 3.13\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Release Tag\nDESCRIPTION: Git commands to checkout the develop branch, create a version tag, and push it to trigger a new release of Codegen.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit switch develop\ngit pull\ngit tag v0.YOUR_VERSION\ngit push origin v0.YOUR_VERSION\n```\n\n----------------------------------------\n\nTITLE: Executing Minecraft Actions via JS Code\nDESCRIPTION: This JavaScript snippet demonstrates how GPT-4 can perform a series of actions in Minecraft, such as gathering resources, by executing programs. The function uses APIs to control a bot within Minecraft, optimizing its operations beyond standard agent frameworks. Dependencies include a bot inventory and Minecraft data APIs. It inputs the current number of logs and outputs chat messages indicating the task's status.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/act-via-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example \"action program\" from Voyager, 2023\n//   written by gpt-4\nasync function chopSpruceLogs(bot) {\n  const spruceLogCount = bot.inventory.count(mcData.itemsByName.spruce_log.id);\n  const logsToMine = 3 - spruceLogCount;\n  if (logsToMine > 0) {\n    bot.chat(\"Chopping down spruce logs...\");\n    await mineBlock(bot, \"spruce_log\", logsToMine);\n    bot.chat(\"Chopped down 3 spruce logs.\");\n  } else {\n    bot.chat(\"Already have 3 spruce logs in inventory.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Python Recursion Limit\nDESCRIPTION: Python code to increase the recursion limit to prevent 'maximum recursion depth exceeded' errors when parsing large codebases.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsys.setrecursionlimit(10000)\n```\n\n----------------------------------------\n\nTITLE: Simple Name Replacement with YAML Rules in ast-grep\nDESCRIPTION: This YAML code snippet defines a rule for matching and replacing text using ast-grep, a fast and language-agnostic tool. It requires creating YAML rules for simple text transformations.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/codemod-frameworks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - pattern: old_name\n    replace: new_name\n```\n\n----------------------------------------\n\nTITLE: Directory Operations in Python Codegen\nDESCRIPTION: Illustrates directory manipulation operations including accessing metadata, managing subdirectories, and performing directory operations.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_72\n\nLANGUAGE: python\nCODE:\n```\n# Get a directory\ndir = codebase.get_directory(\"path/to/dir\")\n\n# Iterate over all directories in the codebase\nfor directory in codebase.directories:\n    print(f\"Found directory: {directory.path}\")\n\n# Check directory existence\nexists = codebase.has_directory(\"path/to/dir\")\n\n# Access metadata\nname = dir.name  # Directory name\npath = dir.path  # Full path\nparent = dir.parent  # Parent directory\n\n# Get specific items\nfile = dir.get_file(\"file.py\")\nsubdir = dir.get_subdirectory(\"subdir\")\n\n# Get all ancestor subdirectories\nsubdirs = dir.subdirectories\n\n# Get the parent directory\nparent_dir = dir.parent\n\n# Find all child directories\nfor subdir in dir.subdirectories:\n    if dir.parent == subdir:\n        print(f\"Found child subdirectory: {subdir.path}\")\n\n# Move to new location\ndir.update_filepath(\"new/path\")\n\n# Rename directory in place\ndir.rename(\"new_name\")\n\n# Remove a directory and all contents (potentially destructive)\ndir.remove()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Repository Structure After Creating Shadow Copies\nDESCRIPTION: Shows the directory structure after the Dependency Manager creates backup copies of all package.json files. Each original package.json has a corresponding .gs_internal.bak file for later restoration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/external/dependency-manager.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nrepo/\n├── package.json\n├── package.json.gs_internal.bak\n├── src/\n│   ├── frontend/\n│   │   └── package.json\n│   │   └── package.json.gs_internal.bak\n│   └── backend/\n│       └── package.json\n│       └── package.json.gs_internal.bak\n└── tests/\n    └── package.json\n    └── package.json.gs_internal.bak\n```\n\n----------------------------------------\n\nTITLE: Analyzing Method Parameters in Flask-RESTx\nDESCRIPTION: Code for analyzing request parameters and detecting JSON request body schemas.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/openapi_decorators/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexpect_schema = analyze_method_params(method)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Codegen Documentation for LLMs with Curl\nDESCRIPTION: Command to download and display the LLMs documentation index from the Codegen documentation site. This provides context for creating codegen codemods.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/codegen-mcp-server/llms-install.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL \"https://docs.codegen.com/llms.txt\" | cat\n```\n\n----------------------------------------\n\nTITLE: Installing UV in Bash\nDESCRIPTION: Downloads and executes the installation script for 'uv', a Python packaging tool, using curl and piped shell execution. No dependencies beyond curl and sh are required. This step is necessary for subsequent codegen installation steps; the script automatically determines your environment and installs the uv command globally.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Resetting Codebase State\nDESCRIPTION: Resets the codebase to its initial state, discarding any modifications that might have been made during processing.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/swebench_agent_run/local_run.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncodebase.reset()\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project Path in Bash\nDESCRIPTION: Navigates your shell to the local project directory where Codegen will be initialized. No dependencies. This directory should be a git repository or project of interest where codemods will be managed.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Example Function Context Structure in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the function context data generated by the get_function_context function. It includes the implementation, dependencies, and usages of a function.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_183\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"implementation\": {\n    \"source\": \"def process_data(input: str) -> dict: ...\",\n    \"filepath\": \"src/data_processor.py\"\n  },\n  \"dependencies\": [\n    {\n      \"source\": \"def validate_input(data: str) -> bool: ...\",\n      \"filepath\": \"src/validators.py\"\n    }\n  ],\n  \"usages\": [\n    {\n      \"source\": \"result = process_data(user_input)\",\n      \"filepath\": \"src/api.py\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Analytics - Codegen CLI - Bash\nDESCRIPTION: Provides Bash commands for installing the Codegen package via pip and running the repository analytics script. This step assumes Python and pip are installed. The commands output a comprehensive codebase analytics report and are necessary to initiate the workflow described in accompanying Python scripts.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/repo_analytics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\\npip install codegen\\n\\n# Run the analysis\\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Example of Dynamic Import in Python\nDESCRIPTION: A sample of a dynamic import in Python that is only evaluated when the containing function is called. This delayed import helps avoid circular dependency issues in some cases.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_238\n\nLANGUAGE: python\nCODE:\n```\n# dynamic import in quantizer.py\ndef some_func():\n    # dynamic import (evaluated when some_func() is called)\n    from APoT_tensor.py import objectB\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Graph Parsing in Python Codemod\nDESCRIPTION: Demonstrates how to enable lazy graph parsing using the exp_lazy_graph flag. This allows for delayed graph creation until it's needed, potentially improving performance for certain operations.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom codegen import Codebase\nfrom codegen.configs import CodebaseConfig\n\n# Enable lazy graph parsing\ncodebase = Codebase(\"<repo_path>\", config=CodebaseConfig(exp_lazy_graph=True))\n\n# The codebase object will be created immediately with no parsing done\n# These all do not require graph parsing\ncodebase.files\ncodebase.directories\ncodebase.get_file(\"...\")\n\n# These do require graph parsing, and will create the graph only if called\ncodebase.get_function(\"...\")\ncodebase.get_class(\"...\")\ncodebase.imports\n```\n\n----------------------------------------\n\nTITLE: Moving Exports to Public Files\nDESCRIPTION: Script that handles moving exports to public-facing files, including path resolution and file creation if needed.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_214\n\nLANGUAGE: python\nCODE:\n```\n# Replace \"src/\" with \"src/shared/\"\nresolved_public_file = export.resolved_symbol.filepath.replace(\"src/\", \"src/shared/\")\n\n# Get relative path from the \"public\" file back to the original file\nrelative_path = codebase.get_relative_path(\n    from_file=resolved_public_file,\n    to_file=export.resolved_symbol.filepath\n)\n\n# Ensure the \"public\" file exists\nif not codebase.has_file(resolved_public_file):\n    target_file = codebase.create_file(resolved_public_file, sync=True)\nelse:\n    target_file = codebase.get_file(resolved_public_file)\n\n# If target file already has a wildcard export for this relative path, skip\nif target_file.has_export_statement_for_path(relative_path, \"WILDCARD\"):\n    has_wildcard = True\n    continue\n```\n\n----------------------------------------\n\nTITLE: Running Symbol Attribution Analysis\nDESCRIPTION: Command to execute the symbol attribution analysis script in a repository. Generates comprehensive attribution analysis and saves results to JSON.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/symbol-attributions/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Repository Analyzer API (Bash)\nDESCRIPTION: Command to install the required Modal dependency using the uv package manager.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_analytics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv add modal\n```\n\n----------------------------------------\n\nTITLE: Initializing Codegen Project in Bash\nDESCRIPTION: Runs the 'codegen init' CLI command to generate a new .codegen/ configuration directory in your project. No required parameters; running this command sets up the codemod workspace, Python virtual environment, config file, and supporting structure. Dependencies: codegen must be installed and available in PATH.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncodegen init\n```\n\n----------------------------------------\n\nTITLE: Running the Python Migration Script\nDESCRIPTION: This bash snippet shows how to install Codegen and run the migration script. It assumes the presence of a 'run.py' file and a 'repo-before' directory containing Python files to be migrated.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/python2_to_python3/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Installation and Execution Commands in Bash\nDESCRIPTION: Shell commands for installing dependencies and running the various visualization scripts.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/visualize_codebases/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\npip install codegen networkx\n\n# Run any visualization script\npython call_trace.py      # Function call relationships\npython dependency_trace.py # Symbol dependencies\npython blast_radius.py    # Function blast radius\npython method_relationships.py  # Class method relationships\n```\n\n----------------------------------------\n\nTITLE: Example of Flask template rendering style\nDESCRIPTION: This shows the Flask style of template rendering where render_template is called with the template name and variables as separate arguments. This is the pattern that will be transformed in the migration process.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_260\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/users\")\ndef list_users():\n    return render_template(\"users.html\", users=users)\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen Tool with UV in Bash\nDESCRIPTION: Installs the Codegen CLI tool along with an isolated Python 3.13 environment using uv's 'tool install' command. Requires uv to be installed previously; installs codegen globally and manages its dependencies in a contained environment.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install codegen --python 3.13\n```\n\n----------------------------------------\n\nTITLE: Initializing Jupyter Environment and Loading SWEBench Modules\nDESCRIPTION: Sets up Jupyter notebook with autoreload extensions, loads environment variables, and imports necessary modules for SWEBench dataset manipulation and evaluation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/swebench_agent_run/local_run.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%load_ext autoreload\n%autoreload 2\n\nfrom dotenv import load_dotenv  # type: ignore\n\nload_dotenv()\n\nfrom codegen.extensions.swebench.utils import SWEBenchDataset, get_swe_bench_examples  # noqa: E402\nfrom run_eval import run_eval  # noqa: E402\n```\n\n----------------------------------------\n\nTITLE: Statement Wrapping Operations in Python\nDESCRIPTION: Demonstrates how to wrap and unwrap code blocks with new structures. Includes examples with with statements and function definitions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_105\n\nLANGUAGE: python\nCODE:\n```\n# Wrap code blocks with new structures\nfunction.code_block.wrap(\"with open('test.txt', 'w') as f:\")\n# Result:\n#   with open('test.txt', 'w') as f:\n#       original_code_here...\n\n# Wrap code in a function\nfile.code_block.wrap(\"def process_data(a, b):\")\n# Result:\n#   def process_data(a, b):\n#       original_code_here...\n\n# Unwrap code from its container\nif_block.code_block.unwrap()  # Removes the if statement but keeps its body\nwhile_loop.code_block.unwrap()  # Removes the while loop but keeps its body\n```\n\n----------------------------------------\n\nTITLE: Presenting Career and Community Links as CardGroup - React JSX\nDESCRIPTION: This code uses a CardGroup component with two Card children to present links to career opportunities and the community portal. Props for the CardGroup specify a two-column layout, while each Card receives a title, icon, and URL, along with descriptive child text. Dependencies include the Card and CardGroup React components, and it is designed for use within a React/Next.js page. Interactivity is limited to navigation when each card is clicked.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/about.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card title=\"Careers\" icon=\"briefcase\" href=\"https://codegen.com/careers\">\n    We're hiring! Join us in building the future of code transformation.\n  </Card>\n  <Card title=\"Community\" icon=\"people-group\" href=\"/introduction/community\">\n    Connect with other developers and share your Codegen experiences.\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Running Cyclomatic Complexity Analysis using Bash\nDESCRIPTION: Bash commands to install Codegen and run the cyclomatic complexity analysis script. These commands set up the environment and execute the analysis.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/cyclomatic_complexity/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the analysis\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Testing Repository Analyzer API with curl (Bash)\nDESCRIPTION: Example curl command to test the API by analyzing the FastAPI repository. The URL placeholder should be replaced with the actual Modal endpoint URL.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_analytics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"{URL}?repo_name=fastapi/fastapi\"\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen via Pipx\nDESCRIPTION: Illustrates installing the Codegen library with 'pipx', allowing isolated installation in a virtual environment. 'pipx' must be installed beforehand. This is an unofficial but generally compatible method for setting up Codegen for experimentation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npipx install codegen\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen using UV Package Manager in Bash\nDESCRIPTION: This command installs the Codegen library using the UV package manager, specifying Python 3.13 as the target version.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install codegen --python 3.13\n```\n\n----------------------------------------\n\nTITLE: PyCharm Interpreter Setup\nDESCRIPTION: In PyCharm, add an existing Python interpreter by specifying the path to Codegen's virtual environment to ensure compatibility with Codegen tools.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/ide-usage.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n.codegen/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Running the Python 2 to Python 3 Migration Script\nDESCRIPTION: Bash commands to clone the Codegen SDK repository and run the Python 2 to Python 3 migration example script.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_258\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/codegen-sh/codegen-sdk.git\ncd codegen-examples/examples/python2_to_python3\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies with UV for AI Impact Analysis Dashboard\nDESCRIPTION: Command sequence for creating a virtual environment and installing the required backend dependencies (modal, codegen, fastapi) using the UV package manager.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/dashboard/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\nuv pip install modal codegen fastapi\n```\n\n----------------------------------------\n\nTITLE: Running and Resetting Codemods\nDESCRIPTION: Execute codemods with 'codegen run' to apply changes and 'codegen reset' to revert changes, providing flexible manipulation of code structures.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/ide-usage.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Run => write changes to disk\ncodegen run organize-types\n\n# Reset changes on disk\ncodegen reset\n```\n\n----------------------------------------\n\nTITLE: Converting raw_input to input in Python 3\nDESCRIPTION: This snippet demonstrates how to replace the Python 2 raw_input() function with the Python 3 input() function for user input.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/python2_to_python3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# From:\nname = raw_input(\"Enter your name: \")\n\n# To:\nname = input(\"Enter your name: \")\n```\n\n----------------------------------------\n\nTITLE: Displaying Informational Note - React JSX\nDESCRIPTION: This snippet uses a Note component to present additional resources and contact information. The Note component wraps a block of markdown-formatted text containing links to a getting started guide and the community Slack. The component requires the Note React component and is intended for use in a React or Next.js documentation or marketing page. Links are rendered and clickable; markdown inside the Note is rendered as formatted text.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/about.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Note>\n  Want to learn more about what we're building? Check out our [getting started\n  guide](/introduction/getting-started) or join our [community\n  Slack](https://community.codegen.com).\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Python Function Call Chain Example and Its Tree-sitter CST Representation\nDESCRIPTION: Illustrates how a chain of function calls is represented as a deeply nested structure in tree-sitter, making it difficult for semantic analysis and edits.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/2. parsing/B. AST Construction.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\na().b().c().d()\n```\n\nLANGUAGE: text\nCODE:\n```\nmodule [0, 0] - [2, 0]\n  expression_statement [0, 0] - [0, 15]\n    call [0, 0] - [0, 15]\n      function: attribute [0, 0] - [0, 13]\n        object: call [0, 0] - [0, 11]\n          function: attribute [0, 0] - [0, 9]\n            object: call [0, 0] - [0, 7]\n              function: attribute [0, 0] - [0, 5]\n                object: call [0, 0] - [0, 3]\n                  function: identifier [0, 0] - [0, 1]\n                  arguments: argument_list [0, 1] - [0, 3]\n                attribute: identifier [0, 4] - [0, 5]\n              arguments: argument_list [0, 5] - [0, 7]\n            attribute: identifier [0, 8] - [0, 9]\n          arguments: argument_list [0, 9] - [0, 11]\n        attribute: identifier [0, 12] - [0, 13]\n      arguments: argument_list [0, 13] - [0, 15]\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for Repository Analyzer API (JSON)\nDESCRIPTION: Example of a successful JSON response from the API, including the status, error message (empty in this case), and repository metrics such as number of files, functions, and classes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_analytics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"error\": \"\",\n  \"num_files\": 123,\n  \"num_functions\": 456,\n  \"num_classes\": 78\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Codegen Context to IDE AI Assistants (Plaintext)\nDESCRIPTION: This example demonstrates how to provide context to IDE chat assistants (Copilot, Cursor, Windsurf) by mentioning both a specific codemod ('@.codegen/codemods/upgrade-react18') and the general Codegen system prompt file ('@.codegen/prompts/system-prompt.md') in the composer mode. This helps the AI understand Codegen's APIs and common patterns.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/work-with-ai.mdx#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n@.codegen/codemods/upgrade-react18 @.codegen/prompts/system-prompt.md\n```\n\n----------------------------------------\n\nTITLE: Querying IDE AI Assistant with Codemod Context (Plaintext)\nDESCRIPTION: This shows an example query for an IDE-based AI assistant (like Copilot, Cursor, or Windsurf). By referencing the specific codemod ('@codegen-sh/codemods/modernize-components'), the user asks for help regarding a specific part of the transformation ('componentDidMount'), ensuring the AI provides contextually relevant advice. This is the third step in the example workflow.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/work-with-ai.mdx#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n@codegen-sh/codemods/modernize-components How should I handle\ncomponentDidMount?\n```\n\n----------------------------------------\n\nTITLE: Illustrating a Basic Python Import Loop\nDESCRIPTION: Shows a minimal example where `module_a.py` imports from `module_b.py`, and `module_b.py` imports from `module_a.py`, creating a direct circular dependency. This demonstrates the concept of import loops discussed in the text.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/fixing-import-loops.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# module_a.py\nfrom module_b import function_b\n\n# module_b.py\nfrom module_a import function_a\n```\n\n----------------------------------------\n\nTITLE: Example Iterator Class Before Python 3 Migration\nDESCRIPTION: Sample code showing a Python 2 iterator class with a next() method for iteration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_256\n\nLANGUAGE: python\nCODE:\n```\nclass MyIterator:\n    def next(self):\n        return self.value\n```\n\n----------------------------------------\n\nTITLE: Validating RunCodemodOutput Model with Invalid Data in Python\nDESCRIPTION: This code attempts to validate a RunCodemodOutput model with invalid data where the 'success' field is a string ('testz') instead of the expected boolean type. This should trigger a validation error when executed.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/utils/schema.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# with model that should validate\nfrom codegen.cli.api.schemas import RunCodemodOutput\n\n\nres = RunCodemodOutput.model_validate(\n    {\n        \"success\": \"testz\",\n        \"web_link\": \"https://chadcode.sh/codemod/13264/code/21435/run/28349/playground/diff\",\n        \"logs\": \"\",\n        \"observation\": 'diff --git a/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py b/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py\\nindex 2dce963196b418caad011d175fb3110e03a8fe73..77c430a5acfb1613ac42c5712cc2859f31d7d773 100644\\n--- a/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py\\n+++ b/codegen-backend/app/utils/slack/interactive/handlers/BaseSlackActionHandler.py\\n@@ -1,12 +1,1 @@\\n-from sqlalchemy.orm import Session\\n-\\n-\\n-class BaseSlackInteractiveActionHandler:\\n-    db: Session\\n-\\n-    def __init__(self, db: Session) -> None:\\n-        self.db = db\\n-\\n-    # TODO: convert the message information into a shared schema\\n-    def process_action(self, action_payload: str, channel_id: str, thread_ts: str):\\n-        raise NotImplementedError(f\"process_action not implemented for {self.__class__.__name__}!\")\\n+update\\n\\\\ No newline at end of file\\n',\n    },\n)\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Running the Migration Script with Bash\nDESCRIPTION: Commands for installing Codegen and running the migration script.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/openapi_decorators/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Converted Async/Await Function with Anonymous Function in TypeScript\nDESCRIPTION: The resulting TypeScript code after conversion, showing how Codegen handles ambiguous returns by creating an anonymous function to preserve the original logic flow.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_201\n\nLANGUAGE: typescript\nCODE:\n```\n// After\nasync function create(opts): Promise<any> {\n\tlet qResponse = request(opts);\n\tlet response = await qResponse;\n\tqResponse = (async (response) => {\n\t\tif (response.statusCode < 200 || response.statusCode >= 300) {\n\t\t\tthrow new Error(JSON.stringify(response));\n\t\t}\n\t\tif (typeof response.body === \"string\") {\n\t\t\treturn JSON.parse(response.body);\n\t\t}\n\t\treturn response.body;\n\t})(response);\n\n\treturn qResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Link Constants for Community Resources in MDX - JavaScript\nDESCRIPTION: This snippet demonstrates importing link constants for the community Slack and GitHub URLs from an external MDX snippet file. The imported constants can be used dynamically throughout the MDX document to ensure that resource links remain centralized and maintainable. Dependencies: The '/snippets/links.mdx' file must export the named constants 'COMMUNITY_SLACK_URL' and 'CODEGEN_SDK_GITHUB_URL'. The expected output is that both constants will be available in the MDX scope for referencing in link components. No parameters are required.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/community.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  COMMUNITY_SLACK_URL,\n  CODEGEN_SDK_GITHUB_URL,\n} from \"/snippets/links.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Reinitializing Codebase with Local Path\nDESCRIPTION: Reinitializes the codebase using a local file path to the Twilio Node.js repository. This allows working with a local copy of the repository for further modifications or analysis.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/convert_promises_twilio_repository.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncodebase = Codebase(\"/Users/tawsifkamal/Documents/codegen-repos/twilio-node\", programming_language=ProgrammingLanguage.TYPESCRIPT)\n```\n\n----------------------------------------\n\nTITLE: Running the AI Impact Analysis Script with Bash\nDESCRIPTION: A simple Bash command to execute the Python script that performs the AI impact analysis on a codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Defining Test Case Folder Structure\nDESCRIPTION: Specifies the folder structure for creating test cases within the codemod folder. Each test case is named with a 'test_' prefix followed by the repository name.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codemods/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`{codemod_folder}/test_{repo_name}`\n```\n\n----------------------------------------\n\nTITLE: Creating a React Modernization Codemod (Bash)\nDESCRIPTION: This command demonstrates creating a codemod named 'modernize-components' using the Codegen CLI. The description specifies the goal of converting React class components to functional components using hooks. This is the first step in the example workflow.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/work-with-ai.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncodegen create modernize-components . --description \"Convert class components to functional components with hooks\"\n```\n\n----------------------------------------\n\nTITLE: Module Import in TypeScript\nDESCRIPTION: Shows how import statements need to be resolved to module definitions in TypeScript, using the require function.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/E. Function Calls.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrequire('foo')\n```\n\n----------------------------------------\n\nTITLE: Starting the Codegen Slack Bot Using Modal in Bash\nDESCRIPTION: Launches the Slack bot using Modal's serverless platform. This command starts the bot locally for testing or development purposes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/slack_chatbot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmodal serve api.py\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify and Running Dev Server for Codegen Docs\nDESCRIPTION: This snippet shows how to install Mintlify globally and start the development server for Codegen documentation. It specifies the port to use and enables hot reloading.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\nmintlify dev --port 3333\n```\n\n----------------------------------------\n\nTITLE: Fallback to Default Configuration When ENV-Specific File Is Missing\nDESCRIPTION: This snippet tests the fallback mechanism when a specific environment file doesn't exist. It sets ENV to 'staging', but when .env.staging doesn't exist, it should fall back to using the default .env file for configuration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/env/global_env.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# test: ENV=staging and .env.staging does not exist loads from .env\nimport os\n\nos.environ[\"ENV\"] = \"staging\"\nfrom codegen.cli.env.global_env import GlobalEnv\n\nglobal_env = GlobalEnv()\nprint(global_env.ALGOLIA_SEARCH_KEY)\n```\n\n----------------------------------------\n\nTITLE: Example Unicode Usage Before Python 3 Migration\nDESCRIPTION: Sample code showing Python 2 Unicode usage with the unicode() function and u prefix string literals.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_247\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import unicode_literals\ntext = unicode(\"Hello\")\nprefix = u\"prefix\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP for Codegen Integration\nDESCRIPTION: Example MCP configuration in JSON format for integrating the Codegen MCP server with Cline or Claude desktop. It specifies the command and arguments to run the server, along with other settings.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/codegen-mcp-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"codegen-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/codegen-sh/codegen-sdk.git#egg=codegen-mcp-server&subdirectory=codegen-examples/examples/codegen-mcp-server\",\n        \"codegen-mcp-server\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Codegen RAG Q&A API Server\nDESCRIPTION: This command starts the API server using Modal, running the 'api.py' file.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_rag/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmodal serve api.py\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies for AI Impact Analysis Dashboard\nDESCRIPTION: Commands to navigate to the frontend directory and install the required npm packages for the Next.js frontend application.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/dashboard/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Codegen Projects\nDESCRIPTION: Shows the standard file organization pattern for Codegen examples, including README.md for documentation, run.py for implementation, and an optional input_repo directory for sample code.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/STRUCTURE.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexample-name/\n├── README.md        # Documentation and usage examples\n├── run.py          # Main implementation\n└── input_repo/    # (Optional) Sample code for transformation\n```\n\n----------------------------------------\n\nTITLE: Using tree-sitter for JavaScript Code Parsing\nDESCRIPTION: This JavaScript snippet demonstrates using tree-sitter to parse JavaScript code for analysis. It requires Node.js and tree-sitter's language-specific grammars.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/codemod-frameworks.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Parser = require(\"tree-sitter\");\nconst JavaScript = require(\"tree-sitter-javascript\");\n\nconst parser = new Parser();\nparser.setLanguage(JavaScript);\nconst tree = parser.parse('console.log(\"Hello\")');\n```\n\n----------------------------------------\n\nTITLE: Defining a UI Attribute Component in React JavaScript\nDESCRIPTION: This code snippet defines a React component named 'Attribute' that takes 'type' and 'description' as props and renders them within styled HTML elements. The component is designed for use in a React application to display attribute information with specific styles. No external dependencies are explicitly required as this is a basic React component. The expected input is an object with 'type' and 'description' properties, and the output is a JSX representation of the attribute component.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/snippets/Attribute.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const Attribute = ({ type, description }) => (\n  <div className=\"pl-4 py-6 first:pt-3 dark:border-zinc-300/[0.06] text-sm font-normal\">\n    <div className=\"inline-grid grid-cols-[auto_auto] gap-1 font-mono py-2\">\n      {type}\n    </div>\n    <p className=\"mt-2\">{description}</p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Providing an Access Permissions Note Component (JSX)\nDESCRIPTION: This JSX snippet uses a <Note> component to inform users about the scope of API access permissions for the Linear integration. It explains that agents' actions are limited by the user's Linear permissions. The snippet requires a React-like framework and definitions for the Note component. The main parameter is the note content, which should clarify operational boundaries for users.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/integrations/linear.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Note>\n  API access allows agents to interact with issues and projects according to\n  your permissions in Linear.\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Running the Migration Script using Bash\nDESCRIPTION: This bash snippet shows the commands to install Codegen and run the migration script. It assumes the migration script is named 'run.py' in the current directory.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/freezegun_to_timemachine_migration/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n# Run the migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Running MCP Server in Cursor\nDESCRIPTION: Add a new MCP server in Cursor settings by specifying the name, type, and command to run the server, enabling local server interactions with Codegen.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/ide-usage.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv --directory <path to codegen installation>/codegen-sdk/src/codegen/cli/mcp run server.py\n```\n\n----------------------------------------\n\nTITLE: Example String Type After Python 3 Migration\nDESCRIPTION: Sample code showing how Unicode-related code is updated for Python 3, using the unified string type and removing u prefixes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_248\n\nLANGUAGE: python\nCODE:\n```\ntext = str(\"Hello\")\nprefix = \"prefix\"\n```\n\n----------------------------------------\n\nTITLE: Updating API Endpoint URL in Frontend Component\nDESCRIPTION: JavaScript fetch code snippet that needs to be modified to point to the deployed Modal endpoint. This is used to send repository analysis requests to the backend.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/dashboard/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfetch(`[your-modal-deployment-url]/analyze?repo_full_name=${repoFullName}`, {\n    method: 'POST',\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Codegen Slack Bot in Bash\nDESCRIPTION: Creates a copy of the environment template file that should be filled with necessary tokens including Slack Bot User OAuth Token, Slack Signing Secret, and OpenAI API key.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/slack_chatbot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Copy template and fill in your tokens\ncp .env.template .env\n```\n\n----------------------------------------\n\nTITLE: Reporting Promise Chain Matches - Bash\nDESCRIPTION: This Bash command outputs the results of the Python promise-finding script, reporting how many Promise chains were found and how many unique files contained them. There are no input parameters as it's a static print statement—outputs are two lines, one counting the chains and one the files. Intended primarily for summary reporting and debugging script results.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/blog/promise-to-async-await-twilio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nFound 592 Promise chains\nAcross 393 files\n```\n\n----------------------------------------\n\nTITLE: Color Palette Configuration in Python\nDESCRIPTION: Defines color coding for different types of nodes in the visualization graphs, including entry points, regular functions, classes, and external calls.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/visualize_codebases/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCOLOR_PALETTE = {\n    \"StartFunction\": \"#9cdcfe\",  # Entry point\n    \"PyFunction\": \"#a277ff\",  # Regular functions\n    \"PyClass\": \"#ffca85\",  # Classes\n    \"ExternalModule\": \"#f694ff\",  # External calls\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Codegen RAG Q&A API with cURL\nDESCRIPTION: This cURL command demonstrates how to make a POST request to the API endpoint for answering code questions. It includes the repository name and a sample query.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_rag/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"http://localhost:8000/answer_code_question\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"repo_name\": \"fastapi/fastapi\",\n    \"query\": \"How does FastAPI handle dependency injection?\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Displaying Company Card - React JSX\nDESCRIPTION: This snippet renders a Card component in JSX to display company information including an image, title, and a link to the company website. It requires the Card React component to be imported and expects props such as 'img', 'title', and 'href'. The Card is intended for use within a React or Next.js project to visually present sectioned information. No input beyond the set props is required; clicking the card navigates to the specified URL.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/about.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Card\n  img=\"/images/codegen.jpeg\"\n  title=\"Codegen, Inc.\"\n  href=\"https://codegen.com\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cursor MCP Server Settings\nDESCRIPTION: Command-line configuration for setting up the Codegen MCP server in Cursor's settings interface. Specifies the server name, type, and command path.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/mcp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nName: codegen-mcp\nType: Command\nCommand: uv --directory <path to codegen installation>/codegen-sdk/src/codegen/cli/mcp run server.py\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for Repository Analyzer API (JSON)\nDESCRIPTION: Example of an error JSON response from the API, including the error status, error message, and zero values for repository metrics.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_analytics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"error\",\n  \"error\": \"Error message here\",\n  \"num_files\": 0,\n  \"num_functions\": 0,\n  \"num_classes\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Repository Analyzer API Changes (Bash)\nDESCRIPTION: Command to deploy changes to the Repository Analyzer API using Modal, specifying the path to the Python file containing the API implementation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_analytics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmodal deploy src/codegen/extensions/modal/api.py\n```\n\n----------------------------------------\n\nTITLE: Response Decorator Example in Flask-RESTx\nDESCRIPTION: Example showing how response decorators are added to Flask-RESTx endpoints, demonstrating before and after migration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/openapi_decorators/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Before\n@ns.route(\"/endpoint\")\nclass MyResource(Resource):\n    def get(self):\n        return {\"data\": result}\n\n\n# After\n@ns.route(\"/endpoint\")\nclass MyResource(Resource):\n    @ns.response(200, \"Success\", {\"data\": {\"type\": \"any\"}})\n    def get(self):\n        return {\"data\": result}\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Frontend Development Server\nDESCRIPTION: Command to start the frontend development server, making the dashboard accessible in a web browser, typically at http://localhost:3000.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/dashboard/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Codegen Slack Bot in Bash\nDESCRIPTION: Installs the required Python packages for running the Codegen Slack bot. These include modal-client for serverless deployment, codegen for code analysis, slack-bolt for Slack integration, and openai for accessing AI capabilities.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/slack_chatbot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install modal-client codegen slack-bolt openai\n```\n\n----------------------------------------\n\nTITLE: Displaying Informational Note (JSX/MDX)\nDESCRIPTION: Uses a custom 'Note' component to highlight important information or calls to action. In this case, it directs readers to the getting started guide and the community Slack, embedding standard Markdown links within the component's content.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/about.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Note>\n  Want to learn more about what we're building? Check out our [getting started\n  guide](/introduction/getting-started) or join our [community\n  Slack](https://community.codegen.com).\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Defining Dangerous Builtins in Python\nDESCRIPTION: Creates a set of Python built-in functions and modules that are considered dangerous for user-provided code execution. This list includes functions that could potentially harm the system or access sensitive information.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/shared/compilation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nDANGEROUS_BUILTINS = {\n    '__import__',\n    'eval',\n    'exec',\n    'globals',\n    'locals',\n    'open',\n    'vars',\n    'breakpoint',\n    'memoryview',\n    'compile',\n}\n```\n\n----------------------------------------\n\nTITLE: Checking File Types in Python\nDESCRIPTION: Demonstrates how to check whether a file is a SourceFile or a non-code File using Python's isinstance function.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_64\n\nLANGUAGE: python\nCODE:\n```\npy_file = codebase.get_file(\"path/to/file.py\")\nif isinstance(py_file, SourceFile):\n    print(f\"File {py_file.filepath} is a source file\")\n\n# prints: `File path/to/file.py is a source file`\n\nmdx_file = codebase.get_file(\"path/to/file.mdx\")\nif not isinstance(mdx_file, SourceFile):\n    print(f\"File {mdx_file.filepath} is a non-code file\")\n\n# prints: `File path/to/file.mdx is a non-code file`\n```\n\n----------------------------------------\n\nTITLE: Displaying Social Links as CardGroup - React JSX\nDESCRIPTION: This snippet creates a CardGroup with two Card components to display links to Codegen's X (Twitter) and LinkedIn profiles. Each Card includes an appropriate icon, title, link, and child text for descriptive purposes. Use of this snippet requires Card and CardGroup components in a compatible React or Next.js project. Clicking each card directs the user to the corresponding social media profile.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/about.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card title=\"X (Twitter)\" icon=\"twitter\" href=\"https://x.com/codegen\">\n    Follow us for updates and announcements\n  </Card>\n  <Card\n    title=\"LinkedIn\"\n    icon=\"linkedin\"\n    href=\"https://linkedin.com/company/codegen-dot-com\"\n  >\n    Connect with our team and stay updated on company news\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Displaying Codegen Directory Structure in Bash\nDESCRIPTION: Shows the directory structure of a Codegen project using a tree-like representation in Bash. This structure includes the virtual environment, configuration file, codemods directory, Jupyter notebooks, and system prompt file.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n.codegen/\n├── .venv/            # Python virtual environment (gitignored)\n├── config.toml       # Project configuration\n├── codemods/         # Your codemod implementations\n├── jupyter/          # Jupyter notebooks for exploration\n└── codegen-system-prompt.txt  # AI system prompt\n```\n\n----------------------------------------\n\nTITLE: Rendering a Connection Card Component with Link (JSX)\nDESCRIPTION: This snippet demonstrates how to render a card UI component in JSX that guides users to connect their Linear workspace. Using a <Card> element, it specifies the title, icon, and link for authorization. To function, this requires the Card component (possibly from a UI library) and a JavaScript/React environment capable of rendering JSX. The main parameters include 'title', 'icon', and 'href' to control the display and action.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/integrations/linear.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Card\n  title=\"Connect Linear Workspace\"\n  icon=\"pencil\"\n  href=\"https://linear.app/integrations/codegen\"\n>\n  Authorize Codegen to access your Linear workspace via the API settings.\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Codegen RAG Q&A API Request Body Format\nDESCRIPTION: This JSON snippet shows the expected format for the request body when making a POST request to the '/answer_code_question' endpoint. It includes the 'repo_name' and 'query' fields.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_rag/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"repo_name\": \"owner/repo\",\n  \"query\": \"Your question about the code\"\n}\n```\n\n----------------------------------------\n\nTITLE: Request Expect Decorator Example in Flask-RESTx\nDESCRIPTION: Example showing how request expect decorators are added to Flask-RESTx endpoints, demonstrating before and after migration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/openapi_decorators/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Before\n@ns.route(\"/endpoint\")\nclass MyResource(Resource):\n    def post(self):\n        data = request.json[\"name\"]\n        return {\"status\": \"success\"}\n\n\n# After\n@ns.route(\"/endpoint\")\nclass MyResource(Resource):\n    @ns.expect({\"name\": {\"type\": \"any\", \"required\": True}})\n    @ns.response(200, \"Success\", {\"status\": {\"type\": \"any\"}})\n    def post(self):\n        data = request.json[\"name\"]\n        return {\"status\": \"success\"}\n```\n\n----------------------------------------\n\nTITLE: Running a Deployed Codegen Function in Bash\nDESCRIPTION: Demonstrates the CLI command to run a deployed Codegen function. This example runs a function named 'my-function' using the codegen run command.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncodegen run my-function\n```\n\n----------------------------------------\n\nTITLE: Commented Agent Execution\nDESCRIPTION: Contains commented code for running the CodeAgent with the specified prompt to generate the Notion integration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/swebench_agent_run/local_run.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# agent.run(prompt)\n```\n\n----------------------------------------\n\nTITLE: Grouping Social Media Link Cards (JSX/MDX)\nDESCRIPTION: Utilizes a 'CardGroup' component with 'cols={2}' to display two social media links (X/Twitter and LinkedIn) using nested 'Card' components. Each 'Card' uses 'title', 'icon', and 'href' props to render the link and associated descriptive text.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/about.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card title=\"X (Twitter)\" icon=\"twitter\" href=\"https://x.com/codegen\">\n    Follow us for updates and announcements\n  </Card>\n  <Card\n    title=\"LinkedIn\"\n    icon=\"linkedin\"\n    href=\"https://linkedin.com/company/codegen-dot-com\"\n  >\n    Connect with our team and stay updated on company news\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Deploying Codegen RAG Q&A API Changes\nDESCRIPTION: This command deploys changes to the Codegen RAG Q&A API using Modal, updating the 'api.py' file.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/modal_repo_rag/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmodal deploy api.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Divider React Component with Optional Light Styling (JavaScript/JSX)\nDESCRIPTION: This React functional component, `HorizontalDivider`, renders a horizontal divider element using nested `div` elements styled with Tailwind CSS's `divide-y` utility. It accepts an optional boolean prop `light` (defaulting to `false`). If `light` is true, a lighter border color is applied in dark mode (`dark:border-zinc-300/[0.06]`); otherwise, a default darker border color (`border-zinc-600`) is used. This component is intended for use within React applications to visually separate content sections.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/snippets/HorizontalDivider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const HorizontalDivider = ({light=false}) => (\n    <div className=\"divide-y\">\n        <div className={`divide-y ${light ? \"dark:border-zinc-300/[0.06]\" : \"border-zinc-600\"}`}></div>\n        <div className={`divide-y ${light ? \"dark:border-zinc-300/[0.06]\" : \"border-zinc-600\"}`}></div>\n    </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring a GET Endpoint in OpenAPI - YAML\nDESCRIPTION: This snippet declares an OpenAPI GET endpoint for retrieving a user belonging to a specific organization. It uses OpenAPI syntax to define the HTTP method and parameterized URI, enabling tools and services to automatically generate API documentation or clients. This specification requires OpenAPI tooling to interpret, must be placed inside an OpenAPI document, and expects dynamic path parameters \\'org_id\\' and \\'user_id\\'. The operation definition itself is minimal here and may require further schema, response, and request parameter specification.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/users/get-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nopenapi: get /v1/organizations/{org_id}/users/{user_id}\\n---\n```\n\n----------------------------------------\n\nTITLE: Tree-sitter Parse Tree for Chained Attribute Call\nDESCRIPTION: The parse tree output from tree-sitter showing how the Python code is broken down into syntactic components, particularly focusing on how the chained attribute call 'a.foo()' is represented.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/4. type-analysis/D. Chained Attributes.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule [0, 0] - [5, 0]\n  class_definition [0, 0] - [2, 11]\n    name: identifier [0, 6] - [0, 9]\n    body: block [1, 4] - [2, 11]\n      function_definition [1, 4] - [2, 11]\n        name: identifier [1, 8] - [1, 11]\n        parameters: parameters [1, 11] - [1, 17]\n          identifier [1, 12] - [1, 16]\n        body: block [2, 8] - [2, 11]\n          expression_statement [2, 8] - [2, 11]\n            ellipsis [2, 8] - [2, 11]\n  expression_statement [3, 0] - [3, 9]\n    assignment [3, 0] - [3, 9]\n      left: identifier [3, 0] - [3, 1]\n      right: call [3, 4] - [3, 9]\n        function: identifier [3, 4] - [3, 7]\n        arguments: argument_list [3, 7] - [3, 9]\n  expression_statement [4, 0] - [4, 7]\n    call [4, 0] - [4, 7]\n      function: attribute [4, 0] - [4, 5]\n        object: identifier [4, 0] - [4, 1]\n        attribute: identifier [4, 2] - [4, 5]\n      arguments: argument_list [4, 5] - [4, 7]\n```\n\n----------------------------------------\n\nTITLE: MCP Server Configuration for Cline\nDESCRIPTION: Configure Cline to interact with MCP server using a cline_mcp_settings.json file, facilitating interaction with Codegen CLI tools through command execution.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/ide-usage.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"codegen-cli\": {\n        \"command\": \"uv\",\n        \"args\": [\n            \"--directory\",\n            \"<path to codegen installation>/codegen-sdk/src/codegen/cli/mcp\",\n            \"run\",\n            \"server.py\"\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Codegen with Bash\nDESCRIPTION: Commands for installing the Codegen package and running the data generation script.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/generate_training_data/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n\n# Run the data generation\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Inheritance Modification\nDESCRIPTION: Demonstrates how to modify class inheritance relationships by changing parent classes.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_82\n\nLANGUAGE: python\nCODE:\n```\n# Modify inheritance\nparent_names = class_def.parent_class_names\nif parent_names[0] == 'BaseClass':\n    parent_names[0].edit(\"NewBaseClass\")  # Change parent class\n\n# Get specific parent class\nparent_class = class_def.get_parent_class(\"BaseClass\")\nif parent_class:\n    parent_class.edit(\"NewBaseClass\")  # Change parent class\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Codegen Project\nDESCRIPTION: Demonstrates the standard pattern for import statements at the top of a Codegen example file, including the main Codegen library and related modules.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/STRUCTURE.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport codegen\nfrom codegen import Codebase\nfrom codegen.sdk.core import Function\n# ... other imports\n```\n\n----------------------------------------\n\nTITLE: Commented CodeAgent Initialization\nDESCRIPTION: Contains commented code for initializing a CodeAgent with the prepared codebase, using Claude 3.5 Sonnet as the model and Anthropic as the provider.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/swebench_agent_run/local_run.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# from codegen.agents.code_agent import CodeAgent\n\n# agent = CodeAgent(codebase=codebase, tags=[\"local_test\"], model_name=\"claude-3-5-sonnet-latest\", model_provider=\"anthropic\")\n```\n\n----------------------------------------\n\nTITLE: Grouping Related Link Cards (JSX/MDX)\nDESCRIPTION: Uses a 'CardGroup' component to arrange two 'Card' components side-by-side (indicated by 'cols={2}'). Each 'Card' represents a link, one for 'Careers' and one for the 'Community', using 'title', 'icon', and 'href' props, along with descriptive text content.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/introduction/about.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card title=\"Careers\" icon=\"briefcase\" href=\"https://codegen.com/careers\">\n    We're hiring! Join us in building the future of code transformation.\n  </Card>\n  <Card title=\"Community\" icon=\"people-group\" href=\"/introduction/community\">\n    Connect with other developers and share your Codegen experiences.\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Rendering Component in React - JavaScript\nDESCRIPTION: This snippet defines a functional React component named ParameterWrapper. It wraps its children in a styled div that includes headings and divides content sections. It requires React and JSX syntax enabled and is typically used to standardize the appearance of parameter sections in a UI. It accepts 'children' as a prop and doesn't directly interact with any other dependencies beyond basic styling.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/snippets/ParameterWrapper.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const ParameterWrapper = ({ children }) => (\n  <div className=\\\"pl-6 divide-y\\\">\n    <h4 className=\\\"font-bold\\\">Parameters</h4>\n    <div className=\\\"divide-y dark:border-zinc-300/[0.06]\\\">\n      {children}\n    </div>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Example Structure for Custom Input Repository\nDESCRIPTION: Shows the file organization pattern for creating a custom input repository when a specific code structure is needed for Codegen examples.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/STRUCTURE.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nexample-name/\n├── README.md\n├── run.py\n└── input_repo/     # Your minimal example code\n    ├── app.py\n    └── utils.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Codegen Project\nDESCRIPTION: Displays the recommended .gitignore entries for a Codegen project. It excludes the virtual environment, documentation, Jupyter notebooks, and system prompt file from version control.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_44\n\nLANGUAGE: gitignore\nCODE:\n```\n# Codegen\n.codegen/.venv/\n.codegen/docs/\n.codegen/jupyter/\n.codegen/codegen-system-prompt.txt\n```\n\n----------------------------------------\n\nTITLE: Example of Forward Transaction Application (Problematic)\nDESCRIPTION: Demonstrates how applying file operations in forward order can lead to invalid results due to changing byte positions. This example shows removing and inserting text at specific byte positions.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/5. performing-edits/B. Transaction Manager.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nOriginal: FooBar\nOperations: Remove \"Foo\" (bytes 0-3), Insert \"Hello\" (bytes 0-5)\n            Remove \"Bar\" (bytes 3-6), Insert \"World\" (bytes 3-7)\n```\n\n----------------------------------------\n\nTITLE: Deploying the Modal Backend for AI Impact Analysis Dashboard\nDESCRIPTION: Command to deploy the Modal backend to production. This creates a publicly accessible endpoint for the analysis API.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/dashboard/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmodal deploy backend/api.py\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Export Consolidation in TypeScript\nDESCRIPTION: This snippet illustrates how the script consolidates multiple export files into a single shared export. It shows the before state with separate exports and the after state with a consolidated export.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/reexport_management/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Before: Multiple export files\nexport { foo } from './foo';\nexport { bar } from './bar';\n\n// After: Consolidated in shared\nexport * from '../functions';\n```\n\n----------------------------------------\n\nTITLE: Serving the Modal Backend for AI Impact Analysis Dashboard\nDESCRIPTION: Command to serve the Modal endpoint locally for development purposes. This makes the backend API available for local testing.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/ai_impact_analysis/dashboard/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmodal serve backend/api.py\n```\n\n----------------------------------------\n\nTITLE: Exporting Project Resource URLs in JavaScript\nDESCRIPTION: This snippet exports four constant URL strings representing key resources used in the Codegen project, including the community Slack, SDK GitHub, example repos, and system prompt location. Dependencies are limited to ES module compatibility; no external libraries are required. Each URL is exported using the 'export const' JavaScript syntax for use in other modules, providing a centralized, consistent reference point and reducing the need to hardcode links elsewhere.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/snippets/links.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const COMMUNITY_SLACK_URL = \"https://community.codegen.com\";\n\nexport const CODEGEN_SDK_GITHUB_URL =\n  \"https://github.com/codegen-sh/codegen-sdk\";\n\nexport const CODEGEN_SDK_EXAMPLES_GITHUB_URL =\n  \"https://github.com/codegen-sh/codegen-examples\";\n\nexport const CODEGEN_SYSTEM_PROMPT = \"https://raw.githubusercontent.com/codegen-sh/codegen-sdk/refs/heads/develop/src/codegen/sdk/system-prompt.txt\"\n```\n\n----------------------------------------\n\nTITLE: Example of Top-Level Import in Python\nDESCRIPTION: A simple example showing a top-level (static) import in Python. This represents a direct dependency that is loaded when the module is imported.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_237\n\nLANGUAGE: python\nCODE:\n```\n# top level import in in APoT_tensor.py\nfrom quantizer.py import objectA\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen using Pipx in Bash\nDESCRIPTION: This command installs the Codegen library using Pipx, an alternative package manager for Python. Note that this method is not officially supported by Codegen.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npipx install codegen\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Output Folder Structure\nDESCRIPTION: Specifies the folder structure for storing expected output files for test cases. The expected files are placed in an 'expected' subfolder within the test case folder.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codemods/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`{codemod_folder}/test_{repo_name}/expected`\n```\n\n----------------------------------------\n\nTITLE: Import Management for React Query\nDESCRIPTION: Code to handle the addition of necessary React Query imports. Manages import statements while preserving existing structure and handling deduplication.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/usesuspensequery_to_usesuspensequeries/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport_str = \"import { useQuery, useSuspenseQueries } from '@tanstack/react-query'\"\nfile.add_import(import_str)\n```\n\n----------------------------------------\n\nTITLE: Deploying the GitHub Integration App with Modal\nDESCRIPTION: This bash command deploys the application using Modal, after which the GitHub App's webhook URL needs to be configured to point to the Modal endpoint for processing GitHub events.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/github_checks/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmodal deploy app.py\n```\n\n----------------------------------------\n\nTITLE: Resetting Codebase Formatting\nDESCRIPTION: Resets the codebase formatting after making changes. This step prepares for further operations or a clean state of the codebase.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/promises_to_async_await/convert_promises_twilio_repository.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# reset the formatting\ncodebase.reset()\n```\n\n----------------------------------------\n\nTITLE: Updating UV to Fix Package Error\nDESCRIPTION: Command to update UV to the latest version to resolve errors related to [[ packages ]] in Codegen.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nuv self update\n```\n\n----------------------------------------\n\nTITLE: Example Iterator Class After Python 3 Migration\nDESCRIPTION: Sample code showing a Python 3 iterator class with the __next__() method for iteration.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_257\n\nLANGUAGE: python\nCODE:\n```\nclass MyIterator:\n    def __next__(self):\n        return self.value\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition for GET Agent Run Endpoint in YAML\nDESCRIPTION: OpenAPI specification for the endpoint to retrieve agent run details. The path requires organization ID and agent run ID parameters in the URL path.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/agents/get-agent-run.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/organizations/{org_id}/agent/run/{agent_run_id}\n```\n\n----------------------------------------\n\nTITLE: Example Exception Handling After Python 3 Migration\nDESCRIPTION: Sample code showing Python 3's exception handling syntax using the 'as' keyword to assign the exception to a variable.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_254\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    process_data()\nexcept ValueError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Example input Usage After Python 3 Migration\nDESCRIPTION: Sample code showing how Python 2's raw_input() is converted to Python 3's input() function.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/sdk/system-prompt.txt#2025-04-22_snippet_251\n\nLANGUAGE: python\nCODE:\n```\nname = input(\"Enter your name: \")\n```\n\n----------------------------------------\n\nTITLE: Defining the Parameter React Component in JavaScript (JSX)\nDESCRIPTION: This React functional component, `Parameter`, renders details about a specific parameter. It accepts `name`, `type`, `description`, and an optional `defaultValue` as props. The component utilizes Tailwind CSS for styling and displays the parameter's name, type, and description, indicating whether it's 'required' or showing its 'default' value if provided.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/snippets/Parameter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Parameter = ({name, type, description, defaultValue}) => (\n  <div className=\"py-6 first:pt-3 dark:border-zinc-300/[0.06] text-sm font-normal\">\n    <div className=\"flex justify-between items-start font-mono\">\n      <div className=\"flex gap-4 items-start\">\n        <div className=\"flex gap-1 items-center text-sm text-primary mt-2\">\n          {name}\n        </div>\n        <div className=\"inline-grid grid-cols-[auto_auto] gap-1 py-2\">\n          {type}\n        </div>\n      </div>\n\n      <div className=\"flex-shrink-0 mt-2\">\n        {defaultValue ? (\n          <div className=\"flex gap-1 items-center text-sm border border-purple-500 px-2 py-0.5 rounded\">\n            <span className=\"text-zinc-500\">default:</span>\n            <span className=\"text-purple-500\">{defaultValue}</span>\n          </div>\n        ) : (\n          <span className=\"text-sm border border-purple-500 px-2 py-0.5 rounded\">\n            required\n          </span>\n        )}\n      </div>\n    </div>\n    <p className=\"mt-2\">{description}</p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Repository Structure After Dependency Installation\nDESCRIPTION: Shows the final directory structure after the Dependency Manager has installed dependencies and restored the original package.json files, removing the backup files.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/external/dependency-manager.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nrepo/\n├── package.json\n├── node_modules/\n├── src/\n│   ├── frontend/\n│   │   └── package.json\n│   └── backend/\n│       └── package.json\n└── tests/\n    └── package.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Cline MCP Settings in JSON\nDESCRIPTION: JSON configuration for setting up the Codegen CLI server in Cline MCP settings. Specifies the server command and arguments including the path to the codegen installation.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/src/codegen/cli/mcp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"codegen-cli\": {\n        \"command\": \"uv\",\n        \"args\": [\n            \"--directory\",\n            \"<path to codegen installation>/codegen-sdk/src/codegen/cli/mcp\",\n            \"run\",\n            \"server.py\"\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Result from Forward Transaction Application\nDESCRIPTION: Shows the problematic result when transactions are applied in forward order, resulting in the incorrect final text 'HelWorldar' instead of the intended 'HelloWorld'.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/architecture/5. performing-edits/B. Transaction Manager.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nResult: FooBar\nOperation: Remove \"Foo\" (bytes 0-3), Insert \"Hello\" (bytes 0-5)\nResult: HelloBar\nOperation: Remove \"Bar\" (bytes 3-6), Insert \"World\" (bytes 3-7)\nResult: HelWorldar\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements in Python\nDESCRIPTION: This snippet demonstrates how to update import statements to use new shared paths. It translates the import path and creates a new import statement, handling different import types.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/reexport_management/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Updates imports to use new shared paths\nnew_path = usage.file.ts_config.translate_import_path(resolved_public_file)\nnew_import = f'import {{ {name} }} from \"{new_path}\"'\n```\n\n----------------------------------------\n\nTITLE: Running the Migration Script with Bash Commands\nDESCRIPTION: Terminal commands to install Codegen and run the migration script. These instructions help users execute the migration on their own TypeScript codebases.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/remove_default_exports/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install Codegen\npip install codegen\n# Run the migration\npython run.py\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings Configuration\nDESCRIPTION: Create a settings.json file in VSCode to specify the default interpreter path and additional Python analysis paths for the Codegen environment.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/docs/graph-sitter/ide-usage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"python.defaultInterpreterPath\": \"${workspaceFolder}/.codegen/.venv/bin/python\",\n  \"python.analysis.extraPaths\": [\n    \"${workspaceFolder}/.codegen/.venv/lib/python3.12/site-packages\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Codebase in Python using Codegen\nDESCRIPTION: Loads a repository into the Codegen Codebase object for analysis. This example uses the tox-dev/tox repository as it's mostly self-contained.\nSOURCE: https://github.com/codegen-sh/codegen/blob/develop/codegen-examples/examples/delete_dead_code/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncodebase = Codebase.from_repo(\"tox-dev/tox\", language=\"python\")\n```"
  }
]