[
  {
    "owner": "cycling74",
    "repo": "max-sdk",
    "content": "TITLE: Configuring Max External Build Process with CMake - CMake\nDESCRIPTION: This snippet configures the build process for a Max external using CMake. It includes other CMake scripts for pre- and post-build tasks, sets required include directories derived from the Max SDK, finds all *.h, *.c, and *.cpp files as project sources, and defines a dynamic library module. Dependencies: Cycling '74 Max SDK, CMake 3.x+, compatible compiler toolchain. Key parameters include SDK path macros and project name. Expected output is a module suitable for loading as a Max external. Ensure correct paths for the SDK and scripts; this configuration assumes a specific directory layout.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.submatrix/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building a Max External Module with CMake\nDESCRIPTION: This CMake script sets up the build process for a Max external. It first includes a pre-target setup script (`max-pretarget.cmake`). Then, it adds the Max/MSP/Jitter SDK include directories. It uses `file(GLOB ...)` to find all `.h`, `.c`, and `.cpp` files in the current directory and adds them as sources to a shared module library named according to the `PROJECT_NAME` variable. Finally, it includes a post-target script (`max-posttarget.cmake`). This script depends on the Max SDK being correctly located and the `max-sdk-base` scripts being available at the specified relative paths.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.turtle/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max SDK External Build Process in CMake - CMake\nDESCRIPTION: This CMake snippet sets up the build process for a Max external object using the Cycling '74 Max SDK. It includes external pre- and post-build scripts, defines include directories for required Max SDK headers (including MSP and Jitter components), and collects all project source files with .h, .c, and .cpp extensions. The snippet then creates a module-type library target using these files. Requires the Max SDK base scripts, CMake 3.x or later, and proper environment variables for MAX_SDK paths. Inputs are source files and output is a compiled shared library for use within Max.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/iterate2/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building a Max External with CMake\nDESCRIPTION: This CMake script configures the build for a Max external. It includes standard Max SDK include paths (base, MSP, Jitter), finds all `.h`, `.c`, and `.cpp` source files in the current directory, and defines the project as a `MODULE` library (typically a shared library like `.mxo` or `.mxe64`). It relies on `max-pretarget.cmake` and `max-posttarget.cmake` from the `max-sdk-base` for additional setup and finalization steps. The `${PROJECT_NAME}` variable is expected to be defined, likely by the parent CMakeLists.txt or CMake command line. Variables like `${MAX_SDK_INCLUDES}` are assumed to be set by the included Max SDK CMake infrastructure.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simplemax/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring MAX SDK External Build Environment with CMake\nDESCRIPTION: This CMake snippet configures the build environment for a MAX external module. It sets the output directory for the compiled libraries, includes required SDK header directories to ensure all necessary declarations are available, gathers source files with specified extensions from relevant paths, creates a module library from these sources, and links the library with a dependency named 'mydll'. This setup enforces modular builds suitable for MAX SDK projects, managing dependencies and include paths precisely.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/dllcounter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(C74_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/../../../../externals\")\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n\t\"..\"\n)\n\nfile(GLOB PROJECT_SRC\n\t\"../*.h\"\n\t\"*.h\"\n\t\"*.c\"\n\t\"*.cpp\"\n)\n\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ntarget_link_libraries(\n\t${PROJECT_NAME}\n\tPUBLIC\n\tmydll # add project to ensure that it's a dependency\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building a Max External with CMake\nDESCRIPTION: This CMake script configures the build environment for a Max external. It first includes a pre-target setup script. Then, it adds the necessary include directories for Max, MSP, and Jitter SDKs. It gathers all project source files (.h, .c, .cpp) along with a specific common symbols file from the SDK. Finally, it defines the project as a MODULE library (typically a shared library/plugin) using these sources and includes a post-target script. This script relies on variables like `${MAX_SDK_INCLUDES}` being set externally or by the included scripts.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/mc/mc.pack~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n     \"${MAX_SDK_INCLUDES}/common/commonsyms.c\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building a Max External Library with CMake\nDESCRIPTION: This CMake code sets up the build environment for a Max external. It includes necessary SDK directories for Max, MSP, and Jitter using `include_directories`. It then uses `file(GLOB ...)` to find all .h, .c, and .cpp source files in the current directory and stores them in the PROJECT_SRC variable. Finally, it defines the external as a MODULE library (typically a shared library/DLL) using `add_library`, naming it based on the `${PROJECT_NAME}` variable and using the collected source files. This core configuration is typically bracketed by includes for common Max SDK pre- and post-target build steps.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/gl/jit.gl.cube/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max External Build with CMake - CMake\nDESCRIPTION: This snippet sets up a Max external module project using CMake by including max-sdk scripts, specifying include directories for required Max, MSP, and JIT headers, and collecting all header and source files with GLOB. It then defines a library target as a MODULE using the collected sources. Dependencies include the Cycling '74 max-sdk, proper environment variables for include paths, and valid PROJECT_NAME. Inputs are the source/header files in the working directory; the output is a compiled Max external module. The script requires CMake and proper project folder structure for successful execution.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.textfile/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Max External with CMake\nDESCRIPTION: Complete CMake configuration for building a Max external module. The script includes SDK headers, collects source files, and defines the build target as a module library. It leverages pre-target and post-target scripts from the max-sdk-base to standardize the build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/simplejit/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max External Build with CMake\nDESCRIPTION: A complete CMake configuration that handles the build process for a Max external. It includes SDK paths, gathers source files, and creates a module library using pre-defined scripts from max-sdk-base.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.eclipse/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Max SDK Project Configuration in CMake\nDESCRIPTION: A complete CMake configuration for building a Max external. It includes the SDK header directories, collects all source files, and sets up the module build with pre-target and post-target configurations from the Max SDK base.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/attrtester/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring MAX SDK Build Environment with CMake\nDESCRIPTION: This snippet is a CMake build configuration script used to compile MAX SDK external modules. It sets the include directories for core MAX SDK components such as MSP and Jitter libraries, globbing header and source files with extensions .h, .c, and .cpp to include in the build, and defines a library target with the MODULE keyword indicating a plugin module. It incorporates base pre-target and post-target CMake scripts to ensure consistent environment setup. Prerequisites include a valid MAX SDK installation and CMake environment configured appropriately. Inputs are source files matched by file patterns, outputs are a compiled MAX external module library.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.keyscreen/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max SDK Paths and Building External Module with CMake\nDESCRIPTION: This CMake snippet sets up a complete build configuration for a Max external. It includes Max SDK dependencies, configures include paths for Max/MSP/Jitter, collects all source files in the directory, and creates a module library with the project name. The build process is sandwiched between max-pretarget and max-posttarget scripts for proper Max SDK integration.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/buddy/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: GLOBbing Source Files and Defining MAX External Module in CMake\nDESCRIPTION: Uses the file(GLOB) command to locate all header (*.h) and source files (*.c, *.cpp) in the current directory, storing them in PROJECT_SRC. It then defines a CMake module library target named after the project variable, including all gathered source files. This enables flexible addition of source files without modifying the build script.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.peek~/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Building a Max External Module using CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for a Max external object. It includes directories from the Max, MSP, and Jitter SDKs using predefined variables (`MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, `MAX_SDK_JIT_INCLUDES`). It then uses `file(GLOB)` to find all header, C, and C++ source files in the current directory and defines a shared library (`MODULE`) target, typically named after the project folder (`PROJECT_NAME`), using the collected source files. It depends on pre-defined CMake variables set by the Max SDK environment and includes external scripts (`max-pretarget.cmake`, `max-posttarget.cmake`) for additional setup and finalization steps.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.map/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max External Build in CMake\nDESCRIPTION: This CMake configuration sets up the build process for a Max external. It includes necessary header directories from the Max SDK, MSP, and Jitter using `include_directories`. It then finds all `.h`, `.c`, and `.cpp` files in the current source directory using `file(GLOB ...)` and uses them to define a MODULE library target named according to the `PROJECT_NAME` variable with `add_library`. It relies on external CMake scripts (`max-pretarget.cmake` and `max-posttarget.cmake`) located in the `max-sdk-base` for further setup and teardown, included via `include(...)`. Assumes `MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, `MAX_SDK_JIT_INCLUDES`, and `PROJECT_NAME` variables are defined elsewhere.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/servant/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Build for Max External Library\nDESCRIPTION: This CMake script configures the build environment for a Max/MSP/Jitter external object. It includes necessary header directories from the Max SDK (`MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, `MAX_SDK_JIT_INCLUDES`), finds all `.h`, `.c`, and `.cpp` source files in the current directory using `file(GLOB ...)`, and defines a shared library (MODULE) target named `${PROJECT_NAME}` using `add_library`. It depends on variables and setup performed by the included `max-pretarget.cmake` script and is typically followed by `max-posttarget.cmake` for post-build steps.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.clip/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring MAX SDK External Module Build with CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for a MAX external module. It includes pre- and post-build CMake scripts that likely contain common build settings or commands, specifies include directories derived from MAX SDK variables, gathers all header, C, and C++ source files within the directory, and defines an add_library call marking the module as a CMake MODULE library using the gathered sources. Key dependencies are the MAX_SDK include variables and the referenced pre/post target CMake scripts, which must exist at the specified relative paths. The snippet automatically collects all relevant source files using file(GLOB), reducing manual maintenance of source lists.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/simpleparallel/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script in CMake\nDESCRIPTION: This snippet includes a post-target CMake script from the Max SDK base, likely to perform cleanup, final setup, or additional linking after the main build steps.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.str.op/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories, Sources, and Library for a Max External\nDESCRIPTION: Specifies the include directories required for the Max SDK, MSP, and Jitter headers using predefined CMake variables (`MAX_SDK_INCLUDES`, etc.). It then uses `file(GLOB)` to gather all header (.h), C (.c), and C++ (.cpp) source files in the current directory into the `PROJECT_SRC` variable. Finally, it defines a shared module library (`add_library MODULE`) using the project name (`PROJECT_NAME`) and the collected source files (`PROJECT_SRC`), which is the standard way to build Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.noise/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Max External Library Target (CMake)\nDESCRIPTION: Defines a new library target named `${PROJECT_NAME}`. The `MODULE` keyword indicates that this library is a plugin (a Max external). It includes all source files listed in the `PROJECT_SRC` variable, collected by the preceding `file(GLOB)` command. This is the core command that tells CMake to build the external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/plussz2/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Max External Project in CMake\nDESCRIPTION: Uses glob to find all header, C, and C++ source files in the current directory and stores them in the PROJECT_SRC variable for compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/linky/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Dependencies for Max External using CMake - CMake\nDESCRIPTION: This snippet configures include directories, globbing source files (*.h, *.c, *.cpp), and sets up a shared library module target suitable for Max externals using CMake. It requires the Max SDK and its paths to be pre-defined, and external scripts for pre- and post-target build setup are included. The configuration expects standard C/C++ source files and outputs a module compatible with Cycling '74 Max. Ensure all paths (e.g., MAX_SDK_INCLUDES) and cmake variables (e.g., PROJECT_NAME) are defined in the build environment.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/urner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project and Setting Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version (3.19) and dynamically sets the project name based on the current directory's name using regex string manipulation. This ensures the project uses features available in CMake 3.19+ and has a relevant name derived from its folder.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.19)\n\nstring(REGEX REPLACE \"(.*)/\" \"\" THIS_FOLDER_NAME \"${CMAKE_CURRENT_SOURCE_DIR}\")\nproject(${THIS_FOLDER_NAME})\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories - CMake\nDESCRIPTION: This snippet configures the include directories required for the Max external project. It uses include directories defined by MAX_SDK_INCLUDES, MAX_SDK_MSP_INCLUDES, and MAX_SDK_JIT_INCLUDES, which presumably point to the necessary header files and libraries for Max/MSP development. These directories provide the compiler with paths to find header files during compilation. This is a crucial step for linking to Max SDK and related components.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/past/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max SDK External Build Using CMake\nDESCRIPTION: This CMake snippet defines the build configuration for a Max SDK external. It includes paths for Max SDK headers, collects all source files with extensions .h, .c, and .cpp from the current directory, and establishes a module-type library target for compilation. Dependencies include the Max SDK base pre and post-target scripts included via relative paths. The snippet prepares the build environment to generate a Max external module suitable for integration with Cycling '74 Max.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/gl/jit.gl.simple/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files with Globbing in CMake\nDESCRIPTION: Defines a list 'PROJECT_SRC' that includes all header (.h), C (.c), and C++ (.cpp) source files in the current directory using GLOB. This simplifies source management by automatically including relevant files, making the build scalable and maintainable.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dbcuelist/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Max External Library Target in CMake\nDESCRIPTION: This CMake code configures include directories using Max SDK variables (`MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, `MAX_SDK_JIT_INCLUDES`), automatically finds all C/C++ source and header files (`.h`, `.c`, `.cpp`) in the current directory using `file(GLOB)`, and defines a shared library (`MODULE`) target named `${PROJECT_NAME}` using these sources. It relies on variables and setup defined in the included `max-pretarget.cmake` script and completes the target configuration with `max-posttarget.cmake`.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/match/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating a Max External Library Target\nDESCRIPTION: This snippet defines a new build target as a module library for the Max external, using the collected source files. It allows the external to be compiled and linked properly within the Max environment. The target name is determined by a variable representing the project name.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/shepherd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max External with CMake\nDESCRIPTION: A complete CMake script that configures a Max external build. It includes necessary headers, collects source files, and sets up the build as a module library using Max SDK scripts for pre-target and post-target configurations.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/simpwave~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS Build Environment in CMake\nDESCRIPTION: Checks if the build is on macOS (`APPLE`). If using the Xcode generator, it verifies the Xcode version (requires 10+), enabling fat binary builds (`C74_BUILD_FAT` set to YES) for Xcode 12+. It then sets the `CMAKE_OSX_ARCHITECTURES` variable to either 'x86_64;arm64' for fat binaries or the system processor if not, ensuring the correct architecture(s) are targeted for compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (APPLE)\n    if (${CMAKE_GENERATOR} MATCHES \"Xcode\")\n            if (${XCODE_VERSION} VERSION_LESS 10)\n                message(STATUS \"Xcode 10 or higher is required. Please install from the Mac App Store.\")\n                return ()\n            elseif(${XCODE_VERSION} VERSION_GREATER_EQUAL 12)\n                set(C74_BUILD_FAT YES)\n            endif ()\n    endif ()\n\n    if (NOT CMAKE_OSX_ARCHITECTURES)\n        if(C74_BUILD_FAT)\n            set(CMAKE_OSX_ARCHITECTURES \"x86_64;arm64\" CACHE STRING \"macOS architecture\" FORCE)\n        else()\n            set(CMAKE_OSX_ARCHITECTURES ${CMAKE_SYSTEM_PROCESSOR} CACHE STRING \"macOS architecture\" FORCE)\n        endif()\n        message(\"CMAKE_OSX_ARCHITECTURES set to ${CMAKE_OSX_ARCHITECTURES}\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Max SDK\nDESCRIPTION: Sets the include directories for the project. These directories contain the header files necessary for compiling Max/MSP/Jitter externals. The include directories are defined by the MAX_SDK_INCLUDES, MAX_SDK_MSP_INCLUDES, and MAX_SDK_JIT_INCLUDES variables, which are expected to be defined elsewhere.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/vexpr/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Max External Library Target\nDESCRIPTION: Defines a library target as a MODULE type, representing the Max external object, built from the collected source files and linked appropriately for Max SDK compatibility.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/minimum/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target CMake Script\nDESCRIPTION: Includes the base CMake script provided by the Max SDK that handles pre-target configuration steps. This script typically sets up necessary variables and functions before the main project target is defined.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.coerce/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Base Scripts for CMake Build Configuration\nDESCRIPTION: This snippet includes pre-target and post-target base CMake scripts from the Max SDK repository. These scripts setup foundational build settings and cleanup actions required before and after the current target's configuration. It acts as a bootstrap and teardown step to integrate shared SDK build logic.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/delay2/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n...\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including base MAX SDK CMake scripts for pre-target and post-target configuration\nDESCRIPTION: Includes external CMake scripts max-pretarget.cmake and max-posttarget.cmake located relative to the current source directory. These scripts handle common pre-build and post-build steps required by the MAX SDK build system to properly configure the module build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.op/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK base scripts\nDESCRIPTION: Includes pre and post target CMake scripts, which likely contain common configurations and build steps for Max externals. These scripts are expected to be located in the `max-sdk-base/script` directory relative to the current source directory.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/pictmeter~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including pre and post target configurations\nDESCRIPTION: This snippet includes pre-target and post-target CMake scripts from a shared location. These scripts likely handle common tasks like setting up compiler flags and installing the target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/plussz~/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Header Directories in CMake\nDESCRIPTION: This code adds include directories necessary for compiling a Max SDK external, such as core SDK includes, MSP audio processing includes, and Jitter video processing includes. These directories provide header files required for the build.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/filebyte/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\\t\"${MAX_SDK_INCLUDES}\"\\n\\t\"${MAX_SDK_MSP_INCLUDES}\"\\n\\t\"${MAX_SDK_JIT_INCLUDES}\"\\n)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK Base Scripts in CMake\nDESCRIPTION: Includes pre-target and post-target CMake scripts from the MAX SDK base directory to properly configure the build environment and link dependencies for the MAX external module. These scripts set up necessary compilation flags and environment settings required before and after the target module build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.hello/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)  \n...\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding a Library Module for Max SDK External - CMake\nDESCRIPTION: Defines a library target for the external named ${PROJECT_NAME} using the collected source files in PROJECT_SRC. The MODULE type indicates a platform-specific dynamic library (for plugins). This snippet assumes PROJECT_NAME is previously set or defined by the surrounding project setup.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uitester/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Max SDK Include Directories - CMake\nDESCRIPTION: This snippet uses the `include_directories` command to add essential include paths from the Max SDK. It uses CMake variables (`MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, `MAX_SDK_JIT_INCLUDES`) which are typically defined by the Max SDK's configuration scripts, ensuring headers for general Max API, MSP (Max Signal Processing), and JIT (Just-In-Time) are found.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.poke~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Build Scripts in CMake\nDESCRIPTION: These CMake commands include standard pre- and post-target configuration scripts provided by the Max SDK base. The `max-pretarget.cmake` script typically sets up common variables and configurations needed before defining the build target, while `max-posttarget.cmake` handles tasks after the target definition, such as setting platform-specific properties or defining install rules.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/simplejit~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n# ... target definition ...\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including pretarget CMake script for MAX SDK configuration in CMake\nDESCRIPTION: Includes an external CMake script located in the max-sdk-base directory that likely sets up necessary variables or configurations prior to the current build target definition. It must be included at the start of the build script for proper setup. No special parameters; only requires the relative path to the external CMake file.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.scalebias/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Specifying Max SDK Include Paths - CMake\nDESCRIPTION: Defines the directories where the compiler should search for header files. It includes standard Max SDK include paths for core, MSP (audio), and Jitter (video) functionalities, making SDK header files available to the project sources.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.change/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for Max/MSP/Jitter in CMake\nDESCRIPTION: Configures include directories for Max, MSP, and Jitter header files, making their APIs available to the project.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/folder/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Base Script for Pre-Target Configuration\nDESCRIPTION: This snippet includes a CMake script to perform pre-configuration steps necessary before building the Max external, ensuring dependencies and environment are correctly set up. It relies on the path to the max-sdk-base to load configuration scripts.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/scripto/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-target CMake Script\nDESCRIPTION: Includes the standard Max SDK post-target CMake script. This script typically handles tasks after the main project target is defined, such as setting target properties, installing the external, or handling signing and packaging. It's essential for completing the Max SDK build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/index~/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Globbing source files for MAX external module in CMake\nDESCRIPTION: Automatically collects all header (.h), C source (.c), and C++ source (.cpp) files in the current directory into the PROJECT_SRC variable. This facilitates dynamic source management for the project target without manually listing files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.scalebias/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Max SDK Headers in CMake\nDESCRIPTION: This snippet configures the include paths for the CMake build to find header files from the Max SDK base, MSP, and JIT libraries. It uses variables presumably defined elsewhere to specify the locations of SDK include directories, enabling compilation of external modules with correct dependencies.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/delay2/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script - CMake\nDESCRIPTION: This snippet includes a CMake script provided by the Max SDK base. This script typically sets up variables, configures build settings, or performs other prerequisites before the main build target is defined. It depends on the location of the Max SDK base directory relative to the current source directory.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.poke~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files and Creating MAX Module Target with CMake\nDESCRIPTION: Globally collects all header, C, and C++ source files in the project directory to be compiled. Defines a CMake library target as a MODULE named after `${PROJECT_NAME}` using the collected source files. This setup creates a dynamically loadable module compatible with the MAX environment, linking the necessary code for external integration.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.print/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Library Target\nDESCRIPTION: This snippet defines a library target with MODULE type for the Max external, incorporating all gathered source files. This sets up the build process for the external object.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.histogram/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target CMake Script\nDESCRIPTION: This snippet includes an external CMake script to set up post-build steps for the Max SDK external. It manages tasks such as copying files or cleaning up after compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.histogram/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Globbing Source Files and Adding Module Library Target in CMake\nDESCRIPTION: This snippet collects all source files with .h, .c, and .cpp extensions using file glob patterns into a variable. It then defines a library target with MODULE type using these source files and the project name variable. This automates target creation and source file management for building the Max external module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/delay2/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for MAX SDK Headers with CMake\nDESCRIPTION: Configures the include directories to incorporate main MAX SDK headers, MSP (signal processing) headers, and JIT (Just-In-Time compilation) headers. This ensures that source files can find necessary SDK header files during compilation. The variables referenced are expected to point to the proper SDK paths.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.peek~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Header Directories for MAX External\nDESCRIPTION: This snippet adds include directories, specifically for MAX SDK includes, MSP includes, and JIT includes. This ensures that the compiler can find the necessary header files for the project to compile correctly. The `include_directories()` command specifies where the compiler should look for header files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simpletext/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Build Script (CMake)\nDESCRIPTION: Includes a CMake script for post-build configurations, such as copying or registering the built external with Max. It finalizes the build process setup.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.findbounds/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding MAX External as a CMake Library\nDESCRIPTION: This step creates a module library target with the name specified by 'PROJECT_NAME' using the collected source files. The 'MODULE' type indicates an external plugin or object. It depends on prior configuration and source file collection.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/dummy/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script in CMake\nDESCRIPTION: This snippet includes the max-pretarget.cmake script to set up initial build configurations for a Max external. It establishes paths and variables needed before the main build process begins. Dependencies include the max-sdk-base directory, and it ensures correct setup for subsequent build steps.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/shepherd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding MAX external shared module target in CMake using C/C++ sources\nDESCRIPTION: Defines a library target named after the PROJECT_NAME variable, specifying it as a MODULE type (shared library for dynamic loading) and associating it with the previously globbed source files. This target represents the MAX external plugin to be built.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.scalebias/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for MAX SDK External Build with CMake\nDESCRIPTION: Defines include directories required for compiling the external module. It includes the core MAX SDK headers, MSP (signal processing) headers, and JIT (just-in-time compilation) headers through predefined variables. These directories enable access to the SDK's APIs and related resources during compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.alphablend/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for Max SDK\nDESCRIPTION: This snippet adds necessary include directories for the Max SDK, including core, MSP, and Jitter components, to ensure the compiler can locate header files during build.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.histogram/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Glob Source Files for Max External\nDESCRIPTION: This snippet collects all .h, .c, and .cpp source files in the current directory into a variable, enabling flexible inclusion of source code files for compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.str.op/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Globbing Source Files for MAX SDK External Module with CMake\nDESCRIPTION: Collects all source files with extensions .h, .c, and .cpp in the current directory into the PROJECT_SRC variable. This globbing simplifies managing source file lists by automatically including relevant files for the build without manual enumeration.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.alphablend/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Gathering Project Source Files (CMake)\nDESCRIPTION: Uses the `file(GLOB)` command to find all header (`.h`), C (`.c`), and C++ (`.cpp`) source files located in the current source directory (`CMAKE_CURRENT_SOURCE_DIR`). The list of found file paths is stored in the `PROJECT_SRC` variable, which will be used later to define the build target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/iter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for Compilation\nDESCRIPTION: This snippet gathers all header and source files in the current directory for compilation. It uses GLOB to match .h, .c, and .cpp files, creating a source list variable. This simplifies project configuration by automatically including all relevant files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/shepherd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories for Max SDK\nDESCRIPTION: Specifies multiple include directories related to Max SDK components such as core SDK, MSP, and Jitter. These directories contain header files required for compiling Max external objects.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/collect/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Max External Library Target - CMake\nDESCRIPTION: Creates a library target named ${PROJECT_NAME}. The MODULE type indicates it's a dynamically loadable library, suitable for Max externals. It includes all source files collected in the ${PROJECT_SRC} variable.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.change/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files and Defining MAX External Module Target in CMake\nDESCRIPTION: Uses file globbing to collect all header, C, and C++ source files from the current directory and adds them as sources to a MODULE-type library target defined by the project name. This creates the build target for the MAX external module, enabling CMake to compile and link all sources into a dynamically loadable module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.hello/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Globbing Source Files for CMake Target\nDESCRIPTION: Finds all header (`.h`), C (`.c`), and C++ (`.cpp`) files in the current source directory using the GLOB command and stores their paths in the `PROJECT_SRC` variable. This variable is then used to define the source files for the build target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.coerce/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting MAX SDK Include Directories in CMake (CMake)\nDESCRIPTION: Adds the MAX SDK include directories for base, MSP, and JIT components to the include path for the compiler. These variables (${MAX_SDK_INCLUDES}, ${MAX_SDK_MSP_INCLUDES}, ${MAX_SDK_JIT_INCLUDES}) must be set prior to this command, typically in the pretarget script. This step ensures that header files from the SDK are available during compilation of the external module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.unpack/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files in CMake for Max External\nDESCRIPTION: Uses GLOB to collect all header and source files (.h, .c, .cpp) in the current directory for compilation into the external module. This simplifies source management and updates.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.findbounds/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Globbing Source Files for Max External\nDESCRIPTION: This CMake snippet globs all header (.h), C (.c), and C++ (.cpp) files in the current directory. This allows CMake to automatically find source files for the Max external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.fluoride/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Project Source Files (CMake)\nDESCRIPTION: Uses the `file(GLOB)` command to find source and header files within the current source directory. It collects all files ending with `.h`, `.c`, or `.cpp` into the `PROJECT_SRC` variable, which will be used to define the source files for the build target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/filein/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Max SDK - CMake\nDESCRIPTION: Specifies the include directories required for building Max SDK externals, including the base API, MSP, and Jitter interfaces. These variables (${MAX_SDK_INCLUDES}, ${MAX_SDK_MSP_INCLUDES}, ${MAX_SDK_JIT_INCLUDES}) must be defined earlier or provided by included scripts. Ensures that the build process can resolve all headers needed by the external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uitester/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Max SDK Include Directories in CMake\nDESCRIPTION: Sets the directories where the compiler will search for header files required by the Cycling '74 Max SDK. It includes paths for the core SDK, MSP (Max Signal Processing), and JIT (Just-In-Time) components, enabling access to Max API headers.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.coerce/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script in CMake\nDESCRIPTION: Includes a common CMake script (`max-posttarget.cmake`) located relative to the current source directory within the `max-sdk-base`. This script typically performs tasks after the Max external target has been defined, such as setting target properties, defining installation rules, or copying build artifacts.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.noise/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Max External Library Target (CMake)\nDESCRIPTION: Creates a CMake library target named using the `PROJECT_NAME` variable. It specifies the target type as `MODULE`, suitable for dynamically loadable libraries like Max externals, and includes the source files previously found in the `PROJECT_SRC` variable.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/dllreport/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Module Library for Max External in CMake\nDESCRIPTION: Defines the library target using the project name as a MODULE type (dynamically loaded plugin) and includes all source files found earlier.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/linky/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Configure Build Environment for Max External\nDESCRIPTION: Sets the necessary include directories for compiling against the Max SDK APIs (base, MSP, JIT). It then finds all source files (.h, .c, .cpp) in the current directory to be included in the build.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.charmap/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Configuration Script in CMake\nDESCRIPTION: This code includes a post-build CMake script that finalizes the build process for the Max SDK external, handling tasks such as linking or copying files after compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.pack/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Max External Module Library (CMake)\nDESCRIPTION: Defines a build target named `${PROJECT_NAME}` as a `MODULE` library. This library type is suitable for loadable plugins like Max externals, as it is not linked against the main executable. The source files listed in the `PROJECT_SRC` variable are compiled and linked into this module target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/times~/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Module Library in CMake\nDESCRIPTION: Defines a CMake library target named after 'PROJECT_NAME' with type 'MODULE', incorporating the collected source files. This step compiles the sources into a Max external module compatible with Max environment, facilitating plugin functionality.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dbcuelist/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Add Library for Max External Module\nDESCRIPTION: Creates a shared library module for the Max external.  It uses the project name and the collected source files.  This library is what Max loads as an external object.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.gradient/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Max External Library Target - CMake\nDESCRIPTION: Configures and defines the build target for the Max external module. It adds necessary include directories from the Max SDK variables, finds all source files (\".h\", \".c\", \".cpp\") in the current directory, and creates a \"MODULE\" type shared library named \"${PROJECT_NAME}\" compiled from these sources and includes.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/simplemsp~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for Max SDK\nDESCRIPTION: Sets the include directories required for building Max externals. This includes paths to Max SDK headers, MSP headers, and Jitter headers to ensure the project can access necessary APIs.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.gradient/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for MAX SDK in CMake\nDESCRIPTION: Configures the include directories for the compiler to locate MAX SDK header files by specifying three variables representing paths to core MAX SDK headers, MSP extensions, and JIT extensions. These directories must be pre-defined in the build environment for successful inclusion.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.scalebias/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Max external library in CMake\nDESCRIPTION: This snippet adds the Max external library to the project. It uses the `add_library()` command to create a shared library (MODULE) named after the `PROJECT_NAME` variable. The source files defined in `PROJECT_SRC` are linked to the library.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.transpose/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script\nDESCRIPTION: Includes the 'max-posttarget.cmake' script to finalize build configurations, such as linking dependencies or defining post-build steps for Max SDK externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.spill/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files and Defining Module Library - CMake\nDESCRIPTION: Uses the `file(GLOB ...)` command to find all C/C++ source and header files (`.h`, `.c`, `.cpp`) in the current directory. These files are collected into the `PROJECT_SRC` variable. The `add_library` command then defines the build target named `${PROJECT_NAME}` as a `MODULE` library, using the gathered source files. This is the primary step to define the external's binary.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.concat/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK Post-Target Script with CMake\nDESCRIPTION: Includes the posttarget script from the MAX SDK base which finalizes the build configuration and possibly performs additional customizations or cleanup after the target setup. This inclusion ensures proper integration and adherence to the SDK's build conventions.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.alphablend/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files with Globbing in CMake\nDESCRIPTION: Uses file globbing to find all header (.h), C source (.c), and C++ source (.cpp) files in the current directory for inclusion in the build.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/folder/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-target Configuration in CMake\nDESCRIPTION: Includes the max-posttarget.cmake script which handles post-configuration tasks such as setting installation paths and handling platform-specific settings.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/folder/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Max External Library Target (CMake)\nDESCRIPTION: Creates a build target using the `add_library` command. The target is named based on the `PROJECT_NAME` variable and is defined as a `MODULE` library, suitable for being loaded dynamically by the Max application. The source files included in this library are those listed in the `PROJECT_SRC` variable.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/iter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Max SDK Headers\nDESCRIPTION: This section adds Max SDK related include directories to the compiler's search paths, enabling access to the SDK's headers during compilation. It depends on variables like 'MAX_SDK_INCLUDES', 'MAX_SDK_MSP_INCLUDES', and 'MAX_SDK_JIT_INCLUDES' being defined elsewhere in the build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/dummy/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a module library target in CMake for MAX SDK External Module\nDESCRIPTION: Defines a build target with add_library using the MODULE option for creating a dynamic library module named after the project variable PROJECT_NAME. It compiles the source files collected in PROJECT_SRC to produce the MAX external module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.op/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Create a Max external library\nDESCRIPTION: Defines the build target as a module (shared library) and specifies the source files to be compiled. It uses `file(GLOB)` to automatically include all `.h`, `.c`, and `.cpp` files in the current directory as source files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/pictmeter~/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the MAX SDK External Module Library Target with CMake\nDESCRIPTION: Creates a MODULE library target using the collected project sources and an additional commonsyms.c file from the MAX SDK includes directory. The target name is given by ${PROJECT_NAME}, enabling modular compilation of the MAX external with correct linkage and exporting.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/jslider/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n\t${MAX_SDK_INCLUDES}/common/commonsyms.c\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script - CMake\nDESCRIPTION: Includes the `max-posttarget.cmake` script from the Max SDK base directory. This script likely performs cleanup, installation, or other tasks after the main target has been defined and compiled. It depends on the relative path to the Max SDK base and the `CMAKE_CURRENT_SOURCE_DIR` variable.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.concat/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Module Library Target (CMake)\nDESCRIPTION: Defines the main build target as a dynamic library of type `MODULE`. This is the standard type for Max/MSP externals. The library is named using the `${PROJECT_NAME}` variable and built from the source files listed in the `${PROJECT_SRC}` variable.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.notify/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for MAX SDK in CMake\nDESCRIPTION: Defines the include directories for the compiler by adding paths for the MAX SDK core, MSP (audio processing), and JIT (just-in-time compilation) headers. These directories provide necessary header files for building MAX externals and components.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uisimp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max SDK Pre-target Settings in CMake\nDESCRIPTION: Includes the max-pretarget.cmake script from the Max SDK base directory to set up initial build configuration parameters.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/simplethread/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Max External Development\nDESCRIPTION: This CMake script configures the build system for a Max external object. It includes the Max SDK paths, collects all source files with appropriate extensions, and creates a module library target. The script uses pre and post target configuration files from the max-sdk-base directory.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.demultiplex/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max SDK Include Paths in CMake\nDESCRIPTION: Sets up include directories required for compiling the source code. It uses variables provided by the Max SDK (`MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, `MAX_SDK_JIT_INCLUDES`) to locate header files for the Max API, MSP (audio), and JIT (matrix) components.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/mc/mc.rotate~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Max SDK External Module Library in CMake\nDESCRIPTION: This snippet defines a new library target for the Max external using the collected source files, specifying it as a MODULE type to follow Max SDK conventions, enabling external module compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.pack/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for Max External\nDESCRIPTION: This snippet uses GLOB to gather all header, C, and C++ source files in the current directory, preparing them for compilation into the Max external library.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.histogram/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Max External Module Library Target in CMake\nDESCRIPTION: Defines the primary build target for the project using `add_library`. The library name is set to `PROJECT_NAME`, which is typically defined by the Max SDK CMake setup. It's specified as a `MODULE` library, which is the standard type for Max Externals, and includes all source files listed in the `PROJECT_SRC` variable.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/index~/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Pre and Post Target Scripts\nDESCRIPTION: These CMake snippets include pre and post target scripts from the max-sdk-base. These scripts likely contain additional configurations or actions to be performed before and after the main target (the Max external) is built.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.fluoride/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting C74 Support Directory in CMake\nDESCRIPTION: This snippet defines the C74_SUPPORT_DIR variable, which points to the location of the C74 support files, typically found within the Max SDK. If the variable is not already defined, it's set relative to the current CMake list directory. It ensures that the build system knows where to find necessary header files and libraries.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED C74_SUPPORT_DIR)\n\tset(C74_SUPPORT_DIR ${CMAKE_CURRENT_LIST_DIR}/../../max-sdk-base/c74support)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Finding Source Files for MAX External\nDESCRIPTION: This snippet uses the `file(GLOB)` command to find all header (.h) and source files (.c, .cpp) in the current directory. These files will be used to create the library. The `PROJECT_SRC` variable holds a list of the source files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simpletext/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Max SDK Include Directories in CMake\nDESCRIPTION: Specifies the include directories required for building a Max External. This includes standard Max SDK headers, MSP (Max Signal Processing) headers, and Jitter (Max Matrix and Graphics) headers, ensuring the compiler can find necessary definitions from the SDK. These paths are typically defined by the Max SDK CMake infrastructure.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/index~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Library with CMake\nDESCRIPTION: This snippet defines a CMake library target of type MODULE using specific source files, including jit.str.op.h, jit.str.op.c, and max.jit.str.op.c, which are essential for the Max external's functionality.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.str.op/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\tjit.str.op.h\n\tjit.str.op.c\n\tmax.jit.str.op.c\n)\n```\n\n----------------------------------------\n\nTITLE: Collect Source Files (CMake)\nDESCRIPTION: Uses the `file(GLOB)` command to find all header (`.h`), C (`.c`), and C++ (`.cpp`) source files in the current source directory. The list of files is stored in the `PROJECT_SRC` variable for use in defining the build target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for MAX SDK External Module in CMake\nDESCRIPTION: Specifies include directories for the MAX external module compilation by referencing environment variables for MAX SDK core, MSP, and JIT headers. This ensures the compiler can find all necessary header files from various SDK components when building the module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.hello/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(  \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script in CMake\nDESCRIPTION: This snippet includes a pre-target CMake script from the Max SDK base, setting up necessary configurations before the main build process. Dependencies and environment setups are defined here.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.str.op/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining the Max External Library Target\nDESCRIPTION: Creates a library target named after PROJECT_NAME as a MODULE type (shared object) using the collected sources, to build a Max external plugin.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.spill/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for Max SDK External - CMake\nDESCRIPTION: Uses the file(GLOB ...) command to gather all header (.h), C (.c), and C++ (.cpp) files in the current directory for inclusion in the build. PROJECT_SRC will contain these file paths for later use. Assumes sources are structured in the same directory as the CMakeLists.txt.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uitester/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files with CMake GLOB\nDESCRIPTION: Uses the `file(GLOB)` command to find all source and header files (`.h`, `.c`, `.cpp`) within the current source directory. These files are collected into the `PROJECT_SRC` variable for use in defining the build target. This simplifies listing project files in simple projects.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/index~/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Project Source Files (CMake)\nDESCRIPTION: Uses the `file(GLOB)` command to find all header (`.h`) and source (`.c`, `.cpp`) files in the current directory and the parent directory ('..'). These files are collected into the `PROJECT_SRC` variable, which serves as the list of source files for the library target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/dllreport/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n\t\"../*.h\"\n\t\"*.h\"\n\t\"*.c\"\n\t\"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Max External Library Target in CMake\nDESCRIPTION: Creates a MODULE library target for the Max external, using the project name and collected source files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/dictionary/dict.strip/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Define Source Files for Max External\nDESCRIPTION: Uses GLOB to find all header (.h), C source (.c), and C++ source (.cpp) files in the current directory. These files are then added to the PROJECT_SRC variable for use in creating the library.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/dictionary/dict.route/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for Max SDK\nDESCRIPTION: Sets the include directories for the Max SDK, MSP SDK, and Jitter SDK. This ensures that the compiler can find the necessary header files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/windowwatcher/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Define Project Source Files\nDESCRIPTION: Defines the source files for the project using a globbing pattern. This includes all .h, .c, and .cpp files in the current directory.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/windowwatcher/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script - CMake\nDESCRIPTION: Includes a standard CMake script provided by the Max SDK base after the main target has been defined. This script typically handles post-build steps such as installation rules, property settings, or other configurations specific to Max externals after the library target is declared.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/simplemsp~/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Environment and Source Files Using CMake\nDESCRIPTION: This snippet configures the build environment by including base CMake scripts, specifying include directories related to the MAX SDK components, gathering all header and source files with .h, .c, and .cpp extensions into a variable, and defining a module library target from those sources. The configuration automates the compilation of a MAX external module. Dependencies include the MAX SDK include paths, and the script expects the source directory to contain the relevant files for compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.iter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)  \n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for Max SDK External in CMake\nDESCRIPTION: This code uses GLOB to collect all header and source files (*.h, *.c, *.cpp) in the current directory for compilation into the Max SDK external module, facilitating dynamic source management.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.pack/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Create Max External Module Library\nDESCRIPTION: Creates a module library with the name defined by the PROJECT_NAME variable. The library is built from the source files specified in the PROJECT_SRC variable. This creates the Max external (.mxo) file.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/dictionary/dict.route/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for Max External Module\nDESCRIPTION: This snippet uses GLOB to gather all source files (*.h, *.c, *.cpp) within the current directory, which are then compiled into a shared library representing the Max external. It simplifies source management by automatic inclusion of relevant files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/whosyourdaddy/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\")\n```\n\n----------------------------------------\n\nTITLE: Setting up include directories in CMake for MAX SDK External Module\nDESCRIPTION: Includes the necessary MAX SDK header directories for compiling the external module. Uses include_directories to specify paths for base SDK includes, MSP includes, and JIT includes, ensuring the compiler can locate required headers.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.op/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Library - CMake\nDESCRIPTION: This snippet creates the Max external library using the add_library() function. It creates a dynamic library (MODULE) with the name specified by ${PROJECT_NAME}, using the source files collected in ${PROJECT_SRC}.  This is the core function for building the external. The MODULE specifies that a dynamic library should be created. ${PROJECT_NAME} should be the name of the Max external, and ${PROJECT_SRC} are all the source files to be compiled.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/past/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK Pre-Build Script in CMake (CMake)\nDESCRIPTION: Includes the pretarget CMake script from the max-sdk-base repository to perform setup steps before the main build target configuration. This script likely initializes environment variables or sets compilation flags required by MAX SDK. It requires the repository structure to be intact with the referenced path valid relative to the current source directory.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.unpack/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script (CMake)\nDESCRIPTION: Includes a standard CMake script provided by the Max SDK before the main build target is defined. This script likely handles initial configuration or setup steps required for building Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/filein/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Glob source files for MAX external project in CMake\nDESCRIPTION: Uses the file GLOB command to collect all header (.h), C (.c), and C++ (.cpp) source files in the current directory into a variable. This allows flexible and automatic inclusion of source files matching these extensions during the build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uisimp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Identifying source files in CMake\nDESCRIPTION: This snippet defines a list of source files for the project. It uses the `file(GLOB)` command to find all header files (.h), C files (.c), and C++ files (.cpp) in the current directory. The resulting files are stored in the `PROJECT_SRC` variable, which will be used later to build the library.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.transpose/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Post-Configuration Script for Max SDK\nDESCRIPTION: Incorporates a CMake script to finalize setup after defining the external, possibly handling linking, additional configurations, or cleanup tasks specific to Max SDK build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/minimum/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Max External (CMake)\nDESCRIPTION: Specifies directories where the compiler should look for header files. It uses variables (`MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, `MAX_SDK_JIT_INCLUDES`) presumably defined by the Max SDK scripts, pointing to standard Max, MSP (Max Signal Processing), and JIT (Just-In-Time) header locations. These directories are required for compiling Max external source files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/plussz2/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script - CMake\nDESCRIPTION: This snippet includes another CMake script from the Max SDK base. This script typically performs post-target configuration, such as setting linker flags, installing rules, or performing other necessary steps after the main library target `PROJECT_NAME` has been defined. It depends on the location of the Max SDK base directory.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.poke~/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Post-Build Script for Max SDK in CMake\nDESCRIPTION: Includes the 'max-posttarget.cmake' script from Max SDK to perform post-build tasks such as packaging or supplementary configuration. This ensures the external module is correctly prepared for deployment in Max, maintaining build consistency.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dbcuelist/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script - CMake\nDESCRIPTION: Includes a standard CMake script from the Max SDK that performs setup tasks before defining the main target. This script typically configures common build settings and variables required for building Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.scissors/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Define Include Directories for Max SDK CMake\nDESCRIPTION: Specifies the include directories required for compiling the Max external. This includes paths to the core Max SDK headers, as well as headers for MSP (audio processing) and Jitter (video processing).\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.p.bounds/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for Max External (CMake)\nDESCRIPTION: Uses the `file(GLOB ...)` command to find all source files (`.h`, `.c`, `.cpp`) within the current source directory and stores their paths in the `PROJECT_SRC` variable. This provides a convenient way to list all source files needed for the project without listing them individually.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/plussz2/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Max SDK Components in CMake\nDESCRIPTION: This snippet adds the necessary include directories for Max SDK headers, MSP, and Jitter components to the build environment, ensuring the compiler can locate all necessary header files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.pack/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring include directories for Max SDK\nDESCRIPTION: This snippet configures the include directories for the Max SDK. It uses variables which point to the include directories for different components of the Max SDK, like MSP and JIT. The include directories provide access to header files needed for compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.transpose/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Base Script in CMake for External Module\nDESCRIPTION: This snippet includes a CMake script from the Max SDK base directory, setting up initial build environment configurations necessary for Max external development. It establishes base variables and build parameters for the project.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/filebyte/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Base Scripts\nDESCRIPTION: Includes pre-target and post-target CMake scripts from the max-sdk-base directory. These scripts likely contain common setup and teardown logic for Max SDK projects. This sets up the build environment before and after the main target definition.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/vexpr/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max External Project with CMake - CMake\nDESCRIPTION: This CMake snippet prepares to build a Max external by including SDK scripts for pre- and post-target configuration, defining include directories for Max, MSP, and Jitter, collecting source files with .c, .cpp, and .h extensions, and creating a module-type library target named after the project. It requires the Max SDK and a CMake environment, with input parameters including PROJECT_NAME and MAX_SDK_INCLUDES variables. Inputs are source code files and outputs are a compiled module for use within Max/MSP.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.glue/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring MAX External Project with CMake\nDESCRIPTION: This snippet includes a pre-target script using the `include()` function. This script likely sets up initial configurations or dependencies before the main build process.  It's a necessary prerequisite for configuring the project correctly.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simpletext/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Configuration Script\nDESCRIPTION: This snippet includes a CMake script to set up configurations necessary before defining the Max external module, establishing environment variables and foundational settings.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/minimum/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Max SDK Include Directories - CMake\nDESCRIPTION: Adds standard include directories from the Max SDK for general, MSP (audio), and JIT (jit. objects) development to the project's include paths. These directories are necessary to find the Max API headers required for compiling the external. It depends on the CMake variables `MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, and `MAX_SDK_JIT_INCLUDES`.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.concat/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Max SDK Components\nDESCRIPTION: This snippet adds include directories required for compiling the Max external, including core SDK headers, MSP (audio processing), and JIT (just-in-time) compilation components. These directories must contain header files that the source code depends on.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/scripto/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Max External\nDESCRIPTION: Defines the source files to be included in the Max external. It uses GLOB to find all .h, .c, and .cpp files in the current directory.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uires/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script (CMake)\nDESCRIPTION: Includes a script provided by the Max SDK that performs final configuration steps after the main build target has been defined. This script typically handles installation rules, target properties, signing, or other tasks required to finalize the Max external build.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/iter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Configuration in CMake\nDESCRIPTION: Includes the pre-target configuration script from the max-sdk-base directory which sets up common build settings for Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/linky/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Define Max External Library Target\nDESCRIPTION: Defines the main build target for the project. It creates a library named according to the ${PROJECT_NAME} variable. The MODULE type is crucial for Max externals, indicating it's a dynamically loadable module. ${PROJECT_SRC} lists all the source files found earlier.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.charmap/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including pre-target configuration in CMake\nDESCRIPTION: This snippet includes a pre-target configuration file. This likely sets up initial settings and variables needed for building a Max external. It pulls in configurations from a base SDK.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.transpose/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting MAX SDK Include Directories in CMake\nDESCRIPTION: Specifies the directories to be included during compilation, covering the core MAX SDK includes, as well as MSP and JIT specific headers. These directories are defined by environment or project variables and ensure the compiler can find all MAX SDK dependencies.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/fftinfo~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Pre-Target Configuration\nDESCRIPTION: Includes a CMake script containing pre-target configuration settings for Max SDK projects. This script typically sets up common build options and flags.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/windowwatcher/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Shared Library with CMake\nDESCRIPTION: This snippet creates a shared library target named after the project, configured as a MODULE, which is the appropriate type for Max externals. It compiles all collected source files and produces a dynamically loadable external object for Max.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/whosyourdaddy/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(  \n\t${PROJECT_NAME}  \n\tMODULE  \n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding CMake Module Target for Max External\nDESCRIPTION: Defines the primary CMake build target as a library named after the `${PROJECT_NAME}` variable. The `MODULE` type is used, indicating that this library is intended to be loaded dynamically at runtime, which is the correct type for a Cycling '74 Max external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.coerce/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script in CMake\nDESCRIPTION: This snippet includes a pre-target CMake script from the Max SDK base directory, setting up necessary environment configurations before building the external. It ensures that required SDK settings are initialized at the start of the CMake process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/whosyourdaddy/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting up include directories\nDESCRIPTION: This snippet sets up include directories for the Max SDK, MSP SDK, and Jitter SDK. These directories contain header files required for compiling code that interacts with Max, MSP, and Jitter.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.3m/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Post-Build Script for MAX SDK External Module in CMake\nDESCRIPTION: Includes a post-target CMake script from the max-sdk-base directory executed after defining the build target. This script likely handles post-build steps such as copying binaries, setting properties, or performing cleanup, essential for properly packaging the built MAX external module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/fftinfo~/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting MAX SDK Include Directories Using CMake\nDESCRIPTION: Specifies the include directories for the MAX SDK core, MSP, and JIT headers. These paths enable the compiler to locate necessary header files during compilation. The variables must be previously defined to point to valid SDK include paths.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simplejs/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for Max SDK in CMake\nDESCRIPTION: Configures the include directories for the Max, MSP, and Jitter components of the Max SDK to make their headers available during compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/linky/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script (CMake)\nDESCRIPTION: Includes a standard CMake script provided by the Max SDK after the main build target has been defined. This script likely handles linking dependencies, setting target properties, or performing other post-definition configuration specific to Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/filein/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script in CMake\nDESCRIPTION: This snippet sources a post-target script from the Max SDK base directory, typically used to finalize build configurations or implement post-build steps. It ensures that any necessary cleanup or registration steps are executed after the main build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/whosyourdaddy/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-target Configuration in CMake\nDESCRIPTION: Includes the max-pretarget.cmake script from the max-sdk-base directory, which sets up common configurations needed before defining the target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/folder/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script - CMake\nDESCRIPTION: Includes a standard CMake script from the Max SDK that performs cleanup or additional setup tasks after the main target has been defined. This might include setting target properties, configuring installation rules, or performing post-build actions specific to Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.scissors/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Globally Collecting Source Files for MAX External Module in CMake (CMake)\nDESCRIPTION: Uses file(GLOB) to collect all .h, .c, and .cpp files in the current directory into the PROJECT_SRC variable. This enables automatic source file discovery which simplifies adding new source files without needing to update the CMakeLists manually. Note that globbing can sometimes miss newly added files if CMake is not rerun.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.unpack/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Base Script (Post-Target)\nDESCRIPTION: Includes the post-target CMake script from the max-sdk-base project. This script likely handles any post-build steps, such as setting install directories or running post-processing scripts.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/dictionary/dict.route/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for Max External\nDESCRIPTION: This command uses globbing to collect all header and source files (*.h, *.c, *.cpp) in the current directory into the 'PROJECT_SRC' variable, preparing them for compilation. It assumes that source files are located alongside this configuration script.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/dummy/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories for Max SDK Headers in CMake\nDESCRIPTION: Specifies multiple include directories for the compiler, pointing to Max SDK component headers (INCLUDES, MSP, JIT). These directories are necessary for resolving Max SDK and related dependencies during compilation, enabling access to Max SDK APIs.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dbcuelist/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Max SDK Includes Directory in CMake\nDESCRIPTION: This snippet defines the MAX_SDK_INCLUDES variable, which specifies the directory containing the Max SDK header files. It relies on the previously defined C74_SUPPORT_DIR. This allows the compiler to find the necessary header files for building Max external objects.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MAX_SDK_INCLUDES \"${C74_SUPPORT_DIR}/max-includes\")\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target CMAKE Script\nDESCRIPTION: Includes a CMAKE script from the Max SDK base directory. This script typically performs initial setup, defines SDK-specific variables like include paths, or executes build steps that need to happen before defining the main target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/howbigisyourp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMAKE\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External shared library with CMake\nDESCRIPTION: This snippet creates a shared library (MODULE) named `${PROJECT_NAME}` using the source files listed in `${PROJECT_SRC}`. The `${PROJECT_NAME}` variable should be defined before this command is executed. The resulting library will be a Max external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/plussz~/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target CMake Script\nDESCRIPTION: Includes the base CMake script provided by the Max SDK that handles post-target configuration steps. This script often sets target-specific properties, handles installation details, or performs other actions necessary after the main target is defined.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.coerce/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting up Max External include directories in CMake\nDESCRIPTION: This snippet adds include directories for the Max SDK, MSP SDK, and Jitter SDK, making the headers available during compilation of the Max external. It depends on the MAX_SDK_INCLUDES, MAX_SDK_MSP_INCLUDES, and MAX_SDK_JIT_INCLUDES variables being defined.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/plussz~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including post-target configuration in CMake\nDESCRIPTION: This snippet includes a post-target configuration file. This likely handles finalization tasks after creating the library.  It pulls in configurations from a base SDK.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.transpose/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for MAX Module Build with CMake\nDESCRIPTION: Uses the file globbing feature to collect all header (*.h), C (*.c), and C++ (*.cpp) source files in the current directory into the PROJECT_SRC variable. This list is used when specifying source files to compile into the module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/jslider/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Specify Max SDK Include Directories - CMake\nDESCRIPTION: Adds the required include directories to the project's include path using variables provided by the Max SDK. These directories contain header files for the core Max API, MSP (audio), and Jitter (matrix/video) components, which are essential for compiling a Max external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/dspstress~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script - CMake\nDESCRIPTION: Includes another helper CMake script from the Max SDK base directory. This script likely performs setup or configuration tasks necessary after the main library target has been defined, potentially handling installation rules or platform-specific settings.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.change/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Specifying Max SDK Include Directories (CMAKE)\nDESCRIPTION: Adds the required include directories for compiling a Max external. These variables (`MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, `MAX_SDK_JIT_INCLUDES`) are expected to be defined by the Max SDK configuration included previously.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/howbigisyourp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMAKE\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK Base Scripts with CMake\nDESCRIPTION: Includes external CMake scripts that configure generic pretarget and posttarget build settings for the MAX SDK environment. These inclusions set up necessary build variables and flags used in the compilation process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/jslider/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n...\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK base post-target CMake script\nDESCRIPTION: This line includes a CMake script that performs post-target configuration tasks specific to the Max SDK environment. This script is necessary for proper finalization after adding targets.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.3m/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building a Max External with CMake\nDESCRIPTION: This CMake script handles the configuration and build process for a Max external. It includes SDK headers, collects source files, and sets up the build target using Max SDK's build scripts for consistent external compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.la.diagproduct/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script in CMake\nDESCRIPTION: This snippet includes the max-posttarget.cmake script to finalize the build configuration for the Max external. It likely handles post-build steps such as copying files or additional compilation flags. Dependencies include the max-sdk-base directory and the build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/shepherd/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for the Max External\nDESCRIPTION: Collects all source header and implementation files (*.h, *.c, *.cpp) in the current directory into the PROJECT_SRC variable for compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.spill/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Discovering Source Files with CMake GLOB\nDESCRIPTION: Finds all source files (`.h`, `.c`, `.cpp`) in the current directory. The list of file paths is stored in the `PROJECT_SRC` variable, which will be used later to define the library sources. Note that `file(GLOB)` is generally discouraged for complex projects due to build system limitations.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/mc/mc.rotate~/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library for MAX External\nDESCRIPTION: This snippet uses the `add_library()` command to create a shared library (MODULE) named after the `PROJECT_NAME`. It takes source files found in the `PROJECT_SRC` variable and compiles them into a library. The generated library can then be used by other projects or MAX itself.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simpletext/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Define Max External Library Target - CMake\nDESCRIPTION: Defines the main build target for the Max external as a shared library. The target name is set to the project name (`${PROJECT_NAME}`). The `MODULE` type is used, which is appropriate for runtime loadable modules like Max externals. The source files gathered by `file(GLOB)` are added to this target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/dspstress~/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK Post-Build Script in CMake (CMake)\nDESCRIPTION: Includes the posttarget CMake script from the max-sdk-base repository to perform cleanup or additional configuration after the module target is defined. This could handle tasks like copying binaries, setting permissions, or generating metadata. The path must be valid relative to the current source directory.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.unpack/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Glob Source Files for Max External\nDESCRIPTION: Uses the `file(GLOB)` command to collect all header (.h), C (.c), and C++ (.cpp) source files in the current directory. The collected files are stored in the `PROJECT_SRC` variable for later use.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.gradient/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Post-Target Script for MAX External\nDESCRIPTION: This snippet includes a post-target script, similar to the pre-target script. This likely runs after the project has been built. The script likely does things like install files or cleanup, based on the project requirements.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simpletext/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Globbing Source Files for Project - CMake\nDESCRIPTION: Uses the file(GLOB ...) command to find all header (*.h), C (*.c), and C++ (*.cpp) files in the current source directory. The found files are stored in the PROJECT_SRC variable, which is then used to specify the source files for the build target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.scissors/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Globbing source files in CMake for MAX SDK External Module\nDESCRIPTION: Uses the file(GLOB) command to collect all source files in the current directory matching the patterns *.h, *.c, and *.cpp. This dynamically populates the variable PROJECT_SRC with all relevant header and source files for compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.op/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Post-Target CMake Script\nDESCRIPTION: Includes a CMake script to perform post-target configuration for Max SDK projects. This typically involves tasks such as setting installation paths or performing other actions after the main target has been built.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.gradient/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for Max External in CMake\nDESCRIPTION: Uses file globbing to collect all header, C, and C++ source files in the current directory for compilation into the external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/simplethread/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Post-Target Configuration\nDESCRIPTION: Includes a CMake script containing post-target configuration settings for Max SDK projects. This script typically handles installation and packaging tasks.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/windowwatcher/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK base post-target script in CMake\nDESCRIPTION: Includes an external CMake script from the Max SDK base to perform post-target configuration, likely handling steps such as setting target properties, installing rules, or other cleanup necessary after target definition.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uisimp/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files with GLOB (CMake)\nDESCRIPTION: Uses the `file(GLOB ...)` command to find all header (.h) and source (.c, .cpp) files within the current directory. These files are collected into the `PROJECT_SRC` variable, which will be used to define the source files for the build target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.notify/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Max Development in CMake\nDESCRIPTION: Sets up include directories for Max, MSP, and Jitter headers to enable compilation with the correct dependencies.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/simplethread/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Set Max SDK Include Directories (CMake)\nDESCRIPTION: Specifies the include directories required for compiling the Max external, including paths for the base SDK, MSP (Max Signal Processing), and JIT (Just-In-Time) components. These variables are typically set by the Max SDK build system.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Post-Target Script\nDESCRIPTION: Includes another standard CMake script from the Max SDK. This script typically handles tasks after the target is defined, such as setting target properties, handling installation rules, or performing post-build steps specific to Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.charmap/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including posttarget CMake script for MAX SDK after target definition\nDESCRIPTION: Includes an external CMake script from max-sdk-base directory that likely performs post-build target configuration steps, such as linking or setting target properties specific to MAX SDK. It should be included after the target is defined to finalize the build setup.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.scalebias/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Globbing Source Files for Max External (CMAKE)\nDESCRIPTION: Uses the `file(GLOB ...)` command to find all header (`.h`), C source (`.c`), and C++ source (`.cpp`) files within the current source directory. The paths of these files are collected into the `PROJECT_SRC` variable for use in defining the build target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/howbigisyourp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMAKE\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK CMake Pre-Target Script (CMake)\nDESCRIPTION: Includes a base CMake script provided by the Max SDK to perform setup tasks before defining the target (library/executable). This script likely sets build flags or variables required for Max externals and is a prerequisite for a correct Max build.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/times~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script (CMake)\nDESCRIPTION: Includes the `max-posttarget.cmake` script from the Max SDK base directory. This script likely performs tasks after the main target is defined, such as setting output properties, configuring installation rules, or performing final build configurations specific to Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/dllreport/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script in CMake\nDESCRIPTION: This command includes a CMake script responsible for setting up the pre-build environment for the Max SDK, ensuring necessary paths and configurations are initialized before building the external. Dependencies include the path to 'max-pretarget.cmake' within the SDK structure.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/dummy/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Base Script\nDESCRIPTION: Includes the 'max-pretarget.cmake' script from Max SDK base directory to set up initial build environment and variables required before defining the build target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/collect/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script (CMake)\nDESCRIPTION: Includes a CMake script provided by the Max SDK base library. This script likely performs configuration steps *before* defining the target library, such as setting up compiler flags or defining necessary variables. It depends on the `CMAKE_CURRENT_SOURCE_DIR` variable.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/plussz2/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script in CMake\nDESCRIPTION: Includes a common CMake script (`max-pretarget.cmake`) located relative to the current source directory within the `max-sdk-base`. This script typically performs initial setup tasks required before defining the specific Max external target, such as setting common build flags or configurations.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.noise/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files with GLOB for Max External Module\nDESCRIPTION: This snippet uses CMake's GLOB command to collect all header and source files (.h, .c, .cpp) in the current directory to be included in the build target, simplifying source file management.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/filebyte/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n     \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script - CMake\nDESCRIPTION: Includes the `max-pretarget.cmake` script from the Max SDK base directory. This script likely performs setup tasks before the main target is defined, integrating the current project into the SDK's build system. It depends on the relative path to the Max SDK base and the `CMAKE_CURRENT_SOURCE_DIR` variable.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.concat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Pre-Target CMake Script\nDESCRIPTION: Includes a CMake script to perform pre-target configuration for Max SDK projects. This typically involves setting up build environment variables or project-specific settings before the main target is defined.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.gradient/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target CMake Script\nDESCRIPTION: This snippet includes an external CMake script to set up pre-build steps for the Max SDK external. It ensures any required initial configuration is handled before project build.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.histogram/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Base Script for Pre-Build Setup in CMake\nDESCRIPTION: Includes the 'max-pretarget.cmake' script from the Max SDK to perform pre-build setup tasks such as environment configuration before compiling the external. This ensures all necessary variables and checks are initialized. No dependencies other than Max SDK base scripts are needed.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dbcuelist/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script (CMake)\nDESCRIPTION: Includes a standard Max SDK CMake script that performs setup tasks before the main target is defined. This script typically sets common variables and configurations required for building Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.notify/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Max SDK Include Directories (CMake)\nDESCRIPTION: Specifies the compiler include paths required for compiling the external, pointing to the various Max SDK header locations. It assumes these path variables are defined elsewhere, likely by the pre-target script.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.notify/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script (CMake)\nDESCRIPTION: Includes the `max-pretarget.cmake` script from the Max SDK base directory. This script likely performs essential setup tasks, variable definitions, or configurations required before defining build targets specific to a Max external project within CMake.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/dllreport/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Configuration Script in CMake\nDESCRIPTION: This code includes an external CMake script that sets up pre-build configurations for the Max SDK project, ensuring required variables and environment settings are established before compilation begins.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.pack/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Building a Max External Library with CMake\nDESCRIPTION: This CMake script defines the build process for a Max external. It first includes necessary header directories from the Max SDK (base, MSP, Jitter) using `include_directories`. Then, it finds all header (.h), C (.c), and C++ (.cpp) source files in the current directory using `file(GLOB)` and stores them in the PROJECT_SRC variable. Finally, it creates a shared library module (`MODULE`) named after the CMake project (`${PROJECT_NAME}`) using the collected source files (`${PROJECT_SRC}`). It also includes common pre- and post-target scripts (`max-pretarget.cmake`, `max-posttarget.cmake`) from the Max SDK base for standardized build configurations.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/gl/jit.gl.videoplane/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Target in CMake\nDESCRIPTION: This snippet defines the library target 'mydll'. It specifies that the library is shared and lists the source files ('mydll.h' and 'mydll.cpp') used to build the library.  This creates the build target for the Max external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n\tmydll\n\tSHARED\n\t\"mydll.h\"\n\t\"mydll.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script in CMake\nDESCRIPTION: This snippet includes the max-pretarget.cmake script, likely containing project-specific configurations required before building the target. This script might set up the environment or define variables needed for the build process. The file is included from the max-sdk-base to ensure that the project gets a standard build setup.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uioptimized/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Library for Max External\nDESCRIPTION: Creates a module library for the Max external. The library is named based on the PROJECT_NAME variable, and includes all source files found previously. The MODULE type signifies that this is a Max external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uires/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories in CMake\nDESCRIPTION: This snippet adds the MAX_SDK_INCLUDES directory to the include directories for the 'mydll' target. This ensures that the compiler can find the necessary header files for building the Max external object. The 'PUBLIC' keyword makes the include directory available to other targets that link against 'mydll'.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n\tmydll\n\tPUBLIC\n\t\"${MAX_SDK_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Link Libraries (Windows) in CMake\nDESCRIPTION: This snippet sets the link libraries for the 'mydll' target on Windows. It links against the MaxAPI.lib library. This is necessary for the Max runtime to correctly load and use the external object. The PUBLIC keyword makes the linked library available to other targets that link against 'mydll'.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nelse ()\n\ttarget_link_libraries(mydll PUBLIC ${MAX_SDK_INCLUDES}/x64/MaxAPI.lib)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Linking Max External Library (CMake)\nDESCRIPTION: Links the created library target (`PROJECT_NAME`) against specified libraries. It links publicly against `mydll`, which the comment indicates is added to ensure it's treated as a dependency. This step connects the compiled library with necessary external dependencies.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/dllreport/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n\t${PROJECT_NAME}\n\tPUBLIC\n\tmydll # add project to ensure that it's a dependency\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Max External Build with CMake\nDESCRIPTION: This CMake snippet sets up the build process for a Max/MSP/Jitter external. It includes required directories from the Max SDK, MSP SDK, and Jitter SDK using predefined variables. It then finds all header, C, and C++ source files in the current directory and uses them, along with a specific common file (jpatcher_syms.c), to define a MODULE library (typically a dynamically loaded library/external). It depends on variables like ${MAX_SDK_INCLUDES}, ${MAX_SDK_MSP_INCLUDES}, ${MAX_SDK_JIT_INCLUDES} being set correctly and includes common pre/post build steps from the Max SDK base.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uitextfield/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n\t${MAX_SDK_INCLUDES}/common/jpatcher_syms.c\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding MAX SDK External Module Library Target in CMake\nDESCRIPTION: Defines a library target named by the variable ${PROJECT_NAME} with the MODULE type, meaning it will be built as a dynamically loadable module suitable for the MAX environment. The target includes all source files gathered in PROJECT_SRC, enabling seamless linking and building of the external module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/fftinfo~/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Deployment Target in CMake\nDESCRIPTION: This snippet sets the minimum macOS deployment target version. It checks if the CMAKE_OSX_ARCHITECTURES variable is empty, and if so, sets it to x86_64. Then, it sets the CMAKE_OSX_DEPLOYMENT_TARGET to \"10.11\". This ensures compatibility with older macOS versions and specifies the target architecture.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (APPLE)\n\tif (CMAKE_OSX_ARCHITECTURES STREQUAL \"\")\n\t\tset(CMAKE_OSX_ARCHITECTURES x86_64)\n\tendif()\n\tset(CMAKE_OSX_DEPLOYMENT_TARGET \"10.11\" CACHE STRING \"Minimum OS X deployment version\" FORCE)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Cleanup Script in CMake\nDESCRIPTION: This snippet includes a post-target CMake script from the Max SDK base directory, likely intended for cleanup or final adjustments after the target has been defined. The script path is relative and facilitates SDK-specific build customization toward the end of the CMake configuration process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.split/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Output Directory in CMake\nDESCRIPTION: This snippet configures the output directory for the compiled library. It sets the CMAKE_LIBRARY_OUTPUT_DIRECTORY variable to a specific path, and also sets the debug and release configurations to the same directory. This ensures that the generated library is placed in a consistent location.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_LIST_DIR}/../../../support\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")\n```\n\n----------------------------------------\n\nTITLE: Globbing source files\nDESCRIPTION: This command uses file(GLOB) to find all header (.h), C (.c), and C++ (.cpp) files in the current directory. The found files are stored in the PROJECT_SRC variable for later use in defining the library.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.3m/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max/MSP External Build with CMake - CMake\nDESCRIPTION: This CMake script configures the build environment for a Max/MSP external module. It sets up include paths based on Max SDK variables, gathers all C, C++, and header files in the directory, and defines the build artifact as a MODULE library. The script expects variables such as PROJECT_NAME and paths to include directories (e.g., MAX_SDK_INCLUDES) to be set externally. It requires CMake, max-sdk-base (for pre/posttarget scripts), and assumes the Max SDK directory structure. The script does not explicitly define additional build properties such as target platform or post-build deployment.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/thresh/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Recursively Adding Sub-Projects from 'source' Directory in CMake\nDESCRIPTION: Uses the `SUBDIRLIST` macro twice: first to find category folders within './source', and then to find project folders within each category. It iterates through these discovered project directories, constructs the full path, checks for the existence of a 'CMakeLists.txt' file within each using `EXISTS`, and adds it as a subdirectory to the main build using `add_subdirectory` if the file is found. This automates the inclusion of multiple individual projects organized in a two-level directory structure under 'source'.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Generate a project for every folder in the \"source/category\" folder\nSUBDIRLIST(CATEGORY_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/source)\nforeach (cat_dir ${CATEGORY_DIRS})\n  SUBDIRLIST(PROJECT_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/source/${cat_dir})\n  foreach (project_dir ${PROJECT_DIRS})\n    set(project_path ${CMAKE_CURRENT_SOURCE_DIR}/source/${cat_dir}/${project_dir})\n    #message(\"checking in: ${project_path}\")\n    if (EXISTS \"${project_path}/CMakeLists.txt\")\n      message(\"Generating: ${project_dir}\")\n      add_subdirectory(${project_path})\n    endif ()\n  endforeach ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK CMake Post-Target Script (CMake)\nDESCRIPTION: Includes a base CMake script provided by the Max SDK to perform cleanup or post-build tasks after the target library/executable has been defined. This script might handle installation paths, signing, or other platform-specific steps required for deploying Max externals correctly. It follows the target definition.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/times~/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script (CMake)\nDESCRIPTION: Includes a standard Max SDK CMake script that performs setup tasks after the main target has been defined. This script may handle installation rules, code signing, or other post-build configurations specific to Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.notify/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting up Max SDK external build with CMake\nDESCRIPTION: Configures the build environment for a Max external module. Includes Max SDK header paths, gathers all source files in the current directory, and creates a loadable module. Uses pre and post-target scripts from max-sdk-base.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/mc/limi~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max SDK Post-target Settings in CMake\nDESCRIPTION: Includes the max-posttarget.cmake script to finalize the build configuration with additional Max-specific settings.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/simplethread/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Configuration in CMake\nDESCRIPTION: Includes the post-target configuration script which finalizes the build settings, handles platform-specific configurations, and sets up installation targets.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/linky/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Link Options (macOS) in CMake\nDESCRIPTION: This snippet sets the linker options for the 'mydll' target on macOS. It uses the '-Wl' flag to pass options directly to the linker.  The options ensure that the object_post function is undefined and sets the install name for the library. This is necessary for the Max runtime to correctly load and use the external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (APPLE)\n\ttarget_link_options(\n\t\tmydll\n\t\tPUBLIC\n\t\t\"-Wl,-U,_object_post\"\n\t\t\"-Wl,-install_name,@loader_path/../../../../support/mydll.dylib\"\n\t)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This snippet uses a custom macro SUBDIRLIST to find subdirectories within the current source directory.  It then iterates through each subdirectory, checks if a CMakeLists.txt file exists, and if it does, adds the subdirectory to the build process using add_subdirectory. This allows the build system to build multiple projects within subdirectories.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Generate a project for every folder in the \"source/category\" folder\nSUBDIRLIST(PROJECT_DIRS ${CMAKE_CURRENT_SOURCE_DIR})\nforeach (project_dir ${PROJECT_DIRS})\n\tset(project_path ${CMAKE_CURRENT_SOURCE_DIR}/${project_dir})\n\tmessage(\"checking in: ${project_path}\")\n\tif (EXISTS \"${project_path}/CMakeLists.txt\")\n\t\tmessage(\"Generating: ${project_dir}\")\n\t\tadd_subdirectory(${project_path})\n\tendif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Max External Build in CMake\nDESCRIPTION: This CMake snippet configures the build environment for a Max external. It includes directories containing headers from the Max SDK core (`MAX_SDK_INCLUDES`), MSP (`MAX_SDK_MSP_INCLUDES`), and Jitter (`MAX_SDK_JIT_INCLUDES`). It then uses `file(GLOB ...)` to gather all header (.h), C (.c), and C++ (.cpp) source files in the current directory into the `PROJECT_SRC` variable. Finally, it defines a `MODULE` library target named `${PROJECT_NAME}` using the collected source files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/simplejit~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Macro `SUBDIRLIST` to List Subdirectories\nDESCRIPTION: Defines a reusable CMake macro named `SUBDIRLIST`. This macro takes an output variable name (`result`) and a directory path (`curdir`) as input. It uses `FILE(GLOB ...)` to find all immediate children in the directory, filters for directories using `IS_DIRECTORY`, and stores the list of subdirectory names in the provided output variable (`result`).\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nMACRO(SUBDIRLIST result curdir)\n  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)\n  SET(dirlist \"\")\n  FOREACH(child ${children})\n    IF(IS_DIRECTORY ${curdir}/${child})\n        LIST(APPEND dirlist ${child})\n    ENDIF()\n  ENDFOREACH()\n  SET(${result} ${dirlist})\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script in CMake\nDESCRIPTION: This snippet includes the max-posttarget.cmake script, which likely performs any required post-build steps, such as copying the built library to a specific location or configuring Max-specific deployment steps. This ensures that the output of the build process is correctly handled to facilitate its use within Max. The file is included from the max-sdk-base to ensure that the project gets a standard build setup.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uioptimized/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Project Source Files (CMake)\nDESCRIPTION: Uses `file(GLOB)` to find all header (`.h`) and source (`.c`, `.cpp`) files in the current source directory. These files are collected into the `PROJECT_SRC` variable for use in the build command. Note that using GLOB can have limitations for complex projects or when files are added/removed compared to explicitly listing source files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/times~/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting MAX SDK Include Directories with CMake\nDESCRIPTION: Configures the include directories for the project by adding MAX SDK core, MSP, and JIT header paths. These variables (`MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, `MAX_SDK_JIT_INCLUDES`) must be defined externally and point to the relevant parts of the MAX SDK. This setup allows source files to correctly locate SDK headers during compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.print/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Source Files - CMake\nDESCRIPTION: This snippet finds source files within the current directory for the Max external library. It uses the file(GLOB) function to collect all header (.h), C (.c), and C++ (.cpp) files, storing them in the PROJECT_SRC variable. These files will be used later to create the library. The GLOB function provides a convenient way to list source files based on a pattern.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/past/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Source Files in CMake\nDESCRIPTION: This snippet uses the file(GLOB) command to find all header (.h) and source (.c and .cpp) files in the current directory and stores the found files in PROJECT_SRC variable. This variable is later used when building the library. The globbing pattern ensures that the build system finds the necessary source files for the project.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uioptimized/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Max SDK Include Directories (CMake)\nDESCRIPTION: Configures the include search paths for the compiler to find header files from the Max SDK. It adds standard SDK includes, MSP (audio) includes, and Jitter (video/matrix) includes, which are necessary for developing Max externals utilizing these features. This ensures source files can include SDK headers correctly.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/times~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including SDK Header Directories for Max SDK Components\nDESCRIPTION: This snippet adds include directories for Max SDK components such as core SDK, MSP, and Jitter, ensuring that the compiler can locate all necessary header files when building the external module. It depends on variables like MAX_SDK_INCLUDES, which should be defined elsewhere in the build setup.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/whosyourdaddy/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(  \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building a Max External with CMake\nDESCRIPTION: This CMake script configures the build process for a Max/MSP/Jitter external. It includes necessary header paths, gathers source files, and sets up the build target as a module with proper SDK linkage.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dbviewer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n\t${MAX_SDK_INCLUDES}/common/commonsyms.c\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Specifying Include Directories for Max External (CMake)\nDESCRIPTION: Defines the header search paths for the project's compilation. It includes standard Max SDK paths for general headers (`MAX_SDK_INCLUDES`), MSP (`MAX_SDK_MSP_INCLUDES`), JIT (`MAX_SDK_JIT_INCLUDES`), and a local directory ('..'), ensuring the compiler can find necessary header files from the SDK and the project itself.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/dllreport/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n\t\"..\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max External Module with CMake\nDESCRIPTION: This CMake script configures the build environment for a Max External module. It includes necessary Max SDK header directories, collects all source files in the current directory, and creates a module library target with the project name.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/plussz/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Declaring mcs.limi~ Max Object\nDESCRIPTION: This code declares a Max object file named `mcs.limi~`. It is very similar to the previous snippet, but it possibly indicates a more specialized version of the `limi~` object. It also uses the `mcs` suffix, which is potentially a specific set of the mc objects.  It appears to be a multi-channel object variant, built upon the `limi~` object.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/init/audio-objectmappings.txt#_snippet_1\n\nLANGUAGE: Max/MSP\nCODE:\n```\nmax objectfile mcs.limi~ mcs.limi~ limi~ mcs;\n```\n\n----------------------------------------\n\nTITLE: Adding Max SDK Include Directories (CMake)\nDESCRIPTION: Adds the required include directories for the different components of the Max SDK (base, MSP, JIT) to the build configuration. These paths are essential for the compiler to locate SDK header files when building the external. Requires the variables `MAX_SDK_INCLUDES`, `MAX_SDK_MSP_INCLUDES`, and `MAX_SDK_JIT_INCLUDES` to be set.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/iter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Max External Target Library - CMake\nDESCRIPTION: Defines the main build target as a MODULE library using the add_library command. The library name is taken from the PROJECT_NAME variable, and the source files included are those found by the file(GLOB ...) command and stored in PROJECT_SRC. A MODULE library is suitable for dynamically loaded components like Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.scissors/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK Base Scripts with CMake\nDESCRIPTION: Includes base CMake scripts (`max-pretarget.cmake` and `max-posttarget.cmake`) from the MAX SDK repository to configure build settings before and after target creation. These scripts setup proper environment variables, compiler/linker flags, and adjust settings needed to build MAX externals correctly.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.print/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n...\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Header and Source Directory Paths\nDESCRIPTION: This snippet specifies include directories required for building a Max external, such as SDK-specific headers. It references variables pointing to SDK include paths, ensuring the compiler can locate necessary headers. Dependencies are the SDK include path variables.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/shepherd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Max SDK External Library with CMake\nDESCRIPTION: Defines the main build target, a dynamically loadable module library. The library is named according to the `PROJECT_NAME` variable and is built using the source files collected in `PROJECT_SRC`. This command instructs CMake to compile and link the source files into the final external binary.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/mc/mc.rotate~/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Max External Library Target (CMake)\nDESCRIPTION: Defines the main build target for the project using `add_library`. It specifies the target name as `${PROJECT_NAME}` and sets the type to `MODULE`, suitable for loadable libraries like Max externals. The source files collected in `PROJECT_SRC` are assigned to this target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/filein/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Max SDK Include Directories (CMake)\nDESCRIPTION: Configures the compiler's include paths to locate necessary header files from the Max SDK. It uses pre-defined CMake variables provided by the SDK to specify paths for general, MSP (Max Signal Processing), and JIT (Just-In-Time) related headers.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/filein/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Globally Collecting Source Files for MAX SDK Module in CMake\nDESCRIPTION: Uses the 'file(GLOB ...)' command to collect all header (.h), C source (.c), and C++ source (.cpp) files in the current directory. This command dynamically gathers the source files required to build the MAX external module without listing them explicitly.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/fftinfo~/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK Post-target Configuration with CMake\nDESCRIPTION: Includes a post-target CMake script from the max-sdk-base directory to apply any final adjustments such as setting properties or installing rules after the target has been defined. This ensures proper finalization of the build configuration.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simplejs/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Project Source Files - CMake\nDESCRIPTION: Uses the file(GLOB ...) command to find all files matching the specified patterns (.h, .c, .cpp) within the current source directory. These files are then stored in the PROJECT_SRC variable for use in defining the build target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.change/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Post-Build Configuration Script for Max SDK\nDESCRIPTION: This snippet includes a CMake script to perform post-configuration steps after building the Max external, such as copying files or setting properties used by Max. It ensures final setup tasks are executed to facilitate proper plugin integration.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/scripto/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target CMake Script\nDESCRIPTION: Includes another base CMake script from the Max SDK. This script performs post-target setup steps, which might include setting properties on the target, configuring installation paths, or handling platform-specific actions like code signing.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/mc/mc.rotate~/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Declaring mc.limi~ Max Object\nDESCRIPTION: This code declares a Max object file named `mc.limi~`. The object likely represents a multi-channel version of a limiter. The `mc.wrapper~` and `limi~` objects are probably dependencies. The file declares a new instance of the mc object and it's related dependencies to create a multi-channel audio effect.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/init/audio-objectmappings.txt#_snippet_0\n\nLANGUAGE: Max/MSP\nCODE:\n```\nmax objectfile mc.limi~ mc.wrapper~ limi~ mc;\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK Build Scripts with CMake\nDESCRIPTION: Includes pre-target and post-target CMake scripts from the MAX SDK base directory to set up and finalize the build environment. This modularizes the build process and allows sharing common configurations across projects.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.peek~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n...\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script (CMake)\nDESCRIPTION: Includes a script provided by the Max SDK that performs common setup steps before the main build target is defined. This script typically sets up necessary variables, compiler options, and platform-specific configurations required by the SDK.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/iter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target CMAKE Script\nDESCRIPTION: Includes another CMAKE script from the Max SDK base. This script typically performs actions or sets properties that are applied after the main library target has been defined, such as setting installation rules or configuring platform-specific build options.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/howbigisyourp/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMAKE\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK Base Configuration with CMake\nDESCRIPTION: Includes a pre-target CMake script from the max-sdk-base directory to set up base environment variables, macros, or configurations before defining the current target. This inclusion ensures consistent base settings for the build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simplejs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-target CMake Script\nDESCRIPTION: Includes the standard Max SDK pre-target CMake script. This script typically handles setup tasks before defining the main project target, such as setting up build configurations or common variables. It's required for integrating with the Max SDK build system.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/index~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating MAX SDK External Module Target with CMake\nDESCRIPTION: Defines a library target named by the variable PROJECT_NAME with the MODULE type, using all source files collected in PROJECT_SRC. This target represents the external module to be built as a dynamically loadable component within the MAX environment.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.alphablend/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Pre-Target Script - CMake\nDESCRIPTION: Includes a standard CMake script provided by the Cycling '74 Max SDK. This script is typically executed before defining the main project target and performs initial setup, configuration, or defines variables necessary for building a Max external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/dspstress~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining source files for Max External in CMake\nDESCRIPTION: This snippet uses the `file(GLOB)` command to collect all `.h`, `.c`, and `.cpp` files in the current source directory into the `PROJECT_SRC` variable.  This variable is later used to specify the source files for the Max external library.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/plussz~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MAX External Module Library Target with CMake\nDESCRIPTION: Defines a module target for the project using the previously gathered source files. The MODULE keyword specifies a shared library suitable for dynamic linking as a MAX external. The target name is taken from the PROJECT_NAME variable set elsewhere.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simplejs/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Set include directories for Max SDK\nDESCRIPTION: Configures include directories required for building Max externals. It adds the standard Max SDK include directory, MSP include directory, and Jitter include directory to the project's include paths, enabling the project to access Max/MSP/Jitter headers.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/pictmeter~/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Module Library in CMake\nDESCRIPTION: This command defines a new library target for the Max external, specifying it's a MODULE type which indicates it is a dynamically loadable external. It uses the collected source files as inputs for compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/filebyte/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\\t${PROJECT_NAME} \n\\tMODULE\n\\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script in CMake\nDESCRIPTION: This command includes a CMake script for post-build configurations, such as copying files or registering the external with Max, after the main build process. It also depends on the relative path within the SDK structure.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/dummy/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target CMake Script\nDESCRIPTION: Includes a base CMake script from the Max SDK. This script handles common pre-target configurations necessary for building a Max external, setting up variables and build properties before the main target is defined.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/mc/mc.rotate~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Post-target Script (CMake)\nDESCRIPTION: Includes the standard Max SDK CMake script executed after defining the build target. This script likely performs final configurations, sets target properties, or handles installation details specific to Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script - CMake\nDESCRIPTION: Includes a helper CMake script from the Max SDK base directory. This script likely performs setup tasks necessary before defining the build target, such as configuring paths or setting common variables.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.change/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for Max SDK\nDESCRIPTION: Adds the necessary include directories for the Max SDK, MSP SDK, and Jitter SDK. This allows the compiler to find the header files needed for building Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/dictionary/dict.route/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script\nDESCRIPTION: Includes the 'max-pretarget.cmake' script to set up initial build configurations for the Max SDK. This establishes environment variables and dependencies needed before defining the library.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.spill/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Add Library for Max External\nDESCRIPTION: Adds a shared library target named ${PROJECT_NAME} using the specified source files. The MODULE keyword indicates that this is a dynamically linked library (Max external).\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/windowwatcher/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Pre-target Script (CMake)\nDESCRIPTION: Includes the standard Max SDK CMake script executed before defining the build target. This script likely sets up common variables or performs initial checks required by the SDK.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Max SDK Components (CMake)\nDESCRIPTION: Specifies include directories for the Max SDK components such as core, MSP, and Jitter. These paths are essential for compiling the external and resolving SDK dependencies.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.findbounds/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Post-Target Script for Final Setup\nDESCRIPTION: Includes the 'max-posttarget.cmake' script after defining the build target to finalize build configuration, such as adding necessary compile options or post-build actions.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/collect/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for the Max External Module\nDESCRIPTION: Uses GLOB to collect all header, C, and C++ source files in the current directory into a variable, preparing them for compilation into the external module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/minimum/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a module library\nDESCRIPTION: This adds a library target named ${PROJECT_NAME} of type MODULE. It uses the source files found by the GLOB command and defines a Max external as a loadable module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.3m/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Max SDK\nDESCRIPTION: Specifies the include directories required for compiling Max externals. These directories contain the header files for the Max SDK, MSP, and Jitter.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uires/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Base Script (Pre-Target)\nDESCRIPTION: Includes the pre-target CMake script from the max-sdk-base project. This script likely sets up initial configurations needed before defining the target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/dictionary/dict.route/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating a Module Library for Max External\nDESCRIPTION: This CMake snippet creates a module library for the Max external using the specified source files.  The library is created as a MODULE, which allows it to be loaded by Max as an external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.fluoride/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Configuration in CMake\nDESCRIPTION: Includes the post-target configuration script from the Max SDK base, which finalizes the build setup with platform-specific settings and installation instructions.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/dictionary/dict.strip/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Max SDK in CMake\nDESCRIPTION: Configures include directories for the Max external, incorporating paths for the core SDK, MSP, and Jitter components.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/dictionary/dict.strip/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Configuration in CMake\nDESCRIPTION: Includes the pre-target configuration script from the Max SDK base, which sets up common variables and configuration options for Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/dictionary/dict.strip/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Add Library Module CMake\nDESCRIPTION: Creates a shared library module (the Max external) using the specified source files. The `MODULE` keyword indicates that this library is intended to be loaded dynamically by Max. The project name is used as the library name.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.p.bounds/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Max SDK Headers\nDESCRIPTION: Sets include directories for various Max SDK components such as core, MSP, and Jitter, enabling the compiler to locate relevant header files required for building the external module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/minimum/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Build Script (CMake)\nDESCRIPTION: Includes a CMake script to set up pre-build configurations for the Max SDK. It establishes necessary paths and environment settings to prepare the build environment.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.findbounds/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for MAX SDK External with CMake\nDESCRIPTION: Defines directories to search for header files during compilation, including common MAX SDK headers, MSP (signal processing) headers, and JIT (Just-In-Time) component headers. This ensures that the compiler can locate all required MAX SDK interface files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/jslider/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Max SDK External Module in CMake\nDESCRIPTION: This snippet sets up include directories for the build, adding multiple paths to Max SDK header files—core headers, MSP, and JIT extensions. These directories are added to the compiler's search path to enable proper compilation of the external module source files depending on the Max SDK headers.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.split/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK base pre-target script in CMake\nDESCRIPTION: Includes an external CMake script from the Max SDK base directory to perform pre-target configuration necessary before defining the build target. This setup likely prepares environment variables and other required settings.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uisimp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Library Target\nDESCRIPTION: Defines a CMake library target with the name specified by ${PROJECT_NAME}, configured as a MODULE for Max SDK. It compiles the collected source files into an external object usable within Max.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/collect/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Max SDK\nDESCRIPTION: This CMake snippet sets the include directories for the Max SDK, MSP, and Jitter. These include directories are necessary for the compiler to find the header files required to build Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.fluoride/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Setup Script in CMake\nDESCRIPTION: This snippet includes a pre-target CMake script from the Max SDK base directory. It likely performs initial setup tasks required before defining targets, such as variable initialization or custom functions necessary for building Max externals. The script path is relative, leveraging CMAKE_CURRENT_SOURCE_DIR for locating the SDK scripts directory.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.split/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for Max External\nDESCRIPTION: Uses the `file(GLOB)` command to find all header (`.h`), C source (`.c`), and C++ source (`.cpp`) files in the current directory.  These files are then stored in the `PROJECT_SRC` variable for use in the `add_library` command. This allows the script to automatically include new source files without needing to manually update the CMakeLists.txt file.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/vexpr/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Gather Project Source Files - CMake\nDESCRIPTION: Uses the `file(GLOB)` command to find all source and header files within the current source directory with the specified extensions (.h, .c, .cpp). The paths to these files are collected and stored in the `PROJECT_SRC` variable, which will be used later to define the library target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/dspstress~/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for Max External Compilation\nDESCRIPTION: This snippet gathers all source files with extensions .h, .c, and .cpp in the current directory to be compiled into the Max external. It ensures that all relevant source code is included in the build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/scripto/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Environment for MAX SDK Module in CMake\nDESCRIPTION: This snippet sets up the include directories specifically for MAX SDK core includes, MSP signal processing includes, and JIT includes. It organizes header and source files under PROJECT_SRC using a glob pattern for .h, .c, and .cpp files. It then creates a MODULE type library target denoted by the PROJECT_NAME variable. The snippet assumes that the MAX SDK environment variables are defined and that the project is structured to work with MAX SDK pre- and post-target scripts.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/lores~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max External Build with CMake - CMake\nDESCRIPTION: This snippet defines a CMake configuration to build a Max external as a dynamically loadable module. It includes SDK-provided CMake scripts to manage pre- and post-build steps, adds include directories for the main Max SDK, MSP, and JIT APIs, collects source (.c, .cpp) and header (.h) files, and creates a target library module named after the project. Dependencies include CMake, the Max SDK, and properly set variables (e.g., MAX_SDK_INCLUDES). Key parameters are ${PROJECT_NAME} (library target), ${PROJECT_SRC} (source collection), and the provided include paths. The output is a compiled module suitable for Max; users must ensure that paths and environment variables are correctly configured.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.dimmap/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating a Loadable Module in CMake for Max/MSP External\nDESCRIPTION: Defines the build target as a loadable module (plugin) using the collected source files. The module will be used as a Max/MSP external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/folder/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Max External Module Library - CMake\nDESCRIPTION: This snippet uses the `add_library` command to define the main build target. It creates a library named after the CMake variable `PROJECT_NAME`, specifies it as a `MODULE` library (suitable for dynamic loading like Max externals), and includes all source files listed in the `PROJECT_SRC` variable, which were collected in the previous step.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.poke~/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Pre-Target Script\nDESCRIPTION: Includes a standard CMake script provided by the Max SDK. This script performs initial setup tasks or defines variables required before defining the main project target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.charmap/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max SDK Project Build - CMake\nDESCRIPTION: This CMake snippet sets up the necessary environment and rules for building a Max external module within the Cycling '74 Max SDK ecosystem. It includes the required SDK scripts, configures include directories for Max, MSP, and Jitter components, collects all C, C++, and header files as project sources, and generates a shared module library. Dependencies include the Max SDK base scripts, and key parameters are the project name and path variables (such as MAX_SDK_INCLUDES). Inputs will be the available source files in the specified directory, output is a compiled external module shared library. This configuration assumes prior setup of CMake variables relating to the SDK and proper file structure alignment with Max external conventions.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/split~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK base pre-target CMake script\nDESCRIPTION: This line includes a CMake script that likely performs pre-target setup tasks specific to the Max SDK environment. This script is necessary for proper configuration before adding targets.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.3m/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Post-Target Script (CMake)\nDESCRIPTION: Includes another CMake script from the Max SDK base library, executed *after* the library target has been defined. This script likely handles post-build steps, such as setting output directories, installing files, or applying platform-specific settings for Max externals. It also depends on `CMAKE_CURRENT_SOURCE_DIR`.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/plussz2/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for Max External in CMake\nDESCRIPTION: Uses file(GLOB) to collect all header and source files in the current directory for compilation into the Max external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/dictionary/dict.strip/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Pre-Target Script - CMake\nDESCRIPTION: Includes a standard CMake script provided by the Max SDK base before the main target is defined. This script typically handles common setup and configuration steps required for building a Max external prior to the library declaration.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/simplemsp~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Glob Source Files CMake\nDESCRIPTION: Uses the `file(GLOB)` command to collect all header (`.h`), C source (`.c`), and C++ source (`.cpp`) files in the current directory.  These files will be compiled into the Max external.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.p.bounds/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for Max External\nDESCRIPTION: Uses 'file(GLOB ...)' to collect all header and source files (*.h, *.c, *.cpp) in the current directory, preparing them for compilation into the external module.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/collect/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t\"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Library Target\nDESCRIPTION: This snippet defines the build target for the Max external as a module library, linking all collected source files. It uses the project name and specifies 'MODULE' to generate a dynamically loadable external plugin.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/scripto/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Header Paths - CMake\nDESCRIPTION: Specifies the directories where the compiler should look for header files from the Max SDK (base, MSP, JIT). These paths are typically defined by variables set in the Max SDK configuration or by the included max-pretarget.cmake script, ensuring necessary headers are found during compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.scissors/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Pre-Build Script for MAX SDK External Module in CMake\nDESCRIPTION: Includes a pre-target CMake script from the max-sdk-base directory to set up necessary build configurations before processing the current module. This script is required to initialize variables or settings specific to the MAX SDK build process.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/fftinfo~/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Max SDK\nDESCRIPTION: This snippet adds multiple Max SDK include directories required for compilation, such as core SDK includes, MSP (signal processing), and JIT (Just-In-Time) components. It ensures headers are available during compilation.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.str.op/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Post-Target Script - CMake\nDESCRIPTION: Includes a second standard CMake script from the Max SDK, which is typically executed after the main project target has been defined. This script may perform final configuration, set build properties specific to Max externals, or handle installation rules.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/audio/dspstress~/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files and Creating Max External Module Library in CMake\nDESCRIPTION: This snippet uses `file(GLOB ...)` to collect all header and source files with .h, .c, and .cpp extensions in the current directory. It then defines a library target named according to PROJECT_NAME, specifying it as a MODULE type suitable for Max externals and linking the gathered source files. This modular configuration supports the building of the external during CMake's build generation phase.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.split/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Assigning Help Categories to mc.limi~ Object in Max/MSP\nDESCRIPTION: These lines configure the help system categories for the 'mc.limi~' Max/MSP object. The 'max classnamehelpcategory' directive associates the object name ('mc.limi~') with specific help categories ('mcwrap' and 'mcmess'), making it easier for users to locate relevant documentation and help files within the Max environment.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/init/mc-helpconfig.txt#_snippet_0\n\nLANGUAGE: Max/MSP\nCODE:\n```\nmax classnamehelpcategory mc.limi~               mcwrap;\nmax classnamehelpcategory mc.limi~               mcmess;\n```\n\n----------------------------------------\n\nTITLE: Define Max External Library Target (CMake)\nDESCRIPTION: Defines the CMake build target for the Max external using `add_library`. It specifies the target name (`${PROJECT_NAME}`, usually set elsewhere), type (`MODULE` indicating a dynamic library/plugin), and includes all source files collected in `PROJECT_SRC`.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Post-configuration Script for Max SDK in CMake\nDESCRIPTION: This snippet includes a post-target script from the Max SDK base directory, likely used for final build steps such as linking, post-processing, or registering the external with the Max environment.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/filebyte/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining a module library target for MAX external in CMake\nDESCRIPTION: Adds a new library target named after ${PROJECT_NAME} with the MODULE keyword, indicating it is a loadable plugin (external) module. It specifies the source file uisimp.c as the primary source for this target. This setup produces a dynamic library suitable for loading into Max.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uisimp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\tuisimp.c\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Module Target (CMake)\nDESCRIPTION: Defines a CMake library target named after the project, built as a MODULE (shared object) for Max. It links the collected source files and is used to generate the external object used in Max.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.findbounds/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Include Max SDK Base Scripts CMake\nDESCRIPTION: Includes pre-target and post-target CMake scripts from the Max SDK base directory. These scripts likely contain common setup and teardown tasks for Max external build processes.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.p.bounds/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Max External (CMake)\nDESCRIPTION: Configures the build output directory for the Max external library. This sets the CMake variable `C74_LIBRARY_OUTPUT_DIRECTORY` to a relative path, placing the compiled library in an 'externals' folder four directories up from the current source directory, which is a common location for Max externals.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/dllexample/dllreport/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(C74_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/../../../../externals\")\n```\n\n----------------------------------------\n\nTITLE: Finding Project Source Files - CMake\nDESCRIPTION: This snippet uses the `file` command with the `GLOB` subcommand to find all files matching the specified patterns (`*.h`, `*.c`, `*.cpp`) in the current source directory. The resulting list of file paths is stored in the CMake variable `PROJECT_SRC`, which will be used later to define the library source files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.poke~/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK Header and Source Directories\nDESCRIPTION: Adds the SDK include directories necessary for compiling Max externals, including core, MSP, and Jitter SDK components. Ensures the compiler can find required headers.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.spill/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories in CMake for Max\nDESCRIPTION: This snippet configures include directories required for building Max external projects. It uses the MAX_SDK_INCLUDES, MAX_SDK_MSP_INCLUDES, and MAX_SDK_JIT_INCLUDES variables, which are expected to be defined within the max-sdk. These variables point to the include paths where the necessary headers for Max SDK, MSP, and JIT are stored.  This ensures the compiler can find the required header files.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uioptimized/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including MAX SDK Pre-Target Script with CMake\nDESCRIPTION: Includes the MAX SDK pretarget script which prepares the build environment before processing sources and targets. This inclusion ensures necessary base setup for building MAX externals. The path is specified relative to the current source directory.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.alphablend/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding MAX External Module Library Target in CMake (CMake)\nDESCRIPTION: Defines a module library target for the project named ${PROJECT_NAME} to be built from the collected source files in PROJECT_SRC. Using MODULE indicates a shared library suitable for use as a MAX external. The variable PROJECT_NAME must be predefined before this step. This target encapsulates compilation and linking configurations.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.unpack/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Library\nDESCRIPTION: Creates a shared library (MODULE) named `${PROJECT_NAME}` using the source files gathered in `PROJECT_SRC`. The `MODULE` type is specific to Max externals. PROJECT_NAME is expected to be defined before this call.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/misc/vexpr/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Max External Module Target (CMAKE)\nDESCRIPTION: Creates a library target named `${PROJECT_NAME}`. The `MODULE` type is specified, indicating it should be built as a dynamically loadable module, suitable for a Max external. The source files listed in the `PROJECT_SRC` variable are compiled into this target.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/patcher/howbigisyourp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMAKE\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files Using CMake File GLOB\nDESCRIPTION: Uses the file GLOB command to collect all header (.h), C (.c), and C++ (.cpp) source files in the current directory. This dynamically gathers source files to be compiled without manually listing each file, facilitating easier maintenance.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/basics/simplejs/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Max External Library in CMake\nDESCRIPTION: This snippet creates the Max external library using the add_library() command. It defines the library type as MODULE, indicating a dynamically loadable module, sets the name of the library based on the PROJECT_NAME variable, and specifies the source files using the PROJECT_SRC variable which was defined earlier. This step links all source files together to create the final shared library.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uioptimized/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Max External Library Module in CMake\nDESCRIPTION: Defines the library target as a module using the collected source files. The target name is derived from PROJECT_NAME variable.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/advanced/simplethread/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Max/MSP/Jitter External\nDESCRIPTION: This CMake script configures the build for a Max external. It includes the SDK paths, sets up include directories for Max, MSP, and Jitter frameworks, gathers all source files in the current directory, and defines the project as a MODULE library. The script utilizes pre-target and post-target scripts from the max-sdk-base for standardized build configurations.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/matrix/jit.thin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\n\n#############################################################\n# MAX EXTERNAL\n#############################################################\n\ninclude_directories( \n\t\"${MAX_SDK_INCLUDES}\"\n\t\"${MAX_SDK_MSP_INCLUDES}\"\n\t\"${MAX_SDK_JIT_INCLUDES}\"\n)\n\nfile(GLOB PROJECT_SRC\n     \"*.h\"\n\t \"*.c\"\n     \"*.cpp\"\n)\nadd_library( \n\t${PROJECT_NAME} \n\tMODULE\n\t${PROJECT_SRC}\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Max SDK CMake Modules\nDESCRIPTION: Includes pre-target and post-target CMake modules to manage build configuration for Max externals. These modules likely handle common tasks like setting compiler flags and installation paths.\nSOURCE: https://github.com/cycling74/max-sdk/blob/main/source/ui/uires/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-pretarget.cmake)\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../../max-sdk-base/script/max-posttarget.cmake)\n```"
  }
]