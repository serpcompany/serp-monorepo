[
  {
    "owner": "ponyorm",
    "repo": "pony-doc",
    "content": "TITLE: Defining Entity Classes\nDESCRIPTION: Creating Person and Car entities with attributes and relationships\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> class Person(db.Entity):\n...     name = Required(str)\n...     age = Required(int)\n...     cars = Set('Car')\n... \n>>> class Car(db.Entity):\n...     make = Required(str)\n...     model = Required(str)\n...     owner = Required(Person)\n... \n>>>\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Queries with PonyORM's select Function in Python\nDESCRIPTION: Demonstrates writing a simple query to select persons older than 20 years. The select function creates a Query object that gets executed when iteration begins, translating the Python generator expression into SQL.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> select(p for p in Person if p.age > 20)\n<pony.orm.core.Query at 0x105e74d10>\n```\n\n----------------------------------------\n\nTITLE: Creating a Database and Basic Entity in Pony ORM - Python\nDESCRIPTION: Demonstrates how to create a Database object and define a simple entity. The Database object must be created first, as all entities belong to a database. Entities inherit from the db.Entity class.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pony.orm import *\n\ndb = Database()\n\nclass MyEntity(db.Entity):\n    attr1 = Required(str)\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Instances in Pony ORM\nDESCRIPTION: Creates a new Customer entity instance using keyword arguments. All created instances belong to the current db_session and are automatically saved when the session ends.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncustomer1 = Customer(login=\"John\", password=\"***\",\n                     name=\"John\", email=\"john@google.com\")\n```\n\n----------------------------------------\n\nTITLE: Executing Queries and Viewing Results in PonyORM Python\nDESCRIPTION: Shows how to execute a query and view the results using the slice operator. This example displays the SQL that was generated and the list of retrieved Person objects with IDs.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> select(p for p in Person if p.age > 20)[:]\n\nSELECT \"p\".\"id\", \"p\".\"name\", \"p\".\"age\"\nFROM \"Person\" \"p\"\nWHERE \"p\".\"age\" > 20\n\n[Person[2], Person[3]]\n```\n\n----------------------------------------\n\nTITLE: Querying Database Using Python Generator Expression in Pony ORM\nDESCRIPTION: This snippet demonstrates how to write a database query in Pony ORM using Python generator expression syntax. The query retrieves all customers whose total order values exceed 1000.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nselect(c for c in Customer if sum(c.orders.total_price) > 1000)\n```\n\n----------------------------------------\n\nTITLE: Using db_session Decorator for Function-based Database Interaction in Python\nDESCRIPTION: Demonstrates how to use the db_session decorator to manage database connections and transactions automatically. The decorated functions handle person and car data with automatic commit, rollback, connection return to pool, and session cache clearing.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@db_session\ndef add_car(person_id, make, model):\n    Car(make=make, model=model, owner=Person[person_id])\n    # commit() will be done automatically\n    # database session cache will be cleared automatically\n    # database connection will be returned to the pool\n```\n\n----------------------------------------\n\nTITLE: Database Connection Examples\nDESCRIPTION: Examples of binding different database providers including SQLite, PostgreSQL, MySQL, Oracle, and CockroachDB\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# SQLite\ndb.bind(provider='sqlite', filename=':sharedmemory:')\n# or\ndb.bind(provider='sqlite', filename='database.sqlite', create_db=True)\n\n# PostgreSQL\ndb.bind(provider='postgres', user='', password='', host='', database='')\n\n# MySQL\ndb.bind(provider='mysql', host='', user='', passwd='', db='')\n\n# Oracle\ndb.bind(provider='oracle', user='', password='', dsn='')\n\n# CockroachDB\ndb.bind(provider='cockroach', user='', password='', host='', database='', )\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Functions for Queries in Pony ORM\nDESCRIPTION: Shows an alternative syntax for querying using lambda functions instead of generator expressions. This approach can only return entity instances, not specific attributes or tuples.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nCustomer.select(lambda c: sum(c.orders.price) > 1000)\n```\n\n----------------------------------------\n\nTITLE: Integrating Pony ORM with Flask-Login\nDESCRIPTION: This example shows how to set up a Flask application with Pony ORM and Flask-Login for user authentication. It defines a User entity that inherits from db.Entity and UserMixin, configures the database connection, and sets up the login manager.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/integration_with_flask.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, render_template\nfrom flask_login import LoginManager, UserMixin, login_required\nfrom pony.flask import Pony\nfrom pony.orm import Database, Required, Optional\nfrom datetime import datetime\n\napp = Flask(__name__)\napp.config.update(dict(\n    DEBUG = False,\n    SECRET_KEY = 'secret_xxx',\n    PONY = {\n        'provider': 'sqlite',\n        'filename': 'db.db3',\n        'create_db': True\n    }\n))\n\ndb = Database()\n\nclass User(db.Entity, UserMixin):\n    login = Required(str, unique=True)\n    password = Required(str)\n    last_login = Optional(datetime)\n    \ndb.bind(**app.config['PONY'])\ndb.generate_mapping(create_tables=True)\n\nPony(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return db.User.get(id=user_id)\n```\n\n----------------------------------------\n\nTITLE: Basic Generator Expression Query in Pony ORM\nDESCRIPTION: A basic example of using Python generator expressions to query customers with orders totaling more than 1000. This demonstrates how Pony ORM translates Python syntax to SQL queries.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nquery = select(c for c in Customer\n               if sum(o.total_price for o in c.orders) > 1000)\n```\n\n----------------------------------------\n\nTITLE: Money Transfer using Optimistic Checks in Pony ORM\nDESCRIPTION: Implementation of a money transfer function in Pony ORM using the default optimistic concurrency control, which provides high concurrency without explicit locking.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@db_session\ndef transfer_money(account_id1, account_id2, amount):\n    account1 = Account[account_id1]\n    account2 = Account[account_id2]\n    if amount > account1.amount:\n        raise ValueError(\"Not enough funds\")\n    account1.amount -= amount\n    account2.amount += amount\n```\n\n----------------------------------------\n\nTITLE: Ordering and Limiting Query Results in PonyORM Python\nDESCRIPTION: Demonstrates how to order query results by name and limit the number of results using the order_by method and slice operator. Shows the corresponding SQL query that gets generated.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> select(p for p in Person).order_by(Person.name)[:2]\n\nSELECT \"p\".\"id\", \"p\".\"name\", \"p\".\"age\"\nFROM \"Person\" \"p\"\nORDER BY \"p\".\"name\"\nLIMIT 2\n\n[Person[3], Person[1]]\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPI with PonyORM Database Connection\nDESCRIPTION: Basic setup code for connecting PonyORM to FastAPI application using Pydantic settings for configuration management. Demonstrates database binding and mapping generation.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/integration_with_fastapi.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fastapi\nfrom src.config import Settings\nfrom src.models import db\n\nsettings = Settings()\napi = fastapi.FastAPI()\ndb.bind(**settings.get_connection)\ndb.generate_mapping(create_tables=True)\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Relationship Definition in Python using Pony ORM\nDESCRIPTION: Demonstrates how to define a basic relationship between Customer and Order entities using Set and Required attributes. Shows both string-based and lambda-based relationship definitions.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/relationships.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Customer(db.Entity):\n    orders = Set('Order')\n\nclass Order(db.Entity):\n    customer = Required(Customer)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Customer(db.Entity):\n    orders = Set(lambda: Order)\n```\n\n----------------------------------------\n\nTITLE: Using db_session as Context Manager in Python\nDESCRIPTION: Shows how to use db_session as a context manager instead of a decorator. Within the context, database operations are performed with automatic transaction handling, connection management, and session cache clearing.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith db_session:\n    p = Person(name='Kate', age=33)\n    Car(make='Audi', model='R8', owner=p)\n    # commit() will be done automatically\n    # database session cache will be cleared automatically\n    # database connection will be returned to the pool\n```\n\n----------------------------------------\n\nTITLE: Querying Database Using Lambda Function in Pony ORM\nDESCRIPTION: This snippet shows how to write a database query in Pony ORM using a lambda function. This alternative syntax achieves the same result as the generator expression, returning customers whose total orders exceed 1000.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCustomer.select(lambda c: sum(c.orders.total_price) > 1000)\n```\n\n----------------------------------------\n\nTITLE: Money Transfer using SELECT FOR UPDATE in Pony ORM\nDESCRIPTION: Implementation of a money transfer function in Pony ORM using the pessimistic locking approach with get_for_update to prevent concurrent modifications.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@db_session\ndef transfer_money(account_id1, account_id2, amount):\n    account1 = Account.get_for_update(id=account_id1)\n    account2 = Account.get_for_update(id=account_id2)\n    if amount > account1.amount:\n        raise ValueError(\"Not enough funds\")\n    account1.amount -= amount\n    account2.amount += amount\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Attributes with Required and Optional Types - Python\nDESCRIPTION: Shows how to define entity attributes using Required and Optional kinds. The example creates a Customer entity with a required name and a unique required email attribute.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Customer(db.Entity):\n    name = Required(str)\n    email = Required(str, unique=True)\n```\n\n----------------------------------------\n\nTITLE: Using db_session Decorator for Database Access\nDESCRIPTION: Example of using the @db_session decorator to check if a user exists in the database. The decorator handles transaction management and connection pooling automatically.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@db_session\ndef check_user(username):\n    return User.exists(username=username)\n```\n\n----------------------------------------\n\nTITLE: Running Complex Group-By Query with Ordering in PonyORM Python\nDESCRIPTION: Shows a more complex query that groups customers by country, counts them, orders by the count in descending order, and returns the first result. Demonstrates the power of PonyORM's query language.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> select((customer.country, count(customer))\n...        for customer in Customer).order_by(-2).first()\n\nSELECT \"customer\".\"country\", COUNT(DISTINCT \"customer\".\"id\")\nFROM \"Customer\" \"customer\"\nGROUP BY \"customer\".\"country\"\nORDER BY 2 DESC\nLIMIT 1\n```\n\n----------------------------------------\n\nTITLE: eStore Example Entity Definitions in Pony ORM\nDESCRIPTION: Complete entity definitions for the eCommerce store example, showing the database schema with Customer, Product, CartItem, OrderItem, Order, and Category entities.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom decimal import Decimal\nfrom datetime import datetime\n\nfrom pony.converting import str2datetime\nfrom pony.orm import *\n\ndb = Database()\n\nclass Customer(db.Entity):\n    email = Required(str, unique=True)\n    password = Required(str)\n    name = Required(str)\n    country = Required(str)\n    address = Required(str)\n    cart_items = Set('CartItem')\n    orders = Set('Order')\n\nclass Product(db.Entity):\n    id = PrimaryKey(int, auto=True)\n    name = Required(str)\n    categories = Set('Category')\n    description = Optional(str)\n    picture = Optional(buffer)\n    price = Required(Decimal)\n    quantity = Required(int)\n    cart_items = Set('CartItem')\n    order_items = Set('OrderItem')\n\nclass CartItem(db.Entity):\n    quantity = Required(int)\n    customer = Required(Customer)\n    product = Required(Product)\n\nclass OrderItem(db.Entity):\n    quantity = Required(int)\n    price = Required(Decimal)\n    order = Required('Order')\n    product = Required(Product)\n    PrimaryKey(order, product)\n\nclass Order(db.Entity):\n    id = PrimaryKey(int, auto=True)\n    state = Required(str)\n    date_created = Required(datetime)\n    date_shipped = Optional(datetime)\n    date_delivered = Optional(datetime)\n    total_price = Required(Decimal)\n    customer = Required(Customer)\n    items = Set(OrderItem)\n\nclass Category(db.Entity):\n    name = Required(str, unique=True)\n    products = Set(Product)\n\nset_sql_debug(True)\ndb.bind('sqlite', 'estore.sqlite', create_db=True)\ndb.generate_mapping(create_tables=True)\n```\n\n----------------------------------------\n\nTITLE: Bulk Delete in Pony ORM\nDESCRIPTION: Demonstrates two ways to perform bulk delete operations without loading objects into memory.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndelete(p for p in Product if p.category.name == 'SD Card')\n#or\nProduct.select(lambda p: p.category.name == 'SD Card').delete(bulk=True)\n```\n\n----------------------------------------\n\nTITLE: Updating Objects and Committing Changes in PonyORM Python\nDESCRIPTION: Shows how to update an object's attribute and commit the changes to the database. Pony tracks changed attributes and only saves those that were modified during the session.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> mary.age += 1\n>>> commit()\n```\n\n----------------------------------------\n\nTITLE: Join Query with DISTINCT Handling\nDESCRIPTION: Example of querying objects using joins with automatic duplicate elimination\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nselect(p for p in Person for c in p.cars if c.make in (\"Toyota\", \"Honda\"))\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT \"p\".\"id\", \"p\".\"name\", \"p\".\"age\"\nFROM \"Person\" \"p\", \"Car\" \"c\"\nWHERE \"c\".\"make\" IN ('Toyota', 'Honda')\n  AND \"p\".\"id\" = \"c\".\"owner\"\n```\n\n----------------------------------------\n\nTITLE: Basic Object Query in Python with Pony ORM\nDESCRIPTION: Example of retrieving Person objects using criteria filtering with automatic duplicate handling.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nPerson.select(lambda p: p.age > 20 and p.name == 'John')\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"p\".\"id\", \"p\".\"name\", \"p\".\"age\"\nFROM \"Person\" \"p\"\nWHERE \"p\".\"age\" > 20\n  AND \"p\".\"name\" = 'John'\n```\n\n----------------------------------------\n\nTITLE: Using db_session Context Manager\nDESCRIPTION: Example showing how to use db_session as a context manager with the 'with' statement for database operations.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef process_request():\n    ...\n    with db_session:\n        u = User.get(username=username)\n        ...\n```\n\n----------------------------------------\n\nTITLE: Locking a Single Object with get_for_update in Pony ORM\nDESCRIPTION: Example of pessimistic locking for a single object using the get_for_update method, which locks the corresponding row in the database until the transaction completes.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nProduct.get_for_update(id=123)\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Query Parameters in PonyORM\nDESCRIPTION: Demonstrates using parameters in raw SQL queries with PonyORM's $ syntax for safe parameter binding.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/database.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nx = \"John\"\ndata = db.select(\"select * from Person where name = $x\")\n\ndata = db.select(\"select * from Person where name = $x\", {\"x\" : \"Susan\"})\n\ndata = db.select(\"select * from Person where name = $(x.lower()) and age > $(y + 2)\")\n```\n\n----------------------------------------\n\nTITLE: Using raw_sql for SQL Functions in Pony ORM Queries\nDESCRIPTION: Shows how to use the raw_sql function to include database-specific SQL fragments in queries, particularly useful for date/time functions.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nselect(m for m in DBVoteMessage if m.date >= raw_sql(\"NOW() - '1 minute'::INTERVAL\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Instances\nDESCRIPTION: Example of creating and committing Person and Car instances to the database\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> p1 = Person(name='John', age=20)\n>>> p2 = Person(name='Mary', age=22)\n>>> p3 = Person(name='Bob', age=30)\n>>> c1 = Car(make='Toyota', model='Prius', owner=p2)\n>>> c2 = Car(make='Ford', model='Explorer', owner=p3)\n>>> commit()\n```\n\n----------------------------------------\n\nTITLE: Example Queries in Pony ORM using eStore Model\nDESCRIPTION: Collection of example queries that demonstrate various querying capabilities of Pony ORM, including filtering, aggregation, ordering, joins, and working with related entities.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# All USA customers\nCustomer.select(lambda c: c.country == 'USA')\n\n# The number of customers for each country\nselect((c.country, count(c)) for c in Customer)\n\n# Max product price\nmax(p.price for p in Product)\n\n# Max SSD price\nmax(p.price for p in Product\n            for cat in p.categories if cat.name == 'Solid State Drives')\n\n# Three most expensive products\nProduct.select().order_by(desc(Product.price))[:3]\n\n# Out of stock products\nProduct.select(lambda p: p.quantity == 0)\n\n# Most popular product\nProduct.select().order_by(lambda p: desc(sum(p.order_items.quantity))).first()\n\n# Products that have never been ordered\nProduct.select(lambda p: not p.order_items)\n\n# Customers who made several orders\nCustomer.select(lambda c: count(c.orders) > 1)\n\n# Three most valuable customers\nCustomer.select().order_by(lambda c: desc(sum(c.orders.total_price)))[:3]\n\n# Customers whose orders were shipped\nCustomer.select(lambda c: SHIPPED in c.orders.state)\n\n# Customers with no orders\nCustomer.select(lambda c: not c.orders)\n\n# The same query with the LEFT JOIN instead of NOT EXISTS\nleft_join(c for c in Customer for o in c.orders if o is None)\n\n# Customers which ordered several different tablets\nselect(c for c in Customer\n         for p in c.orders.items.product\n         if 'Tablets' in p.categories.name and count(p) > 1)\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Entities with select() Method\nDESCRIPTION: Uses the select() method with a lambda function to retrieve multiple entities based on specified conditions. The lambda is translated to SQL and returns a Query object.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nproducts = Product.select(lambda p: p.price > 100)\n```\n\n----------------------------------------\n\nTITLE: Using count() Function in Pony ORM for Counting Entities\nDESCRIPTION: Shows how to use the count() function to count the number of students with a GPA above three.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncount(s for s in Student if s.gpa > 3)\n```\n\n----------------------------------------\n\nTITLE: Complete Entity Definition with Relationships\nDESCRIPTION: Shows full entity definitions including data attributes and database configuration for Person and Car entities.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_relationships.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pony.orm import *\n\ndb = Database()\n\nclass Person(db.Entity):\n    name = Required(str)\n    cars = Set('Car')\n\nclass Car(db.Entity):\n    make = Required(str)\n    model = Required(str)\n    owner = Optional(Person)\n\ndb.bind('sqlite', ':memory:')\ndb.generate_mapping(create_tables=True)\n```\n\n----------------------------------------\n\nTITLE: Declaring a JSON attribute in Pony ORM\nDESCRIPTION: Shows how to import and declare entities with JSON attributes in Pony ORM. Creates a Product entity with JSON fields for info and tags.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pony.orm import *\n\ndb = Database()\n\n\nclass Product(db.Entity):\n    id = PrimaryKey(int, auto=True)\n    name = Required(str)\n    info = Required(Json)\n    tags = Optional(Json)\n\n\ndb.bind('sqlite', ':memory:', create_db=True)\ndb.generate_mapping(create_tables=True)\n```\n\n----------------------------------------\n\nTITLE: Loading Entity by Primary Key in Pony ORM\nDESCRIPTION: Retrieves an entity instance by its primary key using square bracket notation. This will raise an ObjectNotFound exception if no object with that key exists.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncustomer1 = Customer[123]\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Pony ORM Queries\nDESCRIPTION: Demonstrates how to use Python variables in lambda queries. Pony passes these as parameters to the SQL query, providing protection from SQL injection.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nx = 100\nproducts = Product.select(lambda p: p.price > x)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Aggregate Functions in One Query\nDESCRIPTION: Shows how to use multiple aggregate functions (min and max) in the same query to get the lowest and highest GPA for each group.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT s.group_number, MIN(s.gpa), MAX(s.gpa)\nFROM Student s\nGROUP BY s.group_number\n```\n\n----------------------------------------\n\nTITLE: Defining PonyORM Entity Models\nDESCRIPTION: Example of defining basic PonyORM entity models for Person and Car with relationships between them. Shows required fields and relationship definitions.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/integration_with_fastapi.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    name = Required(str)\n    age = Required(int)\n    cars = Set('Car')\n\nclass Car(db.Entity):\n    make = Required(str)\n    model = Required(str)\n    owner = Required(Person)\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with Custom Primary Key - Python\nDESCRIPTION: Shows how to define an entity with a custom primary key. This example uses the email attribute as the primary key for a Customer entity instead of using the default auto-incremented integer id.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Customer(db.Entity):\n   email = PrimaryKey(str)\n   name = Required(str)\n```\n\n----------------------------------------\n\nTITLE: Querying JSON structures with Pony ORM\nDESCRIPTION: Shows how to filter entities based on nested JSON values. Demonstrates accessing nested values within JSON attributes for query conditions.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# products with display size greater than 5\nProduct.select(lambda p: p.info['display']['size'] > 5)\n```\n\n----------------------------------------\n\nTITLE: Pony ORM Aggregation Query with Group By\nDESCRIPTION: A Pony ORM query using aggregation that returns both non-aggregated (s.group) and aggregated (count(s)) values. The non-aggregated value will be automatically added to the GROUP BY clause.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nselect((s.group, count(s)) for s in Student\n       if s.group.dept.number == 44 and avg(s.gpa) > 4)\n```\n\n----------------------------------------\n\nTITLE: Basic Many-to-Many Relationship in Pony ORM\nDESCRIPTION: Defines a many-to-many relationship between Student and Course entities using Set attributes. The example includes a composite primary key for the Course entity.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass Student(db.Entity):\n    name = Required(str)\n    courses = Set(\"Course\")\n\nclass Course(db.Entity):\n    name = Required(str)\n    semester = Required(int)\n    students = Set(Student)\n    PrimaryKey(name, semester)\n```\n\n----------------------------------------\n\nTITLE: Using Pessimistic Locking with for_update in Pony ORM\nDESCRIPTION: Example showing how to implement pessimistic locking in Pony ORM using the for_update method to prevent concurrent modifications to the same records.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nselect(p for p in Product if p.price > 100).for_update()\n```\n\n----------------------------------------\n\nTITLE: Querying JSON with parameters in Pony ORM\nDESCRIPTION: Demonstrates using parameters in JSON queries to filter data based on dynamic values. Shows how to reference specific array elements and use dynamic keys.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nx = 2048\n# products with width resolution greater or equal to x\nProduct.select(lambda p: p.info['display']['resolution'][0] >= x)\n```\n\n----------------------------------------\n\nTITLE: Using sum() Function in Pony ORM for Aggregation\nDESCRIPTION: Demonstrates how to use the sum() function to calculate the total GPA of students from a specific group.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsum(s.gpa for s in Student if s.group.number == 101)\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Relationship Definition in Pony ORM\nDESCRIPTION: Demonstrates how to create many-to-many relationships between Product and Tag entities using Set attributes on both sides.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/relationships.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Product(db.Entity):\n    tags = Set(\"Tag\")\n\nclass Tag(db.Entity):\n    products = Set(Product)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Objects by Attributes with get() Method in PonyORM Python\nDESCRIPTION: Shows how to retrieve objects by non-primary key attributes using the get() method. Even for cached objects, this requires a database query unless the attribute is a unique key.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> mary = Person.get(name='Mary')\n\nSELECT \"id\", \"name\", \"age\"\nFROM \"Person\"\nWHERE \"name\" = ?\n[u'Mary']\n\n>>> print mary.age\n22\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions Inside a Query\nDESCRIPTION: Demonstrates how to find students with the maximum birth date in a specific group by using an aggregate function inside a select query.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nselect(s for s in Student if s.group.number == 101\n               and s.dob == max(s.dob for s in Student\n                                            if s.group.number == 101))\n```\n\n----------------------------------------\n\nTITLE: Money Transfer using SERIALIZABLE Isolation in Pony ORM\nDESCRIPTION: Implementation of a money transfer function in Pony ORM using the SERIALIZABLE isolation level to prevent lost updates by ensuring transaction serialization.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@db_session(serializable=True)\ndef transfer_money(account_id1, account_id2, amount):\n    account1 = Account[account_id1]\n    account2 = Account[account_id2]\n    if amount > account1.amount:\n        raise ValueError(\"Not enough funds\")\n    account1.amount -= amount\n    account2.amount += amount\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions in ORDER BY with Pony ORM\nDESCRIPTION: A Pony ORM query demonstrating how to use aggregate functions (avg(s.gpa)) inside the order_by method with the desc function to sort in descending order.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nselect((s.group, avg(s.gpa)) for s in Student) \\\n        .order_by(lambda s: desc(avg(s.gpa)))\n```\n\n----------------------------------------\n\nTITLE: Creating New Queries Based on Existing Queries in Pony ORM\nDESCRIPTION: Demonstrates creating a new query based on the results of an existing query, allowing for sequential filtering and data transformation.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nquery3 = select(customer.name for customer in query2\n                if customer.country == 'Canada')\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Instances in Pony ORM\nDESCRIPTION: Shows how to update an entity instance by simply assigning new values to attributes. Changes are automatically tracked and saved when the db_session ends.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Using Datetime Attributes in Pony ORM Queries\nDESCRIPTION: Shows how to access datetime attributes like month, hour, etc. in queries, which Pony translates to appropriate SQL for extracting these components.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nselect(o for o in Order if o.date_created.month == 12)\n```\n\n----------------------------------------\n\nTITLE: Traversing Relationships in Pony ORM\nDESCRIPTION: Shows how to traverse object relationships in Pony, demonstrating Pony's lazy loading approach using 'seed' objects to optimize database access.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\norder = Order[123]\ncustomer = order.customer\nprint customer.name\n```\n\n----------------------------------------\n\nTITLE: Implementing Hybrid Methods and Properties in Pony ORM\nDESCRIPTION: Demonstrates the use of hybrid methods and properties in Pony ORM entities that can be used in queries. This example shows various property implementations including relationship-based calculations and custom query methods.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    first_name = Required(str)\n    last_name = Required(str)\n    cars = Set(lambda: Car)\n\n    @property\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n\n    @property\n    def has_car(self):\n        return not self.cars.is_empty()\n\n    def cars_by_color(self, color):\n        return select(car for car in self.cars if car.color == color)\n        # or return self.cars.select(lambda car: car.color == color)\n\n    @property\n    def cars_price(self):\n        return sum(c.price for c in self.cars)\n        \n    \nclass Car(db.Entity):\n    brand = Required(str)\n    model = Required(str)\n    owner = Optional(Person)\n    year = Required(int)\n    price = Required(int)\n    color = Required(str)\n        \nwith db_session:\n    # persons' full name\n    select(p.full_name for p in Person)\n        \n    # persons who have a car\n    select(p for p in Person if p.has_car)\n        \n    # persons who have yellow cars\n    select(p for p in Person if count(p.cars_by_color('yellow')) > 1)\n        \n    # sum of all cars that have owners\n    sum(p.cars_price for p in Person)\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Attributes from Entities in PonyORM Python\nDESCRIPTION: Shows how to select only specific attributes rather than entire entity objects. This example retrieves only the names of persons whose age is not 30.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> select(p.name for p in Person if p.age != 30)[:]\n\nSELECT DISTINCT \"p\".\"name\"\nFROM \"Person\" \"p\"\nWHERE \"p\".\"age\" <> 30\n\n[u'John', u'Mary']\n```\n\n----------------------------------------\n\nTITLE: Handling Async Operations with PonyORM Sessions\nDESCRIPTION: Example of proper async function implementation with PonyORM db_session context manager. Shows correct pattern for combining async operations with database access.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/integration_with_fastapi.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def func():\n    with db_session:\n        thing = database.MyEntity()\n    await async_func(ABC, thing)\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relationship Definition in Pony ORM\nDESCRIPTION: Shows how to define one-to-many relationships between Order and OrderItem entities, with both Required and Optional variations.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/relationships.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Order(db.Entity):\n    items = Set(\"OrderItem\")\n\nclass OrderItem(db.Entity):\n    order = Required(Order)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Order(db.Entity):\n    items = Set(\"OrderItem\")\n\nclass OrderItem(db.Entity):\n    order = Optional(Order)\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with Composite Primary Key - Python\nDESCRIPTION: Demonstrates how to create a composite primary key by combining multiple Required attributes. The PrimaryKey directive is used without creating an attribute, but rather to combine existing attributes.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Example(db.Entity):\n    a = Required(int)\n    b = Required(str)\n    PrimaryKey(a, b)\n```\n\n----------------------------------------\n\nTITLE: Selecting Entity Objects with Aggregated Values in PonyORM Python\nDESCRIPTION: Demonstrates how to create a query that returns tuples containing entity objects along with aggregated values. This example counts the cars owned by each person.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> select((p, count(p.cars)) for p in Person)[:]\n\nSELECT \"p\".\"id\", COUNT(DISTINCT \"car-1\".\"id\")\nFROM \"Person\" \"p\"\n  LEFT JOIN \"Car\" \"car-1\"\n    ON \"p\".\"id\" = \"car-1\".\"owner\"\nGROUP BY \"p\".\"id\"\n\n[(Person[1], 0), (Person[2], 1), (Person[3], 1)]\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Routes with PonyORM Queries\nDESCRIPTION: FastAPI route handlers for retrieving person data using PonyORM queries. Shows both list and single item retrieval with proper db_session usage.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/integration_with_fastapi.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api.get('/persons')\nasync def read_all_persons():\n    with db_session:\n       persons = Person.select()\n       result = [PersonInDB.from_orm(p) for p in persons]\n    return result\n\n@api.get('/person/{pid}')\nasync def read_single_person(pid: int):\n    with db_session:\n        person = Person[pid]\n        result = PersonInDB.from_orm(person)\n    return result\n```\n\n----------------------------------------\n\nTITLE: Resolving Cyclic Dependencies with flush()\nDESCRIPTION: Shows how to use the flush() method to resolve cyclic dependencies when saving related entities that reference each other.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nwith db_session:\n    john = TeamMember(name='John')\n    mary = TeamMember(name='Mary')\n    flush() # saves objects created by this moment in the database\n    team = Team(name='Tenacity', team_members=[john, mary], captain=mary)\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relationship Definition in Pony ORM\nDESCRIPTION: Shows how to create one-to-one relationships between Person and Passport entities using Optional and Required attributes.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/relationships.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    passport = Optional(\"Passport\")\n\nclass Passport(db.Entity):\n    person = Required(\"Person\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Objects by Primary Key in PonyORM Python\nDESCRIPTION: Demonstrates how to retrieve an object by its primary key using square bracket notation. Objects already in the session cache don't require additional database queries.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> p1 = Person[1]\n>>> print p1.name\nJohn\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Attribute Unique Key - Python\nDESCRIPTION: Demonstrates how to create a unique key for a single attribute by using the unique=True option. This is a simpler alternative to using composite_key for a single attribute.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Product(db.Entity):\n    name = Required(str, unique=True)\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Integration Example\nDESCRIPTION: Demonstration of using raw SQL within Pony ORM queries with parameter binding\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom pony.orm import *\n\ndb = Database('sqlite', ':memory:')\n\nclass Person(db.Entity):\n    id = PrimaryKey(int)\n    name = Required(str)\n    age = Required(int)\n    dob = Required(date)\n\ndb.generate_mapping(create_tables=True)\n\nwith db_session:\n    Person(id=1, name='John', age=30, dob=date(1986, 1, 1))\n    Person(id=2, name='Mike', age=32, dob=date(1984, 5, 20))\n    Person(id=3, name='Mary', age=20, dob=date(1996, 2, 15))\n```\n\n----------------------------------------\n\nTITLE: Assigning values to JSON attributes in Pony ORM\nDESCRIPTION: Demonstrates how to create entity objects with JSON structures as attribute values. Creates two Product objects with complex nested dictionary structures for info and tags.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np1 = Product(name='Samsung Galaxy S7 edge',\n             info={\n                 'display': {\n                    'size': 5.5,\n                 },\n                 'battery': 3600,\n                 '3.5mm jack': True,\n                 'SD card slot': True,\n                 'colors': ['Black', 'Grey', 'Gold'],\n             },\n             tags=['Smartphone', 'Samsung'])\n\np2 = Product(name='iPhone 6s',\n             info={\n                 'display': {\n                    'size': 4.7,\n                    'resolution': [750, 1334],\n                    'multi-touch': True,\n                 },\n                 'battery': 1810,\n                 '3.5mm jack': True,\n                 'colors': ['Silver', 'Gold', 'Space Gray', 'Rose Gold'],\n             },\n             tags=['Smartphone', 'Apple', 'Retina'])\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Entity Relationships in Pony ORM\nDESCRIPTION: Demonstrates how to define a one-to-many relationship between Person and Car entities using Set and Optional relationship types.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_relationships.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    cars = Set('Car')\n\nclass Car(db.Entity):\n    owner = Optional(Person)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Query Results in PonyORM Python\nDESCRIPTION: Demonstrates how to iterate over query results using a for loop without using the slice operator. This example filters persons whose names contain the letter 'o'.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> persons = select(p for p in Person if 'o' in p.name)\n>>> for p in persons:\n...     print p.name, p.age\n...\nSELECT \"p\".\"id\", \"p\".\"name\", \"p\".\"age\"\nFROM \"Person\" \"p\"\nWHERE \"p\".\"name\" LIKE '%o%'\n\nJohn 20\nBob 30\n```\n\n----------------------------------------\n\nTITLE: Database Binding in PonyORM - PostgreSQL Example\nDESCRIPTION: Demonstrates how to bind a Database instance to a PostgreSQL database with connection parameters.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/database.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb.bind(provider='postgres', user='', password='', host='', database='')\n```\n\n----------------------------------------\n\nTITLE: Using parameters in JSON path expressions with Pony ORM\nDESCRIPTION: Shows how to use variables within JSON path expressions to dynamically access nested properties. Demonstrates using variables for array indices and dictionary keys.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nindex = 0\nProduct.select(lambda p: p.info['display']['resolution'][index] < 2000)\n\nkey = 'display'\nProduct.select(lambda p: p.info[key]['resolution'][index] > 1000)\n```\n\n----------------------------------------\n\nTITLE: Self-Reference Relationships in Pony ORM\nDESCRIPTION: Illustrates different types of self-reference relationships including symmetric and non-symmetric relationships within the Person entity.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/relationships.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    name = Required(str)\n    spouse = Optional(\"Person\", reverse=\"spouse\") # symmetric one-to-one\n    friends = Set(\"Person\", reverse=\"friends\")    # symmetric many-to-many\n    manager = Optional(\"Person\", reverse=\"employees\") # one side of non-symmetric\n    employees = Set(\"Person\", reverse=\"manager\") # another side of non-symmetric\n```\n\n----------------------------------------\n\nTITLE: Importing Pony ORM\nDESCRIPTION: Two different ways to import Pony ORM - importing all components or just the orm module\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from pony.orm import *\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from pony import orm\n```\n\n----------------------------------------\n\nTITLE: Creating Database Object in PonyORM\nDESCRIPTION: Initializes a new Database instance that will be used for entity mapping and database operations.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/database.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb = Database()\n```\n\n----------------------------------------\n\nTITLE: Establishing Entity Relationships\nDESCRIPTION: Shows how to establish relationships between entities and check relationship attributes.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_relationships.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> c1.owner = p1\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON structures as query results in Pony ORM\nDESCRIPTION: Shows how to extract JSON sub-structures directly in query results instead of retrieving full entities.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nselect(p.info['display'] for p in Product)\n```\n\n----------------------------------------\n\nTITLE: Creating Pydantic Schemas for PonyORM Models\nDESCRIPTION: Definition of Pydantic models for serializing PonyORM entities with proper validation for relationships. Includes custom validator for converting PonyORM sets to lists.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/integration_with_fastapi.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CarOut(BaseModel):\n    make: str\n    model: str\n\nclass PersonInDB(BaseModel):\n    name: str\n    age: int\n    cars: List[CarOut]\n\n    @validator('cars', pre=True, allow_reuse=True)\n    def pony_set_to_list(cls, values):\n        return [v.to_dict() for v in values]\n\n    class Config:\n        orm_mode = True\n```\n\n----------------------------------------\n\nTITLE: Filtering Existing Queries in Pony ORM\nDESCRIPTION: Shows how to apply additional filters to an existing query using the filter() function, which accepts a lambda expression with filtering conditions.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nquery2 = query.filter(lambda person: person.age > 18)\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Binding in PonyORM\nDESCRIPTION: Shows how to bind to a SQLite database file with optional database creation.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/database.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndb.bind(provider='sqlite', filename='database.sqlite', create_db=True)\n```\n\n----------------------------------------\n\nTITLE: Using wildcards in JSON queries with Pony ORM\nDESCRIPTION: Demonstrates how to use wildcards in JSON path expressions to match any dictionary element or list item. Works with MySQL and Oracle.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nselect(p.info['display'][...] for p in Product)\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Query Example with Entity Inheritance - Python\nDESCRIPTION: Shows how Pony handles polymorphic queries on base entities. When querying a base entity, Pony returns the correct entity instances with all their specific attributes.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfor p in Person.select():\n    if isinstance(p, Professor):\n        print p.name, p.degree\n    elif isinstance(p, Student):\n        print p.name, p.gpa\n    else:  # somebody else\n        print p.name\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Attribute in Pony ORM\nDESCRIPTION: Demonstrates how to increment a numeric attribute of a Product entity with ID 123.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nProduct[123].quantity += 10\n```\n\n----------------------------------------\n\nTITLE: Working with Multiple Databases in Pony ORM\nDESCRIPTION: This example demonstrates how to work with multiple databases (PostgreSQL and MySQL) simultaneously in Pony ORM, showing entity definition and transaction handling across databases.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndb1 = Database()\n\nclass User(db1.Entity):\n    ...\n\ndb1.bind('postgres', ...)\n\n\ndb2 = Database()\n\nclass Address(db2.Entity):\n    ...\n\ndb2.bind('mysql', ...)\n\n@db_session\ndef do_something(user_id, address_id):\n    u = User[user_id]\n    a = Address[address_id]\n    ...\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results with order_by() Using Lambda Functions\nDESCRIPTION: Shows how to use lambda functions with order_by() for more flexible sorting expressions in queries.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nProduct.select(lambda p: p.price > 100).order_by(lambda p: desc(p.price))\n```\n\n----------------------------------------\n\nTITLE: Modifying JSON attributes in Pony ORM\nDESCRIPTION: Demonstrates how to modify JSON structures using standard Python dictionary and list operations. Shows appending to lists, modifying nested values, and other operations that will persist to the database on commit.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> Product[1].info['colors'].append('Silver')\n>>> Product[1].info['colors']\n['Black', 'Grey', 'Gold', 'Silver']\n```\n\n----------------------------------------\n\nTITLE: Array Membership Testing in PonyORM\nDESCRIPTION: Shows how to check if single or multiple elements exist in an array using PonyORM query syntax.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/array.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nselect(p for p in Product if 'apple' in p.tags)[:]\nselect(p for p in Product if ['LCD', 'DVD', 'SSD'] in p.tags)[:]\n```\n\n----------------------------------------\n\nTITLE: Multiple Relationships Between Entities in Pony ORM\nDESCRIPTION: Shows how to define multiple relationships between the same pair of entities (User and Tweet) using reverse attribute specification.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/relationships.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass User(db.Entity):\n    tweets = Set(\"Tweet\", reverse=\"author\")\n    favorites = Set(\"Tweet\", reverse=\"favorited\")\n\nclass Tweet(db.Entity):\n    author = Required(User, reverse=\"tweets\")\n    favorited = Set(User, reverse=\"favorites\")\n```\n\n----------------------------------------\n\nTITLE: Collection Operations with Relationships\nDESCRIPTION: Demonstrates various collection operations like add(), remove(), and membership testing on relationship attributes.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_relationships.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> p1.cars.remove(Car[1])\n>>> print p1.cars\nCarSet([])\n\n>>> p1.cars.add(Car[1])\n>>> print p1.cars\nCarSet([Car[1]])\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results with order_by() Using Entity Attributes\nDESCRIPTION: Demonstrates how to sort query results using the order_by() method with entity attributes, including the desc() function for descending order.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nProduct.select(lambda p: p.price > 100).order_by(desc(Product.price))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Results in Pony ORM\nDESCRIPTION: Shows how to retrieve the first result from a query using the first() method of the Query object returned by select().\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncustomer_name = query3.first()\n```\n\n----------------------------------------\n\nTITLE: Counting Students by Group with select()\nDESCRIPTION: Shows two ways to count students in each group related to a specific department using select() and count().\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nselect((g, count(g.students)) for g in Group if g.dept.number == 44)\n```\n\nLANGUAGE: python\nCODE:\n```\nselect((s.group, count(s)) for s in Student if s.group.dept.number == 44)\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Secondary Key - Python\nDESCRIPTION: Shows how to define a composite secondary key (unique constraint) using the composite_key directive, which will be translated to a UNIQUE constraint in the database.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Example(db.Entity):\n    a = Required(str)\n    b = Optional(int)\n    composite_key(a, b)\n```\n\n----------------------------------------\n\nTITLE: Returning Tuples from Queries in Pony ORM\nDESCRIPTION: Demonstrates how queries can return tuples containing both entities and calculated expressions, rather than just entity objects.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nselect((c, sum(c.orders.total_price))\n       for c in Customer if sum(c.orders.total_price) > 1000)\n```\n\n----------------------------------------\n\nTITLE: Importing and Populating Example Database in PonyORM Python\nDESCRIPTION: Demonstrates how to import the estore example from PonyORM's distribution package and populate it with sample data. The first import creates an SQLite database with the necessary tables.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> from pony.orm.examples.estore import *\n>>> populate_database()\n```\n\n----------------------------------------\n\nTITLE: Using max() Function in Pony ORM for Finding Maximum Value\nDESCRIPTION: Shows how to find the maximum value (newest birth date) of students in a specific group.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmax(s.dob for s in Student if s.group.number == 101)\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with Implicit Primary Key - Python\nDESCRIPTION: Demonstrates an entity definition where the primary key is not explicitly defined. Pony will automatically create an 'id' primary key attribute of type int with auto-increment enabled.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Product(db.Entity):\n    name = Required(str, unique=True)\n    price = Required(Decimal)\n    description = Optional(str)\n```\n\n----------------------------------------\n\nTITLE: Attribute Selection Query with DISTINCT\nDESCRIPTION: Example of selecting specific attributes with automatic DISTINCT handling\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nselect(p.name for p in Person)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT \"p\".\"name\"\nFROM \"Person\" \"p\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Entity Inheritance - Python\nDESCRIPTION: Demonstrates single inheritance for entities where Student and Professor inherit from Person. All attributes from the base entity are inherited by descendants.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    name = Required(str)\n\nclass Student(Person):\n    gpa = Optional(Decimal)\n    mentor = Optional(\"Professor\")\n\nclass Professor(Person):\n    degree = Required(str)\n    students = Set(\"Student\")\n```\n\n----------------------------------------\n\nTITLE: Using avg() Function in Pony ORM for Calculating Average\nDESCRIPTION: Demonstrates how to calculate the average GPA in a specific department using the avg() function.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\navg(s.gpa for s in Student if s.group.dept.number == 44)\n```\n\n----------------------------------------\n\nTITLE: Customizing Composite Attribute Column Names in Pony ORM\nDESCRIPTION: Demonstrates how to customize column names for composite attributes using the columns option with a list of column names. This example shows customization for a foreign key reference to a composite primary key.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass Course(db.Entity):\n    name = Required(str)\n    semester = Required(int)\n    lectures = Set(\"Lecture\")\n    PrimaryKey(name, semester)\n\nclass Lecture(db.Entity):\n    date = Required(datetime)\n    course = Required(Course, columns=[\"name_of_course\", \"semester\"])\n```\n\n----------------------------------------\n\nTITLE: Multiple Database Provider Bindings in PonyORM\nDESCRIPTION: Examples of binding to different database providers including SQLite, MySQL, Oracle, and CockroachDB.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/database.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndb.bind(provider='sqlite', filename=':sharedmemory:')\ndb.bind(provider='sqlite', filename='filename', create_db=True)\ndb.bind(provider='mysql', host='', user='', passwd='', db='')\ndb.bind(provider='oracle', user='', password='', dsn='')\ndb.bind(provider='cockroach', user='', password='', host='',\n        database='', sslmode='disable')\n```\n\n----------------------------------------\n\nTITLE: Declaring Array Attributes in PonyORM Entity\nDESCRIPTION: Example of defining entity class with IntArray and StrArray attributes in PonyORM. Shows how to create a Product entity with array fields and insert sample data.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/array.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pony.orm import *\n\ndb = Database()\n\n\nclass Product(db.Entity):\n    id = PrimaryKey(int, auto=True)\n    name = Required(str)\n    stars = Optional(IntArray)\n    tags = Optional(StrArray)\n\n\ndb.bind('sqlite', ':memory:')\ndb.generate_mapping(create_tables=True)\n\nwith db_session:\n    Product(name='Apple MacBook', stars=[0, 2, 0, 5, 10], tags=['Apple', 'Notebook'])\n```\n\n----------------------------------------\n\nTITLE: Using Expressions Inside Aggregate Functions\nDESCRIPTION: Demonstrates how to use expressions (multiplication of price and quantity) inside aggregate functions.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nselect((item.order, sum(item.price * item.quantity))\n            for item in OrderItem if item.order.id == 123)\n```\n\nLANGUAGE: python\nCODE:\n```\nselect((order, sum(order.items.price * order.items.quantity))\n            for order in Order if order.id == 123)\n```\n\n----------------------------------------\n\nTITLE: Querying JSON array length in Pony ORM\nDESCRIPTION: Shows how to filter entities based on the length of JSON arrays using the len() function in query expressions.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# products with more than 2 tags\nProduct.select(lambda p: len(p.info['tags']) > 2)\n```\n\n----------------------------------------\n\nTITLE: Reading JSON attributes in Pony ORM\nDESCRIPTION: Shows how to access JSON data stored in entity attributes. Demonstrates accessing dictionary values, nested structures, and checking for membership in JSON arrays.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Product[1].info\n{'battery': 3600, '3.5mm jack': True, 'colors': ['Black', 'Grey', 'Gold'],\n'display': 5.5}\n\n>>> Product[1].info['colors']\n['Black', 'Grey', 'Gold']\n\n>>> Product[1].info['colors'][0]\n'Black'\n\n>>> 'Black' in Product[1].info['colors']\nTrue\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements in PonyORM Queries\nDESCRIPTION: Examples of accessing specific array elements and slices in PonyORM queries using index notation.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/array.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nselect(p.tags[2] for p in Product)[:]  # third element\nselect(p.tags[-1] for p in Product)[:]  # last element\n```\n\n----------------------------------------\n\nTITLE: Query Using Attribute Lifting in Pony ORM\nDESCRIPTION: This snippet demonstrates the attribute lifting feature of Pony ORM, which provides a more concise syntax for accessing attributes of related objects in queries.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nquery = select(c for c in Customer\n               if sum(c.orders.total_price) > 1000)\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Results in Tabular Format with show() Method in PonyORM Python\nDESCRIPTION: Demonstrates the show() method to display query results in a tabular format, which is useful for interactive debugging. The example shows displaying Person objects ordered by name.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> select(p for p in Person).order_by(Person.name)[:2].show()\n\nSELECT \"p\".\"id\", \"p\".\"name\", \"p\".\"age\"\nFROM \"Person\" \"p\"\nORDER BY \"p\".\"name\"\nLIMIT 2\n\nid|name|age\n--+----+---\n3 |Bob |30 \n1 |John|20\n```\n\n----------------------------------------\n\nTITLE: Multiple Transactions in Single db_session\nDESCRIPTION: Example demonstrating how to handle multiple transactions within a single database session using commit() calls.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@db_session\ndef func1():\n    p1 = Product[123]\n    p1.price += 10\n    commit()          # the first transaction is committed\n    p2 = Product[456] # a new transaction is started\n    p2.price -= 10\n```\n\n----------------------------------------\n\nTITLE: Array Slicing in PonyORM Queries\nDESCRIPTION: Demonstrates how to use array slicing in PonyORM queries to retrieve a range of elements.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/array.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nselect(p.tags[:5] for p in Product)[:]  # first five elements\n```\n\n----------------------------------------\n\nTITLE: Generated SQL from Pony ORM select() Method\nDESCRIPTION: Shows the SQL query that Pony ORM generates from the select() method call, demonstrating how lambda functions are translated to SQL WHERE clauses.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"p\".\"id\", \"p\".\"name\", \"p\".\"description\",\n       \"p\".\"picture\", \"p\".\"price\", \"p\".\"quantity\"\nFROM \"Product\" \"p\"\nWHERE \"p\".\"price\" > 100\n```\n\n----------------------------------------\n\nTITLE: Using HAVING Conditions with Aggregate Functions\nDESCRIPTION: Shows how to create a query that uses both WHERE and HAVING conditions in Pony ORM, with aggregate functions properly placed in the HAVING clause.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nselect((s.group, count(s)) for s in Student\n           if s.group.dept.number == 44 and avg(s.gpa) > 4)\n```\n\n----------------------------------------\n\nTITLE: Converting Query to List in Pony ORM (Slice Method)\nDESCRIPTION: Demonstrates how to convert a Query object to a list of entity instances using the slice notation, which executes the query immediately.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nproduct_list = Product.select(lambda p: p.price > 100)[:]\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with Explicit Primary Key - Python\nDESCRIPTION: Shows how Pony would implement the implicit primary key explicitly. The primary key is defined as 'id' with integer type and auto-increment enabled.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Product(db.Entity):\n    id = PrimaryKey(int, auto=True)\n    name = Required(str, unique=True)\n    price = Required(Decimal)\n    description = Optional(str)\n```\n\n----------------------------------------\n\nTITLE: Modifying Array Elements in PonyORM\nDESCRIPTION: Example of modifying array elements by removing and appending items using PonyORM's array methods.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/array.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nproduct = Product.select().first()\nproduct.tags.remove('factory-new')\nproduct.tags.append('reconstructed')\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Index - Python\nDESCRIPTION: Shows how to define a composite index using the composite_index directive. This can be used to speed up data retrieval operations that filter on these attributes.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Example(db.Entity):\n    a = Required(str)\n    b = Optional(int)\n    composite_index(a, b)\n```\n\n----------------------------------------\n\nTITLE: Using isinstance() in Pony Queries - Python\nDESCRIPTION: Demonstrates how to use isinstance() inside a Pony query to filter entity instances by their type. This feature is available since Pony ORM 0.7.7.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nstaff = select(p for p in Person if not isinstance(p, Student))\n```\n\n----------------------------------------\n\nTITLE: Pagination with page() Method\nDESCRIPTION: Demonstrates the page() method for paginating query results, providing a convenient way to implement pagination in applications.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nProduct.select().order_by(lambda p: desc(p.price)).page(1)\n```\n\n----------------------------------------\n\nTITLE: Getting Entity by Unique Attribute Using get() Method\nDESCRIPTION: Retrieves an entity by a unique attribute using the get() method. Returns None if no object is found or raises MultipleObjectsFoundError if multiple objects match the criteria.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nproduct1 = Product.get(name='Product1')\n```\n\n----------------------------------------\n\nTITLE: Conditional count() with Subqueries\nDESCRIPTION: Demonstrates how to use the count() function with conditions to count students with different GPA ranges in each group.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nselect((g, count(s for s in g.students if s.gpa <= 3),\n               count(s for s in g.students if s.gpa > 3 and s.gpa <= 4),\n               count(s for s in g.students if s.gpa > 4)) for g in Group)\n```\n\n----------------------------------------\n\nTITLE: Checking for key or value existence in JSON with Pony ORM\nDESCRIPTION: Demonstrates how to query for the existence of keys in JSON dictionaries or values in JSON arrays using the 'in' operator.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# products which have the resolution specified\nProduct.select(lambda p: 'resolution' in p.info['display'])\n\n# products of black color\nProduct.select(lambda p: 'Black' in p.info['colors'])\n```\n\n----------------------------------------\n\nTITLE: Traversing To-Many Relationships\nDESCRIPTION: Demonstrates traversing to-many relationships, such as iterating through a customer's orders, with Pony's efficient loading strategy.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nc = Customer[123]\nfor order in c.orders:\n    print order.state, order.price\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Query Results in Pony ORM\nDESCRIPTION: Shows how to iterate over the results of a Query object to process entity instances. SQL is executed when iteration begins.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor p in Product.select(lambda p: p.price > 100):\n    print(p.name, p.price)\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions to Filter Groups\nDESCRIPTION: Shows how to find groups with an average GPA above a threshold using an aggregate function in the query condition.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nselect(g for g in Group if avg(s.gpa for s in g.students) > 4.5)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Entity Classes in Pony ORM\nDESCRIPTION: Defines a Product entity with a custom method get_name_and_price() that returns concatenated name and price. This demonstrates the direct approach of adding methods to entity classes.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass Product(db.Entity):\n    name = Required(str, unique=True)\n    price = Required(Decimal)\n\n    def get_name_and_price(self):\n        return \"%s (%s)\" % (self.name, self.price)\n```\n\n----------------------------------------\n\nTITLE: Basic select_by_sql usage\nDESCRIPTION: Shows the basic usage of select_by_sql method to execute a raw SQL query. Unlike select(), this method returns a list of entity instances directly rather than a Query object.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nProduct.select_by_sql(\"SELECT * FROM Products\")\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results Using Slice Notation\nDESCRIPTION: Shows how to limit the number of returned entities using Python slice notation, which executes the query and returns a list of entity instances.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nProduct.select().order_by(lambda p: desc(p.price))[:10]\n```\n\n----------------------------------------\n\nTITLE: Converting Query to List in Pony ORM (list() Function)\nDESCRIPTION: Shows an alternative way to convert a Query object to a list using the built-in list() function, which is equivalent to the slice notation.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nproduct_list = list(Product.select(lambda p: p.price > 100))\n```\n\n----------------------------------------\n\nTITLE: Using min() Function in Pony ORM for Finding Minimum Value\nDESCRIPTION: Demonstrates how to find the minimum value (first name alphabetically) of students who study philosophy.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmin(s.name for s in Student if \"Philosophy\" in s.courses.name)\n```\n\n----------------------------------------\n\nTITLE: Advanced Sorting with Aggregation Functions\nDESCRIPTION: Demonstrates advanced sorting using aggregation functions, ordering customers by the sum of their order total prices in descending order.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nCustomer.select().order_by(lambda c: desc(sum(c.orders.total_price)))\n```\n\n----------------------------------------\n\nTITLE: Using variable parameters in select_by_sql\nDESCRIPTION: Demonstrates how to use variable parameters in raw SQL queries with the $variable syntax or $(expression) for computed values. Parameters are automatically sanitized to prevent SQL injection.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nx = 1000\ny = 500\nProduct.select_by_sql(\"SELECT * FROM Product WHERE price > $x OR price = $(y * 2)\")\n```\n\n----------------------------------------\n\nTITLE: Generated SQL with Parameters in Pony ORM\nDESCRIPTION: Shows the parameterized SQL query generated when variables are used in Pony queries, demonstrating SQL injection prevention.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"p\".\"id\", \"p\".\"name\", \"p\".\"description\",\n       \"p\".\"picture\", \"p\".\"price\", \"p\".\"quantity\"\nFROM \"Product\" \"p\"\nWHERE \"p\".\"price\" > ?\n```\n\n----------------------------------------\n\nTITLE: Multiple Attribute Updates in Pony ORM\nDESCRIPTION: Shows how to update multiple attributes of an entity object individually using separate assignments.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\norder = Order[123]\norder.state = \"Shipped\"\norder.date_shipped = datetime.now()\n```\n\n----------------------------------------\n\nTITLE: Additional JSON modification examples in Pony ORM\nDESCRIPTION: Provides additional examples of modifying JSON structures including assigning new values, popping values, deleting keys, and manipulating lists within the JSON structure.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np = Product[1]\n\n# assigning a new value\np.info['display']['size'] = 4.7\n\n# popping a dict value\ndisplay_size = p.info['display'].pop('size')\n\n# removing a dict key using del\ndel p.info['display']\n\n# adding a dict key\np.info['display']['resolution'] = [1440, 2560]\n\n# removing a list item\ndel p.info['colors'][0]\n\n# replacing a list item\np.info['colors'][1] = ['White']\n\n# replacing a number of list items\np.info['colors'][1:] = ['White']\n```\n\n----------------------------------------\n\nTITLE: Deleting an Entity Object in Pony ORM\nDESCRIPTION: Shows how to delete an Order entity with ID 123 using the delete() method.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nOrder[123].delete()\n```\n\n----------------------------------------\n\nTITLE: Multi-attribute Sorting Using Entity Attributes\nDESCRIPTION: Shows how to sort by multiple attributes using comma-separated entity attributes in the order_by() method, for complex sorting requirements.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nProduct.select(lambda p: p.price > 100).order_by(desc(Product.price), Product.name)\n```\n\n----------------------------------------\n\nTITLE: Using Flask-Login Current User with Pony ORM\nDESCRIPTION: This snippet demonstrates how to use the current_user object from Flask-Login in a route that requires authentication. It shows how to access related entities (friends) from the current user entity.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/integration_with_flask.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/friends')\n@login_required\ndef friends():\n    return render_template('friends.html', friends=current_user.friends)\n```\n\n----------------------------------------\n\nTITLE: Grouping by Attribute Part in Pony ORM\nDESCRIPTION: Shows how to group by a part of an attribute (year of birth date) when calculating aggregates.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nselect((s.dob.year, avg(s.gpa)) for s in Student)\n```\n\n----------------------------------------\n\nTITLE: Manual Flush to Get Auto-Generated Primary Key\nDESCRIPTION: Example showing how to use the flush() method to save an entity to the database within a db_session to get an auto-generated primary key value.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nclass Customer(db.Entity):\n    id = PrimaryKey(int, auto=True)\n    email = Required(str)\n\n@db_session\ndef handler(email):\n    c = Customer(email=email)\n    # c.id is equal to None\n    # because it is not assigned by the database yet\n    c.flush()\n    # c is saved as a table row to the database.\n    # c.id has the value now\n    print(c.id)\n```\n\n----------------------------------------\n\nTITLE: Using raw_sql in order_by with lambda\nDESCRIPTION: Shows how to use raw SQL in an order_by clause with a lambda function, allowing for SQL functions like SUBSTR to be used in sorting.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nPerson.select().order_by(lambda p: raw_sql('SUBSTR(p.dob, $x)'))\n```\n\n----------------------------------------\n\nTITLE: Using Entity.set() Method in Pony ORM\nDESCRIPTION: Shows how to update multiple attributes at once using the set() method of an entity instance.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\norder = Order[123]\norder.set(state=\"Shipped\", date_shipped=datetime.now())\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Names in Pony ORM\nDESCRIPTION: Shows how to override the default table name generated by Pony ORM using the _table_ class attribute. This allows mapping entities to specific table names.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    _table_ = \"person_table\"\n    name = Required(str)\n```\n\n----------------------------------------\n\nTITLE: Displaying Car Objects with Related Owner References in PonyORM Python\nDESCRIPTION: Shows how the show() method displays Car objects with references to their owners. To-one relationships are displayed in the output, while to-many relationships would require additional queries.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> Car.select().show()\nid|make  |model   |owner    \n--+------+--------+---------\n1 |Toyota|Prius   |Person[2]\n2 |Ford  |Explorer|Person[3]\n```\n\n----------------------------------------\n\nTITLE: Customizing the Discriminator Column for Inheritance - Python\nDESCRIPTION: Shows how to customize the discriminator column used for inheritance by specifying a custom column name, type, and discriminator values for each entity in the hierarchy.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    cls_id = Discriminator(int)\n    _discriminator_ = 1\n    ...\n\nclass Student(Person):\n    _discriminator_ = 2\n    ...\n\nclass Professor(Person):\n    _discriminator_ = 3\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Dictionary with Entity.set() in Pony ORM\nDESCRIPTION: Demonstrates using the set() method with a dictionary to update multiple attributes at once.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\norder.set(**dict_with_new_values)\n```\n\n----------------------------------------\n\nTITLE: Entity Definitions with One-to-Many Relationship\nDESCRIPTION: Example showing Team and TeamMember entities with a one-to-many relationship where Pony automatically handles the order of database operations.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom pony.orm import *\n\ndb = Database()\n\nclass TeamMember(db.Entity):\n    name = Required(str)\n    team = Optional('Team')\n\nclass Team(db.Entity):\n    name = Required(str)\n    team_members = Set(TeamMember)\n\ndb.bind('sqlite', ':memory:')\ndb.generate_mapping(create_tables=True)\nset_sql_debug(True)\n\nwith db_session:\n    john = TeamMember(name='John')\n    mary = TeamMember(name='Mary')\n    team = Team(name='Tenacity', team_members=[john, mary])\n```\n\n----------------------------------------\n\nTITLE: Multiple Aggregates in Pony ORM\nDESCRIPTION: The Pony ORM equivalent of using multiple aggregate functions (min and max) in the same query.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nselect((s.group, min(s.gpa), max(s.gpa)) for s in Student)\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Index Using Attribute Names - Python\nDESCRIPTION: Demonstrates that composite indexes can be created using either the attribute objects or their names as strings. This example shows both approaches in the same index definition.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Example(db.Entity):\n    a = Required(str)\n    b = Optional(int)\n    composite_index(a, 'b')\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship with Cascade Delete Enabled\nDESCRIPTION: Example of entity relationship where cascade delete is explicitly enabled, causing the deletion of a Person to also delete any associated Passport.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    name = Required(str)\n    passport = Optional(\"Passport\", cascade_delete=True)\n\nclass Passport(db.Entity):\n    number = Required(str)\n    person = Required(\"Person\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Entity Instances with show() Function in PonyORM Python\nDESCRIPTION: Demonstrates using the show() function to display detailed information about an entity instance in a tabular format, including the entity class and attribute values.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> show(mary)\ninstance of Person\nid|name|age\n--+----+---\n2 |Mary|22\n```\n\n----------------------------------------\n\nTITLE: Pony ORM Query with Non-Aggregated Column in HAVING\nDESCRIPTION: A Pony ORM query where a condition with both non-aggregated (item.order.total_price) and aggregated (sum(...)) expressions is used. The non-aggregated column will be added to the GROUP BY clause to satisfy SQL standards.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nselect((item.order, item.order.total_price,\n     sum(item.price * item.quantity))\n     for item in OrderItem\n     if item.order.total_price < sum(item.price * item.quantity))\n```\n\n----------------------------------------\n\nTITLE: Separating Mixins into Different Files in Pony ORM\nDESCRIPTION: Shows how to separate entity mixins into a separate file (mixins.py) to keep custom methods separate from entity definitions. This approach is useful when using Pony's online ER diagram editor.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass ProductMixin(object):\n    def get_name_and_price(self):\n        return \"%s (%s)\" % (self.name, self.price)\n```\n\n----------------------------------------\n\nTITLE: Closing Connections in Pony ORM\nDESCRIPTION: Shows how to explicitly close a database connection that is stored in the connection pool. In multi-threaded applications, this needs to be executed separately in each thread.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndb.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Pickling Pony ORM Query Results in Python\nDESCRIPTION: This snippet demonstrates how to pickle Pony ORM query results for caching. It shows selecting Product entities with a price greater than 100, displaying them, and then pickling the results using cPickle.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> from pony.orm.examples.estore import *\n>>> products = select(p for p in Product if p.price > 100)[:]\n>>> products\n[Product[1], Product[2], Product[6]]\n>>> import cPickle\n>>> pickled_data = cPickle.dumps(products)\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions on Query Objects\nDESCRIPTION: Demonstrates how to call the sum() aggregate method on a Query object instead of using the function directly.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nselect(sum(s.gpa) for s in Student)\n```\n\nLANGUAGE: python\nCODE:\n```\nselect(s.gpa for s in Student).sum()\n```\n\n----------------------------------------\n\nTITLE: Importing Mixins in Models File for Pony ORM\nDESCRIPTION: Demonstrates how to import mixin classes from a separate file and use them with entity definitions. This shows the complete implementation of the mixin approach.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom decimal import Decimal\nfrom pony.orm import *\nfrom mixins import *\n\nclass Product(db.Entity, ProductMixin):\n    name = Required(str, unique=True)\n    price = Required(Decimal)\n```\n\n----------------------------------------\n\nTITLE: Basic Pony ORM Integration with Flask\nDESCRIPTION: This snippet demonstrates how to integrate Pony ORM with a Flask application using the Pony class from pony.flask. This integration automatically wraps each view function with a db_session, eliminating the need to manually manage database sessions.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/integration_with_flask.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom pony.flask import Pony\n\napp = Flask(__name__)\nPony(app)\n```\n\n----------------------------------------\n\nTITLE: Using No-Wait Option with Pessimistic Locking in Pony ORM\nDESCRIPTION: Examples showing how to use the nowait option with for_update to prevent waiting for locked rows, which causes the operation to fail immediately if it cannot acquire a lock.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nselect(p for p in Product if p.price > 100).for_update(nowait=True)\n# or\nProduct.get_for_update(id=123, nowait=True)\n```\n\n----------------------------------------\n\nTITLE: Using count() to Count Students in a Group\nDESCRIPTION: Demonstrates how to count the number of students in a specific group using the count() function.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ncount(s for s in Student if s.group.number == 101)\n```\n\n----------------------------------------\n\nTITLE: Using Mixin Classes for Entity Methods in Pony ORM\nDESCRIPTION: Demonstrates using a mixin class to add methods to entities, allowing separation of entity definitions from custom methods. This approach prevents custom methods from being overwritten when using Pony's ER diagram editor.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass ProductMixin(object):\n    def get_name_and_price(self):\n        return \"%s (%s)\" % (self.name, self.price)\n\nclass Product(db.Entity, ProductMixin):\n    name = Required(str, unique=True)\n    price = Required(Decimal)\n```\n\n----------------------------------------\n\nTITLE: Testing JSON values for truth in Pony ORM\nDESCRIPTION: Demonstrates how to use boolean logic on JSON values to filter entities based on truthiness of JSON properties.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# products with multi-touch displays\nselect(p for p in Product if p.info['display']['multi-touch'])\n```\n\n----------------------------------------\n\nTITLE: Money Transfer Function with Django ORM Transaction\nDESCRIPTION: Example implementation of a money transfer function using Django ORM with the @transaction.atomic decorator to ensure both operations are performed in a single transaction.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@transaction.atomic\ndef transfer_money(account_id1, account_id2, amount):\n    account1 = Account.objects.get(pk=account_id1)\n    account2 = Account.objects.get(pk=account_id2)\n    if amount > account1.amount:    # validation\n        raise ValueError(\"Not enough funds\")\n    account1.amount -= amount\n    account1.save()\n    account2.amount += amount\n    account2.save()\n```\n\n----------------------------------------\n\nTITLE: SQL Expression Parameters in PonyORM\nDESCRIPTION: Shows how to use Python expressions within SQL queries using PonyORM's parameter syntax.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/database.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nx = 10\na = 20\nb = 30\ndb.execute(\"SELECT * FROM Table1 WHERE column1 = $x and column2 = $(a + b)\")\n```\n\n----------------------------------------\n\nTITLE: Optimized Conditional count() in Pony ORM\nDESCRIPTION: Shows a more efficient way to use conditional count() without subqueries by placing conditions inside the count function.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nselect((s.group, count(s.gpa <= 3),\n                     count(s.gpa > 3 and s.gpa <= 4),\n                     count(s.gpa > 4)) for s in Student)\n```\n\n----------------------------------------\n\nTITLE: Date Query Translation to SQLite SQL\nDESCRIPTION: Shows how Pony translates a datetime attribute query into SQLite-specific SQL, using substring extraction and casting to get the month value.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"o\".\"id\", \"o\".\"state\", \"o\".\"date_created\", \"o\".\"date_shipped\",\n       \"o\".\"date_delivered\", \"o\".\"total_price\", \"o\".\"customer\"\nFROM \"Order\" \"o\"\nWHERE cast(substr(\"o\".\"date_created\", 6, 2) as integer) = 12\n```\n\n----------------------------------------\n\nTITLE: Photo-Tag Relationship Example\nDESCRIPTION: Shows how to define relationships with custom table and column names.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_relationships.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Photo(db.Entity):\n    tags = Set('Tag', table='photo_to_tag', column='tag_id')\n\nclass Tag(db.Entity):\n    photos = Set(Photo)\n```\n\n----------------------------------------\n\nTITLE: Customizing Many-to-Many Relationship Tables in Pony ORM\nDESCRIPTION: Shows how to customize the intermediate table and column names for many-to-many relationships using the table and columns options. This example renames the intermediate table to 'Study_Plans' with custom column names.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass Student(db.Entity):\n    name = Required(str)\n    courses = Set(\"Course\", table=\"Study_Plans\", columns=[\"course\", \"semester\"]))\n\nclass Course(db.Entity):\n    name = Required(str)\n    semester = Required(int)\n    students = Set(Student, column=\"student_id\")\n    PrimaryKey(name, semester)\n```\n\n----------------------------------------\n\nTITLE: Setting Schema and Table Names in Pony ORM\nDESCRIPTION: Demonstrates how to specify both schema name and table name for an entity in Pony ORM using a tuple with the _table_ attribute.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    _table_ = (\"my_schema\", \"person_table\")\n    name = Required(str)\n```\n\n----------------------------------------\n\nTITLE: Using left_join with Conditional count()\nDESCRIPTION: Demonstrates how to use left_join to ensure groups with no students are included in the results with zero counts.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nleft_join((g, count(s.gpa <= 3),\n               count(s.gpa > 3 and s.gpa <= 4), \n               count(s.gpa > 4)) for g in Group for s in g.students)\n```\n\n----------------------------------------\n\nTITLE: Entity Definitions with Cyclic Relationship\nDESCRIPTION: Example of Team and TeamMember entities with a cyclic relationship where a team can have a captain who is also a team member.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nclass TeamMember(db.Entity):\n    name = Required(str)\n    team = Optional('Team')\n    captain_of = Optional('Team')\n\nclass Team(db.Entity):\n    name = Required(str)\n    team_members = Set(TeamMember)\n    captain = Optional(TeamMember, reverse='captain_of')\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Instances\nDESCRIPTION: Example of creating Person and Car instances in Pony ORM with manual commit.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_relationships.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> p1 = Person(name='John')\n>>> c1 = Car(make='Toyota', model='Camry')\n>>> commit()\n```\n\n----------------------------------------\n\nTITLE: Using group_concat() Function in Pony ORM for String Aggregation\nDESCRIPTION: Shows how to concatenate student names into a comma-separated string for a specific group.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngroup_concat(s.name for s in Student if s.group.number == 101)\n```\n\n----------------------------------------\n\nTITLE: Checking for null values in JSON with Pony ORM\nDESCRIPTION: Shows how to query for null values or non-existent paths in JSON structures by comparing with None.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/json.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nProduct.select(lambda p: p.info['SD card slot'] is None)\n```\n\n----------------------------------------\n\nTITLE: Using Position Numbers in ORDER BY with Pony ORM\nDESCRIPTION: A Pony ORM query showing how to order results by position number instead of a lambda expression. The negative number (-2) indicates descending order for the second position in the result tuple.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nselect((s.group, avg(s.gpa)) for s in Student).order_by(-2)\n```\n\n----------------------------------------\n\nTITLE: Collection Attribute Queries\nDESCRIPTION: Examples of using collection attribute queries for filtering and ordering relationships.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_relationships.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng = Group[101]\ng.students.filter(lambda student: student.gpa > 3)[:]\n\ng.students.order_by(Student.name).page(2, pagesize=3)\n\ng.students.order_by(lambda s: s.name).limit(3, offset=3)\n\ng.students.random(2)\n\ns = Student[1]\ns.courses.select(lambda c: c.semester == 2).order_by(Course.name).page(1)\n```\n\n----------------------------------------\n\nTITLE: Multi-attribute Sorting Using Lambda Functions\nDESCRIPTION: Demonstrates multi-attribute sorting using lambda functions with a tuple return value, providing the same functionality as comma-separated arguments.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nProduct.select(lambda p: p.price > 100).order_by(lambda p: (desc(p.price), p.name))\n```\n\n----------------------------------------\n\nTITLE: Generated SQL with ORDER BY Clause\nDESCRIPTION: Shows the SQL query generated when using the order_by() method, demonstrating how Pony translates sort expressions to SQL ORDER BY clauses.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"p\".\"id\", \"p\".\"name\", \"p\".\"description\",\n       \"p\".\"picture\", \"p\".\"price\", \"p\".\"quantity\"\nFROM \"Product\" \"p\"\nWHERE \"p\".\"price\" > 100\nORDER BY \"p\".\"price\" DESC\n```\n\n----------------------------------------\n\nTITLE: SQL Generated by Pony ORM for Group By Query\nDESCRIPTION: The SQL query generated by Pony ORM from the previous Python example, showing how s.group is placed in the GROUP BY section and the avg(s.gpa) condition is moved to the HAVING clause.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"s\".\"group\", COUNT(DISTINCT \"s\".\"id\")\nFROM \"Student\" \"s\", \"Group\" \"group-1\"\nWHERE \"group-1\".\"dept\" = 44\n  AND \"s\".\"group\" = \"group-1\".\"number\"\nGROUP BY \"s\".\"group\"\nHAVING AVG(\"s\".\"gpa\") > 4\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Class in PonyORM\nDESCRIPTION: Creates an entity class that inherits from the Database object's Entity attribute, with a required string attribute.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/database.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyEntity(db.Entity):\n    attr1 = Required(str)\n```\n\n----------------------------------------\n\nTITLE: Date and Time Arithmetic in Pony ORM Queries\nDESCRIPTION: Shows how to perform date and time arithmetic in queries, with examples of how Pony handles datetime calculations differently based on whether they can be calculated in Python or need to be translated to SQL.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nselect(o for o in Order if o.date_created >= datetime.now() - timedelta(days=3))[:]\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Inheritance for Entities - Python\nDESCRIPTION: Demonstrates how to implement multiple inheritance with a diamond-like hierarchy where TeachingAssistant inherits from both Student and Teacher, which both inherit from Person.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    name = Required(str)\n\nclass Student(Person):\n    ...\n\nclass Teacher(Person):\n    ...\n\nclass Professor(Teacher):\n    ...\n\nclass TeachingAssistant(Student, Teacher):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Aggregate Queries in PonyORM Python\nDESCRIPTION: Shows how to execute an aggregate query to find the maximum age among all Person objects. The query returns a single scalar value rather than entity objects.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> print max(p.age for p in Person)\nSELECT MAX(\"p\".\"age\")\nFROM \"Person\" \"p\"\n\n30\n```\n\n----------------------------------------\n\nTITLE: Entity Mapping Generation in PonyORM\nDESCRIPTION: Generates database mapping for entities and optionally creates database tables.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/database.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndb.generate_mapping(create_tables=True)\n```\n\n----------------------------------------\n\nTITLE: Date Arithmetic with Attributes in Pony ORM Queries\nDESCRIPTION: Demonstrates how Pony translates arithmetic operations on date/time attributes to SQL functions specific to each database engine.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nselect(o for o in Order if o.date_created + timedelta(days=3) >= datetime.now())[:]\n\n```\n\n----------------------------------------\n\nTITLE: Unpickling Pony ORM Query Results in Python\nDESCRIPTION: This snippet demonstrates how to unpickle previously pickled Pony ORM entity objects. It loads the serialized data back into memory, restoring the Product entity objects for use within the current db_session.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> products = cPickle.loads(pickled_data)\n>>> products\n[Product[1], Product[2], Product[6]]\n```\n\n----------------------------------------\n\nTITLE: Future Bulk Update Syntax in Pony ORM\nDESCRIPTION: Shows the planned syntax for bulk updates that will allow updating multiple objects without loading them to cache.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nupdate(p.set(price=price * 1.1) for p in Product\n                                if p.category.name == \"T-Shirt\")\n```\n\n----------------------------------------\n\nTITLE: Creating Database Instance\nDESCRIPTION: Initializing a new Database object for entity management\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> db = Database()\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship with Cascade Delete Disabled\nDESCRIPTION: Example of entity relationship where cascade delete is explicitly disabled, which will raise a ConstraintError if deletion is attempted on a group with students.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nclass Group(db.Entity):\n    major = Required(str)\n    items = Set(\"Student\", cascade_delete=False)\n\nclass Student(db.Entity):\n    name = Required(str)\n    group = Required(Group)\n```\n\n----------------------------------------\n\nTITLE: Using group_concat with Article Tags\nDESCRIPTION: Shows how to use the group_concat function to retrieve all tags for an article in a single query.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nselect((article, group_concat(article.tags)) for article in Aricle)\n```\n\n----------------------------------------\n\nTITLE: Database Session Exception Example\nDESCRIPTION: Example of error message when attempting to access database attributes outside of db_session scope.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDatabaseSessionIsOver: Cannot load attribute Customer[3].name: the database session is over\n```\n\n----------------------------------------\n\nTITLE: Database Session Decorator Example\nDESCRIPTION: Using the db_session decorator for database operations\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@db_session\ndef print_person_name(person_id):\n```\n\n----------------------------------------\n\nTITLE: Using Attribute Lifting with Aggregate Functions\nDESCRIPTION: Demonstrates a shorter way to write aggregate queries using Pony's attribute lifting feature.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nselect(g for g in Group if avg(g.students.gpa) > 4.5)\n```\n\n----------------------------------------\n\nTITLE: Importing the eStore Example in Pony ORM\nDESCRIPTION: Shows how to import the eCommerce store example that comes with Pony ORM distribution, which can be used to try out queries in interactive mode.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from pony.orm.examples.estore import *\n```\n\n----------------------------------------\n\nTITLE: Postgres Error on Concurrent Update\nDESCRIPTION: Example of the error message received from PostgreSQL when a concurrent transaction changes the same data, demonstrating the database's built-in concurrency control mechanism.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nERROR:  could not serialize access due to concurrent update\n```\n\n----------------------------------------\n\nTITLE: Using Raw SQL Queries to Select Entities in PonyORM Python\nDESCRIPTION: Demonstrates how to use raw SQL queries to select entity objects with the select_by_sql method. Parameters can be passed using the $variable syntax for proper escaping.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> x = 25\n>>> Person.select_by_sql('SELECT * FROM Person p WHERE p.age < $x')\n\nSELECT * FROM Person p WHERE p.age < ?\n[25]\n\n[Person[1], Person[2]]\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Names in Pony ORM\nDESCRIPTION: Shows how to customize column names for entity attributes using the column option. This allows mapping entity attributes to specific database column names.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/entities.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass Person(db.Entity):\n    _table_ = \"person_table\"\n    name = Required(str, column=\"person_name\")\n```\n\n----------------------------------------\n\nTITLE: Running the Pony Flask Example\nDESCRIPTION: Command to run the provided example of Pony ORM integration with Flask. The example is included in the Pony ORM package and can be run as a module.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/integration_with_flask.rst#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython -m pony.flask.example\n```\n\n----------------------------------------\n\nTITLE: SQL Standard Example for GROUP BY Requirements\nDESCRIPTION: A SQL example showing a standard aggregation query with columns A, B, C that would need to be included in the GROUP BY clause according to SQL standards.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT A, B, C, SUM(D), MAX(E), COUNT(F)\nFROM T1\nWHERE ...\nGROUP BY ...\nHAVING ...\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries Without Entities in PonyORM Python\nDESCRIPTION: Shows how to execute raw SQL queries directly on the database without involving entity objects, using the Database.select method. Parameters use the $variable syntax.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> x = 20\n>>> db.select('name FROM Person WHERE age > $x')\nSELECT name FROM Person WHERE age > ?\n[20]\n\n[u'Mary', u'Bob']\n```\n\n----------------------------------------\n\nTITLE: Connection Behavior Customization in PonyORM\nDESCRIPTION: Demonstrates how to customize database connection behavior using the on_connect decorator.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/database.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndb = Database()\n\n@db.on_connect(provider='sqlite')\ndef sqlite_case_sensitivity(db, connection):\n    cursor = connection.cursor()\n    cursor.execute('PRAGMA case_sensitive_like = OFF')\n\ndb.bind(**options)\ndb.generate_mapping(create_tables=True)\n```\n\n----------------------------------------\n\nTITLE: Correct Generator Function with db_session\nDESCRIPTION: Example showing proper usage of db_session decorator with a generator function.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@db_session\ndef my_generator( x ):\n    obj = MyEntity.get(id=x)\n    yield obj\n```\n\n----------------------------------------\n\nTITLE: Date Query Translation to PostgreSQL SQL\nDESCRIPTION: Shows how the same datetime attribute query is translated to PostgreSQL syntax, using the EXTRACT function to get the month value.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"o\".\"id\", \"o\".\"state\", \"o\".\"date_created\", \"o\".\"date_shipped\",\n       \"o\".\"date_delivered\", \"o\".\"total_price\", \"o\".\"customer\"\nFROM \"order\" \"o\"\nWHERE EXTRACT(MONTH FROM \"o\".\"date_created\") = 12\n```\n\n----------------------------------------\n\nTITLE: Loading Entity with Composite Primary Key in Pony ORM\nDESCRIPTION: Retrieves an entity instance with a composite primary key by listing all key components in the square brackets in the same order as defined in the entity class.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/working_with_entity_instances.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\norder_item = OrderItem[order1, product1]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Generator Function with db_session\nDESCRIPTION: Example showing incorrect usage of db_session context manager in a generator function.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/transactions.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef my_generator(x):\n    with db_session: # it won't work here!\n        obj = MyEntity.get(id=x)\n        yield obj\n```\n\n----------------------------------------\n\nTITLE: Passing custom variable scopes to select_by_sql\nDESCRIPTION: Shows how to pass custom globals and locals dictionaries to the select_by_sql method to provide variable values that may not be in the current scope.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nProduct.select_by_sql(\"SELECT * FROM Product WHERE price > $x OR price = $(y * 2)\",\n                       globals={'x': 100}, locals={'y': 200})\n```\n\n----------------------------------------\n\nTITLE: Using raw_sql in order_by without lambda\nDESCRIPTION: Demonstrates using raw SQL in an order_by clause without lambda by using the default entity alias (first letter of entity name).\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/queries.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nx = 9\nPerson.select().order_by(raw_sql('SUBSTR(p.dob, $x)'))\n```\n\n----------------------------------------\n\nTITLE: Error Message for Missing Pony ORM Function Import\nDESCRIPTION: Displays the error message that occurs when using standard Python functions with declarative queries without importing Pony's functions.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/aggregations.rst#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nTypeError: Use a declarative query in order to iterate over entity\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure in reStructuredText for Pony ORM Documentation\nDESCRIPTION: A reStructuredText directive that defines the table of contents for Pony ORM documentation. The toctree directive with maxdepth:3 creates a hierarchical structure listing all documentation pages including basic concepts, entity management, queries, and framework integrations.\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/toc.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n\n   index\n   firststeps\n   database\n   entities\n   relationships\n   transactions\n   working_with_entity_instances\n   queries\n   working_with_relationships\n   aggregations\n   json\n   array\n   api_reference\n   integration_with_flask\n   integration_with_fastapi\n```\n\n----------------------------------------\n\nTITLE: Installing Pony ORM with pip\nDESCRIPTION: Command to install Pony ORM using pip package manager\nSOURCE: https://github.com/ponyorm/pony-doc/blob/master/firststeps.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install pony\n```"
  }
]